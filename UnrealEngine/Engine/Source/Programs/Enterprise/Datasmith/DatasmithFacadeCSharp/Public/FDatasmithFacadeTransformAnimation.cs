// Copyright Epic Games, Inc. All Rights Reserved.

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FDatasmithFacadeTransformAnimation : FDatasmithFacadeBaseAnimation {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FDatasmithFacadeTransformAnimation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTransformAnimation_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FDatasmithFacadeTransformAnimation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DatasmithFacadeCSharpPINVOKE.delete_FDatasmithFacadeTransformAnimation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public FDatasmithFacadeTransformAnimation(string InName) : this(DatasmithFacadeCSharpPINVOKE.new_FDatasmithFacadeTransformAnimation(InName), true) {
  }

  public void AddFrame(EDatasmithFacadeAnimationTransformType TransformType, int FrameNumber, float X, float Y, float Z) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTransformAnimation_AddFrame(swigCPtr, (int)TransformType, FrameNumber, X, Y, Z);
  }

  public int GetFramesCount(EDatasmithFacadeAnimationTransformType TransformType) {
    int ret = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTransformAnimation_GetFramesCount(swigCPtr, (int)TransformType);
    return ret;
  }

  public void SetCurveInterpMode(EDatasmithFacadeAnimationTransformType TransformType, EDatasmithFacadeCurveInterpMode CurveInterpMode) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTransformAnimation_SetCurveInterpMode(swigCPtr, (int)TransformType, (int)CurveInterpMode);
  }

  public EDatasmithFacadeCurveInterpMode GetCurveInterpMode(EDatasmithFacadeAnimationTransformType TransformType) {
    EDatasmithFacadeCurveInterpMode ret = (EDatasmithFacadeCurveInterpMode)DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTransformAnimation_GetCurveInterpMode(swigCPtr, (int)TransformType);
    return ret;
  }

  public void GetFrame(EDatasmithFacadeAnimationTransformType TransformType, int Index, out int OutFrameNumber, out double OutX, out double OutY, out double OutZ) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTransformAnimation_GetFrame(swigCPtr, (int)TransformType, Index, out OutFrameNumber, out OutX, out OutY, out OutZ);
  }

  public void RemoveFrame(EDatasmithFacadeAnimationTransformType TransformType, int Index) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTransformAnimation_RemoveFrame(swigCPtr, (int)TransformType, Index);
  }

  public EDatasmithFacadeTransformChannels GetEnabledTransformChannels() {
    EDatasmithFacadeTransformChannels ret = (EDatasmithFacadeTransformChannels)DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTransformAnimation_GetEnabledTransformChannels(swigCPtr);
    return ret;
  }

  public void SetEnabledTransformChannels(EDatasmithFacadeTransformChannels Channels) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTransformAnimation_SetEnabledTransformChannels(swigCPtr, (int)Channels);
  }

}
