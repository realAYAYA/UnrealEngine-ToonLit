// Copyright Epic Games, Inc. All Rights Reserved.

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FDatasmithFacadeMaterialsUtils : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FDatasmithFacadeMaterialsUtils(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FDatasmithFacadeMaterialsUtils obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FDatasmithFacadeMaterialsUtils() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DatasmithFacadeCSharpPINVOKE.delete_FDatasmithFacadeMaterialsUtils(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class FUVEditParameters : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal FUVEditParameters(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FUVEditParameters obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~FUVEditParameters() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            DatasmithFacadeCSharpPINVOKE.delete_FDatasmithFacadeMaterialsUtils_FUVEditParameters(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public void SetUVOffset(float X, float Y) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_SetUVOffset(swigCPtr, X, Y);
    }
  
    public void GetUVOffset(out float OutX, out float OutY) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_GetUVOffset(swigCPtr, out OutX, out OutY);
    }
  
    public void SetUVTiling(float X, float Y) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_SetUVTiling(swigCPtr, X, Y);
    }
  
    public void GetUVTiling(out float OutX, out float OutY) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_GetUVTiling(swigCPtr, out OutX, out OutY);
    }
  
    public void SetRotationPivot(float X, float Y, float Z) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_SetRotationPivot(swigCPtr, X, Y, Z);
    }
  
    public void GetRotationPivot(out float OutX, out float OutY, out float OutZ) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_GetRotationPivot(swigCPtr, out OutX, out OutY, out OutZ);
    }
  
    public void SetRotationAngle(float Angle) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_SetRotationAngle(swigCPtr, Angle);
    }
  
    public float GetRotationAngle() {
      float ret = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_GetRotationAngle(swigCPtr);
      return ret;
    }
  
    public void SetChannelIndex(byte ChannelIndex) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_SetChannelIndex(swigCPtr, ChannelIndex);
    }
  
    public byte GetChannelIndex() {
      byte ret = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_GetChannelIndex(swigCPtr);
      return ret;
    }
  
    public void SetIsUsingRealWorldScale(bool bIsUsingRealWorldScale) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_SetIsUsingRealWorldScale(swigCPtr, bIsUsingRealWorldScale);
    }
  
    public bool GetIsUsingRealWorldScale() {
      bool ret = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_GetIsUsingRealWorldScale(swigCPtr);
      return ret;
    }
  
    public void SetMirrorU(bool bMirrorU) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_SetMirrorU(swigCPtr, bMirrorU);
    }
  
    public bool GetMirrorU() {
      bool ret = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_GetMirrorU(swigCPtr);
      return ret;
    }
  
    public void SetMirrorV(bool bMirrorV) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_SetMirrorV(swigCPtr, bMirrorV);
    }
  
    public bool GetMirrorV() {
      bool ret = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FUVEditParameters_GetMirrorV(swigCPtr);
      return ret;
    }
  
    public FUVEditParameters() : this(DatasmithFacadeCSharpPINVOKE.new_FDatasmithFacadeMaterialsUtils_FUVEditParameters(), true) {
    }
  
  }

  public static FDatasmithFacadeMaterialExpressionTexture CreateTextureExpression(FDatasmithFacadeUEPbrMaterial MaterialElement, string ParameterName, string TextureMapPath, FDatasmithFacadeMaterialsUtils.FUVEditParameters UVParameters) {
	global::System.IntPtr objectPtr = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_CreateTextureExpression(FDatasmithFacadeUEPbrMaterial.getCPtr(MaterialElement), ParameterName, TextureMapPath, FDatasmithFacadeMaterialsUtils.FUVEditParameters.getCPtr(UVParameters));
    if (DatasmithFacadeCSharpPINVOKE.SWIGPendingException.Pending) throw DatasmithFacadeCSharpPINVOKE.SWIGPendingException.Retrieve();
	if(objectPtr == global::System.IntPtr.Zero)
	{
		return null;
	}
	else
	{
		return new FDatasmithFacadeMaterialExpressionTexture(objectPtr, true);
	}
}

  public class FWeightedMaterialExpressionParameters : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal FWeightedMaterialExpressionParameters(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FWeightedMaterialExpressionParameters obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~FWeightedMaterialExpressionParameters() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            DatasmithFacadeCSharpPINVOKE.delete_FDatasmithFacadeMaterialsUtils_FWeightedMaterialExpressionParameters(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public FWeightedMaterialExpressionParameters(float InWeight) : this(DatasmithFacadeCSharpPINVOKE.new_FDatasmithFacadeMaterialsUtils_FWeightedMaterialExpressionParameters(InWeight), true) {
    }
  
    public void SetColor(float R, float G, float B, float A) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FWeightedMaterialExpressionParameters_SetColor(swigCPtr, R, G, B, A);
    }
  
    public void SetColorsRGB(byte R, byte G, byte B, byte A) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FWeightedMaterialExpressionParameters_SetColorsRGB(swigCPtr, R, G, B, A);
    }
  
    public void SetScalar(float Value) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FWeightedMaterialExpressionParameters_SetScalar(swigCPtr, Value);
    }
  
    public void SetTextureMode(FDatasmithFacadeTexture.ETextureMode InTextureMode) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FWeightedMaterialExpressionParameters_SetTextureMode(swigCPtr, (int)InTextureMode);
    }
  
    public void SetExpression(FDatasmithFacadeMaterialExpression InExpression) {
      DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_FWeightedMaterialExpressionParameters_SetExpression(swigCPtr, FDatasmithFacadeMaterialExpression.getCPtr(InExpression));
      if (DatasmithFacadeCSharpPINVOKE.SWIGPendingException.Pending) throw DatasmithFacadeCSharpPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public static FDatasmithFacadeMaterialExpression CreateWeightedMaterialExpression(FDatasmithFacadeUEPbrMaterial MaterialElement, string ParameterName, FDatasmithFacadeMaterialsUtils.FWeightedMaterialExpressionParameters WeightedExpressionParameter) {
	global::System.IntPtr objectPtr = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_CreateWeightedMaterialExpression(FDatasmithFacadeUEPbrMaterial.getCPtr(MaterialElement), ParameterName, FDatasmithFacadeMaterialsUtils.FWeightedMaterialExpressionParameters.getCPtr(WeightedExpressionParameter));
    if (DatasmithFacadeCSharpPINVOKE.SWIGPendingException.Pending) throw DatasmithFacadeCSharpPINVOKE.SWIGPendingException.Retrieve();
	if(objectPtr == global::System.IntPtr.Zero)
	{
		return null;
	}
	else
	{
		//Query the type with a temporary wrapper with no memory ownership.
		EDatasmithFacadeMaterialExpressionType ExpressionType = (new FDatasmithFacadeMaterialExpression(objectPtr, false)).GetExpressionType();

		switch(ExpressionType)
		{
		case EDatasmithFacadeMaterialExpressionType.ConstantBool:
			return new FDatasmithFacadeMaterialExpressionBool(objectPtr, true);
		case EDatasmithFacadeMaterialExpressionType.ConstantColor:
			return new FDatasmithFacadeMaterialExpressionColor(objectPtr, true);
		case EDatasmithFacadeMaterialExpressionType.ConstantScalar:
			return new FDatasmithFacadeMaterialExpressionScalar(objectPtr, true);
		case EDatasmithFacadeMaterialExpressionType.FlattenNormal:
			return new FDatasmithFacadeMaterialExpressionFlattenNormal(objectPtr, true);
		case EDatasmithFacadeMaterialExpressionType.FunctionCall:
			return new FDatasmithFacadeMaterialExpressionFunctionCall(objectPtr, true);
		case EDatasmithFacadeMaterialExpressionType.Generic:
			return new FDatasmithFacadeMaterialExpressionGeneric(objectPtr, true);
		case EDatasmithFacadeMaterialExpressionType.Texture:
			return new FDatasmithFacadeMaterialExpressionTexture(objectPtr, true);
		case EDatasmithFacadeMaterialExpressionType.TextureCoordinate:
			return new FDatasmithFacadeMaterialExpressionTextureCoordinate(objectPtr, true);
		default:
			return null;
		}
	}
}

  public static FDatasmithFacadeTexture CreateSimpleTextureElement(string InTextureFilePath, FDatasmithFacadeTexture.ETextureMode InTextureMode) {
    global::System.IntPtr cPtr = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_CreateSimpleTextureElement__SWIG_0(InTextureFilePath, (int)InTextureMode);
    FDatasmithFacadeTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new FDatasmithFacadeTexture(cPtr, false);
    return ret;
  }

  public static FDatasmithFacadeTexture CreateSimpleTextureElement(string InTextureFilePath) {
    global::System.IntPtr cPtr = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeMaterialsUtils_CreateSimpleTextureElement__SWIG_1(InTextureFilePath);
    FDatasmithFacadeTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new FDatasmithFacadeTexture(cPtr, false);
    return ret;
  }

}
