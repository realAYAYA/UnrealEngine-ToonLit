// Copyright Epic Games, Inc. All Rights Reserved.

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FDatasmithFacadeTexture : FDatasmithFacadeElement {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FDatasmithFacadeTexture(global::System.IntPtr cPtr, bool cMemoryOwn) : base(DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FDatasmithFacadeTexture obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DatasmithFacadeCSharpPINVOKE.delete_FDatasmithFacadeTexture(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public string GetFileHash()
  {
    System.Text.StringBuilder sb = new System.Text.StringBuilder(32);
    InternalGetFileHash(sb, (ulong)sb.Capacity + 1);
    return sb.ToString();
  }

  public FDatasmithFacadeTexture(string InElementName) : this(DatasmithFacadeCSharpPINVOKE.new_FDatasmithFacadeTexture(InElementName), true) {
  }

  public string GetFile() {
    string ret = global::System.Runtime.InteropServices.Marshal.PtrToStringUni(DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_GetFile(swigCPtr));
    return ret;
  }

  public void SetFile(string File) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_SetFile(swigCPtr, File);
  }

  public void SetData(byte[] InData, uint InDataSize, FDatasmithFacadeTexture.ETextureFormat InFormat) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_SetData(swigCPtr, InData, InDataSize, (int)InFormat);
  }

  public byte[] GetData(out uint OutDataSize, out FDatasmithFacadeTexture.ETextureFormat OutFormat) {
	global::System.IntPtr arrayPtr = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_GetData(swigCPtr, out OutDataSize, out OutFormat);
    if (DatasmithFacadeCSharpPINVOKE.SWIGPendingException.Pending) throw DatasmithFacadeCSharpPINVOKE.SWIGPendingException.Retrieve();
	if(arrayPtr == global::System.IntPtr.Zero || OutDataSize == 0)
	{
		return null;
	}
	else
	{
		byte[] Data = new byte[OutDataSize];
		global::System.Runtime.InteropServices.Marshal.Copy(arrayPtr, Data, 0, (int)OutDataSize);
		return Data;
	}
}

  private void InternalGetFileHash(System.Text.StringBuilder OutBuffer, ulong BufferSize) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_InternalGetFileHash(swigCPtr, OutBuffer, BufferSize);
  }

  public void SetFileHash(string Hash) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_SetFileHash(swigCPtr, Hash);
  }

  public FDatasmithFacadeTexture.ETextureMode GetTextureMode() {
    FDatasmithFacadeTexture.ETextureMode ret = (FDatasmithFacadeTexture.ETextureMode)DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_GetTextureMode(swigCPtr);
    return ret;
  }

  public void SetTextureMode(FDatasmithFacadeTexture.ETextureMode Mode) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_SetTextureMode(swigCPtr, (int)Mode);
  }

  public FDatasmithFacadeTexture.ETextureFilter GetTextureFilter() {
    FDatasmithFacadeTexture.ETextureFilter ret = (FDatasmithFacadeTexture.ETextureFilter)DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_GetTextureFilter(swigCPtr);
    return ret;
  }

  public void SetTextureFilter(FDatasmithFacadeTexture.ETextureFilter Filter) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_SetTextureFilter(swigCPtr, (int)Filter);
  }

  public FDatasmithFacadeTexture.ETextureAddress GetTextureAddressX() {
    FDatasmithFacadeTexture.ETextureAddress ret = (FDatasmithFacadeTexture.ETextureAddress)DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_GetTextureAddressX(swigCPtr);
    return ret;
  }

  public void SetTextureAddressX(FDatasmithFacadeTexture.ETextureAddress Mode) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_SetTextureAddressX(swigCPtr, (int)Mode);
  }

  public FDatasmithFacadeTexture.ETextureAddress GetTextureAddressY() {
    FDatasmithFacadeTexture.ETextureAddress ret = (FDatasmithFacadeTexture.ETextureAddress)DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_GetTextureAddressY(swigCPtr);
    return ret;
  }

  public void SetTextureAddressY(FDatasmithFacadeTexture.ETextureAddress Mode) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_SetTextureAddressY(swigCPtr, (int)Mode);
  }

  public bool GetAllowResize() {
    bool ret = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_GetAllowResize(swigCPtr);
    return ret;
  }

  public void SetAllowResize(bool bAllowResize) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_SetAllowResize(swigCPtr, bAllowResize);
  }

  public float GetRGBCurve() {
    float ret = DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_GetRGBCurve(swigCPtr);
    return ret;
  }

  public void SetRGBCurve(float InRGBCurve) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_SetRGBCurve(swigCPtr, InRGBCurve);
  }

  public FDatasmithFacadeTexture.EColorSpace GetSRGB() {
    FDatasmithFacadeTexture.EColorSpace ret = (FDatasmithFacadeTexture.EColorSpace)DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_GetSRGB(swigCPtr);
    return ret;
  }

  public void SetSRGB(FDatasmithFacadeTexture.EColorSpace Option) {
    DatasmithFacadeCSharpPINVOKE.FDatasmithFacadeTexture_SetSRGB(swigCPtr, (int)Option);
  }

  public enum ETextureMode {
    Diffuse,
    Specular,
    Normal,
    NormalGreenInv,
    Displace,
    Other,
    Bump
  }

  public enum ETextureFilter {
    Nearest,
    Bilinear,
    Trilinear,
    Default
  }

  public enum ETextureAddress {
    Wrap,
    Clamp,
    Mirror
  }

  public enum ETextureFormat {
    PNG,
    JPEG
  }

  public enum EColorSpace {
    Default,
    sRGB,
    Linear
  }

}
