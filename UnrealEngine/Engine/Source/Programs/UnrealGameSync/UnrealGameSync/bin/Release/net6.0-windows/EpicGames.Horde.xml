<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EpicGames.Horde</name>
    </assembly>
    <members>
        <member name="T:EpicGames.Horde.Api.ProjectId">
            <summary>
            Identifier for a pool
            </summary>
            <param name="Id">Id to construct from</param>
        </member>
        <member name="M:EpicGames.Horde.Api.ProjectId.#ctor(EpicGames.Horde.StringId)">
            <summary>
            Identifier for a pool
            </summary>
            <param name="Id">Id to construct from</param>
        </member>
        <member name="P:EpicGames.Horde.Api.ProjectId.Id">
            <summary>Id to construct from</summary>
        </member>
        <member name="M:EpicGames.Horde.Api.ProjectId.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.ProjectId.IsEmpty">
            <inheritdoc cref="P:EpicGames.Horde.StringId.IsEmpty"/>
        </member>
        <member name="M:EpicGames.Horde.Api.ProjectId.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Api.ProjectIdConverter">
            <summary>
            Converter to and from <see cref="T:EpicGames.Horde.StringId"/> instances.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Api.ProjectIdConverter.FromStringId(EpicGames.Horde.StringId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Api.ProjectIdConverter.ToStringId(EpicGames.Horde.Api.ProjectId)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Api.GetProjectResponse">
            <summary>
            Response describing a project
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectResponse.Id">
            <summary>
            Unique id of the project
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectResponse.Name">
            <summary>
            Name of the project
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectResponse.Order">
            <summary>
            Order to display this project on the dashboard
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectResponse.Streams">
            <summary>
            List of streams that are in this project
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectResponse.Categories">
            <summary>
            List of stream categories to display
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Api.GetProjectResponse.#ctor(EpicGames.Horde.Api.ProjectId,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="id">Unique id of the project</param>
            <param name="name">Name of the project</param>
            <param name="order">Order to show this project on the dashboard</param>
        </member>
        <member name="T:EpicGames.Horde.Api.GetProjectStreamResponse">
            <summary>
            Information about a stream within a project
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectStreamResponse.Id">
            <summary>
            The stream id
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectStreamResponse.Name">
            <summary>
            The stream name
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Api.GetProjectStreamResponse.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Api.GetProjectCategoryResponse">
            <summary>
            Information about a category to display for a stream
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectCategoryResponse.Name">
            <summary>
            Heading for this column
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectCategoryResponse.Row">
            <summary>
            Index of the row to display this category on
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectCategoryResponse.ShowOnNavMenu">
            <summary>
            Whether to show this category on the nav menu
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectCategoryResponse.IncludePatterns">
            <summary>
            Patterns for stream names to include
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectCategoryResponse.ExcludePatterns">
            <summary>
            Patterns for stream names to exclude
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetProjectCategoryResponse.Streams">
            <summary>
            Streams to include in this category
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Api.GetProjectCategoryResponse.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Api.ProjectExtensions">
            <summary>
            Extension methods for the projects endpoint
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Api.ProjectExtensions.GetProjectsAsync(EpicGames.Horde.HordeHttpClient,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Query all the projects
            </summary>
            <param name="horde">The horde client instance</param>
            <param name="includeStreams">Whether to include streams in the response</param>
            <param name="includeCategories">Whether to include categories in the response</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Information about all the projects</returns>
        </member>
        <member name="M:EpicGames.Horde.Api.ProjectExtensions.GetProjectAsync(EpicGames.Horde.HordeHttpClient,EpicGames.Horde.Api.ProjectId,System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a specific project
            </summary>
            <param name="horde">The horde client instance</param>
            <param name="projectId">Id of the project to get information about</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Information about the requested project</returns>
        </member>
        <member name="T:EpicGames.Horde.Api.SecretId">
            <summary>
            Identifier for a secret
            </summary>
            <param name="Id">Id to construct from</param>
        </member>
        <member name="M:EpicGames.Horde.Api.SecretId.#ctor(EpicGames.Horde.StringId)">
            <summary>
            Identifier for a secret
            </summary>
            <param name="Id">Id to construct from</param>
        </member>
        <member name="P:EpicGames.Horde.Api.SecretId.Id">
            <summary>Id to construct from</summary>
        </member>
        <member name="M:EpicGames.Horde.Api.SecretId.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.SecretId.IsEmpty">
            <inheritdoc cref="P:EpicGames.Horde.StringId.IsEmpty"/>
        </member>
        <member name="M:EpicGames.Horde.Api.SecretId.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Api.SecretIdConverter">
            <summary>
            Converter to and from <see cref="T:EpicGames.Horde.StringId"/> instances.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Api.SecretIdConverter.FromStringId(EpicGames.Horde.StringId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Api.SecretIdConverter.ToStringId(EpicGames.Horde.Api.SecretId)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Api.GetSecretsResponse">
            <summary>
            Response listing all the secrets available to the current user
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetSecretsResponse.Ids">
            <summary>
            List of secret ids
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Api.GetSecretsResponse.#ctor(System.Collections.Generic.List{EpicGames.Horde.Api.SecretId})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Api.GetSecretResponse">
            <summary>
            Gets data for a particular secret
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetSecretResponse.Id">
            <summary>
            Id of the secret
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Api.GetSecretResponse.Data">
            <summary>
            Key value pairs for the secret
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Api.GetSecretResponse.#ctor(EpicGames.Horde.Api.SecretId,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Api.SecretExtensions">
            <summary>
            Extension methods for the secrets endpoint
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Api.SecretExtensions.GetSecretsAsync(EpicGames.Horde.HordeHttpClient,System.Threading.CancellationToken)">
            <summary>
            Query all the secrets available to the current user
            </summary>
            <param name="horde">The horde client instance</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Information about all the projects</returns>
        </member>
        <member name="M:EpicGames.Horde.Api.SecretExtensions.GetSecretAsync(EpicGames.Horde.HordeHttpClient,EpicGames.Horde.Api.SecretId,System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a specific project
            </summary>
            <param name="horde">The horde client instance</param>
            <param name="secretId">Id of the secret to retrieve</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Information about the requested project</returns>
        </member>
        <member name="T:EpicGames.Horde.Auth.HttpServiceClientOptions">
            <summary>
            Base class for configuring HTTP service clients
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Auth.HttpServiceClientOptions.Url">
            <summary>
            Base address for http requests
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Auth.HttpServiceClientOptions.AuthUrl">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Auth.HttpServiceClientOptions.GrantType">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Auth.HttpServiceClientOptions.ClientId">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Auth.HttpServiceClientOptions.ClientSecret">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Auth.HttpServiceClientOptions.Scope">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Auth.HttpServiceClientOptions.Token">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Auth.AuthenticationException">
            <summary>
            Exception thrown due to failed authorization
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Auth.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Auth.IOAuthOptions">
            <summary>
            Options for authenticating particular requests
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Auth.IOAuthOptions.AuthUrl">
            <summary>
            Url of the auth server
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Auth.IOAuthOptions.GrantType">
            <summary>
            Type of grant
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Auth.IOAuthOptions.ClientId">
            <summary>
            Client id
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Auth.IOAuthOptions.ClientSecret">
            <summary>
            Client secret
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Auth.IOAuthOptions.Scope">
            <summary>
            Scope of the token
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Auth.OAuthHandler`1">
            <summary>
            Http message handler which adds an OAuth authorization header using a cached/periodically refreshed bearer token
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Auth.OAuthHandler`1.#ctor(System.Net.Http.HttpClient,EpicGames.Horde.Auth.IOAuthOptions)">
            <summary>
            Constructor
            </summary>
            <param name="client"></param>
            <param name="options"></param>
        </member>
        <member name="M:EpicGames.Horde.Auth.OAuthHandler`1.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Auth.OAuthHandler`1.UpdateAccessTokenAsync(System.Threading.CancellationToken)">
            <summary>
            Updates the current access token
            </summary>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Auth.OAuthHandlerFactory">
            <summary>
            Factory for creating OAuth2AuthProvider instances from a set of options
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Auth.OAuthHandlerFactory.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Constructor
            </summary>
            <param name="httpClient"></param>
        </member>
        <member name="M:EpicGames.Horde.Auth.OAuthHandlerFactory.Create``1(EpicGames.Horde.Auth.IOAuthOptions)">
            <summary>
            Create an instance of the auth provider
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Auth.ITokenAuthOptions">
            <summary>
            Options for authenticating particular requests
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Auth.ITokenAuthOptions.Token">
            <summary>
            Bearer token for auth
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Auth.TokenHandler`1">
            <summary>
            Http message handler which adds an OAuth authorization header using a cached/periodically refreshed bearer token
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Auth.TokenHandler`1.#ctor(EpicGames.Horde.Auth.ITokenAuthOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:EpicGames.Horde.Auth.TokenHandler`1.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Common.ConditionException">
            <summary>
            Exception thrown when a condition is not valid
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Common.ConditionException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:EpicGames.Horde.Common.Condition">
            <summary>
            A conditional expression that can be evaluated against a particular object
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Common.Condition.Text">
            <summary>
            The condition text
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Common.Condition.Error">
            <summary>
            Error produced when parsing the condition
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Common.Condition.IsEmpty">
            <summary>
            Determines if the condition is empty
            </summary>
            <returns>True if the condition is empty</returns>
        </member>
        <member name="M:EpicGames.Horde.Common.Condition.IsValid">
            <summary>
            Checks if the condition has been parsed correctly
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Common.Condition.Parse(System.String)">
            <summary>
            Parse the given text as a condition
            </summary>
            <param name="text">Condition text to parse</param>
            <returns>The new condition object</returns>
        </member>
        <member name="M:EpicGames.Horde.Common.Condition.TryParse(System.String)">
            <summary>
            Attempts to parse the given text as a condition
            </summary>
            <param name="text">Condition to parse</param>
            <returns>The parsed condition. Does not validate whether the parse completed successfully; call <see cref="M:EpicGames.Horde.Common.Condition.IsValid"/> to verify.</returns>
        </member>
        <member name="M:EpicGames.Horde.Common.Condition.Evaluate(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Evaluate the condition using the given callback to retreive property values
            </summary>
            <param name="getPropertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Common.Condition.op_Implicit(System.String)~EpicGames.Horde.Common.Condition">
            <summary>
            Implicit conversion from string to conditions
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:EpicGames.Horde.Common.Condition.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Common.ConditionCbConverter">
            <summary>
            Converter from conditions to compact binary objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Common.ConditionCbConverter.Read(EpicGames.Serialization.CbField)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Common.ConditionCbConverter.Write(EpicGames.Serialization.CbWriter,EpicGames.Horde.Common.Condition)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Common.ConditionCbConverter.WriteNamed(EpicGames.Serialization.CbWriter,EpicGames.Core.Utf8String,EpicGames.Horde.Common.Condition)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Common.ConditionTypeConverter">
            <summary>
            Type converter from strings to condition objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Common.ConditionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Common.ConditionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Common.ConditionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Common.ConditionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Common.ConditionJsonConverter">
            <summary>
            Type converter from Json strings to condition objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Common.ConditionJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.AgentManagedProcess">
            <summary>
            Represents a remotely executed process managed by the Horde agent
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.AgentManagedProcess.ExitCode">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Compute.AgentManagedProcess.HasExited">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentManagedProcess.#ctor(EpicGames.Horde.Compute.AgentMessageChannel)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentManagedProcess.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentManagedProcess.ReadLineAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentManagedProcess.WaitForExitAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.AgentMessageType">
            <summary>
            Type of a compute message
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.None">
            <summary>
            No message was received (end of stream)
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.Exception">
            <summary>
            Sent in place of a regular response if an error occurs on the remote
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.Fork">
            <summary>
            Fork the message loop into a new channel
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.Attach">
            <summary>
            Sent as the first message on a channel to notify the remote that the remote end is attached
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.WriteFiles">
            <summary>
            Extract files on the remote machine (Initiator -> Remote)
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.WriteFilesResponse">
            <summary>
            Notification that files have been extracted (Remote -> Initiator)
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.DeleteFiles">
            <summary>
            Deletes files on the remote machine (Initiator -> Remote)
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.Execute">
            <summary>
            Execute a process in a sandbox (Initiator -> Remote)
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.ExecuteOutput">
            <summary>
            Returns output from the child process to the caller (Remote -> Initiator)
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.ExecuteResult">
            <summary>
            Returns the process exit code (Remote -> Initiator)
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.ReadBlob">
            <summary>
            Reads a blob from storage
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.ReadBlobResponse">
            <summary>
            Response to a <see cref="F:EpicGames.Horde.Compute.AgentMessageType.ReadBlob"/> request.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.XorRequest">
            <summary>
            Xor a block of data with a value
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.AgentMessageType.XorResponse">
            <summary>
            Result from an <see cref="F:EpicGames.Horde.Compute.AgentMessageType.XorRequest"/> request.
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.AgentMessage">
            <summary>
            Standard implementation of a message
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.AgentMessage.Type">
            <summary>
            Type of the message
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.AgentMessage.Data">
            <summary>
            Data that was read
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessage.#ctor(EpicGames.Horde.Compute.AgentMessageType,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessage.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessage.GetMemory(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessage.Advance(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.InvalidAgentMessageException">
            <summary>
            Exception thrown when an invalid message is received
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.InvalidAgentMessageException.#ctor(EpicGames.Horde.Compute.AgentMessage)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.IAgentMessageBuilder">
            <summary>
            Writer for compute messages
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IAgentMessageBuilder.Send">
            <summary>
            Sends the current message
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ExceptionMessage">
            <summary>
            Message for reporting an error
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ExceptionMessage.#ctor(System.String,System.String)">
            <summary>
            Message for reporting an error
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ForkMessage">
            <summary>
            Message requesting that the message loop be forked
            </summary>
            <param name="channelId">New channel to communicate on</param>
            <param name="bufferSize">Size of the buffer</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.ForkMessage.#ctor(System.Int32,System.Int32)">
            <summary>
            Message requesting that the message loop be forked
            </summary>
            <param name="channelId">New channel to communicate on</param>
            <param name="bufferSize">Size of the buffer</param>
        </member>
        <member name="P:EpicGames.Horde.Compute.ForkMessage.channelId">
            <summary>New channel to communicate on</summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.ForkMessage.bufferSize">
            <summary>Size of the buffer</summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.UploadFilesMessage">
            <summary>
            Extract files from a bundle to a path in the remote sandbox
            </summary>
            <param name="Name">Path to extract the files to</param>
            <param name="Locator">Locator for the tree to extract</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.UploadFilesMessage.#ctor(System.String,EpicGames.Horde.Storage.NodeLocator)">
            <summary>
            Extract files from a bundle to a path in the remote sandbox
            </summary>
            <param name="Name">Path to extract the files to</param>
            <param name="Locator">Locator for the tree to extract</param>
        </member>
        <member name="P:EpicGames.Horde.Compute.UploadFilesMessage.Name">
            <summary>Path to extract the files to</summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.UploadFilesMessage.Locator">
            <summary>Locator for the tree to extract</summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.DeleteFilesMessage">
            <summary>
            Deletes files or directories in the remote
            </summary>
            <param name="Filter">Filter for files to delete</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.DeleteFilesMessage.#ctor(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Deletes files or directories in the remote
            </summary>
            <param name="Filter">Filter for files to delete</param>
        </member>
        <member name="P:EpicGames.Horde.Compute.DeleteFilesMessage.Filter">
            <summary>Filter for files to delete</summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ExecuteProcessMessage">
            <summary>
            Message to execute a new child process
            </summary>
            <param name="Executable">Executable path</param>
            <param name="Arguments">Arguments for the executable</param>
            <param name="WorkingDir">Working directory to execute in</param>
            <param name="EnvVars">Environment variables for the child process. Null values unset variables.</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.ExecuteProcessMessage.#ctor(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Message to execute a new child process
            </summary>
            <param name="Executable">Executable path</param>
            <param name="Arguments">Arguments for the executable</param>
            <param name="WorkingDir">Working directory to execute in</param>
            <param name="EnvVars">Environment variables for the child process. Null values unset variables.</param>
        </member>
        <member name="P:EpicGames.Horde.Compute.ExecuteProcessMessage.Executable">
            <summary>Executable path</summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.ExecuteProcessMessage.Arguments">
            <summary>Arguments for the executable</summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.ExecuteProcessMessage.WorkingDir">
            <summary>Working directory to execute in</summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.ExecuteProcessMessage.EnvVars">
            <summary>Environment variables for the child process. Null values unset variables.</summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ExecuteProcessResponseMessage">
            <summary>
            Response from executing a child process
            </summary>
            <param name="ExitCode">Exit code for the process</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.ExecuteProcessResponseMessage.#ctor(System.Int32)">
            <summary>
            Response from executing a child process
            </summary>
            <param name="ExitCode">Exit code for the process</param>
        </member>
        <member name="P:EpicGames.Horde.Compute.ExecuteProcessResponseMessage.ExitCode">
            <summary>Exit code for the process</summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ReadBlobMessage">
            <summary>
            Creates a blob read request
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ReadBlobMessage.#ctor(EpicGames.Horde.Storage.BlobLocator,System.Int32,System.Int32)">
            <summary>
            Creates a blob read request
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.XorRequestMessage">
            <summary>
            Message for running an XOR command
            </summary>
            <param name="Data">Data to xor</param>
            <param name="Value">Value to XOR with</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.XorRequestMessage.#ctor(System.ReadOnlyMemory{System.Byte},System.Byte)">
            <summary>
            Message for running an XOR command
            </summary>
            <param name="Data">Data to xor</param>
            <param name="Value">Value to XOR with</param>
        </member>
        <member name="P:EpicGames.Horde.Compute.XorRequestMessage.Data">
            <summary>Data to xor</summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.XorRequestMessage.Value">
            <summary>Value to XOR with</summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.AgentMessageExtensions">
            <summary>
            Wraps various requests across compute channels
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.CloseAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.Threading.CancellationToken)">
            <summary>
            Closes the remote message loop
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.SendExceptionAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Sends an exception response to the remote
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.SendExceptionAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends an exception response to the remote
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.ParseExceptionMessage(EpicGames.Horde.Compute.AgentMessage)">
            <summary>
            Parses a message as an <see cref="T:EpicGames.Horde.Compute.ExceptionMessage"/>
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.ForkAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Requests that the remote message loop be forked
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.ParseForkMessage(EpicGames.Horde.Compute.AgentMessage)">
            <summary>
            Parses a fork request message
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.AttachAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.Threading.CancellationToken)">
            <summary>
            Notifies the remote that a buffer has been attached
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.WaitForAttachAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.Threading.CancellationToken)">
            <summary>
            Waits until an attached notification is received along the channel
            </summary>
            <param name="channel"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.UploadFilesAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.String,EpicGames.Horde.Storage.NodeLocator,EpicGames.Horde.Storage.IStorageClient,System.Threading.CancellationToken)">
            <summary>
            Creates a sandbox on the remote machine
            </summary>
            <param name="channel">Current channel</param>
            <param name="path">Root directory to extract files within the sandbox</param>
            <param name="locator">Location of a <see cref="T:EpicGames.Horde.Storage.Nodes.DirectoryNode"/> describing contents of the sandbox</param>
            <param name="storage">Storage for the sandbox data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.ParseUploadFilesMessage(EpicGames.Horde.Compute.AgentMessage)">
            <summary>
            Parses a message as a <see cref="T:EpicGames.Horde.Compute.UploadFilesMessage"/>
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.DeleteFilesAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)">
            <summary>
            Destroys a sandbox on the remote machine
            </summary>
            <param name="channel">Current channel</param>
            <param name="paths">Paths of files or directories to delete</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.ParseDeleteFilesMessage(EpicGames.Horde.Compute.AgentMessage)">
            <summary>
            Parses a message as a <see cref="T:EpicGames.Horde.Compute.DeleteFilesMessage"/>
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.ExecuteAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.String,System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Executes a remote process
            </summary>
            <param name="channel">Current channel</param>
            <param name="executable">Executable to run, relative to the sandbox root</param>
            <param name="arguments">Arguments for the child process</param>
            <param name="workingDir">Working directory for the process</param>
            <param name="envVars">Environment variables for the child process</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.ParseExecuteProcessMessage(EpicGames.Horde.Compute.AgentMessage)">
            <summary>
            Parses a message as a <see cref="T:EpicGames.Horde.Compute.ExecuteProcessMessage"/>
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.SendExecuteOutputAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Sends output from a child process
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.SendExecuteResultAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Sends a response from executing a child process
            </summary>
            <param name="channel"></param>
            <param name="exitCode">Exit code from the process</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.ParseExecuteProcessResponse(EpicGames.Horde.Compute.AgentMessage)">
            <summary>
            Parses a message as a <see cref="T:EpicGames.Horde.Compute.ExecuteProcessMessage"/>
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.ParseReadBlobRequest(EpicGames.Horde.Compute.AgentMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Compute.AgentMessageExtensions.BlobDataStream">
            <summary>
            Wraps a compute message containing blob data
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.ReadBlobAsync(EpicGames.Horde.Compute.AgentMessageChannel,EpicGames.Horde.Storage.BlobLocator,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads a blob from the remote
            </summary>
            <param name="channel">Channel to write to</param>
            <param name="locator">Locator for the blob</param>
            <param name="offset">Offset within the blob</param>
            <param name="length">Length of data to return</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Stream containing the blob data</returns>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.SendBlobDataAsync(EpicGames.Horde.Compute.AgentMessageChannel,EpicGames.Horde.Compute.ReadBlobMessage,EpicGames.Horde.Storage.IStorageClient,System.Threading.CancellationToken)">
            <summary>
            Writes blob data to a compute channel
            </summary>
            <param name="channel">Channel to write to</param>
            <param name="message">The read request</param>
            <param name="storage">Storage client to retrieve the blob from</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.SendBlobDataAsync(EpicGames.Horde.Compute.AgentMessageChannel,EpicGames.Horde.Storage.BlobLocator,System.Int32,System.Int32,EpicGames.Horde.Storage.IStorageClient,System.Threading.CancellationToken)">
            <summary>
            Writes blob data to a compute channel
            </summary>
            <param name="channel">Channel to write to</param>
            <param name="locator">Locator for the blob to send</param>
            <param name="offset">Starting offset of the data</param>
            <param name="length">Length of the data</param>
            <param name="storage">Storage client to retrieve the blob from</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.SendXorRequestAsync(EpicGames.Horde.Compute.AgentMessageChannel,System.ReadOnlyMemory{System.Byte},System.Byte,System.Threading.CancellationToken)">
            <summary>
            Send a message to request that a byte string be xor'ed with a particular value
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageExtensions.AsXorRequest(EpicGames.Horde.Compute.AgentMessage)">
            <summary>
            Parse a message as an XOR request
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.AgentMessageChannel">
            <summary>
            Implementation of a compute channel
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.AgentMessageChannel.MessageBuilder">
            <summary>
            Allows creating new messages in rented memory
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.AgentMessageChannel.MessageBuilder.Length">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannel.MessageBuilder.Advance(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannel.MessageBuilder.GetMemory(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannel.MessageBuilder.GetSpan(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannel.#ctor(EpicGames.Horde.Compute.IComputeBufferReader,EpicGames.Horde.Compute.IComputeBufferWriter,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="recvBufferReader"></param>
            <param name="sendBufferWriter"></param>
            <param name="logger">Logger for diagnostic output</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannel.#ctor(EpicGames.Horde.Compute.IComputeSocket,System.Int32,EpicGames.Horde.Compute.IComputeBuffer,EpicGames.Horde.Compute.IComputeBuffer,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="socket"></param>
            <param name="channelId"></param>
            <param name="recvBuffer"></param>
            <param name="sendBuffer"></param>
            <param name="logger">Logger for diagnostic output</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannel.Dispose">
            <summary>
            Overridable dispose method
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannel.MarkComplete">
            <summary>
            Mark the send buffer as complete
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannel.ReceiveAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannel.CreateMessageAsync(EpicGames.Horde.Compute.AgentMessageType,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.AgentMessageChannelExtensions">
            <summary>
            Extension methods to allow creating channels from leases
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannelExtensions.CreateAgentMessageChannel(EpicGames.Horde.Compute.IComputeSocket,System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a message channel with the given identifier
            </summary>
            <param name="socket">Socket to create a channel for</param>
            <param name="channelId">Identifier for the channel</param>
            <param name="logger">Logger for the channel</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannelExtensions.CreateAgentMessageChannel(EpicGames.Horde.Compute.IComputeSocket,System.Int32,System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a message channel with the given identifier
            </summary>
            <param name="socket">Socket to create a channel for</param>
            <param name="channelId">Identifier for the channel</param>
            <param name="bufferSize">Size of the send and receive buffer</param>
            <param name="logger">Logger for the channel</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannelExtensions.CreateAgentMessageChannel(EpicGames.Horde.Compute.IComputeSocket,System.Int32,System.Int32,System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a message channel with the given identifier
            </summary>
            <param name="socket">Socket to create a channel for</param>
            <param name="channelId">Identifier for the channel</param>
            <param name="sendBufferSize">Size of the send buffer</param>
            <param name="recvBufferSize">Size of the recieve buffer</param>
            <param name="logger">Logger for the channel</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannelExtensions.ReceiveAsync(EpicGames.Horde.Compute.AgentMessageChannel,EpicGames.Horde.Compute.AgentMessageType,System.Threading.CancellationToken)">
            <summary>
            Reads a message from the channel
            </summary>
            <param name="channel">Channel to receive on</param>
            <param name="type">Expected type of the message</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Data for a message that was read. Must be disposed.</returns>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannelExtensions.CreateMessageAsync(EpicGames.Horde.Compute.AgentMessageChannel,EpicGames.Horde.Compute.AgentMessageType,System.Threading.CancellationToken)">
            <summary>
            Creates a new builder for a message
            </summary>
            <param name="channel">Channel to send on</param>
            <param name="type">Type of the message</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>New builder for messages</returns>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageChannelExtensions.SendAsync(EpicGames.Horde.Compute.AgentMessageChannel,EpicGames.Horde.Compute.AgentMessage,System.Threading.CancellationToken)">
            <summary>
            Forwards an existing message across a channel
            </summary>
            <param name="channel">Channel to send on</param>
            <param name="message">The message to be sent</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.AgentMessageHandler">
            <summary>
            Implements the remote end of a compute worker. 
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageHandler.#ctor(EpicGames.Core.DirectoryReference,Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="sandboxDir">Directory to use for reading/writing files</param>
            <param name="memoryCache">Cache for nodes read from storage</param>
            <param name="logger">Logger for diagnostics</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentMessageHandler.RunAsync(EpicGames.Horde.Compute.IComputeSocket,System.Threading.CancellationToken)">
            <summary>
            Runs the worker using commands sent along the given socket
            </summary>
            <param name="socket">Socket to read from</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.AgentStorageClient">
            <summary>
            Storage client which can read bundles over a compute channel
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentStorageClient.#ctor(EpicGames.Horde.Compute.AgentMessageChannel)">
            <summary>
            Constructor
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentStorageClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentStorageClient.ReadBlobAsync(EpicGames.Horde.Storage.BlobLocator,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentStorageClient.ReadBlobRangeAsync(EpicGames.Horde.Storage.BlobLocator,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentStorageClient.WriteBlobAsync(System.IO.Stream,EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentStorageClient.AddAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentStorageClient.RemoveAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentStorageClient.FindNodesAsync(EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentStorageClient.DeleteRefAsync(EpicGames.Horde.Storage.RefName,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentStorageClient.TryReadRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefCacheTime,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.AgentStorageClient.WriteRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.BlobHandle,EpicGames.Horde.Storage.RefOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.Buffers.PooledBuffer">
            <summary>
            In-process buffer used to store compute messages
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.PooledBuffer.Resources.SetReadEvent(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.PooledBuffer.Resources.ResetReadEvent(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.PooledBuffer.Resources.WaitForReadEvent(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.PooledBuffer.Resources.SetWriteEvent">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.PooledBuffer.Resources.ResetWriteEvent">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.PooledBuffer.Resources.WaitForWriteEvent(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.PooledBuffer.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">Total capacity of the buffer</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.PooledBuffer.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="numChunks">Number of chunks in the buffer</param>
            <param name="chunkLength">Length of each chunk</param>
            <param name="numReaders">Number of readers for this buffer</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.PooledBuffer.AddRef">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer">
            <summary>
            Core implementation of <see cref="T:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer"/>
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.Resources.SetReadEvent(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.Resources.ResetReadEvent(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.Resources.WaitForReadEvent(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.Resources.SetWriteEvent">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.Resources.ResetWriteEvent">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.Resources.WaitForWriteEvent(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.Name">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.#ctor(EpicGames.Horde.Compute.ComputeBuffer.ResourcesBase)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.AddRef">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.CreateNew(System.String,System.Int64)">
            <summary>
            Create a new shared memory buffer
            </summary>
            <param name="name">Name of the buffer</param>
            <param name="capacity">Capacity of the buffer</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.CreateNew(System.String,System.Int32,System.Int32)">
            <summary>
            Create a new shared memory buffer
            </summary>
            <param name="name">Name of the buffer</param>
            <param name="numChunks">Number of chunks in the buffer</param>
            <param name="chunkLength">Length of each chunk</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer.OpenExisting(System.String)">
            <summary>
            Open an existing buffer by name
            </summary>
            <param name="name">Name of the buffer to open</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.Clients.AgentComputeClient">
            <summary>
            Runs a local Horde Agent process to process compute requests without communicating with a server
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.Clients.AgentComputeClient.LeaseImpl.Properties">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Compute.Clients.AgentComputeClient.LeaseImpl.AssignedResources">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Compute.Clients.AgentComputeClient.LeaseImpl.Socket">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.AgentComputeClient.LeaseImpl.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.AgentComputeClient.LeaseImpl.CloseAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.AgentComputeClient.#ctor(System.String,System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="hordeAgentAssembly">Path to the Horde Agent assembly</param>
            <param name="port">Loopback port to connect on</param>
            <param name="logger">Factory for logger instances</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.AgentComputeClient.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.AgentComputeClient.TryAssignWorkerAsync(EpicGames.Horde.Compute.ClusterId,EpicGames.Horde.Compute.Requirements,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.Clients.LocalComputeClient">
            <summary>
            Implementation of <see cref="T:EpicGames.Horde.Compute.IComputeClient"/> which marshals data over a loopback connection to a method running on a background task in the same process.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.LocalComputeClient.LeaseImpl.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.LocalComputeClient.LeaseImpl.CloseAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.LocalComputeClient.#ctor(System.Int32,EpicGames.Core.DirectoryReference,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="port">Port to connect on</param>
            <param name="sandboxDir">Sandbox directory for the worker</param>
            <param name="logger">Logger for diagnostic output</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.LocalComputeClient.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.LocalComputeClient.RunListenerAsync(System.Net.Sockets.Socket,EpicGames.Core.DirectoryReference,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <summary>
            Sets up the loopback listener and calls the server method
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.LocalComputeClient.TryAssignWorkerAsync(EpicGames.Horde.Compute.ClusterId,EpicGames.Horde.Compute.Requirements,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.Clients.ServerComputeClient">
            <summary>
            Helper class to enlist remote resources to perform compute-intensive tasks.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.Clients.ServerComputeClient.NonceLength">
            <summary>
            Length of the nonce sent as part of handshaking between initiator and remote
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.ServerComputeClient.LeaseImpl.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.ServerComputeClient.LeaseImpl.CloseAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.ServerComputeClient.#ctor(System.Uri,System.Net.Http.Headers.AuthenticationHeaderValue,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="serverUri">Uri of the server to connect to</param>
            <param name="authHeader">Authentication header</param>
            <param name="logger">Logger for diagnostic messages</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.ServerComputeClient.#ctor(System.Func{System.Net.Http.HttpClient},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="createHttpClient">Creates an HTTP client with the correct base address for the server</param>
            <param name="logger">Logger for diagnostic messages</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.ServerComputeClient.GetDefaultHttpClient">
            <summary>
            Gets the default http client
            </summary>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.ServerComputeClient.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.ServerComputeClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.ServerComputeClient.TryAssignWorkerAsync(EpicGames.Horde.Compute.ClusterId,EpicGames.Horde.Compute.Requirements,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.ServerComputeClient.ConnectAsync(EpicGames.Horde.Compute.ClusterId,EpicGames.Horde.Compute.Requirements,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.Clients.NoComputeAgentsFoundException">
            <summary>
            Exception indicating that no matching compute agents were found
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.Clients.NoComputeAgentsFoundException.ClusterId">
            <summary>
            The compute cluster requested
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.Clients.NoComputeAgentsFoundException.Requirements">
            <summary>
            Requested agent requirements
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.Clients.NoComputeAgentsFoundException.#ctor(EpicGames.Horde.Compute.ClusterId,EpicGames.Horde.Compute.Requirements)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ClusterId">
            <summary>
            Identifier for a compute cluster
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.ClusterId._inner">
            <summary>
            The text representing this id
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterId.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="input">Unique id for the string</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterId.Equals(EpicGames.Horde.Compute.ClusterId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterId.op_Equality(EpicGames.Horde.Compute.ClusterId,EpicGames.Horde.Compute.ClusterId)">
            <inheritdoc cref="M:EpicGames.Horde.StringId.op_Equality(EpicGames.Horde.StringId,EpicGames.Horde.StringId)"/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterId.op_Inequality(EpicGames.Horde.Compute.ClusterId,EpicGames.Horde.Compute.ClusterId)">
            <inheritdoc cref="M:EpicGames.Horde.StringId.op_Inequality(EpicGames.Horde.StringId,EpicGames.Horde.StringId)"/>
        </member>
        <member name="T:EpicGames.Horde.Compute.ClusterIdCbConverter">
            <summary>
            Compact binary converter for ClusterId
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterIdCbConverter.Read(EpicGames.Serialization.CbField)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterIdCbConverter.Write(EpicGames.Serialization.CbWriter,EpicGames.Horde.Compute.ClusterId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterIdCbConverter.WriteNamed(EpicGames.Serialization.CbWriter,EpicGames.Core.Utf8String,EpicGames.Horde.Compute.ClusterId)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.ClusterIdJsonConverter">
            <summary>
            Type converter for ClusterId to and from JSON
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterIdJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterIdJsonConverter.Write(System.Text.Json.Utf8JsonWriter,EpicGames.Horde.Compute.ClusterId,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.ClusterIdTypeConverter">
            <summary>
            Type converter from strings to ClusterId objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterIdTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ClusterIdTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeBuffer">
            <summary>
            In-process buffer used to store compute messages
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeBuffer.HeaderPtr">
            <summary>
            Tracked state of the buffer
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeBuffer.WriteState">
            <summary>
            Write state for a chunk
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.ComputeBuffer.WriteState.MovedToNext">
            <summary>
            Writer has moved to the next chunk
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.ComputeBuffer.WriteState.Writing">
            <summary>
            Chunk is still being appended to
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.ComputeBuffer.WriteState.Complete">
            <summary>
            This chunk marks the end of the stream
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeBuffer.ChunkState">
            <summary>
            Stores the state of a chunk in a 64-bit value, which can be updated atomically
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ChunkState.#ctor(System.UInt64)">
            <summary>
            Stores the state of a chunk in a 64-bit value, which can be updated atomically
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ChunkState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeBuffer.ChunkStatePtr">
            <summary>
            Wraps a pointer to the state of a chunk
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ChunkStatePtr.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeBuffer.ReaderState">
            <summary>
            Encodes the state of a reader in a 64-bit value
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ReaderState.#ctor(System.UInt64)">
            <summary>
            Encodes the state of a reader in a 64-bit value
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeBuffer.ReaderStatePtr">
            <summary>
            Pointer to a reader state value
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeBuffer.ResourcesBase">
            <summary>
            State shared between buffer instances
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ResourcesBase.Dispose">
            <summary>
            Dispose of the 
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ResourcesBase.SetReadEvent(System.Int32)">
            <summary>
            Signals a read event
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ResourcesBase.SetAllReadEvents">
            <summary>
            Signals read events for every reader
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ResourcesBase.ResetReadEvent(System.Int32)">
            <summary>
            Resets a read event
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ResourcesBase.WaitForReadEvent(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for a read event to be signalled
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ResourcesBase.SetWriteEvent">
            <summary>
            Signals the write event
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ResourcesBase.ResetWriteEvent">
            <summary>
            Resets the write event
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ResourcesBase.WaitForWriteEvent(System.Threading.CancellationToken)">
            <summary>
            Waits for the write event to be signalled
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ReaderImpl.AddRef">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ReaderImpl.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Compute.ComputeBuffer.ReaderImpl.IsComplete">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ReaderImpl.AdvanceReadPosition(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ReaderImpl.GetReadBuffer">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.ReaderImpl.WaitToReadAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.WriterImpl.AddRef">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.WriterImpl.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.WriterImpl.AdvanceWritePosition(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.WriterImpl.GetWriteBuffer">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.WriterImpl.MarkComplete">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.WriterImpl.WaitToWriteAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Compute.ComputeBuffer.Reader">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Compute.ComputeBuffer.Writer">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.#ctor(EpicGames.Horde.Compute.ComputeBuffer.ResourcesBase)">
            <summary>
            Constructor
            </summary>
            <param name="resources">Resources shared between instances of the buffer</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.Dispose(System.Boolean)">
            <summary>
            Overriable dispose method
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBuffer.AddRef">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeException">
            <summary>
            Base class for compute errors
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeInternalException">
            <summary>
            Exception thrown for internal reasons
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeInternalException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeRemoteException">
            <summary>
            Exception thrown on a remote machine
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeRemoteException.#ctor(EpicGames.Horde.Compute.ExceptionMessage)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeRemoteException.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeRemoteException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeSocketEndpoint">
            <summary>
            Enum identifying which end of the socket a particular machine is
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.ComputeSocketEndpoint.Local">
            <summary>
            The initiating machine
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.ComputeSocketEndpoint.Remote">
            <summary>
            The remote machine
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeSocket">
            <summary>
            Manages a set of readers and writers to buffers across a transport layer
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeSocket.#ctor(EpicGames.Horde.Compute.IComputeTransport,EpicGames.Horde.Compute.ComputeSocketEndpoint,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="transport">Transport to communicate with the remote</param>
            <param name="endpoint">Tag for log messages</param>
            <param name="logger">Logger for trace output</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeSocket.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Attempt to gracefully close the current connection and shutdown both ends of the transport
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeSocket.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeSocket.SendAsync(System.Int32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeSocket.MarkCompleteAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeSocket.AttachRecvBuffer(System.Int32,EpicGames.Horde.Compute.IComputeBufferWriter)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeSocket.AttachSendBuffer(System.Int32,EpicGames.Horde.Compute.IComputeBufferReader)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.IComputeBuffer">
            <summary>
            Base interface for input and output buffers
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.IComputeBuffer.Reader">
            <summary>
            Reader for this buffer
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.IComputeBuffer.Writer">
            <summary>
            Writer for this buffer
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeBuffer.AddRef">
            <summary>
            Creates a new reference to the underlying buffer. The underlying resources will only be destroyed once all instances are disposed of.
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.IComputeBufferReader">
            <summary>
            Read interface for a compute buffer
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeBufferReader.AddRef">
            <summary>
            Create a new reader instance using the same underlying buffer
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.IComputeBufferReader.IsComplete">
            <summary>
            Whether this buffer is complete (no more data will be added)
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeBufferReader.AdvanceReadPosition(System.Int32)">
            <summary>
            Updates the read position
            </summary>
            <param name="size">Size of data that was read</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeBufferReader.GetReadBuffer">
            <summary>
            Gets the next data to read
            </summary>
            <returns>Memory to read from</returns>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeBufferReader.WaitToReadAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Wait for data to be available, or for the buffer to be marked as complete
            </summary>
            <param name="minLength">Minimum amount of data to read</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>True if new data is available, false if the buffer is complete</returns>
        </member>
        <member name="T:EpicGames.Horde.Compute.IComputeBufferWriter">
            <summary>
            Buffer that can receive data from a remote machine.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeBufferWriter.AddRef">
            <summary>
            Create a new writer instance using the same underlying buffer
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeBufferWriter.MarkComplete">
            <summary>
            Mark the output to this buffer as complete
            </summary>
            <returns>Whether the writer was marked as complete. False if the writer has already been marked as complete.</returns>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeBufferWriter.AdvanceWritePosition(System.Int32)">
            <summary>
            Updates the current write position within the buffer
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeBufferWriter.GetWriteBuffer">
            <summary>
            Gets memory to write to
            </summary>
            <returns>Memory to be written to</returns>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeBufferWriter.WaitToWriteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets memory to write to
            </summary>
            <param name="minLength">Minimum size of the desired write buffer</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Memory to be written to</returns>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeBufferExtensions">
            <summary>
            Extension methods for <see cref="T:EpicGames.Horde.Compute.IComputeBuffer"/>
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBufferExtensions.ReadAsync(EpicGames.Horde.Compute.IComputeBufferReader,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Read from a buffer into another buffer
            </summary>
            <param name="reader">Buffer to read from</param>
            <param name="buffer">Memory to receive the read data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeBufferExtensions.WriteAsync(EpicGames.Horde.Compute.IComputeBufferWriter,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes data into a buffer from a memory block
            </summary>
            <param name="writer">Writer to output the data to</param>
            <param name="buffer">The data to write</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.IComputeChannel">
            <summary>
            Conventional TCP-like interface for writing data to a socket. Sends are "push", receives are "pull".
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeChannel.SendAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Sends data to a remote channel
            </summary>
            <param name="memory">Memory to write</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeChannel.ReceiveAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Marks a channel as complete
            </summary>
            <param name="buffer">Buffer to receive the data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeChannel.MarkCompleteAsync(System.Threading.CancellationToken)">
            <summary>
            Mark the channel as complete (ie. that no more data will be sent)
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeChannel">
            <summary>
            Opens a channel for compute workers
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeChannel.CreateChannel(EpicGames.Horde.Compute.ComputeSocket,System.Int32,EpicGames.Horde.Compute.IComputeBuffer)">
            <summary>
            Creates a channel using a socket and receive buffer
            </summary>
            <param name="socket">Socket to use for sending data</param>
            <param name="channelId">Channel id to send and receive data</param>
            <param name="recvBuffer">Buffer for receiving data</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeChannel.CreateChannel(EpicGames.Horde.Compute.IComputeSocket,System.Int32)">
            <summary>
            Creates a channel using a socket and receive buffer
            </summary>
            <param name="socket">Socket to use for sending data</param>
            <param name="channelId">Channel id to send and receive data</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeChannel.CreateChannel(EpicGames.Horde.Compute.IComputeSocket,System.Int32,EpicGames.Horde.Compute.IComputeBuffer,EpicGames.Horde.Compute.IComputeBuffer)">
            <summary>
            Creates a channel using a socket and receive buffer
            </summary>
            <param name="socket">Socket to use for sending data</param>
            <param name="channelId">Channel id to send and receive data</param>
            <param name="recvBuffer">Buffer for receiving data</param>
            <param name="sendBuffer">Buffer for sending data</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeChannelExtensions">
            <summary>
            Extension methods for <see cref="T:EpicGames.Horde.Compute.IComputeChannel"/>
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeChannelExtensions.ReceiveMessageAsync(EpicGames.Horde.Compute.IComputeChannel,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads a complete message from the given socket, retrying reads until the buffer is full.
            </summary>
            <param name="channel">Channel to read from</param>
            <param name="buffer">Buffer to store the data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeChannelExtensions.TryReceiveMessageAsync(EpicGames.Horde.Compute.IComputeChannel,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads either a full message or end of stream from the channel
            </summary>
            <param name="channel">Channel to read from</param>
            <param name="buffer">Buffer to store the data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.IComputeClient">
            <summary>
            Interface for uploading compute work to remote machines
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeClient.TryAssignWorkerAsync(EpicGames.Horde.Compute.ClusterId,EpicGames.Horde.Compute.Requirements,System.Threading.CancellationToken)">
            <summary>
            Adds a new remote request
            </summary>
            <param name="clusterId">Cluster to execute the request</param>
            <param name="requirements">Requirements for the agent</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.IComputeLease">
            <summary>
            Full-duplex channel for sending and reciving messages
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.IComputeLease.Properties">
            <summary>
            Properties of the remote machine
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.IComputeLease.AssignedResources">
            <summary>
            Resources assigned to this lease
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.IComputeLease.Socket">
            <summary>
            Socket to communicate with the remote
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeLease.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Relinquish the lease gracefully
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.IComputeSocket">
            <summary>
            Socket for sending and reciving data using a "push" model. The application can attach multiple writers to accept received data.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeSocket.AttachRecvBuffer(System.Int32,EpicGames.Horde.Compute.IComputeBufferWriter)">
            <summary>
            Attaches a buffer to receive data.
            </summary>
            <param name="channelId">Channel to receive data on</param>
            <param name="recvBufferWriter">Writer for the buffer to store received data</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeSocket.AttachSendBuffer(System.Int32,EpicGames.Horde.Compute.IComputeBufferReader)">
            <summary>
            Attaches a buffer to send data.
            </summary>
            <param name="channelId">Channel to receive data on</param>
            <param name="sendBufferReader">Reader for the buffer to send data from</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.IComputeTransport">
            <summary>
            Low-level interface for transferring data
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.IComputeTransport.Position">
            <summary>
            Position in the stream; used for debugging
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeTransport.ReadPartialAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads data from the underlying transport into an output buffer
            </summary>
            <param name="buffer">Buffer to read into</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeTransport.WriteAsync(System.Buffers.ReadOnlySequence{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes data to the underlying transport
            </summary>
            <param name="buffer">Buffer to be written</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.IComputeTransport.MarkCompleteAsync(System.Threading.CancellationToken)">
            <summary>
            Indicate that all data has been written to the transport layer, and that there will be no more calls to <see cref="M:EpicGames.Horde.Compute.IComputeTransport.WriteAsync(System.Buffers.ReadOnlySequence{System.Byte},System.Threading.CancellationToken)"/>
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.ComputeTransportExtensions">
            <summary>
            Extension methods for <see cref="T:EpicGames.Horde.Compute.IComputeTransport"/>
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeTransportExtensions.ReadFullAsync(EpicGames.Horde.Compute.IComputeTransport,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Fill the given buffer with data
            </summary>
            <param name="transport">Transport object</param>
            <param name="buffer">Buffer to read into</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeTransportExtensions.ReadOptionalAsync(EpicGames.Horde.Compute.IComputeTransport,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Fill the given buffer with data
            </summary>
            <param name="transport">Transport object</param>
            <param name="buffer">Buffer to read into</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.ComputeTransportExtensions.WriteAsync(EpicGames.Horde.Compute.IComputeTransport,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes data to the underlying transport
            </summary>
            <param name="transport">Transport instance</param>
            <param name="buffer">Buffer to be written</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Compute.Requirements">
            <summary>
            Stores information about a directory in an action's workspace
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.Requirements.Condition">
            <summary>
            Condition string to be evaluated against the machine spec, eg. cpu-cores >= 10 &amp;&amp; ram.mb >= 200 &amp;&amp; pool == 'worker'
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.Requirements.Resources">
            <summary>
            Resources used by the process
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.Requirements.Exclusive">
            <summary>
            Whether we require exclusive access to the device
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.Requirements.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.Requirements.#ctor(EpicGames.Horde.Common.Condition)">
            <summary>
            Construct a requirements object with a condition
            </summary>
            <param name="condition">Condition for matching machines to execute the work</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Requirements.Serialize">
            <summary>
            Serialize this object to bytes
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.Requirements.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.ResourceRequirements">
            <summary>
            Specifies requirements for resource allocation
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.ResourceRequirements.Min">
            <summary>
            Minimum allocation of the requested resource
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.ResourceRequirements.Max">
            <summary>
            Maximum allocation of the requested resource. Allocates as much as possible unless capped.
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Compute.Transports.AesTransport">
            <summary>
            Transport layer that adds AES encryption on top of an underlying transport implementation. Key must be exchanged separately
            (eg. via the HTTPS request to negotiate a lease with the server).
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.Transports.AesTransport.KeyLength">
            <summary>
            Length of the required encrption key. 
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.Transports.AesTransport.NonceLength">
            <summary>
            Length of the nonce. This should be a cryptographically random number, and does not have to be secret.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.Transports.AesTransport.Position">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.AesTransport.#ctor(EpicGames.Horde.Compute.IComputeTransport,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructor
            </summary>
            <param name="inner">The underlying transport implementation</param>
            <param name="key">AES encryption key (256 bits / 32 bytes)</param>
            <param name="nonce">Cryptographic nonce to identify the connection. Must be longer than <see cref="F:EpicGames.Horde.Compute.Transports.AesTransport.NonceLength"/>.</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.AesTransport.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.AesTransport.CreateKey">
            <summary>
            Creates an encryption key
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.AesTransport.ReadPartialAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.AesTransport.WriteAsync(System.Buffers.ReadOnlySequence{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.AesTransport.MarkCompleteAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.Transports.PipeTransport">
            <summary>
            Implementation of <see cref="T:EpicGames.Horde.Compute.IComputeTransport"/> for communicating over a <see cref="T:System.IO.Pipelines.Pipe"/>. 
            (Note: this uses a .NET in-process pipe, not an IPC pipe).
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.Transports.PipeTransport.Position">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.PipeTransport.#ctor(System.IO.Pipelines.PipeReader,System.IO.Pipelines.PipeWriter)">
            <summary>
            Constructor
            </summary>
            <param name="reader">Reader for the pipe</param>
            <param name="writer">Writer for the pipe</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.PipeTransport.ReadPartialAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.PipeTransport.WriteAsync(System.Buffers.ReadOnlySequence{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.PipeTransport.MarkCompleteAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.Transports.StreamTransport">
            <summary>
            Compute transport which wraps an underlying stream
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.Transports.StreamTransport.Position">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.StreamTransport.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">Stream to use for the transferring data</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.StreamTransport.ReadPartialAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.StreamTransport.WriteAsync(System.Buffers.ReadOnlySequence{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.StreamTransport.MarkCompleteAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.Transports.TcpTransport">
            <summary>
            Implementation of <see cref="T:EpicGames.Horde.Compute.IComputeTransport"/> for communicating over a socket
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Compute.Transports.TcpTransport.Position">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.TcpTransport.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Constructor
            </summary>
            <param name="socket">Socket to communicate over</param>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.TcpTransport.ReadPartialAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.TcpTransport.WriteAsync(System.Buffers.ReadOnlySequence{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.Transports.TcpTransport.MarkCompleteAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Compute.WorkerComputeSocket">
            <summary>
            Provides functionality for attaching buffers for compute workers 
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Compute.WorkerComputeSocket.IpcEnvVar">
            <summary>
            Name of the environment variable for passing the name of the compute channel
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.WorkerComputeSocket.#ctor(EpicGames.Horde.Compute.Buffers.SharedMemoryBuffer)">
            <summary>
            Creates a socket for a worker
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.WorkerComputeSocket.Open">
            <summary>
            Opens a socket which allows a worker to communicate with the Horde Agent
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Compute.WorkerComputeSocket.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.WorkerComputeSocket.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.WorkerComputeSocket.AttachRecvBuffer(System.Int32,EpicGames.Horde.Compute.IComputeBufferWriter)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Compute.WorkerComputeSocket.AttachSendBuffer(System.Int32,EpicGames.Horde.Compute.IComputeBufferReader)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.HordeHttpClient">
            <summary>
            Wraps an Http client which communicates with the Horde server
            </summary>
        </member>
        <member name="P:EpicGames.Horde.HordeHttpClient.HttpClient">
            <summary>
            The configured HTTP client
            </summary>
        </member>
        <member name="M:EpicGames.Horde.HordeHttpClient.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Constructor
            </summary>
            <param name="httpClient">Client to use for communication</param>
        </member>
        <member name="M:EpicGames.Horde.HordeHttpClient.#ctor(System.Uri,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="uri">Base URI of the server</param>
            <param name="token">Access token for the connection</param>
        </member>
        <member name="M:EpicGames.Horde.HordeHttpClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.HordeHttpClient.ConfigureJsonSerializer(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Configures a JSON serializer to read Horde responses
            </summary>
            <param name="options">options for the serializer</param>
        </member>
        <member name="M:EpicGames.Horde.HordeHttpClient.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a resource from an HTTP endpoint and parses it as a JSON object
            </summary>
            <typeparam name="TResponse">The object type to return</typeparam>
            <param name="relativePath">The url to retrieve</param>
            <param name="cancellationToken">Cancels the request</param>
            <returns>New instance of the object</returns>
        </member>
        <member name="T:EpicGames.Horde.Logs.LogChunkNode">
            <summary>
            Read-only buffer for log text, with indexed line offsets.
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Logs.LogChunkNode.LinesCollection">
            <summary>
            Provides access to the lines for this chunk through a list interface
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkNode.LinesCollection.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkNode.LinesCollection.Count">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.LinesCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.LinesCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkNode.Empty">
            <summary>
            Empty log chunk
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkNode.Data">
            <summary>
            The raw text data. Contains a complete set of lines followed by newline characters.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkNode.Span">
            <summary>
            Span for the raw text data.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkNode.Lines">
            <summary>
            Accessor for the lines in this chunk
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkNode.LineOffsets">
            <summary>
            Offsets of lines within the data object, including a sentinel for the end of the data (LineCount + 1 entries).
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkNode.Length">
            <summary>
            Length of this chunk
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkNode.LineCount">
            <summary>
            Number of lines in the block (excluding the sentinel).
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Constructor
            </summary>
            <param name="data">Data to construct from</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.#ctor(System.ReadOnlyMemory{System.Byte},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Deserializing constructor
            </summary>
            <param name="reader">Reader to pull data from</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.GetLine(System.Int32)">
            <summary>
            Accessor for an individual line
            </summary>
            <param name="idx">Index of the line to retrieve</param>
            <returns>Line at the given index</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.GetLineWithNewline(System.Int32)">
            <summary>
            Accessor for an individual line, including the trailing newline character
            </summary>
            <param name="idx">Index of the line to retrieve</param>
            <returns>Line at the given index</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.GetLineIndexForOffset(System.Int32)">
            <summary>
            Find the line index for a particular offset
            </summary>
            <param name="offset">Offset within the text</param>
            <returns>The line index</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.FindLineOffsets(System.ReadOnlySpan{System.Byte})">
            <summary>
            Creates a new list of line offsets for the given text
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkNode.UpdateLineOffsets(System.ReadOnlySpan{System.Byte},System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Updates the length of this chunk, computing all the newline offsets
            </summary>
            <param name="data">Text to search for line endings</param>
            <param name="start">Start offset within the text buffer</param>
            <param name="lineOffsets">Offsets of each line within the text</param>
        </member>
        <member name="T:EpicGames.Horde.Logs.LogChunkRef">
            <summary>
            Reference to a chunk of text, with information about its placement in the larger log file
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkRef.LineIndex">
            <summary>
            First line within the file
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkRef.LineCount">
            <summary>
            Number of lines in this block
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkRef.Offset">
            <summary>
            Offset within the entire log file
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkRef.Length">
            <summary>
            Length of this chunk
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkRef.#ctor(System.Int32,System.Int32,System.Int64,System.Int32,EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Logs.LogChunkNode})">
            <summary>
            Constructor
            </summary>
            <param name="lineIndex">Index of the first line within this block</param>
            <param name="lineCount">Number of lines in the chunk</param>
            <param name="offset">Offset within the log file</param>
            <param name="length">Length of the chunk</param>
            <param name="target">Referenced log text</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkRef.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Deserializing constructor
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkRef.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Logs.LogChunkBuilder">
            <summary>
            Builder for <see cref="T:EpicGames.Horde.Logs.LogChunkNode"/> objects.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.LogChunkBuilder._data">
            <summary>
            Accessor for Data
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.LogChunkBuilder._length">
            <summary>
            Current used length of the buffer
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.LogChunkBuilder._lineOffsets">
            <summary>
            Offsets of the start of each line within the data
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkBuilder.Length">
            <summary>
            Current length of the buffer
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkBuilder.LineCount">
            <summary>
            Number of lines in this buffer
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkBuilder.Capacity">
            <summary>
            Capacity of the buffer
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="data">Data to initialize this chunk with. Ownership of this array is transferred to the chunk, and its length determines the chunk size.</param>
            <param name="length">Number of valid bytes within the initial data array</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.#ctor(System.Byte[],System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="length"></param>
            <param name="lineOffsets"></param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.Clear">
            <summary>
            Clear the contents of the buffer
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.GetLine(System.Int32)">
            <summary>
            Gets a line at the given index
            </summary>
            <param name="index">Index of the line</param>
            <returns>Text for the line</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.Append(System.ReadOnlySpan{System.Byte})">
            <summary>
            Create a new chunk data object with the given data appended. The internal buffers are reused, with the assumption that
            there is no contention over writing to the same location in the chunk.
            </summary>
            <param name="textData">The data to append</param>
            <returns>New chunk data object</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.AppendJsonAsPlainText(System.ReadOnlySpan{System.Byte},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Appends JSON text from another buffer as plain text in this one
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.AppendJsonAsPlainText(EpicGames.Horde.Logs.LogChunkNode,System.Int32,System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Appends JSON text from another buffer as plain text in this one
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.CreateOutputSpace(System.Int32)">
            <summary>
            Ensure there is a certain amount of space in the output buffer
            </summary>
            <param name="appendLength">Required space</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.IsEmptyOrWhitespace(System.ReadOnlySpan{System.Byte})">
            <summary>
            Determines if the given line is empty
            </summary>
            <param name="input">The input data</param>
            <returns>True if the given text is empty</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.ConvertToPlainText(System.ReadOnlySpan{System.Byte},System.Byte[],System.Int32)">
            <summary>
            Converts a JSON log line to plain text
            </summary>
            <param name="input">The JSON data</param>
            <param name="output">Output buffer for the converted line</param>
            <param name="outputOffset">Offset within the buffer to write the converted data</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.UnescapeUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Unescape a json utf8 string
            </summary>
            <param name="source">Source span of bytes</param>
            <param name="target">Target span of bytes</param>
            <returns>Length of the converted data</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.Shrink">
            <summary>
            Shrinks the data allocated by this chunk to the minimum required
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.ToArray">
            <summary>
            Create an array of lines from the text
            </summary>
            <returns>Array of lines</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkBuilder.ToLogChunk">
            <summary>
            Create a <see cref="T:EpicGames.Horde.Logs.LogChunkNode"/> object from the current state
            </summary>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Logs.LogChunkSequenceBuilder">
            <summary>
            Builds a sequence of log chunks
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkSequenceBuilder.ChunkSize">
            <summary>
            Desired size for each chunk
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkSequenceBuilder.Chunks">
            <summary>
            The complete chunks. Note that this does not include data which has not yet been flushed.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkSequenceBuilder.Length">
            <summary>
            Total length of the sequence
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogChunkSequenceBuilder.LineCount">
            <summary>
            Number of lines in this builder
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkSequenceBuilder.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="chunkSize">Desired size for each chunk. Each chunk will be limited to this size.</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkSequenceBuilder.Clear">
            <summary>
            Clear the current contents of the buffer
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkSequenceBuilder.Remove(System.Int32)">
            <summary>
            Remove a number of chunks from the start of the builder
            </summary>
            <param name="count">Number of chunks to remove</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkSequenceBuilder.Append(System.ReadOnlySpan{System.Byte})">
            <inheritdoc cref="M:EpicGames.Horde.Logs.LogChunkBuilder.Append(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkSequenceBuilder.AppendJsonAsPlainText(System.ReadOnlySpan{System.Byte},Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="M:EpicGames.Horde.Logs.LogChunkBuilder.AppendJsonAsPlainText(System.ReadOnlySpan{System.Byte},Microsoft.Extensions.Logging.ILogger)"/>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkSequenceBuilder.Flush">
            <summary>
            Flushes the current contents of the builder
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkSequenceBuilder.EnumerateLines(System.Int32)">
            <summary>
            Enumerate lines starting at the given index
            </summary>
            <param name="startIdx">Index to start from</param>
            <returns>Sequence of lines</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkSequenceBuilder.CreateOutputSpace(System.Int32)">
            <summary>
            Flushes the current chunk if necessary to provide the requested space
            </summary>
            <param name="requiredSpace">Space required in <see cref="F:EpicGames.Horde.Logs.LogChunkSequenceBuilder._nextChunkBuilder"/></param>
        </member>
        <member name="T:EpicGames.Horde.Logs.LogChunkExtensions">
            <summary>
            Extension methods for ILogText
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkExtensions.GetChunkForOffset(System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Logs.LogChunkRef},System.Int64)">
            <summary>
            Gets the chunk index containing the given offset.
            </summary>
            <param name="chunks">The chunks to search</param>
            <param name="offset">The offset to search for</param>
            <returns>The chunk index containing the given offset</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkExtensions.GetChunkForLine(System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Logs.LogChunkRef},System.Int32)">
            <summary>
            Gets the starting chunk index for the given line
            </summary>
            <param name="chunks">The chunks to search</param>
            <param name="lineIndex">Index of the line to query</param>
            <returns>Index of the chunk to fetch</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogChunkExtensions.ConvertJsonToPlainText(EpicGames.Horde.Logs.LogChunkNode,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Converts a log text instance to plain text
            </summary>
            <param name="logText">The text to convert</param>
            <param name="logger">Logger for conversion warnings</param>
            <returns>The plain text instance</returns>
        </member>
        <member name="T:EpicGames.Horde.Logs.LogIndexNode">
            <summary>
            Index for a log file.
            
            The index consists of a sequence of compressed, plain text blocks (see <see cref="T:EpicGames.Horde.Logs.LogChunkRef"/>, and a 
            set of (ngram, block index) pairs encoded as 64-bit integers (see <see cref="T:EpicGames.Horde.Logs.NgramSet"/>). 
            
            Each ngram is a 1-4 byte sequence of utf8 bytes, padded out to 32-bits (see <see cref="T:EpicGames.Horde.Logs.Ngram"/>).
            
            When performing a text search, the search term is split into a set of ngrams, and the set queried for blocks containing
            them all. Matching blocks are decompressed and scanned for matches using a simplified Knuth-Morris-Pratt search.
            
            Since alignment of ngrams may not match alignment of ngrams in the search term, we offset the search term by
            1-4 bytes and include the union of blocks matching at any offset.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.LogIndexNode.CurrentVersion">
            <summary>
            Version number for serialized data
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.LogIndexNode._ngramSet">
            <summary>
            Index for tokens into the block list
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.LogIndexNode._numChunkBits">
            <summary>
            Number of bits in the index devoted to the block index
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.LogIndexNode._plainTextChunkRefs">
            <summary>
            List of text blocks
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogIndexNode.Empty">
            <summary>
            Empty index data
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogIndexNode.PlainTextChunkRefs">
            <summary>
            Public accessor for the plain text chunks
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogIndexNode.LineCount">
            <summary>
            Number of lines covered by the index
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogIndexNode.Length">
            <summary>
            Length of the text data
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogIndexNode.#ctor(EpicGames.Horde.Logs.NgramSet,System.Int32,EpicGames.Horde.Logs.LogChunkRef[])">
            <summary>
            Constructor
            </summary>
            <param name="ngramSet">Index into the text chunks</param>
            <param name="numChunkBits">Number of bits devoted to the chunks index</param>
            <param name="plainTextChunkRefs">Plain text chunks for this log file</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogIndexNode.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">Reader for data</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogIndexNode.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogIndexNode.AppendAsync(EpicGames.Horde.Storage.IStorageWriter,System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Logs.LogChunkNode},System.Threading.CancellationToken)">
            <summary>
            Appends a set of text blocks to this index
            </summary>
            <param name="writer">Writer for output nodes</param>
            <param name="appendPlainTextChunks">Text blocks to append</param>
            <param name="cancellationToken"></param>
            <returns>New log index with the given blocks appended</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogIndexNode.Search(System.Int32,EpicGames.Horde.Logs.SearchTerm,EpicGames.Horde.Logs.SearchStats,System.Threading.CancellationToken)">
            <summary>
            Search for the given text in the index
            </summary>
            <param name="firstLineIndex">First line index to search from</param>
            <param name="text">Text to search for</param>
            <param name="stats">Receives stats for the search</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>List of line numbers for the text</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogIndexNode.EnumeratePossibleChunks(System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Search for the given text in the index
            </summary>
            <param name="text">Text to search for</param>
            <param name="lineIndex">The first </param>
            <returns>List of line numbers for the text</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogIndexNode.GetAlignedTokenPredicate(System.ReadOnlySpan{System.Byte},System.Boolean,System.Collections.Generic.HashSet{System.UInt64},System.Collections.Generic.List{System.Predicate{System.Int32}})">
            <summary>
            Gets predicates for matching a token that starts 
            </summary>
            <param name="text">The token text</param>
            <param name="allowPartialMatch">Whether to allow a partial match of the token</param>
            <param name="tokens">Set of aligned tokens that are required</param>
            <param name="predicates">List of predicates for the search</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogIndexNode.GetUnalignedTokenPredicate(System.ReadOnlySpan{System.Byte},System.Boolean,System.Collections.Generic.List{System.Predicate{System.Int32}})">
            <summary>
            Generates a predicate for matching a token which may or may not start on a regular token boundary
            </summary>
            <param name="text">The token text</param>
            <param name="allowPartialMatch">Whether to allow a partial match of the token</param>
            <param name="predicates">List of predicates for the search</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogIndexNode.ChunkContainsToken(System.Int32,System.UInt64,System.UInt64)">
            <summary>
            Tests whether a chunk contains a particular token
            </summary>
            <param name="chunkIdx">Index of the chunk to search</param>
            <param name="token">The token to test</param>
            <param name="tokenMask">Mask of which bits in the token are valid</param>
            <returns>True if the given block contains a token</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogIndexNode.ChunksContainingNgram(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Tests whether a chunk contains a particular ngram
            </summary>
            <param name="text">The token to test</param>
            <param name="offset">Offset of the window into the token to test</param>
            <param name="allowPartialMatch">Whether to allow a partial match of the token</param>
            <returns>True if the given block contains a token</returns>
        </member>
        <member name="T:EpicGames.Horde.Logs.LogFormat">
            <summary>
            Format for the log file
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.LogFormat.Text">
            <summary>
            Text data
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.LogFormat.Json">
            <summary>
            Json data
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Logs.LogNode">
            <summary>
            Represents an entire log
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogNode.Format">
            <summary>
            Format for this log file
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogNode.LineCount">
            <summary>
            Total number of lines
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogNode.Length">
            <summary>
            Length of the log file
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogNode.TextChunkRefs">
            <summary>
            Text blocks for this chunk
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogNode.IndexRef">
            <summary>
            Index for this log
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogNode.Complete">
            <summary>
            Whether this log is complete
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogNode.#ctor(EpicGames.Horde.Logs.LogFormat,System.Int32,System.Int64,System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Logs.LogChunkRef},EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Logs.LogIndexNode},System.Boolean)">
            <summary>
            Deserializing constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogNode.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Deserializing constructor
            </summary>
            <param name="reader">Reader to draw data from</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogNode.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Logs.LogBuilder">
            <summary>
            Assists building log files through trees of <see cref="T:EpicGames.Horde.Logs.LogNode"/>, <see cref="T:EpicGames.Horde.Logs.LogIndexNode"/> and <see cref="T:EpicGames.Horde.Logs.LogChunkNode"/> nodes.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.LogBuilder.DefaultTextBlockLength">
            <summary>
            Default maximum size for a log text block
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.LogBuilder.DefaultIndexBlockLength">
            <summary>
            Default maximum size for an index text block
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogBuilder.LineCount">
            <summary>
            Number of lines written to the log
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.LogBuilder.FlushedLineCount">
            <summary>
            Number of lines flushed to storage
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogBuilder.#ctor(EpicGames.Horde.Logs.LogFormat,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="format">Format for data in the log file</param>
            <param name="logger"></param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogBuilder.#ctor(EpicGames.Horde.Logs.LogFormat,System.Int32,System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="format">Format of data in the log file</param>
            <param name="maxTextBlockLength">maximum size for a regular text block</param>
            <param name="maxIndexBlockLength">Maximum size for an index text block</param>
            <param name="logger">Logger for conversion errors</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogBuilder.ReadTailData(System.Int32,System.Int32)">
            <summary>
            Read data from the unflushed log tail
            </summary>
            <param name="firstLineIdx">The first line to read, from the end of the flushed data</param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogBuilder.WriteData(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Append JSON data to the end of the log
            </summary>
            <param name="data">Log data to append</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogBuilder.FlushAsync(EpicGames.Horde.Storage.IStorageWriter,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Flushes the written data to the log
            </summary>
            <param name="writer">Writer for the output nodes</param>
            <param name="complete">Whether the log is complete</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Logs.LogNodeExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogNodeExtensions.ReadLogAsync(EpicGames.Horde.Logs.LogNode,EpicGames.Horde.Storage.BundleReader,System.Threading.CancellationToken)">
            <summary>
            Reads lines from a line
            </summary>
            <param name="logNode">Log to read from</param>
            <param name="reader">Reader to pull nodes from</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Sequence of line buffers</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.LogNodeExtensions.ReadLogLinesAsync(EpicGames.Horde.Logs.LogNode,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads lines from a line
            </summary>
            <param name="logNode">Log to read from</param>
            <param name="index">Zero-based index of the first line to read from</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Sequence of line buffers</returns>
        </member>
        <member name="T:EpicGames.Horde.Logs.Ngram">
            <summary>
            Functionality for decomposing log text into ngrams.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.Ngram.MaxBytes">
            <summary>
            Maximum number of bytes in each ngram
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.Ngram.MaxBits">
            <summary>
            Number of bits in each ngram
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.Ngram.s_tokenTypes">
            <summary>
            Lookup from input byte to token type
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.Ngram.s_tokenChars">
            <summary>
            Lookup from input byte to token char
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.Ngram.Read(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets a single token
            </summary>
            <param name="text">The text to parse</param>
            <returns>The token value</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.Ngram.Decompose(System.ReadOnlySpan{System.Byte},System.Action{System.UInt64})">
            <summary>
            Decompose a span of text into tokens
            </summary>
            <param name="text">Text to scan</param>
            <param name="addNgram">Receives a set of tokens</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.Ngram.Decompose(System.ReadOnlySpan{System.Byte})">
            <summary>
            Decompose a string to a set of ngrams
            </summary>
            <param name="text">Text to scan</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.Ngram.GetText(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Gets the length of the first token in the given span
            </summary>
            <param name="text">The text to search</param>
            <param name="pos">Start position for the search</param>
            <returns>Length of the first token</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.Ngram.GetWindowedValue(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Gets the length of the first token in the given span
            </summary>
            <param name="text">The text to search</param>
            <param name="offset">Offset of the window to read from the token</param>
            <returns>Length of the first token</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.Ngram.GetWindowedMask(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Gets the length of the first token in the given span
            </summary>
            <param name="text">The text to search</param>
            <param name="offset">Offset of the window to read from the token</param>
            <param name="allowPartialMatch">Whether to allow only matching the start of the string</param>
            <returns>Length of the first token</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.Ngram.GetTokenTypes">
            <summary>
            Build the lookup table for token types
            </summary>
            <returns>Array whose elements map from an input byte to token type</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.Ngram.GetTokenChars">
            <summary>
            Build the lookup table for token types
            </summary>
            <returns>Array whose elements map from an input byte to token type</returns>
        </member>
        <member name="T:EpicGames.Horde.Logs.NgramSet">
            <summary>
            A sparse, space-efficient set of 64-bit values. Implemented as a trie backed by a flat lookup table.
            
            Each 64-bit value in the set is decomposed into 4-bit fragments, and each node in the trie contains a 2^4=16-bit mask 
            indicating which child nodes exist. The array of nodes is stored in a flat buffer, with a predictable order, with 
            the children of a particular node stored contiguously, breadth first. 
            
            Doing so allows constructing a lookup table for the first child of each parent node with a single pass of
            the buffer, allowing efficient traversal of the tree to satisfy queries.
            
            In practice, only the top 32-bits of values stored in the trie are used for encoding ngram information. The
            bottom 32 bits are used to index a block number, allowing querying the existence of ngrams and their
            rough location.
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Logs.NgramSet.StackItem">
            <summary>
            Stack item for traversing the tree
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.NgramSet.StackItem._index">
            <summary>
            The current node index
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.NgramSet.StackItem._value">
            <summary>
            Value in the current node (0-15)
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Logs.NgramSet.VisitorDelegate">
            <summary>
            Delegate for filtering values during a tree traversal
            </summary>
            <param name="value">The current value</param>
            <param name="mask">Mask for which bits in the value are valid</param>
            <returns>True if values matching the given mask should be enumerated</returns>
        </member>
        <member name="F:EpicGames.Horde.Logs.NgramSet.Height">
            <summary>
            Height of the tree
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.NgramSet.NodeData">
            <summary>
            Array of bitmasks for each node in the tree
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.NgramSet._nodeData">
            <summary>
            Array of bitmasks for each node in the tree
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.NgramSet._firstChildIndex">
            <summary>
            Array of child offsets for each node. Excludes the last layer of the tree.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.NgramSet.Empty">
            <summary>
            Empty index definition
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSet.#ctor(System.UInt16[])">
            <summary>
            Constructor
            </summary>
            <param name="nodeData">Node data</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSet.Contains(System.UInt64)">
            <summary>
            Tests whether the given value is in the trie
            </summary>
            <param name="value">The value to check for</param>
            <returns>True if the value is in the trie</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSet.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSet.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSet.EnumerateValues(EpicGames.Horde.Logs.NgramSet.VisitorDelegate)">
            <summary>
            Enumerate all values matching a given filter
            </summary>
            <param name="predicate">Predicate for which values to include</param>
            <returns>Values satisfying the given predicate</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSet.EnumerateRange(System.UInt64,System.UInt64)">
            <summary>
            Enumerates all values in the trie between the given ranges
            </summary>
            <param name="minValue">Minimum value to enumerate</param>
            <param name="maxValue">Maximum value to enumerate</param>
            <returns>Sequence of values</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSet.CreateChildLookup(System.UInt16[])">
            <summary>
            Creates a lookup for child node offsets from raw node data
            </summary>
            <param name="nodeData">Array of masks for each node</param>
            <returns>Array of offsets</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSet.CountBits(System.UInt16)">
            <summary>
            Count the number of set bits in the given value
            </summary>
            <param name="value">Value to test</param>
            <returns>Number of set bits</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSet.Read(EpicGames.Core.IMemoryReader)">
            <summary>
            Read a trie from the given buffer
            </summary>
            <param name="reader">Reader to read from</param>
            <returns>New trie</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSet.Write(EpicGames.Core.IMemoryWriter)">
            <summary>
            Write this trie to the given buffer
            </summary>
            <param name="writer">Writer to output to</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSet.GetSerializedSize">
            <summary>
            Gets the serialized size of this trie
            </summary>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Logs.NgramSetExtensions">
            <summary>
            Extension methods for serializing tries
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSetExtensions.ReadNgramSet(EpicGames.Core.IMemoryReader)">
            <summary>
            Read a trie from the given buffer
            </summary>
            <param name="reader">Reader to read from</param>
            <returns>New trie</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSetExtensions.WriteNgramSet(EpicGames.Core.IMemoryWriter,EpicGames.Horde.Logs.NgramSet)">
            <summary>
            Write this trie to the given buffer
            </summary>
            <param name="writer">Writer to output to</param>
            <param name="set">Trie to write</param>
        </member>
        <member name="T:EpicGames.Horde.Logs.NgramSetBuilder">
            <summary>
            Structure used for building compact <see cref="T:EpicGames.Horde.Logs.NgramSet"/> instances
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Logs.NgramSetBuilder.Node">
            <summary>
            Node within the trie
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.NgramSetBuilder._root">
            <summary>
            The root node
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSetBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSetBuilder.Add(System.UInt64)">
            <summary>
            Adds a value to the trie
            </summary>
            <param name="value">Value to add</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSetBuilder.Contains(System.UInt64)">
            <summary>
            Searches for the given item in the trie
            </summary>
            <param name="value">Value to add</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.NgramSetBuilder.ToNgramSet">
            <summary>
            Creates a <see cref="T:EpicGames.Horde.Logs.NgramSet"/> from this data
            </summary>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Logs.SearchStats">
            <summary>
            Stats for a search
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.SearchStats.NumScannedBlocks">
            <summary>
            Number of blocks that were scanned
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.SearchStats.NumScannedBytes">
            <summary>
            Number of bytes that had to be scanned for results
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.SearchStats.NumSkippedBlocks">
            <summary>
            Number of blocks that were skipped
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.SearchStats.NumDecompressedBlocks">
            <summary>
            Number of blocks that had to be decompressed
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.SearchStats.NumFalsePositiveBlocks">
            <summary>
            Number of blocks that were searched but did not contain the search term
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Logs.SearchTerm">
            <summary>
            Stores cached information about a utf8 search term 
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.SearchTerm.Text">
            <summary>
            The search text
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Logs.SearchTerm.Bytes">
            <summary>
            The utf-8 bytes to search for
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.SearchTerm._searchBytes">
            <summary>
            Normalized (lowercase) utf-8 bytes to search for
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Logs.SearchTerm._skipTable">
            <summary>
            Skip table for comparisons
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.SearchTerm.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text">The text to search for</param>
        </member>
        <member name="M:EpicGames.Horde.Logs.SearchTerm.FindOcurrences(System.ReadOnlyMemory{System.Byte},EpicGames.Horde.Logs.SearchTerm)">
            <summary>
            Find all ocurrences of the text in the given buffer
            </summary>
            <param name="buffer">The buffer to search</param>
            <param name="text">The text to search for</param>
            <returns>Sequence of offsets within the buffer</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.SearchTerm.FindNextOcurrence(System.ReadOnlySpan{System.Byte},System.Int32,EpicGames.Horde.Logs.SearchTerm)">
            <summary>
            Perform a case insensitive search for the next occurerence of the search term in a given buffer
            </summary>
            <param name="buffer">The buffer to search</param>
            <param name="offset">Starting offset for the search</param>
            <param name="text">The text to search for</param>
            <returns>Offset of the next occurence, or -1</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.SearchTerm.Matches(System.ReadOnlySpan{System.Byte},System.Int32,EpicGames.Horde.Logs.SearchTerm)">
            <summary>
            Compare the search term against the given buffer
            </summary>
            <param name="buffer">The buffer to search</param>
            <param name="offset">Starting offset for the search</param>
            <param name="text">The text to search for</param>
            <returns>True if the text matches, false otherwise</returns>
        </member>
        <member name="T:EpicGames.Horde.Logs.SearchTextExtensions">
            <summary>
            Stores cached information about a utf8 search term 
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Logs.SearchTextExtensions.FindOcurrences(System.ReadOnlyMemory{System.Byte},EpicGames.Horde.Logs.SearchTerm)">
            <summary>
            Find all ocurrences of the text in the given buffer
            </summary>
            <param name="buffer">The buffer to search</param>
            <param name="text">The text to search for</param>
            <returns>Sequence of offsets within the buffer</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.SearchTextExtensions.FindNextOcurrence(System.ReadOnlySpan{System.Byte},System.Int32,EpicGames.Horde.Logs.SearchTerm)">
            <summary>
            Perform a case sensitive search for the next occurerence of the search term in a given buffer
            </summary>
            <param name="buffer">The buffer to search</param>
            <param name="offset">Starting offset for the search</param>
            <param name="text">The text to search for</param>
            <returns>Offset of the next occurence, or -1</returns>
        </member>
        <member name="M:EpicGames.Horde.Logs.SearchTextExtensions.Matches(System.ReadOnlySpan{System.Byte},System.Int32,EpicGames.Horde.Logs.SearchTerm)">
            <summary>
            Compare the search term against the given buffer
            </summary>
            <param name="buffer">The buffer to search</param>
            <param name="offset">Starting offset for the search</param>
            <param name="text">The text to search for</param>
            <returns>True if the text matches, false otherwise</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.Backends.FileStorageClient">
            <summary>
            Implementation of <see cref="T:EpicGames.Horde.Storage.IStorageClient"/> which writes data to files on disk.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.FileStorageClient.#ctor(EpicGames.Core.DirectoryReference,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="rootDir">Root directory for storing blobs</param>
            <param name="logger">Logger interface</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.FileStorageClient.ReadRefAsync(EpicGames.Core.FileReference)">
            <summary>
            Reads a ref from a file on disk
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.FileStorageClient.ReadBlobAsync(EpicGames.Horde.Storage.BlobLocator,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.FileStorageClient.ReadBlobRangeAsync(EpicGames.Horde.Storage.BlobLocator,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.FileStorageClient.WriteBlobAsync(System.IO.Stream,EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.FileStorageClient.AddAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.FileStorageClient.RemoveAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.FileStorageClient.FindNodesAsync(EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.FileStorageClient.DeleteRefAsync(EpicGames.Horde.Storage.RefName,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.FileStorageClient.TryReadRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefCacheTime,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.FileStorageClient.WriteRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.BlobHandle,EpicGames.Horde.Storage.RefOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.Backends.HttpStorageClient">
            <summary>
            Implementation of <see cref="T:EpicGames.Horde.Storage.IStorageClient"/> which communicates with an upstream Horde instance via HTTP.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Backends.HttpStorageClient.HttpClientName">
            <summary>
            Name of clients created from the http client factory
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.#ctor(System.Func{System.Net.Http.HttpClient},System.Func{System.Net.Http.HttpClient},Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.#ctor(System.Net.Http.IHttpClientFactory,System.Uri,System.String,Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.CreateClient(System.Net.Http.IHttpClientFactory)">
            <summary>
            Helper method to create an HTTP client from the given factory
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.CreateAuthenticatedClient(System.Net.Http.IHttpClientFactory,System.Uri,System.String)">
            <summary>
            Helper method to add the base address and auth header to an HTTP client
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.ReadBlobAsync(EpicGames.Horde.Storage.BlobLocator,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.ReadBlobRangeAsync(EpicGames.Horde.Storage.BlobLocator,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.WriteBlobAsync(System.IO.Stream,EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.AddAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.RemoveAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.FindNodesAsync(EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.DeleteRefAsync(EpicGames.Horde.Storage.RefName,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.TryReadRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefCacheTime,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.HttpStorageClient.WriteRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.BlobHandle,EpicGames.Horde.Storage.RefOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.Backends.MemoryStorageClient">
            <summary>
            Implementation of <see cref="T:EpicGames.Horde.Storage.IStorageClient"/> which stores data in memory. Not intended for production use.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Backends.MemoryStorageClient._blobs">
            <summary>
            Map of blob id to blob data
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Backends.MemoryStorageClient._refs">
            <summary>
            Map of ref name to ref data
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Backends.MemoryStorageClient._exports">
            <summary>
            Content addressed data lookup
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Backends.MemoryStorageClient.Blobs">
            <inheritdoc cref="F:EpicGames.Horde.Storage.Backends.MemoryStorageClient._blobs"/>
        </member>
        <member name="P:EpicGames.Horde.Storage.Backends.MemoryStorageClient.Refs">
            <inheritdoc cref="F:EpicGames.Horde.Storage.Backends.MemoryStorageClient._refs"/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.MemoryStorageClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.MemoryStorageClient.ReadBlobAsync(EpicGames.Horde.Storage.BlobLocator,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.MemoryStorageClient.ReadBlobRangeAsync(EpicGames.Horde.Storage.BlobLocator,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.MemoryStorageClient.WriteBlobAsync(System.IO.Stream,EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.MemoryStorageClient.AddAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.MemoryStorageClient.RemoveAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.MemoryStorageClient.FindNodesAsync(EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.MemoryStorageClient.DeleteRefAsync(EpicGames.Horde.Storage.RefName,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.MemoryStorageClient.TryReadRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefCacheTime,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Backends.MemoryStorageClient.WriteRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.BlobHandle,EpicGames.Horde.Storage.RefOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobData">
            <summary>
            Data for an individual node
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobData.#ctor(EpicGames.Horde.Storage.BlobType,EpicGames.Core.IoHash,System.ReadOnlyMemory{System.Byte},System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.BlobHandle})">
            <summary>
            Data for an individual node
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobHandle">
            <summary>
            Handle to a node. Can be used to reference nodes that have not been flushed yet.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BlobHandle.Hash">
            <summary>
            Hash of the target node
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobHandle.#ctor(EpicGames.Core.IoHash)">
            <summary>
            Constructor
            </summary>
            <param name="hash">Hash of the target node</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobHandle.HasLocator">
            <summary>
            Determines if the node has been written to storage
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobHandle.GetLocator">
            <summary>
            Gets the node locator. May throw if the node has not been written to storage yet.
            </summary>
            <returns>Locator for the node</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobHandle.AddWriteCallback(EpicGames.Horde.Storage.BlobWriteCallback)">
            <summary>
            Adds a callback to be executed once the node has been written. Triggers immediately if the node has already been written.
            </summary>
            <param name="callback">Action to be executed after the write</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobHandle.GetTypeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the type of this blob
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobHandle.GetRefsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the outward references from this blob
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobHandle.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a reader for this node's data
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobHandle.ReadPartialAsync(System.Int32,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Creates a reader for this node's data
            </summary>
            <param name="offset">Offset within the payload stream to start reading</param>
            <param name="buffer">Buffer to receive the data that was read</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Number of bytes that were read</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobHandle.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flush the node to storage and retrieve its locator
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobHandle.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobWriteCallback">
            <summary>
            Object to receive notifications on a node being written
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobWriteCallback.OnWrite">
            <summary>
            Callback for the node being written
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobId">
            <summary>
            Globally unique identifier for a blob, as a utf-8 string. Clients should not assume any internal structure to this identifier.
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobId.Validate">
            <summary>
            Dummy enum to allow invoking the constructor which takes a sanitized full path
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BlobId.Validate.None">
            <summary>
            Dummy value
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BlobId.Empty">
            <summary>
            Empty blob id
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BlobId.Inner">
            <summary>
            Identifier for the ref
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.#ctor(EpicGames.Core.Utf8String)">
            <summary>
            Constructor
            </summary>
            <param name="inner"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.#ctor(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobId.Validate)">
            <summary>
            Constructor
            </summary>
            <param name="inner"></param>
            <param name="validate"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.CreateNew(EpicGames.Core.Utf8String)">
            <summary>
            Create a unique blob id, optionally including a prefix
            </summary>
            <param name="prefix">Prefix for blob ids.</param>
            <returns>New content id</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.GenerateUniqueId(System.Span{System.Byte})">
            <summary>
            Creates a new identifier in the given buffer.
            </summary>
            <param name="output">Buffer to receive the output. The first 24 bytes will be written to.</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.UseDeterministicIds(System.Int32)">
            <summary>
            Enables the generation of deterministic ids, for tests
            </summary>
            <param name="counter">Next counter for new ids</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.IsValid">
            <summary>
            Checks whether this blob id is valid
            </summary>
            <returns>True if the identifier is valid</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.ValidateArgument(System.String,EpicGames.Core.Utf8String)">
            <summary>
            Validates a given string as a blob id
            </summary>
            <param name="name">Name of the argument</param>
            <param name="text">String to validate</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.Sanitize(EpicGames.Core.Utf8String)">
            <summary>
            Sanitize the given string to make a valid blob id
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.WithinFolder(EpicGames.Core.Utf8String)">
            <summary>
            Checks whether this blob is within the given folder
            </summary>
            <param name="folderName">Name of the folder</param>
            <returns>True if the the blob id is within the given folder</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.IsValidChar(System.Byte)">
            <summary>
            Test if a given character is valid in a store id
            </summary>
            <param name="c">Character to test</param>
            <returns>True if the character is valid</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.Equals(EpicGames.Horde.Storage.BlobId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.op_Equality(EpicGames.Horde.Storage.BlobId,EpicGames.Horde.Storage.BlobId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobId.op_Inequality(EpicGames.Horde.Storage.BlobId,EpicGames.Horde.Storage.BlobId)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobIdJsonConverter">
            <summary>
            Type converter for <see cref="T:EpicGames.Horde.Storage.BlobId"/> to and from JSON
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobIdJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobIdJsonConverter.Write(System.Text.Json.Utf8JsonWriter,EpicGames.Horde.Storage.BlobId,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobIdTypeConverter">
            <summary>
            Type converter from strings to <see cref="T:EpicGames.Horde.Storage.BlobId"/> objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobIdTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobIdTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobIdCbConverter">
            <summary>
            Type converter to compact binary
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobIdCbConverter.Read(EpicGames.Serialization.CbField)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobIdCbConverter.Write(EpicGames.Serialization.CbWriter,EpicGames.Horde.Storage.BlobId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobIdCbConverter.WriteNamed(EpicGames.Serialization.CbWriter,EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobId)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobIdExtensions">
            <summary>
            Extension methods for blob ids
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobIdExtensions.ReadBlobId(EpicGames.Core.IMemoryReader)">
            <summary>
            Deserialize a blob id
            </summary>
            <param name="reader">Reader to deserialize from</param>
            <returns>The blob id that was read</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobIdExtensions.WriteBlobId(EpicGames.Core.IMemoryWriter,EpicGames.Horde.Storage.BlobId)">
            <summary>
            Serialize a blob id
            </summary>
            <param name="writer">Writer to serialize to</param>
            <param name="value">Value to serialize</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobLocator">
            <summary>
            Unique identifier for a blob, as a utf-8 string. Clients should not assume any internal structure to this identifier; it only
            has meaning to the <see cref="T:EpicGames.Horde.Storage.IStorageClient"/> implementation.
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobLocator.Sanitize">
            <summary>
            Dummy enum to allow invoking the constructor which takes a sanitized full path
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BlobLocator.Sanitize.None">
            <summary>
            Dummy value
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BlobLocator.Empty">
            <summary>
            Empty blob locator
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BlobLocator.Inner">
            <summary>
            Identifier for the blob
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BlobLocator.HostId">
            <summary>
            Gets the server id for this blob
            </summary>
            <returns>Server id</returns>
        </member>
        <member name="P:EpicGames.Horde.Storage.BlobLocator.BlobId">
            <summary>
            Gets the content id for this blob
            </summary>
            <returns>Content id</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.#ctor(EpicGames.Core.Utf8String)">
            <summary>
            Constructor
            </summary>
            <param name="inner"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.#ctor(EpicGames.Horde.Storage.HostId,EpicGames.Horde.Storage.BlobId)">
            <summary>
            Constructor
            </summary>
            <param name="hostId"></param>
            <param name="blobId"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.#ctor(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructor
            </summary>
            <param name="hostId"></param>
            <param name="blobId"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.#ctor(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobLocator.Sanitize)">
            <summary>
            Constructor
            </summary>
            <param name="inner"></param>
            <param name="sanitize"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.Create(EpicGames.Horde.Storage.HostId,EpicGames.Core.Utf8String)">
            <summary>
            Create a unique content id, optionally including a ref name
            </summary>
            <param name="serverId">The server id</param>
            <param name="prefix">Prefix for blob names. Follows the same restrictions as for content ids.</param>
            <returns>New content id</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.ValidateArgument(System.String,EpicGames.Core.Utf8String)">
            <summary>
            Validates a given string as a content id
            </summary>
            <param name="name">Name of the argument</param>
            <param name="text">String to validate</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.IsValid">
            <summary>
            Checks whether this blob id is valid
            </summary>
            <returns>True if the identifier is valid</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.Equals(EpicGames.Horde.Storage.BlobLocator)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.ToString">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.op_Equality(EpicGames.Horde.Storage.BlobLocator,EpicGames.Horde.Storage.BlobLocator)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocator.op_Inequality(EpicGames.Horde.Storage.BlobLocator,EpicGames.Horde.Storage.BlobLocator)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobLocatorJsonConverter">
            <summary>
            Type converter for BlobId to and from JSON
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocatorJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocatorJsonConverter.Write(System.Text.Json.Utf8JsonWriter,EpicGames.Horde.Storage.BlobLocator,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobLocatorTypeConverter">
            <summary>
            Type converter from strings to BlobId objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocatorTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocatorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobLocatorCbConverter">
            <summary>
            Type converter to compact binary
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocatorCbConverter.Read(EpicGames.Serialization.CbField)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocatorCbConverter.Write(EpicGames.Serialization.CbWriter,EpicGames.Horde.Storage.BlobLocator)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocatorCbConverter.WriteNamed(EpicGames.Serialization.CbWriter,EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobLocator)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobLocatorExtensions">
            <summary>
            Extension methods for blob locators
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocatorExtensions.ReadBlobLocator(EpicGames.Core.IMemoryReader)">
            <summary>
            Deserialize a blob locator
            </summary>
            <param name="reader">Reader to deserialize from</param>
            <returns>The blob id that was read</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobLocatorExtensions.WriteBlobLocator(EpicGames.Core.IMemoryWriter,EpicGames.Horde.Storage.BlobLocator)">
            <summary>
            Serialize a blob locator
            </summary>
            <param name="writer">Writer to serialize to</param>
            <param name="value">Value to serialize</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.BlobType">
            <summary>
            Identifies the type of a blob
            </summary>
            <param name="Guid">Nominal identifier for the type</param>
            <param name="Version">Version number for the serializer</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobType.#ctor(System.Guid,System.Int32)">
            <summary>
            Identifies the type of a blob
            </summary>
            <param name="Guid">Nominal identifier for the type</param>
            <param name="Version">Version number for the serializer</param>
        </member>
        <member name="P:EpicGames.Horde.Storage.BlobType.Guid">
            <summary>Nominal identifier for the type</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BlobType.Version">
            <summary>Version number for the serializer</summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BlobType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleVersion">
            <summary>
            Bundle version number
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleVersion.Initial">
            <summary>
            Initial version number
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleVersion.ExportAliases">
            <summary>
            Added the BundleExport.Alias property
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleVersion.RemoveAliases">
            <summary>
            Back out change to include aliases. Will likely do this through an API rather than baked into the data. 
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleVersion.InPlace">
            <summary>
            Use data structures which support in-place reading and writing.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleVersion.ImportHashes">
            <summary>
            Add import hashes to imported nodes
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleVersion.LatestPlusOne">
            <summary>
            Last item in the enum. Used for <see cref="F:EpicGames.Horde.Storage.BundleVersion.Latest"/>
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleVersion.Latest">
            <summary>
            The current version number
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.Bundle">
            <summary>
            Header for the contents of a bundle. May contain an inlined payload object containing the object data itself.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Bundle.Header">
            <summary>
            Header for the bundle
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Bundle.Packets">
            <summary>
            Packet data as described in the header
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Bundle.#ctor(EpicGames.Horde.Storage.BundleHeader,System.Collections.Generic.IReadOnlyList{System.ReadOnlyMemory{System.Byte}})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Bundle.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Reads a bundle from a block of memory
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Bundle.FromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Reads a bundle from the given stream
            </summary>
            <param name="stream">Stream to read from</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Bundle that was read</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Bundle.AsSequence">
            <summary>
            Serializes the bundle to a sequence of bytes
            </summary>
            <returns>Sequence for the bundle</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleCompressionFormat">
            <summary>
            Indicates the compression format in the bundle
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleCompressionFormat.None">
            <summary>
            Packets are uncompressed
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleCompressionFormat.LZ4">
            <summary>
            LZ4 compression
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleCompressionFormat.Gzip">
            <summary>
            Gzip compression
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleCompressionFormat.Oodle">
            <summary>
            Oodle compression (Kraken)
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleSectionType">
            <summary>
            Identifier for the type of a section in the bundle header
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleSectionType.Types">
            <summary>
            List of custom types
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleSectionType.Imports">
            <summary>
            Imports of other bundles
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleSectionType.Exports">
            <summary>
            List of exports
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleSectionType.ExportRefs">
            <summary>
            References to exports in other bundles
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleSectionType.Packets">
            <summary>
            Packet headers
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleHeader">
            <summary>
            Header for the contents of a bundle.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleHeader.Signature">
            <summary>
            Signature bytes
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleHeader.PreludeLength">
            <summary>
            Length of the prelude data
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleHeader.Data">
            <summary>
            Underlying data for the header
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleHeader.Types">
            <summary>
            Types for exports within this bundle
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleHeader.Imports">
            <summary>
            Bundles that we reference nodes in
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleHeader.Exports">
            <summary>
            Nodes exported from this bundle
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleHeader.Packets">
            <summary>
            List of data packets within this bundle
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleHeader.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Construct a header from the given data encoded in the latest format
            </summary>
            <param name="data">Data for the header, including the prelude</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleHeader.Create(System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.BlobType},System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.BlobLocator},System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.BundleExport},System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.BundlePacket})">
            <summary>
            Constructs a new bundle header
            </summary>
            <param name="types">Type array indexed by each export</param>
            <param name="imports">Imported bundles</param>
            <param name="exports">Exports for nodes</param>
            <param name="packets">Compression packets within the bundle</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleHeader.Read(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Reads a bundle header from memory
            </summary>
            <param name="memory">Memory to deserialize from</param>
            <returns>New header object</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleHeader.ReadPrelude(System.ReadOnlySpan{System.Byte})">
            <summary>
            Validates that the prelude bytes for a bundle header are correct
            </summary>
            <param name="prelude">The prelude bytes</param>
            <returns>Length of the header data, including the prelude</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleHeader.FromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Reads a bundle header from a stream
            </summary>
            <param name="stream">Stream to read from</param>
            <param name="cancellationToken">Cancellation token for the stream</param>
            <returns>New header</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleTypeCollection">
            <summary>
            Collection of node types in a bundle
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleTypeCollection.NumBytesPerType">
            <summary>
            Number of bytes in a serialized <see cref="T:EpicGames.Horde.Storage.BlobType"/> instance
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleTypeCollection.Data">
            <summary>
            Data for this collection
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleTypeCollection.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleTypeCollection.#ctor(System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.BlobType})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleTypeCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleTypeCollection.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleTypeCollection.Measure(System.Collections.Generic.IReadOnlyCollection{EpicGames.Horde.Storage.BlobType})">
            <summary>
            Gets the size of memory required to serialize a collection of types
            </summary>
            <param name="types">Type collection</param>
            <returns>Number of bytes required to serialize the types</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleTypeCollection.Write(System.Span{System.Byte},System.Collections.Generic.IReadOnlyCollection{EpicGames.Horde.Storage.BlobType})">
            <summary>
            Serializes a set of types to a fixed block of memory
            </summary>
            <param name="span">Span to write the types to</param>
            <param name="types">Collection of types to be written</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleImportCollection">
            <summary>
            Collection of imported node references
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleImportCollection.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserializing constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleImportCollection.#ctor(System.Collections.Generic.IReadOnlyCollection{EpicGames.Horde.Storage.BlobLocator})">
            <summary>
            Constructor
            </summary>
            <param name="locators">Locators to write to the </param>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleImportCollection.Item(System.Int32)">
            <summary>
            Retrieve a single import from the collection
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleImportCollection.Count">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleImportCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleImportCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleImportCollection.Measure(System.Collections.Generic.IReadOnlyCollection{EpicGames.Horde.Storage.BlobLocator})">
            <summary>
            Measure the size of memory required to store a collection of import locators
            </summary>
            <param name="locators">Locators to write</param>
            <returns>Size in bytes of the output buffer</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleImportCollection.Write(System.Span{System.Byte},System.Collections.Generic.IReadOnlyCollection{EpicGames.Horde.Storage.BlobLocator})">
            <summary>
            Serialize a collection of locators to memory
            </summary>
            <param name="data">Output buffer for the serialized data</param>
            <param name="locators">Locators to write</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundlePacket">
            <summary>
            Descriptor for a compression packet
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundlePacket.NumBytes">
            <summary>
            Size of this structure when serialized
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundlePacket.CompressionFormat">
            <summary>
            Compression format for this packet
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundlePacket.EncodedOffset">
            <summary>
            Offset of the packet within the payload stream
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundlePacket.EncodedLength">
            <summary>
            Encoded length of the packet
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundlePacket.DecodedLength">
            <summary>
            Decoded length of the packet
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundlePacket.#ctor(EpicGames.Horde.Storage.BundleCompressionFormat,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="compressionFormat">Compression format for the packet</param>
            <param name="encodedOffset">Offset of the data within the payload stream</param>
            <param name="encodedLength">Size of the encoded data</param>
            <param name="decodedLength">Size of the decoded data</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundlePacket.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundlePacket.CopyTo(System.Span{System.Byte})">
            <summary>
            Serialize the struct to memory
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundlePacketCollection">
            <summary>
            Collection of information about packets in a bundle
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundlePacketCollection.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundlePacketCollection.#ctor(System.Collections.Generic.IReadOnlyCollection{EpicGames.Horde.Storage.BundlePacket})">
            <summary>
            Constructor
            </summary>
            <param name="packets">Packets to include in this collection</param>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundlePacketCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundlePacketCollection.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundlePacketCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundlePacketCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundlePacketCollection.Measure(System.Collections.Generic.IReadOnlyCollection{EpicGames.Horde.Storage.BundlePacket})">
            <summary>
            Measure the size of memory required to store a collection of import locators
            </summary>
            <param name="packets">Locators to write</param>
            <returns>Size in bytes of the output buffer</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundlePacketCollection.Write(System.Span{System.Byte},System.Collections.Generic.IReadOnlyCollection{EpicGames.Horde.Storage.BundlePacket})">
            <summary>
            Serialize a collection of packets to memory
            </summary>
            <param name="data">Output buffer for the serialized data</param>
            <param name="packets">Packets to write</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleExport">
            <summary>
            Entry for a node exported from an object
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleExport.NumBytes">
            <summary>
            Number of bytes in a serialized export object
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExport.Data">
            <summary>
            Raw data for this export
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExport.Hash">
            <summary>
            Hash of the node data
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExport.TypeIdx">
            <summary>
            Type id of the node. Can be used to look up the type information from the bundle header.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExport.Packet">
            <summary>
            Packet containing this export's data
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExport.Offset">
            <summary>
            Offset within the packet of the node data
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExport.Length">
            <summary>
            Length of the node
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExport.References">
            <summary>
            References to other nodes
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExport.#ctor(System.ReadOnlyMemory{System.Byte},EpicGames.Horde.Storage.BundleExportRefCollection)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExport.#ctor(System.Int32,EpicGames.Core.IoHash,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.BundleExportRef})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExport.Write(System.Span{System.Byte},System.Int32,EpicGames.Core.IoHash,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a new export to a block of memory
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleExportCollection">
            <summary>
            Entry for a node exported from an object
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportCollection.#ctor(System.ReadOnlyMemory{System.Byte},System.ReadOnlyMemory{System.Byte},EpicGames.Horde.Storage.BundleVersion)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExportCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExportCollection.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportCollection.Measure(System.Collections.Generic.IReadOnlyCollection{EpicGames.Horde.Storage.BundleExport})">
            <summary>
            Measure the size of memory required to store a collection of import locators
            </summary>
            <param name="exports">Locators to write</param>
            <returns>Size in bytes of the output buffer</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportCollection.Write(System.Span{System.Byte},System.Collections.Generic.IReadOnlyCollection{EpicGames.Horde.Storage.BundleExport})">
            <summary>
            Serialize a collection of packets to memory
            </summary>
            <param name="data">Output buffer for the serialized data</param>
            <param name="exports">Packets to write</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleExportRef">
            <summary>
            Reference to a node in another bundle
            </summary>
            <param name="ImportIdx">Index into the import table of the blob containing the referenced node. Can be -1 for references within the same bundle.</param>
            <param name="NodeIdx">Node imported from the bundle</param>
            <param name="Hash">Hash of the referenced node</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportRef.#ctor(System.Int32,System.Int32,EpicGames.Core.IoHash)">
            <summary>
            Reference to a node in another bundle
            </summary>
            <param name="ImportIdx">Index into the import table of the blob containing the referenced node. Can be -1 for references within the same bundle.</param>
            <param name="NodeIdx">Node imported from the bundle</param>
            <param name="Hash">Hash of the referenced node</param>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExportRef.ImportIdx">
            <summary>Index into the import table of the blob containing the referenced node. Can be -1 for references within the same bundle.</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExportRef.NodeIdx">
            <summary>Node imported from the bundle</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExportRef.Hash">
            <summary>Hash of the referenced node</summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.BundleExportRef.NumBytes">
            <summary>
            Number of bytes in the serialized object
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportRef.Read(System.ReadOnlySpan{System.Byte})">
            <summary>
            Deserialize this object from memory
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportRef.CopyTo(System.Span{System.Byte})">
            <summary>
            Serialize this object to memory
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleExportRefCollection">
            <summary>
            Collection of information about exported nodes
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExportRefCollection.Data">
            <summary>
            Data used to store this collection
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportRefCollection.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportRefCollection.#ctor(System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.BundleExportRef})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExportRefCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleExportRefCollection.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportRefCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleExportRefCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleData">
            <summary>
            Utility methods for bundles
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleData.Compress(EpicGames.Horde.Storage.BundleCompressionFormat,System.ReadOnlyMemory{System.Byte},EpicGames.Core.IMemoryWriter)">
            <summary>
            Compress a data packet
            </summary>
            <param name="format">Format for the compressed data</param>
            <param name="input">The data to compress</param>
            <param name="writer">Writer for output data</param>
            <returns>The compressed data</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleData.Decompress(EpicGames.Horde.Storage.BundleCompressionFormat,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <summary>
            Decompress a packet of data
            </summary>
            <param name="format">Format of the compressed data</param>
            <param name="input">Compressed data</param>
            <param name="output">Buffer to receive the decompressed data</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleReader">
            <summary>
            Writes nodes from bundles in an <see cref="T:EpicGames.Horde.Storage.IStorageClient"/> instance.
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleReader.BundleInfo">
            <summary>
            Computed information about a bundle
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleReader.QueuedHeader">
            <summary>
            Bundle header queued to be read
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleReader.QueuedPacket">
            <summary>
            Encoded bundle packet queued to be read
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.#ctor(EpicGames.Horde.Storage.IStorageClient,Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="store"></param>
            <param name="cache">Cache for data</param>
            <param name="logger">Logger for output</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.AddToCache(System.String,System.Object,System.Int32)">
            <summary>
            Adds an object to the storage cache
            </summary>
            <param name="cacheKey">Key for the item</param>
            <param name="value">Value to add</param>
            <param name="size">Size of the value</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.StartReadTask">
            <summary>
            Starts the background task for reading data from the store
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.ServiceReadQueueAsync(System.Threading.CancellationToken)">
            <summary>
            Dispatches requests in the read queue
            </summary>
            <param name="cancellationToken">Cancellation token for the background task</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.PerformHeaderReadGuardedAsync(EpicGames.Horde.Storage.BundleReader.QueuedHeader,System.Threading.CancellationToken)">
            <summary>
            Reads a bundle header from the queue
            </summary>
            <param name="queuedHeader">The header to read</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.PerformHeaderReadAsync(EpicGames.Horde.Storage.BundleReader.QueuedHeader,System.Threading.CancellationToken)">
            <summary>
            Reads a bundle header from the queue
            </summary>
            <param name="queuedHeader">The header to read</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.PerformPacketReadGuardedAsync(EpicGames.Horde.Storage.BundleReader.QueuedPacket,System.Threading.CancellationToken)">
            <summary>
            Reads a packet from storage
            </summary>
            <param name="queuedPacket">The packet to read</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.PerformPacketReadAsync(EpicGames.Horde.Storage.BundleReader.QueuedPacket,System.Threading.CancellationToken)">
            <summary>
            Reads a packet from storage
            </summary>
            <param name="queuedPacket">The packet to read</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.ReadBundleHeaderAsync(EpicGames.Horde.Storage.BlobLocator,System.Threading.CancellationToken)">
            <summary>
            Reads a bundle header from the given blob locator, or retrieves it from the cache
            </summary>
            <param name="locator"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.GetBundleInfoAsync(EpicGames.Horde.Storage.BlobLocator,System.Threading.CancellationToken)">
            <summary>
            Reads the header and structural metadata about the bundle
            </summary>
            <param name="locator">The bundle location</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Information about the bundle</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.ReadBundlePacketAsync(EpicGames.Horde.Storage.BundleReader.BundleInfo,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a decoded block from the store
            </summary>
            <param name="bundleInfo">Information about the bundle</param>
            <param name="packetIdx">Index of the packet</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>The decoded data</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.ReadAndDecodePacketAsync(EpicGames.Horde.Storage.BundleReader.BundleInfo,System.Int32)">
            <summary>
            Reads and decodes a packet from a bundle
            </summary>
            <param name="bundleInfo">Bundle to read from</param>
            <param name="packetIdx">Index of the packet to return</param>
            <returns>The decoded packet data</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.ReadEncodedPacketAsync(EpicGames.Horde.Storage.BundleReader.BundleInfo,System.Int32)">
            <summary>
            Reads an encoded packet from a bundle
            </summary>
            <param name="bundleInfo">Bundle to read from</param>
            <param name="packetIdx">Index of the packet to return</param>
            <returns>The encoded packet data</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.ReadNodeDataAsync(EpicGames.Horde.Storage.NodeLocator,System.Threading.CancellationToken)">
            <summary>
            Reads a node from a bundle
            </summary>
            <param name="locator">Locator for the node</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Node data read from the given bundle</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.ReadNodeAsync(EpicGames.Horde.Storage.NodeLocator,System.Threading.CancellationToken)">
            <summary>
            Reads a node from a bundle
            </summary>
            <param name="locator">Locator for the node</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Node data read from the given bundle</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleReader.ReadNodeAsync``1(EpicGames.Horde.Storage.NodeLocator,System.Threading.CancellationToken)">
            <summary>
            Reads a node from a bundle
            </summary>
            <param name="locator">Locator for the node</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Node data read from the given bundle</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleStorageClient">
            <summary>
            Base class for an implementation of <see cref="T:EpicGames.Horde.Storage.IStorageClient"/>, providing implementations for some common functionality using bundles.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleStorageClient.TreeReader">
            <summary>
            Reader for node data
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.ReadBlobAsync(EpicGames.Horde.Storage.BlobLocator,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.ReadBlobRangeAsync(EpicGames.Horde.Storage.BlobLocator,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.WriteBlobAsync(System.IO.Stream,EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.CreateWriter(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.BundleOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.EpicGames#Horde#Storage#IStorageClient#CreateWriter(EpicGames.Horde.Storage.RefName)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.AddAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.RemoveAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.FindNodesAsync(EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.DeleteRefAsync(EpicGames.Horde.Storage.RefName,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.TryReadRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefCacheTime,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClient.WriteRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.BlobHandle,EpicGames.Horde.Storage.RefOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleStorageClientExtensions">
            <summary>
            Extension methods for serializing bundles
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClientExtensions.ReadBundleAsync(EpicGames.Horde.Storage.IStorageClient,EpicGames.Horde.Storage.BlobLocator,System.Threading.CancellationToken)">
            <summary>
            Reads a bundle from the given blob id, or retrieves it from the cache
            </summary>
            <param name="store">The store instance to read from</param>
            <param name="locator"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleStorageClientExtensions.WriteBundleAsync(EpicGames.Horde.Storage.IStorageClient,EpicGames.Horde.Storage.Bundle,EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <summary>
            Writes a new bundle to the store
            </summary>
            <param name="store">The store instance to write to</param>
            <param name="bundle">Bundle data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <param name="prefix">Prefix for blob names. While the returned BlobId is guaranteed to be unique, this name can be used as a prefix to aid debugging.</param>
            <returns>Unique identifier for the blob</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleOptions">
            <summary>
            Options for configuring a bundle serializer
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleOptions.MaxBlobSize">
            <summary>
            Maximum payload size fo a blob
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleOptions.CompressionFormat">
            <summary>
            Compression format to use
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleOptions.MinCompressionPacketSize">
            <summary>
            Minimum size of a block to be compressed
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleOptions.MaxInMemoryDataLength">
            <summary>
            Maximum amount of data to store in memory. This includes any background writes as well as bundles being built.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleOptions.NodeCacheSize">
            <summary>
            Number of nodes to cache
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeKey">
            <summary>
            Unique identifier for a node
            </summary>
            <param name="Hash">Hash of the node</param>
            <param name="Type">Type of the node</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeKey.#ctor(EpicGames.Core.IoHash,EpicGames.Horde.Storage.BlobType)">
            <summary>
            Unique identifier for a node
            </summary>
            <param name="Hash">Hash of the node</param>
            <param name="Type">Type of the node</param>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeKey.Hash">
            <summary>Hash of the node</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeKey.Type">
            <summary>Type of the node</summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.FlushedNodeHandle">
            <summary>
            Implementation of <see cref="T:EpicGames.Horde.Storage.BlobHandle"/> for nodes which can be read from storage
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.FlushedNodeHandle.#ctor(EpicGames.Horde.Storage.BundleReader,EpicGames.Horde.Storage.NodeLocator)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.FlushedNodeHandle.HasLocator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.FlushedNodeHandle.GetLocator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.FlushedNodeHandle.AddWriteCallback(EpicGames.Horde.Storage.BlobWriteCallback)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.FlushedNodeHandle.ReadAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.FlushedNodeHandle.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeCache">
            <summary>
            Index of known nodes that can be used for deduplication.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeCache.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxKeys">Maximum number of node keys to keep in the cache</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeCache.Add(EpicGames.Horde.Storage.NodeKey,EpicGames.Horde.Storage.BlobHandle)">
            <summary>
            Adds a new node handle to the cache
            </summary>
            <param name="key">Unique node key</param>
            <param name="handle">Handle to the node</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeCache.TryGetNode(EpicGames.Horde.Storage.NodeKey,EpicGames.Horde.Storage.BlobHandle@)">
            <summary>
            Find a node within the cache
            </summary>
            <param name="key">Key to look up in the cache</param>
            <param name="handle">Handle for the node</param>
            <returns>True if the node was found</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.BundleWriter">
            <summary>
            Writes nodes of a tree to an <see cref="T:EpicGames.Horde.Storage.IStorageClient"/>, packed into bundles. Each <see cref="T:EpicGames.Horde.Storage.BundleWriter"/> instance is single threaded,
            but multiple instances may be written to in parallel.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.PendingNode.HasLocator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.PendingNode.GetLocator">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.PendingNode.AddWriteCallback(EpicGames.Horde.Storage.BlobWriteCallback)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.PendingNode.ReadAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.PendingNode.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.PendingBundle.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.BundleWriter.NodeCache">
            <summary>
            Cache of nodes to deduplicate against
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.#ctor(EpicGames.Horde.Storage.IStorageClient,EpicGames.Horde.Storage.BundleReader,EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.BundleOptions,EpicGames.Horde.Storage.NodeCache,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="store">Store to write data to</param>
            <param name="reader">Reader for serialized node data</param>
            <param name="refName">Name of the ref being written</param>
            <param name="options">Options for the writer</param>
            <param name="nodeCache">Cache of nodes for deduplication</param>
            <param name="traceLogger">Optional logger for trace information</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.#ctor(EpicGames.Horde.Storage.BundleWriter)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.EpicGames#Horde#Storage#IStorageWriter#Fork">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.Complete">
            <summary>
            Mark this writer as complete, allowing its data to be serialized.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.GetOutputBuffer(System.Int32,System.Int32)">
            <summary>
            Gets an output buffer for writing.
            </summary>
            <param name="usedSize">Current size in the existing buffer that has been written to</param>
            <param name="desiredSize">Desired size of the returned buffer</param>
            <returns>Buffer to be written into.</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.WriteNodeAsync(System.Int32,System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.BlobHandle},EpicGames.Horde.Storage.BlobType,System.Threading.CancellationToken)">
            <summary>
            Finish writing a node.
            </summary>
            <param name="size">Used size of the buffer</param>
            <param name="references">References to other nodes</param>
            <param name="type">Type of the node that was written</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Handle to the written node</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes all the current nodes to storage
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.BundleWriter.WriteRefAsync(EpicGames.Horde.Storage.BlobHandle,EpicGames.Horde.Storage.RefOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.Git.GitCommitProperty">
            <summary>
            Property names for git commits
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitCommitProperty.Tree">
            <summary>
            The root of the tree for this commit
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitCommitProperty.Author">
            <summary>
            Author of the commit
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitCommitProperty.Committer">
            <summary>
            Person that committed the change
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitCommitProperty.Parent">
            <summary>
            Parent commit
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.Git.GitCommit">
            <summary>
            Representation of a Git commit object
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitCommit.Properties">
            <summary>
            Properties for the commit
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitCommit.Message">
            <summary>
            Commit messages
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitCommit.#ctor(EpicGames.Core.Sha1Hash,EpicGames.Core.Utf8String)">
            <summary>
            Constructor
            </summary>
            <param name="tree"></param>
            <param name="message"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitCommit.AddProperty(EpicGames.Core.Utf8String,EpicGames.Core.Utf8String)">
            <summary>
            Adds a new property to the collection
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitCommit.GetProperty(EpicGames.Core.Utf8String)">
            <summary>
            Gets a property value with the given key name
            </summary>
            <param name="name">Name of the property</param>
            <returns>The property value</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitCommit.FindProperties(EpicGames.Core.Utf8String)">
            <summary>
            Gets property values with the given key name
            </summary>
            <param name="name">Name of the property</param>
            <returns>The property value</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitCommit.GetTree">
            <summary>
            The tree for this commit
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitCommit.GetParents">
            <summary>
            Parents of this commit
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitCommit.Serialize">
            <summary>
            Serializes this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.Git.GitObjectType">
            <summary>
            Type fields for git objects
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitObjectType.Blob">
            <summary>
            Blob objects
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitObjectType.Tree">
            <summary>
            Tree objects
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitObjectType.Commit">
            <summary>
            Commit objects
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.Git.GitObject">
            <summary>
            Utility methods for manipulating Git objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitObject.WriteHeaderAsync(System.IO.Stream,EpicGames.Core.Utf8String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Writes the header for an object to a stream
            </summary>
            <param name="stream"></param>
            <param name="type">Type of the object</param>
            <param name="size">Size of the object</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitObject.WriteHeader(EpicGames.Core.Utf8String,System.Int64,System.Security.Cryptography.IncrementalHash)">
            <summary>
            Appends data for a header to the hash
            </summary>
            <param name="type">Type of the object</param>
            <param name="size">Size of the object</param>
            <param name="hash">Hash for the header data</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitObject.WriteHeader(EpicGames.Core.Utf8String,System.Int64,System.Span{System.Byte})">
            <summary>
            Writes a header for an object
            </summary>
            <param name="type">Type of the object</param>
            <param name="size">Size of the object</param>
            <param name="buffer">Buffer to receive the data</param>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.Git.GitFileMode">
            <summary>
            Valid file modes for tree entries
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitFileMode.File">
            <summary>
            Regular file
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitFileMode.ExecutableFile">
            <summary>
            Executable file
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitFileMode.Tree">
            <summary>
            Child tree
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.Git.GitTree">
            <summary>
            Representation of a Git tree object
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitTree.Entries">
            <summary>
            Entries for this tree. Sort be sorted for consistency.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitTree.GetHash">
            <summary>
            Gets the hash of this tree object.
            </summary>
            <returns>Hash of the object</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitTree.Serialize">
            <summary>
            Serializes this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.Git.GitTreeEntry">
            <summary>
            Entry for a Git tree
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitTreeEntry.Mode">
            <summary>
            Mode for this entry. Can be any values from <see cref="T:EpicGames.Horde.Storage.Git.GitFileMode"/>
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitTreeEntry.Name">
            <summary>
            Name of this entry
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Git.GitTreeEntry.Hash">
            <summary>
            Hash of the object for this entry
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Git.GitTreeEntry.#ctor(EpicGames.Core.Utf8String,EpicGames.Core.Utf8String,EpicGames.Core.Sha1Hash)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.HostId">
            <summary>
            Identifies a host in the storage hierarchy, via a string of identifiers separated with colons.
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.HostId.Sanitize">
            <summary>
            Dummy enum to allow invoking the constructor which takes a sanitized full path
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.HostId.Sanitize.None">
            <summary>
            Dummy value
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.HostId.Empty">
            <summary>
            Empty host id
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.HostId.Inner">
            <summary>
            Identifier for the host
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.#ctor(EpicGames.Core.Utf8String)">
            <summary>
            Constructor
            </summary>
            <param name="inner"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.#ctor(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.HostId.Sanitize)">
            <summary>
            Constructor
            </summary>
            <param name="inner"></param>
            <param name="sanitize"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.Append(EpicGames.Core.Utf8String)">
            <summary>
            Appends another identifier to this host id
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.ValidateArgument(System.String,EpicGames.Core.Utf8String)">
            <summary>
            Validates a given string as a host id
            </summary>
            <param name="name">Name of the argument</param>
            <param name="text">String to validate</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.IsValidChar(System.Byte)">
            <summary>
            Test if a given character is valid in a store id
            </summary>
            <param name="c">Character to test</param>
            <returns>True if the character is valid</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.IsValid">
            <summary>
            Checks whether this blob id is valid
            </summary>
            <returns>True if the identifier is valid</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.GetUpstream">
            <summary>
            Gets the upstream host id
            </summary>
            <returns>The upstream host id</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.Equals(EpicGames.Horde.Storage.HostId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.op_Equality(EpicGames.Horde.Storage.HostId,EpicGames.Horde.Storage.HostId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostId.op_Inequality(EpicGames.Horde.Storage.HostId,EpicGames.Horde.Storage.HostId)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.HostIdJsonConverter">
            <summary>
            Type converter for <see cref="T:EpicGames.Horde.Storage.HostId"/> to and from JSON
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostIdJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostIdJsonConverter.Write(System.Text.Json.Utf8JsonWriter,EpicGames.Horde.Storage.HostId,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.HostIdTypeConverter">
            <summary>
            Type converter from strings to <see cref="T:EpicGames.Horde.Storage.HostId"/> objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostIdTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostIdTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.HostIdCbConverter">
            <summary>
            Type converter to compact binary
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostIdCbConverter.Read(EpicGames.Serialization.CbField)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostIdCbConverter.Write(EpicGames.Serialization.CbWriter,EpicGames.Horde.Storage.HostId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostIdCbConverter.WriteNamed(EpicGames.Serialization.CbWriter,EpicGames.Core.Utf8String,EpicGames.Horde.Storage.HostId)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.HostIdExtensions">
            <summary>
            Extension methods for <see cref="T:EpicGames.Horde.Storage.HostId"/>s.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostIdExtensions.ReadHostId(EpicGames.Core.IMemoryReader)">
            <summary>
            Deserialize a <see cref="T:EpicGames.Horde.Storage.HostId"/>
            </summary>
            <param name="reader">Reader to deserialize from</param>
            <returns>The blob id that was read</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.HostIdExtensions.WriteHostId(EpicGames.Core.IMemoryWriter,EpicGames.Horde.Storage.HostId)">
            <summary>
            Serialize a <see cref="T:EpicGames.Horde.Storage.HostId"/>
            </summary>
            <param name="writer">Writer to serialize to</param>
            <param name="value">Value to serialize</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.StorageException">
            <summary>
            Base exception for the storage service
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.StorageException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.StorageException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.RefNameNotFoundException">
            <summary>
            Exception for a ref not existing
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.RefNameNotFoundException.Name">
            <summary>
            Name of the missing ref
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefNameNotFoundException.#ctor(EpicGames.Horde.Storage.RefName)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:EpicGames.Horde.Storage.RefOptions">
            <summary>
            Options for a new ref
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.RefOptions.Lifetime">
            <summary>
            Time until a ref is expired
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.RefOptions.Extend">
            <summary>
            Whether to extend the remaining lifetime of a ref whenever it is fetched. Defaults to true.
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.IStorageClient">
            <summary>
            Base interface for a low-level storage backend. Blobs added to this store are not content addressed, but referenced by <see cref="T:EpicGames.Horde.Storage.BlobLocator"/>.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageClient.ReadBlobAsync(EpicGames.Horde.Storage.BlobLocator,System.Threading.CancellationToken)">
            <summary>
            Reads raw data for a blob from the store
            </summary>
            <param name="locator">The blob locator</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Stream containing the data</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageClient.ReadBlobRangeAsync(EpicGames.Horde.Storage.BlobLocator,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads a ranged chunk from a blob
            </summary>
            <param name="locator">Locator for the blob</param>
            <param name="offset">Starting offset for the data to read</param>
            <param name="length">Length of the data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageClient.WriteBlobAsync(System.IO.Stream,EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <summary>
            Writes a new blob to the store
            </summary>
            <param name="stream">Blob data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <param name="prefix">Prefix for blob names. While the returned BlobId is guaranteed to be unique, this name can be used as a prefix to aid debugging.</param>
            <returns>Unique identifier for the blob</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageClient.CreateWriter(EpicGames.Horde.Storage.RefName)">
            <summary>
            Creates a new writer for storage nodes
            </summary>
            <param name="refName">Name of the ref being written.</param>
            <returns>New writer instance. Must be disposed after use.</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageClient.AddAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <summary>
            Adds an alias to a given node
            </summary>
            <param name="name">Alias for the node</param>
            <param name="handle">Locator for the node</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageClient.RemoveAliasAsync(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <summary>
            Removes an alias from a node
            </summary>
            <param name="name">Name of the alias</param>
            <param name="handle">Locator for the node</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageClient.FindNodesAsync(EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <summary>
            Finds nodes with the given alias. Unlike refs, aliases do not serve as GC roots.
            </summary>
            <param name="name">Alias for the node</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Nodes matching the given handle</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageClient.TryReadRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefCacheTime,System.Threading.CancellationToken)">
            <summary>
            Reads data for a ref from the store
            </summary>
            <param name="name">The ref name</param>
            <param name="cacheTime">Minimum coherency for any cached value to be returned</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Node pointed to by the ref</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageClient.WriteRefTargetAsync(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.BlobHandle,EpicGames.Horde.Storage.RefOptions,System.Threading.CancellationToken)">
            <summary>
            Writes a new ref to the store
            </summary>
            <param name="name">Ref to write</param>
            <param name="handle">Handle to the target node</param>
            <param name="options">Options for the new ref</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Unique identifier for the blob</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageClient.DeleteRefAsync(EpicGames.Horde.Storage.RefName,System.Threading.CancellationToken)">
            <summary>
            Reads data for a ref from the store
            </summary>
            <param name="name">The ref identifier</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.IStorageWriter">
            <summary>
            Interface for writing new nodes to the store
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageWriter.Fork">
            <summary>
            Create another writer instance, allowing multiple threads to write in parallel.
            </summary>
            <returns>New writer instance</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flush any pending nodes to storage
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageWriter.GetOutputBuffer(System.Int32,System.Int32)">
            <summary>
            Gets an output buffer for writing.
            </summary>
            <param name="usedSize">Current size in the existing buffer that has been written to</param>
            <param name="desiredSize">Desired size of the returned buffer</param>
            <returns>Buffer to be written into.</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageWriter.WriteNodeAsync(System.Int32,System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.BlobHandle},EpicGames.Horde.Storage.BlobType,System.Threading.CancellationToken)">
            <summary>
            Finish writing a node.
            </summary>
            <param name="size">Used size of the buffer</param>
            <param name="references">References to other nodes</param>
            <param name="type">Type of the node that was written</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Handle to the written node</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageWriter.WriteRefAsync(EpicGames.Horde.Storage.BlobHandle,EpicGames.Horde.Storage.RefOptions,System.Threading.CancellationToken)">
            <summary>
            Writes the reference using the given target node
            </summary>
            <param name="target">The target node</param>
            <param name="options">Options for the new ref</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.IStorageClientFactory">
            <summary>
            Allows creating storage clients for different namespaces
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.IStorageClientFactory.GetClientAsync(EpicGames.Horde.Storage.NamespaceId,System.Threading.CancellationToken)">
            <summary>
            Creates a storage client for the given namespace
            </summary>
            <param name="namespaceId">Namespace to manipulate</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Storage client instance</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.RefCacheTime">
            <summary>
            Indicates the maximum age of a entry returned from a cache in the hierarchy
            </summary>
            <param name="Utc">Oldest allowed timestamp for a returned result</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefCacheTime.#ctor(System.DateTime)">
            <summary>
            Indicates the maximum age of a entry returned from a cache in the hierarchy
            </summary>
            <param name="Utc">Oldest allowed timestamp for a returned result</param>
        </member>
        <member name="P:EpicGames.Horde.Storage.RefCacheTime.Utc">
            <summary>Oldest allowed timestamp for a returned result</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.RefCacheTime.MaxAge">
            <summary>
            Maximum age for a cached value to be returned
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefCacheTime.#ctor(System.TimeSpan)">
            <summary>
            Sets the earliest time at which the entry must have been valid
            </summary>
            <param name="age">Maximum age of any returned cache value. Taken from the moment that this object was created.</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefCacheTime.IsSet">
            <summary>
            Tests whether this value is set
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefCacheTime.IsStaleCacheEntry(System.DateTime,EpicGames.Horde.Storage.RefCacheTime)">
            <summary>
            Determines if this cache time deems a particular cache entry stale
            </summary>
            <param name="entryTime">Time at which the cache entry was valid</param>
            <param name="cacheTime">Maximum cache time to test against</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefCacheTime.op_Implicit(System.DateTime)~EpicGames.Horde.Storage.RefCacheTime">
            <summary>
            Implicit conversion operator from datetime values.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefCacheTime.op_Implicit(System.TimeSpan)~EpicGames.Horde.Storage.RefCacheTime">
            <summary>
            Implicit conversion operator from timespan values.
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.StorageClientExtensions">
            <summary>
            Extension methods for <see cref="T:EpicGames.Horde.Storage.IStorageClient"/>
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.StorageClientExtensions.ReadBlobRangeAsync(EpicGames.Horde.Storage.IStorageClient,EpicGames.Horde.Storage.BlobLocator,System.Int32,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Utility method to read a blob into a buffer
            </summary>
            <param name="store">Store to read from</param>
            <param name="locator">Blob location</param>
            <param name="offset">Offset within the blob</param>
            <param name="memory">Buffer to read into</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>The data that was read</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.StorageClientExtensions.HasRefAsync(EpicGames.Horde.Storage.IStorageClient,EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefCacheTime,System.Threading.CancellationToken)">
            <summary>
            Checks if the given ref exists
            </summary>
            <param name="store">The store instance to read from</param>
            <param name="name">Name of the reference to look for</param>
            <param name="cacheTime">Minimum coherency for any cached value to be returned</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>True if the ref exists, false if it did not exist</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.StorageClientExtensions.ReadRefTargetAsync(EpicGames.Horde.Storage.IStorageClient,EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefCacheTime,System.Threading.CancellationToken)">
            <summary>
            Reads a ref from the store, throwing an exception if it does not exist
            </summary>
            <param name="store">The store instance to read from</param>
            <param name="name">Id for the ref</param>
            <param name="cacheTime">Minimum coherency of any cached result</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>The ref target</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.NamespaceId">
            <summary>
            Identifier for a storage namespace
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NamespaceId.Text">
            <summary>
            The text representing this id
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NamespaceId.#ctor(EpicGames.Core.Utf8String)">
            <summary>
            Constructor
            </summary>
            <param name="text">Unique id for the namespace</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NamespaceId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NamespaceId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NamespaceId.Equals(EpicGames.Horde.Storage.NamespaceId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NamespaceId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NamespaceId.op_Equality(EpicGames.Horde.Storage.NamespaceId,EpicGames.Horde.Storage.NamespaceId)">
            <inheritdoc cref="M:EpicGames.Horde.StringId.op_Equality(EpicGames.Horde.StringId,EpicGames.Horde.StringId)"/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NamespaceId.op_Inequality(EpicGames.Horde.Storage.NamespaceId,EpicGames.Horde.Storage.NamespaceId)">
            <inheritdoc cref="M:EpicGames.Horde.StringId.op_Inequality(EpicGames.Horde.StringId,EpicGames.Horde.StringId)"/>
        </member>
        <member name="T:EpicGames.Horde.Storage.NamespaceIdJsonConverter">
            <summary>
            Type converter for NamespaceId to and from JSON
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NamespaceIdJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NamespaceIdJsonConverter.Write(System.Text.Json.Utf8JsonWriter,EpicGames.Horde.Storage.NamespaceId,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.NamespaceIdTypeConverter">
            <summary>
            Type converter from strings to NamespaceId objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NamespaceIdTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NamespaceIdTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeTypeAttribute">
            <summary>
            Attribute used to define a factory for a particular node type
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeTypeAttribute.Guid">
            <summary>
            Name of the type to store in the bundle header
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeTypeAttribute.Version">
            <summary>
            Version number of the serializer
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeTypeAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.Node">
            <summary>
            Base class for user-defined types that are stored in a tree
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Node.Revision">
            <summary>
            Revision number of the node. Incremented whenever the node is modified, and used to track whether nodes are modified between 
            writes starting and completing.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Node.Hash">
            <summary>
            Hash when deserialized
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Node.NodeType">
            <summary>
            Accessor for the bundle type definition associated with this node
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Serialization constructor. Leaves the revision number zeroed by default.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.MarkAsDirty">
            <summary>
            Mark this node as dirty
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <summary>
            Serialize the contents of this node
            </summary>
            <returns>Data for the node</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.TryGetConcreteType(System.Guid,System.Type@)">
            <summary>
            Attempts to get the concrete type with the given node. The type must have been registered via a previous call to <see cref="M:EpicGames.Horde.Storage.Node.RegisterType(System.Type)"/>.
            </summary>
            <param name="guid">Guid specified in the <see cref="T:EpicGames.Horde.Storage.NodeTypeAttribute"/></param>
            <param name="type">On success, receives the C# type associated with this GUID</param>
            <returns>True if the type was found</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.GetNodeType(System.Type)">
            <summary>
            Gets the node type corresponding to the given C# type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.GetNodeType``1">
            <summary>
            Gets the type descriptor for the given type
            </summary>
            <typeparam name="T">Type to get a <see cref="P:EpicGames.Horde.Storage.Node.NodeType"/> for</typeparam>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.Deserialize(EpicGames.Horde.Storage.BlobData)">
            <summary>
            Deserialize a node from the given reader
            </summary>
            <param name="nodeData">Data to deserialize from</param>
            <returns>New node instance</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.Deserialize``1(EpicGames.Horde.Storage.BlobData)">
            <summary>
            Deserialize a node from the given reader
            </summary>
            <param name="nodeData">Data to deserialize from</param>
            <returns>New node instance</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.#cctor">
            <summary>
            Static constructor. Registers all the types in the current assembly.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.RegisterType(System.Type)">
            <summary>
            Registers a single deserializer
            </summary>
            <param name="type"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.RegisterType``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EpicGames.Horde.Storage.Node.RegisterTypesFromAssembly(System.Reflection.Assembly)">
            <summary>
            Register all node types with the <see cref="T:EpicGames.Horde.Storage.NodeTypeAttribute"/> from the given assembly
            </summary>
            <param name="assembly">Assembly to register types from</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeReader">
            <summary>
            Reader for tree nodes
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeReader.Type">
            <summary>
            Type to deserialize
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeReader.Version">
            <summary>
            Version of the current node, as specified via <see cref="T:EpicGames.Horde.Storage.NodeTypeAttribute"/>
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeReader.Length">
            <summary>
            Total length of the data in this node
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeReader.Hash">
            <summary>
            Hash of the node being deserialized
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeReader.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeReader.References">
            <summary>
            Locations of all referenced nodes.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeReader.#ctor(EpicGames.Horde.Storage.BlobData)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeReader.ReadNodeHandle">
            <summary>
            Reads the next reference to another node
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeReader.GetNodeHandle(System.Int32,EpicGames.Core.IoHash)">
            <summary>
            Gets a node handle with the given index and hash
            </summary>
            <param name="index"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeWriter">
            <summary>
            Writer for node objects, which tracks references to other nodes
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeWriter.References">
            <summary>
            List of serialized references
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeWriter.Length">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeWriter.#ctor(EpicGames.Horde.Storage.IStorageWriter)">
            <summary>
            Constructor
            </summary>
            <param name="treeWriter"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeWriter.WriteNodeHandle(EpicGames.Horde.Storage.BlobHandle)">
            <summary>
            Writes a handle to another node
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeWriter.GetSpan(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeWriter.GetMemory(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeWriter.Advance(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeExtensions">
            <summary>
            Extension methods for serializing <see cref="T:EpicGames.Horde.Storage.Node"/> objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeExtensions.ReadNodeAsync``1(EpicGames.Horde.Storage.BlobHandle,System.Threading.CancellationToken)">
            <summary>
            Reads and deserializes a node from storage
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="handle"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeExtensions.WriteNodeAsync(EpicGames.Horde.Storage.IStorageClient,EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.Node,EpicGames.Horde.Storage.RefOptions,System.Threading.CancellationToken)">
            <summary>
            Writes a node to storage
            </summary>
            <param name="store">Store instance to write to</param>
            <param name="name">Name of the ref containing this node</param>
            <param name="node">Node to be written</param>
            <param name="refOptions">Options for the ref</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Location of node targetted by the ref</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeExtensions.TryReadNodeAsync``1(EpicGames.Horde.Storage.IStorageClient,EpicGames.Horde.Storage.RefName,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Reads data for a ref from the store, along with the node's contents.
            </summary>
            <param name="store">Store instance to write to</param>
            <param name="name">The ref name</param>
            <param name="cacheTime">Minimum coherency for any cached value to be returned</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Node for the given ref, or null if it does not exist</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeExtensions.ReadNodeAsync``1(EpicGames.Horde.Storage.IStorageClient,EpicGames.Horde.Storage.RefName,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Reads a ref from the store, throwing an exception if it does not exist
            </summary>
            <param name="store">Store instance to write to</param>
            <param name="name">Id for the ref</param>
            <param name="cacheTime">Minimum coherency of any cached result</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>The blob instance</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeLocator">
            <summary>
            Locates a node in storage
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeLocator.Hash">
            <summary>
            Hash of the referenced node
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeLocator.Blob">
            <summary>
            Location of the blob containing this node
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeLocator.ExportIdx">
            <summary>
            Index of the export within the blob
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocator.#ctor(EpicGames.Core.IoHash,EpicGames.Horde.Storage.BlobLocator,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocator.IsValid">
            <summary>
            Determines if this locator points to a valid entry
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocator.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parse a string as a node locator
            </summary>
            <param name="text">Text to parse</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocator.Equals(EpicGames.Horde.Storage.NodeLocator)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocator.ToString">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocator.op_Equality(EpicGames.Horde.Storage.NodeLocator,EpicGames.Horde.Storage.NodeLocator)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocator.op_Inequality(EpicGames.Horde.Storage.NodeLocator,EpicGames.Horde.Storage.NodeLocator)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeLocatorJsonConverter">
            <summary>
            Type converter for <see cref="T:EpicGames.Horde.Storage.NodeLocator"/> to and from JSON
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocatorJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocatorJsonConverter.Write(System.Text.Json.Utf8JsonWriter,EpicGames.Horde.Storage.NodeLocator,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeLocatorTypeConverter">
            <summary>
            Type converter from strings to <see cref="T:EpicGames.Horde.Storage.NodeLocator"/> objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocatorTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocatorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeLocatorCbConverter">
            <summary>
            Type converter to compact binary
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocatorCbConverter.Read(EpicGames.Serialization.CbField)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocatorCbConverter.Write(EpicGames.Serialization.CbWriter,EpicGames.Horde.Storage.NodeLocator)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocatorCbConverter.WriteNamed(EpicGames.Serialization.CbWriter,EpicGames.Core.Utf8String,EpicGames.Horde.Storage.NodeLocator)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeLocatorExtensions">
            <summary>
            Extension methods for node locators
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocatorExtensions.ReadNodeLocator(EpicGames.Core.IMemoryReader)">
            <summary>
            Deserialize a node locator
            </summary>
            <param name="reader">Reader to deserialize from</param>
            <returns>The node id that was read</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeLocatorExtensions.WriteNodeLocator(EpicGames.Core.IMemoryWriter,EpicGames.Horde.Storage.NodeLocator)">
            <summary>
            Serialize a node locator
            </summary>
            <param name="writer">Writer to serialize to</param>
            <param name="value">Value to serialize</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeRef">
            <summary>
            Stores a reference to a <see cref="T:EpicGames.Horde.Storage.Node"/> object in the storage system.
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.NodeRef.Handle">
            <summary>
            Handle to the node if in storage (or pending write to storage)
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRef.#ctor(EpicGames.Horde.Storage.BlobHandle)">
            <summary>
            Creates a reference to a node in storage.
            </summary>
            <param name="handle">Handle to the referenced node</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRef.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRef.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <summary>
            Serialize the node to the given writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRef.ExpandAsync(System.Threading.CancellationToken)">
            <summary>
            Resolve this reference to a concrete node
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeRef`1">
            <summary>
            Strongly typed reference to a <see cref="T:EpicGames.Horde.Storage.Node"/>
            </summary>
            <typeparam name="T">Type of the node</typeparam>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRef`1.#ctor(EpicGames.Horde.Storage.BlobHandle)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRef`1.#ctor(EpicGames.Horde.Storage.NodeRef{`0})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRef`1.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRef`1.ExpandAsync(System.Threading.CancellationToken)">
            <summary>
            Resolve this reference to a concrete node
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.NodeRefExtensions">
            <summary>
            Extension methods for writing node
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRefExtensions.ReadNodeRef(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Read an untyped ref from the reader
            </summary>
            <param name="reader">Reader to deserialize from</param>
            <returns>New untyped ref</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRefExtensions.ReadNodeRef``1(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Read a strongly typed ref from the reader
            </summary>
            <typeparam name="T">Type of the referenced node</typeparam>
            <param name="reader">Reader to deserialize from</param>
            <returns>New strongly typed ref</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRefExtensions.ReadOptionalNodeRef(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Read an optional untyped ref from the reader
            </summary>
            <param name="reader">Reader to deserialize from</param>
            <returns>New untyped ref</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRefExtensions.ReadOptionalNodeRef``1(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Read an optional strongly typed ref from the reader
            </summary>
            <param name="reader">Reader to deserialize from</param>
            <returns>New strongly typed ref</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRefExtensions.WriteNodeRef(EpicGames.Horde.Storage.NodeWriter,EpicGames.Horde.Storage.NodeRef)">
            <summary>
            Writes a ref to storage
            </summary>
            <param name="writer">Writer to serialize to</param>
            <param name="nodeRef">Value to write</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRefExtensions.WriteOptionalNodeRef(EpicGames.Horde.Storage.NodeWriter,EpicGames.Horde.Storage.NodeRef)">
            <summary>
            Writes an optional ref value to storage
            </summary>
            <param name="writer">Writer to serialize to</param>
            <param name="value">Value to write</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRefExtensions.WriteNodeAsync``1(EpicGames.Horde.Storage.IStorageWriter,``0,System.Threading.CancellationToken)">
            <summary>
            Writes an individual node to storage
            </summary>
            <param name="writer">Writer to serialize nodes to</param>
            <param name="node">Node to write</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>A flag indicating whether the node is dirty, and if it is, an optional bundle that contains it</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRefExtensions.TryReadRefTargetAsync``1(EpicGames.Horde.Storage.IStorageClient,EpicGames.Horde.Storage.RefName,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Reads and deserializes a node for the given ref
            </summary>
            <param name="storageClient"></param>
            <param name="refName">Name of the ref to write</param>
            <param name="cacheTime"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRefExtensions.WriteRefTargetAsync``1(EpicGames.Horde.Storage.IStorageClient,EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.NodeRef{``0},EpicGames.Horde.Storage.RefOptions,System.Threading.CancellationToken)">
            <summary>
            Writes a node to the given ref
            </summary>
            <param name="storageClient"></param>
            <param name="refName">Name of the ref to write</param>
            <param name="node"></param>
            <param name="refOptions"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.NodeRefExtensions.FlushAsync(EpicGames.Horde.Storage.IStorageWriter,EpicGames.Horde.Storage.Node,System.Threading.CancellationToken)">
            <summary>
            Flushes all the current nodes to storage
            </summary>
            <param name="writer"></param>
            <param name="root">Root for the tree</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns></returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.CbNode">
            <summary>
            A node containing arbitrary compact binary data
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CbNode.Object">
            <summary>
            The compact binary object
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CbNode.References">
            <summary>
            Imported nodes
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.CbNode.#ctor(EpicGames.Serialization.CbObject,System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.NodeRef})">
            <summary>
            Constructor
            </summary>
            <param name="obj">The compact binary object</param>
            <param name="references">List of references to attachments</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.CbNode.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">Reader to deserialize from</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.CbNode.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.ChunkedDataNode">
            <summary>
            Representation of a data stream, split into chunks along content-aware boundaries using a rolling hash (<see cref="T:EpicGames.Core.BuzHash"/>).
            Chunks are pushed into a tree hierarchy as data is appended to the root, with nodes of the tree also split along content-aware boundaries with <see cref="F:EpicGames.Core.IoHash.NumBytes"/> granularity.
            Once a chunk has been written to storage, it is treated as immutable.
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataNode.CopyToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copies the contents of this node and its children to the given output stream
            </summary>
            <param name="outputStream">The output stream to receive the data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataNode.CopyToStreamAsync(EpicGames.Horde.Storage.BlobHandle,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copy the contents of the node to the output stream without creating the intermediate FileNodes
            </summary>
            <param name="handle">Handle to the data to read</param>
            <param name="outputStream">The output stream to receive the data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataNode.CopyToFileAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Extracts the contents of this node to a file
            </summary>
            <param name="file">File to write with the contents of this node</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataNode.ToByteArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Serialize this node and its children into a byte array
            </summary>
            <param name="cancellationToken"></param>
            <returns>Array of data stored by the tree</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNode">
            <summary>
            File node that contains a chunk of data
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNode.Data">
            <summary>
            Data for this node
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNode.#ctor">
            <summary>
            Create an empty leaf node
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNode.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Create a leaf node from the given serialized data
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNode.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNode.CopyToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNode.CopyToStreamAsync(EpicGames.Horde.Storage.BlobData,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copy the contents of the node to the output stream without creating the intermediate FileNodes
            </summary>
            <param name="nodeData">The raw node data</param>
            <param name="outputStream">The output stream to receive the data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNode.CreateFromFileAsync(EpicGames.Horde.Storage.IStorageWriter,EpicGames.Core.FileReference,EpicGames.Horde.Storage.Nodes.LeafChunkedDataNodeOptions,System.Threading.CancellationToken)">
            <summary>
            Creates nodes from the given file
            </summary>
            <param name="writer"></param>
            <param name="file"></param>
            <param name="options"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNode.CreateFromFileAsync(EpicGames.Horde.Storage.IStorageWriter,System.IO.FileInfo,EpicGames.Horde.Storage.Nodes.LeafChunkedDataNodeOptions,System.Threading.CancellationToken)">
            <summary>
            Creates nodes from the given file
            </summary>
            <param name="writer"></param>
            <param name="file"></param>
            <param name="options"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNode.CreateFromStreamAsync(EpicGames.Horde.Storage.IStorageWriter,System.IO.Stream,EpicGames.Horde.Storage.Nodes.LeafChunkedDataNodeOptions,System.Threading.CancellationToken)">
            <summary>
            Creates nodes from the given file
            </summary>
            <param name="writer"></param>
            <param name="stream"></param>
            <param name="options"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNode.GetChunkLength(System.ReadOnlySpan{System.Byte},EpicGames.Horde.Storage.Nodes.LeafChunkedDataNodeOptions)">
            <summary>
            Determines how much data to append to an existing leaf node
            </summary>
            <param name="inputData">Data to be appended</param>
            <param name="options">Options for chunking the data</param>
            <returns>The number of bytes to append</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNodeOptions">
            <summary>
            Options for creating interior nodes
            </summary>
            <param name="MinChildCount">Minimum number of children in each node</param>
            <param name="TargetChildCount">Target number of children in each node</param>
            <param name="MaxChildCount">Maximum number of children in each node</param>
            <param name="SliceThreshold">Threshold hash value for splitting interior nodes</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNodeOptions.#ctor(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Options for creating interior nodes
            </summary>
            <param name="MinChildCount">Minimum number of children in each node</param>
            <param name="TargetChildCount">Target number of children in each node</param>
            <param name="MaxChildCount">Maximum number of children in each node</param>
            <param name="SliceThreshold">Threshold hash value for splitting interior nodes</param>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNodeOptions.MinChildCount">
            <summary>Minimum number of children in each node</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNodeOptions.TargetChildCount">
            <summary>Target number of children in each node</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNodeOptions.MaxChildCount">
            <summary>Maximum number of children in each node</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNodeOptions.SliceThreshold">
            <summary>Threshold hash value for splitting interior nodes</summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNodeOptions.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNode">
            <summary>
            An interior file node
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNode.Children">
            <summary>
            Child nodes
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNode.#ctor(System.Collections.Generic.IReadOnlyList{EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Storage.Nodes.ChunkedDataNode}})">
            <summary>
            Constructor
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNode.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNode.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNode.CreateTreeAsync(System.Collections.Generic.List{EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Storage.Nodes.ChunkedDataNode}},EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNodeOptions,EpicGames.Horde.Storage.IStorageWriter,System.Threading.CancellationToken)">
            <summary>
            Create a tree of nodes from the given list of handles, splitting nodes in each layer based on the hash of the last node.
            </summary>
            <param name="handles">List of leaf handles</param>
            <param name="options">Options for splitting the tree</param>
            <param name="writer">Output writer for new interior nodes</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Handle to the root node of the tree</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNode.CreateTreeLayer(System.Collections.Generic.List{EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Storage.Nodes.ChunkedDataNode}},EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNodeOptions,System.Collections.Generic.List{EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNode})">
            <summary>
            Split a list of handles into a layer of interior nodes
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNode.CopyToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.InteriorChunkedDataNode.CopyToStreamAsync(EpicGames.Horde.Storage.BlobData,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copy the contents of the node to the output stream without creating the intermediate FileNodes
            </summary>
            <param name="nodeData">Source data</param>
            <param name="outputStream">The output stream to receive the data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.ChunkingOptions">
            <summary>
            Options for creating file nodes
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.ChunkingOptions.LeafOptions">
            <summary>
            Options for creating leaf nodes
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.ChunkingOptions.InteriorOptions">
            <summary>
            Options for creating interior nodes
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkingOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNodeOptions">
            <summary>
            Options for creating a specific type of file nodes
            </summary>
            <param name="MinSize">Minimum chunk size</param>
            <param name="MaxSize">Maximum chunk size. Chunks will be split on this boundary if another match is not found.</param>
            <param name="TargetSize">Target chunk size for content-slicing</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNodeOptions.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Options for creating a specific type of file nodes
            </summary>
            <param name="MinSize">Minimum chunk size</param>
            <param name="MaxSize">Maximum chunk size. Chunks will be split on this boundary if another match is not found.</param>
            <param name="TargetSize">Target chunk size for content-slicing</param>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNodeOptions.MinSize">
            <summary>Minimum chunk size</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNodeOptions.MaxSize">
            <summary>Maximum chunk size. Chunks will be split on this boundary if another match is not found.</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNodeOptions.TargetSize">
            <summary>Target chunk size for content-slicing</summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.LeafChunkedDataNodeOptions.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">Fixed size chunks to use</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter">
            <summary>
            Utility class for generating FileNode data directly into <see cref="T:EpicGames.Horde.Storage.BundleWriter"/> instances, without constructing node representations first.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.DefaultBufferLength">
            <summary>
            Default buffer length when calling CreateAsync/AppendAsync
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.Length">
            <summary>
            Length of the file so far
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.#ctor(EpicGames.Horde.Storage.IStorageWriter,EpicGames.Horde.Storage.Nodes.ChunkingOptions)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Writer for new nodes</param>
            <param name="options">Chunking options</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.Reset">
            <summary>
            Reset the current state
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.ResetLeafState">
            <summary>
            Resets the state of the current leaf node
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.CreateAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Creates data for the given file
            </summary>
            <param name="fileInfo">File to append</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.CreateAsync(System.IO.FileInfo,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates data for the given file
            </summary>
            <param name="fileInfo">File to append</param>
            <param name="bufferLength">Size of the read buffer</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.CreateAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Creates data from the given stream
            </summary>
            <param name="stream">Stream to append</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.CreateAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates data from the given stream
            </summary>
            <param name="stream">Stream to append</param>
            <param name="bufferLength">Size of the read buffer</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.CreateAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Creates data from the given data
            </summary>
            <param name="data">Stream to append</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.AppendAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Appends data to the current file
            </summary>
            <param name="stream">Stream containing data to append</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.AppendAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Appends data to the current file
            </summary>
            <param name="stream">Stream containing data to append</param>
            <param name="bufferLength">Size of the read buffer</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.AppendAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Appends data to the current file
            </summary>
            <param name="data">Data to append</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.AppendToLeafNode(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.UInt32@,EpicGames.Horde.Storage.Nodes.LeafChunkedDataNodeOptions)">
            <summary>
            Determines how much data to append to an existing leaf node
            </summary>
            <param name="currentData">Current data in the leaf node</param>
            <param name="appendData">Data to be appended</param>
            <param name="rollingHash">Current BuzHash of the data</param>
            <param name="options">Options for chunking the data</param>
            <returns>The number of bytes to append</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.CompleteAsync(System.Threading.CancellationToken)">
            <summary>
            Complete the current file, and write all open nodes to the underlying writer
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Handle to the root node</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flush the state of the writer
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Handle to the root FileNode</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.ChunkedDataWriter.FlushLeafNodeAsync(System.Threading.CancellationToken)">
            <summary>
            Writes the contents of the current leaf node to storage
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Handle to the written leaf node</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.CommitNode">
            <summary>
            A node representing commit metadata
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CommitNode.Number">
            <summary>
            The commit number
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CommitNode.Parent">
            <summary>
            Reference to the parent commit
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CommitNode.Author">
            <summary>
            Human readable name of the author of this change
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CommitNode.AuthorId">
            <summary>
            Optional unique identifier for the author. May be an email address, user id, etc...
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CommitNode.Committer">
            <summary>
            Human readable name of the committer of this change
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CommitNode.CommitterId">
            <summary>
            Optional unique identifier for the committer. May be an email address, user id, etc...
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CommitNode.Message">
            <summary>
            Message for this commit
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CommitNode.Time">
            <summary>
            Time that this commit was created
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CommitNode.Contents">
            <summary>
            Contents of the tree at this commit
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.CommitNode.Metadata">
            <summary>
            Metadata for this commit, keyed by arbitrary GUID
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.CommitNode.#ctor(System.Int32,EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Storage.Nodes.CommitNode},System.String,System.String,System.DateTime,EpicGames.Horde.Storage.Nodes.DirectoryNodeRef)">
            <summary>
            Constructor
            </summary>
            <param name="number">Commit number</param>
            <param name="parent">The parent commit</param>
            <param name="author">Author of this commit</param>
            <param name="message">Message for the commit</param>
            <param name="time">The commit time</param>
            <param name="contents">Contents of the tree at this commit</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.CommitNode.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Deserializing constructor
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.CommitNode.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.DirectoryEntry">
            <summary>
            Entry for a directory within a directory node
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryEntry.Name">
            <summary>
            Name of this directory
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryEntry.#ctor(EpicGames.Core.Utf8String,System.Int64,EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Storage.Nodes.DirectoryNode})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryEntry.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Deserializing constructor
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryEntry.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <summary>
            Serialize this directory entry to disk
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryEntry.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.ICopyStats">
            <summary>
            Stats reported for copy operations
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.ICopyStats.CopiedCount">
            <summary>
            Number of files that have been copied
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.ICopyStats.CopiedSize">
            <summary>
            Total size of data to be copied
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.ICopyStats.TotalCount">
            <summary>
            Total number of files to copy
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.ICopyStats.TotalSize">
            <summary>
            Total size of data to copy
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.CopyStatsLogger">
            <summary>
            Progress logger for writing copy stats
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.CopyStatsLogger.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.CopyStatsLogger.Report(EpicGames.Horde.Storage.Nodes.ICopyStats)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.DirectoryFlags">
            <summary>
            Flags for a directory node
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Nodes.DirectoryFlags.None">
            <summary>
            No flags specified
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.DirectoryNode">
            <summary>
            A directory node
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNode.Length">
            <summary>
            Total size of this directory
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNode.Flags">
            <summary>
            Flags for this directory 
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNode.Files">
            <summary>
            All the files within this directory
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNode.NameToFile">
            <summary>
            Map of name to file entry
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNode.Directories">
            <summary>
            All the subdirectories within this directory
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNode.NameToDirectory">
            <summary>
            Map of name to file entry
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.#ctor(EpicGames.Horde.Storage.Nodes.DirectoryFlags)">
            <summary>
            Constructor
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">Reader to deserialize from</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.Clear">
            <summary>
            Clear the contents of this directory
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.Contains(EpicGames.Core.Utf8String)">
            <summary>
            Check whether an entry with the given name exists in this directory
            </summary>
            <param name="name">Name of the entry to search for</param>
            <returns>True if the entry exists</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.AddFile(EpicGames.Horde.Storage.Nodes.FileEntry)">
            <summary>
            Adds a new file entry to this directory
            </summary>
            <param name="entry">The entry to add</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.AddFile(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.Nodes.FileEntryFlags,System.Int64,EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Storage.Nodes.ChunkedDataNode})">
            <summary>
            Adds a new directory with the given name
            </summary>
            <param name="name">Name of the new directory</param>
            <param name="flags">Flags for the new file</param>
            <param name="length">Length of the file</param>
            <param name="dataRef">Handle to the file data</param>
            <returns>The new directory object</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.GetFileEntry(EpicGames.Core.Utf8String)">
            <summary>
            Attempts to get a file entry with the given name
            </summary>
            <param name="name">Name of the file</param>
            <returns>Entry for the given name</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.TryGetFileEntry(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.Nodes.FileEntry@)">
            <summary>
            Attempts to get a file entry with the given name
            </summary>
            <param name="name">Name of the file</param>
            <param name="entry">Entry for the file</param>
            <returns>True if the file was found</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.DeleteFile(EpicGames.Core.Utf8String)">
            <summary>
            Deletes the file entry with the given name
            </summary>
            <param name="name">Name of the entry to delete</param>
            <returns>True if the entry was found, false otherwise</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.GetFileEntryByPathAsync(EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <summary>
            Attempts to get a file entry from a path
            </summary>
            <param name="path">Path to the directory</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The directory with the given path, or null if it was not found</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.GetDirectoryByPathAsync(EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <summary>
            Attempts to get a directory entry from a path
            </summary>
            <param name="path">Path to the directory</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The directory with the given path, or null if it was not found</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.DeleteFileByPathAsync(EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <summary>
            Deletes a file with the given path
            </summary>
            <param name="path"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.AddDirectory(EpicGames.Horde.Storage.Nodes.DirectoryEntry)">
            <summary>
            Adds a new directory with the given name
            </summary>
            <param name="entry">Name of the new directory</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.GetDirectoryEntry(EpicGames.Core.Utf8String)">
            <summary>
            Get a directory entry with the given name
            </summary>
            <param name="name">Name of the directory</param>
            <returns>The entry with the given name</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.TryGetDirectoryEntry(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.Nodes.DirectoryEntry@)">
            <summary>
            Attempts to get a directory entry with the given name
            </summary>
            <param name="name">Name of the directory</param>
            <param name="entry">Entry for the directory</param>
            <returns>True if the directory was found</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.FindDirectoryAsync(EpicGames.Core.Utf8String,System.Threading.CancellationToken)">
            <summary>
            Tries to get a directory with the given name
            </summary>
            <param name="name">Name of the new directory</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>The new directory object</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.DeleteDirectory(EpicGames.Core.Utf8String)">
            <summary>
            Deletes the file entry with the given name
            </summary>
            <param name="name">Name of the entry to delete</param>
            <returns>True if the entry was found, false otherwise</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.DirectoryNode.CopyStats">
            <summary>
            Reports progress info back to callers
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.CreateAsync(EpicGames.Core.DirectoryReference,System.Collections.Generic.IReadOnlyList{System.IO.FileInfo},EpicGames.Horde.Storage.Nodes.ChunkingOptions,EpicGames.Horde.Storage.IStorageWriter,System.IProgress{EpicGames.Horde.Storage.Nodes.ICopyStats},System.Threading.CancellationToken)">
            <summary>
            Adds files from a flat list of paths
            </summary>
            <param name="baseDir">Base directory to base paths relative to</param>
            <param name="files">Files to add</param>
            <param name="options">Options for chunking file content</param>
            <param name="writer">Writer for new node data</param>
            <param name="progress">Feedback interface for progress updates</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.AddFilesAsync(EpicGames.Core.DirectoryReference,System.Collections.Generic.IEnumerable{EpicGames.Core.FileReference},EpicGames.Horde.Storage.Nodes.ChunkingOptions,EpicGames.Horde.Storage.IStorageWriter,System.IProgress{EpicGames.Horde.Storage.Nodes.ICopyStats},System.Threading.CancellationToken)">
            <inheritdoc cref="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.AddFilesAsync(EpicGames.Core.DirectoryReference,System.Collections.Generic.IReadOnlyList{System.IO.FileInfo},EpicGames.Horde.Storage.Nodes.ChunkingOptions,EpicGames.Horde.Storage.IStorageWriter,System.IProgress{EpicGames.Horde.Storage.Nodes.ICopyStats},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.AddFilesAsync(System.IO.DirectoryInfo,System.Collections.Generic.IEnumerable{System.IO.FileInfo},EpicGames.Horde.Storage.Nodes.ChunkingOptions,EpicGames.Horde.Storage.IStorageWriter,System.IProgress{EpicGames.Horde.Storage.Nodes.ICopyStats},System.Threading.CancellationToken)">
            <inheritdoc cref="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.AddFilesAsync(EpicGames.Core.DirectoryReference,System.Collections.Generic.IReadOnlyList{System.IO.FileInfo},EpicGames.Horde.Storage.Nodes.ChunkingOptions,EpicGames.Horde.Storage.IStorageWriter,System.IProgress{EpicGames.Horde.Storage.Nodes.ICopyStats},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.AddFilesAsync(EpicGames.Core.DirectoryReference,System.Collections.Generic.IReadOnlyList{System.IO.FileInfo},EpicGames.Horde.Storage.Nodes.ChunkingOptions,EpicGames.Horde.Storage.IStorageWriter,System.IProgress{EpicGames.Horde.Storage.Nodes.ICopyStats},System.Threading.CancellationToken)">
            <summary>
            Adds files from a directory to the storage
            </summary>
            <param name="baseDir">Base directory to base paths relative to</param>
            <param name="files">Files to add</param>
            <param name="options">Options for chunking file content</param>
            <param name="writer">Writer for new node data</param>
            <param name="progress">Feedback interface for progress updates</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.UpdateAsync(System.Collections.Generic.IEnumerable{EpicGames.Horde.Storage.Nodes.FileUpdate},EpicGames.Horde.Storage.IStorageWriter,System.Threading.CancellationToken)">
            <summary>
            Updates this tree of directory objects
            </summary>
            <param name="updates">Files to add</param>
            <param name="writer">Writer for new node data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.UpdateAsync(EpicGames.Horde.Storage.Nodes.DirectoryUpdate,EpicGames.Horde.Storage.IStorageWriter,System.Threading.CancellationToken)">
            <summary>
            Updates this tree of directory objects
            </summary>
            <param name="update">Files to add</param>
            <param name="writer">Writer for new node data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.CopyFromZipStreamAsync(System.IO.Stream,EpicGames.Horde.Storage.IStorageWriter,EpicGames.Horde.Storage.Nodes.ChunkingOptions,System.Threading.CancellationToken)">
            <summary>
            Copies entries from a zip file
            </summary>
            <param name="stream">Input stream</param>
            <param name="writer">Writer for new nodes</param>
            <param name="options"></param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.CopyFromDirectoryAsync(System.IO.DirectoryInfo,EpicGames.Horde.Storage.Nodes.ChunkingOptions,EpicGames.Horde.Storage.IStorageWriter,System.IProgress{EpicGames.Horde.Storage.Nodes.ICopyStats},System.Threading.CancellationToken)">
            <summary>
            Adds files from a directory on disk
            </summary>
            <param name="directoryInfo"></param>
            <param name="options">Options for chunking file content</param>
            <param name="writer">Writer for new node data</param>
            <param name="progress">Feedback interface for progress updates</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.CopyToDirectoryAsync(System.IO.DirectoryInfo,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <summary>
            Utility function to allow extracting a packed directory to disk
            </summary>
            <param name="directoryInfo"></param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNode.AsZipStream(EpicGames.Core.FileFilter)">
            <summary>
            Returns a stream containing the zipped contents of this directory
            </summary>
            <param name="filter">Filter for files to include in the zip</param>
            <returns>Stream containing zipped archive data</returns>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.FileUpdate">
            <summary>
            Describes an update to a file in a directory tree
            </summary>
            <param name="Path">Path to the file</param>
            <param name="Length">Length of the file data</param>
            <param name="Flags">Flags for the new file entry</param>
            <param name="DataRef">Reference to the root data node</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileUpdate.#ctor(System.String,EpicGames.Horde.Storage.Nodes.FileEntryFlags,System.Int64,EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Storage.Nodes.ChunkedDataNode})">
            <summary>
            Describes an update to a file in a directory tree
            </summary>
            <param name="Path">Path to the file</param>
            <param name="Length">Length of the file data</param>
            <param name="Flags">Flags for the new file entry</param>
            <param name="DataRef">Reference to the root data node</param>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileUpdate.Path">
            <summary>Path to the file</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileUpdate.Flags">
            <summary>Flags for the new file entry</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileUpdate.Length">
            <summary>Length of the file data</summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileUpdate.DataRef">
            <summary>Reference to the root data node</summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.DirectoryUpdate">
            <summary>
            Describes an update to a directory node
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryUpdate.Directories">
            <summary>
            Directories to be updated
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryUpdate.Files">
            <summary>
            Files to be updated
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryUpdate.Clear">
            <summary>
            Reset this instance
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryUpdate.AddFile(System.String,EpicGames.Horde.Storage.Nodes.FileEntry)">
            <summary>
            Adds a file by path to this object
            </summary>
            <param name="path">Path to add to</param>
            <param name="fileEntry">Content for the file</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryUpdate.AddFile(System.String,EpicGames.Horde.Storage.Nodes.FileEntryFlags,System.Int64,EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Storage.Nodes.ChunkedDataNode})">
            <summary>
            Adds a file to the tree
            </summary>
            <param name="path">Path to the file</param>
            <param name="flags">Flags for the new file entry</param>
            <param name="length">Length of the file</param>
            <param name="dataRef">Reference to the file data</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryUpdate.AddFiles(System.Collections.Generic.IEnumerable{EpicGames.Horde.Storage.Nodes.FileUpdate})">
            <summary>
            Adds a filtered list of files from disk
            </summary>
            <param name="files">Files to add</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream">
            <summary>
            Stream which zips a directory node tree dynamically
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.#ctor(EpicGames.Horde.Storage.Nodes.DirectoryNode,EpicGames.Core.FileFilter)">
            <summary>
            Constructor
            </summary>
            <param name="node">Root node to copy from</param>
            <param name="filter">Filter for files to include in the zip</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNodeZipStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.DirectoryNodeRef">
            <summary>
            Reference to a directory node, including the target hash and length
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.DirectoryNodeRef.Length">
            <summary>
            Length of this directory tree
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNodeRef.#ctor(System.Int64,EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Storage.Nodes.DirectoryNode})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNodeRef.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.DirectoryNodeRef.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <summary>
            Serialize this directory entry to disk
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.FileEntryFlags">
            <summary>
            Flags for a file entry
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Nodes.FileEntryFlags.None">
            <summary>
            No other flags set
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Nodes.FileEntryFlags.Executable">
            <summary>
            Indicates that the referenced file is executable
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Nodes.FileEntryFlags.ReadOnly">
            <summary>
            File should be stored as read-only
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Nodes.FileEntryFlags.Text">
            <summary>
            File contents are utf-8 encoded text. Client may want to replace line-endings with OS-specific format.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Nodes.FileEntryFlags.HasCustomData">
            <summary>
            Used to indicate that custom data is included in the output. Used internally for serialization; not exposed to users.
            </summary>
        </member>
        <member name="F:EpicGames.Horde.Storage.Nodes.FileEntryFlags.Utf16">
            <summary>
            File should be materialized as UTF-16 (but is stored as a UTF-8 source)
            </summary>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.FileEntry">
            <summary>
            Entry for a file within a directory node
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileEntry.Name">
            <summary>
            Name of this file
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileEntry.Flags">
            <summary>
            Flags for this file
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileEntry.Length">
            <summary>
            Length of this entry
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileEntry.Hash">
            <summary>
            Hash of the target node
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileEntry.CustomData">
            <summary>
            Custom user data for this file entry
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntry.#ctor(EpicGames.Core.Utf8String,EpicGames.Horde.Storage.Nodes.FileEntryFlags,System.Int64,EpicGames.Horde.Storage.NodeRef{EpicGames.Horde.Storage.Nodes.ChunkedDataNode})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntry.#ctor(EpicGames.Horde.Storage.NodeReader)">
            <summary>
            Deserialize from a buffer
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntry.Serialize(EpicGames.Horde.Storage.NodeWriter)">
            <summary>
            Serialize this entry
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntry.AsStream">
            <summary>
            Creates a stream that returns the contents of this file
            </summary>
            <returns>The content stream</returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntry.CopyToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copies the contents of this node and its children to the given output stream
            </summary>
            <param name="outputStream">The output stream to receive the data</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntry.CopyToFileAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Extracts the contents of this node to a file
            </summary>
            <param name="file">File to write with the contents of this node</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntry.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.Nodes.FileEntryContentStream">
            <summary>
            Stream which returns the content of a file
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.#ctor(EpicGames.Horde.Storage.Nodes.FileEntry)">
            <summary>
            Constructor
            </summary>
            <param name="entry">The file entry to copy from</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.Nodes.FileEntryContentStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.RefName">
            <summary>
            Identifier for a storage namespace
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.RefName.Empty">
            <summary>
            Empty ref name
            </summary>
        </member>
        <member name="P:EpicGames.Horde.Storage.RefName.Text">
            <summary>
            String for the ref name
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.#ctor(EpicGames.Core.Utf8String)">
            <summary>
            Constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.Sanitize(EpicGames.Core.Utf8String)">
            <summary>
            Sanitize the given name
            </summary>
            <param name="name">Name to sanitize</param>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.Equals(EpicGames.Horde.Storage.RefName)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.CompareTo(EpicGames.Horde.Storage.RefName)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.ToString">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.op_Equality(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefName)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.op_Inequality(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefName)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.op_LessThan(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefName)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.op_LessThanOrEqual(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefName)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.op_GreaterThan(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefName)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.op_GreaterThanOrEqual(EpicGames.Horde.Storage.RefName,EpicGames.Horde.Storage.RefName)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefName.op_Implicit(System.String)~EpicGames.Horde.Storage.RefName">
            <summary>
            Construct a ref from a string
            </summary>
            <param name="name">Name of the ref</param>
        </member>
        <member name="T:EpicGames.Horde.Storage.RefNameJsonConverter">
            <summary>
            Type converter for IoHash to and from JSON
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefNameJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefNameJsonConverter.Write(System.Text.Json.Utf8JsonWriter,EpicGames.Horde.Storage.RefName,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.RefNameTypeConverter">
            <summary>
            Type converter from strings to IoHash objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefNameTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefNameTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.Storage.RefNameCbConverter">
            <summary>
            Type converter to compact binary
            </summary>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefNameCbConverter.Read(EpicGames.Serialization.CbField)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefNameCbConverter.Write(EpicGames.Serialization.CbWriter,EpicGames.Horde.Storage.RefName)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.Storage.RefNameCbConverter.WriteNamed(EpicGames.Serialization.CbWriter,EpicGames.Core.Utf8String,EpicGames.Horde.Storage.RefName)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.StringId">
            <summary>
            Normalized string identifier for a resource
            </summary>
        </member>
        <member name="T:EpicGames.Horde.StringId.Validate">
            <summary>
            Enum used to disable validation on string arguments
            </summary>
        </member>
        <member name="F:EpicGames.Horde.StringId.Validate.None">
            <summary>
            No validation required
            </summary>
        </member>
        <member name="P:EpicGames.Horde.StringId.Text">
            <summary>
            The text representing this id
            </summary>
        </member>
        <member name="P:EpicGames.Horde.StringId.Span">
            <summary>
            Accessor for the string bytes
            </summary>
        </member>
        <member name="P:EpicGames.Horde.StringId.Memory">
            <summary>
            Accessor for the string bytes
            </summary>
        </member>
        <member name="M:EpicGames.Horde.StringId.#ctor(EpicGames.Core.Utf8String)">
            <summary>
            Constructor
            </summary>
            <param name="text">Unique id for the string</param>
        </member>
        <member name="M:EpicGames.Horde.StringId.#ctor(EpicGames.Core.Utf8String,EpicGames.Horde.StringId.Validate)">
            <summary>
            Constructor
            </summary>
            <param name="text">Unique id for the string</param>
            <param name="validate">Argument used for overload resolution for pre-validated strings</param>
        </member>
        <member name="P:EpicGames.Horde.StringId.IsEmpty">
            <summary>
            Checks whether this StringId is set
            </summary>
        </member>
        <member name="M:EpicGames.Horde.StringId.Sanitize(System.String)">
            <summary>
            Generates a new string id from the given text
            </summary>
            <param name="text">Text to generate from</param>
            <returns>New string id</returns>
        </member>
        <member name="M:EpicGames.Horde.StringId.ValidateArgument(EpicGames.Core.Utf8String,System.String)">
            <summary>
            Validates the given string as a StringId, normalizing it if necessary.
            </summary>
            <param name="text">Text to validate as a StringId</param>
            <param name="paramName">Name of the parameter to show if invalid characters are returned.</param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.StringId.ToLower(EpicGames.Core.Utf8String)">
            <summary>
            Converts a utf8 string to lowercase
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:EpicGames.Horde.StringId.IsValidCharacter(System.Char)">
            <summary>
            Checks whether the given character is valid within a string id
            </summary>
            <param name="character">The character to check</param>
            <returns>True if the character is valid</returns>
        </member>
        <member name="M:EpicGames.Horde.StringId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringId.Equals(EpicGames.Horde.StringId)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringId.Equals(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringId.Equals(System.ReadOnlyMemory{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringId.op_Equality(EpicGames.Horde.StringId,EpicGames.Horde.StringId)">
            <summary>
            Compares two string ids for equality
            </summary>
            <param name="left">The first string id</param>
            <param name="right">Second string id</param>
            <returns>True if the two string ids are equal</returns>
        </member>
        <member name="M:EpicGames.Horde.StringId.op_Inequality(EpicGames.Horde.StringId,EpicGames.Horde.StringId)">
            <summary>
            Compares two string ids for inequality
            </summary>
            <param name="left">The first string id</param>
            <param name="right">Second string id</param>
            <returns>True if the two string ids are not equal</returns>
        </member>
        <member name="T:EpicGames.Horde.StringIdJsonConverter">
            <summary>
            Class which serializes <see cref="T:EpicGames.Horde.StringId"/> types
            </summary>
        </member>
        <member name="M:EpicGames.Horde.StringIdJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringIdJsonConverter.Write(System.Text.Json.Utf8JsonWriter,EpicGames.Horde.StringId,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.StringIdTypeConverter">
            <summary>
            Class which serializes <see cref="T:EpicGames.Horde.StringId"/> types
            </summary>
        </member>
        <member name="M:EpicGames.Horde.StringIdTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringIdTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringIdTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringIdTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.StringIdConverter`1">
            <summary>
            Base class for converting to and from types containing a <see cref="T:EpicGames.Horde.StringId"/>. Useful pattern for reducing boilerplate with strongly typed records.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EpicGames.Horde.StringIdConverter`1.ToStringId(`0)">
            <summary>
            Converts a type to a <see cref="T:EpicGames.Horde.StringId"/>
            </summary>
        </member>
        <member name="M:EpicGames.Horde.StringIdConverter`1.FromStringId(EpicGames.Horde.StringId)">
            <summary>
            Constructs a type from a <see cref="T:EpicGames.Horde.StringId"/>
            </summary>
        </member>
        <member name="T:EpicGames.Horde.StringIdConverterAttribute">
            <summary>
            Attribute declaring a <see cref="T:EpicGames.Horde.StringIdConverter`1"/> for a particular type
            </summary>
        </member>
        <member name="P:EpicGames.Horde.StringIdConverterAttribute.ConverterType">
            <summary>
            The converter type
            </summary>
        </member>
        <member name="M:EpicGames.Horde.StringIdConverterAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EpicGames.Horde.StringIdCbConverter`2">
            <summary>
            Converter to compact binary objects
            </summary>
        </member>
        <member name="M:EpicGames.Horde.StringIdCbConverter`2.Read(EpicGames.Serialization.CbField)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringIdCbConverter`2.Write(EpicGames.Serialization.CbWriter,`0)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringIdCbConverter`2.WriteNamed(EpicGames.Serialization.CbWriter,EpicGames.Core.Utf8String,`0)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.StringIdTypeConverter`2">
            <summary>
            Class which serializes types with a <see cref="T:EpicGames.Horde.StringIdConverter`1"/> to Json
            </summary>
        </member>
        <member name="M:EpicGames.Horde.StringIdTypeConverter`2.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringIdTypeConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringIdTypeConverter`2.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringIdTypeConverter`2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.StringIdJsonConverter`2">
            <summary>
            Class which serializes types with a <see cref="T:EpicGames.Horde.StringIdConverter`1"/> to Json
            </summary>
        </member>
        <member name="M:EpicGames.Horde.StringIdJsonConverter`2.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringIdJsonConverter`2.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:EpicGames.Horde.StringIdJsonConverterFactory">
            <summary>
            Creates constructors for types with a <see cref="T:EpicGames.Horde.StringIdConverter`1"/> to Json
            </summary>
        </member>
        <member name="M:EpicGames.Horde.StringIdJsonConverterFactory.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:EpicGames.Horde.StringIdJsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
    </members>
</doc>
