[1;33mFilters: ~[!nonportable]~[!benchmark]~[approvals] *
[0mRandomness seeded to: 1
Before Global - Default Group
Before Global - Apples
Before Global - Oranges
Before All - Default Group

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0;37mSelfTest.exe is a Catch2 v<version> host application.
Run with -? for options

[0m-------------------------------------------------------------------------------
[0m# A test name that starts with a #
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  yay

-------------------------------------------------------------------------------
[0m#1027: Bitfields can be captured
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( y.v == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 0 == y.v )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0m#1147
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( t1 == t2 )
[0mwith expansion:
[1;33m  {?} == {?}
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( t1 != t2 )
[0mwith expansion:
[1;33m  {?} != {?}
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( t1 < t2 )
[0mwith expansion:
[1;33m  {?} < {?}
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( t1 > t2 )
[0mwith expansion:
[1;33m  {?} > {?}
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( t1 <= t2 )
[0mwith expansion:
[1;33m  {?} <= {?}
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( t1 >= t2 )
[0mwith expansion:
[1;33m  {?} >= {?}
[0m
-------------------------------------------------------------------------------
[0m#1175 - Hidden Test
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0m#1238
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::memcmp(uarr, "123", sizeof(uarr)) == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0mwith messages:
  uarr := "123"
  sarr := "456"

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::memcmp(sarr, "456", sizeof(sarr)) == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0mwith messages:
  uarr := "123"
  sarr := "456"

-------------------------------------------------------------------------------
[0m#1245
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0m#1319: Sections can have description (even if it is not saved
[0m[0m  SectionName
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0m#1403
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( h1 == h2 )
[0mwith expansion:
[1;33m  [1403 helper] == [1403 helper]
[0m
-------------------------------------------------------------------------------
[0m#1455 - INFO and WARN can start with a linebreak
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0mwarning:

This info message starts with a linebreak

This warning message starts with a linebreak

[1;31m
No assertions in test case '#1455 - INFO and WARN can start with a linebreak'

[0mThis would not be caught previously
Nor would this
-------------------------------------------------------------------------------
[0m#1514: stderr/stdout is not captured in tests aborted by an exception
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mexplicitly with message:
  1514

-------------------------------------------------------------------------------
[0m#1548
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::is_same<TypeList<int>, TypeList<int>>::value )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0m#1905 -- test spec parser properly clears internal state between compound tests
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.matches(*fakeTestCase("spec . char")) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.matches(*fakeTestCase("spec , char")) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( spec.matches(*fakeTestCase(R"(spec \, char)")) )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0m#1912 -- test spec parser handles escaping
[0m[0m  Various parentheses
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.matches(*fakeTestCase(R"(spec {a} char)")) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.matches(*fakeTestCase(R"(spec [a] char)")) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( spec.matches(*fakeTestCase("differs but has similar tag", "[a]")) )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0m#1912 -- test spec parser handles escaping
[0m[0m  backslash in test name
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.matches(*fakeTestCase(R"(spec \ char)")) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0m#1913 - GENERATE inside a for loop should not keep recreating the generator
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( counter < 7 )
[0mwith expansion:
[1;33m  3 < 7
[0m
-------------------------------------------------------------------------------
[0m#1913 - GENERATE inside a for loop should not keep recreating the generator
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( counter < 7 )
[0mwith expansion:
[1;33m  6 < 7
[0m
-------------------------------------------------------------------------------
[0m#1913 - GENERATEs can share a line
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i != j )
[0mwith expansion:
[1;33m  1 != 3
[0m
-------------------------------------------------------------------------------
[0m#1913 - GENERATEs can share a line
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i != j )
[0mwith expansion:
[1;33m  1 != 4
[0m
-------------------------------------------------------------------------------
[0m#1913 - GENERATEs can share a line
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i != j )
[0mwith expansion:
[1;33m  2 != 3
[0m
-------------------------------------------------------------------------------
[0m#1913 - GENERATEs can share a line
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i != j )
[0mwith expansion:
[1;33m  2 != 4
[0m
-------------------------------------------------------------------------------
[0m#1938 - GENERATE after a section
[0m[0m  A
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  A

-------------------------------------------------------------------------------
[0m#1938 - GENERATE after a section
[0m[0m  B
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  1
[0m
-------------------------------------------------------------------------------
[0m#1938 - GENERATE after a section
[0m[0m  B
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  2
[0m
-------------------------------------------------------------------------------
[0m#1938 - GENERATE after a section
[0m[0m  B
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  3
[0m
-------------------------------------------------------------------------------
[0m#1938 - Section followed by flat generate
[0m[0m  A
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 1 )
[0m
-------------------------------------------------------------------------------
[0m#1938 - Section followed by flat generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  2
[0m
-------------------------------------------------------------------------------
[0m#1938 - Section followed by flat generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  3
[0m
-------------------------------------------------------------------------------
[0m#1938 - flat generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  1
[0m
-------------------------------------------------------------------------------
[0m#1938 - flat generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  2
[0m
-------------------------------------------------------------------------------
[0m#1938 - flat generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  3
[0m
-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m[0m  A
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  A

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith messages:
  i := 1
  j := 3
  k := 5

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m[0m  B
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  B

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith messages:
  i := 1
  j := 3
  k := 6

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m[0m  B
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  B

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith messages:
  i := 1
  j := 4
  k := 5

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith messages:
  i := 1
  j := 4
  k := 6

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m[0m  A
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  A

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith messages:
  i := 2
  j := 3
  k := 5

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m[0m  B
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  B

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith messages:
  i := 2
  j := 3
  k := 6

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m[0m  B
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  B

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith messages:
  i := 2
  j := 4
  k := 5

-------------------------------------------------------------------------------
[0m#1938 - mixed sections and generates
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith messages:
  i := 2
  j := 4
  k := 6

-------------------------------------------------------------------------------
[0m#1938 - nested generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  1
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( n )
[0mwith expansion:
[1;33m  1
[0m
-------------------------------------------------------------------------------
[0m#1938 - nested generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  1
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( n )
[0mwith expansion:
[1;33m  2
[0m
-------------------------------------------------------------------------------
[0m#1938 - nested generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  1
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( n )
[0mwith expansion:
[1;33m  3
[0m
-------------------------------------------------------------------------------
[0m#1938 - nested generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  2
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( n )
[0mwith expansion:
[1;33m  1
[0m
-------------------------------------------------------------------------------
[0m#1938 - nested generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  2
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( n )
[0mwith expansion:
[1;33m  2
[0m
-------------------------------------------------------------------------------
[0m#1938 - nested generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  2
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( n )
[0mwith expansion:
[1;33m  3
[0m
-------------------------------------------------------------------------------
[0m#1938 - nested generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  3
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( n )
[0mwith expansion:
[1;33m  1
[0m
-------------------------------------------------------------------------------
[0m#1938 - nested generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  3
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( n )
[0mwith expansion:
[1;33m  2
[0m
-------------------------------------------------------------------------------
[0m#1938 - nested generate
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m )
[0mwith expansion:
[1;33m  3
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( n )
[0mwith expansion:
[1;33m  3
[0m
-------------------------------------------------------------------------------
[0m#1954 - 7 arg template test case sig compiles - 1, 1, 1, 1, 1, 0, 0
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0m#1954 - 7 arg template test case sig compiles - 5, 1, 1, 1, 1, 0, 0
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0m#1954 - 7 arg template test case sig compiles - 5, 3, 1, 1, 1, 0, 0
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0m#2152 - ULP checks between differently signed values were wrong - double
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( smallest_non_zero, WithinULP( -smallest_non_zero, 2 ) )
[0mwith expansion:
[1;33m  0.0 is within 2 ULPs of -4.9406564584124654e-324 ([-1.4821969375237396e-323,
  4.9406564584124654e-324])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( smallest_non_zero, !WithinULP( -smallest_non_zero, 1 ) )
[0mwith expansion:
[1;33m  0.0 not is within 1 ULPs of -4.9406564584124654e-324 ([-9.8813129168249309e-
  324, -0.0000000000000000e+00])
[0m
-------------------------------------------------------------------------------
[0m#2152 - ULP checks between differently signed values were wrong - float
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( smallest_non_zero, WithinULP( -smallest_non_zero, 2 ) )
[0mwith expansion:
[1;33m  0.0f is within 2 ULPs of -1.40129846e-45f ([-4.20389539e-45, 1.40129846e-45])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( smallest_non_zero, !WithinULP( -smallest_non_zero, 1 ) )
[0mwith expansion:
[1;33m  0.0f not is within 1 ULPs of -1.40129846e-45f ([-2.80259693e-45, -0.
  00000000e+00])
[0m
-------------------------------------------------------------------------------
[0m#748 - captures with unexpected exceptions
[0m[0m  outside assertions
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mdue to unexpected exception with messages:
  answer := 42
  expected exception

-------------------------------------------------------------------------------
[0m#748 - captures with unexpected exceptions
[0m[0m  inside REQUIRE_NOTHROW
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE_NOTHROW( thisThrows() )
[0mdue to unexpected exception with messages:
  answer := 42
  expected exception

-------------------------------------------------------------------------------
[0m#748 - captures with unexpected exceptions
[0m[0m  inside REQUIRE_THROWS
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS( thisThrows() )
[0mwith message:
  answer := 42

-------------------------------------------------------------------------------
[0m#809
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 42 == f )
[0mwith expansion:
[1;33m  42 == {?}
[0m
-------------------------------------------------------------------------------
[0m#833
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( a == t )
[0mwith expansion:
[1;33m  3 == 3
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( a == t )
[0mwith expansion:
[1;33m  3 == 3
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS( throws_int(true) )
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THROWS_AS( throws_int(true), int )
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( throws_int(false) )
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( "aaa", Catch::Matchers::EndsWith("aaa") )
[0mwith expansion:
[1;33m  "aaa" ends with: "aaa"
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( templated_tests<int>(3) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0m#835 -- errno should not be touched by Catch2
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( f() == 0 )
[0mwith expansion:
[1;33m  1 == 0
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( errno_after == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0m#872
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x == 4 )
[0mwith expansion:
[1;33m  {?} == 4
[0mwith message:
  dummy := 0

-------------------------------------------------------------------------------
[0m#961 -- Dynamically created sections should all be reported
[0m[0m  Looped section 0
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  Everything is OK

-------------------------------------------------------------------------------
[0m#961 -- Dynamically created sections should all be reported
[0m[0m  Looped section 1
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  Everything is OK

-------------------------------------------------------------------------------
[0m#961 -- Dynamically created sections should all be reported
[0m[0m  Looped section 2
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  Everything is OK

-------------------------------------------------------------------------------
[0m#961 -- Dynamically created sections should all be reported
[0m[0m  Looped section 3
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  Everything is OK

-------------------------------------------------------------------------------
[0m#961 -- Dynamically created sections should all be reported
[0m[0m  Looped section 4
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  Everything is OK

-------------------------------------------------------------------------------
[0m'Not' checks that should fail
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( false != false )
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( true != true )
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( !true )
[0mwith expansion:
[1;33m  false
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_FALSE( true )
[0mwith expansion:
[1;33m  !true
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( !trueValue )
[0mwith expansion:
[1;33m  false
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_FALSE( trueValue )
[0mwith expansion:
[1;33m  !true
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( !(1 == 1) )
[0mwith expansion:
[1;33m  false
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_FALSE( 1 == 1 )
[0m
-------------------------------------------------------------------------------
[0m'Not' checks that should succeed
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( false == false )
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true == true )
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( !false )
[0mwith expansion:
[1;33m  true
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( false )
[0mwith expansion:
[1;33m  !false
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( !falseValue )
[0mwith expansion:
[1;33m  true
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( falseValue )
[0mwith expansion:
[1;33m  !false
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( !(1 == 2) )
[0mwith expansion:
[1;33m  true
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( 1 == 2 )
[0m
-------------------------------------------------------------------------------
[0m(unimplemented) static bools can be evaluated
[0m[0m  compare to true
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( is_true<true>::value == true )
[0mwith expansion:
[1;33m  true == true
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true == is_true<true>::value )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0m(unimplemented) static bools can be evaluated
[0m[0m  compare to false
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( is_true<false>::value == false )
[0mwith expansion:
[1;33m  false == false
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( false == is_true<false>::value )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0m(unimplemented) static bools can be evaluated
[0m[0m  negation
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( !is_true<false>::value )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0m(unimplemented) static bools can be evaluated
[0m[0m  double negation
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( !!is_true<true>::value )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0m(unimplemented) static bools can be evaluated
[0m[0m  direct
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( is_true<true>::value )
[0mwith expansion:
[1;33m  true
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( is_true<false>::value )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  1 < 4
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  4 < 7
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  1 < 7
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  1 < 4
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  4 < 8
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  1 < 8
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  1 < 4
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  4 < 9
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  1 < 9
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  1 < 5
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  5 < 7
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  1 < 7
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  1 < 5
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  5 < 8
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  1 < 8
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  1 < 5
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  5 < 9
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  1 < 9
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  1 < 6
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  6 < 7
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  1 < 7
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  1 < 6
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  6 < 8
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  1 < 8
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  1 < 6
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  6 < 9
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  1 < 9
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  2 < 4
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  4 < 7
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  2 < 7
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  2 < 4
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  4 < 8
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  2 < 8
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  2 < 4
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  4 < 9
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  2 < 9
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  2 < 5
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  5 < 7
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  2 < 7
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  2 < 5
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  5 < 8
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  2 < 8
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  2 < 5
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  5 < 9
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  2 < 9
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  2 < 6
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  6 < 7
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  2 < 7
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  2 < 6
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  6 < 8
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  2 < 8
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  2 < 6
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  6 < 9
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  2 < 9
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  3 < 4
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  4 < 7
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  3 < 7
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  3 < 4
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  4 < 8
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  3 < 8
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  3 < 4
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  4 < 9
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  3 < 9
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  3 < 5
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  5 < 7
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  3 < 7
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  3 < 5
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  5 < 8
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  3 < 8
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  3 < 5
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  5 < 9
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  3 < 9
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  3 < 6
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  6 < 7
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  3 < 7
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  3 < 6
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  6 < 8
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  3 < 8
[0m
-------------------------------------------------------------------------------
[0m3x3x3 ints
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x < y )
[0mwith expansion:
[1;33m  3 < 6
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( y < z )
[0mwith expansion:
[1;33m  6 < 9
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x < z )
[0mwith expansion:
[1;33m  3 < 9
[0m
-------------------------------------------------------------------------------
[0mA METHOD_AS_TEST_CASE based test run that fails
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( s == "world" )
[0mwith expansion:
[1;33m  "hello" == "world"
[0m
-------------------------------------------------------------------------------
[0mA METHOD_AS_TEST_CASE based test run that succeeds
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s == "hello" )
[0mwith expansion:
[1;33m  "hello" == "hello"
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo
<float>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>::m_a.size() == 1 )
[0mwith expansion:
[1;33m  0 == 1
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo
<int>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>::m_a.size() == 1 )
[0mwith expansion:
[1;33m  0 == 1
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector
<float>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>::m_a.size() == 1 )
[0mwith expansion:
[1;33m  0 == 1
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector
<int>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>::m_a.size() == 1 )
[0mwith expansion:
[1;33m  0 == 1
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo
<float>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>::m_a.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo
<int>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>::m_a.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector
<float>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>::m_a.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector
<int>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>::m_a.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails -
Template_Foo_2<float, 6>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>{}.m_a.size() < 2 )
[0mwith expansion:
[1;33m  6 < 2
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails -
Template_Foo_2<int, 2>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>{}.m_a.size() < 2 )
[0mwith expansion:
[1;33m  2 < 2
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array
<float, 6>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>{}.m_a.size() < 2 )
[0mwith expansion:
[1;33m  6 < 2
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array
<int, 2>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>{}.m_a.size() < 2 )
[0mwith expansion:
[1;33m  2 < 2
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds -
Template_Foo_2<float,6>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>{}.m_a.size() >= 2 )
[0mwith expansion:
[1;33m  6 >= 2
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds -
Template_Foo_2<int,2>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>{}.m_a.size() >= 2 )
[0mwith expansion:
[1;33m  2 >= 2
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::
array<float,6>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>{}.m_a.size() >= 2 )
[0mwith expansion:
[1;33m  6 >= 2
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::
array<int,2>
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture_2<TestType>{}.m_a.size() >= 2 )
[0mwith expansion:
[1;33m  2 >= 2
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD based test run that fails - double
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Template_Fixture<TestType>::m_a == 2 )
[0mwith expansion:
[1;33m  1.0 == 2
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD based test run that fails - float
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Template_Fixture<TestType>::m_a == 2 )
[0mwith expansion:
[1;33m  1.0f == 2
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD based test run that fails - int
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Template_Fixture<TestType>::m_a == 2 )
[0mwith expansion:
[1;33m  1 == 2
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD based test run that succeeds - double
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture<TestType>::m_a == 1 )
[0mwith expansion:
[1;33m  1.0 == 1
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD based test run that succeeds - float
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture<TestType>::m_a == 1 )
[0mwith expansion:
[1;33m  1.0f == 1
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD based test run that succeeds - int
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture<TestType>::m_a == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 1
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Nttp_Fixture<V>::value == 0 )
[0mwith expansion:
[1;33m  1 == 0
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 3
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Nttp_Fixture<V>::value == 0 )
[0mwith expansion:
[1;33m  3 == 0
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 6
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( Nttp_Fixture<V>::value == 0 )
[0mwith expansion:
[1;33m  6 == 0
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 1
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Nttp_Fixture<V>::value > 0 )
[0mwith expansion:
[1;33m  1 > 0
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 3
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Nttp_Fixture<V>::value > 0 )
[0mwith expansion:
[1;33m  3 > 0
[0m
-------------------------------------------------------------------------------
[0mA TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 6
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Nttp_Fixture<V>::value > 0 )
[0mwith expansion:
[1;33m  6 > 0
[0m
-------------------------------------------------------------------------------
[0mA TEST_CASE_METHOD based test run that fails
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( m_a == 2 )
[0mwith expansion:
[1;33m  1 == 2
[0m
-------------------------------------------------------------------------------
[0mA TEST_CASE_METHOD based test run that succeeds
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m_a == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mA Template product test case - Foo<float>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mA Template product test case - Foo<int>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mA Template product test case - std::vector<float>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mA Template product test case - std::vector<int>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mA Template product test case with array signature - Bar<float, 42>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x.size() > 0 )
[0mwith expansion:
[1;33m  42 > 0
[0m
-------------------------------------------------------------------------------
[0mA Template product test case with array signature - Bar<int, 9>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x.size() > 0 )
[0mwith expansion:
[1;33m  9 > 0
[0m
-------------------------------------------------------------------------------
[0mA Template product test case with array signature - std::array<float, 42>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x.size() > 0 )
[0mwith expansion:
[1;33m  42 > 0
[0m
-------------------------------------------------------------------------------
[0mA Template product test case with array signature - std::array<int, 9>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x.size() > 0 )
[0mwith expansion:
[1;33m  9 > 0
[0m
-------------------------------------------------------------------------------
[0mA comparison that uses literals instead of the normal constructor
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d == 1.23_a )
[0mwith expansion:
[1;33m  1.23 == Approx( 1.23 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d != 1.22_a )
[0mwith expansion:
[1;33m  1.23 != Approx( 1.22 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( -d == -1.23_a )
[0mwith expansion:
[1;33m  -1.23 == Approx( -1.23 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d == 1.2_a .epsilon(.1) )
[0mwith expansion:
[1;33m  1.23 == Approx( 1.2 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d != 1.2_a .epsilon(.001) )
[0mwith expansion:
[1;33m  1.23 != Approx( 1.2 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d == 1_a .epsilon(.3) )
[0mwith expansion:
[1;33m  1.23 == Approx( 1.0 )
[0m
-------------------------------------------------------------------------------
[0mA couple of nested sections followed by a failure
[0m[0m  Outer
  Inner
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  that's not flying - that's failing in style

-------------------------------------------------------------------------------
[0mA couple of nested sections followed by a failure
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mexplicitly with message:
  to infinity and beyond

-------------------------------------------------------------------------------
[0mA failing expression with a non streamable type is still captured
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( &o1 == &o2 )
[0mwith expansion:
[1;33m  0x<hex digits> == 0x<hex digits>
[0m
Tricky.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( o1 == o2 )
[0mwith expansion:
[1;33m  {?} == {?}
[0m
-------------------------------------------------------------------------------
[0mAbsolute margin
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 104.0 != Approx(100.0) )
[0mwith expansion:
[1;33m  104.0 != Approx( 100.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 104.0 == Approx(100.0).margin(5) )
[0mwith expansion:
[1;33m  104.0 == Approx( 100.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 104.0 == Approx(100.0).margin(4) )
[0mwith expansion:
[1;33m  104.0 == Approx( 100.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 104.0 != Approx(100.0).margin(3) )
[0mwith expansion:
[1;33m  104.0 != Approx( 100.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 100.3 != Approx(100.0) )
[0mwith expansion:
[1;33m  100.3 != Approx( 100.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 100.3 == Approx(100.0).margin(0.5) )
[0mwith expansion:
[1;33m  100.3 == Approx( 100.0 )
[0m
-------------------------------------------------------------------------------
[0mAn empty test with no assertions
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

[0m[1;31m
No assertions in test case 'An empty test with no assertions'

[0m-------------------------------------------------------------------------------
[0mAn expression with side-effects should only be evaluated once
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i++ == 7 )
[0mwith expansion:
[1;33m  7 == 7
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i++ == 8 )
[0mwith expansion:
[1;33m  8 == 8
[0m
-------------------------------------------------------------------------------
[0mAn unchecked exception reports the line of the last assertion
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( 1 == 1 )
[0m
Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  {Unknown expression after the reported line}
[0mdue to unexpected exception with message:
  unexpected exception

-------------------------------------------------------------------------------
[0mAnonymous test case 3
[0m-------------------------------------------------------------------------------
VariadicMacros.tests.cpp:<line number>
...............................................................................

VariadicMacros.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  anonymous test case

-------------------------------------------------------------------------------
[0mApprox setters validate their arguments
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( Approx(0).margin(0) )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( Approx(0).margin(1234656) )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( Approx(0).margin(-2), std::domain_error )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( Approx(0).epsilon(0) )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( Approx(0).epsilon(1) )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( Approx(0).epsilon(-0.001), std::domain_error )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( Approx(0).epsilon(1.0001), std::domain_error )
[0m
-------------------------------------------------------------------------------
[0mApprox with exactly-representable margin
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( 0.25f == Approx(0.0f).margin(0.25f) )
[0mwith expansion:
[1;33m  0.25f == Approx( 0.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( 0.0f == Approx(0.25f).margin(0.25f) )
[0mwith expansion:
[1;33m  0.0f == Approx( 0.25 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( 0.5f == Approx(0.25f).margin(0.25f) )
[0mwith expansion:
[1;33m  0.5f == Approx( 0.25 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( 245.0f == Approx(245.25f).margin(0.25f) )
[0mwith expansion:
[1;33m  245.0f == Approx( 245.25 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( 245.5f == Approx(245.25f).margin(0.25f) )
[0mwith expansion:
[1;33m  245.5f == Approx( 245.25 )
[0m
-------------------------------------------------------------------------------
[0mApproximate PI
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( divide( 22, 7 ) == Approx( 3.141 ).epsilon( 0.001 ) )
[0mwith expansion:
[1;33m  3.1428571429 == Approx( 3.141 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( divide( 22, 7 ) != Approx( 3.141 ).epsilon( 0.0001 ) )
[0mwith expansion:
[1;33m  3.1428571429 != Approx( 3.141 )
[0m
-------------------------------------------------------------------------------
[0mApproximate comparisons with different epsilons
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d != Approx( 1.231 ) )
[0mwith expansion:
[1;33m  1.23 != Approx( 1.231 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d == Approx( 1.231 ).epsilon( 0.1 ) )
[0mwith expansion:
[1;33m  1.23 == Approx( 1.231 )
[0m
-------------------------------------------------------------------------------
[0mApproximate comparisons with floats
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 1.23f == Approx( 1.23f ) )
[0mwith expansion:
[1;33m  1.23f == Approx( 1.2300000191 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 0.0f == Approx( 0.0f ) )
[0mwith expansion:
[1;33m  0.0f == Approx( 0.0 )
[0m
-------------------------------------------------------------------------------
[0mApproximate comparisons with ints
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 1 == Approx( 1 ) )
[0mwith expansion:
[1;33m  1 == Approx( 1.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 0 == Approx( 0 ) )
[0mwith expansion:
[1;33m  0 == Approx( 0.0 )
[0m
-------------------------------------------------------------------------------
[0mApproximate comparisons with mixed numeric types
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 1.0f == Approx( 1 ) )
[0mwith expansion:
[1;33m  1.0f == Approx( 1.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 0 == Approx( dZero) )
[0mwith expansion:
[1;33m  0 == Approx( 0.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 0 == Approx( dSmall ).margin( 0.001 ) )
[0mwith expansion:
[1;33m  0 == Approx( 0.00001 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 1.234f == Approx( dMedium ) )
[0mwith expansion:
[1;33m  1.234f == Approx( 1.234 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( dMedium == Approx( 1.234f ) )
[0mwith expansion:
[1;33m  1.234 == Approx( 1.2339999676 )
[0m
-------------------------------------------------------------------------------
[0mArbitrary predicate matcher
[0m[0m  Function pointer
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, Predicate<int>( alwaysTrue, "always true" ) )
[0mwith expansion:
[1;33m  1 matches predicate: "always true"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, !Predicate<int>( alwaysFalse, "always false" ) )
[0mwith expansion:
[1;33m  1 not matches predicate: "always false"
[0m
-------------------------------------------------------------------------------
[0mArbitrary predicate matcher
[0m[0m  Lambdas + different type
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( "Hello olleH", Predicate<std::string>( []( std::string const& str ) -> bool { return str.front() == str.back(); }, "First and last character should be equal" ) )
[0mwith expansion:
[1;33m  "Hello olleH" matches predicate: "First and last character should be equal"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( "This wouldn't pass", !Predicate<std::string>( []( std::string const& str ) -> bool { return str.front() == str.back(); } ) )
[0mwith expansion:
[1;33m  "This wouldn't pass" not matches undescribed predicate
[0m
-------------------------------------------------------------------------------
[0mAssertion macros support bit operators and bool conversions
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( lhs | rhs )
[0mwith expansion:
[1;33m  Val: 1 | Val: 2
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( lhs & rhs )
[0mwith expansion:
[1;33m  !(Val: 1 & Val: 2)
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( HasBitOperators{ 1 } & HasBitOperators{ 1 } )
[0mwith expansion:
[1;33m  Val: 1 & Val: 1
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( lhs ^ rhs )
[0mwith expansion:
[1;33m  Val: 1 ^ Val: 2
[0m
Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( lhs ^ lhs )
[0mwith expansion:
[1;33m  !(Val: 1 ^ Val: 1)
[0m
-------------------------------------------------------------------------------
[0mAssertions then sections
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0m
-------------------------------------------------------------------------------
[0mAssertions then sections
[0m[0m  A section
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0m
-------------------------------------------------------------------------------
[0mAssertions then sections
[0m[0m  A section
  Another section
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0m
-------------------------------------------------------------------------------
[0mAssertions then sections
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0m
-------------------------------------------------------------------------------
[0mAssertions then sections
[0m[0m  A section
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0m
-------------------------------------------------------------------------------
[0mAssertions then sections
[0m[0m  A section
  Another other section
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0m
-------------------------------------------------------------------------------
[0mBasic use of the Contains range matcher
[0m[0m  Different argument ranges, same element type, default comparison
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( a, Contains(1) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } contains element 1
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( b, Contains(1) )
[0mwith expansion:
[1;33m  { 0, 1, 2 } contains element 1
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( c, !Contains(1) )
[0mwith expansion:
[1;33m  { 4, 5, 6 } not contains element 1
[0m
-------------------------------------------------------------------------------
[0mBasic use of the Contains range matcher
[0m[0m  Different argument ranges, same element type, custom comparison
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( a, Contains(0, close_enough) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } contains element 0
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( b, Contains(0, close_enough) )
[0mwith expansion:
[1;33m  { 0, 1, 2 } contains element 0
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( c, !Contains(0, close_enough) )
[0mwith expansion:
[1;33m  { 4, 5, 6 } not contains element 0
[0m
-------------------------------------------------------------------------------
[0mBasic use of the Contains range matcher
[0m[0m  Different element type, custom comparisons
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( a, Contains(4, [](auto&& lhs, size_t sz) { return lhs.size() == sz; }) )
[0mwith expansion:
[1;33m  { "abc", "abcd", "abcde" } contains element 4
[0m
-------------------------------------------------------------------------------
[0mBasic use of the Contains range matcher
[0m[0m  Can handle type that requires ADL-found free function begin and end
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( in, Contains(1) )
[0mwith expansion:
[1;33m  { 1, 2, 3, 4, 5 } contains element 1
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( in, !Contains(8) )
[0mwith expansion:
[1;33m  { 1, 2, 3, 4, 5 } not contains element 8
[0m
-------------------------------------------------------------------------------
[0mBasic use of the Contains range matcher
[0m[0m  Initialization with move only types
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( in, Contains(MoveOnlyTestElement{ 2 }) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } contains element 2
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( in, !Contains(MoveOnlyTestElement{ 9 }) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } not contains element 9
[0m
-------------------------------------------------------------------------------
[0mBasic use of the Contains range matcher
[0m[0m  Matching using matcher
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( in, Contains(Catch::Matchers::WithinAbs(0.5, 0.5)) )
[0mwith expansion:
[1;33m  { 1.0, 2.0, 3.0, 0.0 } contains element matching is within 0.5 of 0.5
[0m
-------------------------------------------------------------------------------
[0mBasic use of the Empty range matcher
[0m[0m  Simple, std-provided containers
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( empty_array, IsEmpty() )
[0mwith expansion:
[1;33m  {  } is empty
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( non_empty_array, !IsEmpty() )
[0mwith expansion:
[1;33m  { 0.0 } not is empty
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( empty_vec, IsEmpty() )
[0mwith expansion:
[1;33m  {  } is empty
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( non_empty_vec, !IsEmpty() )
[0mwith expansion:
[1;33m  { 'a', 'b', 'c' } not is empty
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( inner_lists_are_empty, !IsEmpty() )
[0mwith expansion:
[1;33m  { {  } } not is empty
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( inner_lists_are_empty.front(), IsEmpty() )
[0mwith expansion:
[1;33m  {  } is empty
[0m
-------------------------------------------------------------------------------
[0mBasic use of the Empty range matcher
[0m[0m  Type with empty
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( has_empty{}, !IsEmpty() )
[0mwith expansion:
[1;33m  {?} not is empty
[0m
-------------------------------------------------------------------------------
[0mBasic use of the Empty range matcher
[0m[0m  Type requires ADL found empty free function
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( unrelated::ADL_empty{}, IsEmpty() )
[0mwith expansion:
[1;33m  {?} is empty
[0m
-------------------------------------------------------------------------------
[0mCAPTURE can deal with complex expressions
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith messages:
  a := 1
  b := 2
  c := 3
  a + b := 3
  a+b := 3
  c > b := true
  a == 1 := true

-------------------------------------------------------------------------------
[0mCAPTURE can deal with complex expressions involving commas
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith messages:
  std::vector<int>{1, 2, 3}[0, 1, 2] := 3
  std::vector<int>{1, 2, 3}[(0, 1)] := 2
  std::vector<int>{1, 2, 3}[0] := 1
  (helper_1436<int, int>{12, -12}) := { 12, -12 }
  (helper_1436<int, int>(-12, 12)) := { -12, 12 }
  (1, 2) := 2
  (2, 3) := 3

-------------------------------------------------------------------------------
[0mCAPTURE parses string and character constants
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith messages:
  ("comma, in string", "escaped, \", ") := "escaped, ", "
  "single quote in string,'," := "single quote in string,',"
  "some escapes, \\,\\\\" := "some escapes, \,\\"
  "some, ), unmatched, } prenheses {[<" := "some, ), unmatched, } prenheses {[
  <"
  '"' := '"'
  '\'' := '''
  ',' := ','
  '}' := '}'
  ')' := ')'
  '(' := '('
  '{' := '{'

-------------------------------------------------------------------------------
[0mCapture and info messages
[0m[0m  Capture should stringify like assertions
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0mwith message:
  i := 2

-------------------------------------------------------------------------------
[0mCapture and info messages
[0m[0m  Info should NOT stringify the way assertions do
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0mwith message:
  3

-------------------------------------------------------------------------------
[0mCaseInsensitiveEqualsTo is case insensitive
[0m[0m  Degenerate cases
[0m-------------------------------------------------------------------------------
Details.tests.cpp:<line number>
...............................................................................

Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( eq( "", "" ) )
[0mwith expansion:
[1;33m  true
[0m
Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( eq( "", "a" ) )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mCaseInsensitiveEqualsTo is case insensitive
[0m[0m  Plain comparisons
[0m-------------------------------------------------------------------------------
Details.tests.cpp:<line number>
...............................................................................

Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( eq( "a", "a" ) )
[0mwith expansion:
[1;33m  true
[0m
Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( eq( "a", "A" ) )
[0mwith expansion:
[1;33m  true
[0m
Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( eq( "A", "a" ) )
[0mwith expansion:
[1;33m  true
[0m
Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( eq( "A", "A" ) )
[0mwith expansion:
[1;33m  true
[0m
Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( eq( "a", "b" ) )
[0mwith expansion:
[1;33m  !false
[0m
Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( eq( "a", "B" ) )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mCaseInsensitiveLess is case insensitive
[0m[0m  Degenerate cases
[0m-------------------------------------------------------------------------------
Details.tests.cpp:<line number>
...............................................................................

Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( lt( "", "a" ) )
[0mwith expansion:
[1;33m  true
[0m
Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( lt( "a", "a" ) )
[0mwith expansion:
[1;33m  !false
[0m
Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( lt( "", "" ) )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mCaseInsensitiveLess is case insensitive
[0m[0m  Plain comparisons
[0m-------------------------------------------------------------------------------
Details.tests.cpp:<line number>
...............................................................................

Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( lt( "a", "b" ) )
[0mwith expansion:
[1;33m  true
[0m
Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( lt( "a", "B" ) )
[0mwith expansion:
[1;33m  true
[0m
Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( lt( "A", "b" ) )
[0mwith expansion:
[1;33m  true
[0m
Details.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( lt( "A", "B" ) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mCharacter pretty printing
[0m[0m  Specifically escaped
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( tab == '\t' )
[0mwith expansion:
[1;33m  '\t' == '\t'
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( newline == '\n' )
[0mwith expansion:
[1;33m  '\n' == '\n'
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( carr_return == '\r' )
[0mwith expansion:
[1;33m  '\r' == '\r'
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( form_feed == '\f' )
[0mwith expansion:
[1;33m  '\f' == '\f'
[0m
-------------------------------------------------------------------------------
[0mCharacter pretty printing
[0m[0m  General chars
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( space == ' ' )
[0mwith expansion:
[1;33m  ' ' == ' '
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( c == chars[i] )
[0mwith expansion:
[1;33m  'a' == 'a'
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( c == chars[i] )
[0mwith expansion:
[1;33m  'z' == 'z'
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( c == chars[i] )
[0mwith expansion:
[1;33m  'A' == 'A'
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( c == chars[i] )
[0mwith expansion:
[1;33m  'Z' == 'Z'
[0m
-------------------------------------------------------------------------------
[0mCharacter pretty printing
[0m[0m  Low ASCII
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( null_terminator == '\0' )
[0mwith expansion:
[1;33m  0 == 0
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( c == i )
[0mwith expansion:
[1;33m  2 == 2
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( c == i )
[0mwith expansion:
[1;33m  3 == 3
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( c == i )
[0mwith expansion:
[1;33m  4 == 4
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( c == i )
[0mwith expansion:
[1;33m  5 == 5
[0m
-------------------------------------------------------------------------------
[0mClara::Arg supports single-arg parse the way Opt does
[0m-------------------------------------------------------------------------------
Clara.tests.cpp:<line number>
...............................................................................

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( name.empty() )
[0mwith expansion:
[1;33m  true
[0m
Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( name == "foo" )
[0mwith expansion:
[1;33m  "foo" == "foo"
[0m
-------------------------------------------------------------------------------
[0mClara::Opt supports accept-many lambdas
[0m[0m  Parsing fails on multiple options without accept_many
[0m-------------------------------------------------------------------------------
Clara.tests.cpp:<line number>
...............................................................................

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( parse_result )
[0mwith expansion:
[1;33m  !{?}
[0m
-------------------------------------------------------------------------------
[0mClara::Opt supports accept-many lambdas
[0m[0m  Parsing succeeds on multiple options with accept_many
[0m-------------------------------------------------------------------------------
Clara.tests.cpp:<line number>
...............................................................................

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( parse_result )
[0mwith expansion:
[1;33m  {?}
[0m
Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( res == std::vector<std::string>{ "aaa", "bbb" } )
[0mwith expansion:
[1;33m  { "aaa", "bbb" } == { "aaa", "bbb" }
[0m
-------------------------------------------------------------------------------
[0mColourGuard behaviour
[0m[0m  ColourGuard is disengaged by default
[0m-------------------------------------------------------------------------------
ColourImpl.tests.cpp:<line number>
...............................................................................

ColourImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( streamWrapper.str().empty() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mColourGuard behaviour
[0m[0m  ColourGuard is engaged by op<<
[0m-------------------------------------------------------------------------------
ColourImpl.tests.cpp:<line number>
...............................................................................

ColourImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( streamWrapper.str() == "1\nUsing code: 2\n2\nUsing code: 0\n3\n" )
[0mwith expansion:
[1;33m  "1
  Using code: 2
  2
  Using code: 0
  3
  "
  ==
  "1
  Using code: 2
  2
  Using code: 0
  3
  "
[0m
-------------------------------------------------------------------------------
[0mColourGuard behaviour
[0m[0m  ColourGuard can be engaged explicitly
[0m-------------------------------------------------------------------------------
ColourImpl.tests.cpp:<line number>
...............................................................................

ColourImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( streamWrapper.str() == "Using code: 2\nA\nB\nUsing code: 0\nC\n" )
[0mwith expansion:
[1;33m  "Using code: 2
  A
  B
  Using code: 0
  C
  "
  ==
  "Using code: 2
  A
  B
  Using code: 0
  C
  "
[0m
-------------------------------------------------------------------------------
[0mCombining MatchAllOfGeneric does not nest
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same< decltype( ( MatcherA() && MatcherB() ) && MatcherC() ), Catch::
  Matchers::Detail:: MatchAllOfGeneric<MatcherA, MatcherB, MatcherC>>::value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, ( MatcherA() && MatcherB() ) && MatcherC() )
[0mwith expansion:
[1;33m  1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 and equals: (T)
  1 )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same< decltype( MatcherA() && ( MatcherB() && MatcherC() ) ), Catch::
  Matchers::Detail:: MatchAllOfGeneric<MatcherA, MatcherB, MatcherC>>::value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, MatcherA() && ( MatcherB() && MatcherC() ) )
[0mwith expansion:
[1;33m  1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 and equals: (T)
  1 )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same< decltype( ( MatcherA() && MatcherB() ) && ( MatcherC() &&
  MatcherD() ) ), Catch::Matchers::Detail:: MatchAllOfGeneric<MatcherA,
  MatcherB, MatcherC, MatcherD>>:: value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, ( MatcherA() && MatcherB() ) && ( MatcherC() && MatcherD() ) )
[0mwith expansion:
[1;33m  1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 and equals: (T)
  1 and equals: true )
[0m
-------------------------------------------------------------------------------
[0mCombining MatchAnyOfGeneric does not nest
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same< decltype( ( MatcherA() || MatcherB() ) || MatcherC() ), Catch::
  Matchers::Detail:: MatchAnyOfGeneric<MatcherA, MatcherB, MatcherC>>::value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, ( MatcherA() || MatcherB() ) || MatcherC() )
[0mwith expansion:
[1;33m  1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 or equals: (T) 1
  )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same< decltype( MatcherA() || ( MatcherB() || MatcherC() ) ), Catch::
  Matchers::Detail:: MatchAnyOfGeneric<MatcherA, MatcherB, MatcherC>>::value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, MatcherA() || ( MatcherB() || MatcherC() ) )
[0mwith expansion:
[1;33m  1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 or equals: (T) 1
  )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same< decltype( ( MatcherA() || MatcherB() ) || ( MatcherC() ||
  MatcherD() ) ), Catch::Matchers::Detail:: MatchAnyOfGeneric<MatcherA,
  MatcherB, MatcherC, MatcherD>>:: value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, ( MatcherA() || MatcherB() ) || ( MatcherC() || MatcherD() ) )
[0mwith expansion:
[1;33m  1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 or equals: (T) 1
  or equals: true )
[0m
-------------------------------------------------------------------------------
[0mCombining MatchNotOfGeneric does not nest
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same< decltype( !MatcherA() ), Catch::Matchers::Detail::
  MatchNotOfGeneric<MatcherA>>::value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0, !MatcherA() )
[0mwith expansion:
[1;33m  0 not equals: (int) 1 or (string) "1"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same<decltype( !!MatcherA() ), MatcherA const&>::value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, !!MatcherA() )
[0mwith expansion:
[1;33m  1 equals: (int) 1 or (string) "1"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same< decltype( !!!MatcherA() ), Catch::Matchers::Detail::
  MatchNotOfGeneric<MatcherA>>::value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0, !!!MatcherA() )
[0mwith expansion:
[1;33m  0 not equals: (int) 1 or (string) "1"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same<decltype( !!!!MatcherA() ), MatcherA const&>::value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, !!!!MatcherA() )
[0mwith expansion:
[1;33m  1 equals: (int) 1 or (string) "1"
[0m
-------------------------------------------------------------------------------
[0mCombining concrete matchers does not use templated matchers
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same<decltype( StartsWith( "foo" ) || ( StartsWith( "bar" ) &&
  EndsWith( "bar" ) && !EndsWith( "foo" ) ) ), Catch::Matchers::Detail::
  MatchAnyOf<std::string>>::value

-------------------------------------------------------------------------------
[0mCombining only templated matchers
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same<decltype( MatcherA() || MatcherB() ), Catch::Matchers::Detail::
  MatchAnyOfGeneric<MatcherA, MatcherB>>::value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, MatcherA() || MatcherB() )
[0mwith expansion:
[1;33m  1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same<decltype( MatcherA() && MatcherB() ), Catch::Matchers::Detail::
  MatchAllOfGeneric<MatcherA, MatcherB>>::value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, MatcherA() && MatcherB() )
[0mwith expansion:
[1;33m  1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_same< decltype( MatcherA() || !MatcherB() ), Catch::Matchers::Detail:
  :MatchAnyOfGeneric< MatcherA, Catch::Matchers::Detail::MatchNotOfGeneric
  <MatcherB>>>::value

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1, MatcherA() || !MatcherB() )
[0mwith expansion:
[1;33m  1 ( equals: (int) 1 or (string) "1" or not equals: (long long) 1 )
[0m
-------------------------------------------------------------------------------
[0mCombining templated and concrete matchers
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( vec, Predicate<std::vector<int>>( []( auto const& v ) { return std::all_of( v.begin(), v.end(), []( int elem ) { return elem % 2 == 1; } ); }, "All elements are odd" ) && !EqualsRange( a ) )
[0mwith expansion:
[1;33m  { 1, 3, 5 } ( matches predicate: "All elements are odd" and not Equals: { 5,
  3, 1 } )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( str, StartsWith( "foo" ) && EqualsRange( arr ) && EndsWith( "bar" ) )
[0mwith expansion:
[1;33m  "foobar" ( starts with: "foo" and Equals: { 'f', 'o', 'o', 'b', 'a', 'r' }
  and ends with: "bar" )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( str, StartsWith( "foo" ) && !EqualsRange( bad_arr ) && EndsWith( "bar" ) )
[0mwith expansion:
[1;33m  "foobar" ( starts with: "foo" and not Equals: { 'o', 'o', 'f', 'b', 'a', 'r'
  } and ends with: "bar" )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( str, EqualsRange( arr ) && StartsWith( "foo" ) && EndsWith( "bar" ) )
[0mwith expansion:
[1;33m  "foobar" ( Equals: { 'f', 'o', 'o', 'b', 'a', 'r' } and starts with: "foo"
  and ends with: "bar" )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( str, !EqualsRange( bad_arr ) && StartsWith( "foo" ) && EndsWith( "bar" ) )
[0mwith expansion:
[1;33m  "foobar" ( not Equals: { 'o', 'o', 'f', 'b', 'a', 'r' } and starts with:
  "foo" and ends with: "bar" )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( str, EqualsRange( bad_arr ) || ( StartsWith( "foo" ) && EndsWith( "bar" ) ) )
[0mwith expansion:
[1;33m  "foobar" ( Equals: { 'o', 'o', 'f', 'b', 'a', 'r' } or ( starts with: "foo"
  and ends with: "bar" ) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( str, ( StartsWith( "foo" ) && EndsWith( "bar" ) ) || EqualsRange( bad_arr ) )
[0mwith expansion:
[1;33m  "foobar" ( ( starts with: "foo" and ends with: "bar" ) or Equals: { 'o', 'o',
  'f', 'b', 'a', 'r' } )
[0m
-------------------------------------------------------------------------------
[0mCombining templated matchers
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( container, EqualsRange( a ) || EqualsRange( b ) || EqualsRange( c ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } ( Equals: { 1, 2, 3 } or Equals: { 0, 1, 2 } or Equals: { 4, 5, 6
  } )
[0m
-------------------------------------------------------------------------------
[0mCommas in various macros are allowed
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS( std::vector<constructor_throws>{constructor_throws{}, constructor_throws{}} )
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THROWS( std::vector<constructor_throws>{constructor_throws{}, constructor_throws{}} )
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( std::vector<int>{1, 2, 3} == std::vector<int>{1, 2, 3} )
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_NOTHROW( std::vector<int>{1, 2, 3} == std::vector<int>{1, 2, 3} )
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::vector<int>{1, 2} == std::vector<int>{1, 2} )
[0mwith expansion:
[1;33m  { 1, 2 } == { 1, 2 }
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( std::vector<int>{1, 2} == std::vector<int>{1, 2} )
[0mwith expansion:
[1;33m  { 1, 2 } == { 1, 2 }
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( std::vector<int>{1, 2} == std::vector<int>{1, 2, 3} )
[0mwith expansion:
[1;33m  !({ 1, 2 } == { 1, 2, 3 })
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( std::vector<int>{1, 2} == std::vector<int>{1, 2, 3} )
[0mwith expansion:
[1;33m  !({ 1, 2 } == { 1, 2, 3 })
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_NOFAIL( std::vector<int>{1, 2} == std::vector<int>{1, 2} )
[0mwith expansion:
[1;33m  { 1, 2 } == { 1, 2 }
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECKED_IF( std::vector<int>{1, 2} == std::vector<int>{1, 2} )
[0mwith expansion:
[1;33m  { 1, 2 } == { 1, 2 }
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECKED_ELSE( std::vector<int>{1, 2} == std::vector<int>{1, 2} )
[0mwith expansion:
[1;33m  { 1, 2 } == { 1, 2 }
[0m
-------------------------------------------------------------------------------
[0mComparing function pointers
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( a )
[0mwith expansion:
[1;33m  0x<hex digits>
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( a == &foo )
[0mwith expansion:
[1;33m  0x<hex digits> == 0x<hex digits>
[0m
-------------------------------------------------------------------------------
[0mComparison ops
[0m-------------------------------------------------------------------------------
RandomNumberGeneration.tests.cpp:<line number>
...............................................................................

RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( SimplePcg32{} == SimplePcg32{} )
[0mwith expansion:
[1;33m  {?} == {?}
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( SimplePcg32{ 0 } != SimplePcg32{} )
[0mwith expansion:
[1;33m  {?} != {?}
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( SimplePcg32{ 1 } == SimplePcg32{ 2 } )
[0mwith expansion:
[1;33m  !({?} == {?})
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( SimplePcg32{ 1 } != SimplePcg32{ 1 } )
[0mwith expansion:
[1;33m  !({?} != {?})
[0m
-------------------------------------------------------------------------------
[0mComparison with explicitly convertible types
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( td == Approx(10.0) )
[0mwith expansion:
[1;33m  StrongDoubleTypedef(10) == Approx( 10.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Approx(10.0) == td )
[0mwith expansion:
[1;33m  Approx( 10.0 ) == StrongDoubleTypedef(10)
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( td != Approx(11.0) )
[0mwith expansion:
[1;33m  StrongDoubleTypedef(10) != Approx( 11.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Approx(11.0) != td )
[0mwith expansion:
[1;33m  Approx( 11.0 ) != StrongDoubleTypedef(10)
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( td <= Approx(10.0) )
[0mwith expansion:
[1;33m  StrongDoubleTypedef(10) <= Approx( 10.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( td <= Approx(11.0) )
[0mwith expansion:
[1;33m  StrongDoubleTypedef(10) <= Approx( 11.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Approx(10.0) <= td )
[0mwith expansion:
[1;33m  Approx( 10.0 ) <= StrongDoubleTypedef(10)
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Approx(9.0) <= td )
[0mwith expansion:
[1;33m  Approx( 9.0 ) <= StrongDoubleTypedef(10)
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( td >= Approx(9.0) )
[0mwith expansion:
[1;33m  StrongDoubleTypedef(10) >= Approx( 9.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( td >= Approx(td) )
[0mwith expansion:
[1;33m  StrongDoubleTypedef(10) >= Approx( 10.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Approx(td) >= td )
[0mwith expansion:
[1;33m  Approx( 10.0 ) >= StrongDoubleTypedef(10)
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Approx(11.0) >= td )
[0mwith expansion:
[1;33m  Approx( 11.0 ) >= StrongDoubleTypedef(10)
[0m
-------------------------------------------------------------------------------
[0mComparisons between ints where one side is computed
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( 54 == 6*9 )
[0mwith expansion:
[1;33m  54 == 54
[0m
-------------------------------------------------------------------------------
[0mComparisons between unsigned ints and negative signed ints match c++ standard
behaviour
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ( -1 > 2u ) )
[0mwith expansion:
[1;33m  true
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( -1 > 2u )
[0mwith expansion:
[1;33m  -1 > 2
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ( 2u < -1 ) )
[0mwith expansion:
[1;33m  true
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( 2u < -1 )
[0mwith expansion:
[1;33m  2 < -1
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ( minInt > 2u ) )
[0mwith expansion:
[1;33m  true
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( minInt > 2u )
[0mwith expansion:
[1;33m  -2147483648 > 2
[0m
-------------------------------------------------------------------------------
[0mComparisons with int literals don't warn when mixing signed/ unsigned
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ui == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( l == 3 )
[0mwith expansion:
[1;33m  3 == 3
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ul == 4 )
[0mwith expansion:
[1;33m  4 == 4
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( c == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( uc == 6 )
[0mwith expansion:
[1;33m  6 == 6
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 1 == i )
[0mwith expansion:
[1;33m  1 == 1
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 2 == ui )
[0mwith expansion:
[1;33m  2 == 2
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 3 == l )
[0mwith expansion:
[1;33m  3 == 3
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 4 == ul )
[0mwith expansion:
[1;33m  4 == 4
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 5 == c )
[0mwith expansion:
[1;33m  5 == 5
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 6 == uc )
[0mwith expansion:
[1;33m  6 == 6
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( (std::numeric_limits<uint32_t>::max)() > ul )
[0mwith expansion:
[1;33m  4294967295 (0x<hex digits>) > 4
[0m
-------------------------------------------------------------------------------
[0mComposed generic matchers shortcircuit
[0m[0m  MatchAllOf
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( matcher.match( 1 ) )
[0mwith expansion:
[1;33m  !false
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( first.matchCalled )
[0mwith expansion:
[1;33m  true
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( !second.matchCalled )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mComposed generic matchers shortcircuit
[0m[0m  MatchAnyOf
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( matcher.match( 1 ) )
[0mwith expansion:
[1;33m  true
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( first.matchCalled )
[0mwith expansion:
[1;33m  true
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( !second.matchCalled )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mComposed matchers shortcircuit
[0m[0m  MatchAllOf
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( matcher.match( 1 ) )
[0mwith expansion:
[1;33m  !false
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( first.matchCalled )
[0mwith expansion:
[1;33m  true
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( !second.matchCalled )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mComposed matchers shortcircuit
[0m[0m  MatchAnyOf
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( matcher.match( 1 ) )
[0mwith expansion:
[1;33m  true
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( first.matchCalled )
[0mwith expansion:
[1;33m  true
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( !second.matchCalled )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mContains string matcher
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), ContainsSubstring( "not there", Catch::CaseSensitive::No ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" contains: "not there" (case
  insensitive)
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), ContainsSubstring( "STRING" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" contains: "STRING"
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  from var and iterators
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  from var and iterators
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  from var and iterators
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  from var and iterators
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  from var and iterators
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  from var and iterators
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  From a temporary container
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  From a temporary container
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  From a temporary container
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  From a temporary container
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  From a temporary container
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  From a temporary container
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( elem % 2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mCopy and then generate a range
[0m[0m  Final validation
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( call_count == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( make_data().size() == test_count )
[0mwith expansion:
[1;33m  6 == 6
[0m
-------------------------------------------------------------------------------
[0mCout stream properly declares it writes to stdout
[0m-------------------------------------------------------------------------------
Stream.tests.cpp:<line number>
...............................................................................

Stream.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::makeStream( "-" )->isConsole() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mCustom exceptions can be translated when testing for nothrow
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE_NOTHROW( throwCustom() )
[0mdue to unexpected exception with message:
  custom exception - not std

-------------------------------------------------------------------------------
[0mCustom exceptions can be translated when testing for throwing as something else
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE_THROWS_AS( throwCustom(), std::exception )
[0mdue to unexpected exception with message:
  custom exception - not std

-------------------------------------------------------------------------------
[0mCustom std-exceptions can be custom translated
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mdue to unexpected exception with message:
  custom std exception

-------------------------------------------------------------------------------
[0mDefault scale is invisible to comparison
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 101.000001 != Approx(100).epsilon(0.01) )
[0mwith expansion:
[1;33m  101.000001 != Approx( 100.0 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::pow(10, -5) != Approx(std::pow(10, -7)) )
[0mwith expansion:
[1;33m  0.00001 != Approx( 0.0000001 )
[0m
-------------------------------------------------------------------------------
[0mDirectly creating an EnumInfo
[0m-------------------------------------------------------------------------------
ToString.tests.cpp:<line number>
...............................................................................

ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( enumInfo->lookup(0) == "Value1" )
[0mwith expansion:
[1;33m  Value1 == "Value1"
[0m
ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( enumInfo->lookup(1) == "Value2" )
[0mwith expansion:
[1;33m  Value2 == "Value2"
[0m
ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( enumInfo->lookup(3) == "{** unexpected enum value **}" )
[0mwith expansion:
[1;33m  {** unexpected enum value **}
  ==
  "{** unexpected enum value **}"
[0m
-------------------------------------------------------------------------------
[0mEmpty stream name opens cout stream
[0m-------------------------------------------------------------------------------
Stream.tests.cpp:<line number>
...............................................................................

Stream.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::makeStream( "" )->isConsole() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mEmpty tag is not allowed
[0m-------------------------------------------------------------------------------
Tag.tests.cpp:<line number>
...............................................................................

Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS( Catch::TestCaseInfo( "", { "fake test name", "[]" }, dummySourceLineInfo ) )
[0m
-------------------------------------------------------------------------------
[0mEndsWith string matcher
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), EndsWith( "Substring" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" ends with: "Substring"
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), EndsWith( "this", Catch::CaseSensitive::No ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" ends with: "this" (case
  insensitive)
[0m
-------------------------------------------------------------------------------
[0mEnums can quickly have stringification enabled using REGISTER_ENUM
[0m-------------------------------------------------------------------------------
EnumToString.tests.cpp:<line number>
...............................................................................

EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( stringify( EnumClass3::Value1 ) == "Value1" )
[0mwith expansion:
[1;33m  "Value1" == "Value1"
[0m
EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( stringify( EnumClass3::Value2 ) == "Value2" )
[0mwith expansion:
[1;33m  "Value2" == "Value2"
[0m
EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( stringify( EnumClass3::Value3 ) == "Value3" )
[0mwith expansion:
[1;33m  "Value3" == "Value3"
[0m
EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( stringify( EnumClass3::Value4 ) == "{** unexpected enum value **}" )
[0mwith expansion:
[1;33m  "{** unexpected enum value **}"
  ==
  "{** unexpected enum value **}"
[0m
EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( stringify( ec3 ) == "Value2" )
[0mwith expansion:
[1;33m  "Value2" == "Value2"
[0m
-------------------------------------------------------------------------------
[0mEnums in namespaces can quickly have stringification enabled using
REGISTER_ENUM
[0m-------------------------------------------------------------------------------
EnumToString.tests.cpp:<line number>
...............................................................................

EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( stringify( Bikeshed::Colours::Red ) == "Red" )
[0mwith expansion:
[1;33m  "Red" == "Red"
[0m
EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( stringify( Bikeshed::Colours::Blue ) == "Blue" )
[0mwith expansion:
[1;33m  "Blue" == "Blue"
[0m
-------------------------------------------------------------------------------
[0mEpsilon only applies to Approx's value
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 101.01 != Approx(100).epsilon(0.01) )
[0mwith expansion:
[1;33m  101.01 != Approx( 100.0 )
[0m
-------------------------------------------------------------------------------
[0mEquality checks that should fail
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven == 6 )
[0mwith expansion:
[1;33m  7 == 6
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven == 8 )
[0mwith expansion:
[1;33m  7 == 8
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven == 0 )
[0mwith expansion:
[1;33m  7 == 0
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.float_nine_point_one == Approx( 9.11f ) )
[0mwith expansion:
[1;33m  9.1f == Approx( 9.1099996567 )
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.float_nine_point_one == Approx( 9.0f ) )
[0mwith expansion:
[1;33m  9.1f == Approx( 9.0 )
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.float_nine_point_one == Approx( 1 ) )
[0mwith expansion:
[1;33m  9.1f == Approx( 1.0 )
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.float_nine_point_one == Approx( 0 ) )
[0mwith expansion:
[1;33m  9.1f == Approx( 0.0 )
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.double_pi == Approx( 3.1415 ) )
[0mwith expansion:
[1;33m  3.1415926535 == Approx( 3.1415 )
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello == "goodbye" )
[0mwith expansion:
[1;33m  "hello" == "goodbye"
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello == "hell" )
[0mwith expansion:
[1;33m  "hello" == "hell"
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello == "hello1" )
[0mwith expansion:
[1;33m  "hello" == "hello1"
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello.size() == 6 )
[0mwith expansion:
[1;33m  5 == 6
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( x == Approx( 1.301 ) )
[0mwith expansion:
[1;33m  1.3 == Approx( 1.301 )
[0m
-------------------------------------------------------------------------------
[0mEquality checks that should succeed
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.int_seven == 7 )
[0mwith expansion:
[1;33m  7 == 7
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.float_nine_point_one == Approx( 9.1f ) )
[0mwith expansion:
[1;33m  9.1f == Approx( 9.1000003815 )
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.double_pi == Approx( 3.1415926535 ) )
[0mwith expansion:
[1;33m  3.1415926535 == Approx( 3.1415926535 )
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello == "hello" )
[0mwith expansion:
[1;33m  "hello" == "hello"
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( "hello" == data.str_hello )
[0mwith expansion:
[1;33m  "hello" == "hello"
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( x == Approx( 1.3 ) )
[0mwith expansion:
[1;33m  1.3 == Approx( 1.3 )
[0m
-------------------------------------------------------------------------------
[0mEquals
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), Equals( "this string contains 'abc' as a substring" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" equals: "this string contains
  'abc' as a substring"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), Equals( "this string contains 'ABC' as a substring", Catch::CaseSensitive::No ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" equals: "this string contains
  'abc' as a substring" (case insensitive)
[0m
-------------------------------------------------------------------------------
[0mEquals string matcher
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), Equals( "this string contains 'ABC' as a substring" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" equals: "this string contains
  'ABC' as a substring"
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), Equals( "something else", Catch::CaseSensitive::No ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" equals: "something else" (case
  insensitive)
[0m
-------------------------------------------------------------------------------
[0mException as a value (e.g. in REQUIRE_THROWS_MATCHES) can be stringified
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(WhatException{}) == "This exception has overridden what() method" )
[0mwith expansion:
[1;33m  "This exception has overridden what() method"
  ==
  "This exception has overridden what() method"
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(OperatorException{}) == "OperatorException" )
[0mwith expansion:
[1;33m  "OperatorException" == "OperatorException"
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(StringMakerException{}) == "StringMakerException" )
[0mwith expansion:
[1;33m  "StringMakerException"
  ==
  "StringMakerException"
[0m
-------------------------------------------------------------------------------
[0mException matchers that fail
[0m[0m  No exception
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THROWS_MATCHES( doesNotThrow(), SpecialException, ExceptionMatcher{ 1 } )
[0mbecause no exception was thrown where one was expected:

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE_THROWS_MATCHES( doesNotThrow(), SpecialException, ExceptionMatcher{ 1 } )
[0mbecause no exception was thrown where one was expected:

-------------------------------------------------------------------------------
[0mException matchers that fail
[0m[0m  Type mismatch
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THROWS_MATCHES( throwsAsInt( 1 ), SpecialException, ExceptionMatcher{ 1 } )
[0mdue to unexpected exception with message:
  Unknown exception

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE_THROWS_MATCHES( throwsAsInt( 1 ), SpecialException, ExceptionMatcher{ 1 } )
[0mdue to unexpected exception with message:
  Unknown exception

-------------------------------------------------------------------------------
[0mException matchers that fail
[0m[0m  Contents are wrong
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THROWS_MATCHES( throwsSpecialException( 3 ), SpecialException, ExceptionMatcher{ 1 } )
[0mwith expansion:
[1;33m  SpecialException::what special exception has value of 1
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE_THROWS_MATCHES( throwsSpecialException( 4 ), SpecialException, ExceptionMatcher{ 1 } )
[0mwith expansion:
[1;33m  SpecialException::what special exception has value of 1
[0m
-------------------------------------------------------------------------------
[0mException matchers that succeed
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THROWS_MATCHES( throwsSpecialException( 1 ), SpecialException, ExceptionMatcher{ 1 } )
[0mwith expansion:
[1;33m  SpecialException::what special exception has value of 1
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_MATCHES( throwsSpecialException( 2 ), SpecialException, ExceptionMatcher{ 2 } )
[0mwith expansion:
[1;33m  SpecialException::what special exception has value of 2
[0m
-------------------------------------------------------------------------------
[0mException messages can be tested for
[0m[0m  exact match
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_WITH( thisThrows(), "expected exception" )
[0mwith expansion:
[1;33m  "expected exception" equals: "expected exception"
[0m
-------------------------------------------------------------------------------
[0mException messages can be tested for
[0m[0m  different case
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_WITH( thisThrows(), Equals( "expecteD Exception", Catch::CaseSensitive::No ) )
[0mwith expansion:
[1;33m  "expected exception" equals: "expected exception" (case insensitive)
[0m
-------------------------------------------------------------------------------
[0mException messages can be tested for
[0m[0m  wildcarded
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_WITH( thisThrows(), StartsWith( "expected" ) )
[0mwith expansion:
[1;33m  "expected exception" starts with: "expected"
[0m
Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_WITH( thisThrows(), EndsWith( "exception" ) )
[0mwith expansion:
[1;33m  "expected exception" ends with: "exception"
[0m
Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_WITH( thisThrows(), ContainsSubstring( "except" ) )
[0mwith expansion:
[1;33m  "expected exception" contains: "except"
[0m
Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_WITH( thisThrows(), ContainsSubstring( "exCept", Catch::CaseSensitive::No ) )
[0mwith expansion:
[1;33m  "expected exception" contains: "except" (case insensitive)
[0m
-------------------------------------------------------------------------------
[0mExceptions matchers
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_MATCHES( throwsDerivedException(), DerivedException, Message( "DerivedException::what" ) )
[0mwith expansion:
[1;33m  DerivedException::what exception message matches "DerivedException::what"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_MATCHES( throwsDerivedException(), DerivedException, !Message( "derivedexception::what" ) )
[0mwith expansion:
[1;33m  DerivedException::what not exception message matches "derivedexception::what"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_MATCHES( throwsSpecialException( 2 ), SpecialException, !Message( "DerivedException::what" ) )
[0mwith expansion:
[1;33m  SpecialException::what not exception message matches "DerivedException::what"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_MATCHES( throwsSpecialException( 2 ), SpecialException, Message( "SpecialException::what" ) )
[0mwith expansion:
[1;33m  SpecialException::what exception message matches "SpecialException::what"
[0m
-------------------------------------------------------------------------------
[0mExpected exceptions that don't throw or unexpected exceptions fail the test
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THROWS_AS( thisThrows(), std::string )
[0mdue to unexpected exception with message:
  expected exception

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THROWS_AS( thisDoesntThrow(), std::domain_error )
[0mbecause no exception was thrown where one was expected:

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_NOTHROW( thisThrows() )
[0mdue to unexpected exception with message:
  expected exception

-------------------------------------------------------------------------------
[0mFAIL aborts the test
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mexplicitly with message:
  This is a failure

-------------------------------------------------------------------------------
[0mFAIL does not require an argument
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m
-------------------------------------------------------------------------------
[0mFAIL_CHECK does not abort the test
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mexplicitly with message:
  This is a failure

Message.tests.cpp:<line number>: [0mwarning:
  This message appears in the output

-------------------------------------------------------------------------------
[0mFactorials are computed
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Factorial(0) == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Factorial(1) == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Factorial(2) == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Factorial(3) == 6 )
[0mwith expansion:
[1;33m  6 == 6
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Factorial(10) == 3628800 )
[0mwith expansion:
[1;33m  3628800 (0x<hex digits>) == 3628800 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: double
[0m[0m  Relative
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 10., WithinRel( 11.1, 0.1 ) )
[0mwith expansion:
[1;33m  10.0 and 11.1 are within 10% of each other
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 10., !WithinRel( 11.2, 0.1 ) )
[0mwith expansion:
[1;33m  10.0 not and 11.2 are within 10% of each other
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1., !WithinRel( 0., 0.99 ) )
[0mwith expansion:
[1;33m  1.0 not and 0 are within 99% of each other
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( -0., WithinRel( 0. ) )
[0mwith expansion:
[1;33m  -0.0 and 0 are within 2.22045e-12% of each other
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: double
[0m[0m  Relative
  Some subnormal values
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( v1, WithinRel( v2 ) )
[0mwith expansion:
[1;33m  0.0 and 2.22507e-308 are within 2.22045e-12% of each other
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: double
[0m[0m  Margin
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1., WithinAbs( 1., 0 ) )
[0mwith expansion:
[1;33m  1.0 is within 0.0 of 1.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0., WithinAbs( 1., 1 ) )
[0mwith expansion:
[1;33m  0.0 is within 1.0 of 1.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0., !WithinAbs( 1., 0.99 ) )
[0mwith expansion:
[1;33m  0.0 not is within 0.99 of 1.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0., !WithinAbs( 1., 0.99 ) )
[0mwith expansion:
[1;33m  0.0 not is within 0.99 of 1.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 11., !WithinAbs( 10., 0.5 ) )
[0mwith expansion:
[1;33m  11.0 not is within 0.5 of 10.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 10., !WithinAbs( 11., 0.5 ) )
[0mwith expansion:
[1;33m  10.0 not is within 0.5 of 11.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( -10., WithinAbs( -10., 0.5 ) )
[0mwith expansion:
[1;33m  -10.0 is within 0.5 of -10.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( -10., WithinAbs( -9.6, 0.5 ) )
[0mwith expansion:
[1;33m  -10.0 is within 0.5 of -9.6
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: double
[0m[0m  ULPs
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1., WithinULP( 1., 0 ) )
[0mwith expansion:
[1;33m  1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.
  0000000000000000e+00])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( nextafter( 1., 2. ), WithinULP( 1., 1 ) )
[0mwith expansion:
[1;33m  1.0 is within 1 ULPs of 1.0000000000000000e+00 ([9.9999999999999989e-01, 1.
  0000000000000002e+00])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0., WithinULP( nextafter( 0., 1. ), 1 ) )
[0mwith expansion:
[1;33m  0.0 is within 1 ULPs of 4.9406564584124654e-324 ([0.0000000000000000e+00, 9.
  8813129168249309e-324])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1., WithinULP( nextafter( 1., 0. ), 1 ) )
[0mwith expansion:
[1;33m  1.0 is within 1 ULPs of 9.9999999999999989e-01 ([9.9999999999999978e-01, 1.
  0000000000000000e+00])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1., !WithinULP( nextafter( 1., 2. ), 0 ) )
[0mwith expansion:
[1;33m  1.0 not is within 0 ULPs of 1.0000000000000002e+00 ([1.0000000000000002e+00,
  1.0000000000000002e+00])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1., WithinULP( 1., 0 ) )
[0mwith expansion:
[1;33m  1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.
  0000000000000000e+00])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( -0., WithinULP( 0., 0 ) )
[0mwith expansion:
[1;33m  -0.0 is within 0 ULPs of 0.0000000000000000e+00 ([0.0000000000000000e+00, 0.
  0000000000000000e+00])
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: double
[0m[0m  Composed
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1., WithinAbs( 1., 0.5 ) || WithinULP( 2., 1 ) )
[0mwith expansion:
[1;33m  1.0 ( is within 0.5 of 1.0 or is within 1 ULPs of 2.0000000000000000e+00 ([1.
  9999999999999998e+00, 2.0000000000000004e+00]) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1., WithinAbs( 2., 0.5 ) || WithinULP( 1., 0 ) )
[0mwith expansion:
[1;33m  1.0 ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0000000000000000e+00 ([1.
  0000000000000000e+00, 1.0000000000000000e+00]) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0.0001, WithinAbs( 0., 0.001 ) || WithinRel( 0., 0.1 ) )
[0mwith expansion:
[1;33m  0.0001 ( is within 0.001 of 0.0 or and 0 are within 10% of each other )
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: double
[0m[0m  Constructor validation
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( WithinAbs( 1., 0. ) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( WithinAbs( 1., -1. ), std::domain_error )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( WithinULP( 1., 0 ) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( WithinRel( 1., 0. ) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( WithinRel( 1., -0.2 ), std::domain_error )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( WithinRel( 1., 1. ), std::domain_error )
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: float
[0m[0m  Relative
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 10.f, WithinRel( 11.1f, 0.1f ) )
[0mwith expansion:
[1;33m  10.0f and 11.1 are within 10% of each other
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 10.f, !WithinRel( 11.2f, 0.1f ) )
[0mwith expansion:
[1;33m  10.0f not and 11.2 are within 10% of each other
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1.f, !WithinRel( 0.f, 0.99f ) )
[0mwith expansion:
[1;33m  1.0f not and 0 are within 99% of each other
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( -0.f, WithinRel( 0.f ) )
[0mwith expansion:
[1;33m  -0.0f and 0 are within 0.00119209% of each other
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: float
[0m[0m  Relative
  Some subnormal values
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( v1, WithinRel( v2 ) )
[0mwith expansion:
[1;33m  0.0f and 1.17549e-38 are within 0.00119209% of each other
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: float
[0m[0m  Margin
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1.f, WithinAbs( 1.f, 0 ) )
[0mwith expansion:
[1;33m  1.0f is within 0.0 of 1.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0.f, WithinAbs( 1.f, 1 ) )
[0mwith expansion:
[1;33m  0.0f is within 1.0 of 1.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0.f, !WithinAbs( 1.f, 0.99f ) )
[0mwith expansion:
[1;33m  0.0f not is within 0.9900000095 of 1.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0.f, !WithinAbs( 1.f, 0.99f ) )
[0mwith expansion:
[1;33m  0.0f not is within 0.9900000095 of 1.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0.f, WithinAbs( -0.f, 0 ) )
[0mwith expansion:
[1;33m  0.0f is within 0.0 of -0.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 11.f, !WithinAbs( 10.f, 0.5f ) )
[0mwith expansion:
[1;33m  11.0f not is within 0.5 of 10.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 10.f, !WithinAbs( 11.f, 0.5f ) )
[0mwith expansion:
[1;33m  10.0f not is within 0.5 of 11.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( -10.f, WithinAbs( -10.f, 0.5f ) )
[0mwith expansion:
[1;33m  -10.0f is within 0.5 of -10.0
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( -10.f, WithinAbs( -9.6f, 0.5f ) )
[0mwith expansion:
[1;33m  -10.0f is within 0.5 of -9.6000003815
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: float
[0m[0m  ULPs
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1.f, WithinULP( 1.f, 0 ) )
[0mwith expansion:
[1;33m  1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( -1.f, WithinULP( -1.f, 0 ) )
[0mwith expansion:
[1;33m  -1.0f is within 0 ULPs of -1.00000000e+00f ([-1.00000000e+00, -1.00000000e+
  00])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( nextafter( 1.f, 2.f ), WithinULP( 1.f, 1 ) )
[0mwith expansion:
[1;33m  1.0f is within 1 ULPs of 1.00000000e+00f ([9.99999940e-01, 1.00000012e+00])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0.f, WithinULP( nextafter( 0.f, 1.f ), 1 ) )
[0mwith expansion:
[1;33m  0.0f is within 1 ULPs of 1.40129846e-45f ([0.00000000e+00, 2.80259693e-45])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1.f, WithinULP( nextafter( 1.f, 0.f ), 1 ) )
[0mwith expansion:
[1;33m  1.0f is within 1 ULPs of 9.99999940e-01f ([9.99999881e-01, 1.00000000e+00])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1.f, !WithinULP( nextafter( 1.f, 2.f ), 0 ) )
[0mwith expansion:
[1;33m  1.0f not is within 0 ULPs of 1.00000012e+00f ([1.00000012e+00, 1.00000012e+
  00])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1.f, WithinULP( 1.f, 0 ) )
[0mwith expansion:
[1;33m  1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( -0.f, WithinULP( 0.f, 0 ) )
[0mwith expansion:
[1;33m  -0.0f is within 0 ULPs of 0.00000000e+00f ([0.00000000e+00, 0.00000000e+00])
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: float
[0m[0m  Composed
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1.f, WithinAbs( 1.f, 0.5 ) || WithinULP( 1.f, 1 ) )
[0mwith expansion:
[1;33m  1.0f ( is within 0.5 of 1.0 or is within 1 ULPs of 1.00000000e+00f ([9.
  99999940e-01, 1.00000012e+00]) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 1.f, WithinAbs( 2.f, 0.5 ) || WithinULP( 1.f, 0 ) )
[0mwith expansion:
[1;33m  1.0f ( is within 0.5 of 2.0 or is within 0 ULPs of 1.00000000e+00f ([1.
  00000000e+00, 1.00000000e+00]) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( 0.0001f, WithinAbs( 0.f, 0.001f ) || WithinRel( 0.f, 0.1f ) )
[0mwith expansion:
[1;33m  0.0001f ( is within 0.001 of 0.0 or and 0 are within 10% of each other )
[0m
-------------------------------------------------------------------------------
[0mFloating point matchers: float
[0m[0m  Constructor validation
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( WithinAbs( 1.f, 0.f ) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( WithinAbs( 1.f, -1.f ), std::domain_error )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( WithinULP( 1.f, 0 ) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( WithinULP( 1.f, static_cast<uint64_t>( -1 ) ), std::domain_error )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( WithinRel( 1.f, 0.f ) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( WithinRel( 1.f, -0.2f ), std::domain_error )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( WithinRel( 1.f, 1.f ), std::domain_error )
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Filtering by predicate
  Basic usage
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i % 2 == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Filtering by predicate
  Basic usage
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i % 2 == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Filtering by predicate
  Basic usage
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i % 2 == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Filtering by predicate
  Throws if there are no matching values
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( filter([] (int) {return false; }, value(1)), Catch::GeneratorException )
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Shortening a range
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 4 )
[0mwith expansion:
[1;33m  1 < 4
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Shortening a range
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 4 )
[0mwith expansion:
[1;33m  2 < 4
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Shortening a range
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 4 )
[0mwith expansion:
[1;33m  3 < 4
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Transforming elements
  Same type
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i % 2 == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Transforming elements
  Same type
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i % 2 == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Transforming elements
  Same type
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i % 2 == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Transforming elements
  Different type
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i.size() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Transforming elements
  Different type
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i.size() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Transforming elements
  Different type
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i.size() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Transforming elements
  Different deduced type
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i.size() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Transforming elements
  Different deduced type
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i.size() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Transforming elements
  Different deduced type
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i.size() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Repeating a generator
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j > 0 )
[0mwith expansion:
[1;33m  1 > 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Repeating a generator
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j > 0 )
[0mwith expansion:
[1;33m  2 > 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Repeating a generator
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j > 0 )
[0mwith expansion:
[1;33m  3 > 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Repeating a generator
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j > 0 )
[0mwith expansion:
[1;33m  1 > 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Repeating a generator
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j > 0 )
[0mwith expansion:
[1;33m  2 > 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Repeating a generator
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j > 0 )
[0mwith expansion:
[1;33m  3 > 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Chunking a generator into sized pieces
  Number of elements in source is divisible by chunk size
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.size() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.front() == chunk2.back() )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Chunking a generator into sized pieces
  Number of elements in source is divisible by chunk size
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.size() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.front() == chunk2.back() )
[0mwith expansion:
[1;33m  2 == 2
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Chunking a generator into sized pieces
  Number of elements in source is divisible by chunk size
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.size() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.front() == chunk2.back() )
[0mwith expansion:
[1;33m  3 == 3
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Chunking a generator into sized pieces
  Number of elements in source is not divisible by chunk size
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.size() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.front() == chunk2.back() )
[0mwith expansion:
[1;33m  1 == 1
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.front() < 3 )
[0mwith expansion:
[1;33m  1 < 3
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Chunking a generator into sized pieces
  Number of elements in source is not divisible by chunk size
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.size() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.front() == chunk2.back() )
[0mwith expansion:
[1;33m  2 == 2
[0m
Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.front() < 3 )
[0mwith expansion:
[1;33m  2 < 3
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Chunking a generator into sized pieces
  Chunk size of zero
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Chunking a generator into sized pieces
  Chunk size of zero
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Chunking a generator into sized pieces
  Chunk size of zero
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( chunk2.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mGenerators -- adapters
[0m[0m  Chunking a generator into sized pieces
  Throws on too small generators
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( chunk(2, value(1)), Catch::GeneratorException )
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  one
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j < i )
[0mwith expansion:
[1;33m  -3 < 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  one
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j < i )
[0mwith expansion:
[1;33m  -2 < 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  one
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j < i )
[0mwith expansion:
[1;33m  -1 < 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  two
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 4u * i > str.size() )
[0mwith expansion:
[1;33m  4 > 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  two
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 4u * i > str.size() )
[0mwith expansion:
[1;33m  4 > 2
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  two
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 4u * i > str.size() )
[0mwith expansion:
[1;33m  4 > 3
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  one
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j < i )
[0mwith expansion:
[1;33m  -3 < 2
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  one
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j < i )
[0mwith expansion:
[1;33m  -2 < 2
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  one
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j < i )
[0mwith expansion:
[1;33m  -1 < 2
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  two
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 4u * i > str.size() )
[0mwith expansion:
[1;33m  8 > 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  two
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 4u * i > str.size() )
[0mwith expansion:
[1;33m  8 > 2
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  two
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 4u * i > str.size() )
[0mwith expansion:
[1;33m  8 > 3
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  one
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j < i )
[0mwith expansion:
[1;33m  -3 < 3
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  one
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j < i )
[0mwith expansion:
[1;33m  -2 < 3
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  one
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( j < i )
[0mwith expansion:
[1;33m  -1 < 3
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  two
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 4u * i > str.size() )
[0mwith expansion:
[1;33m  12 > 1
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  two
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 4u * i > str.size() )
[0mwith expansion:
[1;33m  12 > 2
[0m
-------------------------------------------------------------------------------
[0mGenerators -- simple
[0m[0m  two
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 4u * i > str.size() )
[0mwith expansion:
[1;33m  12 > 3
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Single value
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 123 )
[0mwith expansion:
[1;33m  123 == 123
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Preset values
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 3 )
[0mwith expansion:
[1;33m  3 == 3
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Generator combinator
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 4 )
[0mwith expansion:
[1;33m  4 == 4
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Explicitly typed generator sequence
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get().size() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == "aa" )
[0mwith expansion:
[1;33m  "aa" == "aa"
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == "bb" )
[0mwith expansion:
[1;33m  "bb" == "bb"
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == "cc" )
[0mwith expansion:
[1;33m  "cc" == "cc"
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Filter generator
  Simple filtering
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 3 )
[0mwith expansion:
[1;33m  3 == 3
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Filter generator
  Filter out multiple elements at the start and end
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 3 )
[0mwith expansion:
[1;33m  3 == 3
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Filter generator
  Throws on construction if it can't get initial element
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( filter([](int) { return false; }, value(1)), Catch::GeneratorException )
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( filter([](int) { return false; }, values({ 1, 2, 3 })), Catch::GeneratorException )
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Take generator
  Take less
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Take generator
  Take more
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Map with explicit return type
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2.0 )
[0mwith expansion:
[1;33m  2.0 == 2.0
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 4.0 )
[0mwith expansion:
[1;33m  4.0 == 4.0
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 6.0 )
[0mwith expansion:
[1;33m  6.0 == 6.0
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Map with deduced return type
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2.0 )
[0mwith expansion:
[1;33m  2.0 == 2.0
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 4.0 )
[0mwith expansion:
[1;33m  4.0 == 4.0
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 6.0 )
[0mwith expansion:
[1;33m  6.0 == 6.0
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Repeat
  Singular repeat
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 3 )
[0mwith expansion:
[1;33m  3 == 3
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Repeat
  Actual repeat
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 3 )
[0mwith expansion:
[1;33m  3 == 3
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 3 )
[0mwith expansion:
[1;33m  3 == 3
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Range
  Positive auto step
  Integer
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -2 )
[0mwith expansion:
[1;33m  -2 == -2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -1 )
[0mwith expansion:
[1;33m  -1 == -1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Range
  Negative auto step
  Integer
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -1 )
[0mwith expansion:
[1;33m  -1 == -1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Range
  Positive manual step
  Integer
  Exact
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -7 )
[0mwith expansion:
[1;33m  -7 == -7
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -4 )
[0mwith expansion:
[1;33m  -4 == -4
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -1 )
[0mwith expansion:
[1;33m  -1 == -1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Range
  Positive manual step
  Integer
  Slightly over end
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -7 )
[0mwith expansion:
[1;33m  -7 == -7
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -4 )
[0mwith expansion:
[1;33m  -4 == -4
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -1 )
[0mwith expansion:
[1;33m  -1 == -1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Range
  Positive manual step
  Integer
  Slightly under end
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -7 )
[0mwith expansion:
[1;33m  -7 == -7
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -4 )
[0mwith expansion:
[1;33m  -4 == -4
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -1 )
[0mwith expansion:
[1;33m  -1 == -1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Range
  Positive manual step
  Floating Point
  Exact
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -1.0 == Approx( -1.0 )
[0mwith message:
  Current expected value is -1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.9 == Approx( -0.9 )
[0mwith message:
  Current expected value is -0.9

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.9

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.8 == Approx( -0.8 )
[0mwith message:
  Current expected value is -0.8

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.8

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.7 == Approx( -0.7 )
[0mwith message:
  Current expected value is -0.7

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.7

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.6 == Approx( -0.6 )
[0mwith message:
  Current expected value is -0.6

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.6

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.5 == Approx( -0.5 )
[0mwith message:
  Current expected value is -0.5

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.5

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.4 == Approx( -0.4 )
[0mwith message:
  Current expected value is -0.4

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.4

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.3 == Approx( -0.3 )
[0mwith message:
  Current expected value is -0.3

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.3

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.2 == Approx( -0.2 )
[0mwith message:
  Current expected value is -0.2

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.2

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.1 == Approx( -0.1 )
[0mwith message:
  Current expected value is -0.1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.0 == Approx( -0.0 )
[0mwith message:
  Current expected value is -1.38778e-16

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -1.38778e-16

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.1 == Approx( 0.1 )
[0mwith message:
  Current expected value is 0.1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.2 == Approx( 0.2 )
[0mwith message:
  Current expected value is 0.2

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.2

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.3 == Approx( 0.3 )
[0mwith message:
  Current expected value is 0.3

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.3

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.4 == Approx( 0.4 )
[0mwith message:
  Current expected value is 0.4

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.4

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.5 == Approx( 0.5 )
[0mwith message:
  Current expected value is 0.5

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.5

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.6 == Approx( 0.6 )
[0mwith message:
  Current expected value is 0.6

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.6

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.7 == Approx( 0.7 )
[0mwith message:
  Current expected value is 0.7

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.7

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.8 == Approx( 0.8 )
[0mwith message:
  Current expected value is 0.8

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.8

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.9 == Approx( 0.9 )
[0mwith message:
  Current expected value is 0.9

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.9

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx( rangeEnd ) )
[0mwith expansion:
[1;33m  1.0 == Approx( 1.0 )
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Range
  Positive manual step
  Floating Point
  Slightly over end
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -1.0 == Approx( -1.0 )
[0mwith message:
  Current expected value is -1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.7 == Approx( -0.7 )
[0mwith message:
  Current expected value is -0.7

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.7

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.4 == Approx( -0.4 )
[0mwith message:
  Current expected value is -0.4

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.4

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.1 == Approx( -0.1 )
[0mwith message:
  Current expected value is -0.1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.2 == Approx( 0.2 )
[0mwith message:
  Current expected value is 0.2

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.2

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.5 == Approx( 0.5 )
[0mwith message:
  Current expected value is 0.5

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.5

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Range
  Positive manual step
  Floating Point
  Slightly under end
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -1.0 == Approx( -1.0 )
[0mwith message:
  Current expected value is -1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.7 == Approx( -0.7 )
[0mwith message:
  Current expected value is -0.7

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.7

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.4 == Approx( -0.4 )
[0mwith message:
  Current expected value is -0.4

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.4

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  -0.1 == Approx( -0.1 )
[0mwith message:
  Current expected value is -0.1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is -0.1

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.2 == Approx( 0.2 )
[0mwith message:
  Current expected value is 0.2

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.2

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == Approx(expected) )
[0mwith expansion:
[1;33m  0.5 == Approx( 0.5 )
[0mwith message:
  Current expected value is 0.5

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  Current expected value is 0.5

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Range
  Negative manual step
  Integer
  Exact
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -1 )
[0mwith expansion:
[1;33m  -1 == -1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -4 )
[0mwith expansion:
[1;33m  -4 == -4
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Range
  Negative manual step
  Integer
  Slightly over end
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -1 )
[0mwith expansion:
[1;33m  -1 == -1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -4 )
[0mwith expansion:
[1;33m  -4 == -4
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGenerators internals
[0m[0m  Range
  Negative manual step
  Integer
  Slightly under end
[0m-------------------------------------------------------------------------------
GeneratorsImpl.tests.cpp:<line number>
...............................................................................

GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -1 )
[0mwith expansion:
[1;33m  -1 == -1
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -4 )
[0mwith expansion:
[1;33m  -4 == -4
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.next() )
[0mwith expansion:
[1;33m  true
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( gen.get() == -7 )
[0mwith expansion:
[1;33m  -7 == -7
[0m
GeneratorsImpl.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( gen.next() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mGreater-than inequalities with different epsilons
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d >= Approx( 1.22 ) )
[0mwith expansion:
[1;33m  1.23 >= Approx( 1.22 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d >= Approx( 1.23 ) )
[0mwith expansion:
[1;33m  1.23 >= Approx( 1.23 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( d >= Approx( 1.24 ) )
[0mwith expansion:
[1;33m  !(1.23 >= Approx( 1.24 ))
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d >= Approx( 1.24 ).epsilon(0.1) )
[0mwith expansion:
[1;33m  1.23 >= Approx( 1.24 )
[0m
-------------------------------------------------------------------------------
[0mHashers with different seed produce different hash with same test case
[0m-------------------------------------------------------------------------------
TestCaseInfoHasher.tests.cpp:<line number>
...............................................................................

TestCaseInfoHasher.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( h1( dummy ) != h2( dummy ) )
[0mwith expansion:
[1;33m  3422778688 (0x<hex digits>)
  !=
  130711275 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mHashers with same seed produce same hash
[0m-------------------------------------------------------------------------------
TestCaseInfoHasher.tests.cpp:<line number>
...............................................................................

TestCaseInfoHasher.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( h1( dummy ) == h2( dummy ) )
[0mwith expansion:
[1;33m  3422778688 (0x<hex digits>)
  ==
  3422778688 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mHashing different test cases produces different result
[0m[0m  Different test name
[0m-------------------------------------------------------------------------------
TestCaseInfoHasher.tests.cpp:<line number>
...............................................................................

TestCaseInfoHasher.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( h( dummy1 ) != h( dummy2 ) )
[0mwith expansion:
[1;33m  2903002874 (0x<hex digits>)
  !=
  2668622104 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mHashing different test cases produces different result
[0m[0m  Different classname
[0m-------------------------------------------------------------------------------
TestCaseInfoHasher.tests.cpp:<line number>
...............................................................................

TestCaseInfoHasher.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( h( dummy1 ) != h( dummy2 ) )
[0mwith expansion:
[1;33m  2673152918 (0x<hex digits>)
  !=
  3916075712 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mHashing different test cases produces different result
[0m[0m  Different tags
[0m-------------------------------------------------------------------------------
TestCaseInfoHasher.tests.cpp:<line number>
...............................................................................

TestCaseInfoHasher.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( h( dummy1 ) != h( dummy2 ) )
[0mwith expansion:
[1;33m  2074929312 (0x<hex digits>)
  !=
  3429949824 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mHashing test case produces same hash across multiple calls
[0m-------------------------------------------------------------------------------
TestCaseInfoHasher.tests.cpp:<line number>
...............................................................................

TestCaseInfoHasher.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( h( dummy ) == h( dummy ) )
[0mwith expansion:
[1;33m  3422778688 (0x<hex digits>)
  ==
  3422778688 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mINFO and WARN do not abort tests
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0mwarning:
  this is a message
  this is a warning

[1;31m
No assertions in test case 'INFO and WARN do not abort tests'

[0m-------------------------------------------------------------------------------
[0mINFO gets logged on failure
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( a == 1 )
[0mwith expansion:
[1;33m  2 == 1
[0mwith messages:
  this message should be logged
  so should this

-------------------------------------------------------------------------------
[0mINFO gets logged on failure, even if captured before successful assertions
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( a == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0mwith message:
  this message may be logged later

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( a == 1 )
[0mwith expansion:
[1;33m  2 == 1
[0mwith messages:
  this message may be logged later
  this message should be logged

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( a == 0 )
[0mwith expansion:
[1;33m  2 == 0
[0mwith messages:
  this message may be logged later
  this message should be logged
  and this, but later

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( a == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0mwith messages:
  this message may be logged later
  this message should be logged
  and this, but later
  but not this

-------------------------------------------------------------------------------
[0mINFO is reset for each loop
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 10 )
[0mwith expansion:
[1;33m  0 < 10
[0mwith messages:
  current counter 0
  i := 0

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 10 )
[0mwith expansion:
[1;33m  1 < 10
[0mwith messages:
  current counter 1
  i := 1

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 10 )
[0mwith expansion:
[1;33m  2 < 10
[0mwith messages:
  current counter 2
  i := 2

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 10 )
[0mwith expansion:
[1;33m  3 < 10
[0mwith messages:
  current counter 3
  i := 3

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 10 )
[0mwith expansion:
[1;33m  4 < 10
[0mwith messages:
  current counter 4
  i := 4

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 10 )
[0mwith expansion:
[1;33m  5 < 10
[0mwith messages:
  current counter 5
  i := 5

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 10 )
[0mwith expansion:
[1;33m  6 < 10
[0mwith messages:
  current counter 6
  i := 6

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 10 )
[0mwith expansion:
[1;33m  7 < 10
[0mwith messages:
  current counter 7
  i := 7

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 10 )
[0mwith expansion:
[1;33m  8 < 10
[0mwith messages:
  current counter 8
  i := 8

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( i < 10 )
[0mwith expansion:
[1;33m  9 < 10
[0mwith messages:
  current counter 9
  i := 9

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( i < 10 )
[0mwith expansion:
[1;33m  10 < 10
[0mwith messages:
  current counter 10
  i := 10

-------------------------------------------------------------------------------
[0mInequality checks that should fail
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven != 7 )
[0mwith expansion:
[1;33m  7 != 7
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.float_nine_point_one != Approx( 9.1f ) )
[0mwith expansion:
[1;33m  9.1f != Approx( 9.1000003815 )
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.double_pi != Approx( 3.1415926535 ) )
[0mwith expansion:
[1;33m  3.1415926535 != Approx( 3.1415926535 )
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello != "hello" )
[0mwith expansion:
[1;33m  "hello" != "hello"
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello.size() != 5 )
[0mwith expansion:
[1;33m  5 != 5
[0m
-------------------------------------------------------------------------------
[0mInequality checks that should succeed
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.int_seven != 6 )
[0mwith expansion:
[1;33m  7 != 6
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.int_seven != 8 )
[0mwith expansion:
[1;33m  7 != 8
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.float_nine_point_one != Approx( 9.11f ) )
[0mwith expansion:
[1;33m  9.1f != Approx( 9.1099996567 )
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.float_nine_point_one != Approx( 9.0f ) )
[0mwith expansion:
[1;33m  9.1f != Approx( 9.0 )
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.float_nine_point_one != Approx( 1 ) )
[0mwith expansion:
[1;33m  9.1f != Approx( 1.0 )
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.float_nine_point_one != Approx( 0 ) )
[0mwith expansion:
[1;33m  9.1f != Approx( 0.0 )
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.double_pi != Approx( 3.1415 ) )
[0mwith expansion:
[1;33m  3.1415926535 != Approx( 3.1415 )
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello != "goodbye" )
[0mwith expansion:
[1;33m  "hello" != "goodbye"
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello != "hell" )
[0mwith expansion:
[1;33m  "hello" != "hell"
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello != "hello1" )
[0mwith expansion:
[1;33m  "hello" != "hello1"
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello.size() != 6 )
[0mwith expansion:
[1;33m  5 != 6
[0m
-------------------------------------------------------------------------------
[0mLambdas in assertions
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( []() { return true; }() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mLess-than inequalities with different epsilons
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d <= Approx( 1.24 ) )
[0mwith expansion:
[1;33m  1.23 <= Approx( 1.24 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d <= Approx( 1.23 ) )
[0mwith expansion:
[1;33m  1.23 <= Approx( 1.23 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( d <= Approx( 1.22 ) )
[0mwith expansion:
[1;33m  !(1.23 <= Approx( 1.22 ))
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d <= Approx( 1.22 ).epsilon(0.1) )
[0mwith expansion:
[1;33m  1.23 <= Approx( 1.22 )
[0m
-------------------------------------------------------------------------------
[0mManuallyRegistered
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  was called

-------------------------------------------------------------------------------
[0mMatchers can be (AllOf) composed with the && operator
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), ContainsSubstring( "string" ) && ContainsSubstring( "abc" ) && ContainsSubstring( "substring" ) && ContainsSubstring( "contains" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" ( contains: "string" and
  contains: "abc" and contains: "substring" and contains: "contains" )
[0m
-------------------------------------------------------------------------------
[0mMatchers can be (AnyOf) composed with the || operator
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), ContainsSubstring( "string" ) || ContainsSubstring( "different" ) || ContainsSubstring( "random" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" ( contains: "string" or contains:
  "different" or contains: "random" )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching2(), ContainsSubstring( "string" ) || ContainsSubstring( "different" ) || ContainsSubstring( "random" ) )
[0mwith expansion:
[1;33m  "some completely different text that contains one common word" ( contains:
  "string" or contains: "different" or contains: "random" )
[0m
-------------------------------------------------------------------------------
[0mMatchers can be composed with both && and ||
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), ( ContainsSubstring( "string" ) || ContainsSubstring( "different" ) ) && ContainsSubstring( "substring" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" ( ( contains: "string" or
  contains: "different" ) and contains: "substring" )
[0m
-------------------------------------------------------------------------------
[0mMatchers can be composed with both && and || - failing
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), ( ContainsSubstring( "string" ) || ContainsSubstring( "different" ) ) && ContainsSubstring( "random" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" ( ( contains: "string" or
  contains: "different" ) and contains: "random" )
[0m
-------------------------------------------------------------------------------
[0mMatchers can be negated (Not) with the ! operator
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), !ContainsSubstring( "different" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" not contains: "different"
[0m
-------------------------------------------------------------------------------
[0mMatchers can be negated (Not) with the ! operator - failing
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), !ContainsSubstring( "substring" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" not contains: "substring"
[0m
-------------------------------------------------------------------------------
[0mMayfail test case with nested sections
[0m[0m  A
  1
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m
-------------------------------------------------------------------------------
[0mMayfail test case with nested sections
[0m[0m  A
  2
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m
-------------------------------------------------------------------------------
[0mMayfail test case with nested sections
[0m[0m  B
  1
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m
-------------------------------------------------------------------------------
[0mMayfail test case with nested sections
[0m[0m  B
  2
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m
-------------------------------------------------------------------------------
[0mMismatching exception messages failing the test
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_WITH( thisThrows(), "expected exception" )
[0mwith expansion:
[1;33m  "expected exception" equals: "expected exception"
[0m
Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE_THROWS_WITH( thisThrows(), "should fail" )
[0mwith expansion:
[1;33m  "expected exception" equals: "should fail"
[0m
-------------------------------------------------------------------------------
[0mMultireporter calls reporters and listeners in correct order
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( records == expected )
[0mwith expansion:
[1;33m  { "Hello", "world", "Goodbye", "world" }
  ==
  { "Hello", "world", "Goodbye", "world" }
[0m
-------------------------------------------------------------------------------
[0mMultireporter updates ReporterPreferences properly
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldRedirectStdOut == false )
[0mwith expansion:
[1;33m  false == false
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldReportAllAssertions == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mMultireporter updates ReporterPreferences properly
[0m[0m  Adding listeners
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldRedirectStdOut == true )
[0mwith expansion:
[1;33m  true == true
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldReportAllAssertions == false )
[0mwith expansion:
[1;33m  false == false
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldRedirectStdOut == true )
[0mwith expansion:
[1;33m  true == true
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldReportAllAssertions == true )
[0mwith expansion:
[1;33m  true == true
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldRedirectStdOut == true )
[0mwith expansion:
[1;33m  true == true
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldReportAllAssertions == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mMultireporter updates ReporterPreferences properly
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldRedirectStdOut == false )
[0mwith expansion:
[1;33m  false == false
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldReportAllAssertions == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mMultireporter updates ReporterPreferences properly
[0m[0m  Adding reporters
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldRedirectStdOut == true )
[0mwith expansion:
[1;33m  true == true
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldReportAllAssertions == false )
[0mwith expansion:
[1;33m  false == false
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldRedirectStdOut == true )
[0mwith expansion:
[1;33m  true == true
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldReportAllAssertions == true )
[0mwith expansion:
[1;33m  true == true
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldRedirectStdOut == true )
[0mwith expansion:
[1;33m  true == true
[0m
Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( multiReporter.getPreferences().shouldReportAllAssertions == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  3 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  4 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  5 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  6 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  -5 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  -4 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  90 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  91 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  92 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  93 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  94 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  95 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  96 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  97 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  98 > -6
[0m
-------------------------------------------------------------------------------
[0mNested generators and captured variables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( values > -6 )
[0mwith expansion:
[1;33m  99 > -6
[0m
-------------------------------------------------------------------------------
[0mNice descriptive name
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0mwarning:
  This one ran

[1;31m
No assertions in test case 'Nice descriptive name'

[0m-------------------------------------------------------------------------------
[0mNon-std exceptions can be translated
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mdue to unexpected exception with message:
  custom exception

-------------------------------------------------------------------------------
[0mObjects that evaluated in boolean contexts can be checked
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( True )
[0mwith expansion:
[1;33m  {?}
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( !False )
[0mwith expansion:
[1;33m  true
[0m
Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( False )
[0mwith expansion:
[1;33m  !{?}
[0m
-------------------------------------------------------------------------------
[0mOptionally static assertions
[0m-------------------------------------------------------------------------------
Compilation.tests.cpp:<line number>
...............................................................................

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_void<void>::value

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  !(std::is_void<int>::value)

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  std::is_void<void>::value

Compilation.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  !(std::is_void<int>::value)

-------------------------------------------------------------------------------
[0mOrdering comparison checks that should fail
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven > 7 )
[0mwith expansion:
[1;33m  7 > 7
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven < 7 )
[0mwith expansion:
[1;33m  7 < 7
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven > 8 )
[0mwith expansion:
[1;33m  7 > 8
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven < 6 )
[0mwith expansion:
[1;33m  7 < 6
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven < 0 )
[0mwith expansion:
[1;33m  7 < 0
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven < -1 )
[0mwith expansion:
[1;33m  7 < -1
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven >= 8 )
[0mwith expansion:
[1;33m  7 >= 8
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.int_seven <= 6 )
[0mwith expansion:
[1;33m  7 <= 6
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.float_nine_point_one < 9 )
[0mwith expansion:
[1;33m  9.1f < 9
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.float_nine_point_one > 10 )
[0mwith expansion:
[1;33m  9.1f > 10
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.float_nine_point_one > 9.2 )
[0mwith expansion:
[1;33m  9.1f > 9.2
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello > "hello" )
[0mwith expansion:
[1;33m  "hello" > "hello"
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello < "hello" )
[0mwith expansion:
[1;33m  "hello" < "hello"
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello > "hellp" )
[0mwith expansion:
[1;33m  "hello" > "hellp"
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello > "z" )
[0mwith expansion:
[1;33m  "hello" > "z"
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello < "hellm" )
[0mwith expansion:
[1;33m  "hello" < "hellm"
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello < "a" )
[0mwith expansion:
[1;33m  "hello" < "a"
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello >= "z" )
[0mwith expansion:
[1;33m  "hello" >= "z"
[0m
Condition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( data.str_hello <= "a" )
[0mwith expansion:
[1;33m  "hello" <= "a"
[0m
-------------------------------------------------------------------------------
[0mOrdering comparison checks that should succeed
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.int_seven < 8 )
[0mwith expansion:
[1;33m  7 < 8
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.int_seven > 6 )
[0mwith expansion:
[1;33m  7 > 6
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.int_seven > 0 )
[0mwith expansion:
[1;33m  7 > 0
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.int_seven > -1 )
[0mwith expansion:
[1;33m  7 > -1
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.int_seven >= 7 )
[0mwith expansion:
[1;33m  7 >= 7
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.int_seven >= 6 )
[0mwith expansion:
[1;33m  7 >= 6
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.int_seven <= 7 )
[0mwith expansion:
[1;33m  7 <= 7
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.int_seven <= 8 )
[0mwith expansion:
[1;33m  7 <= 8
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.float_nine_point_one > 9 )
[0mwith expansion:
[1;33m  9.1f > 9
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.float_nine_point_one < 10 )
[0mwith expansion:
[1;33m  9.1f < 10
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.float_nine_point_one < 9.2 )
[0mwith expansion:
[1;33m  9.1f < 9.2
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello <= "hello" )
[0mwith expansion:
[1;33m  "hello" <= "hello"
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello >= "hello" )
[0mwith expansion:
[1;33m  "hello" >= "hello"
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello < "hellp" )
[0mwith expansion:
[1;33m  "hello" < "hellp"
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello < "zebra" )
[0mwith expansion:
[1;33m  "hello" < "zebra"
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello > "hellm" )
[0mwith expansion:
[1;33m  "hello" > "hellm"
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str_hello > "a" )
[0mwith expansion:
[1;33m  "hello" > "a"
[0m
-------------------------------------------------------------------------------
[0mOur PCG implementation provides expected results for known seeds
[0m[0m  Default seeded
[0m-------------------------------------------------------------------------------
RandomNumberGeneration.tests.cpp:<line number>
...............................................................................

RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  4242248763 (0x<hex digits>)
  ==
  4242248763 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  1867888929 (0x<hex digits>)
  ==
  1867888929 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  1276619030 (0x<hex digits>)
  ==
  1276619030 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  1911218783 (0x<hex digits>)
  ==
  1911218783 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  1827115164 (0x<hex digits>)
  ==
  1827115164 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mOur PCG implementation provides expected results for known seeds
[0m[0m  Specific seed
[0m-------------------------------------------------------------------------------
RandomNumberGeneration.tests.cpp:<line number>
...............................................................................

RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  1472234645 (0x<hex digits>)
  ==
  1472234645 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  868832940 (0x<hex digits>)
  ==
  868832940 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  570883446 (0x<hex digits>)
  ==
  570883446 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  889299803 (0x<hex digits>)
  ==
  889299803 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  4261393167 (0x<hex digits>)
  ==
  4261393167 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  1472234645 (0x<hex digits>)
  ==
  1472234645 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  868832940 (0x<hex digits>)
  ==
  868832940 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  570883446 (0x<hex digits>)
  ==
  570883446 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  889299803 (0x<hex digits>)
  ==
  889299803 (0x<hex digits>)
[0m
RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rng() == 0x<hex digits> )
[0mwith expansion:
[1;33m  4261393167 (0x<hex digits>)
  ==
  4261393167 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mOutput from all sections is reported
[0m[0m  one
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mexplicitly with message:
  Message from section one

-------------------------------------------------------------------------------
[0mOutput from all sections is reported
[0m[0m  two
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mexplicitly with message:
  Message from section two

-------------------------------------------------------------------------------
[0mOverloaded comma or address-of operators are not used
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( ( EvilMatcher(), EvilMatcher() ), EvilCommaOperatorUsed )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( &EvilMatcher(), EvilAddressOfOperatorUsed )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( EvilMatcher() || ( EvilMatcher() && !EvilMatcher() ) )
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( ( EvilMatcher() && EvilMatcher() ) || !EvilMatcher() )
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Empty test spec should have no filters
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Test spec from empty string should have no filters
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Test spec from just a comma should have no filters
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Test spec from name should have one filter
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Test spec from quoted name should have one filter
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Test spec from name should have one filter
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Wildcard at the start
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( parseTestSpec( "*a" ).matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Wildcard at the end
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( parseTestSpec( "a*" ).matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Wildcard at both ends
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( parseTestSpec( "*a*" ).matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Redundant wildcard at the start
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Redundant wildcard at the end
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Redundant wildcard at both ends
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Wildcard at both ends, redundant at start
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Just wildcard
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Single tag
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Single tag, two matches
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Two tags
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Two tags, spare separated
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Wildcarded name and tag
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Single tag exclusion
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  One tag exclusion and one tag inclusion
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  One tag exclusion and one wldcarded name inclusion
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  One tag exclusion, using exclude:, and one wldcarded name inclusion
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  name exclusion
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  wildcarded name exclusion
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  wildcarded name exclusion with tag inclusion
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  wildcarded name exclusion, using exclude:, with tag inclusion
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  two wildcarded names
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  empty tag
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  empty quoted name
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  quoted string followed by tag exclusion
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.hasFilters() == true )
[0mwith expansion:
[1;33m  true == true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcA ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcB ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcC ) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *tcD ) == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Leading and trailing spaces in test spec
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *fakeTestCase( "  aardvark " ) ) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *fakeTestCase( "  aardvark" ) ) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *fakeTestCase( " aardvark " ) ) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *fakeTestCase( "aardvark " ) ) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *fakeTestCase( "aardvark" ) ) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Leading and trailing spaces in test name
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *fakeTestCase( "  aardvark " ) ) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *fakeTestCase( "  aardvark" ) ) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *fakeTestCase( " aardvark " ) ) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *fakeTestCase( "aardvark " ) ) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches( *fakeTestCase( "aardvark" ) ) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Shortened hide tags are split apart when parsing
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches(*fakeTestCase("hidden and foo", "[.][foo]")) )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( spec.matches(*fakeTestCase("only foo", "[foo]")) )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mParse test names and tags
[0m[0m  Shortened hide tags also properly handle exclusion
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( spec.matches(*fakeTestCase("hidden and foo", "[.][foo]")) )
[0mwith expansion:
[1;33m  !false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( spec.matches(*fakeTestCase("only foo", "[foo]")) )
[0mwith expansion:
[1;33m  !false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( spec.matches(*fakeTestCase("only hidden", "[.]")) )
[0mwith expansion:
[1;33m  !false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( spec.matches(*fakeTestCase("neither foo nor hidden", "[bar]")) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mParsed tags are matched case insensitive
[0m-------------------------------------------------------------------------------
TestSpecParser.tests.cpp:<line number>
...............................................................................

TestSpecParser.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.hasFilters() )
[0mwith expansion:
[1;33m  true
[0m
TestSpecParser.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.getInvalidSpecs().empty() )
[0mwith expansion:
[1;33m  true
[0m
TestSpecParser.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.matches( testCase ) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mParsing sharding-related cli flags
[0m[0m  shard-count
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({ "test", "--shard-count=8" }) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.shardCount == 8 )
[0mwith expansion:
[1;33m  8 == 8
[0m
-------------------------------------------------------------------------------
[0mParsing sharding-related cli flags
[0m[0m  Negative shard count reports error
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( result )
[0mwith expansion:
[1;33m  !{?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( result.errorMessage(), ContainsSubstring("Shard count must be a positive number") )
[0mwith expansion:
[1;33m  "Shard count must be a positive number" contains: "Shard count must be a
  positive number"
[0m
-------------------------------------------------------------------------------
[0mParsing sharding-related cli flags
[0m[0m  Zero shard count reports error
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( result )
[0mwith expansion:
[1;33m  !{?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( result.errorMessage(), ContainsSubstring("Shard count must be a positive number") )
[0mwith expansion:
[1;33m  "Shard count must be a positive number" contains: "Shard count must be a
  positive number"
[0m
-------------------------------------------------------------------------------
[0mParsing sharding-related cli flags
[0m[0m  shard-index
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({ "test", "--shard-index=2" }) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.shardIndex == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
-------------------------------------------------------------------------------
[0mParsing sharding-related cli flags
[0m[0m  Negative shard index reports error
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( result )
[0mwith expansion:
[1;33m  !{?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( result.errorMessage(), ContainsSubstring("Shard index must be a non-negative number") )
[0mwith expansion:
[1;33m  "Shard index must be a non-negative number" contains: "Shard index must be a
  non-negative number"
[0m
-------------------------------------------------------------------------------
[0mParsing sharding-related cli flags
[0m[0m  Shard index 0 is accepted
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({ "test", "--shard-index=0" }) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.shardIndex == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mParsing tags with non-alphabetical characters is pass-through
[0m-------------------------------------------------------------------------------
TestSpecParser.tests.cpp:<line number>
...............................................................................

TestSpecParser.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.hasFilters() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  tagString := "[tag with spaces]"

TestSpecParser.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.getInvalidSpecs().empty() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  tagString := "[tag with spaces]"

TestSpecParser.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.matches( testCase ) )
[0mwith expansion:
[1;33m  true
[0mwith message:
  tagString := "[tag with spaces]"

-------------------------------------------------------------------------------
[0mParsing tags with non-alphabetical characters is pass-through
[0m-------------------------------------------------------------------------------
TestSpecParser.tests.cpp:<line number>
...............................................................................

TestSpecParser.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.hasFilters() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  tagString := "[I said "good day" sir!]"

TestSpecParser.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.getInvalidSpecs().empty() )
[0mwith expansion:
[1;33m  true
[0mwith message:
  tagString := "[I said "good day" sir!]"

TestSpecParser.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( spec.matches( testCase ) )
[0mwith expansion:
[1;33m  true
[0mwith message:
  tagString := "[I said "good day" sir!]"

-------------------------------------------------------------------------------
[0mParsing warnings
[0m[0m  NoAssertions
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cli.parse( { "test", "-w", "NoAssertions" } ) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.warnings == WarnAbout::NoAssertions )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mParsing warnings
[0m[0m  NoTests is no longer supported
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( cli.parse( { "test", "-w", "NoTests" } ) )
[0mwith expansion:
[1;33m  !{?}
[0m
-------------------------------------------------------------------------------
[0mParsing warnings
[0m[0m  Combining multiple warnings
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cli.parse( { "test", "--warn", "NoAssertions", "--warn", "UnmatchedTestSpec" } ) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.warnings == ( WarnAbout::NoAssertions | WarnAbout::UnmatchedTestSpec ) )
[0mwith expansion:
[1;33m  3 == 3
[0m
-------------------------------------------------------------------------------
[0mPointers can be compared to null
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( p == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( p == pNULL )
[0mwith expansion:
[1;33m  0 == 0
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( p != 0 )
[0mwith expansion:
[1;33m  0x<hex digits> != 0
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cp != 0 )
[0mwith expansion:
[1;33m  0x<hex digits> != 0
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cpc != 0 )
[0mwith expansion:
[1;33m  0x<hex digits> != 0
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( returnsNull() == 0 )
[0mwith expansion:
[1;33m  {null string} == 0
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( returnsConstNull() == 0 )
[0mwith expansion:
[1;33m  {null string} == 0
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 0 != p )
[0mwith expansion:
[1;33m  0 != 0x<hex digits>
[0m
-------------------------------------------------------------------------------
[0mPrecision of floating point stringification can be set
[0m[0m  Floats
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( str1.size() == 3 + 5 )
[0mwith expansion:
[1;33m  8 == 8
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( str2.size() == 3 + 10 )
[0mwith expansion:
[1;33m  13 == 13
[0m
-------------------------------------------------------------------------------
[0mPrecision of floating point stringification can be set
[0m[0m  Double
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( str1.size() == 2 + 5 )
[0mwith expansion:
[1;33m  7 == 7
[0m
ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( str2.size() == 2 + 15 )
[0mwith expansion:
[1;33m  17 == 17
[0m
-------------------------------------------------------------------------------
[0mPredicate matcher can accept const char*
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( "foo", Predicate<const char*>( []( const char* const& ) { return true; } ) )
[0mwith expansion:
[1;33m  "foo" matches undescribed predicate
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  empty args don't cause a crash
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( config.processName == "" )
[0mwith expansion:
[1;33m  "" == ""
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  default - no arguments
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( config.processName == "test" )
[0mwith expansion:
[1;33m  "test" == "test"
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( config.shouldDebugBreak == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( config.abortAfter == -1 )
[0mwith expansion:
[1;33m  -1 == -1
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( config.noThrow == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( config.reporterSpecifications.empty() )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( cfg.hasTestFilters() )
[0mwith expansion:
[1;33m  !false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cfg.getReporterSpecs().size() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cfg.getReporterSpecs()[0] == Catch::ReporterSpec{ expectedReporter, {}, {}, {} } )
[0mwith expansion:
[1;33m  {?} == {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cfg.getProcessedReporterSpecs().size() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cfg.getProcessedReporterSpecs()[0] == Catch::ProcessedReporterSpec{ expectedReporter, std::string{}, Catch::ColourMode::PlatformDefault, {} } )
[0mwith expansion:
[1;33m  {?} == {?}
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  test lists
  Specify one test case using
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cfg.hasTestFilters() )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cfg.testSpec().matches(*fakeTestCase("notIncluded")) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cfg.testSpec().matches(*fakeTestCase("test1")) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  test lists
  Specify one test case exclusion using exclude:
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cfg.hasTestFilters() )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cfg.testSpec().matches(*fakeTestCase("test1")) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cfg.testSpec().matches(*fakeTestCase("alwaysIncluded")) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  test lists
  Specify one test case exclusion using ~
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cfg.hasTestFilters() )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cfg.testSpec().matches(*fakeTestCase("test1")) == false )
[0mwith expansion:
[1;33m  false == false
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( cfg.testSpec().matches(*fakeTestCase("alwaysIncluded")) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  reporter
  -r/console
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result )
[0mwith expansion:
[1;33m  {?}
[0mwith message:
  result.errorMessage() := ""

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.reporterSpecifications == vec_Specs{ { "console", {}, {}, {} } } )
[0mwith expansion:
[1;33m  { {?} } == { {?} }
[0mwith message:
  result.errorMessage() := ""

-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  reporter
  -r/xml
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result )
[0mwith expansion:
[1;33m  {?}
[0mwith message:
  result.errorMessage() := ""

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.reporterSpecifications == vec_Specs{ { "xml", {}, {}, {} } } )
[0mwith expansion:
[1;33m  { {?} } == { {?} }
[0mwith message:
  result.errorMessage() := ""

-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  reporter
  --reporter/junit
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result )
[0mwith expansion:
[1;33m  {?}
[0mwith message:
  result.errorMessage() := ""

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.reporterSpecifications == vec_Specs{ { "junit", {}, {}, {} } } )
[0mwith expansion:
[1;33m  { {?} } == { {?} }
[0mwith message:
  result.errorMessage() := ""

-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  reporter
  must match one of the available ones
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( !result )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( result.errorMessage(), ContainsSubstring("Unrecognized reporter") )
[0mwith expansion:
[1;33m  "Unrecognized reporter, 'unsupported'. Check available with --list-reporters"
  contains: "Unrecognized reporter"
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  reporter
  With output file
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result )
[0mwith expansion:
[1;33m  {?}
[0mwith message:
  result.errorMessage() := ""

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.reporterSpecifications == vec_Specs{ { "console", "out.txt"s, {}, {} } } )
[0mwith expansion:
[1;33m  { {?} } == { {?} }
[0mwith message:
  result.errorMessage() := ""

-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  reporter
  With Windows-like absolute path as output file
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result )
[0mwith expansion:
[1;33m  {?}
[0mwith message:
  result.errorMessage() := ""

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.reporterSpecifications == vec_Specs{ { "console", "C:\\Temp\\out.txt"s, {}, {} } } )
[0mwith expansion:
[1;33m  { {?} } == { {?} }
[0mwith message:
  result.errorMessage() := ""

-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  reporter
  Multiple reporters
  All with output files
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({ "test", "-r", "xml::out=output.xml", "-r", "junit::out=output-junit.xml" }) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.reporterSpecifications == vec_Specs{ { "xml", "output.xml"s, {}, {} }, { "junit", "output-junit.xml"s, {}, {} } } )
[0mwith expansion:
[1;33m  { {?}, {?} } == { {?}, {?} }
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  reporter
  Multiple reporters
  Mixed output files and default output
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({ "test", "-r", "xml::out=output.xml", "-r", "console" }) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.reporterSpecifications == vec_Specs{ { "xml", "output.xml"s, {}, {} }, { "console", {}, {}, {} } } )
[0mwith expansion:
[1;33m  { {?}, {?} } == { {?}, {?} }
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  reporter
  Multiple reporters
  cannot have multiple reporters with default output
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( !result )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( result.errorMessage(), ContainsSubstring("Only one reporter may have unspecified output file.") )
[0mwith expansion:
[1;33m  "Only one reporter may have unspecified output file." contains: "Only one
  reporter may have unspecified output file."
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  debugger
  -b
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "-b"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.shouldDebugBreak == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  debugger
  --break
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "--break"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.shouldDebugBreak )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  abort
  -a aborts after first failure
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "-a"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.abortAfter == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  abort
  -x 2 aborts after two failures
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "-x", "2"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.abortAfter == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  abort
  -x must be numeric
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( !result )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( result.errorMessage(), ContainsSubstring("convert") && ContainsSubstring("oops") )
[0mwith expansion:
[1;33m  "Unable to convert 'oops' to destination type" ( contains: "convert" and
  contains: "oops" )
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  abort
  wait-for-keypress
  Accepted options
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "--wait-for-keypress", std::get<0>(input)}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.waitForKeypress == std::get<1>(input) )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  abort
  wait-for-keypress
  Accepted options
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "--wait-for-keypress", std::get<0>(input)}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.waitForKeypress == std::get<1>(input) )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  abort
  wait-for-keypress
  Accepted options
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "--wait-for-keypress", std::get<0>(input)}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.waitForKeypress == std::get<1>(input) )
[0mwith expansion:
[1;33m  2 == 2
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  abort
  wait-for-keypress
  Accepted options
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "--wait-for-keypress", std::get<0>(input)}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.waitForKeypress == std::get<1>(input) )
[0mwith expansion:
[1;33m  3 == 3
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  abort
  wait-for-keypress
  invalid options are reported
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( !result )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( result.errorMessage(), ContainsSubstring("never") && ContainsSubstring("both") )
[0mwith expansion:
[1;33m  "keypress argument must be one of: never, start, exit or both. 'sometimes'
  not recognised" ( contains: "never" and contains: "both" )
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  nothrow
  -e
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "-e"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.noThrow )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  nothrow
  --nothrow
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "--nothrow"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.noThrow )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  output filename
  -o filename
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "-o", "filename.ext"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.defaultOutputFilename == "filename.ext" )
[0mwith expansion:
[1;33m  "filename.ext" == "filename.ext"
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  output filename
  --out
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "--out", "filename.ext"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.defaultOutputFilename == "filename.ext" )
[0mwith expansion:
[1;33m  "filename.ext" == "filename.ext"
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  combinations
  Single character flags can be combined
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "-abe"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( config.abortAfter == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( config.shouldDebugBreak )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( config.noThrow == true )
[0mwith expansion:
[1;33m  true == true
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  use-colour
  without option
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.defaultColourMode == ColourMode::PlatformDefault )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  use-colour
  auto
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse( { "test", "--colour-mode", "default" } ) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.defaultColourMode == ColourMode::PlatformDefault )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  use-colour
  yes
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "--colour-mode", "ansi"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.defaultColourMode == ColourMode::ANSI )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  use-colour
  no
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({"test", "--colour-mode", "none"}) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.defaultColourMode == ColourMode::None )
[0mwith expansion:
[1;33m  3 == 3
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  use-colour
  error
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( !result )
[0mwith expansion:
[1;33m  true
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( result.errorMessage(), ContainsSubstring( "colour mode must be one of" ) )
[0mwith expansion:
[1;33m  "colour mode must be one of: default, ansi, win32, or none. 'wrong' is not
  recognised" contains: "colour mode must be one of"
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  Benchmark options
  samples
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({ "test", "--benchmark-samples=200" }) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.benchmarkSamples == 200 )
[0mwith expansion:
[1;33m  200 == 200
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  Benchmark options
  resamples
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({ "test", "--benchmark-resamples=20000" }) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.benchmarkResamples == 20000 )
[0mwith expansion:
[1;33m  20000 (0x<hex digits>) == 20000 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  Benchmark options
  confidence-interval
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({ "test", "--benchmark-confidence-interval=0.99" }) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.benchmarkConfidenceInterval == Catch::Approx(0.99) )
[0mwith expansion:
[1;33m  0.99 == Approx( 0.99 )
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  Benchmark options
  no-analysis
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({ "test", "--benchmark-no-analysis" }) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.benchmarkNoAnalysis )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mProcess can be configured on command line
[0m[0m  Benchmark options
  warmup-time
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( cli.parse({ "test", "--benchmark-warmup-time=10" }) )
[0mwith expansion:
[1;33m  {?}
[0m
CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( config.benchmarkWarmupTime == 10 )
[0mwith expansion:
[1;33m  10 == 10
[0m
-------------------------------------------------------------------------------
[0mProduct with differing arities - std::tuple<int, double, float>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::tuple_size<TestType>::value >= 1 )
[0mwith expansion:
[1;33m  3 >= 1
[0m
-------------------------------------------------------------------------------
[0mProduct with differing arities - std::tuple<int, double>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::tuple_size<TestType>::value >= 1 )
[0mwith expansion:
[1;33m  2 >= 1
[0m
-------------------------------------------------------------------------------
[0mProduct with differing arities - std::tuple<int>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::tuple_size<TestType>::value >= 1 )
[0mwith expansion:
[1;33m  1 >= 1
[0m
-------------------------------------------------------------------------------
[0mRandom seed generation accepts known methods
[0m-------------------------------------------------------------------------------
RandomNumberGeneration.tests.cpp:<line number>
...............................................................................

RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( Catch::generateRandomSeed(method) )
[0m
-------------------------------------------------------------------------------
[0mRandom seed generation accepts known methods
[0m-------------------------------------------------------------------------------
RandomNumberGeneration.tests.cpp:<line number>
...............................................................................

RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( Catch::generateRandomSeed(method) )
[0m
-------------------------------------------------------------------------------
[0mRandom seed generation accepts known methods
[0m-------------------------------------------------------------------------------
RandomNumberGeneration.tests.cpp:<line number>
...............................................................................

RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( Catch::generateRandomSeed(method) )
[0m
-------------------------------------------------------------------------------
[0mRandom seed generation reports unknown methods
[0m-------------------------------------------------------------------------------
RandomNumberGeneration.tests.cpp:<line number>
...............................................................................

RandomNumberGeneration.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS( Catch::generateRandomSeed(static_cast<Catch::GenerateFrom>(77)) )
[0m
-------------------------------------------------------------------------------
[0mRange type with sentinel
[0m-------------------------------------------------------------------------------
ToString.tests.cpp:<line number>
...............................................................................

ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( Catch::Detail::stringify(UsesSentinel{}) == "{  }" )
[0mwith expansion:
[1;33m  "{  }" == "{  }"
[0m
-------------------------------------------------------------------------------
[0mReconstruction should be based on stringification: #914
[0m-------------------------------------------------------------------------------
Decomposition.tests.cpp:<line number>
...............................................................................

Decomposition.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( truthy(false) )
[0mwith expansion:
[1;33m  Hey, its truthy!
[0m
-------------------------------------------------------------------------------
[0mRegex string matcher
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), Matches( "this STRING contains 'abc' as a substring" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" matches "this STRING contains
  'abc' as a substring" case sensitively
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), Matches( "contains 'abc' as a substring" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" matches "contains 'abc' as a
  substring" case sensitively
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), Matches( "this string contains 'abc' as a" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" matches "this string contains
  'abc' as a" case sensitively
[0m
-------------------------------------------------------------------------------
[0mRegistering reporter with '::' in name fails
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_WITH( registry.registerReporter( "with::doublecolons", Catch::Detail::make_unique<TestReporterFactory>() ), "'::' is not allowed in reporter name: 'with::doublecolons'" )
[0mwith expansion:
[1;33m  "'::' is not allowed in reporter name: 'with::doublecolons'" equals: "'::' is
  not allowed in reporter name: 'with::doublecolons'"
[0m
-------------------------------------------------------------------------------
[0mRegression test #1
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( actual, !UnorderedEquals( expected ) )
[0mwith expansion:
[1;33m  { 'a', 'b' } not UnorderedEquals: { 'c', 'b' }
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  Automake reporter lists tags
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fakeTag"s) )
[0mwith expansion:
[1;33m  "All available tags:
     1  [fakeTag]
  1 tag

" contains: "fakeTag"
[0mwith message:
  Tested reporter: Automake

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  Automake reporter lists reporters
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fake reporter"s) )
[0mwith expansion:
[1;33m  "Available reporters:
    fake reporter:  fake description

" contains: "fake reporter"
[0mwith message:
  Tested reporter: Automake

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  Automake reporter lists tests
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s ) )
[0mwith expansion:
[1;33m  "All available test cases:
    fake test name
        [fakeTestTag]
  1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
[0mwith message:
  Tested reporter: Automake

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  compact reporter lists tags
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fakeTag"s) )
[0mwith expansion:
[1;33m  "All available tags:
     1  [fakeTag]
  1 tag

" contains: "fakeTag"
[0mwith message:
  Tested reporter: compact

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  compact reporter lists reporters
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fake reporter"s) )
[0mwith expansion:
[1;33m  "Available reporters:
    fake reporter:  fake description

" contains: "fake reporter"
[0mwith message:
  Tested reporter: compact

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  compact reporter lists tests
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s ) )
[0mwith expansion:
[1;33m  "All available test cases:
    fake test name
        [fakeTestTag]
  1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
[0mwith message:
  Tested reporter: compact

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  console reporter lists tags
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fakeTag"s) )
[0mwith expansion:
[1;33m  "All available tags:
     1  [fakeTag]
  1 tag

" contains: "fakeTag"
[0mwith message:
  Tested reporter: console

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  console reporter lists reporters
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fake reporter"s) )
[0mwith expansion:
[1;33m  "Available reporters:
    fake reporter:  fake description

" contains: "fake reporter"
[0mwith message:
  Tested reporter: console

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  console reporter lists tests
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s ) )
[0mwith expansion:
[1;33m  "All available test cases:
    fake test name
        [fakeTestTag]
  1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
[0mwith message:
  Tested reporter: console

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  JUnit reporter lists tags
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fakeTag"s) )
[0mwith expansion:
[1;33m  "<?xml version="1.0" encoding="UTF-8"?>
  All available tags:
     1  [fakeTag]
  1 tag

" contains: "fakeTag"
[0mwith message:
  Tested reporter: JUnit

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  JUnit reporter lists reporters
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fake reporter"s) )
[0mwith expansion:
[1;33m  "<?xml version="1.0" encoding="UTF-8"?>
  Available reporters:
    fake reporter:  fake description

" contains: "fake reporter"
[0mwith message:
  Tested reporter: JUnit

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  JUnit reporter lists tests
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s ) )
[0mwith expansion:
[1;33m  "<?xml version="1.0" encoding="UTF-8"?>
  All available test cases:
    fake test name
        [fakeTestTag]
  1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
[0mwith message:
  Tested reporter: JUnit

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  SonarQube reporter lists tags
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fakeTag"s) )
[0mwith expansion:
[1;33m  "<?xml version="1.0" encoding="UTF-8"?>
  All available tags:
     1  [fakeTag]
  1 tag

" contains: "fakeTag"
[0mwith message:
  Tested reporter: SonarQube

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  SonarQube reporter lists reporters
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fake reporter"s) )
[0mwith expansion:
[1;33m  "<?xml version="1.0" encoding="UTF-8"?>
  Available reporters:
    fake reporter:  fake description

" contains: "fake reporter"
[0mwith message:
  Tested reporter: SonarQube

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  SonarQube reporter lists tests
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s ) )
[0mwith expansion:
[1;33m  "<?xml version="1.0" encoding="UTF-8"?>
  All available test cases:
    fake test name
        [fakeTestTag]
  1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
[0mwith message:
  Tested reporter: SonarQube

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  TAP reporter lists tags
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fakeTag"s) )
[0mwith expansion:
[1;33m  "All available tags:
     1  [fakeTag]
  1 tag

" contains: "fakeTag"
[0mwith message:
  Tested reporter: TAP

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  TAP reporter lists reporters
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fake reporter"s) )
[0mwith expansion:
[1;33m  "Available reporters:
    fake reporter:  fake description

" contains: "fake reporter"
[0mwith message:
  Tested reporter: TAP

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  TAP reporter lists tests
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s ) )
[0mwith expansion:
[1;33m  "All available test cases:
    fake test name
        [fakeTestTag]
  1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
[0mwith message:
  Tested reporter: TAP

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  TeamCity reporter lists tags
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fakeTag"s) )
[0mwith expansion:
[1;33m  "All available tags:
     1  [fakeTag]
  1 tag

" contains: "fakeTag"
[0mwith message:
  Tested reporter: TeamCity

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  TeamCity reporter lists reporters
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fake reporter"s) )
[0mwith expansion:
[1;33m  "Available reporters:
    fake reporter:  fake description

" contains: "fake reporter"
[0mwith message:
  Tested reporter: TeamCity

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  TeamCity reporter lists tests
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s ) )
[0mwith expansion:
[1;33m  "All available test cases:
    fake test name
        [fakeTestTag]
  1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
[0mwith message:
  Tested reporter: TeamCity

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  XML reporter lists tags
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fakeTag"s) )
[0mwith expansion:
[1;33m  "<?xml version="1.0" encoding="UTF-8"?>
  <TagsFromMatchingTests>
    <Tag>
      <Count>1</Count>
      <Aliases>
        <Alias>fakeTag</Alias>
      </Aliases>
    </Tag>
  </TagsFromMatchingTests>" contains: "fakeTag"
[0mwith message:
  Tested reporter: XML

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  XML reporter lists reporters
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("fake reporter"s) )
[0mwith expansion:
[1;33m  "<?xml version="1.0" encoding="UTF-8"?>
  <AvailableReporters>
    <Reporter>
      <Name>fake reporter</Name>
      <Description>fake description</Description>
    </Reporter>
  </AvailableReporters>" contains: "fake reporter"
[0mwith message:
  Tested reporter: XML

-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( factories.empty() )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mReporter's write listings to provided stream
[0m[0m  XML reporter lists tests
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s ) )
[0mwith expansion:
[1;33m  "<?xml version="1.0" encoding="UTF-8"?>
  <MatchingTests>
    <TestCase>
      <Name>fake test name</Name>
      <ClassName/>
      <Tags>[fakeTestTag]</Tags>
      <SourceInfo>
        <File>fake-file.cpp</File>
        <Line>123456789</Line>
      </SourceInfo>
    </TestCase>
  </MatchingTests>" ( contains: "fake test name" and contains: "fakeTestTag" )
[0mwith message:
  Tested reporter: XML

-------------------------------------------------------------------------------
[0mReproducer for #2309 - a very long description past 80 chars (default console
width) with a late colon : blablabla
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0mSUCCEED counts as a test pass
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  this is a success

-------------------------------------------------------------------------------
[0mSUCCEED does not require an argument
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0mScenario: BDD tests requiring Fixtures to provide commonly-accessed data or
          methods
[0m[0m      Given: No operations precede me
[0m-------------------------------------------------------------------------------
BDD.tests.cpp:<line number>
...............................................................................

BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( before == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mScenario: BDD tests requiring Fixtures to provide commonly-accessed data or
          methods
[0m[0m      Given: No operations precede me
       When: We get the count
       Then: Subsequently values are higher
[0m-------------------------------------------------------------------------------
BDD.tests.cpp:<line number>
...............................................................................

BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( after > before )
[0mwith expansion:
[1;33m  1 > 0
[0m
-------------------------------------------------------------------------------
[0mScenario: Do that thing with the thing
[0m[0m      Given: This stuff exists
  And given: And some assumption
       When: I do this
       Then: it should do this
[0m-------------------------------------------------------------------------------
BDD.tests.cpp:<line number>
...............................................................................

BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( itDoesThis() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mScenario: Do that thing with the thing
[0m[0m      Given: This stuff exists
  And given: And some assumption
       When: I do this
       Then: it should do this
        And: do that
[0m-------------------------------------------------------------------------------
BDD.tests.cpp:<line number>
...............................................................................

BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( itDoesThat() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mScenario: This is a really long scenario name to see how the list command deals
          with wrapping
[0m[0m      Given: A section name that is so long that it cannot fit in a single
             console width
       When: The test headers are printed as part of the normal running of the
             scenario
       Then: The, deliberately very long and overly verbose (you see what I did
             there?) section names must wrap, along with an indent
[0m-------------------------------------------------------------------------------
BDD.tests.cpp:<line number>
...............................................................................

BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  boo!

-------------------------------------------------------------------------------
[0mScenario: Vector resizing affects size and capacity
[0m[0m      Given: an empty vector
[0m-------------------------------------------------------------------------------
BDD.tests.cpp:<line number>
...............................................................................

BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mScenario: Vector resizing affects size and capacity
[0m[0m      Given: an empty vector
       When: it is made larger
       Then: the size and capacity go up
[0m-------------------------------------------------------------------------------
BDD.tests.cpp:<line number>
...............................................................................

BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 10 )
[0mwith expansion:
[1;33m  10 == 10
[0m
BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mScenario: Vector resizing affects size and capacity
[0m[0m      Given: an empty vector
       When: it is made larger
       Then: the size and capacity go up
   And when: it is made smaller again
       Then: the size goes down but the capacity stays the same
[0m-------------------------------------------------------------------------------
BDD.tests.cpp:<line number>
...............................................................................

BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mScenario: Vector resizing affects size and capacity
[0m[0m      Given: an empty vector
[0m-------------------------------------------------------------------------------
BDD.tests.cpp:<line number>
...............................................................................

BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mScenario: Vector resizing affects size and capacity
[0m[0m      Given: an empty vector
       When: we reserve more space
       Then: The capacity is increased but the size remains the same
[0m-------------------------------------------------------------------------------
BDD.tests.cpp:<line number>
...............................................................................

BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
BDD.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
A string sent directly to stdout
A string sent directly to stderr
A string sent to stderr via clog
-------------------------------------------------------------------------------
[0mSends stuff to stdout and stderr
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

[0m[1;31m
No assertions in test case 'Sends stuff to stdout and stderr'

[0m-------------------------------------------------------------------------------
[0mSome simple comparisons between doubles
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d == Approx( 1.23 ) )
[0mwith expansion:
[1;33m  1.23 == Approx( 1.23 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d != Approx( 1.22 ) )
[0mwith expansion:
[1;33m  1.23 != Approx( 1.22 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d != Approx( 1.24 ) )
[0mwith expansion:
[1;33m  1.23 != Approx( 1.24 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d == 1.23_a )
[0mwith expansion:
[1;33m  1.23 == Approx( 1.23 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d != 1.22_a )
[0mwith expansion:
[1;33m  1.23 != Approx( 1.22 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Approx( d ) == 1.23 )
[0mwith expansion:
[1;33m  Approx( 1.23 ) == 1.23
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Approx( d ) != 1.22 )
[0mwith expansion:
[1;33m  Approx( 1.23 ) != 1.22
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Approx( d ) != 1.24 )
[0mwith expansion:
[1;33m  Approx( 1.23 ) != 1.24
[0m
Message from section one
-------------------------------------------------------------------------------
[0mStandard output from all sections is reported
[0m[0m  one
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

[0m[1;31m
No assertions in section 'one'

[0mMessage from section two
-------------------------------------------------------------------------------
[0mStandard output from all sections is reported
[0m[0m  two
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

[0m[1;31m
No assertions in section 'two'

[0m-------------------------------------------------------------------------------
[0mStartsWith string matcher
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), StartsWith( "This String" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" starts with: "This String"
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), StartsWith( "string", Catch::CaseSensitive::No ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" starts with: "string" (case
  insensitive)
[0m
-------------------------------------------------------------------------------
[0mStatic arrays are convertible to string
[0m[0m  Single item
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify(singular) == "{ 1 }" )
[0mwith expansion:
[1;33m  "{ 1 }" == "{ 1 }"
[0m
-------------------------------------------------------------------------------
[0mStatic arrays are convertible to string
[0m[0m  Multiple
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify(arr) == "{ 3, 2, 1 }" )
[0mwith expansion:
[1;33m  "{ 3, 2, 1 }" == "{ 3, 2, 1 }"
[0m
-------------------------------------------------------------------------------
[0mStatic arrays are convertible to string
[0m[0m  Non-trivial inner items
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify(arr) == R"({ { "1:1", "1:2", "1:3" }, { "2:1", "2:2" } })" )
[0mwith expansion:
[1;33m  "{ { "1:1", "1:2", "1:3" }, { "2:1", "2:2" } }"
  ==
  "{ { "1:1", "1:2", "1:3" }, { "2:1", "2:2" } }"
[0m
-------------------------------------------------------------------------------
[0mString matchers
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( testStringForMatching(), ContainsSubstring( "string" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" contains: "string"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( testStringForMatching(), ContainsSubstring( "string", Catch::CaseSensitive::No ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" contains: "string" (case
  insensitive)
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), ContainsSubstring( "abc" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" contains: "abc"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), ContainsSubstring( "aBC", Catch::CaseSensitive::No ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" contains: "abc" (case
  insensitive)
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), StartsWith( "this" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" starts with: "this"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), StartsWith( "THIS", Catch::CaseSensitive::No ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" starts with: "this" (case
  insensitive)
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), EndsWith( "substring" ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" ends with: "substring"
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( testStringForMatching(), EndsWith( " SuBsTrInG", Catch::CaseSensitive::No ) )
[0mwith expansion:
[1;33m  "this string contains 'abc' as a substring" ends with: " substring" (case
  insensitive)
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  Empty string
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( empty.empty() )
[0mwith expansion:
[1;33m  true
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( empty.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::strcmp( empty.data(), "" ) == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  From string literal
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s.empty() == false )
[0mwith expansion:
[1;33m  false == false
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::strcmp( rawChars, "hello" ) == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s.data() == rawChars )
[0mwith expansion:
[1;33m  "hello" == "hello"
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  From sub-string
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( original == "original" )
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( original.data() )
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  Copy construction is shallow
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( original.begin() == copy.begin() )
[0mwith expansion:
[1;33m  "original string" == "original string"
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  Copy assignment is shallow
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( original.begin() == copy.begin() )
[0mwith expansion:
[1;33m  "original string" == "original string"
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  Substrings
  zero-based substring
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ss.empty() == false )
[0mwith expansion:
[1;33m  false == false
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ss.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::strncmp( ss.data(), "hello", 5 ) == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ss == "hello" )
[0mwith expansion:
[1;33m  hello == "hello"
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  Substrings
  non-zero-based substring
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ss.size() == 6 )
[0mwith expansion:
[1;33m  6 == 6
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::strcmp( ss.data(), "world!" ) == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  Substrings
  Pointer values of full refs should match
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s.data() == s2.data() )
[0mwith expansion:
[1;33m  "hello world!" == "hello world!"
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  Substrings
  Pointer values of substring refs should also match
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s.data() == ss.data() )
[0mwith expansion:
[1;33m  "hello world!" == "hello world!"
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  Substrings
  Past the end substring
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s.substr(s.size() + 1, 123).empty() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  Substrings
  Substring off the end are trimmed
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( std::strcmp(ss.data(), "world!") == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  Substrings
  substring start after the end is empty
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s.substr(1'000'000, 1).empty() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  Comparisons are deep
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( reinterpret_cast<char*>(buffer1) != reinterpret_cast<char*>(buffer2) )
[0mwith expansion:
[1;33m  "Hello" != "Hello"
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( left == right )
[0mwith expansion:
[1;33m  Hello == Hello
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( left != left.substr(0, 3) )
[0mwith expansion:
[1;33m  Hello != Hel
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  from std::string
  implicitly constructed
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sr == "a standard string" )
[0mwith expansion:
[1;33m  a standard string == "a standard string"
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sr.size() == stdStr.size() )
[0mwith expansion:
[1;33m  17 == 17
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  from std::string
  explicitly constructed
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sr == "a standard string" )
[0mwith expansion:
[1;33m  a standard string == "a standard string"
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sr.size() == stdStr.size() )
[0mwith expansion:
[1;33m  17 == 17
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  from std::string
  assigned
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sr == "a standard string" )
[0mwith expansion:
[1;33m  a standard string == "a standard string"
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sr.size() == stdStr.size() )
[0mwith expansion:
[1;33m  17 == 17
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  to std::string
  explicitly constructed
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( stdStr == "a stringref" )
[0mwith expansion:
[1;33m  "a stringref" == "a stringref"
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( stdStr.size() == sr.size() )
[0mwith expansion:
[1;33m  11 == 11
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  to std::string
  assigned
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( stdStr == "a stringref" )
[0mwith expansion:
[1;33m  "a stringref" == "a stringref"
[0m
String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( stdStr.size() == sr.size() )
[0mwith expansion:
[1;33m  11 == 11
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  std::string += StringRef
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( lhs == "some string += the stringref contents" )
[0mwith expansion:
[1;33m  "some string += the stringref contents"
  ==
  "some string += the stringref contents"
[0m
-------------------------------------------------------------------------------
[0mStringRef
[0m[0m  StringRef + StringRef
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( together == "abrakadabra" )
[0mwith expansion:
[1;33m  "abrakadabra" == "abrakadabra"
[0m
-------------------------------------------------------------------------------
[0mStringRef at compilation time
[0m[0m  Simple constructors
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  empty.size() == 0

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  empty.begin() == empty.end()

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  stringref.size() == 3

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  stringref.data() == abc

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  stringref.begin() == abc

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  stringref.begin() != stringref.end()

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  stringref.substr(10, 0).empty()

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  stringref.substr(2, 1).data() == abc + 2

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  stringref[1] == 'b'

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  shortened.size() == 2

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  shortened.data() == abc

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  shortened.begin() != shortened.end()

-------------------------------------------------------------------------------
[0mStringRef at compilation time
[0m[0m  UDL construction
[0m-------------------------------------------------------------------------------
String.tests.cpp:<line number>
...............................................................................

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  !(sr1.empty())

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  sr1.size() == 3

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  sr2.empty()

String.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  sr2.size() == 0

-------------------------------------------------------------------------------
[0mStringifying char arrays with statically known sizes - char
[0m-------------------------------------------------------------------------------
ToString.tests.cpp:<line number>
...............................................................................

ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify( with_null_terminator ) == R"("abc")"s )
[0mwith expansion:
[1;33m  ""abc"" == ""abc""
[0m
ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify( no_null_terminator ) == R"("abc")"s )
[0mwith expansion:
[1;33m  ""abc"" == ""abc""
[0m
-------------------------------------------------------------------------------
[0mStringifying char arrays with statically known sizes - signed char
[0m-------------------------------------------------------------------------------
ToString.tests.cpp:<line number>
...............................................................................

ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify( with_null_terminator ) == R"("abc")"s )
[0mwith expansion:
[1;33m  ""abc"" == ""abc""
[0m
ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify( no_null_terminator ) == R"("abc")"s )
[0mwith expansion:
[1;33m  ""abc"" == ""abc""
[0m
-------------------------------------------------------------------------------
[0mStringifying char arrays with statically known sizes - unsigned char
[0m-------------------------------------------------------------------------------
ToString.tests.cpp:<line number>
...............................................................................

ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify( with_null_terminator ) == R"("abc")"s )
[0mwith expansion:
[1;33m  ""abc"" == ""abc""
[0m
ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify( no_null_terminator ) == R"("abc")"s )
[0mwith expansion:
[1;33m  ""abc"" == ""abc""
[0m
-------------------------------------------------------------------------------
[0mStringifying std::chrono::duration helpers
[0m-------------------------------------------------------------------------------
ToStringChrono.tests.cpp:<line number>
...............................................................................

ToStringChrono.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( minute == seconds )
[0mwith expansion:
[1;33m  1 m == 60 s
[0m
ToStringChrono.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( hour != seconds )
[0mwith expansion:
[1;33m  1 h != 60 s
[0m
ToStringChrono.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( micro != milli )
[0mwith expansion:
[1;33m  1 us != 1 ms
[0m
ToStringChrono.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( nano != micro )
[0mwith expansion:
[1;33m  1 ns != 1 us
[0m
-------------------------------------------------------------------------------
[0mStringifying std::chrono::duration with weird ratios
[0m-------------------------------------------------------------------------------
ToStringChrono.tests.cpp:<line number>
...............................................................................

ToStringChrono.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( half_minute != femto_second )
[0mwith expansion:
[1;33m  1 [30/1]s != 1 fs
[0m
ToStringChrono.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( pico_second != atto_second )
[0mwith expansion:
[1;33m  1 ps != 1 as
[0m
-------------------------------------------------------------------------------
[0mStringifying std::chrono::time_point<system_clock>
[0m-------------------------------------------------------------------------------
ToStringChrono.tests.cpp:<line number>
...............................................................................

ToStringChrono.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( now != later )
[0mwith expansion:
[1;33m  {iso8601-timestamp}
  !=
  {iso8601-timestamp}
[0m
-------------------------------------------------------------------------------
[0mTabs and newlines show in output
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( s1 == s2 )
[0mwith expansion:
[1;33m  "if ($b == 10) {
  		$a	= 20;
  }"
  ==
  "if ($b == 10) {
  	$a = 20;
  }
  "
[0m
-------------------------------------------------------------------------------
[0mTag alias can be registered against tag patterns
[0m[0m  The same tag alias can only be registered once
[0m-------------------------------------------------------------------------------
Tag.tests.cpp:<line number>
...............................................................................

Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( what, ContainsSubstring( "[@zzz]" ) )
[0mwith expansion:
[1;33m  "error: tag alias, '[@zzz]' already registered.
  	First seen at: file:2
  	Redefined at: file:10" contains: "[@zzz]"
[0m
Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( what, ContainsSubstring( "file" ) )
[0mwith expansion:
[1;33m  "error: tag alias, '[@zzz]' already registered.
  	First seen at: file:2
  	Redefined at: file:10" contains: "file"
[0m
Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( what, ContainsSubstring( "2" ) )
[0mwith expansion:
[1;33m  "error: tag alias, '[@zzz]' already registered.
  	First seen at: file:2
  	Redefined at: file:10" contains: "2"
[0m
Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( what, ContainsSubstring( "10" ) )
[0mwith expansion:
[1;33m  "error: tag alias, '[@zzz]' already registered.
  	First seen at: file:2
  	Redefined at: file:10" contains: "10"
[0m
-------------------------------------------------------------------------------
[0mTag alias can be registered against tag patterns
[0m[0m  Tag aliases must be of the form [@name]
[0m-------------------------------------------------------------------------------
Tag.tests.cpp:<line number>
...............................................................................

Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THROWS( registry.add( "[no ampersat]", "", Catch::SourceLineInfo( "file", 3 ) ) )
[0m
Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THROWS( registry.add( "[the @ is not at the start]", "", Catch::SourceLineInfo( "file", 3 ) ) )
[0m
Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THROWS( registry.add( "@no square bracket at start]", "", Catch::SourceLineInfo( "file", 3 ) ) )
[0m
Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THROWS( registry.add( "[@no square bracket at end", "", Catch::SourceLineInfo( "file", 3 ) ) )
[0m
-------------------------------------------------------------------------------
[0mTags with spaces and non-alphanumerical characters are accepted
[0m-------------------------------------------------------------------------------
Tag.tests.cpp:<line number>
...............................................................................

Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.tags.size() == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( testCase.tags, VectorContains( Tag( "tag with spaces" ) ) && VectorContains( Tag( "I said \"good day\" sir!"_catch_sr ) ) )
[0mwith expansion:
[1;33m  { {?}, {?} } ( Contains: {?} and Contains: {?} )
[0m
-------------------------------------------------------------------------------
[0mTemplate test case method with test types specified inside std::tuple - MyTypes
- 0
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture<TestType>::m_a == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mTemplate test case method with test types specified inside std::tuple - MyTypes
- 1
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture<TestType>::m_a == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mTemplate test case method with test types specified inside std::tuple - MyTypes
- 2
[0m-------------------------------------------------------------------------------
Class.tests.cpp:<line number>
...............................................................................

Class.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Template_Fixture<TestType>::m_a == 1 )
[0mwith expansion:
[1;33m  1.0 == 1
[0m
-------------------------------------------------------------------------------
[0mTemplate test case with test types specified inside non-copyable and non-
movable std::tuple - NonCopyableAndNonMovableTypes - 0
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sizeof(TestType) > 0 )
[0mwith expansion:
[1;33m  1 > 0
[0m
-------------------------------------------------------------------------------
[0mTemplate test case with test types specified inside non-copyable and non-
movable std::tuple - NonCopyableAndNonMovableTypes - 1
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sizeof(TestType) > 0 )
[0mwith expansion:
[1;33m  4 > 0
[0m
-------------------------------------------------------------------------------
[0mTemplate test case with test types specified inside non-default-constructible
std::tuple - MyNonDefaultConstructibleTypes - 0
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sizeof(TestType) > 0 )
[0mwith expansion:
[1;33m  1 > 0
[0m
-------------------------------------------------------------------------------
[0mTemplate test case with test types specified inside non-default-constructible
std::tuple - MyNonDefaultConstructibleTypes - 1
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sizeof(TestType) > 0 )
[0mwith expansion:
[1;33m  4 > 0
[0m
-------------------------------------------------------------------------------
[0mTemplate test case with test types specified inside std::tuple - MyTypes - 0
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sizeof(TestType) > 0 )
[0mwith expansion:
[1;33m  4 > 0
[0m
-------------------------------------------------------------------------------
[0mTemplate test case with test types specified inside std::tuple - MyTypes - 1
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sizeof(TestType) > 0 )
[0mwith expansion:
[1;33m  1 > 0
[0m
-------------------------------------------------------------------------------
[0mTemplate test case with test types specified inside std::tuple - MyTypes - 2
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( sizeof(TestType) > 0 )
[0mwith expansion:
[1;33m  4 > 0
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - float
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - float
[0m[0m  resizing bigger changes size and capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 10 )
[0mwith expansion:
[1;33m  10 == 10
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - float
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - float
[0m[0m  resizing smaller changes size but not capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - float
[0m[0m  resizing smaller changes size but not capacity
  We can use the 'swap trick' to reset the capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - float
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - float
[0m[0m  reserving bigger changes capacity but not size
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - float
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - float
[0m[0m  reserving smaller does not change size or capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - int
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - int
[0m[0m  resizing bigger changes size and capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 10 )
[0mwith expansion:
[1;33m  10 == 10
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - int
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - int
[0m[0m  resizing smaller changes size but not capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - int
[0m[0m  resizing smaller changes size but not capacity
  We can use the 'swap trick' to reset the capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - int
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - int
[0m[0m  reserving bigger changes capacity but not size
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - int
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - int
[0m[0m  reserving smaller does not change size or capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::string
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::string
[0m[0m  resizing bigger changes size and capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 10 )
[0mwith expansion:
[1;33m  10 == 10
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::string
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::string
[0m[0m  resizing smaller changes size but not capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::string
[0m[0m  resizing smaller changes size but not capacity
  We can use the 'swap trick' to reset the capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::string
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::string
[0m[0m  reserving bigger changes capacity but not size
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::string
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::string
[0m[0m  reserving smaller does not change size or capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::tuple<int,float>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::tuple<int,float>
[0m[0m  resizing bigger changes size and capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 10 )
[0mwith expansion:
[1;33m  10 == 10
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::tuple<int,float>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::tuple<int,float>
[0m[0m  resizing smaller changes size but not capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::tuple<int,float>
[0m[0m  resizing smaller changes size but not capacity
  We can use the 'swap trick' to reset the capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::tuple<int,float>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::tuple<int,float>
[0m[0m  reserving bigger changes capacity but not size
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::tuple<int,float>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTest: vectors can be sized and resized - std::tuple<int,float>
[0m[0m  reserving smaller does not change size or capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  6 == 6
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  6 >= 6
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
[0m[0m  resizing bigger changes size and capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 2 * V )
[0mwith expansion:
[1;33m  12 == 12
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 2 * V )
[0mwith expansion:
[1;33m  12 >= 12
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  6 == 6
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  6 >= 6
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
[0m[0m  resizing smaller changes size but not capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  6 >= 6
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
[0m[0m  resizing smaller changes size but not capacity
  We can use the 'swap trick' to reset the capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  6 == 6
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  6 >= 6
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
[0m[0m  reserving bigger changes capacity but not size
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  6 == 6
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 2 * V )
[0mwith expansion:
[1;33m  12 >= 12
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  6 == 6
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  6 >= 6
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
[0m[0m  reserving smaller does not change size or capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  6 == 6
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  6 >= 6
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - float,4
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  4 == 4
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  4 >= 4
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - float,4
[0m[0m  resizing bigger changes size and capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 2 * V )
[0mwith expansion:
[1;33m  8 == 8
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 2 * V )
[0mwith expansion:
[1;33m  8 >= 8
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - float,4
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  4 == 4
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  4 >= 4
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - float,4
[0m[0m  resizing smaller changes size but not capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  4 >= 4
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - float,4
[0m[0m  resizing smaller changes size but not capacity
  We can use the 'swap trick' to reset the capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - float,4
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  4 == 4
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  4 >= 4
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - float,4
[0m[0m  reserving bigger changes capacity but not size
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  4 == 4
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 2 * V )
[0mwith expansion:
[1;33m  8 >= 8
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - float,4
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  4 == 4
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  4 >= 4
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - float,4
[0m[0m  reserving smaller does not change size or capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  4 == 4
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  4 >= 4
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - int,5
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - int,5
[0m[0m  resizing bigger changes size and capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 2 * V )
[0mwith expansion:
[1;33m  10 == 10
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 2 * V )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - int,5
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - int,5
[0m[0m  resizing smaller changes size but not capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - int,5
[0m[0m  resizing smaller changes size but not capacity
  We can use the 'swap trick' to reset the capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - int,5
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - int,5
[0m[0m  reserving bigger changes capacity but not size
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 2 * V )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - int,5
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - int,5
[0m[0m  reserving smaller does not change size or capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - std::string,15
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  15 == 15
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  15 >= 15
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - std::string,15
[0m[0m  resizing bigger changes size and capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 2 * V )
[0mwith expansion:
[1;33m  30 == 30
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 2 * V )
[0mwith expansion:
[1;33m  30 >= 30
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - std::string,15
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  15 == 15
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  15 >= 15
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - std::string,15
[0m[0m  resizing smaller changes size but not capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  15 >= 15
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - std::string,15
[0m[0m  resizing smaller changes size but not capacity
  We can use the 'swap trick' to reset the capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - std::string,15
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  15 == 15
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  15 >= 15
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - std::string,15
[0m[0m  reserving bigger changes capacity but not size
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  15 == 15
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 2 * V )
[0mwith expansion:
[1;33m  30 >= 30
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - std::string,15
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  15 == 15
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  15 >= 15
[0m
-------------------------------------------------------------------------------
[0mTemplateTestSig: vectors can be sized and resized - std::string,15
[0m[0m  reserving smaller does not change size or capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == V )
[0mwith expansion:
[1;33m  15 == 15
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= V )
[0mwith expansion:
[1;33m  15 >= 15
[0m
-------------------------------------------------------------------------------
[0mTest case with identical tags keeps just one
[0m-------------------------------------------------------------------------------
Tag.tests.cpp:<line number>
...............................................................................

Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.tags.size() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.tags[0] == Tag( "tag1" ) )
[0mwith expansion:
[1;33m  {?} == {?}
[0m
-------------------------------------------------------------------------------
[0mTest case with one argument
[0m-------------------------------------------------------------------------------
VariadicMacros.tests.cpp:<line number>
...............................................................................

VariadicMacros.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  no assertions

-------------------------------------------------------------------------------
[0mTest enum bit values
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( 0x<hex digits> == bit30and31 )
[0mwith expansion:
[1;33m  3221225472 (0x<hex digits>) == 3221225472
[0m
-------------------------------------------------------------------------------
[0mTest with special, characters "in name
[0m-------------------------------------------------------------------------------
CmdLine.tests.cpp:<line number>
...............................................................................

CmdLine.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0mTesting checked-if
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECKED_IF( true )
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
Misc.tests.cpp:<line number>: [0m[0;32mFAILED - but was ok:
[0m[0;36m  CHECKED_IF( false )
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECKED_ELSE( true )
[0m
Misc.tests.cpp:<line number>: [0m[0;32mFAILED - but was ok:
[0m[0;36m  CHECKED_ELSE( false )
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0mTesting checked-if 2
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECKED_IF( true )
[0m
Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m
-------------------------------------------------------------------------------
[0mTesting checked-if 3
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mFAILED - but was ok:
[0m[0;36m  CHECKED_ELSE( false )
[0m
Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m
-------------------------------------------------------------------------------
[0mThe NO_FAIL macro reports a failure but does not fail the test
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[0;32mFAILED - but was ok:
[0m[0;36m  CHECK_NOFAIL( 1 == 2 )
[0m
[1;31m
No assertions in test case 'The NO_FAIL macro reports a failure but does not fail the test'

[0m-------------------------------------------------------------------------------
[0mThe default listing implementation write to provided stream
[0m[0m  Listing tags
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring("[fakeTag]"s) )
[0mwith expansion:
[1;33m  "All available tags:
     1  [fakeTag]
  1 tag

" contains: "[fakeTag]"
[0m
-------------------------------------------------------------------------------
[0mThe default listing implementation write to provided stream
[0m[0m  Listing reporters
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring( "fake reporter"s ) && ContainsSubstring( "fake description"s ) )
[0mwith expansion:
[1;33m  "Available reporters:
    fake reporter:  fake description

" ( contains: "fake reporter" and contains: "fake description" )
[0m
-------------------------------------------------------------------------------
[0mThe default listing implementation write to provided stream
[0m[0m  Listing tests
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s ) )
[0mwith expansion:
[1;33m  "All available test cases:
    fake test name
        [fakeTestTag]
  1 test case

" ( contains: "fake test name" and contains: "fakeTestTag" )
[0m
-------------------------------------------------------------------------------
[0mThe default listing implementation write to provided stream
[0m[0m  Listing listeners
[0m-------------------------------------------------------------------------------
Reporters.tests.cpp:<line number>
...............................................................................

Reporters.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( listingString, ContainsSubstring( "fakeListener"s ) && ContainsSubstring( "fake description"s ) )
[0mwith expansion:
[1;33m  "Registered listeners:
    fakeListener:  fake description

" ( contains: "fakeListener" and contains: "fake description" )
[0m
-------------------------------------------------------------------------------
[0mThis test 'should' fail but doesn't
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  oops!

-------------------------------------------------------------------------------
[0mThrown string literals are translated
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mdue to unexpected exception with message:
  For some reason someone is throwing a string literal!

-------------------------------------------------------------------------------
[0mTracker
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  successfully close one section
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isSuccessfullyCompleted() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isComplete() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ctx.completedCycle() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isSuccessfullyCompleted() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  fail one section
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isComplete() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isSuccessfullyCompleted() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isComplete() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ctx.completedCycle() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isSuccessfullyCompleted() == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  fail one section
  re-enter after failed section
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase2.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1b.isOpen() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ctx.completedCycle() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isComplete() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isSuccessfullyCompleted() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  fail one section
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isComplete() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isSuccessfullyCompleted() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isComplete() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ctx.completedCycle() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isSuccessfullyCompleted() == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  fail one section
  re-enter after failed section and find next section
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase2.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1b.isOpen() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s2.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ctx.completedCycle() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isComplete() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isSuccessfullyCompleted() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  successfully close one section, then find another
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s2.isOpen() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isComplete() == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  successfully close one section, then find another
  Re-enter - skips S1 and enters S2
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase2.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1b.isOpen() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s2b.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ctx.completedCycle() == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  successfully close one section, then find another
  Re-enter - skips S1 and enters S2
  Successfully close S2
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ctx.completedCycle() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s2b.isSuccessfullyCompleted() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase2.isComplete() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase2.isSuccessfullyCompleted() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  successfully close one section, then find another
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s2.isOpen() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isComplete() == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  successfully close one section, then find another
  Re-enter - skips S1 and enters S2
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase2.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1b.isOpen() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s2b.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ctx.completedCycle() == false )
[0mwith expansion:
[1;33m  false == false
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  successfully close one section, then find another
  Re-enter - skips S1 and enters S2
  fail S2
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ctx.completedCycle() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s2b.isComplete() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s2b.isSuccessfullyCompleted() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase2.isSuccessfullyCompleted() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase3.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1c.isOpen() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s2c.isOpen() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase3.isSuccessfullyCompleted() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTracker
[0m[0m  open a nested section
[0m-------------------------------------------------------------------------------
PartTracker.tests.cpp:<line number>
...............................................................................

PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s2.isOpen() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s2.isComplete() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isComplete() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s1.isComplete() )
[0mwith expansion:
[1;33m  true
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isComplete() == false )
[0mwith expansion:
[1;33m  false == false
[0m
PartTracker.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCase.isComplete() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mTrim strings
[0m-------------------------------------------------------------------------------
StringManip.tests.cpp:<line number>
...............................................................................

StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( trim(std::string(no_whitespace)) == no_whitespace )
[0mwith expansion:
[1;33m  "There is no extra whitespace here"
  ==
  "There is no extra whitespace here"
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( trim(std::string(leading_whitespace)) == no_whitespace )
[0mwith expansion:
[1;33m  "There is no extra whitespace here"
  ==
  "There is no extra whitespace here"
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( trim(std::string(trailing_whitespace)) == no_whitespace )
[0mwith expansion:
[1;33m  "There is no extra whitespace here"
  ==
  "There is no extra whitespace here"
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( trim(std::string(whitespace_at_both_ends)) == no_whitespace )
[0mwith expansion:
[1;33m  "There is no extra whitespace here"
  ==
  "There is no extra whitespace here"
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( trim(StringRef(no_whitespace)) == StringRef(no_whitespace) )
[0mwith expansion:
[1;33m  There is no extra whitespace here
  ==
  There is no extra whitespace here
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( trim(StringRef(leading_whitespace)) == StringRef(no_whitespace) )
[0mwith expansion:
[1;33m  There is no extra whitespace here
  ==
  There is no extra whitespace here
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( trim(StringRef(trailing_whitespace)) == StringRef(no_whitespace) )
[0mwith expansion:
[1;33m  There is no extra whitespace here
  ==
  There is no extra whitespace here
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( trim(StringRef(whitespace_at_both_ends)) == StringRef(no_whitespace) )
[0mwith expansion:
[1;33m  There is no extra whitespace here
  ==
  There is no extra whitespace here
[0m
-------------------------------------------------------------------------------
[0mUnexpected exceptions can be translated
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mdue to unexpected exception with message:
  3.14

-------------------------------------------------------------------------------
[0mUpcasting special member functions
[0m[0m  Move constructor
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( bptr->i == 3 )
[0mwith expansion:
[1;33m  3 == 3
[0m
-------------------------------------------------------------------------------
[0mUpcasting special member functions
[0m[0m  move assignment
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( bptr->i == 3 )
[0mwith expansion:
[1;33m  3 == 3
[0m
-------------------------------------------------------------------------------
[0mUsage of AllMatch range matcher
[0m[0m  Basic usage
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( data, AllMatch(SizeIs(5)) )
[0mwith expansion:
[1;33m  { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0
  }, { 1, 0, 0, -1, 5 } } all match has size == 5
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( data, !AllMatch(Contains(0) && Contains(1)) )
[0mwith expansion:
[1;33m  { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0
  }, { 1, 0, 0, -1, 5 } } not all match ( contains element 0 and contains
  element 1 )
[0m
-------------------------------------------------------------------------------
[0mUsage of AllMatch range matcher
[0m[0m  Type requires ADL found begin and end
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( needs_adl, AllMatch( Predicate<int>( []( int elem ) { return elem < 6; } ) ) )
[0mwith expansion:
[1;33m  { 1, 2, 3, 4, 5 } all match matches undescribed predicate
[0m
-------------------------------------------------------------------------------
[0mUsage of AllMatch range matcher
[0m[0m  Shortcircuiting
  All are read
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( mocked, allMatch )
[0mwith expansion:
[1;33m  { 1, 2, 3, 4, 5 } all match matches undescribed predicate
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[0] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[1] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[2] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[3] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[4] )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mUsage of AllMatch range matcher
[0m[0m  Shortcircuiting
  Short-circuited
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( mocked, !allMatch )
[0mwith expansion:
[1;33m  { 1, 2, 3, 4, 5 } not all match matches undescribed predicate
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[0] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[1] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[2] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( mocked.m_derefed[3] )
[0mwith expansion:
[1;33m  !false
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( mocked.m_derefed[4] )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mUsage of AnyMatch range matcher
[0m[0m  Basic usage
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( data, AnyMatch(SizeIs(5)) )
[0mwith expansion:
[1;33m  { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0
  }, { 1, 0, 0, -1, 5 } } any match has size == 5
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( data, !AnyMatch(Contains(0) && Contains(10)) )
[0mwith expansion:
[1;33m  { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0
  }, { 1, 0, 0, -1, 5 } } not any match ( contains element 0 and contains
  element 10 )
[0m
-------------------------------------------------------------------------------
[0mUsage of AnyMatch range matcher
[0m[0m  Type requires ADL found begin and end
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( needs_adl, AnyMatch( Predicate<int>( []( int elem ) { return elem < 3; } ) ) )
[0mwith expansion:
[1;33m  { 1, 2, 3, 4, 5 } any match matches undescribed predicate
[0m
-------------------------------------------------------------------------------
[0mUsage of AnyMatch range matcher
[0m[0m  Shortcircuiting
  All are read
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( mocked, !anyMatch )
[0mwith expansion:
[1;33m  { 1, 2, 3, 4, 5 } not any match matches undescribed predicate
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[0] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[1] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[2] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[3] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[4] )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mUsage of AnyMatch range matcher
[0m[0m  Shortcircuiting
  Short-circuited
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( mocked, anyMatch )
[0mwith expansion:
[1;33m  { 1, 2, 3, 4, 5 } any match matches undescribed predicate
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[0] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( mocked.m_derefed[1] )
[0mwith expansion:
[1;33m  !false
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( mocked.m_derefed[2] )
[0mwith expansion:
[1;33m  !false
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( mocked.m_derefed[3] )
[0mwith expansion:
[1;33m  !false
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( mocked.m_derefed[4] )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mUsage of NoneMatch range matcher
[0m[0m  Basic usage
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( data, NoneMatch(SizeIs(6)) )
[0mwith expansion:
[1;33m  { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0
  }, { 1, 0, 0, -1, 5 } } none match has size == 6
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( data, !NoneMatch(Contains(0) && Contains(1)) )
[0mwith expansion:
[1;33m  { { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0
  }, { 1, 0, 0, -1, 5 } } not none match ( contains element 0 and contains
  element 1 )
[0m
-------------------------------------------------------------------------------
[0mUsage of NoneMatch range matcher
[0m[0m  Type requires ADL found begin and end
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( needs_adl, NoneMatch( Predicate<int>( []( int elem ) { return elem > 6; } ) ) )
[0mwith expansion:
[1;33m  { 1, 2, 3, 4, 5 } none match matches undescribed predicate
[0m
-------------------------------------------------------------------------------
[0mUsage of NoneMatch range matcher
[0m[0m  Shortcircuiting
  All are read
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( mocked, noneMatch )
[0mwith expansion:
[1;33m  { 1, 2, 3, 4, 5 } none match matches undescribed predicate
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[0] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[1] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[2] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[3] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[4] )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mUsage of NoneMatch range matcher
[0m[0m  Shortcircuiting
  Short-circuited
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( mocked, !noneMatch )
[0mwith expansion:
[1;33m  { 1, 2, 3, 4, 5 } not none match matches undescribed predicate
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( mocked.m_derefed[0] )
[0mwith expansion:
[1;33m  true
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( mocked.m_derefed[1] )
[0mwith expansion:
[1;33m  !false
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( mocked.m_derefed[2] )
[0mwith expansion:
[1;33m  !false
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( mocked.m_derefed[3] )
[0mwith expansion:
[1;33m  !false
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( mocked.m_derefed[4] )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mUsage of the SizeIs range matcher
[0m[0m  Some with stdlib containers
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( empty_vec, SizeIs(0) )
[0mwith expansion:
[1;33m  {  } has size == 0
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( empty_vec, !SizeIs(2) )
[0mwith expansion:
[1;33m  {  } not has size == 2
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( empty_vec, SizeIs(Lt(2)) )
[0mwith expansion:
[1;33m  {  } size matches is less than 2
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( arr, SizeIs(2) )
[0mwith expansion:
[1;33m  { 0, 0 } has size == 2
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( arr, SizeIs( Lt(3)) )
[0mwith expansion:
[1;33m  { 0, 0 } size matches is less than 3
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( arr, !SizeIs(!Lt(3)) )
[0mwith expansion:
[1;33m  { 0, 0 } not size matches not is less than 3
[0m
MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( map, SizeIs(3) )
[0mwith expansion:
[1;33m  { {?}, {?}, {?} } has size == 3
[0m
-------------------------------------------------------------------------------
[0mUsage of the SizeIs range matcher
[0m[0m  Type requires ADL found size free function
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( unrelated::ADL_size{}, SizeIs(12) )
[0mwith expansion:
[1;33m  {?} has size == 12
[0m
-------------------------------------------------------------------------------
[0mUsage of the SizeIs range matcher
[0m[0m  Type has size member
[0m-------------------------------------------------------------------------------
MatchersRanges.tests.cpp:<line number>
...............................................................................

MatchersRanges.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( has_size{}, SizeIs(13) )
[0mwith expansion:
[1;33m  {?} has size == 13
[0m
-------------------------------------------------------------------------------
[0mUse a custom approx
[0m-------------------------------------------------------------------------------
Approx.tests.cpp:<line number>
...............................................................................

Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d == approx( 1.23 ) )
[0mwith expansion:
[1;33m  1.23 == Approx( 1.23 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d == approx( 1.22 ) )
[0mwith expansion:
[1;33m  1.23 == Approx( 1.22 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d == approx( 1.24 ) )
[0mwith expansion:
[1;33m  1.23 == Approx( 1.24 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( d != approx( 1.25 ) )
[0mwith expansion:
[1;33m  1.23 != Approx( 1.25 )
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( approx( d ) == 1.23 )
[0mwith expansion:
[1;33m  Approx( 1.23 ) == 1.23
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( approx( d ) == 1.22 )
[0mwith expansion:
[1;33m  Approx( 1.23 ) == 1.22
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( approx( d ) == 1.24 )
[0mwith expansion:
[1;33m  Approx( 1.23 ) == 1.24
[0m
Approx.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( approx( d ) != 1.25 )
[0mwith expansion:
[1;33m  Approx( 1.23 ) != 1.25
[0m
-------------------------------------------------------------------------------
[0mVariadic macros
[0m[0m  Section with one argument
[0m-------------------------------------------------------------------------------
VariadicMacros.tests.cpp:<line number>
...............................................................................

VariadicMacros.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  no assertions

-------------------------------------------------------------------------------
[0mVector Approx matcher
[0m[0m  Empty vector is roughly equal to an empty vector
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( empty, Approx( empty ) )
[0mwith expansion:
[1;33m  {  } is approx: {  }
[0m
-------------------------------------------------------------------------------
[0mVector Approx matcher
[0m[0m  Vectors with elements
  A vector is approx equal to itself
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( v1, Approx( v1 ) )
[0mwith expansion:
[1;33m  { 1.0, 2.0, 3.0 } is approx: { 1.0, 2.0, 3.0 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( v1, Approx<double>( { 1., 2., 3. } ) )
[0mwith expansion:
[1;33m  { 1.0, 2.0, 3.0 } is approx: { 1.0, 2.0, 3.0 }
[0m
-------------------------------------------------------------------------------
[0mVector Approx matcher
[0m[0m  Vectors with elements
  Different length
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( v1, !Approx( temp ) )
[0mwith expansion:
[1;33m  { 1.0, 2.0, 3.0 } not is approx: { 1.0, 2.0, 3.0, 4.0 }
[0m
-------------------------------------------------------------------------------
[0mVector Approx matcher
[0m[0m  Vectors with elements
  Same length, different elements
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( v1, !Approx( v2 ) )
[0mwith expansion:
[1;33m  { 1.0, 2.0, 3.0 } not is approx: { 1.5, 2.5, 3.5 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( v1, Approx( v2 ).margin( 0.5 ) )
[0mwith expansion:
[1;33m  { 1.0, 2.0, 3.0 } is approx: { 1.5, 2.5, 3.5 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( v1, Approx( v2 ).epsilon( 0.5 ) )
[0mwith expansion:
[1;33m  { 1.0, 2.0, 3.0 } is approx: { 1.5, 2.5, 3.5 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( v1, Approx( v2 ).epsilon( 0.1 ).scale( 500 ) )
[0mwith expansion:
[1;33m  { 1.0, 2.0, 3.0 } is approx: { 1.5, 2.5, 3.5 }
[0m
-------------------------------------------------------------------------------
[0mVector Approx matcher -- failing
[0m[0m  Empty and non empty vectors are not approx equal
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( empty, Approx( t1 ) )
[0mwith expansion:
[1;33m  {  } is approx: { 1.0, 2.0 }
[0m
-------------------------------------------------------------------------------
[0mVector Approx matcher -- failing
[0m[0m  Just different vectors
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( v1, Approx( v2 ) )
[0mwith expansion:
[1;33m  { 2.0, 4.0, 6.0 } is approx: { 1.0, 3.0, 5.0 }
[0m
-------------------------------------------------------------------------------
[0mVector matchers
[0m[0m  Contains (element)
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, VectorContains( 1 ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: 1
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, VectorContains( 2 ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: 2
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v5, ( VectorContains<int, CustomAllocator<int>>( 2 ) ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: 2
[0m
-------------------------------------------------------------------------------
[0mVector matchers
[0m[0m  Contains (vector)
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, Contains( v2 ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: { 1, 2 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, Contains<int>( { 1, 2 } ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: { 1, 2 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v5, ( Contains<int, std::allocator<int>, CustomAllocator<int>>( v2 ) ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: { 1, 2 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, Contains( v2 ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, Contains( empty ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: {  }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( empty, Contains( empty ) )
[0mwith expansion:
[1;33m  {  } Contains: {  }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v5, ( Contains<int, std::allocator<int>, CustomAllocator<int>>( v2 ) ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v5, Contains( v6 ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: { 1, 2 }
[0m
-------------------------------------------------------------------------------
[0mVector matchers
[0m[0m  Contains (element), composed
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, VectorContains( 1 ) && VectorContains( 2 ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } ( Contains: 1 and Contains: 2 )
[0m
-------------------------------------------------------------------------------
[0mVector matchers
[0m[0m  Equals
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, Equals( v ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Equals: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( empty, Equals( empty ) )
[0mwith expansion:
[1;33m  {  } Equals: {  }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, Equals<int>( { 1, 2, 3 } ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Equals: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, Equals( v2 ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Equals: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v5, ( Equals<int, std::allocator<int>, CustomAllocator<int>>( v2 ) ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Equals: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v5, Equals( v6 ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Equals: { 1, 2, 3 }
[0m
-------------------------------------------------------------------------------
[0mVector matchers
[0m[0m  UnorderedEquals
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, UnorderedEquals( v ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } UnorderedEquals: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v, UnorderedEquals<int>( { 3, 2, 1 } ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } UnorderedEquals: { 3, 2, 1 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( empty, UnorderedEquals( empty ) )
[0mwith expansion:
[1;33m  {  } UnorderedEquals: {  }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( permuted, UnorderedEquals( v ) )
[0mwith expansion:
[1;33m  { 1, 3, 2 } UnorderedEquals: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( permuted, UnorderedEquals( v ) )
[0mwith expansion:
[1;33m  { 2, 3, 1 } UnorderedEquals: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v5, ( UnorderedEquals<int, std::allocator<int>, CustomAllocator<int>>( permuted ) ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } UnorderedEquals: { 2, 3, 1 }
[0m
Matchers.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( v5_permuted, UnorderedEquals( v5 ) )
[0mwith expansion:
[1;33m  { 1, 3, 2 } UnorderedEquals: { 1, 2, 3 }
[0m
-------------------------------------------------------------------------------
[0mVector matchers that fail
[0m[0m  Contains (element)
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( v, VectorContains( -1 ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: -1
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( empty, VectorContains( 1 ) )
[0mwith expansion:
[1;33m  {  } Contains: 1
[0m
-------------------------------------------------------------------------------
[0mVector matchers that fail
[0m[0m  Contains (vector)
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( empty, Contains( v ) )
[0mwith expansion:
[1;33m  {  } Contains: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( v, Contains( v2 ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Contains: { 1, 2, 4 }
[0m
-------------------------------------------------------------------------------
[0mVector matchers that fail
[0m[0m  Equals
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( v, Equals( v2 ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Equals: { 1, 2 }
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( v2, Equals( v ) )
[0mwith expansion:
[1;33m  { 1, 2 } Equals: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( empty, Equals( v ) )
[0mwith expansion:
[1;33m  {  } Equals: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( v, Equals( empty ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } Equals: {  }
[0m
-------------------------------------------------------------------------------
[0mVector matchers that fail
[0m[0m  UnorderedEquals
[0m-------------------------------------------------------------------------------
Matchers.tests.cpp:<line number>
...............................................................................

Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( v, UnorderedEquals( empty ) )
[0mwith expansion:
[1;33m  { 1, 2, 3 } UnorderedEquals: {  }
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( empty, UnorderedEquals( v ) )
[0mwith expansion:
[1;33m  {  } UnorderedEquals: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( permuted, UnorderedEquals( v ) )
[0mwith expansion:
[1;33m  { 1, 3 } UnorderedEquals: { 1, 2, 3 }
[0m
Matchers.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK_THAT( permuted, UnorderedEquals( v ) )
[0mwith expansion:
[1;33m  { 3, 1 } UnorderedEquals: { 1, 2, 3 }
[0m
-------------------------------------------------------------------------------
[0mWhen checked exceptions are thrown they can be expected or unexpected
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS_AS( thisThrows(), std::domain_error )
[0m
Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( thisDoesntThrow() )
[0m
Exception.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS( thisThrows() )
[0m
-------------------------------------------------------------------------------
[0mWhen unchecked exceptions are thrown directly they are always failures
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mdue to unexpected exception with message:
  unexpected exception

-------------------------------------------------------------------------------
[0mWhen unchecked exceptions are thrown during a CHECK the test should continue
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( thisThrows() == 0 )
[0mdue to unexpected exception with message:
  expected exception

-------------------------------------------------------------------------------
[0mWhen unchecked exceptions are thrown during a REQUIRE the test should abort
fail
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( thisThrows() == 0 )
[0mdue to unexpected exception with message:
  expected exception

-------------------------------------------------------------------------------
[0mWhen unchecked exceptions are thrown from functions they are always failures
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( thisThrows() == 0 )
[0mdue to unexpected exception with message:
  expected exception

-------------------------------------------------------------------------------
[0mWhen unchecked exceptions are thrown from sections they are always failures
[0m[0m  section name
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mdue to unexpected exception with message:
  unexpected exception

-------------------------------------------------------------------------------
[0mWhen unchecked exceptions are thrown, but caught, they do not affect the test
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

[0m[1;31m
No assertions in test case 'When unchecked exceptions are thrown, but caught, they do not affect the test'

[0m-------------------------------------------------------------------------------
[0mX/level/0/a
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0mX/level/0/b
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0mX/level/1/a
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0mX/level/1/b
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0mXmlEncode
[0m[0m  normal string
[0m-------------------------------------------------------------------------------
Xml.tests.cpp:<line number>
...............................................................................

Xml.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( encode( "normal string" ) == "normal string" )
[0mwith expansion:
[1;33m  "normal string" == "normal string"
[0m
-------------------------------------------------------------------------------
[0mXmlEncode
[0m[0m  empty string
[0m-------------------------------------------------------------------------------
Xml.tests.cpp:<line number>
...............................................................................

Xml.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( encode( "" ) == "" )
[0mwith expansion:
[1;33m  "" == ""
[0m
-------------------------------------------------------------------------------
[0mXmlEncode
[0m[0m  string with ampersand
[0m-------------------------------------------------------------------------------
Xml.tests.cpp:<line number>
...............................................................................

Xml.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( encode( "smith & jones" ) == "smith &amp; jones" )
[0mwith expansion:
[1;33m  "smith &amp; jones" == "smith &amp; jones"
[0m
-------------------------------------------------------------------------------
[0mXmlEncode
[0m[0m  string with less-than
[0m-------------------------------------------------------------------------------
Xml.tests.cpp:<line number>
...............................................................................

Xml.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( encode( "smith < jones" ) == "smith &lt; jones" )
[0mwith expansion:
[1;33m  "smith &lt; jones" == "smith &lt; jones"
[0m
-------------------------------------------------------------------------------
[0mXmlEncode
[0m[0m  string with greater-than
[0m-------------------------------------------------------------------------------
Xml.tests.cpp:<line number>
...............................................................................

Xml.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( encode( "smith > jones" ) == "smith > jones" )
[0mwith expansion:
[1;33m  "smith > jones" == "smith > jones"
[0m
Xml.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( encode( "smith ]]> jones" ) == "smith ]]&gt; jones" )
[0mwith expansion:
[1;33m  "smith ]]&gt; jones"
  ==
  "smith ]]&gt; jones"
[0m
-------------------------------------------------------------------------------
[0mXmlEncode
[0m[0m  string with quotes
[0m-------------------------------------------------------------------------------
Xml.tests.cpp:<line number>
...............................................................................

Xml.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( encode( stringWithQuotes ) == stringWithQuotes )
[0mwith expansion:
[1;33m  "don't "quote" me on that"
  ==
  "don't "quote" me on that"
[0m
Xml.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( encode( stringWithQuotes, Catch::XmlEncode::ForAttributes ) == "don't &quot;quote&quot; me on that" )
[0mwith expansion:
[1;33m  "don't &quot;quote&quot; me on that"
  ==
  "don't &quot;quote&quot; me on that"
[0m
-------------------------------------------------------------------------------
[0mXmlEncode
[0m[0m  string with control char (1)
[0m-------------------------------------------------------------------------------
Xml.tests.cpp:<line number>
...............................................................................

Xml.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( encode( "[\x01]" ) == "[\\x01]" )
[0mwith expansion:
[1;33m  "[\x01]" == "[\x01]"
[0m
-------------------------------------------------------------------------------
[0mXmlEncode
[0m[0m  string with control char (x7F)
[0m-------------------------------------------------------------------------------
Xml.tests.cpp:<line number>
...............................................................................

Xml.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( encode( "[\x7F]" ) == "[\\x7F]" )
[0mwith expansion:
[1;33m  "[\x7F]" == "[\x7F]"
[0m
-------------------------------------------------------------------------------
[0mXmlWriter writes boolean attributes as true/false
[0m-------------------------------------------------------------------------------
Xml.tests.cpp:<line number>
...............................................................................

Xml.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( stream.str(), ContainsSubstring(R"(attr1="true")") && ContainsSubstring(R"(attr2="false")") )
[0mwith expansion:
[1;33m  "<?xml version="1.0" encoding="UTF-8"?>
  <Element1 attr1="true" attr2="false"/>
  " ( contains: "attr1="true"" and contains: "attr2="false"" )
[0m
-------------------------------------------------------------------------------
[0manalyse no analysis
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.mean.point.count() == 23 )
[0mwith expansion:
[1;33m  23.0 == 23
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.mean.lower_bound.count() == 23 )
[0mwith expansion:
[1;33m  23.0 == 23
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.mean.upper_bound.count() == 23 )
[0mwith expansion:
[1;33m  23.0 == 23
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.standard_deviation.point.count() == 0 )
[0mwith expansion:
[1;33m  0.0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.standard_deviation.lower_bound.count() == 0 )
[0mwith expansion:
[1;33m  0.0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.standard_deviation.upper_bound.count() == 0 )
[0mwith expansion:
[1;33m  0.0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.outliers.total() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.outliers.low_mild == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.outliers.low_severe == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.outliers.high_mild == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.outliers.high_severe == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.outliers.samples_seen == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( analysis.outlier_variance == 0 )
[0mwith expansion:
[1;33m  0.0 == 0
[0m
-------------------------------------------------------------------------------
[0marray<int, N> -> toString
[0m-------------------------------------------------------------------------------
ToStringVector.tests.cpp:<line number>
...............................................................................

ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify( empty ) == "{  }" )
[0mwith expansion:
[1;33m  "{  }" == "{  }"
[0m
ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify( oneValue ) == "{ 42 }" )
[0mwith expansion:
[1;33m  "{ 42 }" == "{ 42 }"
[0m
ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify( twoValues ) == "{ 42, 250 }" )
[0mwith expansion:
[1;33m  "{ 42, 250 }" == "{ 42, 250 }"
[0m
-------------------------------------------------------------------------------
[0mbenchmark function call
[0m[0m  without chronometer
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( model.started == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( model.finished == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( model.started == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( model.finished == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( called == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mbenchmark function call
[0m[0m  with chronometer
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( model.started == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( model.finished == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( model.started == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( model.finished == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( called == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mboolean member
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( obj.prop != 0 )
[0mwith expansion:
[1;33m  0x<hex digits> != 0
[0m
-------------------------------------------------------------------------------
[0mcheckedElse
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECKED_ELSE( flag )
[0mwith expansion:
[1;33m  true
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCheckedElse( true ) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mcheckedElse, failing
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mFAILED - but was ok:
[0m[0;36m  CHECKED_ELSE( flag )
[0mwith expansion:
[1;33m  false
[0m
Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( testCheckedElse( false ) )
[0mwith expansion:
[1;33m  false
[0m
-------------------------------------------------------------------------------
[0mcheckedIf
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECKED_IF( flag )
[0mwith expansion:
[1;33m  true
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testCheckedIf( true ) )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mcheckedIf, failing
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mFAILED - but was ok:
[0m[0;36m  CHECKED_IF( flag )
[0mwith expansion:
[1;33m  false
[0m
Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( testCheckedIf( false ) )
[0mwith expansion:
[1;33m  false
[0m
-------------------------------------------------------------------------------
[0mclassify_outliers
[0m[0m  none
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.samples_seen == static_cast<int>(x.size()) )
[0mwith expansion:
[1;33m  6 == 6
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_severe == los )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_mild == lom )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_mild == him )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_severe == his )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.total() == los + lom + him + his )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mclassify_outliers
[0m[0m  low severe
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.samples_seen == static_cast<int>(x.size()) )
[0mwith expansion:
[1;33m  6 == 6
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_severe == los )
[0mwith expansion:
[1;33m  1 == 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_mild == lom )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_mild == him )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_severe == his )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.total() == los + lom + him + his )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mclassify_outliers
[0m[0m  low mild
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.samples_seen == static_cast<int>(x.size()) )
[0mwith expansion:
[1;33m  6 == 6
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_severe == los )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_mild == lom )
[0mwith expansion:
[1;33m  1 == 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_mild == him )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_severe == his )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.total() == los + lom + him + his )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mclassify_outliers
[0m[0m  high mild
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.samples_seen == static_cast<int>(x.size()) )
[0mwith expansion:
[1;33m  6 == 6
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_severe == los )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_mild == lom )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_mild == him )
[0mwith expansion:
[1;33m  1 == 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_severe == his )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.total() == los + lom + him + his )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mclassify_outliers
[0m[0m  high severe
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.samples_seen == static_cast<int>(x.size()) )
[0mwith expansion:
[1;33m  6 == 6
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_severe == los )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_mild == lom )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_mild == him )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_severe == his )
[0mwith expansion:
[1;33m  1 == 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.total() == los + lom + him + his )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mclassify_outliers
[0m[0m  mixed
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.samples_seen == static_cast<int>(x.size()) )
[0mwith expansion:
[1;33m  6 == 6
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_severe == los )
[0mwith expansion:
[1;33m  1 == 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.low_mild == lom )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_mild == him )
[0mwith expansion:
[1;33m  1 == 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.high_severe == his )
[0mwith expansion:
[1;33m  0 == 0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( o.total() == los + lom + him + his )
[0mwith expansion:
[1;33m  2 == 2
[0m
-------------------------------------------------------------------------------
[0mcomparisons between const int variables
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( unsigned_char_var == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( unsigned_short_var == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( unsigned_int_var == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( unsigned_long_var == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mcomparisons between int variables
[0m-------------------------------------------------------------------------------
Condition.tests.cpp:<line number>
...............................................................................

Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( long_var == unsigned_char_var )
[0mwith expansion:
[1;33m  1 == 1
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( long_var == unsigned_short_var )
[0mwith expansion:
[1;33m  1 == 1
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( long_var == unsigned_int_var )
[0mwith expansion:
[1;33m  1 == 1
[0m
Condition.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( long_var == unsigned_long_var )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mconvertToBits
[0m-------------------------------------------------------------------------------
FloatingPoint.tests.cpp:<line number>
...............................................................................

FloatingPoint.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( convertToBits( 0.f ) == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
FloatingPoint.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( convertToBits( -0.f ) == ( 1ULL << 31 ) )
[0mwith expansion:
[1;33m  2147483648 (0x<hex digits>)
  ==
  2147483648 (0x<hex digits>)
[0m
FloatingPoint.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( convertToBits( 0. ) == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
FloatingPoint.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( convertToBits( -0. ) == ( 1ULL << 63 ) )
[0mwith expansion:
[1;33m  9223372036854775808 (0x<hex digits>)
  ==
  9223372036854775808 (0x<hex digits>)
[0m
FloatingPoint.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( convertToBits( std::numeric_limits<float>::denorm_min() ) == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
FloatingPoint.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( convertToBits( std::numeric_limits<double>::denorm_min() ) == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mempty tags are not allowed
[0m-------------------------------------------------------------------------------
Tag.tests.cpp:<line number>
...............................................................................

Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS( Catch::TestCaseInfo("", { "test with an empty tag", "[]" }, dummySourceLineInfo) )
[0m
-------------------------------------------------------------------------------
[0merfc_inv
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( erfc_inv(1.103560) == Approx(-0.09203687623843015) )
[0mwith expansion:
[1;33m  -0.0920368762 == Approx( -0.0920368762 )
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( erfc_inv(1.067400) == Approx(-0.05980291115763361) )
[0mwith expansion:
[1;33m  -0.0598029112 == Approx( -0.0598029112 )
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( erfc_inv(0.050000) == Approx(1.38590382434967796) )
[0mwith expansion:
[1;33m  1.3859038243 == Approx( 1.3859038243 )
[0m
-------------------------------------------------------------------------------
[0mestimate_clock_resolution
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res.mean.count() == rate )
[0mwith expansion:
[1;33m  2000.0 == 2000 (0x<hex digits>)
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res.outliers.total() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0meven more nested SECTION tests
[0m[0m  c
  d (leaf)
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0meven more nested SECTION tests
[0m[0m  c
  e (leaf)
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0meven more nested SECTION tests
[0m[0m  f (leaf)
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0mfirst tag
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

[0m[1;31m
No assertions in test case 'first tag'

[0mloose text artifact
-------------------------------------------------------------------------------
[0mhas printf
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

[0m[1;31m
No assertions in test case 'has printf'

[0m-------------------------------------------------------------------------------
[0mis_unary_function
[0m-------------------------------------------------------------------------------
Clara.tests.cpp:<line number>
...............................................................................

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  Catch::Clara::Detail::is_unary_function<decltype(unary1)>::value

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  Catch::Clara::Detail::is_unary_function<decltype(unary2)>::value

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  Catch::Clara::Detail::is_unary_function<decltype(unary3)>::value

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  Catch::Clara::Detail::is_unary_function<decltype(unary4)>::value

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  Catch::Clara::Detail::is_unary_function<decltype(unary5)>::value

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  Catch::Clara::Detail::is_unary_function<decltype(unary6)>::value

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  !(Catch::Clara::Detail::is_unary_function<decltype(binary1)>::value)

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  !(Catch::Clara::Detail::is_unary_function<decltype(binary2)>::value)

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  !(Catch::Clara::Detail::is_unary_function<decltype(nullary1)>::value)

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  !(Catch::Clara::Detail::is_unary_function<decltype(nullary2)>::value)

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  !(Catch::Clara::Detail::is_unary_function<int>::value)

Clara.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  !(Catch::Clara::Detail::is_unary_function<std::string const&>::value)

-------------------------------------------------------------------------------
[0mjust failure
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mexplicitly with message:
  Previous info should not be seen

-------------------------------------------------------------------------------
[0mjust failure after unscoped info
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mexplicitly with message:
  previous unscoped info SHOULD not be seen

-------------------------------------------------------------------------------
[0mjust info
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

[0m[1;31m
No assertions in test case 'just info'

[0m-------------------------------------------------------------------------------
[0mjust unscoped info
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

[0m[1;31m
No assertions in test case 'just unscoped info'

[0m-------------------------------------------------------------------------------
[0mlong long
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( l == std::numeric_limits<long long>::max() )
[0mwith expansion:
[1;33m  9223372036854775807 (0x<hex digits>)
  ==
  9223372036854775807 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mlooped SECTION tests
[0m[0m  b is currently: 0
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( b > a )
[0mwith expansion:
[1;33m  0 > 1
[0m
-------------------------------------------------------------------------------
[0mlooped SECTION tests
[0m[0m  b is currently: 1
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( b > a )
[0mwith expansion:
[1;33m  1 > 1
[0m
-------------------------------------------------------------------------------
[0mlooped SECTION tests
[0m[0m  b is currently: 2
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( b > a )
[0mwith expansion:
[1;33m  2 > 1
[0m
-------------------------------------------------------------------------------
[0mlooped SECTION tests
[0m[0m  b is currently: 3
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( b > a )
[0mwith expansion:
[1;33m  3 > 1
[0m
-------------------------------------------------------------------------------
[0mlooped SECTION tests
[0m[0m  b is currently: 4
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( b > a )
[0mwith expansion:
[1;33m  4 > 1
[0m
-------------------------------------------------------------------------------
[0mlooped SECTION tests
[0m[0m  b is currently: 5
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( b > a )
[0mwith expansion:
[1;33m  5 > 1
[0m
-------------------------------------------------------------------------------
[0mlooped SECTION tests
[0m[0m  b is currently: 6
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( b > a )
[0mwith expansion:
[1;33m  6 > 1
[0m
-------------------------------------------------------------------------------
[0mlooped SECTION tests
[0m[0m  b is currently: 7
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( b > a )
[0mwith expansion:
[1;33m  7 > 1
[0m
-------------------------------------------------------------------------------
[0mlooped SECTION tests
[0m[0m  b is currently: 8
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( b > a )
[0mwith expansion:
[1;33m  8 > 1
[0m
-------------------------------------------------------------------------------
[0mlooped SECTION tests
[0m[0m  b is currently: 9
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( b > a )
[0mwith expansion:
[1;33m  9 > 1
[0m
-------------------------------------------------------------------------------
[0mlooped tests
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( ( fib[i] % 2 ) == 0 )
[0mwith expansion:
[1;33m  1 == 0
[0mwith message:
  Testing if fib[0] (1) is even

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( ( fib[i] % 2 ) == 0 )
[0mwith expansion:
[1;33m  1 == 0
[0mwith message:
  Testing if fib[1] (1) is even

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ( fib[i] % 2 ) == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0mwith message:
  Testing if fib[2] (2) is even

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( ( fib[i] % 2 ) == 0 )
[0mwith expansion:
[1;33m  1 == 0
[0mwith message:
  Testing if fib[3] (3) is even

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( ( fib[i] % 2 ) == 0 )
[0mwith expansion:
[1;33m  1 == 0
[0mwith message:
  Testing if fib[4] (5) is even

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ( fib[i] % 2 ) == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0mwith message:
  Testing if fib[5] (8) is even

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( ( fib[i] % 2 ) == 0 )
[0mwith expansion:
[1;33m  1 == 0
[0mwith message:
  Testing if fib[6] (13) is even

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( ( fib[i] % 2 ) == 0 )
[0mwith expansion:
[1;33m  1 == 0
[0mwith message:
  Testing if fib[7] (21) is even

-------------------------------------------------------------------------------
[0mmakeStream recognizes %debug stream name
[0m-------------------------------------------------------------------------------
Stream.tests.cpp:<line number>
...............................................................................

Stream.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_NOTHROW( Catch::makeStream( "%debug" ) )
[0m
-------------------------------------------------------------------------------
[0mmake_unique reimplementation
[0m[0m  From lvalue copies
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( lval.has_moved )
[0mwith expansion:
[1;33m  !false
[0m
-------------------------------------------------------------------------------
[0mmake_unique reimplementation
[0m[0m  From rvalue moves
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( rval.has_moved )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mmake_unique reimplementation
[0m[0m  Variadic constructor
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( *ptr == std::tuple<int, double, int>{1, 2., 3} )
[0mwith expansion:
[1;33m  {?} == {?}
[0m
-------------------------------------------------------------------------------
[0mmean
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( m == 19. )
[0mwith expansion:
[1;33m  19.0 == 19.0
[0m
-------------------------------------------------------------------------------
[0mmeasure
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x == 17 )
[0mwith expansion:
[1;33m  17 == 17
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x == 23 )
[0mwith expansion:
[1;33m  23 == 23
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( r.elapsed.count() == 42 )
[0mwith expansion:
[1;33m  42 == 42
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( r.result == 23 )
[0mwith expansion:
[1;33m  23 == 23
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( r.iterations == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( s.elapsed.count() == 69 )
[0mwith expansion:
[1;33m  69 == 69
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( s.result == 17 )
[0mwith expansion:
[1;33m  17 == 17
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( s.iterations == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mmix info, unscoped info and warning
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0mwarning:
  info
  unscoped info
  and warn may mix

Message.tests.cpp:<line number>: [0mwarning:
  info
  unscoped info
  they are not cleared after warnings

[1;31m
No assertions in test case 'mix info, unscoped info and warning'

[0m-------------------------------------------------------------------------------
[0mmore nested SECTION tests
[0m[0m  doesn't equal
  equal
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( a == b )
[0mwith expansion:
[1;33m  1 == 2
[0m
-------------------------------------------------------------------------------
[0mmore nested SECTION tests
[0m[0m  doesn't equal
  not equal
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( a != b )
[0mwith expansion:
[1;33m  1 != 2
[0m
-------------------------------------------------------------------------------
[0mmore nested SECTION tests
[0m[0m  doesn't equal
  less than
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( a < b )
[0mwith expansion:
[1;33m  1 < 2
[0m
-------------------------------------------------------------------------------
[0mnested SECTION tests
[0m[0m  doesn't equal
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( a != b )
[0mwith expansion:
[1;33m  1 != 2
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( b != a )
[0mwith expansion:
[1;33m  2 != 1
[0m
-------------------------------------------------------------------------------
[0mnested SECTION tests
[0m[0m  doesn't equal
  not equal
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( a != b )
[0mwith expansion:
[1;33m  1 != 2
[0m
-------------------------------------------------------------------------------
[0mnon streamable - with conv. op
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( s == "7" )
[0mwith expansion:
[1;33m  "7" == "7"
[0m
-------------------------------------------------------------------------------
[0mnon-copyable objects
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ti == typeid(int) )
[0mwith expansion:
[1;33m  {?} == {?}
[0m
-------------------------------------------------------------------------------
[0mnormal_cdf
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( normal_cdf(0.000000) == Approx(0.50000000000000000) )
[0mwith expansion:
[1;33m  0.5 == Approx( 0.5 )
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( normal_cdf(1.000000) == Approx(0.84134474606854293) )
[0mwith expansion:
[1;33m  0.8413447461 == Approx( 0.8413447461 )
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( normal_cdf(-1.000000) == Approx(0.15865525393145705) )
[0mwith expansion:
[1;33m  0.1586552539 == Approx( 0.1586552539 )
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( normal_cdf(2.809729) == Approx(0.99752083845315409) )
[0mwith expansion:
[1;33m  0.9975208385 == Approx( 0.9975208385 )
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( normal_cdf(-1.352570) == Approx(0.08809652095066035) )
[0mwith expansion:
[1;33m  0.088096521 == Approx( 0.088096521 )
[0m
-------------------------------------------------------------------------------
[0mnormal_quantile
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( normal_quantile(0.551780) == Approx(0.13015979861484198) )
[0mwith expansion:
[1;33m  0.1301597986 == Approx( 0.1301597986 )
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( normal_quantile(0.533700) == Approx(0.08457408802851875) )
[0mwith expansion:
[1;33m  0.084574088 == Approx( 0.084574088 )
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( normal_quantile(0.025000) == Approx(-1.95996398454005449) )
[0mwith expansion:
[1;33m  -1.9599639845 == Approx( -1.9599639845 )
[0m
-------------------------------------------------------------------------------
[0mnot allowed
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0mnot prints unscoped info from previous failures
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0mwith message:
  this MAY be seen only for the FIRST assertion IF info is printed for passing
  assertions

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0mwith message:
  this MAY be seen only for the SECOND assertion IF info is printed for passing
  assertions

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( false )
[0mwith message:
  this SHOULD be seen

-------------------------------------------------------------------------------
[0mnull strings
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( makeString( false ) != static_cast<char*>(0) )
[0mwith expansion:
[1;33m  "valid string" != {null string}
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( makeString( true ) == static_cast<char*>(0) )
[0mwith expansion:
[1;33m  {null string} == {null string}
[0m
-------------------------------------------------------------------------------
[0mnull_ptr
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ptr.get() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mpair<pair<int,const char *,pair<std::string,int> > -> toString
[0m-------------------------------------------------------------------------------
ToStringPair.tests.cpp:<line number>
...............................................................................

ToStringPair.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify( pair ) == "{ { 42, \"Arthur\" }, { \"Ford\", 24 } }" )
[0mwith expansion:
[1;33m  "{ { 42, "Arthur" }, { "Ford", 24 } }"
  ==
  "{ { 42, "Arthur" }, { "Ford", 24 } }"
[0m
-------------------------------------------------------------------------------
[0mparseEnums
[0m[0m  No enums
[0m-------------------------------------------------------------------------------
ToString.tests.cpp:<line number>
...............................................................................

ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( parseEnums( "" ), Equals( std::vector<Catch::StringRef>{} ) )
[0mwith expansion:
[1;33m  {  } Equals: {  }
[0m
-------------------------------------------------------------------------------
[0mparseEnums
[0m[0m  One enum value
[0m-------------------------------------------------------------------------------
ToString.tests.cpp:<line number>
...............................................................................

ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( parseEnums( "ClassName::EnumName::Value1" ), Equals(std::vector<Catch::StringRef>{"Value1"} ) )
[0mwith expansion:
[1;33m  { Value1 } Equals: { Value1 }
[0m
ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( parseEnums( "Value1" ), Equals( std::vector<Catch::StringRef>{"Value1"} ) )
[0mwith expansion:
[1;33m  { Value1 } Equals: { Value1 }
[0m
ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( parseEnums( "EnumName::Value1" ), Equals(std::vector<Catch::StringRef>{"Value1"} ) )
[0mwith expansion:
[1;33m  { Value1 } Equals: { Value1 }
[0m
-------------------------------------------------------------------------------
[0mparseEnums
[0m[0m  Multiple enum values
[0m-------------------------------------------------------------------------------
ToString.tests.cpp:<line number>
...............................................................................

ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( parseEnums( "ClassName::EnumName::Value1, ClassName::EnumName::Value2" ), Equals( std::vector<Catch::StringRef>{"Value1", "Value2"} ) )
[0mwith expansion:
[1;33m  { Value1, Value2 } Equals: { Value1, Value2 }
[0m
ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( parseEnums( "ClassName::EnumName::Value1, ClassName::EnumName::Value2, ClassName::EnumName::Value3" ), Equals( std::vector<Catch::StringRef>{"Value1", "Value2", "Value3"} ) )
[0mwith expansion:
[1;33m  { Value1, Value2, Value3 } Equals: { Value1, Value2, Value3 }
[0m
ToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( parseEnums( "ClassName::EnumName::Value1,ClassName::EnumName::Value2 , ClassName::EnumName::Value3" ), Equals( std::vector<Catch::StringRef>{"Value1", "Value2", "Value3"} ) )
[0mwith expansion:
[1;33m  { Value1, Value2, Value3 } Equals: { Value1, Value2, Value3 }
[0m
-------------------------------------------------------------------------------
[0mpointer to class
[0m-------------------------------------------------------------------------------
Tricky.tests.cpp:<line number>
...............................................................................

Tricky.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( p == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mprint unscoped info if passing unscoped info is printed
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( true )
[0mwith message:
  this MAY be seen IF info is printed for passing assertions

-------------------------------------------------------------------------------
[0mprints unscoped info on failure
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( false )
[0mwith messages:
  this SHOULD be seen
  this SHOULD also be seen

-------------------------------------------------------------------------------
[0mprints unscoped info only for the first assertion
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( false )
[0mwith message:
  this SHOULD be seen only ONCE

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( true )
[0m
Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( true )
[0mwith message:
  this MAY also be seen only ONCE IF info is printed for passing assertions

Message.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( true )
[0m
-------------------------------------------------------------------------------
[0mrandom SECTION tests
[0m[0m  doesn't equal
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( a != b )
[0mwith expansion:
[1;33m  1 != 2
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( b != a )
[0mwith expansion:
[1;33m  2 != 1
[0m
-------------------------------------------------------------------------------
[0mrandom SECTION tests
[0m[0m  not equal
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( a != b )
[0mwith expansion:
[1;33m  1 != 2
[0m
-------------------------------------------------------------------------------
[0mreplaceInPlace
[0m[0m  replace single char
[0m-------------------------------------------------------------------------------
StringManip.tests.cpp:<line number>
...............................................................................

StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( Catch::replaceInPlace(letters, "b", "z") )
[0mwith expansion:
[1;33m  true
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( letters == "azcdefcg" )
[0mwith expansion:
[1;33m  "azcdefcg" == "azcdefcg"
[0m
-------------------------------------------------------------------------------
[0mreplaceInPlace
[0m[0m  replace two chars
[0m-------------------------------------------------------------------------------
StringManip.tests.cpp:<line number>
...............................................................................

StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( Catch::replaceInPlace(letters, "c", "z") )
[0mwith expansion:
[1;33m  true
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( letters == "abzdefzg" )
[0mwith expansion:
[1;33m  "abzdefzg" == "abzdefzg"
[0m
-------------------------------------------------------------------------------
[0mreplaceInPlace
[0m[0m  replace first char
[0m-------------------------------------------------------------------------------
StringManip.tests.cpp:<line number>
...............................................................................

StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( Catch::replaceInPlace(letters, "a", "z") )
[0mwith expansion:
[1;33m  true
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( letters == "zbcdefcg" )
[0mwith expansion:
[1;33m  "zbcdefcg" == "zbcdefcg"
[0m
-------------------------------------------------------------------------------
[0mreplaceInPlace
[0m[0m  replace last char
[0m-------------------------------------------------------------------------------
StringManip.tests.cpp:<line number>
...............................................................................

StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( Catch::replaceInPlace(letters, "g", "z") )
[0mwith expansion:
[1;33m  true
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( letters == "abcdefcz" )
[0mwith expansion:
[1;33m  "abcdefcz" == "abcdefcz"
[0m
-------------------------------------------------------------------------------
[0mreplaceInPlace
[0m[0m  replace all chars
[0m-------------------------------------------------------------------------------
StringManip.tests.cpp:<line number>
...............................................................................

StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( Catch::replaceInPlace(letters, letters, "replaced") )
[0mwith expansion:
[1;33m  true
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( letters == "replaced" )
[0mwith expansion:
[1;33m  "replaced" == "replaced"
[0m
-------------------------------------------------------------------------------
[0mreplaceInPlace
[0m[0m  replace no chars
[0m-------------------------------------------------------------------------------
StringManip.tests.cpp:<line number>
...............................................................................

StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( Catch::replaceInPlace(letters, "x", "z") )
[0mwith expansion:
[1;33m  !false
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( letters == letters )
[0mwith expansion:
[1;33m  "abcdefcg" == "abcdefcg"
[0m
-------------------------------------------------------------------------------
[0mreplaceInPlace
[0m[0m  escape '
[0m-------------------------------------------------------------------------------
StringManip.tests.cpp:<line number>
...............................................................................

StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( Catch::replaceInPlace(s, "'", "|'") )
[0mwith expansion:
[1;33m  true
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( s == "didn|'t" )
[0mwith expansion:
[1;33m  "didn|'t" == "didn|'t"
[0m
-------------------------------------------------------------------------------
[0mrequest an unknown %-starting stream fails
[0m-------------------------------------------------------------------------------
Stream.tests.cpp:<line number>
...............................................................................

Stream.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THROWS( Catch::makeStream( "%somestream" ) )
[0m
-------------------------------------------------------------------------------
[0mresolution
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res.size() == count )
[0mwith expansion:
[1;33m  10 == 10
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res[i] == rate )
[0mwith expansion:
[1;33m  1000.0 == 1000 (0x<hex digits>)
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res[i] == rate )
[0mwith expansion:
[1;33m  1000.0 == 1000 (0x<hex digits>)
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res[i] == rate )
[0mwith expansion:
[1;33m  1000.0 == 1000 (0x<hex digits>)
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res[i] == rate )
[0mwith expansion:
[1;33m  1000.0 == 1000 (0x<hex digits>)
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res[i] == rate )
[0mwith expansion:
[1;33m  1000.0 == 1000 (0x<hex digits>)
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res[i] == rate )
[0mwith expansion:
[1;33m  1000.0 == 1000 (0x<hex digits>)
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res[i] == rate )
[0mwith expansion:
[1;33m  1000.0 == 1000 (0x<hex digits>)
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res[i] == rate )
[0mwith expansion:
[1;33m  1000.0 == 1000 (0x<hex digits>)
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( res[i] == rate )
[0mwith expansion:
[1;33m  1000.0 == 1000 (0x<hex digits>)
[0m
-------------------------------------------------------------------------------
[0mrun_for_at_least, chronometer
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( meter.runs() >= old_runs )
[0mwith expansion:
[1;33m  1 >= 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( meter.runs() >= old_runs )
[0mwith expansion:
[1;33m  2 >= 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( meter.runs() >= old_runs )
[0mwith expansion:
[1;33m  4 >= 2
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( meter.runs() >= old_runs )
[0mwith expansion:
[1;33m  8 >= 4
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( meter.runs() >= old_runs )
[0mwith expansion:
[1;33m  16 >= 8
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( meter.runs() >= old_runs )
[0mwith expansion:
[1;33m  32 >= 16
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( meter.runs() >= old_runs )
[0mwith expansion:
[1;33m  64 >= 32
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( meter.runs() >= old_runs )
[0mwith expansion:
[1;33m  128 >= 64
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Timing.elapsed >= time )
[0mwith expansion:
[1;33m  128 ns >= 100 ns
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Timing.result == Timing.iterations + 17 )
[0mwith expansion:
[1;33m  145 == 145
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Timing.iterations >= time.count() )
[0mwith expansion:
[1;33m  128 >= 100
[0m
-------------------------------------------------------------------------------
[0mrun_for_at_least, int
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x >= old_x )
[0mwith expansion:
[1;33m  1 >= 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x >= old_x )
[0mwith expansion:
[1;33m  2 >= 1
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x >= old_x )
[0mwith expansion:
[1;33m  4 >= 2
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x >= old_x )
[0mwith expansion:
[1;33m  8 >= 4
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x >= old_x )
[0mwith expansion:
[1;33m  16 >= 8
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x >= old_x )
[0mwith expansion:
[1;33m  32 >= 16
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x >= old_x )
[0mwith expansion:
[1;33m  64 >= 32
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( x >= old_x )
[0mwith expansion:
[1;33m  128 >= 64
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Timing.elapsed >= time )
[0mwith expansion:
[1;33m  128 ns >= 100 ns
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Timing.result == Timing.iterations + 17 )
[0mwith expansion:
[1;33m  145 == 145
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Timing.iterations >= time.count() )
[0mwith expansion:
[1;33m  128 >= 100
[0m
-------------------------------------------------------------------------------
[0msecond tag
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

[0m[1;31m
No assertions in test case 'second tag'

[0m-------------------------------------------------------------------------------
[0msend a single char to INFO
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( false )
[0mwith message:
  3

-------------------------------------------------------------------------------
[0msends information to INFO
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  REQUIRE( false )
[0mwith messages:
  hi
  i := 7

-------------------------------------------------------------------------------
[0mshortened hide tags are split apart
[0m-------------------------------------------------------------------------------
Tag.tests.cpp:<line number>
...............................................................................

Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_THAT( testcase.tags, VectorContains( Tag( "magic-tag" ) ) && VectorContains( Tag( "."_catch_sr ) ) )
[0mwith expansion:
[1;33m  { {?}, {?} } ( Contains: {?} and Contains: {?} )
[0m
-------------------------------------------------------------------------------
[0msplitString
[0m-------------------------------------------------------------------------------
StringManip.tests.cpp:<line number>
...............................................................................

StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( splitStringRef("", ','), Equals(std::vector<StringRef>()) )
[0mwith expansion:
[1;33m  {  } Equals: {  }
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( splitStringRef("abc", ','), Equals(std::vector<StringRef>{"abc"}) )
[0mwith expansion:
[1;33m  { abc } Equals: { abc }
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_THAT( splitStringRef("abc,def", ','), Equals(std::vector<StringRef>{"abc", "def"}) )
[0mwith expansion:
[1;33m  { abc, def } Equals: { abc, def }
[0m
-------------------------------------------------------------------------------
[0mstacks unscoped info in loops
[0m-------------------------------------------------------------------------------
Message.tests.cpp:<line number>
...............................................................................

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( false )
[0mwith messages:
  Count 1 to 3...
  1
  2
  3

Message.tests.cpp:<line number>: [0m[1;31mFAILED:
[0m[0;36m  CHECK( false )
[0mwith messages:
  Count 4 to 6...
  4
  5
  6

-------------------------------------------------------------------------------
[0mstartsWith
[0m-------------------------------------------------------------------------------
StringManip.tests.cpp:<line number>
...............................................................................

StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( startsWith("", 'c') )
[0mwith expansion:
[1;33m  !false
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( startsWith(std::string("abc"), 'a') )
[0mwith expansion:
[1;33m  true
[0m
StringManip.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( startsWith("def"_catch_sr, 'd') )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mstd::map is convertible string
[0m[0m  empty
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify( emptyMap ) == "{  }" )
[0mwith expansion:
[1;33m  "{  }" == "{  }"
[0m
-------------------------------------------------------------------------------
[0mstd::map is convertible string
[0m[0m  single item
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify( map ) == "{ { \"one\", 1 } }" )
[0mwith expansion:
[1;33m  "{ { "one", 1 } }" == "{ { "one", 1 } }"
[0m
-------------------------------------------------------------------------------
[0mstd::map is convertible string
[0m[0m  several items
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify( map ) == "{ { \"abc\", 1 }, { \"def\", 2 }, { \"ghi\", 3 } }" )
[0mwith expansion:
[1;33m  "{ { "abc", 1 }, { "def", 2 }, { "ghi", 3 } }"
  ==
  "{ { "abc", 1 }, { "def", 2 }, { "ghi", 3 } }"
[0m
-------------------------------------------------------------------------------
[0mstd::pair<int,const std::string> -> toString
[0m-------------------------------------------------------------------------------
ToStringPair.tests.cpp:<line number>
...............................................................................

ToStringPair.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(value) == "{ 34, \"xyzzy\" }" )
[0mwith expansion:
[1;33m  "{ 34, "xyzzy" }" == "{ 34, "xyzzy" }"
[0m
-------------------------------------------------------------------------------
[0mstd::pair<int,std::string> -> toString
[0m-------------------------------------------------------------------------------
ToStringPair.tests.cpp:<line number>
...............................................................................

ToStringPair.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify( value ) == "{ 34, \"xyzzy\" }" )
[0mwith expansion:
[1;33m  "{ 34, "xyzzy" }" == "{ 34, "xyzzy" }"
[0m
-------------------------------------------------------------------------------
[0mstd::set is convertible string
[0m[0m  empty
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify( emptySet ) == "{  }" )
[0mwith expansion:
[1;33m  "{  }" == "{  }"
[0m
-------------------------------------------------------------------------------
[0mstd::set is convertible string
[0m[0m  single item
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify( set ) == "{ \"one\" }" )
[0mwith expansion:
[1;33m  "{ "one" }" == "{ "one" }"
[0m
-------------------------------------------------------------------------------
[0mstd::set is convertible string
[0m[0m  several items
[0m-------------------------------------------------------------------------------
ToStringGeneral.tests.cpp:<line number>
...............................................................................

ToStringGeneral.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::Detail::stringify( set ) == "{ \"abc\", \"def\", \"ghi\" }" )
[0mwith expansion:
[1;33m  "{ "abc", "def", "ghi" }"
  ==
  "{ "abc", "def", "ghi" }"
[0m
-------------------------------------------------------------------------------
[0mstd::vector<std::pair<std::string,int> > -> toString
[0m-------------------------------------------------------------------------------
ToStringPair.tests.cpp:<line number>
...............................................................................

ToStringPair.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify( pr ) == "{ { \"green\", 55 } }" )
[0mwith expansion:
[1;33m  "{ { "green", 55 } }"
  ==
  "{ { "green", 55 } }"
[0m
-------------------------------------------------------------------------------
[0mstdout and stderr streams have %-starting name
[0m-------------------------------------------------------------------------------
Stream.tests.cpp:<line number>
...............................................................................

Stream.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::makeStream( "%stderr" )->isConsole() )
[0mwith expansion:
[1;33m  true
[0m
Stream.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( Catch::makeStream( "%stdout" )->isConsole() )
[0mwith expansion:
[1;33m  true
[0m
-------------------------------------------------------------------------------
[0mstringify ranges
[0m-------------------------------------------------------------------------------
ToStringWhich.tests.cpp:<line number>
...............................................................................

ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(streamable_range{}) == "op<<(streamable_range)" )
[0mwith expansion:
[1;33m  "op<<(streamable_range)"
  ==
  "op<<(streamable_range)"
[0m
ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(stringmaker_range{}) == "stringmaker(streamable_range)" )
[0mwith expansion:
[1;33m  "stringmaker(streamable_range)"
  ==
  "stringmaker(streamable_range)"
[0m
ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(just_range{}) == "{ 1, 2, 3, 4 }" )
[0mwith expansion:
[1;33m  "{ 1, 2, 3, 4 }" == "{ 1, 2, 3, 4 }"
[0m
ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(disabled_range{}) == "{?}" )
[0mwith expansion:
[1;33m  "{?}" == "{?}"
[0m
-------------------------------------------------------------------------------
[0mstringify( has_maker )
[0m-------------------------------------------------------------------------------
ToStringWhich.tests.cpp:<line number>
...............................................................................

ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify( item ) == "StringMaker<has_maker>" )
[0mwith expansion:
[1;33m  "StringMaker<has_maker>"
  ==
  "StringMaker<has_maker>"
[0m
-------------------------------------------------------------------------------
[0mstringify( has_maker_and_operator )
[0m-------------------------------------------------------------------------------
ToStringWhich.tests.cpp:<line number>
...............................................................................

ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify( item ) == "StringMaker<has_maker_and_operator>" )
[0mwith expansion:
[1;33m  "StringMaker<has_maker_and_operator>"
  ==
  "StringMaker<has_maker_and_operator>"
[0m
-------------------------------------------------------------------------------
[0mstringify( has_neither )
[0m-------------------------------------------------------------------------------
ToStringWhich.tests.cpp:<line number>
...............................................................................

ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(item) == "{?}" )
[0mwith expansion:
[1;33m  "{?}" == "{?}"
[0m
-------------------------------------------------------------------------------
[0mstringify( has_operator )
[0m-------------------------------------------------------------------------------
ToStringWhich.tests.cpp:<line number>
...............................................................................

ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify( item ) == "operator<<( has_operator )" )
[0mwith expansion:
[1;33m  "operator<<( has_operator )"
  ==
  "operator<<( has_operator )"
[0m
-------------------------------------------------------------------------------
[0mstringify( has_template_operator )
[0m-------------------------------------------------------------------------------
ToStringWhich.tests.cpp:<line number>
...............................................................................

ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify( item ) == "operator<<( has_template_operator )" )
[0mwith expansion:
[1;33m  "operator<<( has_template_operator )"
  ==
  "operator<<( has_template_operator )"
[0m
-------------------------------------------------------------------------------
[0mstringify( vectors<has_maker> )
[0m-------------------------------------------------------------------------------
ToStringWhich.tests.cpp:<line number>
...............................................................................

ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify( v ) == "{ StringMaker<has_maker> }" )
[0mwith expansion:
[1;33m  "{ StringMaker<has_maker> }"
  ==
  "{ StringMaker<has_maker> }"
[0m
-------------------------------------------------------------------------------
[0mstringify( vectors<has_maker_and_operator> )
[0m-------------------------------------------------------------------------------
ToStringWhich.tests.cpp:<line number>
...............................................................................

ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify( v ) == "{ StringMaker<has_maker_and_operator> }" )
[0mwith expansion:
[1;33m  "{ StringMaker<has_maker_and_operator> }"
  ==
  "{ StringMaker<has_maker_and_operator> }"
[0m
-------------------------------------------------------------------------------
[0mstringify( vectors<has_operator> )
[0m-------------------------------------------------------------------------------
ToStringWhich.tests.cpp:<line number>
...............................................................................

ToStringWhich.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify( v ) == "{ operator<<( has_operator ) }" )
[0mwith expansion:
[1;33m  "{ operator<<( has_operator ) }"
  ==
  "{ operator<<( has_operator ) }"
[0m
-------------------------------------------------------------------------------
[0mstrlen3
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str.size() == data.len )
[0mwith expansion:
[1;33m  3 == 3
[0m
-------------------------------------------------------------------------------
[0mstrlen3
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str.size() == data.len )
[0mwith expansion:
[1;33m  3 == 3
[0m
-------------------------------------------------------------------------------
[0mstrlen3
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str.size() == data.len )
[0mwith expansion:
[1;33m  5 == 5
[0m
-------------------------------------------------------------------------------
[0mstrlen3
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( data.str.size() == data.len )
[0mwith expansion:
[1;33m  4 == 4
[0m
-------------------------------------------------------------------------------
[0mtables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( strlen(std::get<0>(data)) == static_cast<size_t>(std::get<1>(data)) )
[0mwith expansion:
[1;33m  5 == 5
[0m
-------------------------------------------------------------------------------
[0mtables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( strlen(std::get<0>(data)) == static_cast<size_t>(std::get<1>(data)) )
[0mwith expansion:
[1;33m  6 == 6
[0m
-------------------------------------------------------------------------------
[0mtables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( strlen(std::get<0>(data)) == static_cast<size_t>(std::get<1>(data)) )
[0mwith expansion:
[1;33m  5 == 5
[0m
-------------------------------------------------------------------------------
[0mtables
[0m-------------------------------------------------------------------------------
Generators.tests.cpp:<line number>
...............................................................................

Generators.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( strlen(std::get<0>(data)) == static_cast<size_t>(std::get<1>(data)) )
[0mwith expansion:
[1;33m  6 == 6
[0m
-------------------------------------------------------------------------------
[0mtags with dots in later positions are not parsed as hidden
[0m-------------------------------------------------------------------------------
Tag.tests.cpp:<line number>
...............................................................................

Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testcase.tags.size() == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
Tag.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( testcase.tags[0].original == "magic.tag"_catch_sr )
[0mwith expansion:
[1;33m  magic.tag == magic.tag
[0m
-------------------------------------------------------------------------------
[0mthrown std::strings are translated
[0m-------------------------------------------------------------------------------
Exception.tests.cpp:<line number>
...............................................................................

Exception.tests.cpp:<line number>: [0m[1;31mFAILED:
[0mdue to unexpected exception with message:
  Why would you throw a std::string?

-------------------------------------------------------------------------------
[0mtoString on const wchar_t const pointer returns the string contents
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result == "\"wide load\"" )
[0mwith expansion:
[1;33m  ""wide load"" == ""wide load""
[0m
-------------------------------------------------------------------------------
[0mtoString on const wchar_t pointer returns the string contents
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result == "\"wide load\"" )
[0mwith expansion:
[1;33m  ""wide load"" == ""wide load""
[0m
-------------------------------------------------------------------------------
[0mtoString on wchar_t const pointer returns the string contents
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result == "\"wide load\"" )
[0mwith expansion:
[1;33m  ""wide load"" == ""wide load""
[0m
-------------------------------------------------------------------------------
[0mtoString on wchar_t returns the string contents
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( result == "\"wide load\"" )
[0mwith expansion:
[1;33m  ""wide load"" == ""wide load""
[0m
-------------------------------------------------------------------------------
[0mtoString(enum class w/operator<<)
[0m-------------------------------------------------------------------------------
EnumToString.tests.cpp:<line number>
...............................................................................

EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify(e0) == "E2/V0" )
[0mwith expansion:
[1;33m  "E2/V0" == "E2/V0"
[0m
EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify(e1) == "E2/V1" )
[0mwith expansion:
[1;33m  "E2/V1" == "E2/V1"
[0m
EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify(e3) == "Unknown enum value 10" )
[0mwith expansion:
[1;33m  "Unknown enum value 10"
  ==
  "Unknown enum value 10"
[0m
-------------------------------------------------------------------------------
[0mtoString(enum class)
[0m-------------------------------------------------------------------------------
EnumToString.tests.cpp:<line number>
...............................................................................

EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify(e0) == "0" )
[0mwith expansion:
[1;33m  "0" == "0"
[0m
EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify(e1) == "1" )
[0mwith expansion:
[1;33m  "1" == "1"
[0m
-------------------------------------------------------------------------------
[0mtoString(enum w/operator<<)
[0m-------------------------------------------------------------------------------
EnumToString.tests.cpp:<line number>
...............................................................................

EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify(e0) == "E2{0}" )
[0mwith expansion:
[1;33m  "E2{0}" == "E2{0}"
[0m
EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify(e1) == "E2{1}" )
[0mwith expansion:
[1;33m  "E2{1}" == "E2{1}"
[0m
-------------------------------------------------------------------------------
[0mtoString(enum)
[0m-------------------------------------------------------------------------------
EnumToString.tests.cpp:<line number>
...............................................................................

EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify(e0) == "0" )
[0mwith expansion:
[1;33m  "0" == "0"
[0m
EnumToString.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ::Catch::Detail::stringify(e1) == "1" )
[0mwith expansion:
[1;33m  "1" == "1"
[0m
-------------------------------------------------------------------------------
[0mtuple<>
[0m-------------------------------------------------------------------------------
ToStringTuple.tests.cpp:<line number>
...............................................................................

ToStringTuple.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( "{ }" == ::Catch::Detail::stringify(type{}) )
[0mwith expansion:
[1;33m  "{ }" == "{ }"
[0m
ToStringTuple.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( "{ }" == ::Catch::Detail::stringify(value) )
[0mwith expansion:
[1;33m  "{ }" == "{ }"
[0m
-------------------------------------------------------------------------------
[0mtuple<float,int>
[0m-------------------------------------------------------------------------------
ToStringTuple.tests.cpp:<line number>
...............................................................................

ToStringTuple.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( "1.2f" == ::Catch::Detail::stringify(float(1.2)) )
[0mwith expansion:
[1;33m  "1.2f" == "1.2f"
[0m
ToStringTuple.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( "{ 1.2f, 0 }" == ::Catch::Detail::stringify(type{1.2f,0}) )
[0mwith expansion:
[1;33m  "{ 1.2f, 0 }" == "{ 1.2f, 0 }"
[0m
-------------------------------------------------------------------------------
[0mtuple<int>
[0m-------------------------------------------------------------------------------
ToStringTuple.tests.cpp:<line number>
...............................................................................

ToStringTuple.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( "{ 0 }" == ::Catch::Detail::stringify(type{0}) )
[0mwith expansion:
[1;33m  "{ 0 }" == "{ 0 }"
[0m
-------------------------------------------------------------------------------
[0mtuple<string,string>
[0m-------------------------------------------------------------------------------
ToStringTuple.tests.cpp:<line number>
...............................................................................

ToStringTuple.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( "{ \"hello\", \"world\" }" == ::Catch::Detail::stringify(type{"hello","world"}) )
[0mwith expansion:
[1;33m  "{ "hello", "world" }"
  ==
  "{ "hello", "world" }"
[0m
-------------------------------------------------------------------------------
[0mtuple<tuple<int>,tuple<>,float>
[0m-------------------------------------------------------------------------------
ToStringTuple.tests.cpp:<line number>
...............................................................................

ToStringTuple.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( "{ { 42 }, { }, 1.2f }" == ::Catch::Detail::stringify(value) )
[0mwith expansion:
[1;33m  "{ { 42 }, { }, 1.2f }"
  ==
  "{ { 42 }, { }, 1.2f }"
[0m
-------------------------------------------------------------------------------
[0muniform samples
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( e.point == 23 )
[0mwith expansion:
[1;33m  23.0 == 23
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( e.upper_bound == 23 )
[0mwith expansion:
[1;33m  23.0 == 23
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( e.lower_bound == 23 )
[0mwith expansion:
[1;33m  23.0 == 23
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( e.confidence_interval == 0.95 )
[0mwith expansion:
[1;33m  0.95 == 0.95
[0m
-------------------------------------------------------------------------------
[0munique_ptr reimplementation: basic functionality
[0m[0m  Default constructed unique_ptr is empty
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( ptr )
[0mwith expansion:
[1;33m  !{?}
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ptr.get() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0munique_ptr reimplementation: basic functionality
[0m[0m  Take ownership of allocation
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ptr )
[0mwith expansion:
[1;33m  {?}
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( *ptr == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ptr.get() == naked_ptr )
[0mwith expansion:
[1;33m  0x<hex digits> == 0x<hex digits>
[0m
-------------------------------------------------------------------------------
[0munique_ptr reimplementation: basic functionality
[0m[0m  Take ownership of allocation
  Plain reset deallocates
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( ptr )
[0mwith expansion:
[1;33m  !{?}
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ptr.get() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0munique_ptr reimplementation: basic functionality
[0m[0m  Take ownership of allocation
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ptr )
[0mwith expansion:
[1;33m  {?}
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( *ptr == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ptr.get() == naked_ptr )
[0mwith expansion:
[1;33m  0x<hex digits> == 0x<hex digits>
[0m
-------------------------------------------------------------------------------
[0munique_ptr reimplementation: basic functionality
[0m[0m  Take ownership of allocation
  Reset replaces ownership
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ptr )
[0mwith expansion:
[1;33m  {?}
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ptr.get() != 0 )
[0mwith expansion:
[1;33m  0x<hex digits> != 0
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( *ptr == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
-------------------------------------------------------------------------------
[0munique_ptr reimplementation: basic functionality
[0m[0m  Release releases ownership
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK_FALSE( ptr )
[0mwith expansion:
[1;33m  !{?}
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  CHECK( ptr.get() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0munique_ptr reimplementation: basic functionality
[0m[0m  Move constructor
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( ptr1 )
[0mwith expansion:
[1;33m  !{?}
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ptr2 )
[0mwith expansion:
[1;33m  {?}
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( *ptr2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0munique_ptr reimplementation: basic functionality
[0m[0m  Move assignment
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE_FALSE( ptr2 )
[0mwith expansion:
[1;33m  !{?}
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ptr1 )
[0mwith expansion:
[1;33m  {?}
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( *ptr1 == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
-------------------------------------------------------------------------------
[0munique_ptr reimplementation: basic functionality
[0m[0m  free swap
[0m-------------------------------------------------------------------------------
UniquePtr.tests.cpp:<line number>
...............................................................................

UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( *ptr1 == 2 )
[0mwith expansion:
[1;33m  2 == 2
[0m
UniquePtr.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( *ptr2 == 1 )
[0mwith expansion:
[1;33m  1 == 1
[0m
-------------------------------------------------------------------------------
[0mvec<vec<string,alloc>> -> toString
[0m-------------------------------------------------------------------------------
ToStringVector.tests.cpp:<line number>
...............................................................................

ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(v) == "{  }" )
[0mwith expansion:
[1;33m  "{  }" == "{  }"
[0m
ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(v) == "{ { \"hello\" }, { \"world\" } }" )
[0mwith expansion:
[1;33m  "{ { "hello" }, { "world" } }"
  ==
  "{ { "hello" }, { "world" } }"
[0m
-------------------------------------------------------------------------------
[0mvector<bool> -> toString
[0m-------------------------------------------------------------------------------
ToStringVector.tests.cpp:<line number>
...............................................................................

ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(bools) == "{  }" )
[0mwith expansion:
[1;33m  "{  }" == "{  }"
[0m
ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(bools) == "{ true }" )
[0mwith expansion:
[1;33m  "{ true }" == "{ true }"
[0m
ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(bools) == "{ true, false }" )
[0mwith expansion:
[1;33m  "{ true, false }" == "{ true, false }"
[0m
-------------------------------------------------------------------------------
[0mvector<int,allocator> -> toString
[0m-------------------------------------------------------------------------------
ToStringVector.tests.cpp:<line number>
...............................................................................

ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(vv) == "{  }" )
[0mwith expansion:
[1;33m  "{  }" == "{  }"
[0m
ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(vv) == "{ 42 }" )
[0mwith expansion:
[1;33m  "{ 42 }" == "{ 42 }"
[0m
ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(vv) == "{ 42, 250 }" )
[0mwith expansion:
[1;33m  "{ 42, 250 }" == "{ 42, 250 }"
[0m
-------------------------------------------------------------------------------
[0mvector<int> -> toString
[0m-------------------------------------------------------------------------------
ToStringVector.tests.cpp:<line number>
...............................................................................

ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(vv) == "{  }" )
[0mwith expansion:
[1;33m  "{  }" == "{  }"
[0m
ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(vv) == "{ 42 }" )
[0mwith expansion:
[1;33m  "{ 42 }" == "{ 42 }"
[0m
ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(vv) == "{ 42, 250 }" )
[0mwith expansion:
[1;33m  "{ 42, 250 }" == "{ 42, 250 }"
[0m
-------------------------------------------------------------------------------
[0mvector<string> -> toString
[0m-------------------------------------------------------------------------------
ToStringVector.tests.cpp:<line number>
...............................................................................

ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(vv) == "{  }" )
[0mwith expansion:
[1;33m  "{  }" == "{  }"
[0m
ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(vv) == "{ \"hello\" }" )
[0mwith expansion:
[1;33m  "{ "hello" }" == "{ "hello" }"
[0m
ToStringVector.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( ::Catch::Detail::stringify(vv) == "{ \"hello\", \"world\" }" )
[0mwith expansion:
[1;33m  "{ "hello", "world" }"
  ==
  "{ "hello", "world" }"
[0m
-------------------------------------------------------------------------------
[0mvectors can be sized and resized
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mvectors can be sized and resized
[0m[0m  resizing bigger changes size and capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 10 )
[0mwith expansion:
[1;33m  10 == 10
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mvectors can be sized and resized
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mvectors can be sized and resized
[0m[0m  resizing smaller changes size but not capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mvectors can be sized and resized
[0m[0m  resizing smaller changes size but not capacity
  We can use the 'swap trick' to reset the capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() == 0 )
[0mwith expansion:
[1;33m  0 == 0
[0m
-------------------------------------------------------------------------------
[0mvectors can be sized and resized
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mvectors can be sized and resized
[0m[0m  reserving bigger changes capacity but not size
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 10 )
[0mwith expansion:
[1;33m  10 >= 10
[0m
-------------------------------------------------------------------------------
[0mvectors can be sized and resized
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mvectors can be sized and resized
[0m[0m  reserving smaller does not change size or capacity
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.size() == 5 )
[0mwith expansion:
[1;33m  5 == 5
[0m
Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( v.capacity() >= 5 )
[0mwith expansion:
[1;33m  5 >= 5
[0m
-------------------------------------------------------------------------------
[0mwarmup
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( (iterations * rate) > Catch::Benchmark::Detail::warmup_time.count() )
[0mwith expansion:
[1;33m  160000000 (0x<hex digits>) > 100
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( (end - start) > Catch::Benchmark::Detail::warmup_time )
[0mwith expansion:
[1;33m  310016000 ns > 100 ms
[0m
-------------------------------------------------------------------------------
[0mweighted_average_quantile
[0m-------------------------------------------------------------------------------
InternalBenchmark.tests.cpp:<line number>
...............................................................................

InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( q1 == 14.5 )
[0mwith expansion:
[1;33m  14.5 == 14.5
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( med == 18. )
[0mwith expansion:
[1;33m  18.0 == 18.0
[0m
InternalBenchmark.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m[0;36m  REQUIRE( q3 == 23. )
[0mwith expansion:
[1;33m  23.0 == 23.0
[0m
-------------------------------------------------------------------------------
[0mxmlentitycheck
[0m[0m  embedded xml: <test>it should be possible to embed xml characters, such as <,
                " or &, or even whole <xml>documents</xml> within an attribute
                </test>
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
-------------------------------------------------------------------------------
[0mxmlentitycheck
[0m[0m  encoded chars: these should all be encoded: &&&"""<<<&"<<&"
[0m-------------------------------------------------------------------------------
Misc.tests.cpp:<line number>
...............................................................................

Misc.tests.cpp:<line number>: [0m[0;32mPASSED:
[0m
After All - Default Group
Before All - Apples
Before Each - Apples
1 Apples group
-------------------------------------------------------------------------------
[0mAnonymous test case 1
[0m-------------------------------------------------------------------------------
Groups.tests.cpp:<line number>
...............................................................................

Groups.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  anonymous group test case - Apples

After Each - Apples
Before Each - Apples
2 Apples group
-------------------------------------------------------------------------------
[0mTest inside Apples group
[0m-------------------------------------------------------------------------------
Groups.tests.cpp:<line number>
...............................................................................

Groups.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  no assertions

After Each - Apples
Before Each - Apples
3 Apples group
-------------------------------------------------------------------------------
[0mTest witht tags inside Apples group
[0m[0m  Section with one argument
[0m-------------------------------------------------------------------------------
Groups.tests.cpp:<line number>
...............................................................................

Groups.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  no assertions

After Each - Apples
After All - Apples
Before All - Oranges
Before Each - Oranges
1 Oranges group
-------------------------------------------------------------------------------
[0mAnonymous test case 2
[0m-------------------------------------------------------------------------------
Groups.tests.cpp:<line number>
...............................................................................

Groups.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  anonymous group test case - Oranges

After Each - Oranges
Before Each - Oranges
2 Oranges group
-------------------------------------------------------------------------------
[0mTest inside Oranges group
[0m-------------------------------------------------------------------------------
Groups.tests.cpp:<line number>
...............................................................................

Groups.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  no assertions

After Each - Oranges
Before Each - Oranges
3 Oranges group
-------------------------------------------------------------------------------
[0mTest witht tags inside Oranges group
[0m[0m  Section with one argument
[0m-------------------------------------------------------------------------------
Groups.tests.cpp:<line number>
...............................................................................

Groups.tests.cpp:<line number>: [0m[0;32mPASSED:
[0mwith message:
  no assertions

After Each - Oranges
After All - Oranges
After Global - Default Group
After Global - Apples
After Global - Oranges
[1;31m================[1;33m=[0m[0m[0;32m==============================================================[0m
test cases:  397[0;37m | [0;32m 307 passed[0m[0m[0;37m | [1;31m 83 failed[0m[0m[0;37m | [1;33m 7 failed as expected[0m[0m
assertions: 2248[0;37m | [0;32m2078 passed[0m[0m[0;37m | [1;31m143 failed[0m[0m[0;37m | [1;33m27 failed as expected[0m[0m

