Availability:NoPublish
Title: Level Editor Actions
Crumbs:
Description:

[EXCERPT:OpenLevelBlueprint]
A Level Blueprint is a specialized type of Blueprint that acts as a level-wide global event graph. Events pertaining to the level as a whole, or specific instances of Actors within the level, are used to fire off sequences of actions in the form of function calls or flow control operations.

[VAR:ToolTipFullLink]
Engine/Blueprints/UserGuide/Types/LevelBlueprint
[/VAR]

[/EXCERPT:OpenLevelBlueprint]

[EXCERPT:OpenGameModeBlueprint]
Game Modes defines the game's rules and enforces them, such as win/lose conditions. The GameMode only exists on the server.
[VAR:ToolTipFullLink]
Gameplay/Framework/GameMode
[/VAR]
[/EXCERPT:OpenGameModeBlueprint]

[EXCERPT:OpenGameStateBlueprint]
Handles the state of the game, things like: score, list of connected players, number of caps in capture the flag, where the pieces are in a chess game, what missions you have completed in an open world game, etc. Stuff that changes while you play. The GameState exists on the server and all clients and can replicate freely to keep all machines up to date.
[VAR:ToolTipFullLink]
Gameplay/Framework/GameMode#gamestate
[/VAR]
[/EXCERPT:OpenGameStateBlueprint]

[EXCERPT:OpenDefaultPawnBlueprint]
The Pawn class is the base class of all Actors that can be controlled by players or AI. A Pawn is the physical representation of a player or AI entity within the world. This not only means that the Pawn determines what the player or AI entity looks like visually, but also how it interacts with the world in terms of collisions and other physical interactions. This can be confusing in certain circumstances as some types of games may not have a visible player mesh or avatar within the game. Regardless, the Pawn still represents the physical location, rotation, etc. of a player or entity within the game.
[VAR:ToolTipFullLink]
Gameplay/Framework/Pawn
[/VAR]
[/EXCERPT:OpenDefaultPawnBlueprint]

[EXCERPT:OpenHUDBlueprint]
The HUD is used to display player information to the screen.
[VAR:ToolTipFullLink]
Gameplay/Framework/UIAndHUD
[/VAR]
[/EXCERPT:OpenHUDBlueprint]

[EXCERPT:OpenPlayerControllerBlueprint]
Controllers are non-physical Actors that can possess a Pawn (or Pawn-derived class like Character) to control its actions. PlayerControllers are used by human players to control Pawns.
[VAR:ToolTipFullLink]
Gameplay/Framework/Controller/PlayerController
[/VAR]
[/EXCERPT:OpenPlayerControllerBlueprint]

[EXCERPT:CreateClassBlueprint]
A Blueprint Class, often shortened as Blueprint, is an asset that allows content creators to easily add functionality on top of existing gameplay classes. Blueprints are created inside of Unreal Editor visually, instead of by typing code, and saved as assets in a content package. These essentially define a new class or type of Actor which can then be placed into maps as instances that behave like any other type of Actor.
[VAR:ToolTipFullLink]
Engine/Blueprints/UserGuide/Types/ClassBlueprint
[/VAR]
[/EXCERPT:CreateClassBlueprint]

[EXCERPT:DetailsTab]
###Details
The Details panel contains information, utilities, and functions specific to the current selection in the viewport. It contains transform edit boxes for moving, rotating, and scaling Actors, displays all of the editable properties for the selected Actors, and provides quick access to additional editing functionality depending on the types of Actors selected in the viewport.

[VAR:ToolTipFullLink]
Engine/UI/LevelEditor/Details
[/VAR]
[/EXCERPT:DetailsTab]

[EXCERPT:SceneOutlinerTab]
###World Outliner
The World Outliner panel displays all of the Actors within the scene in a hierarchical tree view. Actors can be selected and modified directly from the World Outliner. You can also use the Info drop down menu to display an extra column that shows Levels, Layers, or ID Names.

[VAR:ToolTipFullLink]
Engine/UI/LevelEditor/SceneOutliner
[/VAR]
[/EXCERPT:SceneOutlinerTab]

[EXCERPT:NewProjectTab]
###New Project
Create a new project from scratch or from an existing template.

[VAR:ToolTipFullLink]
Engine/Basics/Projects/Browser#creatingnewprojects
[/VAR]
[/EXCERPT:NewProjectTab]

[EXCERPT:KeepSimulationChanges]
Any property changes made to the selected Actor or Actors in the simulation world will be pushed back to the Actors in the level.
[VAR:ToolTipFullLink]
Engine/UI/LevelEditor/InEditorTesting/KeepSimulationChanges
[/VAR]
[/EXCERPT:KeepSimulationChanges]

[EXCERPT:PushToBlueprintDefaults]
Any property changes made to the selected Actor in the level will be pushed back to the Class Defaults for this class, allowing you to adjust settings on one instance and then apply them to all future instances.
[/EXCERPT:PushToBlueprintDefaults]

[EXCERPT:ResetToBlueprintDefaults]
Any property changes made to the selected Actor in the level will be discarded, resetting the Actor to the defaults defined in the Blueprint.
[/EXCERPT:ResetToBlueprintDefaults]

[EXCERPT:ObjectUsesExperimentalClass]
###Here be dragons!

![](HereBeDragons.png)

This object uses one or more 'experimental' classes.

These are totally unsupported and undocumented prototypes:
* They may be dramatically changed or abandoned in a future build.
* Data or code compatibility is not guaranteed.
* The code is in an early state and may cause editor instability or crashes.
* They may be promoted to 'Early Access' or 'Fully Supported' in the future.

Use these at your own risk!
[/EXCERPT:ObjectUsesExperimentalClass]

[EXCERPT:ObjectUsesEarlyAccessClass]
###Early Access

This object uses one or more 'early access' classes.

While not considered production-ready, they are a step beyond 'experimental' and are being provided as a preview of things to come:
* We will try to provide forward-compatibility for content you create.
* The classes may change significantly in the future.
* The code is in an early state and may not meet the desired polish / quality bar.
* There is probably no documentation or example content yet.
* They will be promoted out of 'Early Access' when they are production ready.
[/EXCERPT:ObjectUsesEarlyAccessClass]

