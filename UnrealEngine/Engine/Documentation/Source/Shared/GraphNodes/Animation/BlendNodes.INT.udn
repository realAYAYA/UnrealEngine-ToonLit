Availability:NoPublish
Title: Animation Node Reference
Crumbs:
Description:Descriptions of the various animation nodes available for use in Animation Blueprints

[EXCERPT:DummyExcerpt]

[/EXCERPT:DummyExcerpt]


[EXCERPT:UAnimGraphNode_LayeredBoneBlend]

Layered blend (per bone) has a dynamic number of blendposes that can blend per different bone sets.

[/EXCERPT:UAnimGraphNode_LayeredBoneBlend]

[EXCERPT:UAnimGraphNode_BlendListByBool]

This node is effectively a 'branch', picking one of two input poses based on an input Boolean value.

[VAR:ToolTipFullLink]
Engine/Animation/NodeReference/Blend#blendposesbybool
[/VAR]

[/EXCERPT:UAnimGraphNode_BlendListByBool]

[EXCERPT:UAnimGraphNode_BlendListByEnum]

Blend List by Enum allows a blend pose to be selected based on a supplied enum value.

[/EXCERPT:UAnimGraphNode_BlendListByEnum]

[EXCERPT:UAnimGraphNode_BlendListByInt]

Blend list by int allows a blend pose to be selected based on a supplied index.

[VAR:ToolTipFullLink]
Engine/Animation/NodeReference/Blend#blendposesbyint
[/VAR]

[/EXCERPT:UAnimGraphNode_BlendListByInt]

[EXCERPT:UAnimGraphNode_TwoWayBlend]


The standard **Blend** node is a straight mixing of the two input poses based on an alpha input.

---

**Input Pins**

A - The first pose to be blended. 
B - The second pose to be blended. 
Alpha - A `float` value in the range **[0.0, 1.0]** to use as the alpha value to determine the weighting of the two poses. A value of **0.0** gives full weighting to the **A** input pose, while a value of **1.0** gives full weighting to the **B** input pose. 

---

**Output Pins**

Pose - The final pose after the blending has been applied. 

[VAR:ToolTipFullLink]
Engine/Animation/NodeReference/Blend#blend
[/VAR]

[/EXCERPT:UAnimGraphNode_TwoWayBlend]

[EXCERPT:UAnimGraphNode_ApplyAdditive]

Applies the supplied additive pose blended by the Alpha parameter.

[/EXCERPT:UAnimGraphNode_ApplyAdditive]

[EXCERPT:UAnimGraphNode_ComponentToLocalSpace]

Convert a pose in component space (each bones transform is relative to the mesh component) to local space (each bones transform is relative to its parent bone).

[/EXCERPT:UAnimGraphNode_ComponentToLocalSpace]

[EXCERPT:UAnimGraphNode_LocalToComponentSpace]

Convert a pose in local space (each bones transform is relative to its parent bone) to component space (each bones transform is relative to the mesh component).

[/EXCERPT:UAnimGraphNode_LocalToComponentSpace]

[EXCERPT:UAnimGraphNode_MeshRefPose]

Outputs the reference pose of the mesh.

[/EXCERPT:UAnimGraphNode_MeshRefPose]

[EXCERPT:UAnimGraphNode_IdentityPose]

Returns an identity pose.

[/EXCERPT:UAnimGraphNode_IdentityPose]

[EXCERPT:UAnimGraphNode_LocalRefPose]

Returns the reference pose of the mesh in local space.

[/EXCERPT:UAnimGraphNode_LocalRefPose]

[EXCERPT:UAnimGraphNode_RotateRootBone]

Rotate Root Bone allows the arbitrary rotation of a bone outside of animation data.

[/EXCERPT:UAnimGraphNode_RotateRootBone]

[EXCERPT:UAnimGraphNode_SaveCachedPose]

Saves the supplied pose so that it can be accessed and used at a later point.

[/EXCERPT:UAnimGraphNode_SaveCachedPose]

[EXCERPT:UAnimGraphNode_SequenceEvaluator]

Evaluates the specified animation at a single specified frame.

[/EXCERPT:UAnimGraphNode_SequenceEvaluator]

[EXCERPT:UAnimGraphNode_SequencePlayer]

Plays back the specified animation.

[/EXCERPT:UAnimGraphNode_SequencePlayer]

[EXCERPT:UAnimGraphNode_Slot]

A slot node blends animation data from the named slot on the currently playing animation montages onto the pose.

[/EXCERPT:UAnimGraphNode_Slot]

[EXCERPT:UAnimGraphNode_UseCachedPose]

Allows the use of a previously cached pose.

[/EXCERPT:UAnimGraphNode_UseCachedPose]


[EXCERPT:UAnimGraphNode_CopyBone]

Copies a transform from one bone to another. This can copy translation, rotation, and scale or a combination of all three.

[/EXCERPT:UAnimGraphNode_CopyBone]

[EXCERPT:UAnimGraphNode_ModifyBone]

Modifies the transform of a bone.

[/EXCERPT:UAnimGraphNode_ModifyBone]

[EXCERPT:UAnimGraphNode_RotationMultiplier]

The Apply a Percentage of Rotation control drives the Rotation of a target bone at some specified percentage of the Rotation of another bone within the Skeleton.

[/EXCERPT:UAnimGraphNode_RotationMultiplier]

[EXCERPT:UAnimGraphNode_SpringBone]

The Spring Controller applies a spring solver that can be used to limit how far a bone can stretch from its reference pose position and apply a force in the opposite direction.

[/EXCERPT:UAnimGraphNode_SpringBone]

[EXCERPT:UAnimGraphNode_TwoBoneIK]

The Two Bone IK control applies an inverse kinematic (IK) solver to a 3-joint chain, such as the limbs of a character.

[/EXCERPT:UAnimGraphNode_TwoBoneIK]

[EXCERPT:UAnimGraphNode_BlendSpacePlayer]

Plays back the specified BlendSpace.

[/EXCERPT:UAnimGraphNode_BlendSpacePlayer]

[EXCERPT:UAnimGraphNode_BlendSpaceEvaluator]

Evaluates the BlendSpace at the single frame specified.

[/EXCERPT:UAnimGraphNode_BlendSpaceEvaluator]

[EXCERPT:UAnimGraphNode_RotationOffsetBlendSpace]

Applies a rotational offset BlendSpace.

[/EXCERPT:UAnimGraphNode_RotationOffsetBlendSpace]

[EXCERPT:UAnimGraphNode_Fabrik]

Applies the FaBRIK (Forward and Backward Reaching Inverse Kinematics) algorithm to a bone chain to solve bone transforms relative to an end effector.

[/EXCERPT:UAnimGraphNode_Fabrik]

[EXCERPT:UAnimGraphNode_BoneDrivenController]

Drives the transform component of a bone based on the transform component of another. Each component of translation and rotation can be used as a source and target for this node, or the scale as a whole. For example driving the Z translation from the X rotation of another bone. The final output can be modifier using a multiplier.

[/EXCERPT:UAnimGraphNode_BoneDrivenController]

[EXCERPT:UAnimGraphNode_LookAt]

Modifies a bone transform to look at another bone along a specified axis, or to look at a specified location.

[/EXCERPT:UAnimGraphNode_LookAt]

[EXCERPT:UAnimGraphNode_HandIKRetargeting]

Handles re-targeting of an IK Bone chain. Moves IK bone chain to meet FK hand bones, based on HandFKWeight (to favor either side). (0 = favor left hand, 1 = favor right hand, 0.5 = equal weight).

[/EXCERPT:UAnimGraphNode_HandIKRetargeting]

[EXCERPT:GraphNode_FastPathInfo]

Animation nodes can use the 'fast path', avoiding somewhat slower Blueprint usage by ensuring that they either:
- Access member variables directly.
- Access a negated boolean member variable.
- Access members of a nested struct.
- Access some "Break Struct" cases as well (Break Transform being a notable exception).

[VAR:ToolTipFullLink]
Engine/Animation/Optimization/FastPath
[/VAR]

[/EXCERPT:GraphNode_FastPathInfo]