Availability:NoPublish
Title:Blueprint Editor
Crumbs:
Description:Overview of the Blueprint nodes.

[EXCERPT:UK2Node_ExecutionSequence]
The Sequence node allows for a single execution pulse to to trigger a series of events in order.

The node may have any number of outputs, all of which get called as soon as the Sequence node receives an input. They will always get called in order, but without any delay.
[/EXCERPT:UK2Node_ExecutionSequence]

[EXCERPT:UK2Node_IfThenElse]


The Branch node serves as a simple way to create decision-based flow from a single _True/False_ condition. 
Once executed, the Branch node looks at the incoming value of the attached Boolean, and outputs an execution 
pulse down the appropriate output.

In this simple example, the branch is checking the current state of a boolean variable. If _true_, it sets 
the color of a light to be red. If _false_, it sets it to blue.

---

**Input Pins**

Unlabeled Execution Pin - This execution input triggers the branch check. 
Condition - Takes in an boolean value used to indicate which output pin will be triggered. 

---

**Output Pins**

True - This outputs an execution pulse if the incoming condition was *true*. 
False - This outputs an execution pulse if the incoming condition was *false*. 

[/EXCERPT:UK2Node_IfThenElse]




[EXCERPT:UK2Node_SwitchEnum]


The "Switch on ..." nodes allow you to pick a path of execution based on a single Enum value. A "Switch on ..." node is available for each Enum and has a variable number of output pins (one for each possible enum value).
Once executed, this node looks at the incoming value of the attached Enum, and outputs an execution 
pulse down the appropriate output.

---

**Input Pins**

Selection - Takes in an Enum value used to indicate which output pin will be triggered. 

---

**Output Pins**

Variable Number of Execution Pins -  There is an output pin for each Enum value. An execution pulse will but output from the one matching the "Selection" input. 

[/EXCERPT:UK2Node_SwitchEnum]




[EXCERPT:UK2Node_SpawnActor]


The "Spawn Actor from Blueprint Node" node takes a Blueprint template (specified via the 'Blueprint' input) and attempts to spawn an instance of that in the world.

The 'Spawn Transform' input is used to define the Actor's spawn location (and its initial orientation). If that location is blocked by some collider, then the Actor will fail to spawn unless you set the 'Spawn Even if Colliding' input to _True_.

---

**Input Pins**

Unlabeled Execution Pin - This execution input triggers the spawning. 
Spawn Transform - Takes in a Transform used to position and orient the Actor in the world. 
Spawn Even if Colliding - Takes in a Boolean value used to determine if the Actor should be spawned when something is blocking the spawn location.  
Blueprint - Denotes the Blueprint Actor you wish to spawn (required). 

---

**Output Pins**

Unlabeled Execution Pin - This is an execution output.
Return Value - This outputs the new Actor instance that was spawned. 

[/EXCERPT:UK2Node_SpawnActor]



[EXCERPT:UK2Node_SpawnActorFromClass]


The "Spawn Actor from Class Node" node takes an Actor Class (specified via the 'Class' input) and attempts to spawn an instance of that in the world.

The 'Spawn Transform' input is used to define the Actor's spawn location (and its initial orientation).

---

**Input Pins**

Unlabeled Execution Pin - This execution input triggers the spawning. 
Class - Denotes the Actor Class you wish to spawn (required). 
Spawn Transform - Takes in a Transform used to position and orient the Actor in the world. 
Collision Handling Override - Overrides actor class setting for how to handle a situation where something is blocking the spawn location. If "Default" is selected, the actor class's SpawnCollisionHandlingMethod is used.

---

**Output Pins**

Unlabeled Execution Pin - This is an execution output.
Return Value - This outputs the new Actor instance that was spawned. 


[/EXCERPT:UK2Node_SpawnActorFromClass]



[EXCERPT:UK2Node_FormatText]

The Format Text Node is one of the more powerful Blueprint nodes, as it changes depending on if you give it a literal value or input from another node. It starts out looking pretty plain, a single input and a single output. But if you add text to the "Format" input, and add sections encapsulated with { } (refered to as "Specifiers") you will get more input pins named with the text contained within the { }'s, like this:

![](FText_02.png)

This results in "You have 3.50 Dollars" being displayed on screen.

However, if you give it input from another node, the Format Text node will not exactly know what is being fed into it. In this case, you can add pins to the node:

![](FText_04.png)

And you define what the pins are looking for by selecting the Format Text node, and editing the "Arguments" in the Details pane with the "Specifiers" you want the Format Text node to look for:

![](FText_03.5.png)

Not every argument has to be found, so you can load a Format Text node with many possible items to look for and it will only give you what it finds in the "Format" input.


[VAR:ToolTipFullLink]
Programming/UnrealArchitecture/StringHandling/FText
[/VAR]

[/EXCERPT:UK2Node_FormatText]

[EXCERPT:UK2Node_Timeline]
A Timeline is a special node that allows you to keyframe and modify values over time. Double-clicking on this node will open the Timeline Editor tab, where you can add tracks. Each track you create adds an output pin to this node. The Update execution output pin is fired each frame the Timeline is playing, and allows you to connect any nodes you like to make use the new values.

---

**Input Pins**

Play - Start playback from current time
Play from Start - Start playback from beginning
Stop - Stop playback at current time
Reverse - Start reverse playback from current time
Reverse from End - Start reverse playback from end
Set New Time - Jump playback position to time specified by New Time input
New Time - Time to jump to when Set New Time is fired

---

**Output Pins**

Update - Fires every frame while the Timeline is playing
Finished - This outputs fires when the Timeline reaches the end. It does _not_ fire when you manually stop playback.
Direction - Current direction of playback

Additional output data pins are added for each Timeline track


[/EXCERPT:UK2Node_Timeline]

[EXCERPT:UK2Node_CustomEvent]
A Custom Event is an Event node you can create and give your own name and output pins. You can then call that Event from inside this Blueprint or from other Blueprints.

An example might be a barrel Blueprint where you add an 'Explode' event that can be fired from the Level Blueprint during a scripted sequence.
[/EXCERPT:UK2Node_CustomEvent]

[EXCERPT:UEdGraphNode_Documentation]
Documentation Nodes provide the ability to display UDN excerpts in graphs. 
The user must enter the UDN path to the documentation page as the link relative to /Engine/Documentation/Source in the details view,
then select a valid excerpt from the list box.
[/EXCERPT:UEdGraphNode_Documentation]


[EXCERPT:UK2Node_MathExpression]
The Math Expression node acts like a collapsed graph. It is a single node that you can double-click to open the sub-graph that makes up its functionality. Initially, the name/expression is blank. Whenever you rename the node, then the new expression is parsed and a new sub-graph is generated. 
[VAR:ToolTipFullLink]
Engine/Blueprints/UserGuide/MathNode
[/VAR]
[/EXCERPT:UK2Node_MathExpression]
