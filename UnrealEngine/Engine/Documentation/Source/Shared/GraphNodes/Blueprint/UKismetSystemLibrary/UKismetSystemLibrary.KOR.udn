INTSourceChangelist:3108692
Availability:NoPublish
Title:UKismetSystemLibrary
Crumbs:
Description:블루프린트 시스템 라이브러리에 대한 개요입니다.

[EXCERPT:CapsuleTraceMulti_NEW]

채널 노드에 의한 다중 캡슐 트레이스 - (Trace Channel 로 필터링된) 하나의 트레이스에서 여러개의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Radius' 와 'Half-Height' 입력으로) 캡슐을 구성한 다음 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 훑(sweep)습니다. 캡슐이 아무 **(특히나 지정된 'Trace Channel' 에 반응하는)** 오브젝트에 걸리면, 기록하여 ('Out Hits' 핀을 통해) 배열에 출력시킵니다.

기본적으로 캡슐은 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:CapsuleTraceMulti_NEW]




[EXCERPT:CapsuleTraceMultiForObjects]

오브젝트 노드에 대한 다중 캡슐 트레이스 - 이 노드는 (Object Type 으로 필터링된) 하나의 트레이스에서 여러개의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Radius' 와 'Half-Height' 입력으로) 캡슐을 구성한 다음 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 훑(sweep)습니다. 캡슐이 아무 **(특히나 지정된 'Trace Channel' 에 반응하는)** 오브젝트에 걸리면, 기록하여 ('Out Hits' 핀을 통해) 배열에 출력시킵니다.

기본적으로 캡슐은 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

이 노드는 특정 (Pawn, Character 등의) 오브젝트 유형으로 검색을 제한시킬 수 있도록 구성되어 있습니다. 그러기 위해서는 배열에 원하는 유형을 추가한 다음 그 배열을 'Object Types' 입력에 연결합니다. 그 결과 해당 유형에 일치하는 오브젝트만 포함됩니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:CapsuleTraceMultiForObjects]




[EXCERPT:LineTraceMulti_NEW]

채널 노드에 의한 다중 선 트레이스 - 이 노드는 (Trace Channel 로 필터링된) 하나의 트레이스에서 여러개의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 레이 캐스팅을 합니다. 선이 아무 **(특히나 지정된 'Trace Channel' 에 반응하는)** 오브젝트와 교차하면, 기록하여 ('Out Hits' 핀을 통해) 배열에 출력시킵니다.

기본적으로 선은 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:LineTraceMulti_NEW]





[EXCERPT:LineTraceMultiForObjects]

오브젝트 노드에 대한 다중 선 트레이스 - 이 노드는 (Object Type 으로 필터링된) 하나의 트레이스에서 여러개의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 레이 캐스팅을 합니다. 선이 아무 **(특히나 지정된 'Trace Channel' 에 반응하는)** 오브젝트와 교차하면, 기록하여 ('Out Hits' 핀을 통해) 배열에 출력시킵니다.

기본적으로 선은 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

이 노드는 특정 (Pawn, Character 등의) 오브젝트 유형으로 검색을 제한시킬 수 있도록 구성되어 있습니다. 그러기 위해서는 배열에 원하는 유형을 추가한 다음 그 배열을 'Object Types' 입력에 연결합니다. 그 결과 해당 유형에 일치하는 오브젝트만 들어가게 됩니다.

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:LineTraceMultiForObjects]




[EXCERPT:SphereTraceMulti_NEW]

채널 노드에 의한 다중 구체 트레이스 - 이 노드는 (Trace Channel 로 필터링된) 하나의 트레이스에서 여러개의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Radius' 입력으로) 구체를 만든 다음 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 훑(sweep)습니다. 구체가 아무 **(특히나 지정된 'Trace Channel' 에 반응하는)** 오브젝트와 만나면, 기록하여 ('Out Hits' 핀을 통해) 배열에 출력시킵니다.

기본적으로 구체는 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:SphereTraceMulti_NEW]




[EXCERPT:SphereTraceMultiForObjects]

오브젝트 노드에 대한 다중 구체 트레이스 - 이 노드는 (Object Type 으로 필터링된) 하나의 트레이스에서 여러개의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Radius' 입력으로) 구체를 만든 다음 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 훑(sweep)습니다. 구체가 아무 **(특히나 지정된 'Trace Channel' 에 반응하는)** 오브젝트와 만나면, 기록하여 ('Out Hits' 핀을 통해) 배열에 출력시킵니다.

기본적으로 구체는 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

이 노드는 특정 (Pawn, Character 등의) 오브젝트 유형으로 검색을 제한시킬 수 있도록 구성되어 있습니다. 그러기 위해서는 배열에 원하는 유형을 추가한 다음 그 배열을 'Object Types' 입력에 연결합니다. 그 결과 해당 유형에 일치하는 오브젝트만 들어가게 됩니다.

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:SphereTraceMultiForObjects]




[EXCERPT:CapsuleTraceSingle_NEW]

채널 노드에 의한 단일 캡슐 트레이스 - 이 노드는 (Trace Channel 로 필터링된) 하나의 트레이스에서 하나의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Radius' 와 'Half-Height' 입력으로) 캡슐을 구성한 다음 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 훑(sweep)습니다. 캡슐이 아무 **(특히나 지정된 'Trace Channel' 에 반응하는)** 오브젝트에 걸리면, 'Out Hits' 핀을 통해 출력시킵니다.

기본적으로 캡슐은 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:CapsuleTraceSingle_NEW]




[EXCERPT:CapsuleTraceSingleForObjects]

오브젝트 노드에 대한 단일 캡슐 트레이스 - 이 노드는 (Object Type 으로 필터링된) 하나의 트레이스에서 하나의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Radius' 와 'Half-Height' 입력으로) 캡슐을 구성한 다음 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 훑(sweep)습니다. 캡슐이 아무 **(특히나 지정된 'Trace Channel' 에 반응하는)** 오브젝트에 걸리면, 'Out Hits' 핀을 통해 출력시킵니다.

기본적으로 캡슐은 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

이 노드는 특정 (Pawn, Character 등의) 오브젝트 유형으로 검색을 제한시킬 수 있도록 구성되어 있습니다. 그러기 위해서는 배열에 원하는 유형을 추가한 다음 그 배열을 'Object Types' 입력에 연결합니다. 그 결과 해당 유형에 일치하는 오브젝트만 들어가게 됩니다.

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:CapsuleTraceSingleForObjects]




[EXCERPT:LineTraceSingle_NEW]

채널 노드에 의한 단일 선 트레이스 - 이 노드는 (Trace Channel 로 필터링된) 하나의 트레이스에서 하나의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 레이 캐스팅을 합니다. 선이 아무 **(특히나 지정된 'Trace Channel' 에 반응하는)** 오브젝트와 교차하면, 'Out Hits' 핀을 통해 출력시킵니다.

기본적으로 선은 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:LineTraceSingle_NEW]




[EXCERPT:LineTraceSingleForObjects]

오브젝트 노드에 대한 단일 선 트레이스 - 이 노드는 (Object Type 으로 필터링된) 하나의 트레이스에서 하나의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 레이 캐스팅을 합니다. 선이 아무 오브젝트와 교차하면, 'Out Hits' 핀을 통해 출력시킵니다.

기본적으로 선은 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

이 노드는 특정 (Pawn, Character 등의) 오브젝트 유형으로 검색을 제한시킬 수 있도록 구성되어 있습니다. 그러기 위해서는 배열에 원하는 유형을 추가한 다음 그 배열을 'Object Types' 입력에 연결합니다. 그 결과 해당 유형에 일치하는 오브젝트만 들어가게 됩니다.

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:LineTraceSingleForObjects]




[EXCERPT:SphereTraceSingle_NEW]

채널 노드에 의한 단일 구체 트레이스 - 이 노드는 (Trace Channel 로 필터링된) 하나의 트레이스에서 하나의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Radius' 입력으로) 구체를 만든 다음 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 훑(sweep)습니다. 구체가 **(지정된 'Trace Channel' 에 반응하는)** 오브젝트와 만나면, 'Out Hits' 핀을 통해 출력시킵니다.

기본적으로 구체는 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:SphereTraceSingle_NEW]




[EXCERPT:SphereTraceSingleForObjects]

이 노드는 (Object Type 으로 필터링된) 하나의 트레이스에서 하나의 적중 결과를 반환하도록 디자인된 노드입니다.

실행되면, 이 노드는 ('Radius' 입력으로) 구체를 만든 다음 ('Start' 와 'End' 입력으로 정의되는) 직선상으로 훑(sweep)습니다. 구체가 오브젝트와 만나면, 'Out Hits' 핀을 통해 출력시킵니다.

기본적으로 구체는 ('Ignore Self' 입력으로 나타나는) 포함된 블루프린트와의 충돌을 무시하며, ('Actors to Ignore' 입력을 활용하여) 다른 특정 액터도 제외시킬 수 있습니다. ('Trace Complex' 입력으로) 복잡한 콜리전을 테스트할 수도 있는데, 느리면서 퍼포먼스 집약적입니다(만 결과는 좀 더 정확합니다).

이 노드는 특정 (Pawn, Character 등의) 오브젝트 유형으로 검색을 제한시킬 수 있도록 구성되어 있습니다. 그러기 위해서는 배열에 원하는 유형을 추가한 다음 그 배열을 'Object Types' 입력에 연결합니다. 그 결과 해당 유형에 일치하는 오브젝트만 들어가게 됩니다.

트레이스에 뭐가 걸렸는지는 'Return Value' 출력을 확인해 보는 (True 면 뭐가 걸린 것이고, False 면 안걸린) 것으로 쉽게 알 수 있습니다. 'Out Hits' 출력은 'HitResult' 구조체 배열을 생성합니다. 'HitResult' 에는 구체적인 적중 액터, 그 액터 안의 컴포넌트, 적중 위치 등의 칸이 있습니다. 이 각각의 칸에는 Break 노드를 사용해서 접근할 수 있습니다.
[/EXCERPT:SphereTraceSingleForObjects]




