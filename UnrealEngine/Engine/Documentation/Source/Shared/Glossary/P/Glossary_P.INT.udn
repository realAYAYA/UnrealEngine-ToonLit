Title:P
Crumbs:Shared/Glossary
Description:
Availability:NoPublish

[EXCERPT:Glossary_P]

[OBJECT:GlossaryItem]
	[PARAM:Term]
panel
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_panel]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Pawn 
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_pawn]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Persona
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Persona]

		You can open Persona by **double-clicking** any animation-related asset, such as Skeletal Meshes, Blend Spaces, Animation Blueprints, and so on.
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
PhAT
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_PhAT]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Physical Material
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Physical_Material]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
pin
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_pin]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
pivot point
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_pivot_point]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Play In Editor (PIE)
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Play_In_Editor]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
PlayerController
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_PlayerController]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
PlayerState
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_PlayerState]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
project
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_project]
	[/PARAM]
[/OBJECT]

[/EXCERPT:Glossary_P]

[COMMENT:none]
[EXCERPT:Glossary_panel]
A **panel** is a part of the UI that contains information about your level and can be moved, docked, or dragged into a separate window. Examples include the **Details** panel and the **Content Browser**.
[/EXCERPT:Glossary_panel]
[EXCERPT:Glossary_pawn]
**Pawns** are a subclass of Actor and serve as an in-game avatar or persona, for example the characters in a game. Pawns can be controlled by a player or by the game's AI, in the form of non-player characters (NPCs). 

When a Pawn is controlled by a human or AI player, it is considered as _Possessed_. Conversely, when a Pawn is not controlled by a human or AI player it is considered as _Unpossessed_. 
[/EXCERPT:Glossary_pawn]
[EXCERPT:Glossary_Persona]
**Persona** is the animation editing toolset within Unreal. It is a robust system for editing Skeletons, Skeletal Meshes, Animation Blueprints, and various other animation assets. Most (if not all) of your animation work within Unreal will take place in this editor. This is a multi-purpose tool that contains panels for editing skeletal [Sockets](Engine/Content\Types\SkeletalMeshes\Sockets), previewing [Animation Sequences](Engine/Animation/Sequences), setting up animation [Blend Spaces](Engine/Animation/Blendspaces) and [Montages](Engine/Animation/AnimMontage), editing [Animation Blueprints](Engine/Animation/AnimBlueprints), and much more.
[/EXCERPT:Glossary_Persona]
[EXCERPT:Glossary_PhAT]
**PhAT**, the Physics Asset editing tool in the Unreal Editor, is used to modify physics and collision properties for Skeletal Mesh Actors.
[/EXCERPT:Glossary_PhAT]
[EXCERPT:Glossary_Physical_Material]
**Physical Materials** are used to define the response of a physical object when interacting dynamically with the world.  Physical Materials are fairly easy to use.  Creating one will give you a set of default values, identical to the default physical material that is applied to all physics objects.  Examples of this would be a character's dead body (ragdoll), a movable crate, and so on.
[/EXCERPT:Glossary_Physical_Material]
[EXCERPT:Glossary_pin]
A **pin** is part of a visual scripting node. Pins connect to other nodes via wires. Execution pins must be hooked up in order for a node to execute. Data pins are color-coded according to type, and are used to input data from or output data to other nodes.
[/EXCERPT:Glossary_pin]
[EXCERPT:Glossary_pivot_point]
The **pivot point** (or origin point) indicates the location on a Static Mesh Actor or a Skeletal Mesh Actor that has been defined in the 3D modeling program in which it was created as the object's base for alignment purposes. The pivot point can be in the center of an object, at its base, or even outside it.
[/EXCERPT:Glossary_pivot_point]
[EXCERPT:Glossary_Play_In_Editor]
**Play In Editor (PIE)** is a mode in which you can play your level directly in the Unreal Editor window, starting in a location you specify, for testing purposes. In this mode, you can play the current level exactly as it would play in-game, so that you can test gameplay functionality, including player controls and level events triggered by players' actions.
[/EXCERPT:Glossary_Play_In_Editor]
[EXCERPT:Glossary_PlayerController]
The **PlayerController** Class is used to take player input and translate that into interactions in the game and every game has at least one PlayerController in it. A PlayerController often possesses a Pawn or Character as a representation of the player in a game. 

The PlayerController is also the primary network interaction point for multiplayer games. During multiplayer play, the server has one instance of a PlayerController for every player in the game since it must be able to make network function calls to each player. Each client only has the PlayerController that corresponds to their player and can only use their PlayerController to communicate with the server.
[/EXCERPT:Glossary_PlayerController]
[EXCERPT:Glossary_PlayerState]
A **PlayerState** is the state of a participant in the game, such as a human player or a bot that is simulating a player. Non-player AI that exists as part of the game world would not have a PlayerState. 

Example data that would be appropriate in a PlayerState include player name or score, their current level or health, or whether they are currently carrying the flag in a Capture the Flag game. 

For multiplayer games, PlayerStates for all players exist on all machines (unlike PlayerControllers) and can replicate data from the server to the client to keep things in sync.

[/EXCERPT:Glossary_PlayerState]
[EXCERPT:Glossary_project]
A **Project** is a self-contained unit that holds all the content and code that make up an individual game and coincides with a set of directories on your disk. For example, in the image below the Hierarchy Tree of the **Content Browser** contains the same directory structure found inside your Project folder on your disk. 

[OBJECT:ToggleButtonContent]
[PARAMLITERAL:category]
OS
[/PARAMLITERAL]
[PARAMLITERAL:id]
windows
[/PARAMLITERAL]
[PARAMLITERAL:active]
[/PARAMLITERAL]
[PARAM:content]
[REGION:lightbox]
[![](ProjectHierarchy_Windows.png)(w:480)](ProjectHierarchy_Windows.png)
[/REGION]
[/PARAM]
[/OBJECT]

[OBJECT:ToggleButtonContent]
[PARAMLITERAL:category]
OS
[/PARAMLITERAL]
[PARAMLITERAL:id]
mac
[/PARAMLITERAL]
[PARAMLITERAL:active]
[/PARAMLITERAL]
[PARAM:content]
[REGION:lightbox]
[![](ProjectHierarchy_Mac.png)](ProjectHierarchy_Mac.png)
[/REGION]
[/PARAM]
[/OBJECT]

_Click image for full view._

 Although a Project is often referenced by the `.uproject` file associated with it, they are two separate files that exist alongside each other. The `.uproject` is a reference file used to create, open, or save a file, whereas the Project contains all of the files and folders associated with it.

You can create any number of different Projects which can all be maintained and developed in parallel. Both the Engine (and Editor) can easily switch between them which will allow you to work on multiple games at once or have several test projects in addition to your main game Project.
[/EXCERPT:Glossary_project]
[/COMMENT]