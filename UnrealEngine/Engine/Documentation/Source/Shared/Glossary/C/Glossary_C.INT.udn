Title:C
Crumbs:Shared/Glossary
Description:
Availability:NoPublish

[EXCERPT:Glossary_C]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Cascade
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Cascade]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Character
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Character]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
cinematic sequence
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_cinematic_sequence]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
class
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_class]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Blueprint Class
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Class_Blueprint]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
collision
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_collision]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
component
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_component]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Components Mode
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Components_Mode]

		Components Mode is one of three modes; the others are Default Mode and Graph Mode.
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Construction Script
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Construction_Script]

		The Construction Script controls functionality while working with the object in the Editor, and the Event Graph controls functionality during gameplay; Construction Scripts do not execute during gameplay.
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Content Browser
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Content_Browser]

		[REGION:tip]
		In the **Content Browser**, you can search and sort assets by type, and you can filter your view of the assets either by choosing specific types of assets in the **Filters** drop-down list, or by typing text in the **Search Assets** box.
		[/REGION]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Controller Class
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Controller_Class]
	[/PARAM]
[/OBJECT]

[/EXCERPT:Glossary_C]

[COMMENT:none]
[EXCERPT:Glossary_Cascade]
**Cascade** is the particle-system editor in the Unreal Editor. You can access Cascade by creating or opening a particle system in the **Content Browser**. In Cascade, you can add, modify, and remove Particle Emitters, add modules to Particle Emitters, and modify module properties.
[/EXCERPT:Glossary_Cascade]
[EXCERPT:Glossary_Character]
A **Character** is a subclass of a Pawn Actor that is intended to be used as a player character. The Character subclass includes a collision setup, input bindings for bipedal movement, and additional code for movement controlled by the player.
[/EXCERPT:Glossary_Character]
[EXCERPT:Glossary_cinematic_sequence]
A **cinematic sequence**, also just called a cinematic, is an animation that is played in the game. Some cinematic sequences halt gameplay and involve one or more changes in camera viewpoint; these are called **cutscenes**. A cinematic sequence can either be created and controlled by Matinee or imported as a pre-rendered video created in an external application.
[/EXCERPT:Glossary_cinematic_sequence]
[EXCERPT:Glossary_class]
A **Class** defines the behaviors and properties of a particular Actor or Object used in the creation of an Unreal Engine game. Classes are hierarchical, meaning a Class inherits information from its parent Classes (the Classes it was derived or "sub-classed" from) and passes that information to its children. Classes can be created in C++ code or in Blueprints.
[/EXCERPT:Glossary_class]
[EXCERPT:Glossary_Class_Blueprint]
A **Blueprint Class** is an asset that content creators can use to easily add functionality on top of existing gameplay classes. Often shortened as just _Blueprint_. Blueprints are created inside of Unreal Editor visually, instead of by typing code, and saved as assets in a content package. They essentially define a new class or type of Actor, which can then be placed into maps as instances that behave like any other type of Actor.
[/EXCERPT:Glossary_Class_Blueprint]
[EXCERPT:Glossary_collision]
**Collision** is a programmatic way of preventing objects from overlapping during a physics simulation, giving the illusion of solidity in an object. May also refer to a Collision mesh, which is a simplified version of the geometry, generally existing as an invisible shell or hull around the mesh. This simplification aids in performance, allowing complex objects with high polygon counts to calculate their collisions with simpler geometry, which is faster to process.

"Collision" can also be non-blocking (overlapping). In this case, instead of preventing objects from interpenetrating each other, the collision can simply register that the objects are interpenetrating (overlapping).

[REGION:note]
A Collision surface is required for an object to be simulated via physics calculations.
[/REGION]
[/EXCERPT:Glossary_collision]
[EXCERPT:Glossary_component]
A **Component** is a piece of functionality that can be added to an Actor. Components cannot exist by themselves, however when added to an Actor, the Actor will have access to and can use functionality provided by the Component. 

For example, a Spot Light Component will allow your Actor to emit light like a spot light, a Rotating Movement Component will make your Actor spin around, or an Audio Component will make your Actor able to play sounds. 
[/EXCERPT:Glossary_component]
[EXCERPT:Glossary_Components_Mode]
In **Components Mode**, you can add components to your Blueprint, manage the details of existing components, and arrange components. The list of components in Components Mode is hierarchical.
[/EXCERPT:Glossary_Components_Mode]
[EXCERPT:Glossary_Construction_Script]
The **Construction Script** runs following the Components list when an instance of a Blueprint Class 
is created. It contains a node graph that is executed allowing the Blueprint Class instance to perform initialization operations. 
This can be extremely powerful as actions like performing traces into the world, setting meshes and materials, and so on can be 
used to achieve context-specific setup. For instance, a light Blueprint could determine what type of ground it is placed 
upon and choose the correct mesh to use from a set of meshes or a fence Blueprint could perform traces extending out in 
each direction to determine how long of a fence is needed to span the distance.
[/EXCERPT:Glossary_Construction_Script]
[EXCERPT:Glossary_Content_Browser]
The **Content Browser** is the primary area of the Unreal Editor for creating, importing, organizing, viewing, and modifying content assets within Unreal Editor.  It also provides the ability to manage content folders and perform other useful operations on assets, such as renaming, moving, copying, and viewing references.  The **Content Browser** can search for and interact with all assets in the game.
[/EXCERPT:Glossary_Content_Browser]
[EXCERPT:Glossary_Controller_Class]
**Controllers** are non-physical Actors that can possess a Pawn (or Pawn-derived class like Character) to control its actions. A PlayerController is used by human players to control Pawns, while an AIController implements the artificial intelligence for the Pawns they control. Controllers take control of a Pawn with the Possess function, and give up control of the Pawn with the Unpossess function.
[/EXCERPT:Glossary_Controller_Class]
[/COMMENT]