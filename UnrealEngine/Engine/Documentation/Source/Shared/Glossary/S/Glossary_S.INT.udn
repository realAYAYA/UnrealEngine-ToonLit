Title:S
Crumbs:Shared/Glossary
Description:
Availability:NoPublish

[EXCERPT:Glossary_S]

[OBJECT:GlossaryItem]
	[PARAM:Term]
safe frame
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_safe_area]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Scale tool
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Scale_tool]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Simulate In Editor (SIE)
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Simulate_In_Editor]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Skeletal Mesh Actor
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Skeletal_Mesh_Actor]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
socket
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_socket]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
sound cue
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_sound_cue]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Static
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Static]
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Static Mesh
	[/PARAM]
	[PARAM:Definition]
		INCLUDE:#Glossary_Static_Mesh
	[/PARAM]
[/OBJECT]

[OBJECT:GlossaryItem]
	[PARAM:Term]
Stationary
	[/PARAM]
	[PARAM:Definition]
		[INCLUDE:#Glossary_Stationary]
	[/PARAM]
[/OBJECT]

[/EXCERPT:Glossary_S]

[COMMENT:none]
[EXCERPT:Glossary_safe_area]
In Matinee, the **safe frame** is the view, defined by the viewpoint camera's field of view, that will be seen during your cinematic.
[/EXCERPT:Glossary_safe_area]
[EXCERPT:Glossary_Scale_tool]
The **Scale tool** is a transformation widget that you can use to scale Actors in your scene along the X, Y, and Z axes.
[/EXCERPT:Glossary_Scale_tool]
[EXCERPT:Glossary_Simulate_In_Editor]
Using the **Simulate** button begins a **Simulate In Editor** session in the currently active viewport.  While simulating, gameplay begins, including the execution of _Blueprints_ and C++ code that do not rely on a player's interaction with the game. 
While simulating, you have full access to the Editor's tools, so you can modify the scene and its contents, or even place new Actors.   You can also select and inspect _Pawns_ controlled by AI right as they are performing actions, 
and quickly debug and tweak gameplay behaviors. However, because you are not using a PlayerController while simulating, you cannot enter game controls. 
 You can save certain changes made in a _Simulate In Editor_ session using [Keep Simulation Changes](Engine/UI/LevelEditor\InEditorTesting\KeepSimulationChanges).
[/EXCERPT:Glossary_Simulate_In_Editor]
[EXCERPT:Glossary_Skeletal_Mesh_Actor]
A **Skeletal Mesh Actor** is a 3D model asset that can be animated in an external 3D modeling program and then imported into the Unreal Editor. A Skeletal Mesh Actor consists of two parts: the mesh itself and a hierarchical skeleton whose bones can be used to create animation by deforming the mesh according to rules defined in the 3D modeling program. You can import Skeletal Mesh Actors as assets in the **Content Browser**.
[/EXCERPT:Glossary_Skeletal_Mesh_Actor]
[EXCERPT:Glossary_socket]
Commonly in games, you will want to attach an object to the bone of a character. This might be a weapon attached to a hand, or a hat attached to the head. For this purpose, Unreal Engine allows you to create **Sockets** in its animation toolset - [Persona](Engine/Animation/Persona) - which are offset from a bone within the Skeletal Mesh. Sockets can then be translated, rotated, and scaled relative to the bone. Static Meshes and/or Skeletal Meshes can also be previewed attached to sockets. This allows content creators to easily set up sockets for a Skeletal Mesh, and then tell the programmer the names of the sockets to attach objects to.
[/EXCERPT:Glossary_socket]
[EXCERPT:Glossary_sound_cue]
A **sound cue** is an audio asset that contains a reference to an audio file created in an external program that has been imported into a project. You can modify the audio output based on the imported audio file in the Sound Cue Editor.
[/EXCERPT:Glossary_sound_cue]
[EXCERPT:Glossary_Static]
**Static** is one of three possible Mobility property settings. This setting can be applied to both Static Mesh and Light Components.

[INCLUDE:#Glossary_Static_Lights]

[/EXCERPT:Glossary_Static]
[EXCERPT:Glossary_Static_Lights]
**Static Lights** are lights that cannot be changed or moved in any way at runtime.  They are calculated only within Lightmaps, and once processed, have no further impact on performance.  Movable objects cannot integrate with static lights, so the usefulness of static lights is limited.

Of the three light mobilities, Static lights tend to have medium quality, lowest mutability, and the lowest performance cost.
[/EXCERPT:Glossary_Static_Lights]
[EXCERPT:Glossary_Static_Mesh]
A **Static Mesh** is a piece of geometry that consists of a set of polygons that can be cached in video memory and rendered by the graphics card. This allows them to be rendered efficiently, meaning they can be much more complex than other types of geometry such as Brushes. Since they are cached in video memory, Static Meshes can be translated, rotated, and scaled, but they cannot have their vertices animated in any way.

Static Meshes are the basic unit used to create world geometry for levels created in the Unreal Engine. These are 3D models created in external modeling applications (such as 3dsMax, Maya, Softimage, and so on) that are imported into the Unreal Editor through the **Content Browser**, saved in packages, and then used in various ways to create renderable elements. The vast majority of any map in a game made with Unreal will consist of Static Meshes, generally in the form of Static Mesh Actors. Other uses of Static Meshes are for creating movers such as doors or lifts, rigid body physics objects, foliage and terrain decorations, procedurally created buildings, game objectives, and many more visual elements.
[/EXCERPT:Glossary_Static_Mesh]
[EXCERPT:Glossary_Stationary]
**Stationary** is one of three possible Mobility property settings. This setting can be applied only to Light Components.

[INCLUDE:#Glossary_Stationary_Lights]

[/EXCERPT:Glossary_Stationary]
[EXCERPT:Glossary_Stationary_Lights]
**Stationary Lights** are lights that are intended to stay in one position, but are able to change in other ways, such as their brightness and color. This is the primary way in which they differ from Static Lights, which cannot change in any way during gameplay. However, it should be noted that runtime changes to brightness only affect the direct lighting. Indirect (bounced) lighting, since it is pre-calculated by Lightmass, will not change.

Of the three light mobilities, Stationary lights tend to have the highest quality, medium mutability, and medium performance cost.
[/EXCERPT:Glossary_Stationary_Lights]
[/COMMENT]