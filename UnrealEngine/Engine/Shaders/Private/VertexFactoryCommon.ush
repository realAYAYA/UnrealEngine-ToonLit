// Copyright Epic Games, Inc. All Rights Reserved.

#include "Common.ush"
#include "SceneData.ush"

//
// Functions to get instanced stereo properties from a VF. They have to be macros as hlslcc does not support member functions (as of May 2022 it is still used for a couple platforms),
// whereas defining them as overloaded functions (taking VF as parameter) doesn't work as some VFs can be identical for typeless HLSL overloading rules.
//
#if INSTANCED_STEREO
	#define GetInstanceIdFromVF(VFInput)				(VFInput.InstanceId)
	#define GetEyeIndexFromVF(VFInput)					(IsInstancedStereo() ? (GetInstanceIdFromVF(VFInput) & 1) : 0)
	#define ResolveViewFromVF(VFInput)					(ResolveView(GetEyeIndexFromVF(VFInput)))
#else
	#define GetInstanceIdFromVF(VFInput)				(0)
	#define GetEyeIndexFromVF(VFInput)					(0)
	#define ResolveViewFromVF(VFInput)					(ResolveView())
#endif // INSTANCED_STEREO


//  
// Required VF inputs to support dynamic instancing 
//
#if (VF_USE_PRIMITIVE_SCENE_DATA == 1)
	#define VF_GPUSCENE_DECLARE_INPUT_BLOCK(Attr0) \
		uint InstanceIdOffset : ATTRIBUTE##Attr0; \
		uint DrawInstanceId : SV_InstanceID;
	
	#define VF_GPUSCENE_GET_INTERMEDIATES(VFInput) \
		GetSceneDataIntermediates( \
			VFInput.InstanceIdOffset, \
			VFInput.DrawInstanceId)

	#define VF_GPUSCENE_GET_LIGHTMAP_UV_SCALE_BIAS(VFInput, LightmapDataIndex) \
		GetLightmapData(LightmapDataIndex).LightMapCoordinateScaleBias
	
	#define VF_GPUSCENE_GET_SHADOWMAP_UV_SCALE_BIAS(VFInput, LightmapDataIndex) \
		GetLightmapData(LightmapDataIndex).ShadowMapCoordinateScaleBias

	// GPUCULL_TODO: Makes use of DynamicDraw workaround, should instead refactor VF interfaces and provide the instance ID data directly.
	#define VF_GPUSCENE_SET_INPUT_FOR_RT(_VFInputOut_, _PrimitiveId_, _DrawInstanceId_) \
		_VFInputOut_.InstanceIdOffset = (_PrimitiveId_) | VF_TREAT_INSTANCE_ID_OFFSET_AS_PRIMITIVE_ID_FLAG;	\
		_VFInputOut_.DrawInstanceId = _DrawInstanceId_;

	#define VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK()

	#undef GetInstanceIdFromVF
	#define GetInstanceIdFromVF(VFInput)				(VFInput.DrawInstanceId)

#elif (VF_USE_PRIMITIVE_SCENE_DATA == 2)	
	#define VF_GPUSCENE_DECLARE_INPUT_BLOCK(Attr0) \
		float4 InstanceOrigin : ATTRIBUTE8; \
		float4 InstanceTransform1 : ATTRIBUTE9; \
		float4 InstanceTransform2 : ATTRIBUTE10; \
		float4 InstanceTransform3 : ATTRIBUTE11; \
		float4 InstanceAuxData : ATTRIBUTE12; \
		uint DrawInstanceId : SV_InstanceID;

	#define VF_GPUSCENE_GET_INTERMEDIATES(VFInput) \
		GetSceneDataIntermediates( \
			VFInput.DrawInstanceId, \
			VFInput.InstanceOrigin,\
			VFInput.InstanceTransform1, \
			VFInput.InstanceTransform2, \
			VFInput.InstanceTransform3, \
			VFInput.InstanceAuxData)

	#define VF_GPUSCENE_GET_LIGHTMAP_UV_SCALE_BIAS(VFInput, LightmapDataIndex) \
		float4(UnpackUnorm2x16(asuint(VFInput.InstanceAuxData.x)), UnpackSnorm2x16(asuint(VFInput.InstanceAuxData.y)))
	
	#define VF_GPUSCENE_GET_SHADOWMAP_UV_SCALE_BIAS(VFInput, LightmapDataIndex) \
		float4(UnpackUnorm2x16(asuint(VFInput.InstanceAuxData.z)), UnpackSnorm2x16(asuint(VFInput.InstanceAuxData.w)))

	#define VF_GPUSCENE_SET_INPUT_FOR_RT(_VFInputOut_, _PrimitiveId_, _DrawInstanceId_)

	#define VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK()

	#undef GetInstanceIdFromVF
	#define GetInstanceIdFromVF(VFInput)				(VFInput.DrawInstanceId)

#else
	#define VF_GPUSCENE_DECLARE_INPUT_BLOCK(Attr0) 
	#define VF_GPUSCENE_GET_INTERMEDIATES(VFInput) GetSceneDataIntermediates()
	#define VF_GPUSCENE_GET_LIGHTMAP_UV_SCALE_BIAS(VFInput, LightmapDataIndex) PrecomputedLightingBuffer.LightMapCoordinateScaleBias
	#define VF_GPUSCENE_GET_SHADOWMAP_UV_SCALE_BIAS(VFInput, LightmapDataIndex) PrecomputedLightingBuffer.ShadowMapCoordinateScaleBias
	#define VF_GPUSCENE_SET_INPUT_FOR_RT(_VFInputOut_, _PrimitiveId_, _DrawInstanceId_)

	#if INSTANCED_STEREO
		#define VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK() \
			uint InstanceId : SV_InstanceID;
	#else
		#define VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK()
	#endif 

#endif

// In case other paths in the above #if miss the declaration, catch this early
#if !defined(VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK)
	#error VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK() should be defined for a vertex factory
#endif

#if !defined(GetInstanceIdFromVF)
	#error GetInstanceIdFromVF() should be defined.
#endif

#if !defined(GetEyeIndexFromVF)
	#error GetEyeIndexFromVF() should be defined.
#endif

#if !defined(ResolveViewFromVF)
	#error ResolveViewFromVF() should be defined.
#endif


FLWCVector3 TransformLocalToWorld(float3 LocalPosition, FLWCMatrix LocalToWorld)
{
	return LWCMultiply(LocalPosition, LocalToWorld);
}

FLWCVector3 TransformLocalToWorld(float3 LocalPosition)
{
	return TransformLocalToWorld(LocalPosition, GetPrimitiveDataFromUniformBuffer().LocalToWorld);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, FLWCMatrix LocalToWorld)
{
	// Multiply local position with LocalToWorld 3x3 first for high precision rotation and scale, then move the world position part to translated world before adding it  
	float3 RotatedScaledPosition = (LocalPosition.xxx * LocalToWorld.M[0].xyz + LocalPosition.yyy * LocalToWorld.M[1].xyz + LocalPosition.zzz * LocalToWorld.M[2].xyz);
	FLWCVector3 TranslatedWorldPositionOrigin = LWCAdd(LWCGetOrigin(LocalToWorld), ResolvedView.PreViewTranslation);
	return float4(RotatedScaledPosition + LWCToFloat(TranslatedWorldPositionOrigin), 1.0f);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, float4x4 LocalToWorld)
{
	return TransformLocalToTranslatedWorld(LocalPosition, LWCPromote(LocalToWorld));
}

float4 TransformPreviousLocalPositionToTranslatedWorld(float3 PrevLocalPosition, FLWCMatrix PrevLocalToWorld)
{
	// Multiply local position with PrevLocalToWorld 3x3 first for high precision rotation and scale, then move the world position part to translated world before adding it  
	float3 RotatedScaledPosition = (PrevLocalPosition.xxx * PrevLocalToWorld.M[0].xyz + PrevLocalPosition.yyy * PrevLocalToWorld.M[1].xyz + PrevLocalPosition.zzz * PrevLocalToWorld.M[2].xyz);
	FLWCVector3 TranslatedPreviousWorldPositionOrigin = LWCAdd(LWCGetOrigin(PrevLocalToWorld), ResolvedView.PrevPreViewTranslation);
	return float4(RotatedScaledPosition + LWCToFloat(TranslatedPreviousWorldPositionOrigin), 1.0f);
}

float4 TransformPreviousLocalPositionToTranslatedWorld(float3 PrevLocalPosition, float4x4 PrevLocalToWorld)
{
	return TransformPreviousLocalPositionToTranslatedWorld(PrevLocalPosition, LWCPromote(PrevLocalToWorld));
}

float3 RotateLocalToWorld(float3 LocalDirection, float3x3 LocalToWorld, float3 InvScale)
{
	return
		InvScale.x * LocalToWorld[0] * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1] * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2] * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection, float4x4 LocalToWorld, float3 InvScale)
{
	return RotateLocalToWorld(LocalDirection, (float3x3)LocalToWorld, InvScale);
}

float3 RotateLocalToWorld(float3 LocalDirection, FLWCMatrix LocalToWorld, float3 InvScale)
{
	return RotateLocalToWorld(LocalDirection, LWCToFloat3x3(LocalToWorld), InvScale);
}

#if !VF_USE_PRIMITIVE_SCENE_DATA

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	return TransformLocalToTranslatedWorld(LocalPosition, GetPrimitiveDataFromUniformBuffer().LocalToWorld);
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	FPrimitiveSceneData PrimitiveData = GetPrimitiveDataFromUniformBuffer();
	return RotateLocalToWorld(LocalDirection, PrimitiveData.LocalToWorld, PrimitiveData.InvNonUniformScale);
}

float3 RotateWorldToLocal(float3 WorldDirection)
{
	FPrimitiveSceneData PrimitiveData = GetPrimitiveDataFromUniformBuffer();
	const float3 InvScale = PrimitiveData.InvNonUniformScale;
	const float3x3 LocalToWorld = LWCToFloat3x3(PrimitiveData.LocalToWorld);
	float3x3 InvRot = {
		InvScale.x * LocalToWorld[0],
		InvScale.y * LocalToWorld[1],
		InvScale.z * LocalToWorld[2]
	};
	InvRot = transpose(InvRot);
	return mul(WorldDirection, InvRot);
}

#endif // !VF_USE_PRIMITIVE_SCENE_DATA

// Octahedron Normal Vectors
// [Cigolle 2014, "A Survey of Efficient Representations for Independent Unit Vectors"]
//						Mean	Max
// oct		8:8			0.33709 0.94424
// snorm	8:8:8		0.17015 0.38588
// oct		10:10		0.08380 0.23467
// snorm	10:10:10	0.04228 0.09598
// oct		12:12		0.02091 0.05874

float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * select( N.xy >= 0, float2(1,1), float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * select( N.xy >= 0, float2(1,1), float2(-1,-1) );
	}
	return normalize(N);
}
