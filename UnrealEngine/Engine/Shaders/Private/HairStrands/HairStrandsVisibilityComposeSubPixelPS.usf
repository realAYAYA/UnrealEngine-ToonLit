// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../SceneTexturesCommon.ush"
#include "../DeferredShadingCommon.ush"
#include "HairStrandsVisibilityCommon.ush"   

////////////////////////////////////////////////////////////////////////////////////////////////

#if SHADER_FASTRESOLVE_MASK

Texture2D<uint> ResolveMaskTexture;

void FastResolvePS(in FScreenVertexOutput Input)
{
	const uint2 PixelCoord = floor(Input.Position.xy);
	const bool bNeedFastResolve = ResolveMaskTexture.Load(uint3(PixelCoord, 0)) > 0;

	if (!bNeedFastResolve)
		discard;
}

#endif // SHADER_FASTRESOLVE_MASK

////////////////////////////////////////////////////////////////////////////////////////////////

#if SHADER_COMPOSE_SAMPLE

#include "../HeightFogCommon.ush"
#include "../SkyAtmosphereCommon.ush"

int2 OutputResolution;
uint bComposeDofDepth;

Texture2D<float>	HairDOFDepthTexture;
Texture2D<float4>	HairLightingSampleBuffer;

uint TemporalLayerCount;
Texture2D HairTemporalAccumulationTexture;

float4 EvaluateVolumetric(float3 WorldPosition, float SceneDepth)
{
	const float3 CameraRelative_WorldPosition = WorldPosition - LWCHackToFloat(PrimaryView.WorldCameraOrigin);
	float4 HeightFogging = CalculateHeightFog(CameraRelative_WorldPosition);
	float4 Fogging = HeightFogging;

	if (FogStruct.ApplyVolumetricFog > 0)
	{
		const uint EyeIndex = 0;
		float3 VolumeUV = ComputeVolumeUV_DEPRECATED(WorldPosition, LWCHackToFloat(PrimaryView.WorldToClip));
		Fogging = CombineVolumetricFog(HeightFogging, VolumeUV, EyeIndex, SceneDepth);
	}

	Fogging.rgb *= View.PreExposure;

	if (View.SkyAtmosphereApplyCameraAerialPerspectiveVolume > 0.0f)
	{
		float4 NDCPosition = mul(float4(WorldPosition.xyz, 1), LWCHackToFloat(PrimaryView.WorldToClip));

		// Sample the aerial perspective (AP).
		Fogging = GetAerialPerspectiveLuminanceTransmittanceWithFogOver(
			View.RealTimeReflectionCapture, 
			View.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,
			NDCPosition, 
			CameraRelative_WorldPosition * CM_TO_SKY_UNIT,
			View.CameraAerialPerspectiveVolume, 
			View.CameraAerialPerspectiveVolumeSampler,
			View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,
			View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,
			View.SkyAtmosphereAerialPerspectiveStartDepthKm,
			View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,
			View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,
			View.OneOverPreExposure, 
			Fogging);
	}

	return Fogging;
}

void ComposeSamplePS(
	in FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0,
	out float  OutDepth : SV_DEPTH)
#if PERMUTATION_DEBUG == 0
{
	OutColor = 0.0f;
	const uint3 PixelCoord = uint3(floor(Input.Position.xy), 0);
	
	const float HairDeviceZ = HairStrands.HairOnlyDepthTexture.Load(PixelCoord).x;

#if PERMUTATION_TEMPORAL == 1
	OutColor.rgba = HairTemporalAccumulationTexture.Load(PixelCoord);

	// Approximation: convert running temporal average layer coverage (alpha) to average haircount, multiply by number of layers to get haircount sum, then convert haircount sum to final coverage using equation: Coverage = saturate(min(1.0 - pow(2.71828, -HairCount/1000.0), 1.0) / 0.98);
	float HairCountAverage = (log(1.0 - (OutColor.a * 0.98)) / log(2.71828))*-1000.0;
	float HairCountSum = HairCountAverage*TemporalLayerCount;
	OutColor.a = saturate(min(1.0 - pow(2.71828, -HairCountSum/1000.0), 1.0) / 0.98);

#else // PERMUTATION_TEMPORAL
	const FNodeDesc NodeDesc = DecodeNodeDesc(HairStrands.HairSampleOffset.Load(PixelCoord));
	if (NodeDesc.Count == 0)
	{
		discard;
	}

	const float PixelCoverage = min(HairStrands.HairCoverageTexture.Load(PixelCoord), 1);
	if (PixelCoverage == 0)
	{
		discard;
	}

	const uint TotalNodeCount = HairStrands.HairSampleCount.Load(uint3(0, 0, 0));
	const uint Resolution = uint(ceil(sqrt(float(TotalNodeCount))));

	const float3 ClosetPointWorldPosition = LWCHackToFloat(SvPositionToWorld(float4(Input.Position.xy, HairDeviceZ, 1.0)));
	const float4 Volumetric = EvaluateVolumetric(ClosetPointWorldPosition, ConvertFromDeviceZ(HairDeviceZ));

	float3 LocalAccColor = 0;
	LOOP
	for (uint SampleIt = 0; SampleIt < NodeDesc.Count; SampleIt++)
	{
		const uint LocalOffset = NodeDesc.Offset + SampleIt;
		const uint2 Coord = uint2(LocalOffset % Resolution, LocalOffset / Resolution);
		LocalAccColor += HairLightingSampleBuffer.Load(uint3(Coord, 0)).xyz;
	}
	OutColor.rgb = LocalAccColor * Volumetric.a + Volumetric.rgb;

	OutColor.rgb *= PixelCoverage;
	OutColor.a = PixelCoverage;
#endif // PERMUTATION_TEMPORAL

	OutDepth = HairDeviceZ;
	if (bComposeDofDepth)
	{
		OutDepth = HairDOFDepthTexture.Load(PixelCoord);
	}
}
#else // PERMUTATION_DEBUG == 1
{
	OutColor = 0.0f;
	const uint3 PixelCoord = uint3(floor(Input.Position.xy), 0);

	const FNodeDesc NodeDesc = DecodeNodeDesc(HairStrands.HairSampleOffset.Load(PixelCoord));
	if (NodeDesc.Count == 0)
	{
		discard;
	}

	const float PixelCoverage = min(HairStrands.HairCoverageTexture.Load(PixelCoord), 1);
	if (PixelCoverage == 0)
		discard;

	const float HairDeviceZ = HairStrands.HairOnlyDepthTexture.Load(PixelCoord).x;

	float3 LocalAccColor = 0;
	LOOP
	for (uint SampleIt = 0; SampleIt < NodeDesc.Count; SampleIt++)
	{
		const FPackedHairSample PackedSample = HairStrands.HairSampleData[NodeDesc.Offset + SampleIt];
		const FHairSample Sample = UnpackHairSample(PackedSample);
		const float LocalCoverage = From8bitCoverage(Sample.Coverage8bit);
		LocalAccColor += LocalCoverage * Sample.BaseColor;
	}
	OutColor.rgb = LocalAccColor;

	OutColor.rgb *= PixelCoverage;
	OutColor.a = PixelCoverage;
	OutDepth = HairDeviceZ;
}
#endif

#endif // SHADER_COMPOSE_SAMPLE

////////////////////////////////////////////////////////////////////////////////////////////////

#if SHADER_DOFDEPTH
#include "../CircleDOFCommon.ush"

// Included from DeferredLightingCommon now
//Texture2D<float>	SceneDepthTexture;

void DOFDepthPS(
	in FScreenVertexOutput Input,
	out float OutTexture : SV_Target0)
{
	OutTexture = 0.0f;
	const uint3 PixelCoord = uint3(floor(Input.Position.xy), 0);

	const float PixelCoverage = min(HairStrands.HairCoverageTexture.Load(PixelCoord), 1);
	if (PixelCoverage == 0)
	{
		return;
	}
	   
	const float HalfResToFullRes = 2;

	float SceneDeviceZ = 0;
	float SceneDepth = 0;
	float SceneCoC = 0; // Radius in pixel
	{
		SceneDeviceZ = SceneDepthTexture.Load(PixelCoord).x;
		SceneDepth = ConvertFromDeviceZ(SceneDeviceZ);
		SceneDeviceZ = 1 - SceneDeviceZ;
		SceneCoC = DepthToCoc(SceneDepth) * HalfResToFullRes;
	}

	float HairLuminance = 0;
	float HairDeviceZ = 0;
	float HairDepth = 0;
	float HairCoC = 0; // Radius in pixel
	{
		HairDeviceZ = HairStrands.HairOnlyDepthTexture.Load(PixelCoord).x;
		HairDepth = ConvertFromDeviceZ(HairDeviceZ);
		HairDeviceZ = 1 - HairDeviceZ;
		HairCoC = DepthToCoc(HairDepth) * HalfResToFullRes;
	}

	const float OutDeviceZ = lerp(SceneDeviceZ, HairDeviceZ, PixelCoverage);
	OutTexture = 1 - OutDeviceZ;
}

#endif // SHADER_DOFDEPTH
