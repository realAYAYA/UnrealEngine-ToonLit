// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
VirtualShadowMapMaskBitsCommon.ush:
=============================================================================*/

#pragma once

#include "../Common.ush"
#include "../SceneTexturesCommon.ush"
#include "../LightShaderParameters.ush"
#include "../LightGridCommon.ush"

float GetVirtualShadowMapMaskForLight(
	Texture2D<uint4> ShadowMaskBits,
	uint2 PixelPos,
	float SceneDepth,
	uint EyeIndex,
	int VirtualShadowMapId)
{
	// Light grid is relative to the view
	const uint2 LocalPixelPos = PixelPos.xy - uint2(View.ViewRectMinAndSize.xy);

	uint GridLinearIndex = ComputeLightGridCellIndex(LocalPixelPos, SceneDepth, EyeIndex);
	const FCulledLightsGridData CulledLightGridData = GetCulledLightsGrid(GridLinearIndex, EyeIndex);

	// We can only handle so many lights in our output encoding right now, so no purpose in computing more
	uint LightCount = min(GetPackedShadowMaskMaxLightCount(), CulledLightGridData.NumLocalLights);

	uint Index = 0;
	for (; Index < LightCount; ++Index)
	{
		const FLocalLightData LightData = GetLocalLightData(CulledLightGridData.DataStartIndex + Index, EyeIndex);
		if (LightData.VirtualShadowMapId == VirtualShadowMapId)
		{
			break;
		}
	}

	float UnpackedShadowMask = 1.0f;
	if (Index < LightCount)
	{
		uint4 ShadowMask = ~ShadowMaskBits[PixelPos];
		// TODO: Dither!
		UnpackedShadowMask = UnpackShadowMask(ShadowMask, Index);
	}
	else
	{
		// Not found!
	}

	return UnpackedShadowMask;
}
