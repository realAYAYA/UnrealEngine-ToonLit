// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once


//------------------------------------------------------- INCLUDE

#include "../Common.ush"
#include "../MonteCarlo.ush"
#include "../BRDF.ush"
#include "../DeferredShadingCommon.ush"
#include "../CommonViewUniformBuffer.ush"


//------------------------------------------------------- FUNCTIONS

float ComputeDenoisingCoc(float DistanceCameraToPixel, float ClosestHitDistance)
{
	return ClosestHitDistance / (DistanceCameraToPixel + ClosestHitDistance);
}

float ComputeHitDistanceFromDenoisingCoc(float DistanceCameraToPixel, float MaxCoc)
{
	return MaxCoc * DistanceCameraToPixel / (1.0 - MaxCoc);
}

void ComputeSpecularLobeAngles(float3 V, float3 N, float Roughness, out float OutMajorRoughnessLobeAngle, out float OutMinorRoughnessLobeAngle)
{
	// Measure the angle that only truncate 10% of D_GGX's tale.
	const float E = (1.0 - 0.5);
	const float SqrtE = sqrt(E);

	const float2 ArrayE[4] = {
		float2( SqrtE, 0.0),
		float2(-SqrtE, 0.0),
		float2(0.0,  SqrtE),
		float2(0.0, -SqrtE),
	};
		
	float a2 = Pow4(Roughness);
	
	float3x3 TangentBasis = GetTangentBasis(N);
	float3 TangentV = mul(TangentBasis, V);
		
	// TODO(Denoiser): optimise using lobe symetry along anisotropy major axis.
	float3 TangentL[4];
	UNROLL_N(4)
	for (uint i = 0; i < 4; i++)
	{
		// TODO(Denoiser): optimise VALU here.
		float3 TangentH = ImportanceSampleVisibleGGX(ArrayE[i], a2, TangentV).xyz;
		TangentL[i] = 2 * dot(TangentV, TangentH) * TangentH - TangentV;
	}
	
	OutMajorRoughnessLobeAngle = acos(dot(TangentL[2], TangentL[3]));
	OutMinorRoughnessLobeAngle = acos(dot(TangentL[0], TangentL[1]));
}

/** Return the size of the bluring radius caused by a lobe in ViewportUV.x space from radian opening angle. */
float LobeAngleToViewportRadius(float LobeAngle)
{
	return tan(0.5 * LobeAngle) * GetCotanHalfFieldOfView().x;
}
