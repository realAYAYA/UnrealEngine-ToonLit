// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

void CalcInterpolants(in FRayCone RayCone, in FRayTracingIntersectionAttributes Attributes, out FVertexFactoryInterpolantsVSToPS Interpolants, out float3 FaceNormal)
{
	FVertexFactoryRayTracingInterpolants Interpolated = (FVertexFactoryRayTracingInterpolants)0;

	float3 WorldPositions[3];
	float2 TexCoords[3];

	const float2 Barycentrics = Attributes.GetBarycentrics();

	float3 Weights = float3(
		1 - Barycentrics.x - Barycentrics.y,
		Barycentrics.x,
		Barycentrics.y);

	for (int i = 0; i < 3; i++)
	{
		FVertexFactoryInput Input = LoadVertexFactoryInputForHGS(PrimitiveIndex(), i);

		FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
		float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
		float4 WorldPositionExcludingWPO = VertexFactoryGetWorldPosition(Input, VFIntermediates);
		FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPositionExcludingWPO.xyz, TangentToLocal);

		FVertexFactoryRayTracingInterpolants PerVertexInterpolants = VertexFactoryGetRayTracingInterpolants(Input, VFIntermediates, VertexParameters);
		Interpolated = VertexFactoryInterpolate(PerVertexInterpolants, Weights[i], Interpolated, 1.0);

		WorldPositions[i] = WorldPositionExcludingWPO.xyz;
		TexCoords[i] = VertexFactoryGetRayTracingTextureCoordinate(PerVertexInterpolants);
	}

	Interpolants = VertexFactoryAssignInterpolants(Interpolated);

	float3 PA = WorldPositions[1] - WorldPositions[0];
	float3 PB = WorldPositions[2] - WorldPositions[0];
	float3 Unnormalized = cross(PB, PA);
	float InvWorldArea = rsqrt(dot(Unnormalized, Unnormalized));
	FaceNormal = Unnormalized * InvWorldArea;

#if USE_RAYTRACED_TEXTURE_RAYCONE_LOD && (NUM_TEX_COORD_INTERPOLATORS || USE_PARTICLE_SUBUVS) && !VERTEX_FACTORY_MODIFIES_INTERPOLATION
	float2 TA = TexCoords[1] - TexCoords[0];
	float2 TB = TexCoords[2] - TexCoords[0];
	float UvArea = abs((TA.x * TB.y) - (TA.y * TB.x));

	float RayConeCapArea = RayCone.Width * RayCone.Width * (1.0f / (2.0f * PI));
	float3 RayDir = WorldRayDirection();
	float RaySlope = dot(RayDir, FaceNormal);
	const float SmallValue = 1.0 / 16777216.0;
	GlobalRayCone_TexArea = (UvArea * InvWorldArea * RayConeCapArea) / max(RaySlope * RaySlope, SmallValue);
	GlobalRayCone_TexArea = max(GlobalRayCone_TexArea, SmallValue);
#endif
}

// simplified call when Geometric Normal is not needed
void CalcInterpolants(in FRayCone RayCone, in FRayTracingIntersectionAttributes Attributes, out FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float3 GeoNormal = 0; // unused
	CalcInterpolants(RayCone, Attributes, Interpolants, GeoNormal);
}