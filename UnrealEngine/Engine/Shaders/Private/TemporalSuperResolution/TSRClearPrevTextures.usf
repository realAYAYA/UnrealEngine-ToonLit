// Copyright Epic Games, Inc. All Rights Reserved.

#include "TSRCommon.ush"


//------------------------------------------------------- CONFIG

#define TILE_SIZE 8

#define TILE_ROWS 2


//------------------------------------------------------- PARAMETERS

RWTexture2D<uint> PrevUseCountOutput;
RWTexture2D<uint> PrevClosestDepthOutput;
RWTexture2D<uint> SubpixelDepthOutput;


//------------------------------------------------------- ENTRY POINT

[numthreads(TILE_SIZE * TILE_SIZE, 1, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	uint2 GroupThreadId = uint2(GroupThreadIndex % TILE_SIZE, GroupThreadIndex / TILE_SIZE);
	uint2 OutputPixelOrigin = (InputInfo_ViewportMin + GroupId * uint(TILE_SIZE * TILE_ROWS)) + GroupThreadId;

	UNROLL_N(TILE_ROWS)
	for (uint y = 0; y < TILE_ROWS; y++)
	{
		UNROLL_N(TILE_ROWS)
		for (uint x = 0; x < TILE_ROWS; x++)
		{
			uint2 PixelOffset = uint2(x, y) * TILE_SIZE;
			uint2 InputPixelPos = OutputPixelOrigin + PixelOffset;
			uint2 PrevUseCountPixelPos = InputPixelPos;

			InputPixelPos.x = select(all(InputPixelPos < InputInfo_ViewportMax), InputPixelPos.x, uint(~0));

			#if COMPRESS_PREV_USE_COUNT
				const uint2 PrevUseCountMaxPixelPos = InputInfo_ViewportMin + uint2(InputInfo_ViewportMax - InputInfo_ViewportMin + 1) / 2 + 8;
			#else
				const uint2 PrevUseCountMaxPixelPos = InputInfo_ViewportMax;
			#endif
			PrevUseCountPixelPos.x = select(all(PrevUseCountPixelPos < PrevUseCountMaxPixelPos), PrevUseCountPixelPos.x, uint(~0));

			PrevUseCountOutput[PrevUseCountPixelPos] = 0;
			PrevClosestDepthOutput[InputPixelPos] = 0;
			SubpixelDepthOutput[InputPixelPos] = 0;
		}
	}
}
