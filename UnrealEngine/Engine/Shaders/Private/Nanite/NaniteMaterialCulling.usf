// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../SceneData.ush"
#include "../DeferredShadingCommon.ush"

#include "NaniteDataDecode.ush"
#include "NaniteAttributeDecode.ush"

#define NANITE_MAX_MATERIAL_SLOTS (16u * 1024u)
#define NANITE_MAX_MATERIAL_BINS (NANITE_MAX_MATERIAL_SLOTS / 32u)

Texture2D<UlongType> VisBuffer64;
ByteAddressBuffer MaterialSlotTable;
ByteAddressBuffer MaterialDepthTable;
Texture2D<uint> MaterialResolve;

RWBuffer<uint> MaterialIndirectArgs;
RWStructuredBuffer<uint> MaterialTileRemap;

// .xy = min, .zw = max
uint4 ViewRect;

uint  MaterialRemapCount;
uint  MaterialTileCount;
uint  MaterialSlotCount;
uint  MaterialBinCount;

uint  RowTileCount;
uint2 FetchClamp;

groupshared uint  TileMaterialCount;
groupshared uint  TileMaterialBins[NANITE_MAX_MATERIAL_BINS]; // 16384 material slot max (1 bit per material slot)

static const uint IndirectArgStride = DRAW_INDEXED_INDIRECT_UINT_COUNT + DISPATCH_INDIRECT_UINT_COUNT;

[numthreads(16, 16, 1)]
void ClassifyMaterials(uint3 ThreadIndex : SV_GroupThreadID, uint3 GroupID : SV_GroupID)
{
	const uint TileSlotOffset = ((ThreadIndex.y * 16) + ThreadIndex.x);
	const uint TileBin1Offset = TileSlotOffset + 0;
	const uint TileBin2Offset = TileSlotOffset + 256;

	const uint2 GroupPixelStart = ThreadIndex.xy + GroupID.xy * 64u + ViewRect.xy;

	if (all(ThreadIndex.xy == 0u))
	{
		TileMaterialCount = 0;
	}

	if (TileBin1Offset < MaterialBinCount)
	{
		TileMaterialBins[TileBin1Offset] = 0;
		if (TileBin2Offset < MaterialBinCount)
		{
			TileMaterialBins[TileBin2Offset] = 0;
		}
	}

	GroupMemoryBarrierWithGroupSync();

	for (uint BlockY = 0; BlockY < 64u; BlockY += 16)
	{
		for (uint BlockX = 0; BlockX < 64u; BlockX += 16)
		{
			uint2 FetchPos = GroupPixelStart + uint2(BlockX, BlockY);
			FetchPos = min(FetchPos, FetchClamp);

	#if MATERIAL_RESOLVE
			bool IsNanitePixel = false;
			bool IsDecalReceiver = false;
			uint MaterialSlot = 0;
			UnpackMaterialResolve(MaterialResolve[FetchPos], IsNanitePixel, IsDecalReceiver, MaterialSlot);

			if (IsNanitePixel)
			{
				const uint TileBinIndex = MaterialSlot >> 5u;
				const uint TileBinOffset = MaterialSlot & 31u;
				const uint TileBinUsage = 1u << TileBinOffset;
				InterlockedOr(TileMaterialBins[TileBinIndex], TileBinUsage);
			}
	#else
			UlongType VisPixel = VisBuffer64[FetchPos];

			uint DepthInt = 0;
			uint VisibleClusterIndex = 0;
			uint TriIndex = 0;
			UnpackVisPixel(VisPixel, DepthInt, VisibleClusterIndex, TriIndex);

			const bool ValidClusterIndex = (VisibleClusterIndex != 0xFFFFFFFF);
		#if COMPILER_SUPPORTS_WAVE_VOTE
			const bool TileHasNanite = WaveActiveAnyTrue(ValidClusterIndex);
			if (TileHasNanite)
		#endif
			{
				if (ValidClusterIndex)
				{
					FVisibleCluster VisibleCluster = GetVisibleCluster(VisibleClusterIndex);
					FInstanceSceneData InstanceData = GetInstanceSceneData(VisibleCluster, false);
					FCluster ClusterData = GetCluster(VisibleCluster.PageIndex, VisibleCluster.ClusterIndex);
					const uint MaterialSlot = GetMaterialShadingSlot(ClusterData, InstanceData.PrimitiveId, TriIndex, MaterialSlotTable);

				// Scalarize tile classify if all lanes ballot the same material slot index
				#if COMPILER_SUPPORTS_WAVE_VOTE
					const uint FirstMaterialSlot = ToScalarMemory(WaveReadLaneFirst(MaterialSlot));
					if (WaveActiveAllTrue(FirstMaterialSlot == MaterialSlot))
					{
						if (WaveIsFirstLane())
						{
							const uint TileBinIndex  = FirstMaterialSlot >> 5u;
							const uint TileBinOffset = FirstMaterialSlot & 31u;
							const uint TileBinUsage  = 1u << TileBinOffset;
							InterlockedOr(TileMaterialBins[TileBinIndex], TileBinUsage);
						}
					}
					else
					{
				#endif
						const uint TileBinIndex  = MaterialSlot >> 5u;
						const uint TileBinOffset = MaterialSlot & 31u;
						const uint TileBinUsage  = 1u << TileBinOffset;
						InterlockedOr(TileMaterialBins[TileBinIndex], TileBinUsage);
				#if COMPILER_SUPPORTS_WAVE_VOTE
					}
				#endif

					// TODO: Pull out depth into custom HiZ?
					//const uint MaterialDepthId = GetMaterialDepthId(MaterialSlot, MaterialDepthTable);
				}
			}
	#endif // MATERIAL_RESOLVE
		}
	}

	GroupMemoryBarrierWithGroupSync();

	const uint TileLinearOffset  = (GroupID.y * RowTileCount) + GroupID.x;
	const uint TileRemapBinIndex = TileLinearOffset >> 5u;

	BRANCH
	if (TileBin1Offset < MaterialBinCount)
	{
		uint TileBin1 = TileMaterialBins[TileBin1Offset];
		if (TileBin1 != 0u)
		{
			InterlockedAdd(TileMaterialCount, countbits(TileBin1));

			const uint MaterialSlot1Base = TileBin1Offset * 32u;
			while (TileBin1 != 0)
			{
				const uint Bin1Index = firstbitlow(TileBin1);
				TileBin1 &= ~(1u << Bin1Index);

				const uint MaterialSlot1 = MaterialSlot1Base + Bin1Index;
				InterlockedAdd(MaterialIndirectArgs[MaterialSlot1 * IndirectArgStride + 1], 1);

				const uint RemapBaseOffset = (MaterialRemapCount * MaterialSlot1);
				const uint RemapBinOffset  = TileLinearOffset & 31u;
				const uint RemapBinUsage   = 1u << RemapBinOffset;

				InterlockedOr(MaterialTileRemap[RemapBaseOffset + TileRemapBinIndex], RemapBinUsage);
			}
		}

		BRANCH
		if (TileBin2Offset < MaterialBinCount)
		{
			uint TileBin2 = TileMaterialBins[TileBin2Offset];
			if (TileBin2 != 0)
			{
				InterlockedAdd(TileMaterialCount, countbits(TileBin2));

				const uint MaterialSlot2Base = TileBin2Offset * 32u;
				while (TileBin2 != 0)
				{
					const uint Bin2Index = firstbitlow(TileBin2);
					TileBin2 &= ~(1u << Bin2Index);

					const uint MaterialSlot2 = MaterialSlot2Base + Bin2Index;
					InterlockedAdd(MaterialIndirectArgs[MaterialSlot2 * IndirectArgStride + 1], 1);

					const uint RemapBaseOffset = (MaterialRemapCount * MaterialSlot2);
					const uint RemapBinOffset  = TileLinearOffset & 31u;
					const uint RemapBinUsage   = 1u << RemapBinOffset;
					InterlockedOr(MaterialTileRemap[RemapBaseOffset + TileRemapBinIndex], RemapBinUsage);
				}
			}
		}
	}
}

uint TopologyIndexCount;

[numthreads(64, 1, 1)]
void InitializeMaterials(uint3 ThreadIndex : SV_DispatchThreadID)
{
	const uint MaterialSlot = ThreadIndex.x;

	if (MaterialSlot < MaterialSlotCount)
	{
		static const uint IndirectArgOffset = MaterialSlot * IndirectArgStride;

		// TODO: Store4(0) with a byte address buffer to avoid any SPI bottlenecks

		MaterialIndirectArgs[IndirectArgOffset + 0] = TopologyIndexCount; // IndexCountPerInstance: 6 for tri prim, 3 for rect prim
		MaterialIndirectArgs[IndirectArgOffset + 1] = 0; // InstanceCount: Populated by material tile classification (# of surviving tiles per material)
		MaterialIndirectArgs[IndirectArgOffset + 2] = 0; // StartIndexLocation
		MaterialIndirectArgs[IndirectArgOffset + 3] = 0; // BaseVertexLocation
		MaterialIndirectArgs[IndirectArgOffset + 4] = 0; // StartInstanceLocation

		MaterialIndirectArgs[IndirectArgOffset + 5] = 0; // ThreadGroupCountX: Populated by material tile classification (# of surviving tile thread groups per material)
		MaterialIndirectArgs[IndirectArgOffset + 6] = 0; // ThreadGroupCountY
		MaterialIndirectArgs[IndirectArgOffset + 7] = 1; // ThreadGroupCountZ

		for (uint RemapIndex = 0; RemapIndex < MaterialRemapCount; ++RemapIndex)
		{
			MaterialTileRemap[(MaterialRemapCount * MaterialSlot) + RemapIndex] = 0u;
		}
	}
}

[numthreads(64, 1, 1)]
void FinalizeMaterials(uint3 ThreadIndex : SV_DispatchThreadID)
{
	const uint MaterialSlot = ThreadIndex.x;

	if (MaterialSlot < MaterialSlotCount)
	{
		static const uint IndirectArgOffset = MaterialSlot * IndirectArgStride;

		const uint MaterialTileCount = MaterialIndirectArgs[IndirectArgOffset + 1];

		MaterialIndirectArgs[IndirectArgOffset + 5] = (MaterialTileCount + 15u) / 16u; // ThreadGroupCountX
		MaterialIndirectArgs[IndirectArgOffset + 6] = (MaterialTileCount + 15u) / 16u; // ThreadGroupCountY
	}
}