// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#define SUPPORT_CONTACT_SHADOWS 0
#include "../DeferredLightingCommon.ush"

#include "LumenCardCommon.ush"
#include "LumenCardTile.ush"
#include "LumenSceneDirectLighting.ush"

#ifndef THREADGROUP_SIZE
#define THREADGROUP_SIZE 1
#endif

#ifndef MAX_LIGHT_SAMPLES
#define MAX_LIGHT_SAMPLES 1
#endif

StructuredBuffer<uint> CardPageIndexAllocator;
StructuredBuffer<uint> CardPageIndexData;
RWStructuredBuffer<uint> RWCardTileAllocator;
RWStructuredBuffer<uint> RWCardTiles;

groupshared uint SharedTileAllocator;
groupshared uint SharedTiles[THREADGROUP_SIZE * THREADGROUP_SIZE];
groupshared uint SharedGlobalTileOffset;

/**
 * Splice card pages into N card tiles
 */
[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void SpliceCardPagesIntoTilesCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint LinearThreadIndex = GroupThreadId.x + GroupThreadId.y * THREADGROUP_SIZE;
	if (all(GroupThreadId == 0))
	{
		SharedTileAllocator = 0;
		SharedGlobalTileOffset = 0;
		SharedTiles[0] = 0;
	}

	GroupMemoryBarrierWithGroupSync();

	// One thread per tile
	uint LinearLightTileOffset = (GroupId.x % 4);
	uint IndexInIndexBuffer = GroupId.x / 4;

	// Improve tile coherency
	uint2 TileOffset = ZOrder2D(LinearThreadIndex, log2(8));

	uint2 TileCoord;
	TileCoord.x = (LinearLightTileOffset % 2) * 8 + TileOffset.x;
	TileCoord.y = (LinearLightTileOffset / 2) * 8 + TileOffset.y;

	if (IndexInIndexBuffer < CardPageIndexAllocator[0])
	{
		uint CardPageIndex = CardPageIndexData[IndexInIndexBuffer];
		FLumenCardPageData CardPage = GetLumenCardPageData(CardPageIndex);
		if (CardPage.CardIndex >= 0)
		{
			FLumenCardData Card = GetLumenCardData(CardPage.CardIndex);

			const uint2 SizeInTiles = CardPage.SizeInTexels / CARD_TILE_SIZE;

			if (all(TileCoord < SizeInTiles))
			{
				FCardTileData CardTile;
				CardTile.CardPageIndex = CardPageIndex;
				CardTile.TileCoord = TileCoord;

				uint CardTileIndex = 0;
				InterlockedAdd(SharedTileAllocator, 1, CardTileIndex);
				SharedTiles[CardTileIndex] = PackCardTileData(CardTile);
			}
		}
	}

	GroupMemoryBarrierWithGroupSync();

	if (all(GroupThreadId == 0) && SharedTileAllocator > 0)
	{
		InterlockedAdd(RWCardTileAllocator[0], SharedTileAllocator, SharedGlobalTileOffset);
	}

	GroupMemoryBarrierWithGroupSync();

	if (LinearThreadIndex < SharedTileAllocator)
	{
		RWCardTiles[SharedGlobalTileOffset + LinearThreadIndex] = SharedTiles[LinearThreadIndex];
	}
}

StructuredBuffer<uint> CardTileAllocator;
StructuredBuffer<uint> CardTiles;
RWBuffer<uint> RWDispatchCardTilesIndirectArgs;

[numthreads(THREADGROUP_SIZE, 1, 1)]
void InitializeCardTileIndirectArgsCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	if (DispatchThreadId.x == 0)
	{
		uint NumCardTiles = CardTileAllocator[0];

		// One thread per card tile
		WriteDispatchIndirectArgs(RWDispatchCardTilesIndirectArgs, 0, (NumCardTiles + 63) / 64, 1, 1);

		// One thread group per card tile
		WriteDispatchIndirectArgs(RWDispatchCardTilesIndirectArgs, 1, NumCardTiles, 1, 1);
	}
}

bool SphereIntersectCone(float4 SphereCenterAndRadius, float3 ConeVertex, float3 ConeAxis, float ConeAngleCos, float ConeAngleSin)
{
	float3 U = ConeVertex - (SphereCenterAndRadius.w / ConeAngleSin) * ConeAxis;
	float3 D = SphereCenterAndRadius.xyz - U;
	float DSizeSq = dot(D, D);
	float E = dot(ConeAxis, D);

	if (E > 0 && E * E >= DSizeSq * ConeAngleCos * ConeAngleCos)
	{
		D = SphereCenterAndRadius.xyz - ConeVertex;
		DSizeSq = dot(D, D);
		E = -dot(ConeAxis, D);

		if (E > 0 && E * E >= DSizeSq * ConeAngleSin * ConeAngleSin)
		{
			return DSizeSq <= SphereCenterAndRadius.w * SphereCenterAndRadius.w;
		}
		else
		{
			return true;
		}
	}

	return false;
}

bool DoesLightAffectCardPageUVRange(FLumenLight LumenLight, FLumenCardPageData CardPage, FLumenCardData Card, float2 UVMin, float2 UVMax, inout float3 OutCardPageWorldCenter)
{
	// Lighting channels test
	if (!(Card.LightingChannelMask & LumenLight.LightingChannelMask))
	{
		return false;
	}

	float3 CardPageLocalCenter;
	float3 CardPageLocalExtent;
	GetCardLocalBBox(CardPage, Card, UVMin, UVMax, CardPageLocalCenter, CardPageLocalExtent);

	float3 CardPageWorldCenter = mul(Card.WorldToLocalRotation, CardPageLocalCenter) + Card.Origin;
	float3 CardPageWorldExtent = mul(abs(Card.WorldToLocalRotation), CardPageLocalExtent);
	float CardPageWorldBoundingSphere = length(CardPageLocalExtent);
	OutCardPageWorldCenter = CardPageWorldCenter;

	float4 InfluenceSphere = LumenLight.InfluenceSphere;
	float3 LightInfluenceSphereLocalCenter = mul(InfluenceSphere.xyz - Card.Origin, Card.WorldToLocalRotation);
	const float BoxDistanceSq = ComputeSquaredDistanceFromBoxToPoint(CardPageLocalCenter, CardPageLocalExtent, LightInfluenceSphereLocalCenter);
	const bool bCardAffectedByInfluenceSphere = BoxDistanceSq < InfluenceSphere.w * InfluenceSphere.w;

	const uint LightType = LumenLight.Type;
	const float3 LightPosition = LumenLight.ProxyPosition;
	const float3 LightDirection = LumenLight.ProxyDirection;
	const float LightRadius = LumenLight.ProxyRadius;

	// Fast out
	if (LightType != LIGHT_TYPE_DIRECTIONAL && !bCardAffectedByInfluenceSphere)
	{
		return false;
	}

	if (LightType == LIGHT_TYPE_DIRECTIONAL)
	{
		return true;
	}
	else if (LightType == LIGHT_TYPE_POINT)
	{
		// Point light
		return bCardAffectedByInfluenceSphere;
	}
	else if (LightType == LIGHT_TYPE_SPOT)
	{
		float CosConeAngle = LumenLight.CosConeAngle;
		float SinConeAngle = LumenLight.SinConeAngle;

		float ConeAxisDistance = dot(CardPageWorldCenter - LightPosition, LightDirection);
		float2 ConeAxisDistanceMinMax = float2(ConeAxisDistance + CardPageWorldBoundingSphere, ConeAxisDistance - CardPageWorldBoundingSphere);

		// Spot light
		return bCardAffectedByInfluenceSphere
			&& SphereIntersectCone(float4(CardPageWorldCenter, CardPageWorldBoundingSphere), LightPosition, LightDirection, CosConeAngle, SinConeAngle)
			&& ConeAxisDistanceMinMax.x > 0 && ConeAxisDistanceMinMax.y < LightRadius;
	}
	else if (LightType == LIGHT_TYPE_RECT)
	{
		// Rect light
		float4 BackPlane = float4(LightDirection, dot(LightPosition, LightDirection));
		float DistanceFromBoxCenterToPlane = dot(BackPlane.xyz, CardPageWorldCenter) - BackPlane.w;
		float MaxExtent = dot(CardPageWorldExtent, abs(BackPlane.xyz));
		bool bInFrontOfPlane = DistanceFromBoxCenterToPlane + MaxExtent > 0.0f;
		return bCardAffectedByInfluenceSphere && bInFrontOfPlane;
	}

	// Error: Unknown light type
	return false;
}

RWStructuredBuffer<uint> RWLightTileAllocator;
RWStructuredBuffer<uint2> RWLightTiles;
RWStructuredBuffer<uint> RWLightTileAllocatorPerLight;
RWStructuredBuffer<uint> RWLightAllocatorPerTile;
RWStructuredBuffer<uint> RWLightTileAllocatorForPerCardTileDispatch;
RWStructuredBuffer<uint> RWLightTileOffsetNumPerCardTile;

uint MaxLightsPerTile;
uint NumLights;
uint NumViews;

struct FLightSample
{
	float Weight;
	uint LightIndex;
	bool bHasShadowMask;
};

struct FLightSampleAccumulator
{
	uint PackedSamples[MAX_LIGHT_SAMPLES];
};

FLightSampleAccumulator InitLightSampleAccumulator()
{
	FLightSampleAccumulator LightSampleAccumulator = (FLightSampleAccumulator)0;
	for (uint PackedSampleIndex = 0; PackedSampleIndex < MAX_LIGHT_SAMPLES; ++PackedSampleIndex)
	{
		LightSampleAccumulator.PackedSamples[PackedSampleIndex] = 0;
	}
	return LightSampleAccumulator;
}

uint PackLightSample(FLightSample LightSample)
{
	uint PackedLightSample = LightSample.LightIndex & 0x3FFF;
	PackedLightSample |= LightSample.bHasShadowMask ? 0x4000 : 0;
	PackedLightSample |= 0x8000; // bValid
	PackedLightSample |= asuint(LightSample.Weight) & 0xFFFF0000;
	return PackedLightSample;
}

FLightSample UnpackLightSample(uint PackedLightSample)
{
	FLightSample LightSample = (FLightSample)0;
	LightSample.LightIndex = PackedLightSample & 0x3FFF;
	LightSample.bHasShadowMask = PackedLightSample & 0x4000 ? true : false;
	LightSample.Weight = 0.0f;
	return LightSample;
}

void AddLightSample(inout FLightSampleAccumulator LightSampleAccumulator, FLightSample LightSample)
{
	uint PackedLightSample = PackLightSample(LightSample);

	uint MinPackedLightSample = 0xFFFFFFFF;
	for (uint PackedSampleIndex = 0; PackedSampleIndex < MAX_LIGHT_SAMPLES; ++PackedSampleIndex)
	{
		MinPackedLightSample = min(MinPackedLightSample, LightSampleAccumulator.PackedSamples[PackedSampleIndex]);
	}

	// Replace the least important sample
	if (PackedLightSample > MinPackedLightSample)
	{
		for (uint PackedSampleIndex = 0; PackedSampleIndex < MAX_LIGHT_SAMPLES; ++PackedSampleIndex)
		{
			if (LightSampleAccumulator.PackedSamples[PackedSampleIndex] == MinPackedLightSample)
			{
				LightSampleAccumulator.PackedSamples[PackedSampleIndex] = PackedLightSample;
				break;
			}
		}
	}
}

float GetLightWeight(FLumenLight LumenLight, float3 TranslatedWorldPosition)
{
	FDeferredLightData LightData = LumenLight.DeferredLightData;
	float Weight = Luminance(LightData.Color);

	if (LightData.bRadialLight)
	{
		float3 L = LightData.Direction;
		float3 ToLight = L;
		Weight *= GetLocalLightAttenuation(TranslatedWorldPosition, LightData, ToLight, L);

		float Attenuation = 1.0f;
		if (LightData.bRectLight)
		{
			FRect Rect = GetRect(ToLight, LightData);
			Attenuation = IntegrateLight(Rect);
		}
		else
		{
			FCapsuleLight Capsule = GetCapsule(ToLight, LightData);
			Capsule.DistBiasSqr = 0;
			Attenuation = IntegrateLight(Capsule, LightData.bInverseSquared);
		}
		Weight *= Attenuation;
	}

	return Weight;
}

/**
 * Pick N most important lights per tile in page selected to update to update this frame, and output a list of light tiles
 */
[numthreads(THREADGROUP_SIZE, 1, 1)]
void BuildLightTilesCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	// One thread per tile
	uint CardTileIndex = DispatchThreadId.x;

	FLightSampleAccumulator LightSampleAccumulator = InitLightSampleAccumulator();

	if (CardTileIndex < CardTileAllocator[0])
	{
		FCardTileData CardTile = UnpackCardTileData(CardTiles[CardTileIndex]);
		FLumenCardPageData CardPage = GetLumenCardPageData(CardTile.CardPageIndex);
		uint PackedOffsetNum = 0;

		if (CardPage.CardIndex >= 0)
		{
			FLumenCardData Card = GetLumenCardData(CardPage.CardIndex);

			const uint2 SizeInTiles = CardPage.SizeInTexels / CARD_TILE_SIZE;
			float2 UVMin = float2(CardTile.TileCoord) / SizeInTiles;
			float2 UVMax = float2(CardTile.TileCoord + 1) / SizeInTiles;

			float SwapY = UVMin.y;
			UVMin.y = 1.0f - UVMax.y;
			UVMax.y = 1.0f - SwapY;

			uint ViewIndex = GetCardViewIndex(CardPage, Card, UVMin, UVMax, NumViews, true);

			// Loop over lights to select N most important lights
			for (uint LightIndex = 0; LightIndex < NumLights; ++LightIndex)
			{
				FLumenLight LumenLight = LoadLumenLight(LightIndex, PreViewTranslation[ViewIndex].xyz);

				float3 CardPageWorldCenter = 0.0f; // LWC_TODO:
				bool bLightAffectsCard = DoesLightAffectCardPageUVRange(LumenLight, CardPage, Card, UVMin, UVMax, CardPageWorldCenter);
				if (bLightAffectsCard)
				{
					// Center of a tile for estimating attenuation
					float3 TranslatedWorldPosition = CardPageWorldCenter + LWCHackToFloat(PrimaryView.PreViewTranslation);

					FLightSample LightSample;
					LightSample.Weight = GetLightWeight(LumenLight, TranslatedWorldPosition);
					LightSample.LightIndex = LightIndex;
					LightSample.bHasShadowMask = LumenLight.bHasShadowMask;
					AddLightSample(LightSampleAccumulator, LightSample);
				}
			}

			uint NumPackedLightSamples = 0;
			for (uint PackedSampleIndex = 0; PackedSampleIndex < MAX_LIGHT_SAMPLES; ++PackedSampleIndex)
			{
				if (LightSampleAccumulator.PackedSamples[PackedSampleIndex] > 0)
				{
					++NumPackedLightSamples;
				}
			}

			uint LightTileOffset = 0;
			if (NumPackedLightSamples > 0)
			{
				InterlockedAdd(RWLightTileAllocator[0], NumPackedLightSamples, LightTileOffset);
			}

			for (uint LightSampleIndex = 0; LightSampleIndex < NumPackedLightSamples; ++LightSampleIndex)
			{
				FLightSample LightSample = UnpackLightSample(LightSampleAccumulator.PackedSamples[LightSampleIndex]);

				// Write light tile to global light tile array
				FLightTileForCompactionPass LightTile;
				LightTile.LightIndex = LightSample.LightIndex;
				LightTile.ViewIndex = ViewIndex;
				LightTile.bHasShadowMask = LightSample.bHasShadowMask;
				LightTile.CardTileIndex = CardTileIndex;
				LightTile.CulledLightIndex = LightSampleIndex;
				RWLightTiles[LightTileOffset + LightSampleIndex] = PackLightTileForCompactionPass(LightTile);

				InterlockedAdd(RWLightTileAllocatorPerLight[LightSample.LightIndex * NumViews + ViewIndex], 1);
			}

			if (NumPackedLightSamples > 0)
			{
				uint CardLightTilesOffset;
				InterlockedAdd(RWLightTileAllocatorForPerCardTileDispatch[0], NumPackedLightSamples, CardLightTilesOffset);
				PackedOffsetNum = (NumPackedLightSamples << 24) | CardLightTilesOffset;
			}
		}

		RWLightTileOffsetNumPerCardTile[CardTileIndex] = PackedOffsetNum;
	}
}

StructuredBuffer<uint> LightTileAllocatorPerLight;
RWStructuredBuffer<uint> RWLightTileOffsetsPerLight;

/**
 * Prefix sum for card tile array compaction
 */
[numthreads(THREADGROUP_SIZE, 1, 1)]
void ComputeLightTileOffsetsPerLightCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	if (DispatchThreadId.x == 0)
	{
		uint TileOffset = 0;

		for (uint ViewIndex = 0; ViewIndex < NumViews; ViewIndex++)
		{			
			for (uint LightIndex = 0; LightIndex < NumLights; ++LightIndex)
			{
				RWLightTileOffsetsPerLight[LightIndex * NumViews + ViewIndex] = TileOffset;
				TileOffset += LightTileAllocatorPerLight[LightIndex * NumViews + ViewIndex];
			}
		}
	}
}

RWStructuredBuffer<uint2> RWCompactedLightTiles;
RWStructuredBuffer<uint2> RWLightTilesPerCardTile;
RWStructuredBuffer<uint> RWCompactedLightTileAllocatorPerLight;
StructuredBuffer<uint> LightTileAllocator;
StructuredBuffer<uint2> LightTiles;
StructuredBuffer<uint> LightTileOffsetsPerLight;
StructuredBuffer<uint> LightTileOffsetNumPerCardTile;

/**
 * Compact card tile array
 */
[numthreads(THREADGROUP_SIZE, 1, 1)]
void CompactLightTilesCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	const uint LightTileIndex = DispatchThreadId.x;

	if (LightTileIndex < LightTileAllocator[0])
	{
		FLightTileForCompactionPass LightTile = UnpackLightTileForCompactionPass(LightTiles[LightTileIndex]);

		uint CompactedLightTileIndex = 0;
		InterlockedAdd(RWCompactedLightTileAllocatorPerLight[LightTile.LightIndex * NumViews + LightTile.ViewIndex], 1, CompactedLightTileIndex);
		CompactedLightTileIndex += LightTileOffsetsPerLight[LightTile.LightIndex * NumViews + LightTile.ViewIndex];

		uint CardTileIndex = LightTile.CardTileIndex;
		FCardTileData CardTile = UnpackCardTileData(CardTiles[CardTileIndex]);
		
		FLightTileForShadowMaskPass TileForLight;
		TileForLight.LightIndex = LightTile.LightIndex;
		TileForLight.ViewIndex = LightTile.ViewIndex;
		TileForLight.CardPageIndex = CardTile.CardPageIndex;
		TileForLight.TileCoord = CardTile.TileCoord;
		uint2 PackedLightTile = PackLightTileForShadowMaskPass(TileForLight);
		RWCompactedLightTiles[CompactedLightTileIndex] = PackedLightTile;

		uint PackedOffsetNum = LightTileOffsetNumPerCardTile[CardTileIndex];
		uint LightTileOffset = (PackedOffsetNum & 0x00ffffff) + LightTile.CulledLightIndex;
		FLightTileForLightPass TileForCardTile;
		TileForCardTile.LightIndex = LightTile.LightIndex;
		TileForCardTile.ViewIndex = LightTile.ViewIndex;
		TileForCardTile.ShadowMaskIndex = LightTile.bHasShadowMask ? CompactedLightTileIndex : 0xffffffff;
		PackedLightTile = PackLightTileForLightPass(TileForCardTile);
		RWLightTilesPerCardTile[LightTileOffset] = PackedLightTile;
	}
}

RWBuffer<uint> RWDispatchLightTilesIndirectArgs;
RWBuffer<uint> RWDrawTilesPerLightIndirectArgs;
RWBuffer<uint> RWDispatchTilesPerLightIndirectArgs;

uint VertexCountPerInstanceIndirect;
uint PerLightDispatchFactor;

[numthreads(THREADGROUP_SIZE, 1, 1)]
void InitializeLightTileIndirectArgsCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	uint PerViewLightIndex = DispatchThreadId.x;

	// Global card tile array
	if (PerViewLightIndex == 0)
	{
		uint NumLightTiles = LightTileAllocator[0];

		// NumTilesDiv1
		WriteDispatchIndirectArgs(RWDispatchLightTilesIndirectArgs, 0, NumLightTiles, 1, 1);

		// NumTilesDiv64
		WriteDispatchIndirectArgs(RWDispatchLightTilesIndirectArgs, 1, (NumLightTiles + 63) / 64, 1, 1);
	}

	// Per light card tile array
	if (PerViewLightIndex < NumLights * NumViews)
	{
		uint NumLightTilesPerLight = LightTileAllocatorPerLight[PerViewLightIndex];

		// FRHIDispatchIndirectParameters
		WriteDispatchIndirectArgs(RWDispatchTilesPerLightIndirectArgs, PerViewLightIndex, PerLightDispatchFactor * NumLightTilesPerLight, 1, 1);

		// FRHIDrawIndirectParameters
		RWDrawTilesPerLightIndirectArgs[4 * PerViewLightIndex + 0] = VertexCountPerInstanceIndirect;
		RWDrawTilesPerLightIndirectArgs[4 * PerViewLightIndex + 1] = NumLightTilesPerLight;
		RWDrawTilesPerLightIndirectArgs[4 * PerViewLightIndex + 2] = 0;
		RWDrawTilesPerLightIndirectArgs[4 * PerViewLightIndex + 3] = 0;
	}
}

uint LightIndex;
uint ViewIndex;

void RasterizeToLightTilesVS(
	uint VertexId : SV_VertexID,
	uint InstanceId : SV_InstanceID,
	out FCardVSToPS CardInterpolants,
	out float4 OutPosition : SV_POSITION
)
{
	float2 TexCoord = float2(0.0f, 0.0f);
	TexCoord.x += VertexId == 1 || VertexId == 2 || VertexId == 4 ? 1.0f : 0.0f;
	TexCoord.y += VertexId == 2 || VertexId == 4 || VertexId == 5 ? 1.0f : 0.0f;

	uint LightTileIndex = InstanceId.x + LightTileOffsetsPerLight[LightIndex * NumViews + ViewIndex];
	uint NumLightTiles = LightTileAllocator[0];

	CardInterpolants = (FCardVSToPS)0;
	OutPosition = 0;

	if (LightTileIndex < NumLightTiles)
	{
		FLightTileForShadowMaskPass LightTile = UnpackLightTileForShadowMaskPass(LightTiles[LightTileIndex]);
		FLumenCardPageData CardPage = GetLumenCardPageData(LightTile.CardPageIndex);

		float2 AtlasUV = CardPage.PhysicalAtlasUVRect.xy + CardPage.PhysicalAtlasUVTexelScale * CARD_TILE_SIZE * (LightTile.TileCoord + TexCoord);
		float2 CardUV = CardPage.CardUVRect.xy + CardPage.CardUVTexelScale * CARD_TILE_SIZE * (LightTile.TileCoord + TexCoord);

		float2 ScreenPosition = float2(2.0f, -2.0f) * AtlasUV + float2(-1.0f, 1.0f);
		OutPosition = float4(ScreenPosition, 0, 1);

		CardInterpolants.AtlasUV = AtlasUV;
		CardInterpolants.IndirectLightingAtlasUV = float2(0.0f, 0.0f);
		CardInterpolants.CardUV = CardUV;
		CardInterpolants.CardTileIndex = LightTileIndex;
		CardInterpolants.CardPageIndex = LightTile.CardPageIndex;
	}
}