// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "LumenMaterial.ush"
#include "../DeferredShadingCommon.ush"
#include "../BRDF.ush"
#include "LumenScreenProbeCommon.ush"
#include "../MonteCarlo.ush"
#include "../ShadingModelsSampling.ush"
#include "../SceneTextureParameters.ush"
#include "../RayTracing/RayTracingCommon.ush"
#include "../RayTracing/RayTracingDeferredShadingCommon.ush"
#include "LumenHairTracing.ush"

#ifndef THREADGROUP_SIZE
#define THREADGROUP_SIZE 1
#endif

RaytracingAccelerationStructure TLAS;
RWTexture2D<UNORM float4> RWScreenBentNormal;
uint NumRays;
float NormalBias;

RAY_TRACING_ENTRY_RAYGEN(LumenShortRangeAOHardwareRayTracing)
{
	const uint2 PixelCoord = DispatchRaysIndex().xy + View.ViewRectMin.xy;
	const float2 ScreenUV = (float2(PixelCoord) + .5f) * View.BufferSizeAndInvSize.zw;

#if STRATA_ENABLED
	const FStrataTopLayerData TopLayerData = StrataUnpackTopLayerData(Strata.TopLayerTexture.Load(uint3(PixelCoord, 0)));
	const bool bIsValid = IsStrataMaterial(TopLayerData);
	const float3 WorldNormal = TopLayerData.WorldNormal;
	const float Depth = ConvertFromDeviceZ(SceneDepthTexture.Load(int3(PixelCoord, 0)).r);
#else
	const FGBufferData GBufferData = GetGBufferDataFromSceneTexturesLoad(PixelCoord);
	const bool bIsValid = GBufferData.ShadingModelID != SHADINGMODELID_UNLIT;
	const float3 WorldNormal = GBufferData.WorldNormal;
	const float Depth = GBufferData.Depth;
#endif

	if (bIsValid)
	{
		float3 TranslatedWorldPosition = GetTranslatedWorldPositionFromScreenUV(ScreenUV, Depth);
		float3x3 TangentBasis = GetTangentBasis(WorldNormal);
		float MaxScreenTraceFraction = ScreenProbeDownsampleFactor * 2 * View.ViewSizeAndInvSize.z;
		float TraceDistance = Depth * MaxScreenTraceFraction * 2.0 * GetTanHalfFieldOfView().x;

		float3 UnoccludedSum = 0;
		float3 BentNormal = 0;

		for (uint PixelRayIndex = 0; PixelRayIndex < NumRays; PixelRayIndex++)
		{
			float2 UniformRandom = BlueNoiseVec2(PixelCoord, (RAY_DIRECTION_TEMPORAL_INDEX * NumRays + PixelRayIndex));

			float4 HemisphereSample = CosineSampleHemisphere(UniformRandom);
			float3 RayDirection = mul(HemisphereSample.xyz, TangentBasis);
			float DirectionVisible = 1;

			{
				FRayDesc Ray;

				Ray.Origin = TranslatedWorldPosition;
				Ray.TMin = 0;
				Ray.Direction = RayDirection;
				Ray.TMax = TraceDistance;

				ApplyCameraRelativeDepthBias(Ray, PixelCoord, ConvertToDeviceZ(Depth), WorldNormal, NormalBias);

				uint RayFlags = RAY_FLAG_SKIP_CLOSEST_HIT_SHADER | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH;
				const uint InstanceInclusionMask = RAY_TRACING_MASK_OPAQUE;

				FMinimalPayload MinimalPayload = TraceVisibilityRay(
					TLAS,
					RayFlags,
					InstanceInclusionMask,
					Ray);

				bool bHit = MinimalPayload.IsHit();

#if USE_HAIRSTRANDS_VOXEL
				if (!bHit)
				{
					bool bHairHit;
					float HairTransparency;
					float HairHitT;

					uint2 NoiseCoord = PixelCoord * uint2(NumRays, 1) + uint2(PixelRayIndex, 0);

					TraceHairVoxels(
						NoiseCoord,
						Depth,
						TranslatedWorldPosition,
						RayDirection,
						TraceDistance,
						false,
						bHairHit,
						HairTransparency,
						HairHitT);

					bHit = bHairHit && HairHitT < TraceDistance;
				}
#endif

				DirectionVisible = bHit ? 0.0f : 1.0f;
			}

			UnoccludedSum += RayDirection;
			BentNormal += RayDirection * DirectionVisible;
		}

		float NormalizeFactor = length(UnoccludedSum);

		if (NormalizeFactor > 0)
		{
			BentNormal /= NormalizeFactor;
		}

		// Debug passthrough
		//BentNormal = Material.WorldNormal;

		RWScreenBentNormal[PixelCoord] = float4(BentNormal * .5f + .5f, 0);
	}
}