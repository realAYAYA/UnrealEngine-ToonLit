// Copyright Epic Games, Inc. All Rights Reserved.
#pragma once

#define EYE_ADAPTATION_LOOSE_PARAMETERS 1
#include "../EyeAdaptationCommon.ush"
#include "../TonemapCommon.ush"
#include "LumenReflectionsCombine.ush"

uint VisualizeHiResSurface;
uint2 InputViewSize;
uint2 InputViewOffset;
uint2 OutputViewSize;
uint2 OutputViewOffset;
int Tonemap;

#define LUT_SCALING	1.05f
#define LUT_SIZE	32.f
Texture3D ColorGradingLUT;
SamplerState ColorGradingLUTSampler;

float3 ColorLookupTable(float3 LinearColor)
{
	//@todo - reuse with PostProcessTonemap.usf and handle OutputDevice
	float3 LUTEncodedColor = LinToLog( LinearColor + LogToLin( 0 ) );
	float3 UVW = LUTEncodedColor * ((LUT_SIZE - 1) / LUT_SIZE) + (0.5f / LUT_SIZE);
	return ColorGradingLUT.SampleLevel(ColorGradingLUTSampler, UVW, 0).rgb * LUT_SCALING;
}

float3 VisualizeTonemap(float3 LinearColor)
{
	float3 OutColor = LinearColor;

	// The overview outputs after the tonemapper to overwrite editor primitives and must apply its own tonemapping
	if (Tonemap > 0)
	{
		OutColor = ColorLookupTable(LinearColor * View.OneOverPreExposure * EyeAdaptationLookup());
	}

	return OutColor;
}

/**
 * Common Lumen Visualization part, shared between SWRT and HWRT visualization shaders.
 */
void LumenVisualizationFinalize(
	float2 ViewportUV,
	float3 CameraVector,
	inout float3 FinalColor)
{
	// The overview outputs after the tonemapper to overwrite editor primitives and must apply its own tonemapping
	FinalColor.rgb = VisualizeTonemap(FinalColor.rgb);

	// #lumen_todo: Implement Substrate support
	#if ENABLE_VISUALIZE_MODE == 1
	if (VisualizeMode == VISUALIZE_MODE_DEDICATED_REFLECTION_RAYS)
	{
		const float2 GBufferUV = (ViewportUV * View.ViewRectMinAndSize.zw + 0.5f) * View.BufferSizeAndInvSize.zw;
		const FGBufferData GBuffer = GetGBufferData(GBufferUV);

		FinalColor.rgb = Luminance(sqrt(GBuffer.BaseColor));

		const bool bFoliage = GBuffer.ShadingModelID == SHADINGMODELID_TWOSIDED_FOLIAGE || GBuffer.ShadingModelID == SHADINGMODELID_SUBSURFACE;

		// Mark pixels which require dedicated reflection rays
		if (LumenCombineReflectionsAlpha(GBuffer.Roughness, bFoliage) > 0.0f || GBuffer.ShadingModelID == SHADINGMODELID_CLEAR_COAT)
		{
			FinalColor.rgb = bFoliage ? float3(0, 1, 0) : float3(1, 0, 0);
		}
	
		// Add sky as a background
		if (GBuffer.Depth > 1e6)
		{
			FinalColor.rgb = VisualizeTonemap(EvaluateSkyRadiance(CameraVector));
		}
	}
	#endif
}