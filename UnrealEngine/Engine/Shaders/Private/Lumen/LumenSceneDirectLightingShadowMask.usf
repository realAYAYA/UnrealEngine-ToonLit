// Copyright Epic Games, Inc. All Rights Reserved.

#ifndef VIRTUAL_SHADOW_MAP
	#define VIRTUAL_SHADOW_MAP 0
#endif
#ifndef DENSE_SHADOW_MAP
	#define DENSE_SHADOW_MAP 0
#endif

#include "../Common.ush"
#include "LumenCardCommon.ush"
#include "LumenCardTile.ush"
#define SUPPORT_CONTACT_SHADOWS 0
#include "../DeferredLightingCommon.ush"
#include "../VolumeLightingCommon.ush"
#include "../ForwardShadowingCommon.ush"
#include "../LightDataUniforms.ush"
#include "SurfaceCache/LumenSurfaceCache.ush"
#if LIGHT_FUNCTION
	#include "/Engine/Generated/Material.ush"
	#include "../LightFunctionCommon.ush"
#endif
#include "LumenSceneDirectLightingPerLightShadowCommon.ush"
#if USE_CLOUD_TRANSMITTANCE
	#include "../VolumetricCloudCommon.ush"
#endif

RWStructuredBuffer<uint> RWShadowTraces;
RWStructuredBuffer<uint> RWShadowTraceAllocator;

float HeightfieldShadowReceiverBias;

groupshared uint SharedNumShadowTraces;
groupshared uint SharedShadowTraces[THREADGROUP_SIZE_X * THREADGROUP_SIZE_Y];
groupshared uint SharedGlobalShadowTraceOffset;

[numthreads(THREADGROUP_SIZE_X, THREADGROUP_SIZE_Y, 1)]
void LumenSceneDirectLightingNonRayTracedShadowsCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint LinearGroupThreadId = GroupThreadId.x + GroupThreadId.y * THREADGROUP_SIZE_X;

#if THREADGROUP_SIZE_32
	uint LocalLightTileIndex = GroupId.x / 2;
	uint2 CoordInCardTile = GroupThreadId.xy + uint2(0, GroupId.x % 2 ? 0 : 4);
	uint ShadowMaskSize = SHADOW_MASK_CARD_TILE_DWORDS / 2;
	uint ShadowMaskOffset = GroupId.x % 2 ? 0 : 1;
#else
	uint LocalLightTileIndex = GroupId.x;
	uint2 CoordInCardTile = GroupThreadId.xy;
	uint ShadowMaskSize = SHADOW_MASK_CARD_TILE_DWORDS;
	uint ShadowMaskOffset = 0;
#endif

	if (LinearGroupThreadId < ShadowMaskSize)
	{
		SharedShadowMask[LinearGroupThreadId] = 0;
	}

	if (all(GroupThreadId.xy == 0))
	{
		SharedNumShadowTraces = 0;
		SharedGlobalShadowTraceOffset = 0;
		SharedShadowTraces[0] = 0;
	}

	// Need to resolve view for light function computations
	ResolvedView = ResolveView();

	GroupMemoryBarrierWithGroupSync();

	uint LightTileIndex = LocalLightTileIndex + LightTileOffsetsPerLight[LightIndex * NumViews + ViewIndex];
	FLightTileForShadowMaskPass LightTile = UnpackLightTileForShadowMaskPass(LightTiles[LightTileIndex]);
	uint2 TexelInCardPageCoord = LightTile.TileCoord * CARD_TILE_SIZE + CoordInCardTile;

	FLumenCardPageData CardPage = GetLumenCardPageData(LightTile.CardPageIndex + DummyZeroForFixingShaderCompilerBug);
	float2 AtlasUV = CardPage.PhysicalAtlasUVRect.xy + CardPage.PhysicalAtlasUVTexelScale * (TexelInCardPageCoord + 0.5f);
	float2 CardUV = CardPage.CardUVRect.xy + CardPage.CardUVTexelScale * (TexelInCardPageCoord + 0.5f);

	FShadowMaskRay ShadowMaskRay;
	ShadowMaskRay.ShadowFactor = 0.0f;
	ShadowMaskRay.bShadowFactorComplete = true;

	FLumenCardData Card = GetLumenCardData(CardPage.CardIndex);
	FLumenSurfaceCacheData SurfaceCacheData = GetSurfaceCacheData(Card, CardUV, AtlasUV);

	if (SurfaceCacheData.bValid)
	{
		const FDeferredLightData LightData = InitDeferredLightFromUniforms(LIGHT_TYPE);
		float3 WorldNormal = SurfaceCacheData.WorldNormal;
		float3 WorldPosition = SurfaceCacheData.WorldPosition;
		float3 TranslatedWorldPosition = WorldPosition + LWCHackToFloat(PrimaryView.PreViewTranslation);

		float3 L = LightData.Direction;
		float3 ToLight = L;
		float CombinedAttenuation = 1.0f;
		float Attenuation = 1.0f;
		float LightMask = 1.0f;

#if LIGHT_TYPE != LIGHT_TYPE_DIRECTIONAL
		if (LightData.bRadialLight)
		{
			LightMask = GetLocalLightAttenuation(TranslatedWorldPosition, LightData, ToLight, L);
		}

		if (LightData.bRectLight)
		{
			FRect Rect = GetRect(ToLight, LightData);
			Attenuation = IntegrateLight(Rect);
		}
		else
		{
			FCapsuleLight Capsule = GetCapsule(ToLight, LightData);
			Capsule.DistBiasSqr = 0;
			Attenuation = IntegrateLight(Capsule, LightData.bInverseSquared);
		}

		CombinedAttenuation *= Attenuation * LightMask;
#endif

		CombinedAttenuation *= saturate(dot(WorldNormal, L));

		if (CombinedAttenuation > 0)
		{
			ShadowMaskRay.ShadowFactor = 1.0f;
			ShadowMaskRay.bShadowFactorComplete = false;

			#if LIGHT_FUNCTION
			if (ShadowMaskRay.ShadowFactor > 0.01f)
			{
				ShadowMaskRay.ShadowFactor *= GetLightFunction(TranslatedWorldPosition);
				ShadowMaskRay.bShadowFactorComplete = ShadowMaskRay.bShadowFactorComplete || ShadowMaskRay.ShadowFactor < 0.01f;
			}
			#endif

			#if USE_CLOUD_TRANSMITTANCE
			if (ShadowMaskRay.ShadowFactor > 0.01f)
			{
				float OutOpticalDepth = 0.0f;
				ShadowMaskRay.ShadowFactor *= lerp(1.0f, GetCloudVolumetricShadow(TranslatedWorldPosition, CloudShadowmapTranslatedWorldToLightClipMatrix, CloudShadowmapFarDepthKm, CloudShadowmapTexture, CloudShadowmapSampler, OutOpticalDepth), CloudShadowmapStrength);
				ShadowMaskRay.bShadowFactorComplete = ShadowMaskRay.bShadowFactorComplete || ShadowMaskRay.ShadowFactor < 0.01f;
			}
			#endif

			if (ShadowMaskRay.ShadowFactor > 0.01f && DeferredLightUniforms.IESAtlasIndex >= 0)
			{
				ShadowMaskRay.ShadowFactor *= ComputeLightProfileMultiplier(TranslatedWorldPosition, DeferredLightUniforms.TranslatedWorldPosition, -DeferredLightUniforms.Direction, DeferredLightUniforms.Tangent, DeferredLightUniforms.IESAtlasIndex);
				ShadowMaskRay.bShadowFactorComplete = ShadowMaskRay.bShadowFactorComplete || ShadowMaskRay.ShadowFactor < 0.01f;
			}
		}
		else
		{
			ShadowMaskRay.ShadowFactor = 0.0f;
			ShadowMaskRay.bShadowFactorComplete = true;
		}
	}

	WriteSharedShadowMaskRay(ShadowMaskRay, GroupThreadId.xy, false);

	#if COMPACT_SHADOW_TRACES
	{
		if (!ShadowMaskRay.bShadowFactorComplete)
		{
			uint ShadowTraceIndex = 0;
			InterlockedAdd(SharedNumShadowTraces, 1, ShadowTraceIndex);

			FShadowTrace ShadowTrace;
			ShadowTrace.LightTileIndex = LightTileIndex;
			ShadowTrace.LightTileCoord = CoordInCardTile;

			SharedShadowTraces[ShadowTraceIndex] = PackShadowTrace(ShadowTrace);
		}
	}
	#endif

	GroupMemoryBarrierWithGroupSync();

	#if COMPACT_SHADOW_TRACES
	{
		if (all(GroupThreadId == 0))
		{
			InterlockedAdd(RWShadowTraceAllocator[0], SharedNumShadowTraces, SharedGlobalShadowTraceOffset);
		}
	}
	#endif

	GroupMemoryBarrierWithGroupSync();

	#if COMPACT_SHADOW_TRACES
	{
		if (LinearGroupThreadId < SharedNumShadowTraces)
		{
			RWShadowTraces[SharedGlobalShadowTraceOffset + LinearGroupThreadId] = SharedShadowTraces[LinearGroupThreadId];
		}
	}
	#endif

	if (LinearGroupThreadId < ShadowMaskSize)
	{
		RWShadowMaskTiles[SHADOW_MASK_CARD_TILE_DWORDS * LightTileIndex + ShadowMaskSize * ShadowMaskOffset + LinearGroupThreadId] = SharedShadowMask[LinearGroupThreadId];
	}
}
