// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once


#if RAYCALLABLESHADER || RAYGENSHADER || RAYHITGROUPSHADER || RAYMISSSHADER
#	define SHADER_PARAMETERS_HAS_SOURCETEXTURE 1
#else
#	define SHADER_PARAMETERS_HAS_SOURCETEXTURE 0
#endif

// Mirrors FLightShaderParameters on C++ side.
struct FLightShaderParameters
{
	float3 TranslatedWorldPosition;
	float  InvRadius;
	float3 Color;
	float  FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float2 SpotAngles;
	float  SpecularScale;
	float  SourceRadius;
	float  SoftSourceRadius;
	float  SourceLength;
	float  RectLightBarnCosAngle;
	float  RectLightBarnLength;
	#if SHADER_PARAMETERS_HAS_SOURCETEXTURE
	Texture2D SourceTexture;
	#endif
};


/** Returns the full width and height of the rect light */
float2 GetRectLightDimensions(FLightShaderParameters LightParameters)
{
	return 2.0 * float2(LightParameters.SourceRadius, LightParameters.SourceLength);
}

/** Returns the tangents to use respectively for GetRectLightDimensions() X and Y. */
void GetRectLightTangents(FLightShaderParameters LightParameters, out float3 Tangent, out float3 BiTangent)
{
	Tangent = cross(LightParameters.Tangent, LightParameters.Direction);
	BiTangent = LightParameters.Tangent;
}

// Parameters feed through FLightShaderParameters used directly as SHADER_PARAMETER_STRUCT() in a shader's root parameter structure.
float3 Light_TranslatedWorldPosition;
float  Light_InvRadius;
float3 Light_Color;
float  Light_FalloffExponent;
float3 Light_Direction;
float3 Light_Tangent;
float2 Light_SpotAngles;
float  Light_SpecularScale;
float  Light_SourceRadius;
float  Light_SoftSourceRadius;
float  Light_SourceLength;
float  Light_RectLightBarnCosAngle;
float  Light_RectLightBarnLength;
Texture2D Light_SourceTexture;


/** Returns the FLightShaderParameters from the root shader parameters. */
FLightShaderParameters GetRootLightShaderParameters()
{
	// Hopefully one day the shader compiler will be so nice we would no longer have to do this.
	FLightShaderParameters LightParameters;
	LightParameters.TranslatedWorldPosition = Light_TranslatedWorldPosition;
	LightParameters.InvRadius = Light_InvRadius;
	LightParameters.Color = Light_Color;
	LightParameters.FalloffExponent = Light_FalloffExponent;
	LightParameters.Direction = Light_Direction;
	LightParameters.Tangent = Light_Tangent;
	LightParameters.SpotAngles = Light_SpotAngles;
	LightParameters.SpecularScale = Light_SpecularScale;
	LightParameters.SourceRadius = Light_SourceRadius;
	LightParameters.SoftSourceRadius = Light_SoftSourceRadius;
	LightParameters.SourceLength = Light_SourceLength;
	LightParameters.RectLightBarnCosAngle = Light_RectLightBarnCosAngle;
	LightParameters.RectLightBarnLength = Light_RectLightBarnLength;
	#if SHADER_PARAMETERS_HAS_SOURCETEXTURE
	LightParameters.SourceTexture = Light_SourceTexture;
	#endif
	return LightParameters;
}
