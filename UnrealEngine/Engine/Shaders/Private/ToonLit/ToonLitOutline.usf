#include "../Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

// InverseLerpRemap.hlsl
half InverseLerp(half From, half To, half Value) 
{
	return (Value - From) / (To - From);
}

half InverseLerpClamp(half From, half To, half Value)
{
	return saturate(InverseLerp(From, To, Value));
}

bool IsPerspective()
{
	return View.ViewToClip[3][3] < 1.0f;// Perspective : Ortho
}

float GetNearPlane()
{
	return ResolveView().NearPlane;
}

float GetFarPlane()
{
	return ResolveView().NearPlane;
}

// OutlineUtil.hlsl
// If your project has a faster way to get camera fov in shader, you can replace this slow function to your method.
// For this shader, we will keep things simple and use this slower but convenient method to get camera fov
float GetCameraFOV()
{
	//https://answers.unity.com/questions/770838/how-can-i-extract-the-fov-information-from-the-pro.html
	float T = View.ClipToView[0][0];//T = ResolveView().TranslatedWorldToClip[1][1];
	float RadianToDegree = 57.295799f;//180.0f / 3.1415f;
	float Fov = atan(T/*1.0f / T*/) * 2.0f * RadianToDegree;
	return Fov;//return View.FieldOfViewWideAngles;
}

float ApplyOutlineDistanceFadeOut(float InputMulFix)
{
	// Make outline "fadeout" if character is too small in camera's view
	return saturate(InputMulFix);
}

float GetOutlineCameraFovAndDistanceFixMultiplier(float PositionVS_Z)
{
	float CameraMulFix;

	if (IsPerspective())
	{
		// Keep outline similar width on screen across all camera distance
		CameraMulFix = abs(PositionVS_Z);

		// Can replace to a tonemap function if a smooth stop is needed
		CameraMulFix = ApplyOutlineDistanceFadeOut(CameraMulFix);

		// Keep outline similar width on screen across all camera fov
		CameraMulFix *= GetCameraFOV();
	}
	else // Ortho
	{
		float OrthoSize = abs(GetNearPlane());
		OrthoSize = ApplyOutlineDistanceFadeOut(OrthoSize);
		CameraMulFix = OrthoSize * 50; // 50 is a magic number to match perspective camera's outline width
	}

	return CameraMulFix * 0.00005f; // mul a const to make return result = default normal expand amount WS
}

// ZOffset.hlsl
// Useful for:
// - Hide ugly outline on face/eye
// - Make eyebrow render on top of hair
// - Solve ZFighting issue without moving geometry
float4 GetNewClipPosWithZOffset(float4 OriginalPositionCS, float ViewSpaceZOffsetAmount)
{
	if (IsPerspective())
	{
		float2 ProjectMatrix_ZRow_ZW = ResolveView().TranslatedWorldToClip[2].zw;
		float ModifiedPositionVS_Z = -OriginalPositionCS.w + -ViewSpaceZOffsetAmount; // Push imaginary vertex
		float ModifiedPositionCS_Z = ModifiedPositionVS_Z * ProjectMatrix_ZRow_ZW[0] + ProjectMatrix_ZRow_ZW[1];
		OriginalPositionCS.z = ModifiedPositionCS_Z * OriginalPositionCS.w / (-ModifiedPositionVS_Z); // Overwrite positionCS.z
	}
	else // Ortho
	{
		OriginalPositionCS.z += -ViewSpaceZOffsetAmount / GetFarPlane(); // Push imaginary vertex and overwrite positionCS.z
	}

	return OriginalPositionCS;
}

float3 CalculateExtendDir(float PositionVS_Z, float3 NormalWS, float InOutlineWidth)
{
	//you can replace it to your own method! Here we will write a simple world space method for tutorial reason, it is not the best method!
	float OutlineExpandAmount = InOutlineWidth * GetOutlineCameraFovAndDistanceFixMultiplier(PositionVS_Z);
	return NormalWS * OutlineExpandAmount;
}

// ----------------------------------------------------Shader-----------------------------------------------------------

struct FOutlinePassVSToPS
{
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
	float4 Position : SV_POSITION;
};

// Uniform form cpp


#if VERTEXSHADER
void MainVS(
	FVertexFactoryInput Input,
	out FOutlinePassVSToPS Output)
{
	ResolvedView = ResolveView();
	
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float3 WorldNormal = VertexFactoryGetWorldNormal(Input, VFIntermediates);
	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);

	float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);
	Output.Position = mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip);

	// Interpolation
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
	
	// GetMaterial Attributes
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Output.FactoryInterpolants, float4(0, 0, 0, 0));
	FPixelMaterialInputs PixelMaterialInputs;
	CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, Input.Position, true);

	// Mask outline, depending on the material blend mode
	if (GetMaterialOpacity(PixelMaterialInputs) <= 0)
		discard;

	// Expand along WorldNormal | 根据用户自定义材质来决定使用何种描边算法
	float3 WorldPositionOffset = GetMaterialWorldPositionOffset(VertexParameters);
	if (WorldPositionOffset.x + WorldPositionOffset.y + WorldPositionOffset.z > 0)
	{
		// Use Custom Outline Algorithm form MATERIAL
		WorldPos.xyz += WorldPositionOffset;
	}
	else
	{
		// Use NiloCat Outline Algorithm
		float OutlineWidth = GetMaterialMetallic(PixelMaterialInputs) * 1000;
		WorldPos.xyz += CalculateExtendDir(Output.Position.z, WorldNormal, OutlineWidth);
	}

	// WorldToClip
	RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);
	Output.Position = mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip);

	// [Remap ZOffset value]
	// Flip read value so default black area = apply ZOffset, because usually outline mask texture are using this format(black = hide outline)
	float OutlineZOffsetMaskRemapStart = GetMaterialSpecular(PixelMaterialInputs);		// Range[0,1] = 0
	float OutlineZOffsetMaskRemapEnd = GetMaterialRoughness(PixelMaterialInputs);		// Range[0,1] = 1
	float OutlineZOffsetWeight = 1 - GetMaterialAmbientOcclusion(PixelMaterialInputs);	// From Model's UV2.y
	OutlineZOffsetWeight = InverseLerpClamp(OutlineZOffsetMaskRemapStart, OutlineZOffsetMaskRemapEnd, OutlineZOffsetWeight);
	
	// [Apply ZOffset, Use remapped value as ZOffset]
	//float OutlineZOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);	// Range[0,1] = 0.0001
	//Output.Position = GetNewClipPosWithZOffset(Output.Position, OutlineZOffset * OutlineZOffsetWeight);// + 0.03f if IsFace
}
#endif

void MainPS(
	FOutlinePassVSToPS Input,
	out float4 OutColor : SV_Target0)
{
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Input.FactoryInterpolants, Input.Position);
	FPixelMaterialInputs PixelMaterialInputs;
	CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, Input.Position, true);
	
	half3 OutlineColor = GetMaterialEmissive(PixelMaterialInputs);//GetMaterialBaseColor(PixelMaterialInputs);
	
	OutColor = float4(OutlineColor, 1.0f);
}