#include "../Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

// InverseLerpRemap.hlsl
half InverseLerp(half From, half To, half Value) 
{
	return (Value - From) / (To - From);
}

half InverseLerpClamp(half From, half To, half Value)
{
	return saturate(InverseLerp(From, To, Value));
}

// OutlineUtil.hlsl
// If your project has a faster way to get camera fov in shader, you can replace this slow function to your method.
// For this shader, we will keep things simple and use this slower but convenient method to get camera fov
float GetCameraFOV()
{
	//https://answers.unity.com/questions/770838/how-can-i-extract-the-fov-information-from-the-pro.html
	float T = View.ClipToView[0][0];//T = ResolveView().TranslatedWorldToClip[1][1];
	float RadianToDegree = 57.295799f;//180.0f / 3.1415f;
	float Fov = atan(T/*1.0f / T*/) * 2.0f * RadianToDegree;
	return Fov;//return View.FieldOfViewWideAngles;
}

float ApplyOutlineDistanceFadeOut(float InputMulFix)
{
	//make outline "fadeout" if character is too small in camera's view
	return saturate(InputMulFix);
}

float GetOutlineCameraFovAndDistanceFixMultiplier(float PositionVS_Z)
{
	float CameraMulFix;
	////////////////////////////////
	// Perspective camera case
	////////////////////////////////
	// keep outline similar width on screen across all camera distance
	CameraMulFix = abs(PositionVS_Z);

	// Can replace to a tonemap function if a smooth stop is needed
	CameraMulFix = ApplyOutlineDistanceFadeOut(CameraMulFix);

	// keep outline similar width on screen across all camera fov
	CameraMulFix *= GetCameraFOV();
	
	/*
	////////////////////////////////
	// Orthographic camera case
	////////////////////////////////
	float orthoSize = abs(unity_OrthoParams.y);
	orthoSize = ApplyOutlineDistanceFadeOut(orthoSize);
	CameraMulFix = orthoSize * 50; // 50 is a magic number to match perspective camera's outline width
	*/

	return CameraMulFix * 0.00005f; // mul a const to make return result = default normal expand amount WS
}

// ZOffset.hlsl
// Useful for:
// -Hide ugly outline on face/eye
// -Make eyebrow render on top of hair
// -Solve ZFighting issue without moving geometry
float4 GetNewClipPosWithZOffset(float4 OriginalPositionCS, float ViewSpaceZOffsetAmount)
{
	////////////////////////////////
	//Perspective camera case
	////////////////////////////////
	float2 ProjectMatrix_ZRow_ZW = ResolveView().TranslatedWorldToClip[2].zw;
	float ModifiedPositionVS_Z = -OriginalPositionCS.w + -ViewSpaceZOffsetAmount; // push imaginary vertex
	float ModifiedPositionCS_Z = ModifiedPositionVS_Z * ProjectMatrix_ZRow_ZW[0] + ProjectMatrix_ZRow_ZW[1];
	OriginalPositionCS.z = ModifiedPositionCS_Z * OriginalPositionCS.w / (-ModifiedPositionVS_Z); // overwrite positionCS.z
	return OriginalPositionCS;

	////////////////////////////////
	//Orthographic camera case
	////////////////////////////////
	//originalPositionCS.z += -viewSpaceZOffsetAmount / _ProjectionParams.z; // push imaginary vertex and overwrite positionCS.z
	//return originalPositionCS;
}

float3 TransformPositionWSToOutlinePositionWS(float3 PositionWS, float PositionVS_Z, float3 NormalWS, float InOutlineWidth)
{
	//you can replace it to your own method! Here we will write a simple world space method for tutorial reason, it is not the best method!
	float OutlineExpandAmount = InOutlineWidth * GetOutlineCameraFovAndDistanceFixMultiplier(PositionVS_Z);
	return PositionWS + NormalWS * OutlineExpandAmount;
}

// ----------------------------------------------------Shader-----------------------------------------------------------

struct FOutlinePassVSToPS
{
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
	float4 Position : SV_POSITION;
};

// Uniform form cpp
float OutlineWidth;					// Range[0,4] = 1
float OutlineZOffset;				// Range[0,1] = 0.0001
//float OutlineZOffsetWeight = 1;	// From VertexData
float OutlineZOffsetMaskRemapStart;	// Range[0,1] = 0
float OutlineZOffsetMaskRemapEnd;	// Range[0,1] = 1
float4 CustomOutlineColor;

#if VERTEXSHADER
void MainVS(
	FVertexFactoryInput Input,
	out FOutlinePassVSToPS Output)
{
	ResolvedView = ResolveView();
	
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float3 WorldNormal = VertexFactoryGetWorldNormal(Input, VFIntermediates);
	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);
	WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);

	float OutlineMask = 1.0f;// From Model's UV2.y

#if NUM_MATERIAL_TEXCOORDS_VERTEX > 10
	WorldNormal = float3(VertexParameters.TexCoords[2].y, VertexParameters.TexCoords[3].x, VertexParameters.TexCoords[3].y);
	FLWCMatrix LocalToWorld = VertexParameters.SceneData.InstanceData.LocalToWorld;
	float3 InvScale = VertexParameters.SceneData.InstanceData.InvNonUniformScale;
 	WorldNormal = RotateLocalToWorld(WorldNormal, LocalToWorld, InvScale);
	//OutlineMask = VertexParameters.TexCoords[2].y;
#endif

	// Expand along WorldNormal
	WorldPos.xyz = TransformPositionWSToOutlinePositionWS(WorldPos.xyz, Input.Position.z, WorldNormal, OutlineWidth * OutlineMask);

	// WorldToClip
	float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);
	Output.Position = mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip);

	// [Remap ZOffset value]
	// Flip read value so default black area = apply ZOffset, because usually outline mask texture are using this format(black = hide outline)
	float OutlineZOffsetWeight = 1 - 0;// From Model's UV2
	OutlineZOffsetWeight = InverseLerpClamp(OutlineZOffsetMaskRemapStart, OutlineZOffsetMaskRemapEnd, OutlineZOffsetWeight);
	
	// [Apply ZOffset, Use remapped value as ZOffset]
	//Output.Position = GetNewClipPosWithZOffset(Output.Position, OutlineZOffset * OutlineZOffsetWeight);// + 0.03f if IsFace

	// Interpolation
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
}
#endif // VERTEXSHADER

void MainPS(
	FOutlinePassVSToPS Input,
	out float4 OutColor : SV_Target0)
{
	float3 VertexColor = float3(0, 0, 0);//GetMaterialPixelParameters(Input.FactoryInterpolants, Input.Position).VertexColor;
	
	OutColor = float4(VertexColor * (1 - CustomOutlineColor.a) + CustomOutlineColor.rgb * CustomOutlineColor.a, 1.0f);
}