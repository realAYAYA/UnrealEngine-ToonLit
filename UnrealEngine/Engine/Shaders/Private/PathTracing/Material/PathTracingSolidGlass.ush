// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingSolidGlass.ush: Microfacet Refractive BSDF for solid glass
===============================================================================================*/

#pragma once

#include "PathTracingMaterialCommon.ush"
#include "PathTracingFresnel.ush"
#include "PathTracingGlossy.ush"
#include "PathTracingEnergyConservation.ush"

FMaterialSample RoughGlass_SampleMaterial(
	float3 RayDirection,
	FPathTracingPayload Payload,
	float4 RandSample)
{
	// NOTE: IsFrontFace() determines polygon orientation, because the normal is always flipped towards in the incoming ray
	bool bIsEntering = Payload.IsFrontFace();
	float3 N_World = Payload.WorldNormal;
	float3 V_World = -RayDirection;

	// #dxr_todo: Maintain a refraction stack on the path tracing payload
	float Ior = Payload.Ior;
	float Eta = bIsEntering ? Ior : rcp(Ior);

	float2 Alpha;
	float3x3 Basis = GetGGXBasis(Payload.Roughness, Payload.Anisotropy, Payload.WorldNormal, Payload.WorldTangent, Alpha);

	float3 V = mul(Basis, V_World);
	float NoV = saturate(V.z);

	if (NoV == 0)
	{
		// invalid grazing angle
		return NullMaterialSample();
	}

	// correct for energy loss by scaling the whole BSDF
	const float E = GGXEnergyLookup(Payload.Roughness, NoV, Eta);

	float3 H = ImportanceSampleVisibleGGX_aniso(UniformSampleDisk(RandSample.xy), Alpha, V).xyz;
	float3 N = float3(0, 0, 1);
	float NoH = saturate(H.z);
	float VoH = saturate(dot(V, H));

	float3 L = 0;
	float F = 0;
	if (SampleRefraction(-V, H, Eta, RandSample.z, L, F))
	{
		const float2 GGXResult = GGXEvalRefraction(L, V, H, Alpha, Eta);

		// transform to world space
		return CreateMaterialSample(normalize(mul(L, Basis)), GGXResult.x / E, F * GGXResult.y, -1.0, Payload.Roughness);
	}
	else
	{
		const float2 GGXResult = GGXEvalReflection(L, V, H, Alpha);

		// transform to world space
		return CreateMaterialSample(normalize(mul(L, Basis)), GGXResult.x / E, F * GGXResult.y, 1.0, Payload.Roughness);
	}
}

FMaterialEval RoughGlass_EvalMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	FPathTracingPayload Payload
)
{
	// NOTE: IsFrontFace() determines polygon orientation, because the normal is always flipped towards in the incoming ray
	bool bIsEntering = Payload.IsFrontFace();
	float3 V_World = -IncomingDirection;
	float3 L_World = OutgoingDirection;
	float3 N_World = Payload.WorldNormal;

	// #dxr_todo: Maintain a refraction stack on the path tracing payload
	float Ior = Payload.Ior;
	float Eta = bIsEntering ? Ior : rcp(Ior);

	float2 Alpha;
	float3x3 Basis = GetGGXBasis(Payload.Roughness, Payload.Anisotropy, Payload.WorldNormal, Payload.WorldTangent, Alpha);

	// move vectors into right shading frame
	float3 V = mul(Basis, V_World);
	float3 L = mul(Basis, L_World);

	if (V.z <= 0)
	{
		// invalid input
		return NullMaterialEval();
	}

	float NoV = saturate(V.z);

	// correct for energy loss by scaling the whole BSDF
	const float E = GGXEnergyLookup(Payload.Roughness, NoV, Eta);

	if (L.z > 0)
	{
		// reflection side
		const float3 H = normalize(L + V);
		const float VoH = saturate(dot(V, H));
		const float F = FresnelReflectance(VoH, Eta);

		const float2 GGXResult = GGXEvalReflection(L, V, H, Alpha);
		return CreateMaterialEval(GGXResult.x / E, F * GGXResult.y);
	}
	else if (L.z < 0)
	{
		// refraction side
		float NoL = saturate(-L.z);
		float3 Ht = -(Eta * L + V);
		Ht = normalize((Eta < 1.0f) ? -Ht : Ht);

		float VoH = dot(V, Ht);
		float F = 1.0f - FresnelReflectance(VoH, Eta);
		if (F > 0)
		{
			const float2 GGXResult = GGXEvalRefraction(L, V, Ht, Alpha, Eta);

			return CreateMaterialEval(GGXResult.x / E, F * GGXResult.y);
		}
	}
	return NullMaterialEval();
}
