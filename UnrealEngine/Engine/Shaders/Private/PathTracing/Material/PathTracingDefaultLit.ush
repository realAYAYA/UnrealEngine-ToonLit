// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
	PathTracingDefaultLit.usf: Path tracing BRDF model for default lit material
===============================================================================================*/

#pragma once

#include "PathTracingMaterialCommon.ush"
#include "PathTracingFresnel.ush"
#include "PathTracingEnergyConservation.ush"

FMaterialEval DefaultLit_EvalMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	FPathTracingPayload Payload
)
{
	FMaterialEval Result = NullMaterialEval();

	const float3 V_World = -IncomingDirection;
	const float3 L_World = OutgoingDirection;
	const float3 N_World = Payload.WorldNormal;

	float2 Alpha = 0;
	const float3x3 Basis = GetGGXBasis(Payload.Roughness, Payload.Anisotropy, Payload.WorldNormal, Payload.WorldTangent, Alpha);

	// move vectors into right shading frame
	const float3 V = mul(Basis, V_World);
	const float3 L = mul(Basis, L_World);
	const float3 H = normalize(V + L);

	const float NoV = saturate(V.z);
	const float NoL = saturate(L.z);
	const float VoH = saturate(dot(V, H));
	const float NoH = saturate(H.z);

	const FBxDFEnergyTerms Spec = ComputeGGXSpecEnergyTerms(Payload.Roughness, NoV, Payload.SpecularColor);

	// Probability of picking diffuse lobe vs. specular lobe
	const float LobeSelectionPdf = LobeSelectionProb(Payload.DiffuseColor * (1 - Spec.E), Spec.E);

	// Diffuse Lobe
	const float3 Diffuse = GetPathTracingDiffuseModel(Payload.DiffuseColor, Payload.Roughness, NoV, NoL, VoH, NoH);
	AddLobeWithMIS(Result.Weight, Result.Pdf, (1 - Spec.E) * Diffuse * ShadowTerminatorTerm(L_World, Payload.WorldNormal, Payload.WorldSmoothNormal), NoL / PI, LobeSelectionPdf);

	// Specular lobe
	const float2 GGXResult = GGXEvalReflection(L, V, H, Alpha);
	const float3 F = F_Schlick(Payload.SpecularColor, VoH);
	const float3 SpecWeight = F * GGXResult.x * Spec.W;
	const float SpecPdf = GGXResult.y;

	AddLobeWithMIS(Result.Weight, Result.Pdf, SpecWeight, SpecPdf, 1.0 - LobeSelectionPdf);

	return Result;
}

FMaterialSample DefaultLit_SampleMaterial(
	float3 RayDirection,
	FPathTracingPayload Payload,
	float4 RandSample
)
{
	float3 N = Payload.WorldNormal;
	float3 V = -RayDirection;
	
	float2 Alpha;
	float3x3 Basis = GetGGXBasis(Payload.Roughness, Payload.Anisotropy, Payload.WorldNormal, Payload.WorldTangent, Alpha);

	V = mul(Basis, V);

	const float NoV = saturate(V.z);
	const FBxDFEnergyTerms Spec = ComputeGGXSpecEnergyTerms(Payload.Roughness, NoV, Payload.SpecularColor);

	// Probability of picking diffuse lobe vs. specular lobe
	const float LobeSelectionPdf = LobeSelectionProb(Payload.DiffuseColor * (1 - Spec.E), Spec.E);

	// Randomly choose to sample diffuse or specular
	float3 L = 0, H = 0;
	float OutRoughness = 0;
	if (RandSample.x < LobeSelectionPdf)
	{
		RandSample.x /= LobeSelectionPdf;

		// Lambert
		// TODO: evaluate CosineSampleHemisphereConcentric
		float4 Result = CosineSampleHemisphere(RandSample.xy);

		L = Result.xyz;
		H = normalize(L + V);
		OutRoughness = 1.0;
	}
	else
	{
		RandSample.x -= LobeSelectionPdf;
		RandSample.x /= (1.0 - LobeSelectionPdf);

		// #dxr_todo: Evaluate UniformSampleDiskConcentric
		H = ImportanceSampleVisibleGGX_aniso(UniformSampleDisk(RandSample.xy), Alpha, V).xyz;

		L = reflect(-V, H);
		if (L.z <= 0)
		{
			// invalid output direction, exit early
			return NullMaterialSample();
		}
		OutRoughness = Payload.Roughness;
	}

	// With a valid direction in hand -- now evaluate the BxDF (taking advantage of already computed terms)

	const float3 L_World = normalize(mul(L, Basis));

	const float NoL = saturate(L.z);
	const float VoH = saturate(dot(V, H));
	const float NoH = saturate(H.z);

	float3 OutWeight = 0;
	float OutPdf = 0;

	// Diffuse Lobe
	const float3 Diffuse = GetPathTracingDiffuseModel(Payload.DiffuseColor, Payload.Roughness, NoV, NoL, VoH, NoH);
	AddLobeWithMIS(OutWeight, OutPdf, (1 - Spec.E) * Diffuse * ShadowTerminatorTerm(L_World, Payload.WorldNormal, Payload.WorldSmoothNormal), NoL / PI, LobeSelectionPdf);

	// Specular lobe
	const float2 GGXResult = GGXEvalReflection(L, V, H, Alpha);
	const float3 F = F_Schlick(Payload.SpecularColor, VoH);
	const float3 SpecWeight = F * GGXResult.x * Spec.W;
	const float SpecPdf = GGXResult.y;
	AddLobeWithMIS(OutWeight, OutPdf, SpecWeight, SpecPdf, 1.0 - LobeSelectionPdf);

	// transform to world space
	return CreateMaterialSample(L_World, OutWeight, OutPdf, 1.0, OutRoughness);
}
