// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingSpecularTransmission.ush: Refractive BSDFs (pure singular)
===============================================================================================*/

#pragma once

#include "PathTracingMaterialCommon.ush"
#include "PathTracingGlossy.ush"

FMaterialSample SpecularRefraction_SampleMaterial(
	float3 RayDirection,
	FPathTracingPayload Payload,
	float4 RandSample)
{
	// NOTE: IsFrontFace() determines polygon orientation, because the normal is always flipped towards in the incoming ray
	bool bIsEntering = Payload.IsFrontFace();
	float3 WorldNormal = Payload.WorldNormal;

	// #dxr_todo: Maintain a refraction stack on the path tracing payload
	float Ior = Payload.Ior;
	float Eta = bIsEntering ? Ior : 1.0 / Ior;


	float F = 0, BiasSign = 1.0;
	float3 OutDirection = 0;
	if (SampleRefraction(RayDirection, WorldNormal, Eta, RandSample.x, OutDirection, F))
	{
		BiasSign = -1;
	}

	// Throughput is 1 since we pick reflect/refract according to the fresnel term
	return CreateMaterialSample(OutDirection, 1.0, POSITIVE_INFINITY, BiasSign, 0.0);
} 

FMaterialEval SpecularTransmission_EvalMaterial()
{
	return NullMaterialEval();
}

