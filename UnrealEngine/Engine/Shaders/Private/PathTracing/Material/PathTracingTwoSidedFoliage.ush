// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
	PathTracingTwoSidedFoliage.usf: Path tracing BRDF model for two-sided foliage material
===============================================================================================*/

#pragma once

#include "PathTracingDefaultLit.ush"
#include "PathTracingEnergyConservation.ush"

FMaterialSample TwoSidedFoliage_SampleMaterial(
	float3 RayDirection,
	FPathTracingPayload Payload,
	float4 RandSample
)
{
	const float NoV = saturate(-dot(RayDirection, Payload.WorldNormal));
	const FBxDFEnergyTerms Spec = ComputeGGXSpecEnergyTerms(Payload.Roughness, NoV, Payload.SpecularColor);

	// pick back lobe proportionally to its contribution relative to front side
	const float3 Diff = (1 - Spec.E) * Payload.DiffuseColor;
	const float3 Back = (1 - Spec.E) * Payload.GetSubsurfaceColor();
	float TransmissionSelectionPdf = LobeSelectionProb(Back, Diff + Spec.E);

	if (RandSample.x < TransmissionSelectionPdf)
	{
		RandSample.x /= TransmissionSelectionPdf;

		float3 N = Payload.WorldNormal;

		float4 SampledValue = CosineSampleHemisphere(RandSample.yz);

		return CreateMaterialSample(TangentToWorld(SampledValue.xyz, -N), Back / TransmissionSelectionPdf, TransmissionSelectionPdf * SampledValue.w, -1.0, 1.0);
	}
	else
	{
		RandSample.x -= TransmissionSelectionPdf;
		RandSample.x /= 1.0 - TransmissionSelectionPdf;

		FMaterialSample Result = DefaultLit_SampleMaterial(RayDirection, Payload, RandSample);
		Result.Weight /= 1.0 - TransmissionSelectionPdf;
		Result.Pdf *= 1.0 - TransmissionSelectionPdf;
		return Result;
	}
}

FMaterialEval TwoSidedFoliage_EvalMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	FPathTracingPayload Payload
)
{
	const float NoV = saturate(-dot(IncomingDirection, Payload.WorldNormal));
	const FBxDFEnergyTerms Spec = ComputeGGXSpecEnergyTerms(Payload.Roughness, NoV, Payload.SpecularColor);

	// pick back lobe proportionally to its contribution relative to front side
	const float3 Diff = (1 - Spec.E) * Payload.DiffuseColor;
	const float3 Back = (1 - Spec.E) * Payload.GetSubsurfaceColor();
	float TransmissionSelectionPdf = LobeSelectionProb(Back, Diff + Spec.E);

	float3 N = Payload.WorldNormal;
	float NoL = dot(N, OutgoingDirection);
	if (NoL < 0.0)
	{
		// Diffuse transmission (the implementation in TwoSidedBxDF does not appear to be a real BxDF)

		if (TransmissionSelectionPdf > 0)
		{
			float LambertPdf = -NoL / PI;

			return CreateMaterialEval(Back / TransmissionSelectionPdf, TransmissionSelectionPdf * LambertPdf);
		}
	}
	else if (TransmissionSelectionPdf < 1)
	{
		FMaterialEval Result = DefaultLit_EvalMaterial(IncomingDirection, OutgoingDirection, Payload);
		Result.Weight /= 1.0 - TransmissionSelectionPdf;
		Result.Pdf *= 1.0 - TransmissionSelectionPdf;
		return Result;
	}
	return NullMaterialEval();
}