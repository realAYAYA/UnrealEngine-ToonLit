// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
	PathTracingCloth.ush: Path tracing BRDF model for cloth materials
===============================================================================================*/

#pragma once

#include "PathTracingFresnel.ush"
#include "PathTracingEnergyConservation.ush"

FMaterialEval Cloth_EvalMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	FPathTracingPayload Payload
)
{
	FMaterialEval Result = NullMaterialEval();

	const float3 V_World = -IncomingDirection;
	const float3 L_World = OutgoingDirection;
	const float3 N_World = Payload.WorldNormal;

	float2 Alpha = 0;
	const float3x3 Basis = GetGGXBasis(Payload.Roughness, Payload.Anisotropy, Payload.WorldNormal, Payload.WorldTangent, Alpha);

	// move vectors into right shading frame
	const float3 V = mul(Basis, V_World);
	const float3 L = mul(Basis, L_World);
	const float3 H = normalize(V + L);

	const float NoL = saturate(L.z);
	const float NoV = saturate(V.z);
	const float VoH = saturate(dot(V, H));
	const float NoH = saturate(H.z);

	const float3 FuzzColor = Payload.CustomData.xyz;
	const float Cloth = Payload.CustomData.w;

	const FBxDFEnergyTerms Spec = ComputeGGXSpecEnergyTerms(Payload.Roughness, NoV, Payload.SpecularColor);
	const FBxDFEnergyTerms Fuzz = ComputeClothEnergyTerms(Payload.Roughness, NoV, FuzzColor);

	// Probability of picking diffuse lobe vs. specular lobe
	const float3 DiffWeight = (1.0 - lerp(Spec.E, Fuzz.E, Cloth)) * Payload.DiffuseColor;
	const float3 DiffLobeAlbedo = DiffWeight + Cloth * Fuzz.E;
	const float3 SpecLobeAlbedo = (1.0 - Cloth) * Spec.E;

	const float LobeSelectionPdf = LobeSelectionProb(DiffLobeAlbedo, SpecLobeAlbedo);

	// Diffuse and Cloth Lobe (see ClothBxDF)
	const float DCloth = D_InvGGX(Pow4(Payload.Roughness), NoH);
	const float3 FCloth = F_Schlick(FuzzColor, VoH);
	const float3 ClothWeight = NoL > 0 && NoV > 0 ? (PI * Cloth * DCloth * Vis_Cloth(NoV, NoL)) * FCloth * Fuzz.W : 0.0;

	AddLobeWithMIS(Result.Weight, Result.Pdf, (DiffWeight + ClothWeight) * ShadowTerminatorTerm(L_World, Payload.WorldNormal, Payload.WorldSmoothNormal), NoL / PI, LobeSelectionPdf);

	// Specular lobe
	const float2 GGXResult = GGXEvalReflection(L, V, H, Alpha);
	const float3 F = F_Schlick(Payload.SpecularColor, VoH);
	const float3 SpecWeight = (1 - Cloth) * F * GGXResult.x * Spec.W;
	const float SpecPdf = GGXResult.y;

	AddLobeWithMIS(Result.Weight, Result.Pdf, SpecWeight, SpecPdf, 1 - LobeSelectionPdf);

	return Result;
}

FMaterialSample Cloth_SampleMaterial(
	float3 RayDirection,
	FPathTracingPayload Payload,
	float4 RandSample
)
{
	float3 N = Payload.WorldNormal;
	float3 V = -RayDirection;

	float2 Alpha;
	float3x3 Basis = GetGGXBasis(Payload.Roughness, Payload.Anisotropy, Payload.WorldNormal, Payload.WorldTangent, Alpha);

	V = mul(Basis, V);

	const float NoV = saturate(V.z);

	const float3 FuzzColor = Payload.CustomData.xyz;
	const float Cloth = Payload.CustomData.w;
	const FBxDFEnergyTerms Spec = ComputeGGXSpecEnergyTerms(Payload.Roughness, NoV, Payload.SpecularColor);
	const FBxDFEnergyTerms Fuzz = ComputeClothEnergyTerms(Payload.Roughness, NoV, FuzzColor);


	// Probability of picking diffuse lobe vs. specular lobe
	const float3 DiffWeight = (1.0 - lerp(Spec.E, Fuzz.E, Cloth)) * Payload.DiffuseColor;
	const float3 DiffLobeAlbedo = DiffWeight + Cloth * Fuzz.E;
	const float3 SpecLobeAlbedo = (1.0 - Cloth) * Spec.E;

	const float LobeSelectionPdf = LobeSelectionProb(DiffLobeAlbedo, SpecLobeAlbedo);


	// Randomly choose to sample diffuse+cloth or specular lobe
	// The cloth lobe is low enough frequency that sampling with cosine weighting is sufficient
	float3 L = 0, H = 0;
	float OutRoughness = 0;
	if (RandSample.x < LobeSelectionPdf)
	{
		RandSample.x /= LobeSelectionPdf;

		// Lambert
#if 1
		float4 Result = CosineSampleHemisphere(RandSample.xy);
#else
		float4 Result = CosineSampleHemisphereConcentric(RandSample.xy);
#endif

		L = Result.xyz;
		H = normalize(L + V);
		OutRoughness = 1.0;
	}
	else
	{
		RandSample.x -= LobeSelectionPdf;
		RandSample.x /= 1 - LobeSelectionPdf;


		// #dxr_todo: Evaluate UniformSampleDiskConcentric
		H = ImportanceSampleVisibleGGX_aniso(UniformSampleDisk(RandSample.xy), Alpha, V).xyz;

		L = reflect(-V, H);
		if (L.z <= 0)
		{
			// invalid output direction, exit early
			return NullMaterialSample();
		}
		OutRoughness = Payload.Roughness;
	}

	// With a valid direction in hand -- now evaluate the BxDF (taking advantage of already computed terms)

	const float3 L_World = normalize(mul(L, Basis));

	const float NoL = saturate(L.z);
	const float VoH = saturate(dot(V, H));
	const float NoH = saturate(H.z);

	// Diffuse and Cloth Lobe (see ClothBxDF)
	const float DCloth = D_InvGGX(Pow4(Payload.Roughness), NoH);
	const float3 FCloth = F_Schlick(FuzzColor, VoH);
	const float3 ClothWeight = NoL > 0 && NoV > 0 ? (PI * Cloth * DCloth * Vis_Cloth(NoV, NoL)) * FCloth * Fuzz.W : 0.0;

	float3 OutWeight = 0;
	float OutPdf = 0;
	AddLobeWithMIS(OutWeight, OutPdf, (DiffWeight + ClothWeight) * ShadowTerminatorTerm(L_World, Payload.WorldNormal, Payload.WorldSmoothNormal), NoL / PI, LobeSelectionPdf);

	// Specular lobe

	const float2 GGXResult = GGXEvalReflection(L, V, H, Alpha);
	const float3 F = F_Schlick(Payload.SpecularColor, VoH);
	const float3 SpecWeight = (1 - Cloth) * F * GGXResult.x * Spec.W;
	const float SpecPdf = GGXResult.y;
	AddLobeWithMIS(OutWeight, OutPdf, SpecWeight, SpecPdf, 1 - LobeSelectionPdf);

	// transform to world space
	return CreateMaterialSample(L_World, OutWeight, OutPdf, 1.0, OutRoughness);
}
