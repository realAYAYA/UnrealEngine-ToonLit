// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingPointLight.ush: Light sampling functions for Point lights
===============================================================================================*/

#pragma once

#include "PathTracingLightCommon.ush"
#include "PathTracingCapsuleLight.ush"



// #dxr_todo: These are stolen from DynamicLightingCommon.ush but I was having trouble getting that header to include cleanly
/** 
* Calculates attenuation for a spot light.
* L normalize vector to light. 
* SpotDirection is the direction of the spot light.
* SpotAngles.x is CosOuterCone, SpotAngles.y is InvCosConeDifference. 
*/
float SpotAttenuation(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	float ConeAngleFalloff = Square(saturate((dot(L, -SpotDirection) - SpotAngles.x) * SpotAngles.y));
	return ConeAngleFalloff;
}


FLightHit PointLight_TraceLight(FRayDesc Ray, int LightId)
{
	FLightHit Result = NullLightHit();
	if (GetSourceLength(LightId) > 0)
	{
		Result = CapsuleLight_TraceLight(Ray, LightId);
	}
	else
	{
		float3 TranslatedLightPosition = GetTranslatedPosition(LightId);
		float LightRadius = GetRadius(LightId);
		float LightRadius2 = Pow2(LightRadius);
		float3 oc = Ray.Origin - TranslatedLightPosition;
		float b = dot(oc, Ray.Direction);
		// "Precision Improvements for Ray / Sphere Intersection" - Ray Tracing Gems (2019)
		// https://link.springer.com/content/pdf/10.1007%2F978-1-4842-4427-2_7.pdf
		// NOTE: we assume the incoming ray direction is normalized
		float h = LightRadius2 - length2(oc - b * Ray.Direction);
		if (h > 0)
		{
			float t = -b - sqrt(h);
			if (t > Ray.TMin && t < Ray.TMax)
			{
				float LightDistanceSquared = dot(oc, oc);

				// #dxr_todo: sphere area is 4*pi*r^2 -- but the factor of 4 is missing for some reason?
				float3 LightPower = GetColor(LightId);
				float3 LightRadiance = LightPower / (PI * LightRadius2);

				float SinThetaMax2 = saturate(LightRadius2 / LightDistanceSquared);
				float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);

				float SolidAngle = 2 * PI * OneMinusCosThetaMax;
				Result = CreateLightHit(LightRadiance, 1.0 / SolidAngle, t);
			}
			// #dxr_todo: process inside hit here ...
			// How should we define radiance on the inside of the sphere?
		}
	}
	if (Result.IsHit())
	{
		float3 LightDirection = GetTranslatedPosition(LightId) - Ray.Origin;
		float LightDistanceSquared = dot(LightDirection, LightDirection);
		Result.Radiance *= ComputeIESAttenuation(LightId, Ray.Origin);
		Result.Radiance *= ComputeAttenuationFalloff(LightDistanceSquared, LightId);
		if (IsSpotLight(LightId))
		{
			float3 LightNormal = GetNormal(LightId);
			float2 CosConeAngles = GetCosConeAngles(LightId);
			Result.Radiance *= SpotAttenuation(LightDirection * rsqrt(LightDistanceSquared), LightNormal, CosConeAngles);
		}
	}
	return Result;
}

FLightSample PointLight_SampleLight(
	int LightId,
	float2 RandSample,
	float3 TranslatedWorldPos,
	float3 WorldNormal
)
{
	float3 LightDirection = GetTranslatedPosition(LightId) - TranslatedWorldPos;
	float LightDistanceSquared = dot(LightDirection, LightDirection);

	FLightSample Result = NullLightSample();
	if (GetSourceLength(LightId) > 0)
	{
		Result = CapsuleLight_SampleLight(LightId, RandSample, TranslatedWorldPos, WorldNormal);
	}
	else
	{
		// Point light case

		// Sample the solid angle subtended by the sphere (which could be singgular, in which case the PDF will be infinite)
		float Radius = GetRadius(LightId);
		float Radius2 = Pow2(Radius);

		// #dxr_todo: come up with a better definition when we are inside the light
		float SinThetaMax2 = saturate(Radius2 / LightDistanceSquared);

		// #dxr_todo: find a better way of handling the region inside the light than just clamping to 1.0 here
		float4 DirAndPdf = UniformSampleConeRobust(RandSample, SinThetaMax2);

		float CosTheta = DirAndPdf.z;
		float SinTheta2 = 1.0 - CosTheta * CosTheta;

		Result.Direction = TangentToWorld(DirAndPdf.xyz, normalize(LightDirection));
		Result.Distance = length(LightDirection) * (CosTheta - sqrt(max(SinThetaMax2 - SinTheta2, 0.0)));

		Result.Pdf = DirAndPdf.w;

		float3 LightPower = GetColor(LightId);
		float3 LightRadiance = LightPower / (PI * Radius2);

		// When the angle is very small, Radiance over pdf simplifies even more since SolidAngle ~= PI * SinThetaMax2
		// Canceling out common factors further leads to the classic Power / D^2 formula
		Result.RadianceOverPdf = SinThetaMax2 < 0.001 ? LightPower / LightDistanceSquared : LightRadiance / Result.Pdf;
	}

	// NOTE: uses distance to center to keep fadeoff mask consistent for all samples
	Result.RadianceOverPdf *= ComputeAttenuationFalloff(LightDistanceSquared, LightId);
	Result.RadianceOverPdf *= ComputeIESAttenuation(LightId, TranslatedWorldPos);
	if (IsSpotLight(LightId))
	{
		float3 LightNormal = GetNormal(LightId);
		float2 CosConeAngles = GetCosConeAngles(LightId);
		Result.RadianceOverPdf *= SpotAttenuation(LightDirection * rsqrt(LightDistanceSquared), LightNormal, CosConeAngles);
	}

	return Result;
}

float PointLight_EstimateLight(
	int LightId,
	float3 TranslatedWorldPos,
	float3 WorldNormal,
	bool IsTransmissiveMaterial
)
{
	// Distance
	float3 LightDirection = GetTranslatedPosition(LightId) - TranslatedWorldPos;
	float LightDistanceSquared = dot(LightDirection, LightDirection);

	// Geometric term
	float NoL = 1.0; // trivial upper bound -- trying to be more accurate appears to reduce performance

	float LightPower = Luminance(GetColor(LightId));
	float Falloff = ComputeAttenuationFalloff(LightDistanceSquared, LightId);
	float OutIrradiance = LightPower * Falloff * NoL / LightDistanceSquared;
	if (IsSpotLight(LightId))
	{
		float3 LightNormal = GetNormal(LightId);
		float2 CosConeAngles = GetCosConeAngles(LightId);
		OutIrradiance *= SpotAttenuation(LightDirection * rsqrt(LightDistanceSquared), LightNormal, CosConeAngles);
	}
	return OutIrradiance;
}


float2 IntersectInfiniteConeVolume(
	float3  ro, float3  rd,
	float3  apex, float3  normal,
	float radius)
{
	// Adapted from: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm
	const float3 ba = normal;
	const float3 oa = ro - apex;

	const float m0 = dot(ba, ba);
	const float m1 = dot(oa, ba);
	const float m3 = dot(rd, ba);

	const float m4 = dot(rd, oa);
	const float m5 = dot(oa, oa);
	const float hy = m0 + radius * radius;

	const float k2 = m0 * m0 - m3 * m3 * hy;
	const float k1 = m0 * m0 * m4 - m1 * m3 * hy;
	const float k0 = m0 * m0 * m5 - m1 * m1 * hy;

	const float h = k1 * k1 - k2 * k0;
	if (h > 0)
	{
		const float s = sign(k2);
		const float2 t = (-k1 + float2(-s, s) * sqrt(h)) / k2;
		const float2 y = m1 + t * m3;

		// check which hits are valid:
		const int c = ((y.x > 0) ? 1 : 0) + (y.y > 0 ? 2 : 0);
		if (c == 1)
		{
			// only smaller root is valid, far root is invalid
			return float2(0.0, t.x);
		}
		if (c == 2)
		{
			// only larger root is valid, must have started outside the cone
			return float2(t.y, POSITIVE_INFINITY);
		}
		if (c == 3)
		{
			// both roots are valid
			return t;
		}
	}
	return -1.0;
}


FVolumeLightSampleSetup PointLight_PrepareLightVolumeSample(
	int LightId,
	float3 RayOrigin,
	float3 RayDirection,
	float TMin,
	float TMax
)
{
	float3 Center = GetTranslatedPosition(LightId);
	float AttenuationRadius = rcp(GetAttenuation(LightId));
	float AttenuationRadius2 = Pow2(AttenuationRadius);
	float3 oc = RayOrigin - Center;
	float b = dot(oc, RayDirection);
	float h = AttenuationRadius2 - length2(oc - b * RayDirection);
	if (h > 0)
	{
		float2 t = -b + float2(-1, +1) * sqrt(h);
		TMin = max(t.x, TMin);
		TMax = min(t.y, TMax);
		if (IsSpotLight(LightId))
		{
			float3 N = GetNormal(LightId);
			// now clip against the cone of the spot
			const float CosOuterConeAngle = GetCosConeAngles(LightId).x;
			const float SinOuterConeAngle = sqrt(1 - CosOuterConeAngle * CosOuterConeAngle);

			float2 TCone = IntersectInfiniteConeVolume(RayOrigin, RayDirection, Center, N * CosOuterConeAngle, SinOuterConeAngle);
			if (TCone.x < TCone.y)
			{
				TMin = max(TCone.x, TMin);
				TMax = min(TCone.y, TMax);
			}
			else
			{
				// hit the sphere but missed the cone
				return NullVolumeLightSetup();
			}
		}
		float3 C = GetColor(LightId);
		float LightImportance = max3(C.x, C.y, C.z);
		return CreateEquiAngularSampler(LightImportance, Center, RayOrigin, RayDirection, TMin, TMax);
	}
	return NullVolumeLightSetup();
}
