// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
	PathTracingSpotLight.ush: Light sampling functions for Spot light implementation
===============================================================================================*/

#pragma once

#include "PathTracingLightCommon.ush"
#include "PathTracingSpotLight.ush"

// #dxr_todo: These are stolen from DynamicLightingCommon.ush but I was having trouble getting that header to include cleanly
/** 
 * Calculates attenuation for a spot light.
 * L normalize vector to light. 
 * SpotDirection is the direction of the spot light.
 * SpotAngles.x is CosOuterCone, SpotAngles.y is InvCosConeDifference. 
 */
float SpotAttenuationMask(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	return saturate((dot(L, -SpotDirection) - SpotAngles.x) * SpotAngles.y);
}
float SpotAttenuation(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	float ConeAngleFalloff = Square(SpotAttenuationMask(L, SpotDirection, SpotAngles));
	return ConeAngleFalloff;
}


FLightHit SpotLight_TraceLight(FRayDesc Ray, int LightId) {

	FLightHit Result = PointLight_TraceLight(Ray, LightId);
	if (Result.IsHit())
	{
		float3 TranslatedLightPosition = GetTranslatedPosition(LightId);
		float3 LightNormal = GetNormal(LightId);
		float2 CosConeAngles = GetCosConeAngles(LightId);
		Result.Radiance *= SpotAttenuation(-normalize(Ray.Origin - TranslatedLightPosition), LightNormal, CosConeAngles);
	}
	return Result;
}

FLightSample SpotLight_SampleLight(
	int LightId,
	float2 RandSample,
	float3 TranslatedWorldPos,
	float3 WorldNormal
)
{
	FLightSample Result = PointLight_SampleLight(LightId, RandSample, TranslatedWorldPos, WorldNormal);

	float3 TranslatedLightPosition = GetTranslatedPosition(LightId);
	float3 LightNormal = GetNormal(LightId);
	float2 CosConeAngles = GetCosConeAngles(LightId);
	Result.RadianceOverPdf *= SpotAttenuation(-normalize(TranslatedWorldPos - TranslatedLightPosition), LightNormal, CosConeAngles);

	return Result;
}

float SpotLight_EstimateLight(
	int LightId,
	float3 TranslatedWorldPos,
	float3 WorldNormal,
	bool IsTransmissiveMaterial
)
{
	float3 TranslatedLightPosition = GetTranslatedPosition(LightId);
	float3 LightNormal = GetNormal(LightId);
	float LightPower = Luminance(GetColor(LightId));
	float Radius = GetRadius(LightId);
	
	// Distance
	float3 LightDirection = TranslatedLightPosition - TranslatedWorldPos;
	float LightDistanceSquared = dot(LightDirection, LightDirection);

	// Geometric term
	float NoL = 1.0; // trivial upper bound -- trying to be more accurate appears to reduce performance

	float Falloff = ComputeAttenuationFalloff(LightDistanceSquared, LightId);
	float OutIrradiance = LightPower * Falloff * NoL / LightDistanceSquared;
	
	float2 CosConeAngles = GetCosConeAngles(LightId);
	OutIrradiance *= SpotAttenuation(normalize(LightDirection), LightNormal, CosConeAngles);

	return OutIrradiance;
}

float2 IntersectInfiniteConeVolume(
	float3  ro, float3  rd,
	float3  apex, float3  normal,
	float radius)
{
	// Adapted from: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm
	const float3 ba = normal;
	const float3 oa = ro - apex;

	const float m0 = dot(ba, ba);
	const float m1 = dot(oa, ba);
	const float m3 = dot(rd, ba);

	const float m4 = dot(rd, oa);
	const float m5 = dot(oa, oa);
	const float hy = m0 + radius * radius;

	const float k2 = m0 * m0 - m3 * m3 * hy;
	const float k1 = m0 * m0 * m4 - m1 * m3 * hy;
	const float k0 = m0 * m0 * m5 - m1 * m1 * hy;

	const float h = k1 * k1 - k2 * k0;
	if (h > 0)
	{
		const float s = sign(k2);
		const float2 t = (-k1 + float2(-s, s) * sqrt(h)) / k2;
		const float2 y = m1 + t * m3;

		// check which hits are valid:
		const int c = ((y.x > 0) ? 1 : 0) + (y.y > 0 ? 2 : 0);
		if (c == 1)
		{
			// only smaller root is valid, far root is invalid
			return float2(0.0, t.x);
		}
		if (c == 2)
		{
			// only larger root is valid, must have started outside the cone
			return float2(t.y, POSITIVE_INFINITY);
		}
		if (c == 3)
		{
			// both roots are valid
			return t;
		}
	}
	return -1.0;
}


FVolumeLightSampleSetup SpotLight_PrepareLightVolumeSample(
	int LightId,
	float3 RayOrigin,
	float3 RayDirection,
	float TMin,
	float TMax
)
{
	float3 Center = GetTranslatedPosition(LightId);
	float AttenuationRadius = rcp(GetAttenuation(LightId));
	float AttenuationRadius2 = Pow2(AttenuationRadius);
	float3 oc = RayOrigin - Center;
	float b = dot(oc, RayDirection);
	float h = AttenuationRadius2 - length2(oc - b * RayDirection);
	if (h > 0)
	{
		float2 t = -b + float2(-1, +1) * sqrt(h);
		TMin = max(t.x, TMin);
		TMax = min(t.y, TMax);

		float3 N = GetNormal(LightId);
		// now clip against the cone of the spot
		const float CosOuterConeAngle = GetCosConeAngles(LightId).x;
		const float SinOuterConeAngle = sqrt(1 - CosOuterConeAngle * CosOuterConeAngle);

		float2 TCone = IntersectInfiniteConeVolume(RayOrigin, RayDirection, Center, N * CosOuterConeAngle, SinOuterConeAngle);
		if (TCone.x < TCone.y)
		{
			TMin = max(TCone.x, TMin);
			TMax = min(TCone.y, TMax);
			float3 C = GetColor(LightId);
			float LightImportance = max3(C.x, C.y, C.z);
			return CreateEquiAngularSampler(LightImportance, Center, RayOrigin, RayDirection, TMin, TMax);
		}
	}
	return NullVolumeLightSetup();

}
