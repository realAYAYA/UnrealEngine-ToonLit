// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

struct FVolumeIntersection
{
	float VolumeTMin;
	float VolumeTMax;
	float BlockerHitT;

	bool HitVolume()
	{
		return VolumeTMin < VolumeTMax;
	}

	bool HitBlocker()
	{
		return BlockerHitT > 0.0;
	}
};

FVolumeIntersection CreateVolumeIntersection(float TMin, float TMax, float BlockerT = -1.0)
{
	FVolumeIntersection Result = (FVolumeIntersection)0;
	Result.VolumeTMin = TMin;
	Result.VolumeTMax = TMax;
	Result.BlockerHitT = BlockerT;
	return Result;
}

FVolumeIntersection CreateEmptyVolumeIntersection()
{
	return (FVolumeIntersection)0;
}


// representes an interval along the ray over which the specified volumes are known to exist
struct FVolumeIntersectionInterval
{
	float VolumeTMin;
	float VolumeTMax;
	uint VolumeMask;
};

struct FVolumeIntersectionList
{
	float3 VolumeTMin;
	float3 VolumeTMax;
	uint VolumeMask;

	// only need to track one blocker (assume they are opaque)
	float BlockerHitT;

	bool HitVolume()
	{
		return VolumeMask != 0;
	}

	bool HitBlocker()
	{
		return BlockerHitT > 0;
	}

	void Add(uint ID, FVolumeIntersection VolumeIntersection)
	{
		// merge the provided hit into the list
		if (VolumeIntersection.HitVolume())
		{
			VolumeTMin[ID] = VolumeIntersection.VolumeTMin;
			VolumeTMax[ID] = VolumeIntersection.VolumeTMax;
			VolumeMask |= PATH_TRACER_VOLUME_ENABLE_BIT << ID;
		}
		if (VolumeIntersection.HitBlocker())
		{
			if (!HitBlocker() || BlockerHitT > VolumeIntersection.BlockerHitT)
			{
				BlockerHitT = VolumeIntersection.BlockerHitT;
			}
		}
	}

	// Return the interval of TValues closest to the front of the list
	FVolumeIntersectionInterval GetCurrentInterval()
	{
		FVolumeIntersectionInterval Result = (FVolumeIntersectionInterval)0;
		for (int Index = 0; Index < PATH_TRACER_MAX_VOLUMES; Index++)
		{
			uint Mask = PATH_TRACER_VOLUME_ENABLE_BIT << Index;
			if ((VolumeMask & Mask) == 0)
			{
				continue; // not valid
			}

			float TMin = VolumeTMin[Index];
			float TMax = VolumeTMax[Index];
			if (Result.VolumeMask == 0)
			{
				// we haven't stored the start interval yet
				Result.VolumeTMin = TMin;
				Result.VolumeTMax = TMax;
				Result.VolumeMask = Mask;
			}
			else
			{
				if (Result.VolumeTMin == TMin)
				{
					// both segments start together, figure out which ends first
					Result.VolumeTMax = min(Result.VolumeTMax, TMax);
				}
				else if (Result.VolumeTMin < TMin)
				{
					// what we have so far _starts_ before the current segment
					// so either the two segments are disjoint (Result.y is closer)
					// or the two overlap, and we need to stop at the next transition line
					Result.VolumeTMax = min(Result.VolumeTMax, TMin);
				}
				else
				{
					// segments could be disjoint (TMax is closer) or overlapping (TMax is closer)
					Result.VolumeTMax = min(TMax, Result.VolumeTMin);
					Result.VolumeTMin = TMin; // we just established this one is closer
				}
			}
		}
		// now that we established the distance, figure out which IDs overlap with the resolved segment
		Result.VolumeMask = 0;
		for (int Index2 = 0; Index2 < PATH_TRACER_MAX_VOLUMES; Index2++)
		{
			uint Mask = PATH_TRACER_VOLUME_ENABLE_BIT << Index2;
			if ((VolumeMask & Mask) == 0)
			{
				continue; // not overlapping
			}
			if (Result.VolumeTMax > VolumeTMin[Index2] &&
				Result.VolumeTMin < VolumeTMax[Index2])
			{
				Result.VolumeMask |= Mask;
			}
		}
		return Result;
	}

	// Update all active intervals, knowing we have processed everything up to distance 'T'
	FVolumeIntersectionList Update(float T)
	{
		FVolumeIntersectionList Result = (FVolumeIntersectionList)0;
		// clip the current intervals, knowning that we are "T" away
		for (int Index = 0; Index < PATH_TRACER_MAX_VOLUMES; Index++)
		{
			uint Mask = PATH_TRACER_VOLUME_ENABLE_BIT << Index;
			if ((VolumeMask & Mask) == 0)
			{
				continue; // not valid
			}

			float TMax = VolumeTMax[Index];
			if (T < TMax)
			{
				// still valid? then add it back in
				Result.VolumeTMin[Index] = max(T, VolumeTMin[Index]);
				Result.VolumeTMax[Index] = TMax;
				Result.VolumeMask |= Mask;
			}
		}
		Result.BlockerHitT = BlockerHitT;
		return Result;
	}
};

FVolumeIntersectionList CreateEmptyVolumeIntersectionList()
{
	return (FVolumeIntersectionList)0;
}


// Represent a strict lower and upper bound on the values that can be returned by VolumeGetDensity along the given ray
struct FVolumeDensityBounds
{
	float3 SigmaMin; // minorant (control extinction)
	float3 SigmaMax; // majorant (upper bound)
};

FVolumeDensityBounds CreateVolumeDensityBound(float3 SigmaMin, float3 SigmaMax)
{
	FVolumeDensityBounds Result = (FVolumeDensityBounds)0;
	Result.SigmaMin = SigmaMin;
	Result.SigmaMax = SigmaMax;
	return Result;
}

void MergeVolumeDensityBounds(inout FVolumeDensityBounds Merged, FVolumeDensityBounds Other)
{
	Merged.SigmaMin += Other.SigmaMin;
	Merged.SigmaMax += Other.SigmaMax;
}


// The result of sampling a volume at a given point
struct FVolumeShadedResult
{
	float3 SigmaT;         // extinction
	float3 SigmaH;         // holdout density
	float3 SigmaSRayleigh; // Rayleight scattering coefficient
	float3 SigmaSHG;       // Henyey-Greenstein scattering coefficient
	float3 Emission;
	float PhaseG;          // 'g' term for HG lobe
	// TODO: second HG lobe?
};

FPathTracingPayload CreateMediumHitPayload(float HitT, float3 TranslatedWorldPos, FVolumeShadedResult ShadedResult)
{
	FPathTracingPayload Result = (FPathTracingPayload)0; // clear all fields
	Result.HitT = HitT;
	Result.TranslatedWorldPos = TranslatedWorldPos;
	Result.ShadingModelID = SHADINGMODELID_MEDIUM;
	Result.BSDFOpacity = 1.0;
	Result.PrimitiveLightingChannelMask = 7;
	Result.SetFrontFace();
	const float3 SigmaS = ShadedResult.SigmaSRayleigh + ShadedResult.SigmaSHG;
	const float3 RayleighWeight = select(SigmaS > 0.0, min(ShadedResult.SigmaSRayleigh, SigmaS) / SigmaS, 0.0);
	const float3 HGWeight = select(SigmaS > 0, min(ShadedResult.SigmaSHG, SigmaS) / SigmaS, 0.0);
	Result.SetBaseColor(RayleighWeight);
	Result.SetHG(HGWeight, ShadedResult.PhaseG);
	return Result;
}

void MergeVolumeShadedResult(inout FVolumeShadedResult Merged, FVolumeShadedResult Other, bool bAsHoldout)
{
	if (bAsHoldout)
	{
		Merged.SigmaT += Other.SigmaT;
		Merged.SigmaH += Other.SigmaT;
	}
	else
	{
		Merged.SigmaT += Other.SigmaT;
		Merged.SigmaSRayleigh += Other.SigmaSRayleigh;
		Merged.SigmaSHG += Other.SigmaSHG;
		Merged.Emission += Other.Emission;
		// blend phase function anisotropy based on amount of each medium
		float Qa = Other.SigmaSHG.x + Other.SigmaSHG.y + Other.SigmaSHG.z;
		float Qs = Merged.SigmaSHG.x + Merged.SigmaSHG.y + Merged.SigmaSHG.z;
		Merged.PhaseG = lerp(Merged.PhaseG, Other.PhaseG, Qs > 0 ? Qa / Qs : 0.0);
	}
}

// represent a stochastically chosen volume element that is guaranteed to lie between 
struct FVolumeSegment
{
	float3 Throughput; // path contribution from the start of the volume segment
	FVolumeIntersectionInterval Interval;

	bool IsValid() { return Interval.VolumeTMin < Interval.VolumeTMax; }
};

FVolumeSegment CreateEmptyVolumeSegment()
{
	return (FVolumeSegment)0;
}
