// Copyright Epic Games, Inc. All Rights Reserved.

/*====================================================================================================================
	PointCloudVertexFactory.usf: Vertex factory for point clouds. Based upon vector field visualization vertex factory.
 		There are no vertices used, just indices. Vertex positions are calculated based on vertex id and the point
 		cloud location buffer. Optionally, supports per point colors using another manual fetch stream. Otherwise, it
 		used the component's color setting for all points
=====================================================================================================================*/

#include "VertexFactoryCommon.ush"

/** Used to specify point size independently from scale, in case both want to be used for */
float PointSize;

/** Will either be 0 or all bits to select between always zero index and a real index */
uint ColorMask;

/**
 * Vertex attributes to fetch.
 */
struct FVertexFactoryInput
{
	/** Unique vertex ID. */
	uint VertexId : SV_VertexID;
	/** This doesn't use instancing */
	uint InstanceId : SV_InstanceID;
};

/**
 * Attributes to interpolate from the vertex shader to the pixel shader.
 */
struct FVertexFactoryInterpolantsVSToPS
{
	/** Dummy value to interpolate. */
	float2 DummyTexCoord : TEXCOORD0;

	half4 Color : COLOR0;

#if INSTANCED_STEREO
	nointerpolation uint PackedEyeIndex : PACKED_EYE_INDEX;
#endif
};

/**
 * Intermediate values computed in the vertex shader.
 */
struct FVertexFactoryIntermediates
{
	/** The position of the vertex in translated world space */
	float3 Position;
	/** The position of the point in translated world space */
	float3 PointTranslatedWorldPosition;
	/** The point's tangent in world space (+V) */
	float3 TangentUp;
	/** The point's tangent in world space (+U) */
	float3 TangentRight;
	/** The point's normal in world space */
	float3 TangentNormal;
	/** The color of the sprite. */
	half4 Color;
	/** Cached primitive and instance data */
	FSceneDataIntermediates SceneData;
};

FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.Primitive;
}

/**
 * Fetches the point's location from the point location buffer
 *
 * @param Input the vertex factory input
 *
 * @return the position of the point
 */
float3 GetPointLocation(FVertexFactoryInput Input)
{
	// Load the point's location
	uint InstanceId = (Input.VertexId / 4) * 3;
	float X = PointCloudVF.VertexFetch_PointLocationBuffer[InstanceId + 0];
	float Y = PointCloudVF.VertexFetch_PointLocationBuffer[InstanceId + 1];
	float Z = PointCloudVF.VertexFetch_PointLocationBuffer[InstanceId + 2];
	return float3(X, Y, Z);
}

/**
 * Fetches the point's color from the point color buffer
 *
 * @param Input the vertex factory input
 *
 * @return the color of the point
 */
half4 GetPointColor(FVertexFactoryInput Input)
{
	// InstanceId will always be zero if we're using a single color for all points, otherwise it will be the buffer index
	uint InstanceId = (Input.VertexId / 4) & ColorMask;

	return half4(PointCloudVF.VertexFetch_PointColorBuffer[InstanceId] FMANUALFETCH_COLOR_COMPONENT_SWIZZLE);
}

/**
 * Determines the X & Y offsets for this point based off of vertex id and point size
 *
 * @param Input the vertex factory input
 *
 * @return the color of the point
 */
float2 GetOffsetForVertex(FVertexFactoryInput Input)
{
	const float2 PositionOffsets[4] =
	{
		// Upper left
		float2(0.5f, -0.5f),
		// Upper right
		float2(0.5f, 0.5f),
		// Lower left
		float2(-0.5f, -0.5f),
		// Lower right
		float2(-0.5f, 0.5f)
	};
	// Choose the offset of the vert
	uint OffsetIndex = Input.VertexId % 4;
	return PositionOffsets[OffsetIndex] * PointSize;
}

float3 SafeNormalize(float3 V)
{
	return V * rsqrt(max(dot(V,V),0.01));
}

/**
 * Compute the tangents for a point
 *
 * @param OutUp - The tangent vector pointing up in screen space.
 * @param OutRight - The tangent vector pointing right in screen space.
 * @param PointTranslatedWorldPosition - Translated world position of the point
 */
void GetPointTangents(out float3 OutUp, out float3 OutRight, float3 PointTranslatedWorldPosition)
{
	// Select camera up/right vectors
	float3 CameraRight = ResolvedView.ViewRight;
	float3 CameraUp = -ResolvedView.ViewUp;

	// Determine the vector from the point to the camera
	float3 CameraDirection	= SafeNormalize(ResolvedView.TranslatedWorldCameraOrigin - PointTranslatedWorldPosition.xyz);
	float3 RightVector = CameraRight.xyz;
	float3 UpVector = CameraUp.xyz;

	// Rotate toward the camera
	RightVector = SafeNormalize(cross(CameraDirection, float3(0, 0, 1)));
	UpVector = cross(CameraDirection, RightVector);

	// Rotate the sprite to determine final tangents.
	OutRight = RightVector;
	OutUp = UpVector;
}

/**
 * Computes intermediates for the given vertex.
 *
 * @param Input - Vertex attributes.
 *
 * @returns the computed intermediate values.
 */
FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	// Load the position from the float stream
	float3 LoadedPosition = GetPointLocation(Input);
	// Transform position to (post-view-translation) world space
	float3 PointTranslatedWorldPosition = TransformLocalToTranslatedWorld(LoadedPosition.xyz).xyz;

	// Compute tangents for the point
	float3 TangentUp, TangentRight;
	GetPointTangents(TangentUp, TangentRight, PointTranslatedWorldPosition);

	// Offset of the vertex from the point's location
	float2 Offset = GetOffsetForVertex(Input);
	float3 VertexWorldOffset = Offset.x * TangentRight + Offset.y * TangentUp;
	float3 VertexWorldPosition = PointTranslatedWorldPosition + VertexWorldOffset;

	// Build and return the set of intermediates
	FVertexFactoryIntermediates Intermediates;
	Intermediates.SceneData = VF_GPUSCENE_GET_INTERMEDIATES(Input);
	Intermediates.Position = VertexWorldPosition;
	Intermediates.PointTranslatedWorldPosition = PointTranslatedWorldPosition;
	Intermediates.TangentUp = TangentUp;
	Intermediates.TangentRight = TangentRight;
	Intermediates.TangentNormal = normalize(cross(TangentRight, TangentUp));

	Intermediates.Color = GetPointColor(Input);

	return Intermediates;
}

/**
 * Computes material parameterss for a given pixel.
 *
 * @param Interpolants - Attributes interpolated from the vertex shader.
 *
 * @returns per-pixel material parameters.
 */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

	// Note that a non-zero texture coordinate is used to prevent the compiler
	// from optimizing out texture lookups that can cause mandatory requirements
	// to not be bound.

#if NUM_MATERIAL_TEXCOORDS
	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Interpolants.DummyTexCoord;
	}
#endif	//NUM_MATERIAL_TEXCOORDS

	Result.VertexColor = Interpolants.Color;

	Result.TwoSidedSign = 1;
	return Result;
}

/**
 * Computes material parameters for a given vertex.
 *
 * @param Input - Attributes for this vertex.
 * @param Intermediates - Intermediates computed for this vertex.
 * @param WorldPosition - The position of this vertex in world space.
 * @param TangentToLocal - The tangent basis for this vertex.
 *
 * @returns per-vertex material parameters.
 */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.SceneData = Intermediates.SceneData;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;
	Result.TangentToWorld = mul(TangentToLocal, GetLocalToWorld3x3());
	Result.PrevFrameLocalToWorld = GetPrimitiveDataFromUniformBuffer().LocalToWorld;
	return Result;
}

/**
 * Computes the world space position of this vertex.
 *
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns the position of this vertex in world space.
 */
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return TransformLocalToTranslatedWorld(Intermediates.Position.xyz);
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

/**
 * Constructs values that need to be interpolated from the vertex shader to the pixel shader.
 *
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns interpolants.
 */
FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;
	Interpolants.DummyTexCoord = float2(0,0);

	Interpolants.Color = Intermediates.Color;

#if INSTANCED_STEREO
	Interpolants.PackedEyeIndex = 0;
#endif

	return Interpolants;
}

/**
 * Computes the position of this vertex last frame in world space.
 *
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns the previous position of this vertex in world space.
 */
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return VertexFactoryGetWorldPosition(Input, Intermediates);
}

/**
 * Computes the tangent basis for this vertex in world space.
 *
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns the tangent basis for this vertex in world space.
 */
float3x3 VertexFactoryGetTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float3x3 TangentToLocal;
	TangentToLocal[0] = Intermediates.TangentRight;
	TangentToLocal[1] = Intermediates.TangentUp;
	TangentToLocal[2] = normalize(cross(Intermediates.TangentRight.xyz , Intermediates.TangentUp.xyz));
	return TangentToLocal;
}

#if INSTANCED_STEREO
uint VertexFactoryGetEyeIndex(uint InstanceId)
{
	return 0;
}
#endif

float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}

float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentNormal;
}
