// Copyright Epic Games, Inc. All Rights Reserved.

float3 {ParameterName}_SystemLWCTile;

void QueryOcclusionFactorWithRectangleGPU_{ParameterName}(in float3 In_SampleCenterWorldPos, in float In_SampleWindowWidthWorld, in float In_SampleWindowHeightWorld, in float In_SampleSteps, out float Out_VisibilityFraction, out float Out_SampleFraction)
{
	FLWCVector3 LwcSamplePos = MakeLWCVector3({ParameterName}_SystemLWCTile, In_SampleCenterWorldPos);
	float CameraDistance = LWCToFloat(LWCAbs(LWCDot(LWCSubtract(LwcSamplePos, PrimaryView.WorldViewOrigin), View.ViewForward.xyz)));

	float3 ResolvedLwcSamplePos = LWCToFloat(LWCAdd(LwcSamplePos, PrimaryView.PreViewTranslation));
	float4 SamplePosition = float4(ResolvedLwcSamplePos, 1);
	float4 ClipPosition = mul(SamplePosition, PrimaryView.TranslatedWorldToClip);
	float2 ScreenPosition = ClipPosition.xy / ClipPosition.w;
	float2 ScreenUV = ScreenPosition * PrimaryView.ScreenPositionScaleBias.xy + PrimaryView.ScreenPositionScaleBias.wz;

	float Steps = In_SampleSteps <= 1 ? 0 : In_SampleSteps;
	float TotalSamples = 0;
	float OccludedSamples = 0;

	float4 SampleWidthClip = mul(float4(PrimaryView.ViewRight * In_SampleWindowWidthWorld, 0) + SamplePosition, PrimaryView.TranslatedWorldToClip);
	float4 SampleHeightClip = mul(float4(PrimaryView.ViewUp * In_SampleWindowHeightWorld, 0) + SamplePosition, PrimaryView.TranslatedWorldToClip);
				
	float2 SampleWidthUV = SampleWidthClip.xy / SampleWidthClip.w * PrimaryView.ScreenPositionScaleBias.xy + PrimaryView.ScreenPositionScaleBias.wz;
	float2 SampleHeightUV = SampleHeightClip.xy / SampleHeightClip.w * PrimaryView.ScreenPositionScaleBias.xy + PrimaryView.ScreenPositionScaleBias.wz;
				
	float SampleWidth = ScreenUV.x > 1 ? 0 : SampleWidthUV.x - ScreenUV.x;
	float SampleHeight = ScreenUV.y > 1 ? 0 : SampleHeightUV.y - ScreenUV.y;

	if (Steps > 0) 
	{
		const float StepScale = 1.0f / (Steps - 1);
		for (int ys = 0; ys < Steps; ys++)
		{
			float SampleY = ScreenUV.y + SampleHeight * (ys * StepScale - 0.5f);
			if (SampleY <= 1 && SampleY >= 0)
			{
				for (int xs = 0; xs < Steps; xs++)
				{
					float SampleX = ScreenUV.x + SampleWidth * (xs * StepScale - 0.5f);
					if (SampleX <= 1 && SampleX >= 0)
					{
						float Depth = CalcSceneDepth(float2(SampleX, SampleY));
						if (Depth < CameraDistance) 
						{
							OccludedSamples++;
						}
						TotalSamples++;
					}
				}
			} 
		}
	}

	Out_VisibilityFraction = TotalSamples > 0 ? 1 - OccludedSamples / TotalSamples : 0;
	Out_SampleFraction = Steps == 0 ? 0 : (TotalSamples / (Steps * Steps));
}

void QueryOcclusionFactorWithCircleGPU_{ParameterName}(in float3 In_SampleCenterWorldPos, in float In_SampleWindowDiameterWorld, in float In_SampleRays, in float In_SampleStepsPerRay, out float Out_VisibilityFraction, out float Out_SampleFraction)
{
	const float PI = 3.14159265;
	const float SPIRAL_TURN = 2 * PI * 0.61803399; // use golden ratio to rotate sample pattern each ring so we get a spiral
	FLWCVector3 LwcSamplePos = MakeLWCVector3({ParameterName}_SystemLWCTile, In_SampleCenterWorldPos);
	float CameraDistance = LWCToFloat(LWCAbs(LWCDot(LWCSubtract(LwcSamplePos, PrimaryView.WorldViewOrigin), View.ViewForward.xyz)));

	float3 ResolvedLwcSamplePos = LWCToFloat(LWCAdd(LwcSamplePos, PrimaryView.PreViewTranslation));
	float4 SamplePosition = float4(ResolvedLwcSamplePos, 1);
	float4 ClipPosition = mul(SamplePosition, PrimaryView.TranslatedWorldToClip);
	float2 ScreenPosition = ClipPosition.xy / ClipPosition.w;
	float2 ScreenUV = ScreenPosition * PrimaryView.ScreenPositionScaleBias.xy + PrimaryView.ScreenPositionScaleBias.wz;

	float Rays = In_SampleRays <= 1 ? 0 : In_SampleRays;
	float Steps = In_SampleStepsPerRay < 1 ? 0 : In_SampleStepsPerRay;
	float TotalSamples = 0;
	float OccludedSamples = 0;

	if (ScreenUV.x <= 1 && ScreenUV.x >= 0 && ScreenUV.y <= 1 && ScreenUV.y >= 0)
	{
		float Depth = CalcSceneDepth(ScreenUV);
		if (Depth < CameraDistance) 
		{
			OccludedSamples++;
		}
		TotalSamples++;
	}
	if (Steps > 0) 
	{
		float Degrees = 0;
		for (int Step = 1; Step <= Steps; Step++)
		{
			float LerpFactor = Step / Steps;
			Degrees += SPIRAL_TURN;
			for (int ray = 0; ray < Rays; ray++)
			{
				// calc ray direction vector
				float3 RayDirection = cos(Degrees) * PrimaryView.ViewUp + sin(Degrees) * PrimaryView.ViewRight;
				float4 RayClip = mul(float4(RayDirection * In_SampleWindowDiameterWorld / 2, 0) + SamplePosition, PrimaryView.TranslatedWorldToClip);
				float2 RayUV = RayClip.xy / RayClip.w * PrimaryView.ScreenPositionScaleBias.xy + PrimaryView.ScreenPositionScaleBias.wz;

				if ((ScreenUV.x > 1 && RayUV.x < 0) || (ScreenUV.y > 1 && RayUV.y < 0) || (ScreenUV.x < 0 && RayUV.x > 1) || (ScreenUV.y < 0 && RayUV.y > 1))
				{
					continue;
				}
						
				float2 SampleUV = lerp(ScreenUV, RayUV, float2(LerpFactor, LerpFactor));
							
				if (SampleUV.x > 1 || SampleUV.x < 0 || SampleUV.y > 1 || SampleUV.y < 0)
				{
					continue;
				}
			
				float Depth = CalcSceneDepth(SampleUV);
				if (Depth < CameraDistance) 
				{
					OccludedSamples++;
				}
				TotalSamples++;
				Degrees += 2 * PI / Rays;
			}						
		}
	}
	Out_VisibilityFraction = TotalSamples > 0 ? 1 - OccludedSamples / TotalSamples : 0;
	Out_SampleFraction = Steps == 0 ? 0 : (TotalSamples / (Rays * Steps + 1));
}
