// Copyright Epic Games, Inc. All Rights Reserved.

#include "/Engine/Public/Platform.ush"

// Input variables
uint XVolume;
int NumberConvolutionalDimensions; // Optional - Only for nD convolution
// Input SRV variables
Buffer<uint> Zeros;
Buffer<uint> XSizes;
Buffer<uint> XWithZerosSizes;
// SRV/UAV variables
Buffer<float> XSRV;
RWBuffer<float> XWithZerosUAV;

[numthreads(THREADGROUP_SIZE_X, 1, 1)]
void XToXWithZerosCS(in const uint3 DispatchThreadID : SV_DispatchThreadID)
{
	const uint XIndex = DispatchThreadID.x;
	if (XIndex >= XVolume)
	{
		return;
	}

// 1D convolution
#if CONV_MODE == 0
	const uint BatchIndex = (XIndex / (XSizes[1] * XSizes[2]));
	const uint ChannelIndex = (XIndex / XSizes[2]) % XSizes[1];
	const uint XWithOffsetBatchChannelOffset = (BatchIndex * XSizes[1] + ChannelIndex) * XWithZerosSizes[2];
	const uint D1Index = XIndex % XSizes[2];
	const uint D1IndexWithZeros = D1Index * (Zeros[0] + 1);
	XWithZerosUAV[XWithOffsetBatchChannelOffset + D1IndexWithZeros] = XSRV[XIndex];

// 2D convolution
#elif CONV_MODE == 1
	const uint BatchIndex = (XIndex / (XSizes[1] * XSizes[2] * XSizes[3]));
	const uint ChannelIndex = (XIndex / (XSizes[2] * XSizes[3])) % XSizes[1];
	const uint XWithOffsetBatchChannelOffset = (BatchIndex * XSizes[1] + ChannelIndex) * XWithZerosSizes[2];
	const uint D1Index = (XIndex / XSizes[3]) % XSizes[2];
	const uint D2Index = XIndex % XSizes[3];
	const uint D1IndexWithZeros = D1Index * (Zeros[0] + 1);
	const uint D2IndexWithZeros = D2Index * (Zeros[1] + 1);
	XWithZerosUAV[(XWithOffsetBatchChannelOffset + D1IndexWithZeros) * XWithZerosSizes[3] + D2IndexWithZeros] = XSRV[XIndex];

// 3D convolution
#elif CONV_MODE == 2
	const uint BatchIndex = (XIndex / (XSizes[1] * XSizes[2] * XSizes[3] * XSizes[4]));
	const uint ChannelIndex = (XIndex / (XSizes[2] * XSizes[3] * XSizes[4])) % XSizes[1];
	const uint XWithOffsetBatchChannelOffset = (BatchIndex * XSizes[1] + ChannelIndex) * XWithZerosSizes[2];
	const uint D1Index = (XIndex / (XSizes[3] * XSizes[4])) % XSizes[2];
	const uint D2Index = (XIndex / XSizes[4]) % XSizes[3];
	const uint D3Index = XIndex % XSizes[4];
	const uint D1IndexWithZeros = D1Index * (Zeros[0] + 1);
	const uint D2IndexWithZeros = D2Index * (Zeros[1] + 1);
	const uint D3IndexWithZeros = D3Index * (Zeros[2] + 1);
	XWithZerosUAV[((XWithOffsetBatchChannelOffset + D1IndexWithZeros) * XWithZerosSizes[3] + D2IndexWithZeros) * XWithZerosSizes[4] + D3IndexWithZeros] = XSRV[XIndex];

// nD convolution
#elif CONV_MODE == 3
	if (NumberConvolutionalDimensions == 5)
	{
		const uint BatchIndex = (XIndex / (XSizes[1] * XSizes[2] * XSizes[3] * XSizes[4] * XSizes[5] * XSizes[6]));
		const uint ChannelIndex = (XIndex / (XSizes[2] * XSizes[3] * XSizes[4] * XSizes[5] * XSizes[6])) % XSizes[1];
		const uint XWithOffsetBatchChannelOffset = (BatchIndex * XSizes[1] + ChannelIndex) * XWithZerosSizes[2];
		const uint D1Index = ((((XIndex / XSizes[6]) / XSizes[5]) / XSizes[4]) / XSizes[3]) % XSizes[2];
		const uint D2Index =  (((XIndex / XSizes[6]) / XSizes[5]) / XSizes[4]) % XSizes[3];
		const uint D3Index =   ((XIndex / XSizes[6]) / XSizes[5]) % XSizes[4];
		const uint D4Index =    (XIndex / XSizes[6]) % XSizes[5];
		const uint D5Index =     XIndex % XSizes[6];
		const uint D1IndexWithZeros = D1Index * (Zeros[0] + 1);
		const uint D2IndexWithZeros = D2Index * (Zeros[1] + 1);
		const uint D3IndexWithZeros = D3Index * (Zeros[2] + 1);
		const uint D4IndexWithZeros = D4Index * (Zeros[3] + 1);
		const uint D5IndexWithZeros = D5Index * (Zeros[4] + 1);
		XWithZerosUAV[((((XWithOffsetBatchChannelOffset + D1IndexWithZeros) * XWithZerosSizes[3] + D2IndexWithZeros) * XWithZerosSizes[4] + D3IndexWithZeros) * XWithZerosSizes[5] + D4IndexWithZeros) * XWithZerosSizes[6] + D5IndexWithZeros]
			= XSRV[XIndex];
	}
#else
	UNEXPECTED_CASE_FOR_CONV_MODE;
#endif
}
