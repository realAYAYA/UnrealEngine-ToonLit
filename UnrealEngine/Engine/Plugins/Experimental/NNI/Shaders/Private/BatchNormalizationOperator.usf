// Copyright Epic Games, Inc. All Rights Reserved.

#include "/Engine/Public/Platform.ush"

// SRV/UAV variables
Buffer<float> XSRV;
Buffer<float> Scale;
Buffer<float> Bias;
Buffer<float> Mean;
Buffer<float> Variance;
RWBuffer<float> OutputUAV;
// Input variables
uint BatchSize;
uint ChannelSize;
uint ChannelsVolume;
uint ImageArea;
float Epsilon;

[numthreads(THREADGROUP_SIZE_X, 1, 1)]
void BatchNormalizationCS(in const uint3 DispatchThreadID : SV_DispatchThreadID)
{
	const uint AreaIndex = DispatchThreadID.x;
	if (AreaIndex >= ImageArea)
	{
		return;
	}

	// 1 dimension
#if BATCH_NORMALIZATION_MODE == 0
	//for (uint AreaIndex = 0; AreaIndex < ImageArea; ++AreaIndex)
	{
#if IS_INLINED > 0
		const float X = OutputUAV[AreaIndex];
#else
		const float X = XSRV[AreaIndex];
#endif
		//OutputUAV[AreaIndex] = X;// -Mean[0]) / sqrt(Variance[0] + Epsilon) + Bias[0];
		OutputUAV[AreaIndex] = Scale[0] * (X - Mean[0]) / sqrt(Variance[0] + Epsilon) + Bias[0];
	}

	// > 1 dimensions
#elif BATCH_NORMALIZATION_MODE == 1
	// Per batch
	for (uint NIndex = 0; NIndex < BatchSize; ++NIndex)
	{
		// Per channel
		for (uint ChannelIndex = 0; ChannelIndex < ChannelSize; ++ChannelIndex)
		{
			const uint AbsoluteIndexBias = NIndex * ChannelsVolume + ChannelIndex * ImageArea;

			//for (uint AreaIndex = 0; AreaIndex < ImageArea; ++AreaIndex)
			{
				const uint AbsoluteIndex = AbsoluteIndexBias + AreaIndex;
#if IS_INLINED > 0
				const float X = OutputUAV[AbsoluteIndex];
#else
				const float X = XSRV[AbsoluteIndex];
#endif
				//OutputUAV[AbsoluteIndex] = /*Scale[ChannelIndex] * (*/X;// -Mean[ChannelIndex]) / sqrt(Variance[ChannelIndex] + Epsilon) + Bias[ChannelIndex];
				OutputUAV[AbsoluteIndex] = Scale[ChannelIndex] * (X - Mean[ChannelIndex]) / sqrt(Variance[ChannelIndex] + Epsilon) + Bias[ChannelIndex];
			}
		}
	}

	// Unknown
#else
	UNEXPECTED_CASE_FOR_BATCH_NORMALIZATION_MODE_NOT_0_OR_1;
#endif
}
