// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "AdvancedPreviewScene.h"

class UDataflowBaseContent;
class USkeletalMeshComponent;
class UDynamicMeshComponent;
class UDataflowComponent;
class UAnimationAsset;
class UAnimSingleNodeInstance;
class UMaterialInterface;
class FAssetEditorModeManager;
class ADataflowActor;
class UMeshElementsVisualizer;
class UInteractiveToolPropertySet;

namespace UE
{
	namespace Geometry
	{
		class FDynamicMesh3;
	}
}

/**
 * Dataflow preview scene
 * @brief the scene is holding all the objects that will be
 * visible and potentially editable within the viewport
 */
class DATAFLOWEDITOR_API FDataflowPreviewScene : public FAdvancedPreviewScene
{
public:

	FDataflowPreviewScene(FPreviewScene::ConstructionValues ConstructionValues, TObjectPtr<UDataflowBaseContent> InDataflowContent);
	virtual ~FDataflowPreviewScene();
	
	// FGCObject interface
	virtual void AddReferencedObjects(FReferenceCollector& Collector) override;

	/** Dataflow content accessors */
	TObjectPtr<UDataflowBaseContent> GetDataflowContent() { return DataflowContent; }
	const TObjectPtr<UDataflowBaseContent> GetDataflowContent() const { return DataflowContent; }

	/** Root scene actor accessors */
	TObjectPtr<AActor> GetRootActor() { return RootSceneActor; }
	const TObjectPtr<AActor> GetRootActor() const { return RootSceneActor; }

	/** Dataflow mode manager accessors */
	TSharedPtr<FAssetEditorModeManager>& GetDataflowModeManager() { return DataflowModeManager; }
	const TSharedPtr<FAssetEditorModeManager>& GetDataflowModeManager() const { return DataflowModeManager; }
	
	/** Build the scene bounding box */
	FBox GetBoundingBox() const;

	/** Tick data flow scene */
	virtual void TickDataflowScene(const float DeltaSeconds) {}

	/** Check if a primitive component is selected */
	bool IsComponentSelected(const UPrimitiveComponent* InComponent) const;

	/** Check if the preview scene can run simulation */
	virtual bool CanRunSimulation() const {return false;}
	
protected:
	
	/** Root scene actor */
	TObjectPtr<AActor> RootSceneActor = nullptr;
	
	/** Data flows assets datas used to build the scene components */
	TObjectPtr<UDataflowBaseContent> DataflowContent = nullptr;

	/** Mode Manager for selection */
	TSharedPtr<FAssetEditorModeManager> DataflowModeManager;
};

/**
 * Dataflow construction scene holding all the dynamic meshes used/displayed in the dataflow graph
 */
class DATAFLOWEDITOR_API FDataflowConstructionScene : public FDataflowPreviewScene
{
public:

	FDataflowConstructionScene(FPreviewScene::ConstructionValues ConstructionValues, TObjectPtr<UDataflowBaseContent> InEditorContent);
	virtual ~FDataflowConstructionScene();

	// FGCObject interface
	virtual void AddReferencedObjects(FReferenceCollector& Collector) override;
	
	/** Tick data flow scene */
	virtual void TickDataflowScene(const float DeltaSeconds) override;

	/** Check if the preview scene can run simulation */
	virtual bool CanRunSimulation() const override {return false;}
	
	/**  Get all the dynamic mesh components */
	TArray<TObjectPtr<UDynamicMeshComponent>> GetDynamicMeshComponents() { return DynamicMeshComponents; }
	
	/** Is there ANYTHING to render */
	bool HasRenderableGeometry();

	/** Close the construction scene */
	void ResetConstructionScene();

	/** Update the construction scene */
	void UpdateConstructionScene();
	
private:

	/** Reset the scene mesh visualizer */
	void ResetWireframeMeshElementsVisualizer();

	/** Update the scene mesh visualizer */
	void UpdateWireframeMeshElementsVisualizer();

	/** Add a mesh visualizer to the scene */
	void AddWireframeMeshElementsVisualizer();

	/** Reset all the dynamic mesh components */
    void ResetDynamicMeshComponents();
	
	/** Build the dynamic mesh components from the dataflow graph render targets*/
	void UpdateDynamicMeshComponents();
	
	/** Add a dynamic mesh component to the scene */
	TObjectPtr<UDynamicMeshComponent>& AddDynamicMeshComponent(
		UE::Geometry::FDynamicMesh3&& DynamicMesh, const TArray<UMaterialInterface*>& MaterialSet);
	
	/** Dynamic mesh components generated by the tools for edit/manipulation*/
	TArray<TObjectPtr<UDynamicMeshComponent>> DynamicMeshComponents;

	/** Rest space wireframe. They have to get ticked to be able to respond to setting changes. [ticked] */
	TObjectPtr<UMeshElementsVisualizer> WireframeDraw = nullptr;

	/** Property objects (visible or not) that get ticked. [ticked] */
	TArray<TObjectPtr<UInteractiveToolPropertySet>> PropertyObjectsToTick;

	/** Show the wireframe on render */ 
	bool bConstructionViewWireframe = true;
};


/**
 * Dataflow simulation scene holding all the dataflow content components
 */
class DATAFLOWEDITOR_API FDataflowSimulationScene : public FDataflowPreviewScene
{
public:

	FDataflowSimulationScene(FPreviewScene::ConstructionValues ConstructionValues, TObjectPtr<UDataflowBaseContent> InEditorContent);
	virtual ~FDataflowSimulationScene();

	/** Tick data flow scene */
	virtual void TickDataflowScene(const float DeltaSeconds) override;
	
	/** Check if the preview scene can run simulation */
	virtual bool CanRunSimulation() const { return true; }
};


