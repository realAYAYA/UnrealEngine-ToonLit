// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "Editor/View/Column/IObjectTreeColumn.h"
#include "Editor/View/Column/IPropertyTreeColumn.h"
#include "Editor/View/Column/ReplicationColumnInfo.h"
#include "Editor/View/Column/SelectionViewerColumns.h"
#include "Replication/Editor/View/Column/ReplicationColumnsUtils.h"
#include "ReplicationWidgetDelegates.h"

#include "Delegates/Delegate.h"
#include "Misc/Attribute.h"
#include "Templates/SharedPointer.h"

class UObject;
class SWidget;

struct FConcertStreamObjectAutoBindingRules;
struct FConcertObjectReplicationMap;

namespace UE::ConcertSharedSlate
{
	class FReplicatedPropertyData;
	
	class IEditableMultiReplicationStreamModel;
	class IEditableReplicationStreamModel;
	class IMultiReplicationStreamEditor;
	class IObjectNameModel;
	class IObjectSelectionSourceModel;
	class IPropertyTreeView;
	class IReplicationStreamModel;
	class IReplicationStreamEditor;
	class IReplicationStreamViewer;
	class IReplicationSubobjectView;
	class IStreamExtender;
	class IObjectHierarchyModel;
	class IPropertySelectionSourceModel;
	
	/**
	 * Creates a model that can be passed to CreateEditor.
	 * 
	 * @param ReplicationMapAttribute Getter for extracting the FConcertObjectReplicationMap to edit
	 * @param Extender Optional callbacks for adding additional properties and objects when an object is added to the model
	 * 
	 * @return A model that will edit the FConcertObjectReplicationMap.
	 */
	CONCERTSHAREDSLATE_API TSharedRef<IEditableReplicationStreamModel> CreateBaseStreamModel(
		TAttribute<FConcertObjectReplicationMap*> ReplicationMapAttribute,
		TSharedPtr<IStreamExtender> Extender = nullptr
		);

	enum class EFilterResult : uint8
	{
		/** Include the object into list of displayed objects */
		PassesFilter,
		/** Exclude the object from list of displayed objects */
		DoesNotPassFilter
	};
	DECLARE_DELEGATE_RetVal_OneParam(EFilterResult, FFilterPropertyData, const FReplicatedPropertyData&);
	
	struct FCreatePropertyTreeViewParams
	{
		/** Optional. Additional property columns you want added. */
		TArray<FPropertyColumnEntry> PropertyColumns
		{
			ReplicationColumns::Property::LabelColumn(),
			ReplicationColumns::Property::TypeColumn()
		};

		/** Optional filter function. Return true to al */
		FFilterPropertyData FilterItem;
		
		/** Optional initial primary sort mode for object rows */
		FColumnSortInfo PrimaryPropertySort { ReplicationColumns::Property::LabelColumnId, EColumnSortMode::Ascending };
		/** Optional initial secondary sort mode for object rows */
		FColumnSortInfo SecondaryPropertySort { ReplicationColumns::Property::LabelColumnId, EColumnSortMode::Ascending };
		
		/** Optional widget to add to the left of the property list search bar. */
		TAlwaysValidWidget LeftOfPropertySearchBar;
		/** Optional widget to add to the right of the property list search bar. */
		TAlwaysValidWidget RightOfPropertySearchBar;
		/** Optional widget to add between the search bar and the table view (e.g. a SBasicFilterBar). */
		TAlwaysValidWidget RowBelowSearchBar;
		/** Optional, alternate content to show instead of the tree view when there are no rows. */
		TAlwaysValidWidget NoItemsContent;
	};
	
	/**
	 * Creates a tree view that uses a search box for filtering items.
	 * You can customize this tree view by adding custom widgets and columns into the property view.
	 */
	CONCERTSHAREDSLATE_API TSharedRef<IPropertyTreeView> CreateSearchablePropertyTreeView(FCreatePropertyTreeViewParams Params = {});
	
	/** Params for creating a IReplicationStreamViewer. */
	struct FCreateViewerParams
	{
		/** Required. Displays the properties in a tree view. You can pass in e.g. custom UI with advanced filtering. */
		TSharedRef<IPropertyTreeView> PropertyTreeView = CreateSearchablePropertyTreeView();
		
		/**
		 * Optional. Determines the objects displayed as children to the top-level objects in the top section.
		 * If left unspecified, the top will only display actors.
		 * @note The created view will keep a strong reference to this.
		 */
		TSharedPtr<IObjectHierarchyModel> ObjectHierarchy;

		/** Optional. Determines the display name of objects. */
		TSharedPtr<IObjectNameModel> NameModel;

		/** Called to generate the context menu for objects. This extends the options already generated by this widget and is called at the end. */
		FExtendObjectMenu OnExtendObjectsContextMenu;
		
		/** Optional. Additional object columns you want added. */
		TArray<FObjectColumnEntry> ObjectColumns;
		
		/** Optional initial primary sort mode for object rows */
		FColumnSortInfo PrimaryObjectSort;
		/** Optional initial secondary sort mode for object rows */
		FColumnSortInfo SecondaryObjectSort;
		
		/** Optional widget to add to the left of the object list search bar. */
		TAlwaysValidWidget LeftOfObjectSearchBar;
		/** Optional widget to add to the right of the object list search bar. */
		TAlwaysValidWidget RightOfObjectSearchBar;
	};

	// TODO DP 5.5: Create factory function that uses FCreateViewerParams and creates an IReplicationStreamViewer

	/** Params for creating an IReplicationStreamEditor */
	struct FCreateEditorParams
	{
		/**
		 * Required. The model that the editor is displaying.
		 * @note The view will keep a strong reference to this.
		 */
		TSharedRef<IEditableReplicationStreamModel> DataModel;
		
		/**
		 * Required. Determines the objects that can be added to the object list. 
		 * @note The view will keep a strong reference to this.
		 */
		TSharedRef<IObjectSelectionSourceModel> ObjectSource;
		/**
		 * Required. Determines the properties that are displayed in the property list. 
		 * @note The view will keep a strong reference to this.
		 */
		TSharedRef<IPropertySelectionSourceModel> PropertySource;
		
		/** Optional. Determines whether all UI for changing the model should be disabled. */
		TAttribute<bool> IsEditingEnabled;
		/** Optional. Whenever IsEditingEnabled returns true, this tooltip is displayed for relevant, disabled UI. */
		TAttribute<FText> EditingDisabledToolTipText;
	};

	/**
	 * Creates a base replication stream editor.
	 * 
	 * This editor implements base functionality for adding objects but has NO logic for editing properties.
	 * You are expected to inject widgets or columns, which implement editing properties.
	 * @see ConcertClientSharedSlate::CreateDefaultStreamEditor, which adds a checkbox to the start of every property row.
	 *
	 * The editor consists of two or three areas (depending whether on whether SubobjectView was specified), which share similar workflows the level editor:
	 * 1. Root objects, similar to world outliner:
	 *		- Similar to World Outliner: Displays top-level objects, i.e. actors, are added here.
	 *		- FCreateEditorParams::ObjectSource is used to build a combo button through which new objects can be added.
	 * 2. Properties: Shows properties of the selected root object and / or subobjects.
	 */
	CONCERTSHAREDSLATE_API TSharedRef<IReplicationStreamEditor> CreateBaseStreamEditor(FCreateEditorParams EditorParams, FCreateViewerParams ViewerParams);

	DECLARE_DELEGATE_RetVal_OneParam(TSharedPtr<IEditableReplicationStreamModel>, FGetAutoAssignTarget, TConstArrayView<UObject*>);
	/** Params for creating an IMultiReplicationStreamEditor */
	struct FCreateMultiStreamEditorParams
	{
		/**
		 * The source of underlying streams that should be edited.
		 * @note The view will keep a strong reference to this.
		 */
		TSharedRef<IEditableMultiReplicationStreamModel> MultiStreamModel;

		/**
		 * This model consolidates all objects in all streams.
		 * 
		 * When an object is added
		 * - to one of the streams,
		 * - via the "add" button,
		 * it is added here, too. 
		 * This is needed for the internal operation of the multi view.
		 *
		 * You can make this model internally transact (@see ConcertClientSharedSlate::CreateTransactionalStreamModel).
		 * Doing so causes the objects added via "add" button to be transacted meaning the user can undo adding objects.
		 * 
		 * @note The view will keep a strong reference to this
		 */
		TSharedRef<IEditableReplicationStreamModel> ConsolidatedObjectModel;
		
		/**
		 * Determines the objects that are displayed in the property list. 
		 * @note The view will keep a strong reference to this.
		 */
		TSharedRef<IObjectSelectionSourceModel> ObjectSource;
		/**
		 * Determines the properties that can be added to the property list.
		 * @note The view will keep a strong reference to this.
		 */
		TSharedRef<IPropertySelectionSourceModel> PropertySource;

		/** Optional. If set, the Add Actor button should automatically assign the added object to stream returned */
		FGetAutoAssignTarget GetAutoAssignToStreamDelegate;
	};

	/**
	 * Creates an editor that displays multiple streams in a single widget.
	 * 
	 * This editor consolidates all replicated objects into a single UI and display all properties in the class.
	 * You are supposed to inject custom columns into the property section for assigning specific properties
	 * to the streams in the IEditableReplicationStreamModel.
	 *
	 * @note This editor does NOT create any UI for changing the assigned properties. You are supposed to inject column widgets to the property rows for this.
	 */
	CONCERTSHAREDSLATE_API TSharedRef<IMultiReplicationStreamEditor> CreateBaseMultiStreamEditor(FCreateMultiStreamEditorParams EditorParams, FCreateViewerParams ViewerParams);
}
