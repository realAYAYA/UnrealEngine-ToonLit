// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "Graph/Nodes/MovieGraphRenderPassNode.h"

#include "Styling/AppStyle.h"
#include "MovieGraphWidgetRendererBaseNode.generated.h"

// Forward Declares
class FWidgetRenderer;
class SVirtualWindow;
class SWidget;
class UMovieGraphDefaultRenderer;
class UTextureRenderTarget2D;
struct FMovieGraphRenderPassLayerData;
struct FMovieGraphRenderPassSetupData;

/** Base node containing common logic for nodes that render widgets. */
UCLASS(Abstract)
class MOVIERENDERPIPELINECORE_API UMovieGraphWidgetRendererBaseNode : public UMovieGraphRenderPassNode
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Overrides, meta = (InlineEditConditionToggle))
	uint8 bOverride_bCompositeOntoFinalImage : 1;

	/** If true, the pass will be composited onto each render. Does not apply to multi-layer EXR files. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, meta=(EditCondition="bOverride_bCompositeOntoFinalImage"), Category="Widget Settings")
	bool bCompositeOntoFinalImage = true;

protected:
	/** A render pass for a specific render layer, generated by the UMovieGraphWidgetRendererBaseNode CDO. */
	struct FMovieGraphWidgetPass
	{
		virtual ~FMovieGraphWidgetPass() = default;

		virtual void Setup(TWeakObjectPtr<UMovieGraphDefaultRenderer> InRenderer, const FMovieGraphRenderPassLayerData& InLayer);
		virtual void Teardown();
		virtual TSharedPtr<SWidget> GetWidget() = 0;
		virtual void Render(const FMovieGraphTraversalContext& InFrameTraversalContext, const FMovieGraphTimeStepData& InTimeData);
		virtual void GatherOutputPasses(TArray<FMovieGraphRenderDataIdentifier>& OutExpectedPasses) const;
		virtual int32 GetCompositingSortOrder() const = 0;

	protected:
		FMovieGraphRenderPassLayerData LayerData;

		/** Unique identifier passed in GatherOutputPasses and with each render that identifies the data produced by this renderer. */
		FMovieGraphRenderDataIdentifier RenderDataIdentifier;

		/** The renderer associated with this pass. */
		TWeakObjectPtr<UMovieGraphDefaultRenderer> Renderer;

		/** The node instance (not CDO) associated with this pass. */
		TWeakObjectPtr<UMovieGraphWidgetRendererBaseNode> RenderPassNode;
	};

	/** Widget renderer shared with all FMovieGraphWidgetPass instances. */
	TSharedPtr<FWidgetRenderer> WidgetRenderer;

	/** Render passes generated by GeneratePass() calls on the CDO. */
	TArray<TUniquePtr<FMovieGraphWidgetPass>> CurrentInstances;

protected:
	/** Generate a new pass that the widget renderer will use. */
	virtual TUniquePtr<FMovieGraphWidgetPass> GeneratePass() PURE_VIRTUAL(UMovieGraphWidgetRendererBaseNode::GeneratePass, return nullptr;);
	
	// UMovieGraphRenderPassNode Interface
	virtual void SetupImpl(const FMovieGraphRenderPassSetupData& InSetupData) override;
	virtual void TeardownImpl() override;
	virtual void RenderImpl(const FMovieGraphTraversalContext& InFrameTraversalContext, const FMovieGraphTimeStepData& InTimeData) override;
	virtual void GatherOutputPassesImpl(UMovieGraphEvaluatedConfig* InConfig, TArray<FMovieGraphRenderDataIdentifier>& OutExpectedPasses) const override;
	// ~UMovieGraphRenderPassNode Interface

private:
	/** Virtual window instances shared with all FMovieGraphWidgetPass instances, keyed by resolution. */
	TMap<const FIntPoint, TSharedPtr<SVirtualWindow>> SharedVirtualWindows;

private:
	/** Gets an existing virtual window with the specified resolution, or creates a new one if one does not exist yet. */
	TSharedPtr<SVirtualWindow> GetOrCreateVirtualWindow(const FIntPoint& InResolution);
};