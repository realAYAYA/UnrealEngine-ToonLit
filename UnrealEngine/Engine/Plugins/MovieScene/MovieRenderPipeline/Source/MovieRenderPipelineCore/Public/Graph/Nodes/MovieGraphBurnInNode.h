// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "Graph/Nodes/MovieGraphRenderPassNode.h"

#include "MovieGraphBurnInNode.generated.h"

// Forward Declares
class FWidgetRenderer;
class SVirtualWindow;
class UMovieGraphBurnInWidget;
class UMovieGraphDefaultRenderer;
class UMoviePipelineBurnInWidget;
struct FMovieGraphRenderPassLayerData;
struct FMovieGraphRenderPassSetupData;

/** A node which generates a widget burn-in, rendered to a standalone image or composited on top of a render layer. */
UCLASS()
class MOVIERENDERPIPELINECORE_API UMovieGraphBurnInNode : public UMovieGraphRenderPassNode
{
	GENERATED_BODY()

public:
#if WITH_EDITOR
	virtual FText GetNodeTitle(const bool bGetDescriptive = false) const override;
	virtual FLinearColor GetNodeTitleColor() const override;
	virtual FSlateIcon GetIconAndTint(FLinearColor& OutColor) const override;
#endif

	/** Gets an existing virtual window with the specified resolution, or creates a new one if one does not exist yet. */
	TSharedPtr<SVirtualWindow> GetOrCreateVirtualWindow(const FIntPoint& InResolution);

	/**
	 * Gets an existing widget instance of type WidgetClass if one has been created. Otherwise, returns a new instance
	 * of WidgetClass with owner InOwner.
	 */
	TObjectPtr<UMovieGraphBurnInWidget> GetOrCreateBurnInWidget(UClass* WidgetClass, UWorld* InOwner);

public:
	static const FString RendererName;
	
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Overrides, meta = (InlineEditConditionToggle))
	uint8 bOverride_BurnInClass : 1;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Overrides, meta = (InlineEditConditionToggle))
	uint8 bOverride_bCompositeOntoFinalImage : 1;

	/** The widget that the burn-in should use. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, meta=(MetaClass="/Script/MovieRenderPipelineCore.MovieGraphBurnInWidget", EditCondition="bOverride_BurnInClass"), Category="Widget Settings")
	FSoftClassPath BurnInClass;

	/** If true, the burn-in image will be composited into the final image pass. Does not apply to multi-layer EXR files. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, meta=(EditCondition="bOverride_bCompositeOntoFinalImage"), Category="Widget Settings")
	bool bCompositeOntoFinalImage;

protected:
	/** A render pass for a specific render layer, generated by the UMovieGraphBurnInNode CDO. */
	struct FMovieGraphBurnInPass
	{
		void Setup(TWeakObjectPtr<UMovieGraphDefaultRenderer> InRenderer, const FMovieGraphRenderPassLayerData& InLayer);
		void Teardown();
		void Render(const FMovieGraphTraversalContext& InFrameTraversalContext, const FMovieGraphTimeStepData& InTimeData);
		void GatherOutputPassesImpl(TArray<FMovieGraphRenderDataIdentifier>& OutExpectedPasses) const;

	protected:
		FMovieGraphRenderPassLayerData LayerData;

		/** Unique identifier passed in GatherOutputPasses and with each render that identifies the data produced by this renderer. */
		FMovieGraphRenderDataIdentifier RenderDataIdentifier;

		/** The renderer associated with this pass. */
		TWeakObjectPtr<UMovieGraphDefaultRenderer> Renderer;

		/** The node instance (not CDO) associated with this pass. */
		TWeakObjectPtr<UMovieGraphBurnInNode> RenderPassNode;
	};

private:
	/** Widget renderer shared with all FMovieGraphBurnInPass instances. */
	TSharedPtr<FWidgetRenderer> WidgetRenderer;

	/** Virtual window instances shared with all FMovieGraphBurnInPass instances, keyed by resolution. */
	TMap<const FIntPoint, TSharedPtr<SVirtualWindow>> SharedVirtualWindows;

	/** Burn-in widget instances shared with all FMovieGraphBurnInPass instances, keyed by burn-in class. */
	UPROPERTY(Transient)
	TMap<const UClass*, TObjectPtr<UMovieGraphBurnInWidget>> BurnInWidgetInstances;

	/** Render passes generated by the UMovieGraphBurnInNode CDO. */
	TArray<TUniquePtr<FMovieGraphBurnInPass>> CurrentInstances;

protected:
	// UMovieGraphRenderPassNode Interface
	virtual FString GetRendererNameImpl() const override { return RendererName; }
	virtual void SetupImpl(const FMovieGraphRenderPassSetupData& InSetupData) override;
	virtual void TeardownImpl() override;
	virtual void RenderImpl(const FMovieGraphTraversalContext& InFrameTraversalContext, const FMovieGraphTimeStepData& InTimeData) override;
	virtual void GatherOutputPassesImpl(TArray<FMovieGraphRenderDataIdentifier>& OutExpectedPasses) const override;
	// ~UMovieGraphRenderPassNode Interface
};