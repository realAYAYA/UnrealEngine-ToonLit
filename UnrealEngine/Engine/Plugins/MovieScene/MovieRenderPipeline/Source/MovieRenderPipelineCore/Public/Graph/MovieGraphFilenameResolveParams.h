// Copyright Epic Games, Inc. All Rights Reserved.
#pragma once

#include "CoreMinimal.h"
#include "Misc/FrameRate.h"
#include "Graph/MovieGraphRenderDataIdentifier.h"
#include "MovieGraphFilenameResolveParams.generated.h"

// Forward Declare
class UMoviePipelineExecutorJob;
class UMovieGraphEvaluatedConfig;
class UMoviePipelineExecutorShot;

/**
* This data structure contains a list of key-value pairs (as strings) for both filename resolving, and file metadata.
* They are stored as two separate arrays (as metadata is often a bit more verbose/human friendly) and it is not required
* that the two arrays be in sync. When resolving final filenames, any {tokens} will be replaced with a matching key-value
* if found in the FilenameArguments variable. Because of this, FilenameArguments should be short and avoid illegal filename chars.
*/
USTRUCT(BlueprintType)
struct FMovieGraphResolveArgs
{
	GENERATED_BODY()

	FMovieGraphResolveArgs() = default;

	/** A set of Key/Value pairs for output filename format strings (without {}) and their values. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Render Pipeline")
	TMap<FString, FString> FilenameArguments;

	/** A set of Key/Value pairs for file metadata for file formats that support metadata. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Render Pipeline")
	TMap<FString, FString> FileMetadata;
};

/*
* This data structure contains all of the information needed to resolve a filename format string from the Movie Graph.
* During runtime the values are generated by the actual rendering and then placed into this data structure before resolving
* an actual {format_string} using the UMovieGraphBlueprintLibrary. You can use this to resolve filenames when editing. If
* you wish to resolve a partial format string (such as {sequence_name}/{frame_number} but have it only resolve {sequence_name}
* you can add ("frame_number", "{frame_number}") to the FileNameFormatOverrides and that portion of the format string will
* be preserved so the resulting string back would say "my_seq_name/{frame_number}".
*/
USTRUCT(BlueprintType)
struct FMovieGraphFilenameResolveParams
{
	GENERATED_BODY()

	FMovieGraphFilenameResolveParams()
		: RootFrameNumber(0)
		, ShotFrameNumber(0)
		, RootFrameNumberRel(0)
		, ShotFrameNumberRel(0)
		, Version(0)
		, bForceRelativeFrameNumbers(false)
		, bEnsureAbsolutePath(true)
		, InitializationTime(0)
		, ZeroPadFrameNumberCount(0)
		, Job(nullptr)
		, Shot(nullptr)
		, EvaluatedConfig(nullptr)
		, FrameNumberOffset(0)
	{
	}
	
	/**
	* This is used to fill out tokens related to the render data that the file represents.
	* Used to fill out the {camera_name}, {render_layer}, {renderer_name}, {renderer_sub_name} tokens.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	FMovieGraphRenderDataIdentifier RenderDataIdentifier;
	
	/**
	* Frame Number for the Root (matching what you see in the Sequencer timeline. ie: If the Sequence PlaybackRange starts on 50, this value would be 50 on the first frame.
	* Used to fill out the {frame_number} token.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	int32 RootFrameNumber;
	
	/** 
	* Frame Number for the Shot (matching what you would see in Sequencer at the sub-sequence level. 
	* Used to fill out the {frame_number_shot} token.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	int32 ShotFrameNumber;
	
	/** 
	* Frame Number for the Root (relative to 0, not what you would see in the Sequencer timeline. ie: If sequence PlaybackRange starts on 50, this value would be 0 on the first frame.)
	* Used to fill out the {frame_number_rel} token.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	int32 RootFrameNumberRel;
	
	/** 
	* Frame Number for the Shot (relative to 0, not what you would see in the Sequencer timeline.) 
	* Used to fill out the {frame_number_shot_rel} token.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	int32 ShotFrameNumberRel;
	
	/** A key/value pair that maps metadata names to their values. Output is only supported in exr formats at the moment. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	TMap<FString, FString> FileMetadata;
	
	/** Used to resolve {version} format arguments. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	int32 Version;
	
	/** If true, force format strings (like {frame_number}) to resolve using the relative version. Used when slow-mo is detected as frame numbers would overlap. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	bool bForceRelativeFrameNumbers;

	/** 
	* If true, If the format string is a relative path, then the resulting resolved path will be converted to an absolute path.
	* Assumes that the relative path should be resolved relative to the engine/editor executable.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	bool bEnsureAbsolutePath;
	
	/** The initialization time for this job. Used to resolve time-based format arguments. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	FDateTime InitializationTime;
	
	/** When converitng frame numbers to strings, how many digits should we pad them up to? ie: 5 => 0005 with a count of 4. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	int32 ZeroPadFrameNumberCount;

	/** 
	* A map between "{format}" tokens and their values. These are applied after the auto-generated ones from the system,
	* which allows the caller to override things like {.ext}
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	TMap<FString, FString> FileNameFormatOverrides;

	/** Optional. If specified, used to resolve some tokens related to the job.*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	TObjectPtr<UMoviePipelineExecutorJob> Job;

	/** Optional. If specified, used to resolve the shot name. No settings from this shot are ever used (they must come form the EvaluatedConfig instead). */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	TObjectPtr<UMoviePipelineExecutorShot> Shot;

	/** Optional. If specified, used to resolve some tokens related to settings in the shot (such as {ts_count}). */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	TObjectPtr<UMovieGraphEvaluatedConfig> EvaluatedConfig;

	/** Added onto the various FrameNumber settings automatically. Can be used to offset values (such as starting your Level Sequence on frame 0, but outputting it to disk at 1001). */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	int32 FrameNumberOffset;

	/** What is the default Frame Rate? This will be overwritten by the Output Setting from the evaluated config (if specified). */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Movie Graph")
	FFrameRate DefaultFrameRate;
};