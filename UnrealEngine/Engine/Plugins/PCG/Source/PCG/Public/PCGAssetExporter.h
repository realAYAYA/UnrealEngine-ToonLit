// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "PCGDataAsset.h"

class UPackage;

#include "PCGAssetExporter.generated.h"

/** Common structure to hold saving options required to export or update PCG assets. */
USTRUCT(BlueprintType)
struct PCG_API FPCGAssetExporterParameters
{
	GENERATED_BODY()

	/** Controls whether we will open a Save... dialog, works only when a single level is exported. Overrides update anywhere. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = Settings)
	bool bOpenSaveDialog = true;

	/** Target asset path name */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = Settings)
	FString AssetName;

	/** Target asset path to write the PCG assets to. */
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = Settings)
	FString AssetPath;

	/** Controls whether the assets will be saved at the end of the process or not. */
	bool bSaveOnExportEnded = true;
};

/** Base class for asset exporters. Can be extended either natively or through blueprint. Not intended to be used in non-editor builds. */
UCLASS(BlueprintType, Abstract, Blueprintable)
class PCG_API UPCGAssetExporter : public UObject
{
	GENERATED_BODY()

public:
	/** Drives the asset creation for the data parsed from the level, will return UPCGDataAsset by default. */
	virtual TSubclassOf<UPCGDataAsset> GetAssetType() const;

	/** Exports data to an asset based on the exporter's metadata */
	bool Export(const FString& PackageName, UPCGDataAsset* Asset);

	/** Updates the asset from its source data, when possible */
	UPackage* Update(const FAssetData& PCGAsset);

protected:
	/** Returns the subtype of PCG data asset generated by the Level To Asset process. Override this in the instances where you would not use the default base class. */
	UFUNCTION(BlueprintNativeEvent, meta = (DisplayName = "Get Asset Type", ForceAsFunction))
	TSubclassOf<UPCGDataAsset> BP_GetAssetType() const;

	UFUNCTION(BlueprintNativeEvent, meta = (DisplayName = "Update Asset", ForceAsFunction))
	bool BP_ExportToAsset(UPCGDataAsset* Asset);

	/** Loads exporter metadata from the asset */
	void SerializeMetadataFromAsset(const FAssetData& PCGAsset);

	/** Saves exporter metadata to the asset */
	void SerializeMetadataToAsset(const FAssetData& PCGAsset);

	/** Exports data to an asset based on the exporter's metadata */
	virtual bool ExportAsset(const FString& PackageName, UPCGDataAsset* Asset);

	/** Updates the asset from its source data, when possible */
	virtual UPackage* UpdateAsset(const FAssetData& PCGAsset);

	/** Sets up the exporter prior to performing update */
	virtual void SerializeMetadata(FArchive& Ar) {}
};