// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "defines.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto MPROTOCOL_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct MPROTOCOL_API TableStruct_game_2eproto {
  static const uint32_t offsets[];
};
MPROTOCOL_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
namespace idlepb {
class DoGmCommand;
struct DoGmCommandDefaultTypeInternal;
MPROTOCOL_API extern DoGmCommandDefaultTypeInternal _DoGmCommand_default_instance_;
class EnterLevelAck;
struct EnterLevelAckDefaultTypeInternal;
MPROTOCOL_API extern EnterLevelAckDefaultTypeInternal _EnterLevelAck_default_instance_;
class EnterLevelReq;
struct EnterLevelReqDefaultTypeInternal;
MPROTOCOL_API extern EnterLevelReqDefaultTypeInternal _EnterLevelReq_default_instance_;
class LoginGameAck;
struct LoginGameAckDefaultTypeInternal;
MPROTOCOL_API extern LoginGameAckDefaultTypeInternal _LoginGameAck_default_instance_;
class LoginGameReq;
struct LoginGameReqDefaultTypeInternal;
MPROTOCOL_API extern LoginGameReqDefaultTypeInternal _LoginGameReq_default_instance_;
class Ping;
struct PingDefaultTypeInternal;
MPROTOCOL_API extern PingDefaultTypeInternal _Ping_default_instance_;
class Pong;
struct PongDefaultTypeInternal;
MPROTOCOL_API extern PongDefaultTypeInternal _Pong_default_instance_;
class ReportError;
struct ReportErrorDefaultTypeInternal;
MPROTOCOL_API extern ReportErrorDefaultTypeInternal _ReportError_default_instance_;
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
template<> MPROTOCOL_API ::idlepb::DoGmCommand* Arena::CreateMaybeMessage<::idlepb::DoGmCommand>(Arena*);
template<> MPROTOCOL_API ::idlepb::EnterLevelAck* Arena::CreateMaybeMessage<::idlepb::EnterLevelAck>(Arena*);
template<> MPROTOCOL_API ::idlepb::EnterLevelReq* Arena::CreateMaybeMessage<::idlepb::EnterLevelReq>(Arena*);
template<> MPROTOCOL_API ::idlepb::LoginGameAck* Arena::CreateMaybeMessage<::idlepb::LoginGameAck>(Arena*);
template<> MPROTOCOL_API ::idlepb::LoginGameReq* Arena::CreateMaybeMessage<::idlepb::LoginGameReq>(Arena*);
template<> MPROTOCOL_API ::idlepb::Ping* Arena::CreateMaybeMessage<::idlepb::Ping>(Arena*);
template<> MPROTOCOL_API ::idlepb::Pong* Arena::CreateMaybeMessage<::idlepb::Pong>(Arena*);
template<> MPROTOCOL_API ::idlepb::ReportError* Arena::CreateMaybeMessage<::idlepb::ReportError>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace idlepb {

enum LoginGameRetCode : int {
  LoginGameRetCode_Ok = 0,
  LoginGameRetCode_Unknown = 1,
  LoginGameRetCode_NoRole = 2,
  LoginGameRetCode_DuplicateLogin = 3,
  LoginGameRetCode_AccountInvalid = 4,
  LoginGameRetCode_VersionError = 5,
  LoginGameRetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LoginGameRetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool LoginGameRetCode_IsValid(int value);
constexpr LoginGameRetCode LoginGameRetCode_MIN = LoginGameRetCode_Ok;
constexpr LoginGameRetCode LoginGameRetCode_MAX = LoginGameRetCode_VersionError;
constexpr int LoginGameRetCode_ARRAYSIZE = LoginGameRetCode_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginGameRetCode_descriptor();
template<typename T>
inline const std::string& LoginGameRetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginGameRetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginGameRetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginGameRetCode_descriptor(), enum_t_value);
}
inline bool LoginGameRetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginGameRetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginGameRetCode>(
    LoginGameRetCode_descriptor(), name, value);
}
// ===================================================================

class MPROTOCOL_API Ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {}
  ~Ping() override;
  explicit PROTOBUF_CONSTEXPR Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ping& from) {
    Ping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.Ping";
  }
  protected:
  explicit Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqTicksFieldNumber = 1,
  };
  // int64 req_ticks = 1;
  void clear_req_ticks();
  int64_t req_ticks() const;
  void set_req_ticks(int64_t value);
  private:
  int64_t _internal_req_ticks() const;
  void _internal_set_req_ticks(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t req_ticks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API Pong final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.Pong) */ {
 public:
  inline Pong() : Pong(nullptr) {}
  ~Pong() override;
  explicit PROTOBUF_CONSTEXPR Pong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pong(const Pong& from);
  Pong(Pong&& from) noexcept
    : Pong() {
    *this = ::std::move(from);
  }

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pong& operator=(Pong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pong& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pong* internal_default_instance() {
    return reinterpret_cast<const Pong*>(
               &_Pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pong& a, Pong& b) {
    a.Swap(&b);
  }
  inline void Swap(Pong* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pong>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pong& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pong& from) {
    Pong::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pong* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.Pong";
  }
  protected:
  explicit Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqTicksFieldNumber = 1,
    kRspTicksFieldNumber = 2,
  };
  // int64 req_ticks = 1;
  void clear_req_ticks();
  int64_t req_ticks() const;
  void set_req_ticks(int64_t value);
  private:
  int64_t _internal_req_ticks() const;
  void _internal_set_req_ticks(int64_t value);
  public:

  // int64 rsp_ticks = 2;
  void clear_rsp_ticks();
  int64_t rsp_ticks() const;
  void set_rsp_ticks(int64_t value);
  private:
  int64_t _internal_rsp_ticks() const;
  void _internal_set_rsp_ticks(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.Pong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t req_ticks_;
    int64_t rsp_ticks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API DoGmCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.DoGmCommand) */ {
 public:
  inline DoGmCommand() : DoGmCommand(nullptr) {}
  ~DoGmCommand() override;
  explicit PROTOBUF_CONSTEXPR DoGmCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoGmCommand(const DoGmCommand& from);
  DoGmCommand(DoGmCommand&& from) noexcept
    : DoGmCommand() {
    *this = ::std::move(from);
  }

  inline DoGmCommand& operator=(const DoGmCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoGmCommand& operator=(DoGmCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoGmCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoGmCommand* internal_default_instance() {
    return reinterpret_cast<const DoGmCommand*>(
               &_DoGmCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DoGmCommand& a, DoGmCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(DoGmCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoGmCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoGmCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoGmCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DoGmCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DoGmCommand& from) {
    DoGmCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoGmCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.DoGmCommand";
  }
  protected:
  explicit DoGmCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:idlepb.DoGmCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ReportError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ReportError) */ {
 public:
  inline ReportError() : ReportError(nullptr) {}
  ~ReportError() override;
  explicit PROTOBUF_CONSTEXPR ReportError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportError(const ReportError& from);
  ReportError(ReportError&& from) noexcept
    : ReportError() {
    *this = ::std::move(from);
  }

  inline ReportError& operator=(const ReportError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportError& operator=(ReportError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportError& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportError* internal_default_instance() {
    return reinterpret_cast<const ReportError*>(
               &_ReportError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReportError& a, ReportError& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportError& from) {
    ReportError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ReportError";
  }
  protected:
  explicit ReportError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ReportError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API LoginGameReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.LoginGameReq) */ {
 public:
  inline LoginGameReq() : LoginGameReq(nullptr) {}
  ~LoginGameReq() override;
  explicit PROTOBUF_CONSTEXPR LoginGameReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginGameReq(const LoginGameReq& from);
  LoginGameReq(LoginGameReq&& from) noexcept
    : LoginGameReq() {
    *this = ::std::move(from);
  }

  inline LoginGameReq& operator=(const LoginGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginGameReq& operator=(LoginGameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginGameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginGameReq* internal_default_instance() {
    return reinterpret_cast<const LoginGameReq*>(
               &_LoginGameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginGameReq& a, LoginGameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginGameReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginGameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginGameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginGameReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginGameReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginGameReq& from) {
    LoginGameReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginGameReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.LoginGameReq";
  }
  protected:
  explicit LoginGameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kClientVersionFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string client_version = 2;
  void clear_client_version();
  const std::string& client_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_version();
  PROTOBUF_NODISCARD std::string* release_client_version();
  void set_allocated_client_version(std::string* client_version);
  private:
  const std::string& _internal_client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_version(const std::string& value);
  std::string* _internal_mutable_client_version();
  public:

  // @@protoc_insertion_point(class_scope:idlepb.LoginGameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API LoginGameAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.LoginGameAck) */ {
 public:
  inline LoginGameAck() : LoginGameAck(nullptr) {}
  ~LoginGameAck() override;
  explicit PROTOBUF_CONSTEXPR LoginGameAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginGameAck(const LoginGameAck& from);
  LoginGameAck(LoginGameAck&& from) noexcept
    : LoginGameAck() {
    *this = ::std::move(from);
  }

  inline LoginGameAck& operator=(const LoginGameAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginGameAck& operator=(LoginGameAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginGameAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginGameAck* internal_default_instance() {
    return reinterpret_cast<const LoginGameAck*>(
               &_LoginGameAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginGameAck& a, LoginGameAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginGameAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginGameAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginGameAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginGameAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginGameAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginGameAck& from) {
    LoginGameAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginGameAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.LoginGameAck";
  }
  protected:
  explicit LoginGameAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 2,
    kRetFieldNumber = 1,
    kIsReloginFieldNumber = 3,
  };
  // .idlepb.PlayerData player_data = 2;
  bool has_player_data() const;
  private:
  bool _internal_has_player_data() const;
  public:
  void clear_player_data();
  const ::idlepb::PlayerData& player_data() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerData* release_player_data();
  ::idlepb::PlayerData* mutable_player_data();
  void set_allocated_player_data(::idlepb::PlayerData* player_data);
  private:
  const ::idlepb::PlayerData& _internal_player_data() const;
  ::idlepb::PlayerData* _internal_mutable_player_data();
  public:
  void unsafe_arena_set_allocated_player_data(
      ::idlepb::PlayerData* player_data);
  ::idlepb::PlayerData* unsafe_arena_release_player_data();

  // .idlepb.LoginGameRetCode ret = 1;
  void clear_ret();
  ::idlepb::LoginGameRetCode ret() const;
  void set_ret(::idlepb::LoginGameRetCode value);
  private:
  ::idlepb::LoginGameRetCode _internal_ret() const;
  void _internal_set_ret(::idlepb::LoginGameRetCode value);
  public:

  // bool is_relogin = 3;
  void clear_is_relogin();
  bool is_relogin() const;
  void set_is_relogin(bool value);
  private:
  bool _internal_is_relogin() const;
  void _internal_set_is_relogin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.LoginGameAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::PlayerData* player_data_;
    int ret_;
    bool is_relogin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API EnterLevelReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:idlepb.EnterLevelReq) */ {
 public:
  inline EnterLevelReq() : EnterLevelReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR EnterLevelReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterLevelReq(const EnterLevelReq& from);
  EnterLevelReq(EnterLevelReq&& from) noexcept
    : EnterLevelReq() {
    *this = ::std::move(from);
  }

  inline EnterLevelReq& operator=(const EnterLevelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterLevelReq& operator=(EnterLevelReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterLevelReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterLevelReq* internal_default_instance() {
    return reinterpret_cast<const EnterLevelReq*>(
               &_EnterLevelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EnterLevelReq& a, EnterLevelReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterLevelReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterLevelReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterLevelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterLevelReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EnterLevelReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EnterLevelReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.EnterLevelReq";
  }
  protected:
  explicit EnterLevelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:idlepb.EnterLevelReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API EnterLevelAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.EnterLevelAck) */ {
 public:
  inline EnterLevelAck() : EnterLevelAck(nullptr) {}
  ~EnterLevelAck() override;
  explicit PROTOBUF_CONSTEXPR EnterLevelAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterLevelAck(const EnterLevelAck& from);
  EnterLevelAck(EnterLevelAck&& from) noexcept
    : EnterLevelAck() {
    *this = ::std::move(from);
  }

  inline EnterLevelAck& operator=(const EnterLevelAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterLevelAck& operator=(EnterLevelAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterLevelAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterLevelAck* internal_default_instance() {
    return reinterpret_cast<const EnterLevelAck*>(
               &_EnterLevelAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EnterLevelAck& a, EnterLevelAck& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterLevelAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterLevelAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterLevelAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterLevelAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterLevelAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnterLevelAck& from) {
    EnterLevelAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterLevelAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.EnterLevelAck";
  }
  protected:
  explicit EnterLevelAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.EnterLevelAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ok_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ping

// int64 req_ticks = 1;
inline void Ping::clear_req_ticks() {
  _impl_.req_ticks_ = int64_t{0};
}
inline int64_t Ping::_internal_req_ticks() const {
  return _impl_.req_ticks_;
}
inline int64_t Ping::req_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.Ping.req_ticks)
  return _internal_req_ticks();
}
inline void Ping::_internal_set_req_ticks(int64_t value) {
  
  _impl_.req_ticks_ = value;
}
inline void Ping::set_req_ticks(int64_t value) {
  _internal_set_req_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.Ping.req_ticks)
}

// -------------------------------------------------------------------

// Pong

// int64 req_ticks = 1;
inline void Pong::clear_req_ticks() {
  _impl_.req_ticks_ = int64_t{0};
}
inline int64_t Pong::_internal_req_ticks() const {
  return _impl_.req_ticks_;
}
inline int64_t Pong::req_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.Pong.req_ticks)
  return _internal_req_ticks();
}
inline void Pong::_internal_set_req_ticks(int64_t value) {
  
  _impl_.req_ticks_ = value;
}
inline void Pong::set_req_ticks(int64_t value) {
  _internal_set_req_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.Pong.req_ticks)
}

// int64 rsp_ticks = 2;
inline void Pong::clear_rsp_ticks() {
  _impl_.rsp_ticks_ = int64_t{0};
}
inline int64_t Pong::_internal_rsp_ticks() const {
  return _impl_.rsp_ticks_;
}
inline int64_t Pong::rsp_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.Pong.rsp_ticks)
  return _internal_rsp_ticks();
}
inline void Pong::_internal_set_rsp_ticks(int64_t value) {
  
  _impl_.rsp_ticks_ = value;
}
inline void Pong::set_rsp_ticks(int64_t value) {
  _internal_set_rsp_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.Pong.rsp_ticks)
}

// -------------------------------------------------------------------

// DoGmCommand

// string command = 1;
inline void DoGmCommand::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& DoGmCommand::command() const {
  // @@protoc_insertion_point(field_get:idlepb.DoGmCommand.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DoGmCommand::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.DoGmCommand.command)
}
inline std::string* DoGmCommand::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:idlepb.DoGmCommand.command)
  return _s;
}
inline const std::string& DoGmCommand::_internal_command() const {
  return _impl_.command_.Get();
}
inline void DoGmCommand::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* DoGmCommand::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* DoGmCommand::release_command() {
  // @@protoc_insertion_point(field_release:idlepb.DoGmCommand.command)
  return _impl_.command_.Release();
}
inline void DoGmCommand::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.DoGmCommand.command)
}

// -------------------------------------------------------------------

// ReportError

// string text = 1;
inline void ReportError::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& ReportError::text() const {
  // @@protoc_insertion_point(field_get:idlepb.ReportError.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportError::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.ReportError.text)
}
inline std::string* ReportError::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:idlepb.ReportError.text)
  return _s;
}
inline const std::string& ReportError::_internal_text() const {
  return _impl_.text_.Get();
}
inline void ReportError::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportError::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* ReportError::release_text() {
  // @@protoc_insertion_point(field_release:idlepb.ReportError.text)
  return _impl_.text_.Release();
}
inline void ReportError::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.ReportError.text)
}

// -------------------------------------------------------------------

// LoginGameReq

// string account = 1;
inline void LoginGameReq::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& LoginGameReq::account() const {
  // @@protoc_insertion_point(field_get:idlepb.LoginGameReq.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginGameReq::set_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.LoginGameReq.account)
}
inline std::string* LoginGameReq::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:idlepb.LoginGameReq.account)
  return _s;
}
inline const std::string& LoginGameReq::_internal_account() const {
  return _impl_.account_.Get();
}
inline void LoginGameReq::_internal_set_account(const std::string& value) {
  
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginGameReq::_internal_mutable_account() {
  
  return _impl_.account_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginGameReq::release_account() {
  // @@protoc_insertion_point(field_release:idlepb.LoginGameReq.account)
  return _impl_.account_.Release();
}
inline void LoginGameReq::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  _impl_.account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.LoginGameReq.account)
}

// string client_version = 2;
inline void LoginGameReq::clear_client_version() {
  _impl_.client_version_.ClearToEmpty();
}
inline const std::string& LoginGameReq::client_version() const {
  // @@protoc_insertion_point(field_get:idlepb.LoginGameReq.client_version)
  return _internal_client_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginGameReq::set_client_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.LoginGameReq.client_version)
}
inline std::string* LoginGameReq::mutable_client_version() {
  std::string* _s = _internal_mutable_client_version();
  // @@protoc_insertion_point(field_mutable:idlepb.LoginGameReq.client_version)
  return _s;
}
inline const std::string& LoginGameReq::_internal_client_version() const {
  return _impl_.client_version_.Get();
}
inline void LoginGameReq::_internal_set_client_version(const std::string& value) {
  
  _impl_.client_version_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginGameReq::_internal_mutable_client_version() {
  
  return _impl_.client_version_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginGameReq::release_client_version() {
  // @@protoc_insertion_point(field_release:idlepb.LoginGameReq.client_version)
  return _impl_.client_version_.Release();
}
inline void LoginGameReq::set_allocated_client_version(std::string* client_version) {
  if (client_version != nullptr) {
    
  } else {
    
  }
  _impl_.client_version_.SetAllocated(client_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_version_.IsDefault()) {
    _impl_.client_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.LoginGameReq.client_version)
}

// -------------------------------------------------------------------

// LoginGameAck

// .idlepb.LoginGameRetCode ret = 1;
inline void LoginGameAck::clear_ret() {
  _impl_.ret_ = 0;
}
inline ::idlepb::LoginGameRetCode LoginGameAck::_internal_ret() const {
  return static_cast< ::idlepb::LoginGameRetCode >(_impl_.ret_);
}
inline ::idlepb::LoginGameRetCode LoginGameAck::ret() const {
  // @@protoc_insertion_point(field_get:idlepb.LoginGameAck.ret)
  return _internal_ret();
}
inline void LoginGameAck::_internal_set_ret(::idlepb::LoginGameRetCode value) {
  
  _impl_.ret_ = value;
}
inline void LoginGameAck::set_ret(::idlepb::LoginGameRetCode value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:idlepb.LoginGameAck.ret)
}

// .idlepb.PlayerData player_data = 2;
inline bool LoginGameAck::_internal_has_player_data() const {
  return this != internal_default_instance() && _impl_.player_data_ != nullptr;
}
inline bool LoginGameAck::has_player_data() const {
  return _internal_has_player_data();
}
inline const ::idlepb::PlayerData& LoginGameAck::_internal_player_data() const {
  const ::idlepb::PlayerData* p = _impl_.player_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerData&>(
      ::idlepb::_PlayerData_default_instance_);
}
inline const ::idlepb::PlayerData& LoginGameAck::player_data() const {
  // @@protoc_insertion_point(field_get:idlepb.LoginGameAck.player_data)
  return _internal_player_data();
}
inline void LoginGameAck::unsafe_arena_set_allocated_player_data(
    ::idlepb::PlayerData* player_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_data_);
  }
  _impl_.player_data_ = player_data;
  if (player_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.LoginGameAck.player_data)
}
inline ::idlepb::PlayerData* LoginGameAck::release_player_data() {
  
  ::idlepb::PlayerData* temp = _impl_.player_data_;
  _impl_.player_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerData* LoginGameAck::unsafe_arena_release_player_data() {
  // @@protoc_insertion_point(field_release:idlepb.LoginGameAck.player_data)
  
  ::idlepb::PlayerData* temp = _impl_.player_data_;
  _impl_.player_data_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerData* LoginGameAck::_internal_mutable_player_data() {
  
  if (_impl_.player_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerData>(GetArenaForAllocation());
    _impl_.player_data_ = p;
  }
  return _impl_.player_data_;
}
inline ::idlepb::PlayerData* LoginGameAck::mutable_player_data() {
  ::idlepb::PlayerData* _msg = _internal_mutable_player_data();
  // @@protoc_insertion_point(field_mutable:idlepb.LoginGameAck.player_data)
  return _msg;
}
inline void LoginGameAck::set_allocated_player_data(::idlepb::PlayerData* player_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_data_);
  }
  if (player_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_data));
    if (message_arena != submessage_arena) {
      player_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_data_ = player_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.LoginGameAck.player_data)
}

// bool is_relogin = 3;
inline void LoginGameAck::clear_is_relogin() {
  _impl_.is_relogin_ = false;
}
inline bool LoginGameAck::_internal_is_relogin() const {
  return _impl_.is_relogin_;
}
inline bool LoginGameAck::is_relogin() const {
  // @@protoc_insertion_point(field_get:idlepb.LoginGameAck.is_relogin)
  return _internal_is_relogin();
}
inline void LoginGameAck::_internal_set_is_relogin(bool value) {
  
  _impl_.is_relogin_ = value;
}
inline void LoginGameAck::set_is_relogin(bool value) {
  _internal_set_is_relogin(value);
  // @@protoc_insertion_point(field_set:idlepb.LoginGameAck.is_relogin)
}

// -------------------------------------------------------------------

// EnterLevelReq

// -------------------------------------------------------------------

// EnterLevelAck

// bool ok = 1;
inline void EnterLevelAck::clear_ok() {
  _impl_.ok_ = false;
}
inline bool EnterLevelAck::_internal_ok() const {
  return _impl_.ok_;
}
inline bool EnterLevelAck::ok() const {
  // @@protoc_insertion_point(field_get:idlepb.EnterLevelAck.ok)
  return _internal_ok();
}
inline void EnterLevelAck::_internal_set_ok(bool value) {
  
  _impl_.ok_ = value;
}
inline void EnterLevelAck::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:idlepb.EnterLevelAck.ok)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idlepb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::idlepb::LoginGameRetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::LoginGameRetCode>() {
  return ::idlepb::LoginGameRetCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
