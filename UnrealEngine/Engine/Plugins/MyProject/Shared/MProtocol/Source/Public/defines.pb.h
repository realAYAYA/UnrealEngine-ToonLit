// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: defines.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_defines_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_defines_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_defines_2eproto MPROTOCOL_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct MPROTOCOL_API TableStruct_defines_2eproto {
  static const uint32_t offsets[];
};
MPROTOCOL_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_defines_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace idlepb {

enum ItemQuality : int {
  EQ_None = 0,
  EQ_White = 1,
  EQ_Green = 2,
  EQ_Blue = 3,
  EQ_Purple = 4,
  EQ_Orange = 5,
  EQ_Red = 6,
  ItemQuality_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ItemQuality_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool ItemQuality_IsValid(int value);
constexpr ItemQuality ItemQuality_MIN = EQ_None;
constexpr ItemQuality ItemQuality_MAX = EQ_Red;
constexpr int ItemQuality_ARRAYSIZE = ItemQuality_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemQuality_descriptor();
template<typename T>
inline const std::string& ItemQuality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemQuality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemQuality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemQuality_descriptor(), enum_t_value);
}
inline bool ItemQuality_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemQuality* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemQuality>(
    ItemQuality_descriptor(), name, value);
}
enum PeriodType : int {
  PT_None = 0,
  PT_Day = 1,
  PT_Week = 2,
  PT_Mouth = 3,
  PT_Year = 4,
  PeriodType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PeriodType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool PeriodType_IsValid(int value);
constexpr PeriodType PeriodType_MIN = PT_None;
constexpr PeriodType PeriodType_MAX = PT_Year;
constexpr int PeriodType_ARRAYSIZE = PeriodType_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeriodType_descriptor();
template<typename T>
inline const std::string& PeriodType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeriodType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeriodType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeriodType_descriptor(), enum_t_value);
}
inline bool PeriodType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PeriodType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeriodType>(
    PeriodType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace idlepb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::idlepb::ItemQuality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::ItemQuality>() {
  return ::idlepb::ItemQuality_descriptor();
}
template <> struct is_proto_enum< ::idlepb::PeriodType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::PeriodType>() {
  return ::idlepb::PeriodType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_defines_2eproto
