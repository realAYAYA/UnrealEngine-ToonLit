// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "defines.pb.h"
#include "net.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto MPROTOCOL_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct MPROTOCOL_API TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
MPROTOCOL_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace idlepb {
class AbilityActiveResult;
struct AbilityActiveResultDefaultTypeInternal;
MPROTOCOL_API extern AbilityActiveResultDefaultTypeInternal _AbilityActiveResult_default_instance_;
class AbilityData;
struct AbilityDataDefaultTypeInternal;
MPROTOCOL_API extern AbilityDataDefaultTypeInternal _AbilityData_default_instance_;
class AbilityEffectData;
struct AbilityEffectDataDefaultTypeInternal;
MPROTOCOL_API extern AbilityEffectDataDefaultTypeInternal _AbilityEffectData_default_instance_;
class AbilityEffectDefData;
struct AbilityEffectDefDataDefaultTypeInternal;
MPROTOCOL_API extern AbilityEffectDefDataDefaultTypeInternal _AbilityEffectDefData_default_instance_;
class AbilityPKResult;
struct AbilityPKResultDefaultTypeInternal;
MPROTOCOL_API extern AbilityPKResultDefaultTypeInternal _AbilityPKResult_default_instance_;
class AlchemyMakeData;
struct AlchemyMakeDataDefaultTypeInternal;
MPROTOCOL_API extern AlchemyMakeDataDefaultTypeInternal _AlchemyMakeData_default_instance_;
class AlchemyPackageItem;
struct AlchemyPackageItemDefaultTypeInternal;
MPROTOCOL_API extern AlchemyPackageItemDefaultTypeInternal _AlchemyPackageItem_default_instance_;
class AlchemyRecipeData;
struct AlchemyRecipeDataDefaultTypeInternal;
MPROTOCOL_API extern AlchemyRecipeDataDefaultTypeInternal _AlchemyRecipeData_default_instance_;
class AppearanceCollection;
struct AppearanceCollectionDefaultTypeInternal;
MPROTOCOL_API extern AppearanceCollectionDefaultTypeInternal _AppearanceCollection_default_instance_;
class ArenaCheckListData;
struct ArenaCheckListDataDefaultTypeInternal;
MPROTOCOL_API extern ArenaCheckListDataDefaultTypeInternal _ArenaCheckListData_default_instance_;
class ArenaCheckListRewardData;
struct ArenaCheckListRewardDataDefaultTypeInternal;
MPROTOCOL_API extern ArenaCheckListRewardDataDefaultTypeInternal _ArenaCheckListRewardData_default_instance_;
class ArenaExplorationStatisticalItem;
struct ArenaExplorationStatisticalItemDefaultTypeInternal;
MPROTOCOL_API extern ArenaExplorationStatisticalItemDefaultTypeInternal _ArenaExplorationStatisticalItem_default_instance_;
class BattleHistory;
struct BattleHistoryDefaultTypeInternal;
MPROTOCOL_API extern BattleHistoryDefaultTypeInternal _BattleHistory_default_instance_;
class BattleHistoryRecord;
struct BattleHistoryRecordDefaultTypeInternal;
MPROTOCOL_API extern BattleHistoryRecordDefaultTypeInternal _BattleHistoryRecord_default_instance_;
class BattleInfo;
struct BattleInfoDefaultTypeInternal;
MPROTOCOL_API extern BattleInfoDefaultTypeInternal _BattleInfo_default_instance_;
class BattleRoleInfo;
struct BattleRoleInfoDefaultTypeInternal;
MPROTOCOL_API extern BattleRoleInfoDefaultTypeInternal _BattleRoleInfo_default_instance_;
class BiographyEventLeaderboardItem;
struct BiographyEventLeaderboardItemDefaultTypeInternal;
MPROTOCOL_API extern BiographyEventLeaderboardItemDefaultTypeInternal _BiographyEventLeaderboardItem_default_instance_;
class BiographyEventLeaderboardList;
struct BiographyEventLeaderboardListDefaultTypeInternal;
MPROTOCOL_API extern BiographyEventLeaderboardListDefaultTypeInternal _BiographyEventLeaderboardList_default_instance_;
class BiographyRoleLog;
struct BiographyRoleLogDefaultTypeInternal;
MPROTOCOL_API extern BiographyRoleLogDefaultTypeInternal _BiographyRoleLog_default_instance_;
class BossInvasionDamageRewardData;
struct BossInvasionDamageRewardDataDefaultTypeInternal;
MPROTOCOL_API extern BossInvasionDamageRewardDataDefaultTypeInternal _BossInvasionDamageRewardData_default_instance_;
class BossInvasionKillRewardData;
struct BossInvasionKillRewardDataDefaultTypeInternal;
MPROTOCOL_API extern BossInvasionKillRewardDataDefaultTypeInternal _BossInvasionKillRewardData_default_instance_;
class BossInvasionRewardEntry;
struct BossInvasionRewardEntryDefaultTypeInternal;
MPROTOCOL_API extern BossInvasionRewardEntryDefaultTypeInternal _BossInvasionRewardEntry_default_instance_;
class BreathingReward;
struct BreathingRewardDefaultTypeInternal;
MPROTOCOL_API extern BreathingRewardDefaultTypeInternal _BreathingReward_default_instance_;
class CharacterModelConfig;
struct CharacterModelConfigDefaultTypeInternal;
MPROTOCOL_API extern CharacterModelConfigDefaultTypeInternal _CharacterModelConfig_default_instance_;
class ChatData;
struct ChatDataDefaultTypeInternal;
MPROTOCOL_API extern ChatDataDefaultTypeInternal _ChatData_default_instance_;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
MPROTOCOL_API extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class CheckTask;
struct CheckTaskDefaultTypeInternal;
MPROTOCOL_API extern CheckTaskDefaultTypeInternal _CheckTask_default_instance_;
class CollectionEntry;
struct CollectionEntryDefaultTypeInternal;
MPROTOCOL_API extern CollectionEntryDefaultTypeInternal _CollectionEntry_default_instance_;
class CollectionEntrySaveData;
struct CollectionEntrySaveDataDefaultTypeInternal;
MPROTOCOL_API extern CollectionEntrySaveDataDefaultTypeInternal _CollectionEntrySaveData_default_instance_;
class CollectionZoneActiveAwardData;
struct CollectionZoneActiveAwardDataDefaultTypeInternal;
MPROTOCOL_API extern CollectionZoneActiveAwardDataDefaultTypeInternal _CollectionZoneActiveAwardData_default_instance_;
class Color;
struct ColorDefaultTypeInternal;
MPROTOCOL_API extern ColorDefaultTypeInternal _Color_default_instance_;
class CommonCollectionPieceData;
struct CommonCollectionPieceDataDefaultTypeInternal;
MPROTOCOL_API extern CommonCollectionPieceDataDefaultTypeInternal _CommonCollectionPieceData_default_instance_;
class CommonCultivationData;
struct CommonCultivationDataDefaultTypeInternal;
MPROTOCOL_API extern CommonCultivationDataDefaultTypeInternal _CommonCultivationData_default_instance_;
class CompressedData;
struct CompressedDataDefaultTypeInternal;
MPROTOCOL_API extern CompressedDataDefaultTypeInternal _CompressedData_default_instance_;
class CreatePlayerParams;
struct CreatePlayerParamsDefaultTypeInternal;
MPROTOCOL_API extern CreatePlayerParamsDefaultTypeInternal _CreatePlayerParams_default_instance_;
class CultivationData;
struct CultivationDataDefaultTypeInternal;
MPROTOCOL_API extern CultivationDataDefaultTypeInternal _CultivationData_default_instance_;
class CurrencyData;
struct CurrencyDataDefaultTypeInternal;
MPROTOCOL_API extern CurrencyDataDefaultTypeInternal _CurrencyData_default_instance_;
class CurrencyEntry;
struct CurrencyEntryDefaultTypeInternal;
MPROTOCOL_API extern CurrencyEntryDefaultTypeInternal _CurrencyEntry_default_instance_;
class DeluxeShopItem;
struct DeluxeShopItemDefaultTypeInternal;
MPROTOCOL_API extern DeluxeShopItemDefaultTypeInternal _DeluxeShopItem_default_instance_;
class DoBreathingExerciseResult;
struct DoBreathingExerciseResultDefaultTypeInternal;
MPROTOCOL_API extern DoBreathingExerciseResultDefaultTypeInternal _DoBreathingExerciseResult_default_instance_;
class DropItem;
struct DropItemDefaultTypeInternal;
MPROTOCOL_API extern DropItemDefaultTypeInternal _DropItem_default_instance_;
class EntityCultivationData;
struct EntityCultivationDataDefaultTypeInternal;
MPROTOCOL_API extern EntityCultivationDataDefaultTypeInternal _EntityCultivationData_default_instance_;
class EntityCultivationDirData;
struct EntityCultivationDirDataDefaultTypeInternal;
MPROTOCOL_API extern EntityCultivationDirDataDefaultTypeInternal _EntityCultivationDirData_default_instance_;
class EquipPerkEntry;
struct EquipPerkEntryDefaultTypeInternal;
MPROTOCOL_API extern EquipPerkEntryDefaultTypeInternal _EquipPerkEntry_default_instance_;
class EquipmentData;
struct EquipmentDataDefaultTypeInternal;
MPROTOCOL_API extern EquipmentDataDefaultTypeInternal _EquipmentData_default_instance_;
class FarmlandManagementInfo;
struct FarmlandManagementInfoDefaultTypeInternal;
MPROTOCOL_API extern FarmlandManagementInfoDefaultTypeInternal _FarmlandManagementInfo_default_instance_;
class FarmlandPlantData;
struct FarmlandPlantDataDefaultTypeInternal;
MPROTOCOL_API extern FarmlandPlantDataDefaultTypeInternal _FarmlandPlantData_default_instance_;
class ForgeMakeData;
struct ForgeMakeDataDefaultTypeInternal;
MPROTOCOL_API extern ForgeMakeDataDefaultTypeInternal _ForgeMakeData_default_instance_;
class ForgePackageItem;
struct ForgePackageItemDefaultTypeInternal;
MPROTOCOL_API extern ForgePackageItemDefaultTypeInternal _ForgePackageItem_default_instance_;
class ForgeRecipeData;
struct ForgeRecipeDataDefaultTypeInternal;
MPROTOCOL_API extern ForgeRecipeDataDefaultTypeInternal _ForgeRecipeData_default_instance_;
class FriendListItem;
struct FriendListItemDefaultTypeInternal;
MPROTOCOL_API extern FriendListItemDefaultTypeInternal _FriendListItem_default_instance_;
class FuZengData;
struct FuZengDataDefaultTypeInternal;
MPROTOCOL_API extern FuZengDataDefaultTypeInternal _FuZengData_default_instance_;
class FuZengTuple;
struct FuZengTupleDefaultTypeInternal;
MPROTOCOL_API extern FuZengTupleDefaultTypeInternal _FuZengTuple_default_instance_;
class FunctionCounter;
struct FunctionCounterDefaultTypeInternal;
MPROTOCOL_API extern FunctionCounterDefaultTypeInternal _FunctionCounter_default_instance_;
class GameStatData;
struct GameStatDataDefaultTypeInternal;
MPROTOCOL_API extern GameStatDataDefaultTypeInternal _GameStatData_default_instance_;
class GameStatsAllModuleData;
struct GameStatsAllModuleDataDefaultTypeInternal;
MPROTOCOL_API extern GameStatsAllModuleDataDefaultTypeInternal _GameStatsAllModuleData_default_instance_;
class GameStatsData;
struct GameStatsDataDefaultTypeInternal;
MPROTOCOL_API extern GameStatsDataDefaultTypeInternal _GameStatsData_default_instance_;
class GameStatsModuleData;
struct GameStatsModuleDataDefaultTypeInternal;
MPROTOCOL_API extern GameStatsModuleDataDefaultTypeInternal _GameStatsModuleData_default_instance_;
class GongFaData;
struct GongFaDataDefaultTypeInternal;
MPROTOCOL_API extern GongFaDataDefaultTypeInternal _GongFaData_default_instance_;
class Int64Data;
struct Int64DataDefaultTypeInternal;
MPROTOCOL_API extern Int64DataDefaultTypeInternal _Int64Data_default_instance_;
class Int64Pair;
struct Int64PairDefaultTypeInternal;
MPROTOCOL_API extern Int64PairDefaultTypeInternal _Int64Pair_default_instance_;
class ItemData;
struct ItemDataDefaultTypeInternal;
MPROTOCOL_API extern ItemDataDefaultTypeInternal _ItemData_default_instance_;
class LeaderboardList;
struct LeaderboardListDefaultTypeInternal;
MPROTOCOL_API extern LeaderboardListDefaultTypeInternal _LeaderboardList_default_instance_;
class LeaderboardListItem;
struct LeaderboardListItemDefaultTypeInternal;
MPROTOCOL_API extern LeaderboardListItemDefaultTypeInternal _LeaderboardListItem_default_instance_;
class LeaderboardSaveData;
struct LeaderboardSaveDataDefaultTypeInternal;
MPROTOCOL_API extern LeaderboardSaveDataDefaultTypeInternal _LeaderboardSaveData_default_instance_;
class LostEquipmentData;
struct LostEquipmentDataDefaultTypeInternal;
MPROTOCOL_API extern LostEquipmentDataDefaultTypeInternal _LostEquipmentData_default_instance_;
class Mail;
struct MailDefaultTypeInternal;
MPROTOCOL_API extern MailDefaultTypeInternal _Mail_default_instance_;
class MailAttachment;
struct MailAttachmentDefaultTypeInternal;
MPROTOCOL_API extern MailAttachmentDefaultTypeInternal _MailAttachment_default_instance_;
class MapValueInt32;
struct MapValueInt32DefaultTypeInternal;
MPROTOCOL_API extern MapValueInt32DefaultTypeInternal _MapValueInt32_default_instance_;
class NotifyGiftPackageResult;
struct NotifyGiftPackageResultDefaultTypeInternal;
MPROTOCOL_API extern NotifyGiftPackageResultDefaultTypeInternal _NotifyGiftPackageResult_default_instance_;
class NotifyUsePillProperty;
struct NotifyUsePillPropertyDefaultTypeInternal;
MPROTOCOL_API extern NotifyUsePillPropertyDefaultTypeInternal _NotifyUsePillProperty_default_instance_;
class OfflineAwardSummary;
struct OfflineAwardSummaryDefaultTypeInternal;
MPROTOCOL_API extern OfflineAwardSummaryDefaultTypeInternal _OfflineAwardSummary_default_instance_;
class PillElixirData;
struct PillElixirDataDefaultTypeInternal;
MPROTOCOL_API extern PillElixirDataDefaultTypeInternal _PillElixirData_default_instance_;
class PillPropertyData;
struct PillPropertyDataDefaultTypeInternal;
MPROTOCOL_API extern PillPropertyDataDefaultTypeInternal _PillPropertyData_default_instance_;
class PlayerAbilityData;
struct PlayerAbilityDataDefaultTypeInternal;
MPROTOCOL_API extern PlayerAbilityDataDefaultTypeInternal _PlayerAbilityData_default_instance_;
class PrivateChatRecord;
struct PrivateChatRecordDefaultTypeInternal;
MPROTOCOL_API extern PrivateChatRecordDefaultTypeInternal _PrivateChatRecord_default_instance_;
class QuestProgress;
struct QuestProgressDefaultTypeInternal;
MPROTOCOL_API extern QuestProgressDefaultTypeInternal _QuestProgress_default_instance_;
class RankData;
struct RankDataDefaultTypeInternal;
MPROTOCOL_API extern RankDataDefaultTypeInternal _RankData_default_instance_;
class RoleAlchemyData;
struct RoleAlchemyDataDefaultTypeInternal;
MPROTOCOL_API extern RoleAlchemyDataDefaultTypeInternal _RoleAlchemyData_default_instance_;
class RoleAppearanceData;
struct RoleAppearanceDataDefaultTypeInternal;
MPROTOCOL_API extern RoleAppearanceDataDefaultTypeInternal _RoleAppearanceData_default_instance_;
class RoleAppearanceShopData;
struct RoleAppearanceShopDataDefaultTypeInternal;
MPROTOCOL_API extern RoleAppearanceShopDataDefaultTypeInternal _RoleAppearanceShopData_default_instance_;
class RoleArenaCheckListData;
struct RoleArenaCheckListDataDefaultTypeInternal;
MPROTOCOL_API extern RoleArenaCheckListDataDefaultTypeInternal _RoleArenaCheckListData_default_instance_;
class RoleArenaExplorationStatisticalData;
struct RoleArenaExplorationStatisticalDataDefaultTypeInternal;
MPROTOCOL_API extern RoleArenaExplorationStatisticalDataDefaultTypeInternal _RoleArenaExplorationStatisticalData_default_instance_;
class RoleAttribute;
struct RoleAttributeDefaultTypeInternal;
MPROTOCOL_API extern RoleAttributeDefaultTypeInternal _RoleAttribute_default_instance_;
class RoleAvatarData;
struct RoleAvatarDataDefaultTypeInternal;
MPROTOCOL_API extern RoleAvatarDataDefaultTypeInternal _RoleAvatarData_default_instance_;
class RoleBattleHistorySaveData;
struct RoleBattleHistorySaveDataDefaultTypeInternal;
MPROTOCOL_API extern RoleBattleHistorySaveDataDefaultTypeInternal _RoleBattleHistorySaveData_default_instance_;
class RoleBattleInfo;
struct RoleBattleInfoDefaultTypeInternal;
MPROTOCOL_API extern RoleBattleInfoDefaultTypeInternal _RoleBattleInfo_default_instance_;
class RoleBiographyData;
struct RoleBiographyDataDefaultTypeInternal;
MPROTOCOL_API extern RoleBiographyDataDefaultTypeInternal _RoleBiographyData_default_instance_;
class RoleBossInvasionData;
struct RoleBossInvasionDataDefaultTypeInternal;
MPROTOCOL_API extern RoleBossInvasionDataDefaultTypeInternal _RoleBossInvasionData_default_instance_;
class RoleChecklistData;
struct RoleChecklistDataDefaultTypeInternal;
MPROTOCOL_API extern RoleChecklistDataDefaultTypeInternal _RoleChecklistData_default_instance_;
class RoleCollectionSaveData;
struct RoleCollectionSaveDataDefaultTypeInternal;
MPROTOCOL_API extern RoleCollectionSaveDataDefaultTypeInternal _RoleCollectionSaveData_default_instance_;
class RoleCommonItemExchangeData;
struct RoleCommonItemExchangeDataDefaultTypeInternal;
MPROTOCOL_API extern RoleCommonItemExchangeDataDefaultTypeInternal _RoleCommonItemExchangeData_default_instance_;
class RoleDailyCounter;
struct RoleDailyCounterDefaultTypeInternal;
MPROTOCOL_API extern RoleDailyCounterDefaultTypeInternal _RoleDailyCounter_default_instance_;
class RoleDailyCounterEntry;
struct RoleDailyCounterEntryDefaultTypeInternal;
MPROTOCOL_API extern RoleDailyCounterEntryDefaultTypeInternal _RoleDailyCounterEntry_default_instance_;
class RoleData;
struct RoleDataDefaultTypeInternal;
MPROTOCOL_API extern RoleDataDefaultTypeInternal _RoleData_default_instance_;
class RoleDeluxeShopData;
struct RoleDeluxeShopDataDefaultTypeInternal;
MPROTOCOL_API extern RoleDeluxeShopDataDefaultTypeInternal _RoleDeluxeShopData_default_instance_;
class RoleDungeonKillAllData;
struct RoleDungeonKillAllDataDefaultTypeInternal;
MPROTOCOL_API extern RoleDungeonKillAllDataDefaultTypeInternal _RoleDungeonKillAllData_default_instance_;
class RoleDungeonSurviveData;
struct RoleDungeonSurviveDataDefaultTypeInternal;
MPROTOCOL_API extern RoleDungeonSurviveDataDefaultTypeInternal _RoleDungeonSurviveData_default_instance_;
class RoleFarmlandData;
struct RoleFarmlandDataDefaultTypeInternal;
MPROTOCOL_API extern RoleFarmlandDataDefaultTypeInternal _RoleFarmlandData_default_instance_;
class RoleFightModeData;
struct RoleFightModeDataDefaultTypeInternal;
MPROTOCOL_API extern RoleFightModeDataDefaultTypeInternal _RoleFightModeData_default_instance_;
class RoleForgeData;
struct RoleForgeDataDefaultTypeInternal;
MPROTOCOL_API extern RoleForgeDataDefaultTypeInternal _RoleForgeData_default_instance_;
class RoleFriendData;
struct RoleFriendDataDefaultTypeInternal;
MPROTOCOL_API extern RoleFriendDataDefaultTypeInternal _RoleFriendData_default_instance_;
class RoleFuZengData;
struct RoleFuZengDataDefaultTypeInternal;
MPROTOCOL_API extern RoleFuZengDataDefaultTypeInternal _RoleFuZengData_default_instance_;
class RoleGongFaData;
struct RoleGongFaDataDefaultTypeInternal;
MPROTOCOL_API extern RoleGongFaDataDefaultTypeInternal _RoleGongFaData_default_instance_;
class RoleInfo;
struct RoleInfoDefaultTypeInternal;
MPROTOCOL_API extern RoleInfoDefaultTypeInternal _RoleInfo_default_instance_;
class RoleInventoryData;
struct RoleInventoryDataDefaultTypeInternal;
MPROTOCOL_API extern RoleInventoryDataDefaultTypeInternal _RoleInventoryData_default_instance_;
class RoleLeaderboardData;
struct RoleLeaderboardDataDefaultTypeInternal;
MPROTOCOL_API extern RoleLeaderboardDataDefaultTypeInternal _RoleLeaderboardData_default_instance_;
class RoleLifeCounterData;
struct RoleLifeCounterDataDefaultTypeInternal;
MPROTOCOL_API extern RoleLifeCounterDataDefaultTypeInternal _RoleLifeCounterData_default_instance_;
class RoleMailData;
struct RoleMailDataDefaultTypeInternal;
MPROTOCOL_API extern RoleMailDataDefaultTypeInternal _RoleMailData_default_instance_;
class RoleMasiveData;
struct RoleMasiveDataDefaultTypeInternal;
MPROTOCOL_API extern RoleMasiveDataDefaultTypeInternal _RoleMasiveData_default_instance_;
class RoleMonsterTowerData;
struct RoleMonsterTowerDataDefaultTypeInternal;
MPROTOCOL_API extern RoleMonsterTowerDataDefaultTypeInternal _RoleMonsterTowerData_default_instance_;
class RoleNormalSettings;
struct RoleNormalSettingsDefaultTypeInternal;
MPROTOCOL_API extern RoleNormalSettingsDefaultTypeInternal _RoleNormalSettings_default_instance_;
class RoleOfflineData;
struct RoleOfflineDataDefaultTypeInternal;
MPROTOCOL_API extern RoleOfflineDataDefaultTypeInternal _RoleOfflineData_default_instance_;
class RoleOfflineFunctionData;
struct RoleOfflineFunctionDataDefaultTypeInternal;
MPROTOCOL_API extern RoleOfflineFunctionDataDefaultTypeInternal _RoleOfflineFunctionData_default_instance_;
class RolePillElixirData;
struct RolePillElixirDataDefaultTypeInternal;
MPROTOCOL_API extern RolePillElixirDataDefaultTypeInternal _RolePillElixirData_default_instance_;
class RolePrivateChatRecord;
struct RolePrivateChatRecordDefaultTypeInternal;
MPROTOCOL_API extern RolePrivateChatRecordDefaultTypeInternal _RolePrivateChatRecord_default_instance_;
class RoleQuestData;
struct RoleQuestDataDefaultTypeInternal;
MPROTOCOL_API extern RoleQuestDataDefaultTypeInternal _RoleQuestData_default_instance_;
class RoleSaveData;
struct RoleSaveDataDefaultTypeInternal;
MPROTOCOL_API extern RoleSaveDataDefaultTypeInternal _RoleSaveData_default_instance_;
class RoleSeptData;
struct RoleSeptDataDefaultTypeInternal;
MPROTOCOL_API extern RoleSeptDataDefaultTypeInternal _RoleSeptData_default_instance_;
class RoleSeptInviteEntry;
struct RoleSeptInviteEntryDefaultTypeInternal;
MPROTOCOL_API extern RoleSeptInviteEntryDefaultTypeInternal _RoleSeptInviteEntry_default_instance_;
class RoleSeptQuestData;
struct RoleSeptQuestDataDefaultTypeInternal;
MPROTOCOL_API extern RoleSeptQuestDataDefaultTypeInternal _RoleSeptQuestData_default_instance_;
class RoleSeptShopData;
struct RoleSeptShopDataDefaultTypeInternal;
MPROTOCOL_API extern RoleSeptShopDataDefaultTypeInternal _RoleSeptShopData_default_instance_;
class RoleShanhetuData;
struct RoleShanhetuDataDefaultTypeInternal;
MPROTOCOL_API extern RoleShanhetuDataDefaultTypeInternal _RoleShanhetuData_default_instance_;
class RoleShopData;
struct RoleShopDataDefaultTypeInternal;
MPROTOCOL_API extern RoleShopDataDefaultTypeInternal _RoleShopData_default_instance_;
class RoleTemporaryPackageData;
struct RoleTemporaryPackageDataDefaultTypeInternal;
MPROTOCOL_API extern RoleTemporaryPackageDataDefaultTypeInternal _RoleTemporaryPackageData_default_instance_;
class RoleTreasuryChestData;
struct RoleTreasuryChestDataDefaultTypeInternal;
MPROTOCOL_API extern RoleTreasuryChestDataDefaultTypeInternal _RoleTreasuryChestData_default_instance_;
class RoleTreasuryGachaData;
struct RoleTreasuryGachaDataDefaultTypeInternal;
MPROTOCOL_API extern RoleTreasuryGachaDataDefaultTypeInternal _RoleTreasuryGachaData_default_instance_;
class RoleTreasurySaveData;
struct RoleTreasurySaveDataDefaultTypeInternal;
MPROTOCOL_API extern RoleTreasurySaveDataDefaultTypeInternal _RoleTreasurySaveData_default_instance_;
class RoleTreasuryShopData;
struct RoleTreasuryShopDataDefaultTypeInternal;
MPROTOCOL_API extern RoleTreasuryShopDataDefaultTypeInternal _RoleTreasuryShopData_default_instance_;
class RoleVipShopData;
struct RoleVipShopDataDefaultTypeInternal;
MPROTOCOL_API extern RoleVipShopDataDefaultTypeInternal _RoleVipShopData_default_instance_;
class RoleWeeklyCounter;
struct RoleWeeklyCounterDefaultTypeInternal;
MPROTOCOL_API extern RoleWeeklyCounterDefaultTypeInternal _RoleWeeklyCounter_default_instance_;
class RoleWeeklyCounterEntry;
struct RoleWeeklyCounterEntryDefaultTypeInternal;
MPROTOCOL_API extern RoleWeeklyCounterEntryDefaultTypeInternal _RoleWeeklyCounterEntry_default_instance_;
class RoleZasData;
struct RoleZasDataDefaultTypeInternal;
MPROTOCOL_API extern RoleZasDataDefaultTypeInternal _RoleZasData_default_instance_;
class SelfSeptInfo;
struct SelfSeptInfoDefaultTypeInternal;
MPROTOCOL_API extern SelfSeptInfoDefaultTypeInternal _SelfSeptInfo_default_instance_;
class SeptDataOnLeaderboard;
struct SeptDataOnLeaderboardDefaultTypeInternal;
MPROTOCOL_API extern SeptDataOnLeaderboardDefaultTypeInternal _SeptDataOnLeaderboard_default_instance_;
class SeptDemonDamageHistoryData;
struct SeptDemonDamageHistoryDataDefaultTypeInternal;
MPROTOCOL_API extern SeptDemonDamageHistoryDataDefaultTypeInternal _SeptDemonDamageHistoryData_default_instance_;
class SeptDemonDamageHistoryEntry;
struct SeptDemonDamageHistoryEntryDefaultTypeInternal;
MPROTOCOL_API extern SeptDemonDamageHistoryEntryDefaultTypeInternal _SeptDemonDamageHistoryEntry_default_instance_;
class SeptDemonWorldData;
struct SeptDemonWorldDataDefaultTypeInternal;
MPROTOCOL_API extern SeptDemonWorldDataDefaultTypeInternal _SeptDemonWorldData_default_instance_;
class SeptQuest;
struct SeptQuestDefaultTypeInternal;
MPROTOCOL_API extern SeptQuestDefaultTypeInternal _SeptQuest_default_instance_;
class ServerCounterData;
struct ServerCounterDataDefaultTypeInternal;
MPROTOCOL_API extern ServerCounterDataDefaultTypeInternal _ServerCounterData_default_instance_;
class ShanhetuBlock;
struct ShanhetuBlockDefaultTypeInternal;
MPROTOCOL_API extern ShanhetuBlockDefaultTypeInternal _ShanhetuBlock_default_instance_;
class ShanhetuBlockRow;
struct ShanhetuBlockRowDefaultTypeInternal;
MPROTOCOL_API extern ShanhetuBlockRowDefaultTypeInternal _ShanhetuBlockRow_default_instance_;
class ShanhetuItem;
struct ShanhetuItemDefaultTypeInternal;
MPROTOCOL_API extern ShanhetuItemDefaultTypeInternal _ShanhetuItem_default_instance_;
class ShanhetuMap;
struct ShanhetuMapDefaultTypeInternal;
MPROTOCOL_API extern ShanhetuMapDefaultTypeInternal _ShanhetuMap_default_instance_;
class ShanhetuRecord;
struct ShanhetuRecordDefaultTypeInternal;
MPROTOCOL_API extern ShanhetuRecordDefaultTypeInternal _ShanhetuRecord_default_instance_;
class ShopItem;
struct ShopItemDefaultTypeInternal;
MPROTOCOL_API extern ShopItemDefaultTypeInternal _ShopItem_default_instance_;
class ShopItemBase;
struct ShopItemBaseDefaultTypeInternal;
MPROTOCOL_API extern ShopItemBaseDefaultTypeInternal _ShopItemBase_default_instance_;
class SimpleAbilityData;
struct SimpleAbilityDataDefaultTypeInternal;
MPROTOCOL_API extern SimpleAbilityDataDefaultTypeInternal _SimpleAbilityData_default_instance_;
class SimpleCounter;
struct SimpleCounterDefaultTypeInternal;
MPROTOCOL_API extern SimpleCounterDefaultTypeInternal _SimpleCounter_default_instance_;
class SimpleGongFaData;
struct SimpleGongFaDataDefaultTypeInternal;
MPROTOCOL_API extern SimpleGongFaDataDefaultTypeInternal _SimpleGongFaData_default_instance_;
class SimpleItemData;
struct SimpleItemDataDefaultTypeInternal;
MPROTOCOL_API extern SimpleItemDataDefaultTypeInternal _SimpleItemData_default_instance_;
class SimpleRoleInfo;
struct SimpleRoleInfoDefaultTypeInternal;
MPROTOCOL_API extern SimpleRoleInfoDefaultTypeInternal _SimpleRoleInfo_default_instance_;
class SkillEquipmentAttributes;
struct SkillEquipmentAttributesDefaultTypeInternal;
MPROTOCOL_API extern SkillEquipmentAttributesDefaultTypeInternal _SkillEquipmentAttributes_default_instance_;
class SkillEquipmentData;
struct SkillEquipmentDataDefaultTypeInternal;
MPROTOCOL_API extern SkillEquipmentDataDefaultTypeInternal _SkillEquipmentData_default_instance_;
class SocialFunctionCommonSaveData;
struct SocialFunctionCommonSaveDataDefaultTypeInternal;
MPROTOCOL_API extern SocialFunctionCommonSaveDataDefaultTypeInternal _SocialFunctionCommonSaveData_default_instance_;
class StringInt64Pair;
struct StringInt64PairDefaultTypeInternal;
MPROTOCOL_API extern StringInt64PairDefaultTypeInternal _StringInt64Pair_default_instance_;
class StringKeyInt32ValueEntry;
struct StringKeyInt32ValueEntryDefaultTypeInternal;
MPROTOCOL_API extern StringKeyInt32ValueEntryDefaultTypeInternal _StringKeyInt32ValueEntry_default_instance_;
class SwordPkGlobalSaveData;
struct SwordPkGlobalSaveDataDefaultTypeInternal;
MPROTOCOL_API extern SwordPkGlobalSaveDataDefaultTypeInternal _SwordPkGlobalSaveData_default_instance_;
class SwordPkTopListEntry;
struct SwordPkTopListEntryDefaultTypeInternal;
MPROTOCOL_API extern SwordPkTopListEntryDefaultTypeInternal _SwordPkTopListEntry_default_instance_;
class SystemNoticeParams;
struct SystemNoticeParamsDefaultTypeInternal;
MPROTOCOL_API extern SystemNoticeParamsDefaultTypeInternal _SystemNoticeParams_default_instance_;
class TemporaryPackageItem;
struct TemporaryPackageItemDefaultTypeInternal;
MPROTOCOL_API extern TemporaryPackageItemDefaultTypeInternal _TemporaryPackageItem_default_instance_;
class TreasuryShopItem;
struct TreasuryShopItemDefaultTypeInternal;
MPROTOCOL_API extern TreasuryShopItemDefaultTypeInternal _TreasuryShopItem_default_instance_;
class Vector2;
struct Vector2DefaultTypeInternal;
MPROTOCOL_API extern Vector2DefaultTypeInternal _Vector2_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
MPROTOCOL_API extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class WorldRuntimeData;
struct WorldRuntimeDataDefaultTypeInternal;
MPROTOCOL_API extern WorldRuntimeDataDefaultTypeInternal _WorldRuntimeData_default_instance_;
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
template<> MPROTOCOL_API ::idlepb::AbilityActiveResult* Arena::CreateMaybeMessage<::idlepb::AbilityActiveResult>(Arena*);
template<> MPROTOCOL_API ::idlepb::AbilityData* Arena::CreateMaybeMessage<::idlepb::AbilityData>(Arena*);
template<> MPROTOCOL_API ::idlepb::AbilityEffectData* Arena::CreateMaybeMessage<::idlepb::AbilityEffectData>(Arena*);
template<> MPROTOCOL_API ::idlepb::AbilityEffectDefData* Arena::CreateMaybeMessage<::idlepb::AbilityEffectDefData>(Arena*);
template<> MPROTOCOL_API ::idlepb::AbilityPKResult* Arena::CreateMaybeMessage<::idlepb::AbilityPKResult>(Arena*);
template<> MPROTOCOL_API ::idlepb::AlchemyMakeData* Arena::CreateMaybeMessage<::idlepb::AlchemyMakeData>(Arena*);
template<> MPROTOCOL_API ::idlepb::AlchemyPackageItem* Arena::CreateMaybeMessage<::idlepb::AlchemyPackageItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::AlchemyRecipeData* Arena::CreateMaybeMessage<::idlepb::AlchemyRecipeData>(Arena*);
template<> MPROTOCOL_API ::idlepb::AppearanceCollection* Arena::CreateMaybeMessage<::idlepb::AppearanceCollection>(Arena*);
template<> MPROTOCOL_API ::idlepb::ArenaCheckListData* Arena::CreateMaybeMessage<::idlepb::ArenaCheckListData>(Arena*);
template<> MPROTOCOL_API ::idlepb::ArenaCheckListRewardData* Arena::CreateMaybeMessage<::idlepb::ArenaCheckListRewardData>(Arena*);
template<> MPROTOCOL_API ::idlepb::ArenaExplorationStatisticalItem* Arena::CreateMaybeMessage<::idlepb::ArenaExplorationStatisticalItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::BattleHistory* Arena::CreateMaybeMessage<::idlepb::BattleHistory>(Arena*);
template<> MPROTOCOL_API ::idlepb::BattleHistoryRecord* Arena::CreateMaybeMessage<::idlepb::BattleHistoryRecord>(Arena*);
template<> MPROTOCOL_API ::idlepb::BattleInfo* Arena::CreateMaybeMessage<::idlepb::BattleInfo>(Arena*);
template<> MPROTOCOL_API ::idlepb::BattleRoleInfo* Arena::CreateMaybeMessage<::idlepb::BattleRoleInfo>(Arena*);
template<> MPROTOCOL_API ::idlepb::BiographyEventLeaderboardItem* Arena::CreateMaybeMessage<::idlepb::BiographyEventLeaderboardItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::BiographyEventLeaderboardList* Arena::CreateMaybeMessage<::idlepb::BiographyEventLeaderboardList>(Arena*);
template<> MPROTOCOL_API ::idlepb::BiographyRoleLog* Arena::CreateMaybeMessage<::idlepb::BiographyRoleLog>(Arena*);
template<> MPROTOCOL_API ::idlepb::BossInvasionDamageRewardData* Arena::CreateMaybeMessage<::idlepb::BossInvasionDamageRewardData>(Arena*);
template<> MPROTOCOL_API ::idlepb::BossInvasionKillRewardData* Arena::CreateMaybeMessage<::idlepb::BossInvasionKillRewardData>(Arena*);
template<> MPROTOCOL_API ::idlepb::BossInvasionRewardEntry* Arena::CreateMaybeMessage<::idlepb::BossInvasionRewardEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::BreathingReward* Arena::CreateMaybeMessage<::idlepb::BreathingReward>(Arena*);
template<> MPROTOCOL_API ::idlepb::CharacterModelConfig* Arena::CreateMaybeMessage<::idlepb::CharacterModelConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::ChatData* Arena::CreateMaybeMessage<::idlepb::ChatData>(Arena*);
template<> MPROTOCOL_API ::idlepb::ChatMessage* Arena::CreateMaybeMessage<::idlepb::ChatMessage>(Arena*);
template<> MPROTOCOL_API ::idlepb::CheckTask* Arena::CreateMaybeMessage<::idlepb::CheckTask>(Arena*);
template<> MPROTOCOL_API ::idlepb::CollectionEntry* Arena::CreateMaybeMessage<::idlepb::CollectionEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::CollectionEntrySaveData* Arena::CreateMaybeMessage<::idlepb::CollectionEntrySaveData>(Arena*);
template<> MPROTOCOL_API ::idlepb::CollectionZoneActiveAwardData* Arena::CreateMaybeMessage<::idlepb::CollectionZoneActiveAwardData>(Arena*);
template<> MPROTOCOL_API ::idlepb::Color* Arena::CreateMaybeMessage<::idlepb::Color>(Arena*);
template<> MPROTOCOL_API ::idlepb::CommonCollectionPieceData* Arena::CreateMaybeMessage<::idlepb::CommonCollectionPieceData>(Arena*);
template<> MPROTOCOL_API ::idlepb::CommonCultivationData* Arena::CreateMaybeMessage<::idlepb::CommonCultivationData>(Arena*);
template<> MPROTOCOL_API ::idlepb::CompressedData* Arena::CreateMaybeMessage<::idlepb::CompressedData>(Arena*);
template<> MPROTOCOL_API ::idlepb::CreatePlayerParams* Arena::CreateMaybeMessage<::idlepb::CreatePlayerParams>(Arena*);
template<> MPROTOCOL_API ::idlepb::CultivationData* Arena::CreateMaybeMessage<::idlepb::CultivationData>(Arena*);
template<> MPROTOCOL_API ::idlepb::CurrencyData* Arena::CreateMaybeMessage<::idlepb::CurrencyData>(Arena*);
template<> MPROTOCOL_API ::idlepb::CurrencyEntry* Arena::CreateMaybeMessage<::idlepb::CurrencyEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::DeluxeShopItem* Arena::CreateMaybeMessage<::idlepb::DeluxeShopItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::DoBreathingExerciseResult* Arena::CreateMaybeMessage<::idlepb::DoBreathingExerciseResult>(Arena*);
template<> MPROTOCOL_API ::idlepb::DropItem* Arena::CreateMaybeMessage<::idlepb::DropItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::EntityCultivationData* Arena::CreateMaybeMessage<::idlepb::EntityCultivationData>(Arena*);
template<> MPROTOCOL_API ::idlepb::EntityCultivationDirData* Arena::CreateMaybeMessage<::idlepb::EntityCultivationDirData>(Arena*);
template<> MPROTOCOL_API ::idlepb::EquipPerkEntry* Arena::CreateMaybeMessage<::idlepb::EquipPerkEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::EquipmentData* Arena::CreateMaybeMessage<::idlepb::EquipmentData>(Arena*);
template<> MPROTOCOL_API ::idlepb::FarmlandManagementInfo* Arena::CreateMaybeMessage<::idlepb::FarmlandManagementInfo>(Arena*);
template<> MPROTOCOL_API ::idlepb::FarmlandPlantData* Arena::CreateMaybeMessage<::idlepb::FarmlandPlantData>(Arena*);
template<> MPROTOCOL_API ::idlepb::ForgeMakeData* Arena::CreateMaybeMessage<::idlepb::ForgeMakeData>(Arena*);
template<> MPROTOCOL_API ::idlepb::ForgePackageItem* Arena::CreateMaybeMessage<::idlepb::ForgePackageItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::ForgeRecipeData* Arena::CreateMaybeMessage<::idlepb::ForgeRecipeData>(Arena*);
template<> MPROTOCOL_API ::idlepb::FriendListItem* Arena::CreateMaybeMessage<::idlepb::FriendListItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::FuZengData* Arena::CreateMaybeMessage<::idlepb::FuZengData>(Arena*);
template<> MPROTOCOL_API ::idlepb::FuZengTuple* Arena::CreateMaybeMessage<::idlepb::FuZengTuple>(Arena*);
template<> MPROTOCOL_API ::idlepb::FunctionCounter* Arena::CreateMaybeMessage<::idlepb::FunctionCounter>(Arena*);
template<> MPROTOCOL_API ::idlepb::GameStatData* Arena::CreateMaybeMessage<::idlepb::GameStatData>(Arena*);
template<> MPROTOCOL_API ::idlepb::GameStatsAllModuleData* Arena::CreateMaybeMessage<::idlepb::GameStatsAllModuleData>(Arena*);
template<> MPROTOCOL_API ::idlepb::GameStatsData* Arena::CreateMaybeMessage<::idlepb::GameStatsData>(Arena*);
template<> MPROTOCOL_API ::idlepb::GameStatsModuleData* Arena::CreateMaybeMessage<::idlepb::GameStatsModuleData>(Arena*);
template<> MPROTOCOL_API ::idlepb::GongFaData* Arena::CreateMaybeMessage<::idlepb::GongFaData>(Arena*);
template<> MPROTOCOL_API ::idlepb::Int64Data* Arena::CreateMaybeMessage<::idlepb::Int64Data>(Arena*);
template<> MPROTOCOL_API ::idlepb::Int64Pair* Arena::CreateMaybeMessage<::idlepb::Int64Pair>(Arena*);
template<> MPROTOCOL_API ::idlepb::ItemData* Arena::CreateMaybeMessage<::idlepb::ItemData>(Arena*);
template<> MPROTOCOL_API ::idlepb::LeaderboardList* Arena::CreateMaybeMessage<::idlepb::LeaderboardList>(Arena*);
template<> MPROTOCOL_API ::idlepb::LeaderboardListItem* Arena::CreateMaybeMessage<::idlepb::LeaderboardListItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::LeaderboardSaveData* Arena::CreateMaybeMessage<::idlepb::LeaderboardSaveData>(Arena*);
template<> MPROTOCOL_API ::idlepb::LostEquipmentData* Arena::CreateMaybeMessage<::idlepb::LostEquipmentData>(Arena*);
template<> MPROTOCOL_API ::idlepb::Mail* Arena::CreateMaybeMessage<::idlepb::Mail>(Arena*);
template<> MPROTOCOL_API ::idlepb::MailAttachment* Arena::CreateMaybeMessage<::idlepb::MailAttachment>(Arena*);
template<> MPROTOCOL_API ::idlepb::MapValueInt32* Arena::CreateMaybeMessage<::idlepb::MapValueInt32>(Arena*);
template<> MPROTOCOL_API ::idlepb::NotifyGiftPackageResult* Arena::CreateMaybeMessage<::idlepb::NotifyGiftPackageResult>(Arena*);
template<> MPROTOCOL_API ::idlepb::NotifyUsePillProperty* Arena::CreateMaybeMessage<::idlepb::NotifyUsePillProperty>(Arena*);
template<> MPROTOCOL_API ::idlepb::OfflineAwardSummary* Arena::CreateMaybeMessage<::idlepb::OfflineAwardSummary>(Arena*);
template<> MPROTOCOL_API ::idlepb::PillElixirData* Arena::CreateMaybeMessage<::idlepb::PillElixirData>(Arena*);
template<> MPROTOCOL_API ::idlepb::PillPropertyData* Arena::CreateMaybeMessage<::idlepb::PillPropertyData>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerAbilityData* Arena::CreateMaybeMessage<::idlepb::PlayerAbilityData>(Arena*);
template<> MPROTOCOL_API ::idlepb::PrivateChatRecord* Arena::CreateMaybeMessage<::idlepb::PrivateChatRecord>(Arena*);
template<> MPROTOCOL_API ::idlepb::QuestProgress* Arena::CreateMaybeMessage<::idlepb::QuestProgress>(Arena*);
template<> MPROTOCOL_API ::idlepb::RankData* Arena::CreateMaybeMessage<::idlepb::RankData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleAlchemyData* Arena::CreateMaybeMessage<::idlepb::RoleAlchemyData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleAppearanceData* Arena::CreateMaybeMessage<::idlepb::RoleAppearanceData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleAppearanceShopData* Arena::CreateMaybeMessage<::idlepb::RoleAppearanceShopData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleArenaCheckListData* Arena::CreateMaybeMessage<::idlepb::RoleArenaCheckListData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleArenaExplorationStatisticalData* Arena::CreateMaybeMessage<::idlepb::RoleArenaExplorationStatisticalData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleAttribute* Arena::CreateMaybeMessage<::idlepb::RoleAttribute>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleAvatarData* Arena::CreateMaybeMessage<::idlepb::RoleAvatarData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleBattleHistorySaveData* Arena::CreateMaybeMessage<::idlepb::RoleBattleHistorySaveData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleBattleInfo* Arena::CreateMaybeMessage<::idlepb::RoleBattleInfo>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleBiographyData* Arena::CreateMaybeMessage<::idlepb::RoleBiographyData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleBossInvasionData* Arena::CreateMaybeMessage<::idlepb::RoleBossInvasionData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleChecklistData* Arena::CreateMaybeMessage<::idlepb::RoleChecklistData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleCollectionSaveData* Arena::CreateMaybeMessage<::idlepb::RoleCollectionSaveData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleCommonItemExchangeData* Arena::CreateMaybeMessage<::idlepb::RoleCommonItemExchangeData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleDailyCounter* Arena::CreateMaybeMessage<::idlepb::RoleDailyCounter>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleDailyCounterEntry* Arena::CreateMaybeMessage<::idlepb::RoleDailyCounterEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleData* Arena::CreateMaybeMessage<::idlepb::RoleData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleDeluxeShopData* Arena::CreateMaybeMessage<::idlepb::RoleDeluxeShopData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleDungeonKillAllData* Arena::CreateMaybeMessage<::idlepb::RoleDungeonKillAllData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleDungeonSurviveData* Arena::CreateMaybeMessage<::idlepb::RoleDungeonSurviveData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleFarmlandData* Arena::CreateMaybeMessage<::idlepb::RoleFarmlandData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleFightModeData* Arena::CreateMaybeMessage<::idlepb::RoleFightModeData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleForgeData* Arena::CreateMaybeMessage<::idlepb::RoleForgeData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleFriendData* Arena::CreateMaybeMessage<::idlepb::RoleFriendData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleFuZengData* Arena::CreateMaybeMessage<::idlepb::RoleFuZengData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleGongFaData* Arena::CreateMaybeMessage<::idlepb::RoleGongFaData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleInfo* Arena::CreateMaybeMessage<::idlepb::RoleInfo>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleInventoryData* Arena::CreateMaybeMessage<::idlepb::RoleInventoryData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleLeaderboardData* Arena::CreateMaybeMessage<::idlepb::RoleLeaderboardData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleLifeCounterData* Arena::CreateMaybeMessage<::idlepb::RoleLifeCounterData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleMailData* Arena::CreateMaybeMessage<::idlepb::RoleMailData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleMasiveData* Arena::CreateMaybeMessage<::idlepb::RoleMasiveData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleMonsterTowerData* Arena::CreateMaybeMessage<::idlepb::RoleMonsterTowerData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleNormalSettings* Arena::CreateMaybeMessage<::idlepb::RoleNormalSettings>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleOfflineData* Arena::CreateMaybeMessage<::idlepb::RoleOfflineData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleOfflineFunctionData* Arena::CreateMaybeMessage<::idlepb::RoleOfflineFunctionData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RolePillElixirData* Arena::CreateMaybeMessage<::idlepb::RolePillElixirData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RolePrivateChatRecord* Arena::CreateMaybeMessage<::idlepb::RolePrivateChatRecord>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleQuestData* Arena::CreateMaybeMessage<::idlepb::RoleQuestData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleSaveData* Arena::CreateMaybeMessage<::idlepb::RoleSaveData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleSeptData* Arena::CreateMaybeMessage<::idlepb::RoleSeptData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleSeptInviteEntry* Arena::CreateMaybeMessage<::idlepb::RoleSeptInviteEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleSeptQuestData* Arena::CreateMaybeMessage<::idlepb::RoleSeptQuestData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleSeptShopData* Arena::CreateMaybeMessage<::idlepb::RoleSeptShopData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleShanhetuData* Arena::CreateMaybeMessage<::idlepb::RoleShanhetuData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleShopData* Arena::CreateMaybeMessage<::idlepb::RoleShopData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleTemporaryPackageData* Arena::CreateMaybeMessage<::idlepb::RoleTemporaryPackageData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleTreasuryChestData* Arena::CreateMaybeMessage<::idlepb::RoleTreasuryChestData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleTreasuryGachaData* Arena::CreateMaybeMessage<::idlepb::RoleTreasuryGachaData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleTreasurySaveData* Arena::CreateMaybeMessage<::idlepb::RoleTreasurySaveData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleTreasuryShopData* Arena::CreateMaybeMessage<::idlepb::RoleTreasuryShopData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleVipShopData* Arena::CreateMaybeMessage<::idlepb::RoleVipShopData>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleWeeklyCounter* Arena::CreateMaybeMessage<::idlepb::RoleWeeklyCounter>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleWeeklyCounterEntry* Arena::CreateMaybeMessage<::idlepb::RoleWeeklyCounterEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::RoleZasData* Arena::CreateMaybeMessage<::idlepb::RoleZasData>(Arena*);
template<> MPROTOCOL_API ::idlepb::SelfSeptInfo* Arena::CreateMaybeMessage<::idlepb::SelfSeptInfo>(Arena*);
template<> MPROTOCOL_API ::idlepb::SeptDataOnLeaderboard* Arena::CreateMaybeMessage<::idlepb::SeptDataOnLeaderboard>(Arena*);
template<> MPROTOCOL_API ::idlepb::SeptDemonDamageHistoryData* Arena::CreateMaybeMessage<::idlepb::SeptDemonDamageHistoryData>(Arena*);
template<> MPROTOCOL_API ::idlepb::SeptDemonDamageHistoryEntry* Arena::CreateMaybeMessage<::idlepb::SeptDemonDamageHistoryEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::SeptDemonWorldData* Arena::CreateMaybeMessage<::idlepb::SeptDemonWorldData>(Arena*);
template<> MPROTOCOL_API ::idlepb::SeptQuest* Arena::CreateMaybeMessage<::idlepb::SeptQuest>(Arena*);
template<> MPROTOCOL_API ::idlepb::ServerCounterData* Arena::CreateMaybeMessage<::idlepb::ServerCounterData>(Arena*);
template<> MPROTOCOL_API ::idlepb::ShanhetuBlock* Arena::CreateMaybeMessage<::idlepb::ShanhetuBlock>(Arena*);
template<> MPROTOCOL_API ::idlepb::ShanhetuBlockRow* Arena::CreateMaybeMessage<::idlepb::ShanhetuBlockRow>(Arena*);
template<> MPROTOCOL_API ::idlepb::ShanhetuItem* Arena::CreateMaybeMessage<::idlepb::ShanhetuItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::ShanhetuMap* Arena::CreateMaybeMessage<::idlepb::ShanhetuMap>(Arena*);
template<> MPROTOCOL_API ::idlepb::ShanhetuRecord* Arena::CreateMaybeMessage<::idlepb::ShanhetuRecord>(Arena*);
template<> MPROTOCOL_API ::idlepb::ShopItem* Arena::CreateMaybeMessage<::idlepb::ShopItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::ShopItemBase* Arena::CreateMaybeMessage<::idlepb::ShopItemBase>(Arena*);
template<> MPROTOCOL_API ::idlepb::SimpleAbilityData* Arena::CreateMaybeMessage<::idlepb::SimpleAbilityData>(Arena*);
template<> MPROTOCOL_API ::idlepb::SimpleCounter* Arena::CreateMaybeMessage<::idlepb::SimpleCounter>(Arena*);
template<> MPROTOCOL_API ::idlepb::SimpleGongFaData* Arena::CreateMaybeMessage<::idlepb::SimpleGongFaData>(Arena*);
template<> MPROTOCOL_API ::idlepb::SimpleItemData* Arena::CreateMaybeMessage<::idlepb::SimpleItemData>(Arena*);
template<> MPROTOCOL_API ::idlepb::SimpleRoleInfo* Arena::CreateMaybeMessage<::idlepb::SimpleRoleInfo>(Arena*);
template<> MPROTOCOL_API ::idlepb::SkillEquipmentAttributes* Arena::CreateMaybeMessage<::idlepb::SkillEquipmentAttributes>(Arena*);
template<> MPROTOCOL_API ::idlepb::SkillEquipmentData* Arena::CreateMaybeMessage<::idlepb::SkillEquipmentData>(Arena*);
template<> MPROTOCOL_API ::idlepb::SocialFunctionCommonSaveData* Arena::CreateMaybeMessage<::idlepb::SocialFunctionCommonSaveData>(Arena*);
template<> MPROTOCOL_API ::idlepb::StringInt64Pair* Arena::CreateMaybeMessage<::idlepb::StringInt64Pair>(Arena*);
template<> MPROTOCOL_API ::idlepb::StringKeyInt32ValueEntry* Arena::CreateMaybeMessage<::idlepb::StringKeyInt32ValueEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::SwordPkGlobalSaveData* Arena::CreateMaybeMessage<::idlepb::SwordPkGlobalSaveData>(Arena*);
template<> MPROTOCOL_API ::idlepb::SwordPkTopListEntry* Arena::CreateMaybeMessage<::idlepb::SwordPkTopListEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::SystemNoticeParams* Arena::CreateMaybeMessage<::idlepb::SystemNoticeParams>(Arena*);
template<> MPROTOCOL_API ::idlepb::TemporaryPackageItem* Arena::CreateMaybeMessage<::idlepb::TemporaryPackageItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::TreasuryShopItem* Arena::CreateMaybeMessage<::idlepb::TreasuryShopItem>(Arena*);
template<> MPROTOCOL_API ::idlepb::Vector2* Arena::CreateMaybeMessage<::idlepb::Vector2>(Arena*);
template<> MPROTOCOL_API ::idlepb::Vector3* Arena::CreateMaybeMessage<::idlepb::Vector3>(Arena*);
template<> MPROTOCOL_API ::idlepb::WorldRuntimeData* Arena::CreateMaybeMessage<::idlepb::WorldRuntimeData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace idlepb {

enum ReplicationTargetType : int {
  RTT_Self = 0,
  RTT_World = 1,
  ReplicationTargetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ReplicationTargetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool ReplicationTargetType_IsValid(int value);
constexpr ReplicationTargetType ReplicationTargetType_MIN = RTT_Self;
constexpr ReplicationTargetType ReplicationTargetType_MAX = RTT_World;
constexpr int ReplicationTargetType_ARRAYSIZE = ReplicationTargetType_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReplicationTargetType_descriptor();
template<typename T>
inline const std::string& ReplicationTargetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReplicationTargetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReplicationTargetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReplicationTargetType_descriptor(), enum_t_value);
}
inline bool ReplicationTargetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReplicationTargetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReplicationTargetType>(
    ReplicationTargetType_descriptor(), name, value);
}
enum SystemNoticeStyle : int {
  SystemNoticeStyle_None = 0,
  SystemNoticeStyle_Dialog = 1,
  SystemNoticeStyle_ScreenCenter = 2,
  SystemNoticeStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SystemNoticeStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool SystemNoticeStyle_IsValid(int value);
constexpr SystemNoticeStyle SystemNoticeStyle_MIN = SystemNoticeStyle_None;
constexpr SystemNoticeStyle SystemNoticeStyle_MAX = SystemNoticeStyle_ScreenCenter;
constexpr int SystemNoticeStyle_ARRAYSIZE = SystemNoticeStyle_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemNoticeStyle_descriptor();
template<typename T>
inline const std::string& SystemNoticeStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemNoticeStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemNoticeStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemNoticeStyle_descriptor(), enum_t_value);
}
inline bool SystemNoticeStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SystemNoticeStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemNoticeStyle>(
    SystemNoticeStyle_descriptor(), name, value);
}
enum SystemNoticeId : int {
  SystemNoticeId_None = 0,
  SystemNoticeId_AddItem = 7,
  SystemNoticeId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SystemNoticeId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool SystemNoticeId_IsValid(int value);
constexpr SystemNoticeId SystemNoticeId_MIN = SystemNoticeId_None;
constexpr SystemNoticeId SystemNoticeId_MAX = SystemNoticeId_AddItem;
constexpr int SystemNoticeId_ARRAYSIZE = SystemNoticeId_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemNoticeId_descriptor();
template<typename T>
inline const std::string& SystemNoticeId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemNoticeId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemNoticeId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemNoticeId_descriptor(), enum_t_value);
}
inline bool SystemNoticeId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SystemNoticeId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemNoticeId>(
    SystemNoticeId_descriptor(), name, value);
}
enum RoleDailyCounterType : int {
  RDCT_BreathingExerciseTimes = 0,
  RDCT_TakeMedicineTimes = 1,
  RDCT_LeaderboardClickLikeNum = 2,
  RDCT_AlchemyTimes = 3,
  RDCT_ForgeTimes = 4,
  RDCT_UseExtraMaterialsTimes = 5,
  RDCT_TotalBreathingExerciseTimes = 6,
  RDCT_ForgeProduceQuality_None = 7,
  RDCT_ForgeProduceQuality_White = 8,
  RDCT_ForgeProduceQuality_Green = 9,
  RDCT_ForgeProduceQuality_Blue = 10,
  RDCT_ForgeProduceQuality_Purple = 11,
  RDCT_ForgeProduceQuality_Orange = 12,
  RDCT_ForgeProduceQuality_Red = 13,
  RDCT_GiftPackage_Other = 14,
  RDCT_GiftPackage_Phy = 15,
  RDCT_GiftPackage_Magic = 16,
  RDCT_GiftPackage_Money = 17,
  RDCT_GiftPackage_Weapon = 18,
  RDCT_GiftPackage_Treasure = 19,
  RDCT_GiftPackage_Materials = 20,
  RDCT_GiftPackage_GrabBag = 21,
  RDCT_GiftPackage_MonsterInvasion = 22,
  RDCT_GiftPackage_StorageBag = 23,
  RDCT_GiftPackage_Select = 24,
  RDCT_MonsterTowerChallengeTimes = 25,
  RDCT_MonsterTowerClosedDoorTrainingTimes = 26,
  RDCT_FriendlySoloTimes = 27,
  RDCT_SwordPkTimes = 28,
  RDCT_ExchangeHeroCard = 29,
  RDCT_TodaySeptConstructTimes = 30,
  RDCT_TodaySearchSeptByNameTimes = 31,
  RDCT_GatherSeptStoneSeconds = 32,
  RDCT_MonsterTowerClickLikeNum = 33,
  RDCT_FarmlandWatering = 34,
  RDCT_FriendRequestNum = 35,
  RDCT_FriendSearchNum = 36,
  RDCT_FuZeReward = 37,
  RoleDailyCounterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoleDailyCounterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool RoleDailyCounterType_IsValid(int value);
constexpr RoleDailyCounterType RoleDailyCounterType_MIN = RDCT_BreathingExerciseTimes;
constexpr RoleDailyCounterType RoleDailyCounterType_MAX = RDCT_FuZeReward;
constexpr int RoleDailyCounterType_ARRAYSIZE = RoleDailyCounterType_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleDailyCounterType_descriptor();
template<typename T>
inline const std::string& RoleDailyCounterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoleDailyCounterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoleDailyCounterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoleDailyCounterType_descriptor(), enum_t_value);
}
inline bool RoleDailyCounterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoleDailyCounterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoleDailyCounterType>(
    RoleDailyCounterType_descriptor(), name, value);
}
enum RoleWeeklyCounterType : int {
  RWCT_GatherSeptStoneSeconds = 0,
  RoleWeeklyCounterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoleWeeklyCounterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool RoleWeeklyCounterType_IsValid(int value);
constexpr RoleWeeklyCounterType RoleWeeklyCounterType_MIN = RWCT_GatherSeptStoneSeconds;
constexpr RoleWeeklyCounterType RoleWeeklyCounterType_MAX = RWCT_GatherSeptStoneSeconds;
constexpr int RoleWeeklyCounterType_ARRAYSIZE = RoleWeeklyCounterType_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleWeeklyCounterType_descriptor();
template<typename T>
inline const std::string& RoleWeeklyCounterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoleWeeklyCounterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoleWeeklyCounterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoleWeeklyCounterType_descriptor(), enum_t_value);
}
inline bool RoleWeeklyCounterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoleWeeklyCounterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoleWeeklyCounterType>(
    RoleWeeklyCounterType_descriptor(), name, value);
}
enum AbilityActiveErrorCode : int {
  AbilityActiveErrorCode_Success = 0,
  AbilityActiveErrorCode_Timeout = 1,
  AbilityActiveErrorCode_InvalidAbility = 2,
  AbilityActiveErrorCode_Cooldown = 11,
  AbilityActiveErrorCode_CostNotEnough = 12,
  AbilityActiveErrorCode_Silent = 13,
  AbilityActiveErrorCode_Freezing = 14,
  AbilityActiveErrorCode_Death = 15,
  AbilityActiveErrorCode_OwnerCheck = 16,
  AbilityActiveErrorCode_CommonCooldown = 17,
  AbilityActiveErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AbilityActiveErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool AbilityActiveErrorCode_IsValid(int value);
constexpr AbilityActiveErrorCode AbilityActiveErrorCode_MIN = AbilityActiveErrorCode_Success;
constexpr AbilityActiveErrorCode AbilityActiveErrorCode_MAX = AbilityActiveErrorCode_CommonCooldown;
constexpr int AbilityActiveErrorCode_ARRAYSIZE = AbilityActiveErrorCode_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AbilityActiveErrorCode_descriptor();
template<typename T>
inline const std::string& AbilityActiveErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AbilityActiveErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AbilityActiveErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AbilityActiveErrorCode_descriptor(), enum_t_value);
}
inline bool AbilityActiveErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AbilityActiveErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AbilityActiveErrorCode>(
    AbilityActiveErrorCode_descriptor(), name, value);
}
enum FriendRelationshipType : int {
  FRT_None = 0,
  FRT_Friend = 1,
  FRT_Partner = 2,
  FRT_Blocked = 3,
  FriendRelationshipType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FriendRelationshipType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool FriendRelationshipType_IsValid(int value);
constexpr FriendRelationshipType FriendRelationshipType_MIN = FRT_None;
constexpr FriendRelationshipType FriendRelationshipType_MAX = FRT_Blocked;
constexpr int FriendRelationshipType_ARRAYSIZE = FriendRelationshipType_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FriendRelationshipType_descriptor();
template<typename T>
inline const std::string& FriendRelationshipType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FriendRelationshipType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FriendRelationshipType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FriendRelationshipType_descriptor(), enum_t_value);
}
inline bool FriendRelationshipType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FriendRelationshipType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FriendRelationshipType>(
    FriendRelationshipType_descriptor(), name, value);
}
enum LoginGameRetCode : int {
  LoginGameRetCode_Ok = 0,
  LoginGameRetCode_Unknown = 1,
  LoginGameRetCode_NoRole = 2,
  LoginGameRetCode_DuplicateLogin = 3,
  LoginGameRetCode_AccountInvalid = 4,
  LoginGameRetCode_VersionError = 5,
  LoginGameRetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LoginGameRetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool LoginGameRetCode_IsValid(int value);
constexpr LoginGameRetCode LoginGameRetCode_MIN = LoginGameRetCode_Ok;
constexpr LoginGameRetCode LoginGameRetCode_MAX = LoginGameRetCode_VersionError;
constexpr int LoginGameRetCode_ARRAYSIZE = LoginGameRetCode_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginGameRetCode_descriptor();
template<typename T>
inline const std::string& LoginGameRetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginGameRetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginGameRetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginGameRetCode_descriptor(), enum_t_value);
}
inline bool LoginGameRetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginGameRetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginGameRetCode>(
    LoginGameRetCode_descriptor(), name, value);
}
enum GotoType : int {
  GotoType_None = 0,
  GotoType_Relive = 1,
  GotoType_Teleport = 2,
  GotoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GotoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool GotoType_IsValid(int value);
constexpr GotoType GotoType_MIN = GotoType_None;
constexpr GotoType GotoType_MAX = GotoType_Teleport;
constexpr int GotoType_ARRAYSIZE = GotoType_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GotoType_descriptor();
template<typename T>
inline const std::string& GotoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GotoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GotoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GotoType_descriptor(), enum_t_value);
}
inline bool GotoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GotoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GotoType>(
    GotoType_descriptor(), name, value);
}
enum TravelWorldType : int {
  TravelWorldType_Normal = 0,
  TravelWorldType_Force = 1,
  TravelWorldType_ClientNoOpen = 2,
  TravelWorldType_ClientCityNoOpen = 3,
  TravelWorldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TravelWorldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool TravelWorldType_IsValid(int value);
constexpr TravelWorldType TravelWorldType_MIN = TravelWorldType_Normal;
constexpr TravelWorldType TravelWorldType_MAX = TravelWorldType_ClientCityNoOpen;
constexpr int TravelWorldType_ARRAYSIZE = TravelWorldType_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TravelWorldType_descriptor();
template<typename T>
inline const std::string& TravelWorldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TravelWorldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TravelWorldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TravelWorldType_descriptor(), enum_t_value);
}
inline bool TravelWorldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TravelWorldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TravelWorldType>(
    TravelWorldType_descriptor(), name, value);
}
enum BiographyEventType : int {
  BET_Degree = 0,
  BET_FullDegree = 1,
  BET_KillMonster = 2,
  BET_SeptDonation = 3,
  BET_CombatPower = 4,
  BET_ImmortalRoad = 5,
  BiographyEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BiographyEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool BiographyEventType_IsValid(int value);
constexpr BiographyEventType BiographyEventType_MIN = BET_Degree;
constexpr BiographyEventType BiographyEventType_MAX = BET_ImmortalRoad;
constexpr int BiographyEventType_ARRAYSIZE = BiographyEventType_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BiographyEventType_descriptor();
template<typename T>
inline const std::string& BiographyEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BiographyEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BiographyEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BiographyEventType_descriptor(), enum_t_value);
}
inline bool BiographyEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BiographyEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BiographyEventType>(
    BiographyEventType_descriptor(), name, value);
}
enum RoleDirtyFlag : int {
  RoleDirtyFlag_Save = 0,
  RoleDirtyFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoleDirtyFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool RoleDirtyFlag_IsValid(int value);
constexpr RoleDirtyFlag RoleDirtyFlag_MIN = RoleDirtyFlag_Save;
constexpr RoleDirtyFlag RoleDirtyFlag_MAX = RoleDirtyFlag_Save;
constexpr int RoleDirtyFlag_ARRAYSIZE = RoleDirtyFlag_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleDirtyFlag_descriptor();
template<typename T>
inline const std::string& RoleDirtyFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoleDirtyFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoleDirtyFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoleDirtyFlag_descriptor(), enum_t_value);
}
inline bool RoleDirtyFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoleDirtyFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoleDirtyFlag>(
    RoleDirtyFlag_descriptor(), name, value);
}
// ===================================================================

class MPROTOCOL_API Int64Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.Int64Data) */ {
 public:
  inline Int64Data() : Int64Data(nullptr) {}
  ~Int64Data() override;
  explicit PROTOBUF_CONSTEXPR Int64Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Data(const Int64Data& from);
  Int64Data(Int64Data&& from) noexcept
    : Int64Data() {
    *this = ::std::move(from);
  }

  inline Int64Data& operator=(const Int64Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Data& operator=(Int64Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Data* internal_default_instance() {
    return reinterpret_cast<const Int64Data*>(
               &_Int64Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Int64Data& a, Int64Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int64Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Int64Data& from) {
    Int64Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.Int64Data";
  }
  protected:
  explicit Int64Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.Int64Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API Vector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.Vector2) */ {
 public:
  inline Vector2() : Vector2(nullptr) {}
  ~Vector2() override;
  explicit PROTOBUF_CONSTEXPR Vector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2(const Vector2& from);
  Vector2(Vector2&& from) noexcept
    : Vector2() {
    *this = ::std::move(from);
  }

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2& operator=(Vector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2* internal_default_instance() {
    return reinterpret_cast<const Vector2*>(
               &_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2& a, Vector2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector2& from) {
    Vector2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.Vector2";
  }
  protected:
  explicit Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.Vector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit PROTOBUF_CONSTEXPR Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Color& from) {
    Color::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // float r = 1;
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // float g = 2;
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // float b = 3;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // float a = 4;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float r_;
    float g_;
    float b_;
    float a_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API Int64Pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.Int64Pair) */ {
 public:
  inline Int64Pair() : Int64Pair(nullptr) {}
  ~Int64Pair() override;
  explicit PROTOBUF_CONSTEXPR Int64Pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Pair(const Int64Pair& from);
  Int64Pair(Int64Pair&& from) noexcept
    : Int64Pair() {
    *this = ::std::move(from);
  }

  inline Int64Pair& operator=(const Int64Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Pair& operator=(Int64Pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64Pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Pair* internal_default_instance() {
    return reinterpret_cast<const Int64Pair*>(
               &_Int64Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Int64Pair& a, Int64Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int64Pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Int64Pair& from) {
    Int64Pair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64Pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.Int64Pair";
  }
  protected:
  explicit Int64Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int64 key = 1;
  void clear_key();
  int64_t key() const;
  void set_key(int64_t value);
  private:
  int64_t _internal_key() const;
  void _internal_set_key(int64_t value);
  public:

  // int64 value = 2;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.Int64Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t key_;
    int64_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API StringKeyInt32ValueEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.StringKeyInt32ValueEntry) */ {
 public:
  inline StringKeyInt32ValueEntry() : StringKeyInt32ValueEntry(nullptr) {}
  ~StringKeyInt32ValueEntry() override;
  explicit PROTOBUF_CONSTEXPR StringKeyInt32ValueEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringKeyInt32ValueEntry(const StringKeyInt32ValueEntry& from);
  StringKeyInt32ValueEntry(StringKeyInt32ValueEntry&& from) noexcept
    : StringKeyInt32ValueEntry() {
    *this = ::std::move(from);
  }

  inline StringKeyInt32ValueEntry& operator=(const StringKeyInt32ValueEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringKeyInt32ValueEntry& operator=(StringKeyInt32ValueEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringKeyInt32ValueEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringKeyInt32ValueEntry* internal_default_instance() {
    return reinterpret_cast<const StringKeyInt32ValueEntry*>(
               &_StringKeyInt32ValueEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StringKeyInt32ValueEntry& a, StringKeyInt32ValueEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(StringKeyInt32ValueEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringKeyInt32ValueEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringKeyInt32ValueEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringKeyInt32ValueEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringKeyInt32ValueEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringKeyInt32ValueEntry& from) {
    StringKeyInt32ValueEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringKeyInt32ValueEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.StringKeyInt32ValueEntry";
  }
  protected:
  explicit StringKeyInt32ValueEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.StringKeyInt32ValueEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API MapValueInt32 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.MapValueInt32) */ {
 public:
  inline MapValueInt32() : MapValueInt32(nullptr) {}
  ~MapValueInt32() override;
  explicit PROTOBUF_CONSTEXPR MapValueInt32(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapValueInt32(const MapValueInt32& from);
  MapValueInt32(MapValueInt32&& from) noexcept
    : MapValueInt32() {
    *this = ::std::move(from);
  }

  inline MapValueInt32& operator=(const MapValueInt32& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapValueInt32& operator=(MapValueInt32&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapValueInt32& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapValueInt32* internal_default_instance() {
    return reinterpret_cast<const MapValueInt32*>(
               &_MapValueInt32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MapValueInt32& a, MapValueInt32& b) {
    a.Swap(&b);
  }
  inline void Swap(MapValueInt32* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapValueInt32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapValueInt32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapValueInt32>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapValueInt32& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapValueInt32& from) {
    MapValueInt32::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapValueInt32* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.MapValueInt32";
  }
  protected:
  explicit MapValueInt32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 key = 1;
  void clear_key();
  int32_t key() const;
  void set_key(int32_t value);
  private:
  int32_t _internal_key() const;
  void _internal_set_key(int32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.MapValueInt32)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t key_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API StringInt64Pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.StringInt64Pair) */ {
 public:
  inline StringInt64Pair() : StringInt64Pair(nullptr) {}
  ~StringInt64Pair() override;
  explicit PROTOBUF_CONSTEXPR StringInt64Pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringInt64Pair(const StringInt64Pair& from);
  StringInt64Pair(StringInt64Pair&& from) noexcept
    : StringInt64Pair() {
    *this = ::std::move(from);
  }

  inline StringInt64Pair& operator=(const StringInt64Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringInt64Pair& operator=(StringInt64Pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringInt64Pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringInt64Pair* internal_default_instance() {
    return reinterpret_cast<const StringInt64Pair*>(
               &_StringInt64Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StringInt64Pair& a, StringInt64Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(StringInt64Pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringInt64Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringInt64Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringInt64Pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringInt64Pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringInt64Pair& from) {
    StringInt64Pair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringInt64Pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.StringInt64Pair";
  }
  protected:
  explicit StringInt64Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string str = 1;
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // int64 value = 2;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.StringInt64Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    int64_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AbilityEffectData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AbilityEffectData) */ {
 public:
  inline AbilityEffectData() : AbilityEffectData(nullptr) {}
  ~AbilityEffectData() override;
  explicit PROTOBUF_CONSTEXPR AbilityEffectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbilityEffectData(const AbilityEffectData& from);
  AbilityEffectData(AbilityEffectData&& from) noexcept
    : AbilityEffectData() {
    *this = ::std::move(from);
  }

  inline AbilityEffectData& operator=(const AbilityEffectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbilityEffectData& operator=(AbilityEffectData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbilityEffectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbilityEffectData* internal_default_instance() {
    return reinterpret_cast<const AbilityEffectData*>(
               &_AbilityEffectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AbilityEffectData& a, AbilityEffectData& b) {
    a.Swap(&b);
  }
  inline void Swap(AbilityEffectData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbilityEffectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AbilityEffectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AbilityEffectData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AbilityEffectData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AbilityEffectData& from) {
    AbilityEffectData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbilityEffectData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AbilityEffectData";
  }
  protected:
  explicit AbilityEffectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kDurationFieldNumber = 2,
    kPeriodFieldNumber = 3,
    kDurationPolicyFieldNumber = 4,
    kStarttimeUtcFieldNumber = 6,
    kStarttimeWorldFieldNumber = 5,
    kXFieldNumber = 10,
    kYFieldNumber = 11,
    kZFieldNumber = 12,
    kMFieldNumber = 13,
    kNFieldNumber = 14,
  };
  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // float duration = 2;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // float period = 3;
  void clear_period();
  float period() const;
  void set_period(float value);
  private:
  float _internal_period() const;
  void _internal_set_period(float value);
  public:

  // int32 duration_policy = 4;
  void clear_duration_policy();
  int32_t duration_policy() const;
  void set_duration_policy(int32_t value);
  private:
  int32_t _internal_duration_policy() const;
  void _internal_set_duration_policy(int32_t value);
  public:

  // int64 starttime_utc = 6;
  void clear_starttime_utc();
  int64_t starttime_utc() const;
  void set_starttime_utc(int64_t value);
  private:
  int64_t _internal_starttime_utc() const;
  void _internal_set_starttime_utc(int64_t value);
  public:

  // float starttime_world = 5;
  void clear_starttime_world();
  float starttime_world() const;
  void set_starttime_world(float value);
  private:
  float _internal_starttime_world() const;
  void _internal_set_starttime_world(float value);
  public:

  // float x = 10;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 11;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 12;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float m = 13;
  void clear_m();
  float m() const;
  void set_m(float value);
  private:
  float _internal_m() const;
  void _internal_set_m(float value);
  public:

  // float n = 14;
  void clear_n();
  float n() const;
  void set_n(float value);
  private:
  float _internal_n() const;
  void _internal_set_n(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AbilityEffectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t type_;
    float duration_;
    float period_;
    int32_t duration_policy_;
    int64_t starttime_utc_;
    float starttime_world_;
    float x_;
    float y_;
    float z_;
    float m_;
    float n_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API GameStatData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.GameStatData) */ {
 public:
  inline GameStatData() : GameStatData(nullptr) {}
  ~GameStatData() override;
  explicit PROTOBUF_CONSTEXPR GameStatData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameStatData(const GameStatData& from);
  GameStatData(GameStatData&& from) noexcept
    : GameStatData() {
    *this = ::std::move(from);
  }

  inline GameStatData& operator=(const GameStatData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStatData& operator=(GameStatData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStatData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStatData* internal_default_instance() {
    return reinterpret_cast<const GameStatData*>(
               &_GameStatData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GameStatData& a, GameStatData& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStatData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStatData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStatData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameStatData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameStatData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameStatData& from) {
    GameStatData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStatData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.GameStatData";
  }
  protected:
  explicit GameStatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.GameStatData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t type_;
    float value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API GameStatsData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.GameStatsData) */ {
 public:
  inline GameStatsData() : GameStatsData(nullptr) {}
  ~GameStatsData() override;
  explicit PROTOBUF_CONSTEXPR GameStatsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameStatsData(const GameStatsData& from);
  GameStatsData(GameStatsData&& from) noexcept
    : GameStatsData() {
    *this = ::std::move(from);
  }

  inline GameStatsData& operator=(const GameStatsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStatsData& operator=(GameStatsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStatsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStatsData* internal_default_instance() {
    return reinterpret_cast<const GameStatsData*>(
               &_GameStatsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GameStatsData& a, GameStatsData& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStatsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStatsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStatsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameStatsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameStatsData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameStatsData& from) {
    GameStatsData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStatsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.GameStatsData";
  }
  protected:
  explicit GameStatsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // repeated .idlepb.GameStatData stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::idlepb::GameStatData* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GameStatData >*
      mutable_stats();
  private:
  const ::idlepb::GameStatData& _internal_stats(int index) const;
  ::idlepb::GameStatData* _internal_add_stats();
  public:
  const ::idlepb::GameStatData& stats(int index) const;
  ::idlepb::GameStatData* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GameStatData >&
      stats() const;

  // @@protoc_insertion_point(class_scope:idlepb.GameStatsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GameStatData > stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API GameStatsModuleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.GameStatsModuleData) */ {
 public:
  inline GameStatsModuleData() : GameStatsModuleData(nullptr) {}
  ~GameStatsModuleData() override;
  explicit PROTOBUF_CONSTEXPR GameStatsModuleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameStatsModuleData(const GameStatsModuleData& from);
  GameStatsModuleData(GameStatsModuleData&& from) noexcept
    : GameStatsModuleData() {
    *this = ::std::move(from);
  }

  inline GameStatsModuleData& operator=(const GameStatsModuleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStatsModuleData& operator=(GameStatsModuleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStatsModuleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStatsModuleData* internal_default_instance() {
    return reinterpret_cast<const GameStatsModuleData*>(
               &_GameStatsModuleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GameStatsModuleData& a, GameStatsModuleData& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStatsModuleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStatsModuleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStatsModuleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameStatsModuleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameStatsModuleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameStatsModuleData& from) {
    GameStatsModuleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStatsModuleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.GameStatsModuleData";
  }
  protected:
  explicit GameStatsModuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .idlepb.GameStatsData stats = 2;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::idlepb::GameStatsData& stats() const;
  PROTOBUF_NODISCARD ::idlepb::GameStatsData* release_stats();
  ::idlepb::GameStatsData* mutable_stats();
  void set_allocated_stats(::idlepb::GameStatsData* stats);
  private:
  const ::idlepb::GameStatsData& _internal_stats() const;
  ::idlepb::GameStatsData* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::idlepb::GameStatsData* stats);
  ::idlepb::GameStatsData* unsafe_arena_release_stats();

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.GameStatsModuleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::GameStatsData* stats_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API GameStatsAllModuleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.GameStatsAllModuleData) */ {
 public:
  inline GameStatsAllModuleData() : GameStatsAllModuleData(nullptr) {}
  ~GameStatsAllModuleData() override;
  explicit PROTOBUF_CONSTEXPR GameStatsAllModuleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameStatsAllModuleData(const GameStatsAllModuleData& from);
  GameStatsAllModuleData(GameStatsAllModuleData&& from) noexcept
    : GameStatsAllModuleData() {
    *this = ::std::move(from);
  }

  inline GameStatsAllModuleData& operator=(const GameStatsAllModuleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStatsAllModuleData& operator=(GameStatsAllModuleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStatsAllModuleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStatsAllModuleData* internal_default_instance() {
    return reinterpret_cast<const GameStatsAllModuleData*>(
               &_GameStatsAllModuleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GameStatsAllModuleData& a, GameStatsAllModuleData& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStatsAllModuleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStatsAllModuleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStatsAllModuleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameStatsAllModuleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameStatsAllModuleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameStatsAllModuleData& from) {
    GameStatsAllModuleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStatsAllModuleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.GameStatsAllModuleData";
  }
  protected:
  explicit GameStatsAllModuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllModuleFieldNumber = 1,
  };
  // repeated .idlepb.GameStatsModuleData all_module = 1;
  int all_module_size() const;
  private:
  int _internal_all_module_size() const;
  public:
  void clear_all_module();
  ::idlepb::GameStatsModuleData* mutable_all_module(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GameStatsModuleData >*
      mutable_all_module();
  private:
  const ::idlepb::GameStatsModuleData& _internal_all_module(int index) const;
  ::idlepb::GameStatsModuleData* _internal_add_all_module();
  public:
  const ::idlepb::GameStatsModuleData& all_module(int index) const;
  ::idlepb::GameStatsModuleData* add_all_module();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GameStatsModuleData >&
      all_module() const;

  // @@protoc_insertion_point(class_scope:idlepb.GameStatsAllModuleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GameStatsModuleData > all_module_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleAttribute) */ {
 public:
  inline RoleAttribute() : RoleAttribute(nullptr) {}
  ~RoleAttribute() override;
  explicit PROTOBUF_CONSTEXPR RoleAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleAttribute(const RoleAttribute& from);
  RoleAttribute(RoleAttribute&& from) noexcept
    : RoleAttribute() {
    *this = ::std::move(from);
  }

  inline RoleAttribute& operator=(const RoleAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleAttribute& operator=(RoleAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleAttribute* internal_default_instance() {
    return reinterpret_cast<const RoleAttribute*>(
               &_RoleAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RoleAttribute& a, RoleAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleAttribute& from) {
    RoleAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleAttribute";
  }
  protected:
  explicit RoleAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 1,
    kMaxHealthFieldNumber = 2,
    kManaFieldNumber = 3,
    kMaxManaFieldNumber = 4,
    kMindFieldNumber = 5,
    kStrengthFieldNumber = 6,
    kIntellectFieldNumber = 7,
    kAgilityFieldNumber = 8,
    kMoveSpeedFieldNumber = 9,
    kPhyAttFieldNumber = 10,
    kPhyDefFieldNumber = 11,
    kMagAttFieldNumber = 12,
    kMagDefFieldNumber = 13,
    kPhyDodgeFieldNumber = 14,
    kMagDodgeFieldNumber = 15,
    kPhyHitFieldNumber = 16,
    kMagHitFieldNumber = 17,
    kCritFieldNumber = 18,
    kCritDefFieldNumber = 19,
    kHpRecoverPercentFieldNumber = 20,
    kMpRecoverPercentFieldNumber = 21,
    kCritCoefFieldNumber = 22,
    kCritBlockFieldNumber = 23,
    kCritAdditionalDamageFieldNumber = 24,
    kArenaMoneyAddPercentFieldNumber = 25,
    kMagBreakFieldNumber = 26,
    kPhyBreakFieldNumber = 27,
    kMagBlockFieldNumber = 28,
    kPhyBlockFieldNumber = 29,
    kFenQiFieldNumber = 30,
    kTunaNumFieldNumber = 200,
    kTunaAddPercentFieldNumber = 201,
    kMedicineNumFieldNumber = 202,
    kMedicineAddPercentFieldNumber = 203,
    kBaseqiAddPercentFieldNumber = 204,
    kShenTongDamageToPlayerAddPercentFieldNumber = 205,
    kShenTongDamageToPlayerReducePercentFieldNumber = 206,
    kFaBaoDamageToPlayerAddPercentFieldNumber = 207,
    kFaBaoDamageToPlayerReducePercentFieldNumber = 208,
    kPhyDamageAddPercentFieldNumber = 209,
    kMagDamageAddPercentFieldNumber = 210,
    kPhyDamageReducePercentFieldNumber = 211,
    kMagDamageReducePercentFieldNumber = 212,
    kAttackMonsterDamageAddPercentFieldNumber = 213,
    kTakeMonsterDamageReducePercentFieldNumber = 214,
    kBaseHpAddPercentFieldNumber = 215,
    kBaseMpAddPercentFieldNumber = 216,
    kBasePhyAttAddPercentFieldNumber = 217,
    kBaseMagAttAddPercentFieldNumber = 218,
    kBasePhyDefAddPercentFieldNumber = 219,
    kBaseMagDefAddPercentFieldNumber = 220,
    kBasePhyHitAddPercentFieldNumber = 221,
    kBaseMagHitAddPercentFieldNumber = 222,
    kBasePhyDodgeAddPercentFieldNumber = 223,
    kBaseMagDodgeAddPercentFieldNumber = 224,
    kBaseCritAddPercentFieldNumber = 225,
    kBaseCritDefAddPercentFieldNumber = 226,
  };
  // float health = 1;
  void clear_health();
  float health() const;
  void set_health(float value);
  private:
  float _internal_health() const;
  void _internal_set_health(float value);
  public:

  // float max_health = 2;
  void clear_max_health();
  float max_health() const;
  void set_max_health(float value);
  private:
  float _internal_max_health() const;
  void _internal_set_max_health(float value);
  public:

  // float mana = 3;
  void clear_mana();
  float mana() const;
  void set_mana(float value);
  private:
  float _internal_mana() const;
  void _internal_set_mana(float value);
  public:

  // float max_mana = 4;
  void clear_max_mana();
  float max_mana() const;
  void set_max_mana(float value);
  private:
  float _internal_max_mana() const;
  void _internal_set_max_mana(float value);
  public:

  // float mind = 5;
  void clear_mind();
  float mind() const;
  void set_mind(float value);
  private:
  float _internal_mind() const;
  void _internal_set_mind(float value);
  public:

  // float strength = 6;
  void clear_strength();
  float strength() const;
  void set_strength(float value);
  private:
  float _internal_strength() const;
  void _internal_set_strength(float value);
  public:

  // float intellect = 7;
  void clear_intellect();
  float intellect() const;
  void set_intellect(float value);
  private:
  float _internal_intellect() const;
  void _internal_set_intellect(float value);
  public:

  // float agility = 8;
  void clear_agility();
  float agility() const;
  void set_agility(float value);
  private:
  float _internal_agility() const;
  void _internal_set_agility(float value);
  public:

  // float move_speed = 9;
  void clear_move_speed();
  float move_speed() const;
  void set_move_speed(float value);
  private:
  float _internal_move_speed() const;
  void _internal_set_move_speed(float value);
  public:

  // float phy_att = 10;
  void clear_phy_att();
  float phy_att() const;
  void set_phy_att(float value);
  private:
  float _internal_phy_att() const;
  void _internal_set_phy_att(float value);
  public:

  // float phy_def = 11;
  void clear_phy_def();
  float phy_def() const;
  void set_phy_def(float value);
  private:
  float _internal_phy_def() const;
  void _internal_set_phy_def(float value);
  public:

  // float mag_att = 12;
  void clear_mag_att();
  float mag_att() const;
  void set_mag_att(float value);
  private:
  float _internal_mag_att() const;
  void _internal_set_mag_att(float value);
  public:

  // float mag_def = 13;
  void clear_mag_def();
  float mag_def() const;
  void set_mag_def(float value);
  private:
  float _internal_mag_def() const;
  void _internal_set_mag_def(float value);
  public:

  // float phy_dodge = 14;
  void clear_phy_dodge();
  float phy_dodge() const;
  void set_phy_dodge(float value);
  private:
  float _internal_phy_dodge() const;
  void _internal_set_phy_dodge(float value);
  public:

  // float mag_dodge = 15;
  void clear_mag_dodge();
  float mag_dodge() const;
  void set_mag_dodge(float value);
  private:
  float _internal_mag_dodge() const;
  void _internal_set_mag_dodge(float value);
  public:

  // float phy_hit = 16;
  void clear_phy_hit();
  float phy_hit() const;
  void set_phy_hit(float value);
  private:
  float _internal_phy_hit() const;
  void _internal_set_phy_hit(float value);
  public:

  // float mag_hit = 17;
  void clear_mag_hit();
  float mag_hit() const;
  void set_mag_hit(float value);
  private:
  float _internal_mag_hit() const;
  void _internal_set_mag_hit(float value);
  public:

  // float crit = 18;
  void clear_crit();
  float crit() const;
  void set_crit(float value);
  private:
  float _internal_crit() const;
  void _internal_set_crit(float value);
  public:

  // float crit_def = 19;
  void clear_crit_def();
  float crit_def() const;
  void set_crit_def(float value);
  private:
  float _internal_crit_def() const;
  void _internal_set_crit_def(float value);
  public:

  // float hp_recover_percent = 20;
  void clear_hp_recover_percent();
  float hp_recover_percent() const;
  void set_hp_recover_percent(float value);
  private:
  float _internal_hp_recover_percent() const;
  void _internal_set_hp_recover_percent(float value);
  public:

  // float mp_recover_percent = 21;
  void clear_mp_recover_percent();
  float mp_recover_percent() const;
  void set_mp_recover_percent(float value);
  private:
  float _internal_mp_recover_percent() const;
  void _internal_set_mp_recover_percent(float value);
  public:

  // float crit_coef = 22;
  void clear_crit_coef();
  float crit_coef() const;
  void set_crit_coef(float value);
  private:
  float _internal_crit_coef() const;
  void _internal_set_crit_coef(float value);
  public:

  // float crit_block = 23;
  void clear_crit_block();
  float crit_block() const;
  void set_crit_block(float value);
  private:
  float _internal_crit_block() const;
  void _internal_set_crit_block(float value);
  public:

  // float crit_additional_damage = 24;
  void clear_crit_additional_damage();
  float crit_additional_damage() const;
  void set_crit_additional_damage(float value);
  private:
  float _internal_crit_additional_damage() const;
  void _internal_set_crit_additional_damage(float value);
  public:

  // float arena_money_add_percent = 25;
  void clear_arena_money_add_percent();
  float arena_money_add_percent() const;
  void set_arena_money_add_percent(float value);
  private:
  float _internal_arena_money_add_percent() const;
  void _internal_set_arena_money_add_percent(float value);
  public:

  // float mag_break = 26;
  void clear_mag_break();
  float mag_break() const;
  void set_mag_break(float value);
  private:
  float _internal_mag_break() const;
  void _internal_set_mag_break(float value);
  public:

  // float phy_break = 27;
  void clear_phy_break();
  float phy_break() const;
  void set_phy_break(float value);
  private:
  float _internal_phy_break() const;
  void _internal_set_phy_break(float value);
  public:

  // float mag_block = 28;
  void clear_mag_block();
  float mag_block() const;
  void set_mag_block(float value);
  private:
  float _internal_mag_block() const;
  void _internal_set_mag_block(float value);
  public:

  // float phy_block = 29;
  void clear_phy_block();
  float phy_block() const;
  void set_phy_block(float value);
  private:
  float _internal_phy_block() const;
  void _internal_set_phy_block(float value);
  public:

  // float fen_qi = 30;
  void clear_fen_qi();
  float fen_qi() const;
  void set_fen_qi(float value);
  private:
  float _internal_fen_qi() const;
  void _internal_set_fen_qi(float value);
  public:

  // float tuna_num = 200;
  void clear_tuna_num();
  float tuna_num() const;
  void set_tuna_num(float value);
  private:
  float _internal_tuna_num() const;
  void _internal_set_tuna_num(float value);
  public:

  // float tuna_add_percent = 201;
  void clear_tuna_add_percent();
  float tuna_add_percent() const;
  void set_tuna_add_percent(float value);
  private:
  float _internal_tuna_add_percent() const;
  void _internal_set_tuna_add_percent(float value);
  public:

  // float medicine_num = 202;
  void clear_medicine_num();
  float medicine_num() const;
  void set_medicine_num(float value);
  private:
  float _internal_medicine_num() const;
  void _internal_set_medicine_num(float value);
  public:

  // float medicine_add_percent = 203;
  void clear_medicine_add_percent();
  float medicine_add_percent() const;
  void set_medicine_add_percent(float value);
  private:
  float _internal_medicine_add_percent() const;
  void _internal_set_medicine_add_percent(float value);
  public:

  // float baseqi_add_percent = 204;
  void clear_baseqi_add_percent();
  float baseqi_add_percent() const;
  void set_baseqi_add_percent(float value);
  private:
  float _internal_baseqi_add_percent() const;
  void _internal_set_baseqi_add_percent(float value);
  public:

  // float shen_tong_damage_to_player_add_percent = 205;
  void clear_shen_tong_damage_to_player_add_percent();
  float shen_tong_damage_to_player_add_percent() const;
  void set_shen_tong_damage_to_player_add_percent(float value);
  private:
  float _internal_shen_tong_damage_to_player_add_percent() const;
  void _internal_set_shen_tong_damage_to_player_add_percent(float value);
  public:

  // float shen_tong_damage_to_player_reduce_percent = 206;
  void clear_shen_tong_damage_to_player_reduce_percent();
  float shen_tong_damage_to_player_reduce_percent() const;
  void set_shen_tong_damage_to_player_reduce_percent(float value);
  private:
  float _internal_shen_tong_damage_to_player_reduce_percent() const;
  void _internal_set_shen_tong_damage_to_player_reduce_percent(float value);
  public:

  // float fa_bao_damage_to_player_add_percent = 207;
  void clear_fa_bao_damage_to_player_add_percent();
  float fa_bao_damage_to_player_add_percent() const;
  void set_fa_bao_damage_to_player_add_percent(float value);
  private:
  float _internal_fa_bao_damage_to_player_add_percent() const;
  void _internal_set_fa_bao_damage_to_player_add_percent(float value);
  public:

  // float fa_bao_damage_to_player_reduce_percent = 208;
  void clear_fa_bao_damage_to_player_reduce_percent();
  float fa_bao_damage_to_player_reduce_percent() const;
  void set_fa_bao_damage_to_player_reduce_percent(float value);
  private:
  float _internal_fa_bao_damage_to_player_reduce_percent() const;
  void _internal_set_fa_bao_damage_to_player_reduce_percent(float value);
  public:

  // float phy_damage_add_percent = 209;
  void clear_phy_damage_add_percent();
  float phy_damage_add_percent() const;
  void set_phy_damage_add_percent(float value);
  private:
  float _internal_phy_damage_add_percent() const;
  void _internal_set_phy_damage_add_percent(float value);
  public:

  // float mag_damage_add_percent = 210;
  void clear_mag_damage_add_percent();
  float mag_damage_add_percent() const;
  void set_mag_damage_add_percent(float value);
  private:
  float _internal_mag_damage_add_percent() const;
  void _internal_set_mag_damage_add_percent(float value);
  public:

  // float phy_damage_reduce_percent = 211;
  void clear_phy_damage_reduce_percent();
  float phy_damage_reduce_percent() const;
  void set_phy_damage_reduce_percent(float value);
  private:
  float _internal_phy_damage_reduce_percent() const;
  void _internal_set_phy_damage_reduce_percent(float value);
  public:

  // float mag_damage_reduce_percent = 212;
  void clear_mag_damage_reduce_percent();
  float mag_damage_reduce_percent() const;
  void set_mag_damage_reduce_percent(float value);
  private:
  float _internal_mag_damage_reduce_percent() const;
  void _internal_set_mag_damage_reduce_percent(float value);
  public:

  // float attack_monster_damage_add_percent = 213;
  void clear_attack_monster_damage_add_percent();
  float attack_monster_damage_add_percent() const;
  void set_attack_monster_damage_add_percent(float value);
  private:
  float _internal_attack_monster_damage_add_percent() const;
  void _internal_set_attack_monster_damage_add_percent(float value);
  public:

  // float take_monster_damage_reduce_percent = 214;
  void clear_take_monster_damage_reduce_percent();
  float take_monster_damage_reduce_percent() const;
  void set_take_monster_damage_reduce_percent(float value);
  private:
  float _internal_take_monster_damage_reduce_percent() const;
  void _internal_set_take_monster_damage_reduce_percent(float value);
  public:

  // float base_hp_add_percent = 215;
  void clear_base_hp_add_percent();
  float base_hp_add_percent() const;
  void set_base_hp_add_percent(float value);
  private:
  float _internal_base_hp_add_percent() const;
  void _internal_set_base_hp_add_percent(float value);
  public:

  // float base_mp_add_percent = 216;
  void clear_base_mp_add_percent();
  float base_mp_add_percent() const;
  void set_base_mp_add_percent(float value);
  private:
  float _internal_base_mp_add_percent() const;
  void _internal_set_base_mp_add_percent(float value);
  public:

  // float base_phy_att_add_percent = 217;
  void clear_base_phy_att_add_percent();
  float base_phy_att_add_percent() const;
  void set_base_phy_att_add_percent(float value);
  private:
  float _internal_base_phy_att_add_percent() const;
  void _internal_set_base_phy_att_add_percent(float value);
  public:

  // float base_mag_att_add_percent = 218;
  void clear_base_mag_att_add_percent();
  float base_mag_att_add_percent() const;
  void set_base_mag_att_add_percent(float value);
  private:
  float _internal_base_mag_att_add_percent() const;
  void _internal_set_base_mag_att_add_percent(float value);
  public:

  // float base_phy_def_add_percent = 219;
  void clear_base_phy_def_add_percent();
  float base_phy_def_add_percent() const;
  void set_base_phy_def_add_percent(float value);
  private:
  float _internal_base_phy_def_add_percent() const;
  void _internal_set_base_phy_def_add_percent(float value);
  public:

  // float base_mag_def_add_percent = 220;
  void clear_base_mag_def_add_percent();
  float base_mag_def_add_percent() const;
  void set_base_mag_def_add_percent(float value);
  private:
  float _internal_base_mag_def_add_percent() const;
  void _internal_set_base_mag_def_add_percent(float value);
  public:

  // float base_phy_hit_add_percent = 221;
  void clear_base_phy_hit_add_percent();
  float base_phy_hit_add_percent() const;
  void set_base_phy_hit_add_percent(float value);
  private:
  float _internal_base_phy_hit_add_percent() const;
  void _internal_set_base_phy_hit_add_percent(float value);
  public:

  // float base_mag_hit_add_percent = 222;
  void clear_base_mag_hit_add_percent();
  float base_mag_hit_add_percent() const;
  void set_base_mag_hit_add_percent(float value);
  private:
  float _internal_base_mag_hit_add_percent() const;
  void _internal_set_base_mag_hit_add_percent(float value);
  public:

  // float base_phy_dodge_add_percent = 223;
  void clear_base_phy_dodge_add_percent();
  float base_phy_dodge_add_percent() const;
  void set_base_phy_dodge_add_percent(float value);
  private:
  float _internal_base_phy_dodge_add_percent() const;
  void _internal_set_base_phy_dodge_add_percent(float value);
  public:

  // float base_mag_dodge_add_percent = 224;
  void clear_base_mag_dodge_add_percent();
  float base_mag_dodge_add_percent() const;
  void set_base_mag_dodge_add_percent(float value);
  private:
  float _internal_base_mag_dodge_add_percent() const;
  void _internal_set_base_mag_dodge_add_percent(float value);
  public:

  // float base_crit_add_percent = 225;
  void clear_base_crit_add_percent();
  float base_crit_add_percent() const;
  void set_base_crit_add_percent(float value);
  private:
  float _internal_base_crit_add_percent() const;
  void _internal_set_base_crit_add_percent(float value);
  public:

  // float base_crit_def_add_percent = 226;
  void clear_base_crit_def_add_percent();
  float base_crit_def_add_percent() const;
  void set_base_crit_def_add_percent(float value);
  private:
  float _internal_base_crit_def_add_percent() const;
  void _internal_set_base_crit_def_add_percent(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float health_;
    float max_health_;
    float mana_;
    float max_mana_;
    float mind_;
    float strength_;
    float intellect_;
    float agility_;
    float move_speed_;
    float phy_att_;
    float phy_def_;
    float mag_att_;
    float mag_def_;
    float phy_dodge_;
    float mag_dodge_;
    float phy_hit_;
    float mag_hit_;
    float crit_;
    float crit_def_;
    float hp_recover_percent_;
    float mp_recover_percent_;
    float crit_coef_;
    float crit_block_;
    float crit_additional_damage_;
    float arena_money_add_percent_;
    float mag_break_;
    float phy_break_;
    float mag_block_;
    float phy_block_;
    float fen_qi_;
    float tuna_num_;
    float tuna_add_percent_;
    float medicine_num_;
    float medicine_add_percent_;
    float baseqi_add_percent_;
    float shen_tong_damage_to_player_add_percent_;
    float shen_tong_damage_to_player_reduce_percent_;
    float fa_bao_damage_to_player_add_percent_;
    float fa_bao_damage_to_player_reduce_percent_;
    float phy_damage_add_percent_;
    float mag_damage_add_percent_;
    float phy_damage_reduce_percent_;
    float mag_damage_reduce_percent_;
    float attack_monster_damage_add_percent_;
    float take_monster_damage_reduce_percent_;
    float base_hp_add_percent_;
    float base_mp_add_percent_;
    float base_phy_att_add_percent_;
    float base_mag_att_add_percent_;
    float base_phy_def_add_percent_;
    float base_mag_def_add_percent_;
    float base_phy_hit_add_percent_;
    float base_mag_hit_add_percent_;
    float base_phy_dodge_add_percent_;
    float base_mag_dodge_add_percent_;
    float base_crit_add_percent_;
    float base_crit_def_add_percent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RankData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RankData) */ {
 public:
  inline RankData() : RankData(nullptr) {}
  ~RankData() override;
  explicit PROTOBUF_CONSTEXPR RankData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RankData(const RankData& from);
  RankData(RankData&& from) noexcept
    : RankData() {
    *this = ::std::move(from);
  }

  inline RankData& operator=(const RankData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankData& operator=(RankData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RankData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RankData* internal_default_instance() {
    return reinterpret_cast<const RankData*>(
               &_RankData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RankData& a, RankData& b) {
    a.Swap(&b);
  }
  inline void Swap(RankData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RankData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RankData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RankData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RankData& from) {
    RankData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RankData";
  }
  protected:
  explicit RankData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankFieldNumber = 1,
    kExpFieldNumber = 2,
    kLayerFieldNumber = 3,
    kStageFieldNumber = 4,
    kDegreeFieldNumber = 5,
    kBreakthroughTypeFieldNumber = 6,
    kLoseRecoverTimestampFieldNumber = 8,
    kStageAddAttFieldNumber = 9,
    kLoseAddProbabilityFieldNumber = 7,
  };
  // int32 rank = 1;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // float exp = 2;
  void clear_exp();
  float exp() const;
  void set_exp(float value);
  private:
  float _internal_exp() const;
  void _internal_set_exp(float value);
  public:

  // int32 layer = 3;
  void clear_layer();
  int32_t layer() const;
  void set_layer(int32_t value);
  private:
  int32_t _internal_layer() const;
  void _internal_set_layer(int32_t value);
  public:

  // int32 stage = 4;
  void clear_stage();
  int32_t stage() const;
  void set_stage(int32_t value);
  private:
  int32_t _internal_stage() const;
  void _internal_set_stage(int32_t value);
  public:

  // int32 degree = 5;
  void clear_degree();
  int32_t degree() const;
  void set_degree(int32_t value);
  private:
  int32_t _internal_degree() const;
  void _internal_set_degree(int32_t value);
  public:

  // .idlepb.BreakthroughType breakthrough_type = 6;
  void clear_breakthrough_type();
  ::idlepb::BreakthroughType breakthrough_type() const;
  void set_breakthrough_type(::idlepb::BreakthroughType value);
  private:
  ::idlepb::BreakthroughType _internal_breakthrough_type() const;
  void _internal_set_breakthrough_type(::idlepb::BreakthroughType value);
  public:

  // int64 lose_recover_timestamp = 8;
  void clear_lose_recover_timestamp();
  int64_t lose_recover_timestamp() const;
  void set_lose_recover_timestamp(int64_t value);
  private:
  int64_t _internal_lose_recover_timestamp() const;
  void _internal_set_lose_recover_timestamp(int64_t value);
  public:

  // int64 stage_add_att = 9;
  void clear_stage_add_att();
  int64_t stage_add_att() const;
  void set_stage_add_att(int64_t value);
  private:
  int64_t _internal_stage_add_att() const;
  void _internal_set_stage_add_att(int64_t value);
  public:

  // int32 lose_add_probability = 7;
  void clear_lose_add_probability();
  int32_t lose_add_probability() const;
  void set_lose_add_probability(int32_t value);
  private:
  int32_t _internal_lose_add_probability() const;
  void _internal_set_lose_add_probability(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RankData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t rank_;
    float exp_;
    int32_t layer_;
    int32_t stage_;
    int32_t degree_;
    int breakthrough_type_;
    int64_t lose_recover_timestamp_;
    int64_t stage_add_att_;
    int32_t lose_add_probability_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API BreathingReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.BreathingReward) */ {
 public:
  inline BreathingReward() : BreathingReward(nullptr) {}
  ~BreathingReward() override;
  explicit PROTOBUF_CONSTEXPR BreathingReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BreathingReward(const BreathingReward& from);
  BreathingReward(BreathingReward&& from) noexcept
    : BreathingReward() {
    *this = ::std::move(from);
  }

  inline BreathingReward& operator=(const BreathingReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline BreathingReward& operator=(BreathingReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BreathingReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const BreathingReward* internal_default_instance() {
    return reinterpret_cast<const BreathingReward*>(
               &_BreathingReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BreathingReward& a, BreathingReward& b) {
    a.Swap(&b);
  }
  inline void Swap(BreathingReward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BreathingReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BreathingReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BreathingReward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BreathingReward& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BreathingReward& from) {
    BreathingReward::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BreathingReward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.BreathingReward";
  }
  protected:
  explicit BreathingReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 2,
    kNumFieldNumber = 3,
    kIndexFieldNumber = 1,
    kDirFieldNumber = 4,
    kReceivedFieldNumber = 5,
  };
  // repeated int32 item_id = 2;
  int item_id_size() const;
  private:
  int _internal_item_id_size() const;
  public:
  void clear_item_id();
  private:
  int32_t _internal_item_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_item_id() const;
  void _internal_add_item_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_item_id();
  public:
  int32_t item_id(int index) const;
  void set_item_id(int index, int32_t value);
  void add_item_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      item_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_item_id();

  // repeated int32 num = 3;
  int num_size() const;
  private:
  int _internal_num_size() const;
  public:
  void clear_num();
  private:
  int32_t _internal_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_num() const;
  void _internal_add_num(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_num();
  public:
  int32_t num(int index) const;
  void set_num(int index, int32_t value);
  void add_num(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_num();

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 dir = 4;
  void clear_dir();
  int32_t dir() const;
  void set_dir(int32_t value);
  private:
  int32_t _internal_dir() const;
  void _internal_set_dir(int32_t value);
  public:

  // bool received = 5;
  void clear_received();
  bool received() const;
  void set_received(bool value);
  private:
  bool _internal_received() const;
  void _internal_set_received(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.BreathingReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > item_id_;
    mutable std::atomic<int> _item_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > num_;
    mutable std::atomic<int> _num_cached_byte_size_;
    int32_t index_;
    int32_t dir_;
    bool received_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CommonCultivationData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CommonCultivationData) */ {
 public:
  inline CommonCultivationData() : CommonCultivationData(nullptr) {}
  ~CommonCultivationData() override;
  explicit PROTOBUF_CONSTEXPR CommonCultivationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonCultivationData(const CommonCultivationData& from);
  CommonCultivationData(CommonCultivationData&& from) noexcept
    : CommonCultivationData() {
    *this = ::std::move(from);
  }

  inline CommonCultivationData& operator=(const CommonCultivationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonCultivationData& operator=(CommonCultivationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonCultivationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonCultivationData* internal_default_instance() {
    return reinterpret_cast<const CommonCultivationData*>(
               &_CommonCultivationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CommonCultivationData& a, CommonCultivationData& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonCultivationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonCultivationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonCultivationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonCultivationData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonCultivationData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonCultivationData& from) {
    CommonCultivationData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonCultivationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CommonCultivationData";
  }
  protected:
  explicit CommonCultivationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBreathingRewardsFieldNumber = 1,
    kMergeBreathingFieldNumber = 2,
  };
  // repeated .idlepb.BreathingReward breathing_rewards = 1;
  int breathing_rewards_size() const;
  private:
  int _internal_breathing_rewards_size() const;
  public:
  void clear_breathing_rewards();
  ::idlepb::BreathingReward* mutable_breathing_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BreathingReward >*
      mutable_breathing_rewards();
  private:
  const ::idlepb::BreathingReward& _internal_breathing_rewards(int index) const;
  ::idlepb::BreathingReward* _internal_add_breathing_rewards();
  public:
  const ::idlepb::BreathingReward& breathing_rewards(int index) const;
  ::idlepb::BreathingReward* add_breathing_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BreathingReward >&
      breathing_rewards() const;

  // bool merge_breathing = 2;
  void clear_merge_breathing();
  bool merge_breathing() const;
  void set_merge_breathing(bool value);
  private:
  bool _internal_merge_breathing() const;
  void _internal_set_merge_breathing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CommonCultivationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BreathingReward > breathing_rewards_;
    bool merge_breathing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CultivationData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CultivationData) */ {
 public:
  inline CultivationData() : CultivationData(nullptr) {}
  ~CultivationData() override;
  explicit PROTOBUF_CONSTEXPR CultivationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CultivationData(const CultivationData& from);
  CultivationData(CultivationData&& from) noexcept
    : CultivationData() {
    *this = ::std::move(from);
  }

  inline CultivationData& operator=(const CultivationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CultivationData& operator=(CultivationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CultivationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CultivationData* internal_default_instance() {
    return reinterpret_cast<const CultivationData*>(
               &_CultivationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CultivationData& a, CultivationData& b) {
    a.Swap(&b);
  }
  inline void Swap(CultivationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CultivationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CultivationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CultivationData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CultivationData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CultivationData& from) {
    CultivationData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CultivationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CultivationData";
  }
  protected:
  explicit CultivationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankDataFieldNumber = 1,
  };
  // .idlepb.RankData rank_data = 1;
  bool has_rank_data() const;
  private:
  bool _internal_has_rank_data() const;
  public:
  void clear_rank_data();
  const ::idlepb::RankData& rank_data() const;
  PROTOBUF_NODISCARD ::idlepb::RankData* release_rank_data();
  ::idlepb::RankData* mutable_rank_data();
  void set_allocated_rank_data(::idlepb::RankData* rank_data);
  private:
  const ::idlepb::RankData& _internal_rank_data() const;
  ::idlepb::RankData* _internal_mutable_rank_data();
  public:
  void unsafe_arena_set_allocated_rank_data(
      ::idlepb::RankData* rank_data);
  ::idlepb::RankData* unsafe_arena_release_rank_data();

  // @@protoc_insertion_point(class_scope:idlepb.CultivationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::RankData* rank_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleDailyCounterEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleDailyCounterEntry) */ {
 public:
  inline RoleDailyCounterEntry() : RoleDailyCounterEntry(nullptr) {}
  ~RoleDailyCounterEntry() override;
  explicit PROTOBUF_CONSTEXPR RoleDailyCounterEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleDailyCounterEntry(const RoleDailyCounterEntry& from);
  RoleDailyCounterEntry(RoleDailyCounterEntry&& from) noexcept
    : RoleDailyCounterEntry() {
    *this = ::std::move(from);
  }

  inline RoleDailyCounterEntry& operator=(const RoleDailyCounterEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleDailyCounterEntry& operator=(RoleDailyCounterEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleDailyCounterEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleDailyCounterEntry* internal_default_instance() {
    return reinterpret_cast<const RoleDailyCounterEntry*>(
               &_RoleDailyCounterEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RoleDailyCounterEntry& a, RoleDailyCounterEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleDailyCounterEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleDailyCounterEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleDailyCounterEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleDailyCounterEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleDailyCounterEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleDailyCounterEntry& from) {
    RoleDailyCounterEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleDailyCounterEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleDailyCounterEntry";
  }
  protected:
  explicit RoleDailyCounterEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // .idlepb.RoleDailyCounterType type = 1;
  void clear_type();
  ::idlepb::RoleDailyCounterType type() const;
  void set_type(::idlepb::RoleDailyCounterType value);
  private:
  ::idlepb::RoleDailyCounterType _internal_type() const;
  void _internal_set_type(::idlepb::RoleDailyCounterType value);
  public:

  // int32 num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleDailyCounterEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleDailyCounter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleDailyCounter) */ {
 public:
  inline RoleDailyCounter() : RoleDailyCounter(nullptr) {}
  ~RoleDailyCounter() override;
  explicit PROTOBUF_CONSTEXPR RoleDailyCounter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleDailyCounter(const RoleDailyCounter& from);
  RoleDailyCounter(RoleDailyCounter&& from) noexcept
    : RoleDailyCounter() {
    *this = ::std::move(from);
  }

  inline RoleDailyCounter& operator=(const RoleDailyCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleDailyCounter& operator=(RoleDailyCounter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleDailyCounter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleDailyCounter* internal_default_instance() {
    return reinterpret_cast<const RoleDailyCounter*>(
               &_RoleDailyCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RoleDailyCounter& a, RoleDailyCounter& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleDailyCounter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleDailyCounter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleDailyCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleDailyCounter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleDailyCounter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleDailyCounter& from) {
    RoleDailyCounter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleDailyCounter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleDailyCounter";
  }
  protected:
  explicit RoleDailyCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kLastResetTimeFieldNumber = 4,
  };
  // repeated .idlepb.RoleDailyCounterEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::idlepb::RoleDailyCounterEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleDailyCounterEntry >*
      mutable_entries();
  private:
  const ::idlepb::RoleDailyCounterEntry& _internal_entries(int index) const;
  ::idlepb::RoleDailyCounterEntry* _internal_add_entries();
  public:
  const ::idlepb::RoleDailyCounterEntry& entries(int index) const;
  ::idlepb::RoleDailyCounterEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleDailyCounterEntry >&
      entries() const;

  // int64 last_reset_time = 4;
  void clear_last_reset_time();
  int64_t last_reset_time() const;
  void set_last_reset_time(int64_t value);
  private:
  int64_t _internal_last_reset_time() const;
  void _internal_set_last_reset_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleDailyCounter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleDailyCounterEntry > entries_;
    int64_t last_reset_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleWeeklyCounterEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleWeeklyCounterEntry) */ {
 public:
  inline RoleWeeklyCounterEntry() : RoleWeeklyCounterEntry(nullptr) {}
  ~RoleWeeklyCounterEntry() override;
  explicit PROTOBUF_CONSTEXPR RoleWeeklyCounterEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleWeeklyCounterEntry(const RoleWeeklyCounterEntry& from);
  RoleWeeklyCounterEntry(RoleWeeklyCounterEntry&& from) noexcept
    : RoleWeeklyCounterEntry() {
    *this = ::std::move(from);
  }

  inline RoleWeeklyCounterEntry& operator=(const RoleWeeklyCounterEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleWeeklyCounterEntry& operator=(RoleWeeklyCounterEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleWeeklyCounterEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleWeeklyCounterEntry* internal_default_instance() {
    return reinterpret_cast<const RoleWeeklyCounterEntry*>(
               &_RoleWeeklyCounterEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RoleWeeklyCounterEntry& a, RoleWeeklyCounterEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleWeeklyCounterEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleWeeklyCounterEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleWeeklyCounterEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleWeeklyCounterEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleWeeklyCounterEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleWeeklyCounterEntry& from) {
    RoleWeeklyCounterEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleWeeklyCounterEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleWeeklyCounterEntry";
  }
  protected:
  explicit RoleWeeklyCounterEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // .idlepb.RoleWeeklyCounterType type = 1;
  void clear_type();
  ::idlepb::RoleWeeklyCounterType type() const;
  void set_type(::idlepb::RoleWeeklyCounterType value);
  private:
  ::idlepb::RoleWeeklyCounterType _internal_type() const;
  void _internal_set_type(::idlepb::RoleWeeklyCounterType value);
  public:

  // int32 num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleWeeklyCounterEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleWeeklyCounter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleWeeklyCounter) */ {
 public:
  inline RoleWeeklyCounter() : RoleWeeklyCounter(nullptr) {}
  ~RoleWeeklyCounter() override;
  explicit PROTOBUF_CONSTEXPR RoleWeeklyCounter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleWeeklyCounter(const RoleWeeklyCounter& from);
  RoleWeeklyCounter(RoleWeeklyCounter&& from) noexcept
    : RoleWeeklyCounter() {
    *this = ::std::move(from);
  }

  inline RoleWeeklyCounter& operator=(const RoleWeeklyCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleWeeklyCounter& operator=(RoleWeeklyCounter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleWeeklyCounter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleWeeklyCounter* internal_default_instance() {
    return reinterpret_cast<const RoleWeeklyCounter*>(
               &_RoleWeeklyCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RoleWeeklyCounter& a, RoleWeeklyCounter& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleWeeklyCounter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleWeeklyCounter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleWeeklyCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleWeeklyCounter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleWeeklyCounter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleWeeklyCounter& from) {
    RoleWeeklyCounter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleWeeklyCounter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleWeeklyCounter";
  }
  protected:
  explicit RoleWeeklyCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kLastResetTimeFieldNumber = 4,
  };
  // repeated .idlepb.RoleWeeklyCounterEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::idlepb::RoleWeeklyCounterEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleWeeklyCounterEntry >*
      mutable_entries();
  private:
  const ::idlepb::RoleWeeklyCounterEntry& _internal_entries(int index) const;
  ::idlepb::RoleWeeklyCounterEntry* _internal_add_entries();
  public:
  const ::idlepb::RoleWeeklyCounterEntry& entries(int index) const;
  ::idlepb::RoleWeeklyCounterEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleWeeklyCounterEntry >&
      entries() const;

  // int64 last_reset_time = 4;
  void clear_last_reset_time();
  int64_t last_reset_time() const;
  void set_last_reset_time(int64_t value);
  private:
  int64_t _internal_last_reset_time() const;
  void _internal_set_last_reset_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleWeeklyCounter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleWeeklyCounterEntry > entries_;
    int64_t last_reset_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CurrencyEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CurrencyEntry) */ {
 public:
  inline CurrencyEntry() : CurrencyEntry(nullptr) {}
  ~CurrencyEntry() override;
  explicit PROTOBUF_CONSTEXPR CurrencyEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrencyEntry(const CurrencyEntry& from);
  CurrencyEntry(CurrencyEntry&& from) noexcept
    : CurrencyEntry() {
    *this = ::std::move(from);
  }

  inline CurrencyEntry& operator=(const CurrencyEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrencyEntry& operator=(CurrencyEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrencyEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrencyEntry* internal_default_instance() {
    return reinterpret_cast<const CurrencyEntry*>(
               &_CurrencyEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CurrencyEntry& a, CurrencyEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrencyEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrencyEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrencyEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrencyEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrencyEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CurrencyEntry& from) {
    CurrencyEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrencyEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CurrencyEntry";
  }
  protected:
  explicit CurrencyEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // int64 num = 2;
  void clear_num();
  int64_t num() const;
  void set_num(int64_t value);
  private:
  int64_t _internal_num() const;
  void _internal_set_num(int64_t value);
  public:

  // .idlepb.CurrencyType type = 1;
  void clear_type();
  ::idlepb::CurrencyType type() const;
  void set_type(::idlepb::CurrencyType value);
  private:
  ::idlepb::CurrencyType _internal_type() const;
  void _internal_set_type(::idlepb::CurrencyType value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CurrencyEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t num_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CurrencyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CurrencyData) */ {
 public:
  inline CurrencyData() : CurrencyData(nullptr) {}
  ~CurrencyData() override;
  explicit PROTOBUF_CONSTEXPR CurrencyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrencyData(const CurrencyData& from);
  CurrencyData(CurrencyData&& from) noexcept
    : CurrencyData() {
    *this = ::std::move(from);
  }

  inline CurrencyData& operator=(const CurrencyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrencyData& operator=(CurrencyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrencyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrencyData* internal_default_instance() {
    return reinterpret_cast<const CurrencyData*>(
               &_CurrencyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CurrencyData& a, CurrencyData& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrencyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrencyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrencyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrencyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrencyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CurrencyData& from) {
    CurrencyData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrencyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CurrencyData";
  }
  protected:
  explicit CurrencyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrenciesFieldNumber = 10,
  };
  // repeated .idlepb.CurrencyEntry currencies = 10;
  int currencies_size() const;
  private:
  int _internal_currencies_size() const;
  public:
  void clear_currencies();
  ::idlepb::CurrencyEntry* mutable_currencies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CurrencyEntry >*
      mutable_currencies();
  private:
  const ::idlepb::CurrencyEntry& _internal_currencies(int index) const;
  ::idlepb::CurrencyEntry* _internal_add_currencies();
  public:
  const ::idlepb::CurrencyEntry& currencies(int index) const;
  ::idlepb::CurrencyEntry* add_currencies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CurrencyEntry >&
      currencies() const;

  // @@protoc_insertion_point(class_scope:idlepb.CurrencyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CurrencyEntry > currencies_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API EquipPerkEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.EquipPerkEntry) */ {
 public:
  inline EquipPerkEntry() : EquipPerkEntry(nullptr) {}
  ~EquipPerkEntry() override;
  explicit PROTOBUF_CONSTEXPR EquipPerkEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EquipPerkEntry(const EquipPerkEntry& from);
  EquipPerkEntry(EquipPerkEntry&& from) noexcept
    : EquipPerkEntry() {
    *this = ::std::move(from);
  }

  inline EquipPerkEntry& operator=(const EquipPerkEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquipPerkEntry& operator=(EquipPerkEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquipPerkEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquipPerkEntry* internal_default_instance() {
    return reinterpret_cast<const EquipPerkEntry*>(
               &_EquipPerkEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(EquipPerkEntry& a, EquipPerkEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(EquipPerkEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquipPerkEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EquipPerkEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EquipPerkEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EquipPerkEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EquipPerkEntry& from) {
    EquipPerkEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipPerkEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.EquipPerkEntry";
  }
  protected:
  explicit EquipPerkEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kQualityFieldNumber = 2,
    kNumFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .idlepb.ItemQuality quality = 2;
  void clear_quality();
  ::idlepb::ItemQuality quality() const;
  void set_quality(::idlepb::ItemQuality value);
  private:
  ::idlepb::ItemQuality _internal_quality() const;
  void _internal_set_quality(::idlepb::ItemQuality value);
  public:

  // int32 num = 3;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.EquipPerkEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int quality_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SkillEquipmentAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SkillEquipmentAttributes) */ {
 public:
  inline SkillEquipmentAttributes() : SkillEquipmentAttributes(nullptr) {}
  ~SkillEquipmentAttributes() override;
  explicit PROTOBUF_CONSTEXPR SkillEquipmentAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillEquipmentAttributes(const SkillEquipmentAttributes& from);
  SkillEquipmentAttributes(SkillEquipmentAttributes&& from) noexcept
    : SkillEquipmentAttributes() {
    *this = ::std::move(from);
  }

  inline SkillEquipmentAttributes& operator=(const SkillEquipmentAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillEquipmentAttributes& operator=(SkillEquipmentAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillEquipmentAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillEquipmentAttributes* internal_default_instance() {
    return reinterpret_cast<const SkillEquipmentAttributes*>(
               &_SkillEquipmentAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SkillEquipmentAttributes& a, SkillEquipmentAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillEquipmentAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillEquipmentAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkillEquipmentAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkillEquipmentAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkillEquipmentAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkillEquipmentAttributes& from) {
    SkillEquipmentAttributes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillEquipmentAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SkillEquipmentAttributes";
  }
  protected:
  explicit SkillEquipmentAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectsFieldNumber = 9,
    kShieldEffectsFieldNumber = 10,
    kCoolDownFieldNumber = 1,
    kTargetNumFieldNumber = 2,
    kAttackCountFieldNumber = 3,
    kPhyCoefficientFieldNumber = 4,
    kPhyDamageFieldNumber = 5,
    kMagCoefficientFieldNumber = 6,
    kMagDamageFieldNumber = 7,
    kMaxDamageFieldNumber = 8,
  };
  // repeated .idlepb.AbilityEffectData effects = 9;
  int effects_size() const;
  private:
  int _internal_effects_size() const;
  public:
  void clear_effects();
  ::idlepb::AbilityEffectData* mutable_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectData >*
      mutable_effects();
  private:
  const ::idlepb::AbilityEffectData& _internal_effects(int index) const;
  ::idlepb::AbilityEffectData* _internal_add_effects();
  public:
  const ::idlepb::AbilityEffectData& effects(int index) const;
  ::idlepb::AbilityEffectData* add_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectData >&
      effects() const;

  // repeated .idlepb.AbilityEffectData shield_effects = 10;
  int shield_effects_size() const;
  private:
  int _internal_shield_effects_size() const;
  public:
  void clear_shield_effects();
  ::idlepb::AbilityEffectData* mutable_shield_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectData >*
      mutable_shield_effects();
  private:
  const ::idlepb::AbilityEffectData& _internal_shield_effects(int index) const;
  ::idlepb::AbilityEffectData* _internal_add_shield_effects();
  public:
  const ::idlepb::AbilityEffectData& shield_effects(int index) const;
  ::idlepb::AbilityEffectData* add_shield_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectData >&
      shield_effects() const;

  // float cool_down = 1;
  void clear_cool_down();
  float cool_down() const;
  void set_cool_down(float value);
  private:
  float _internal_cool_down() const;
  void _internal_set_cool_down(float value);
  public:

  // int32 target_num = 2;
  void clear_target_num();
  int32_t target_num() const;
  void set_target_num(int32_t value);
  private:
  int32_t _internal_target_num() const;
  void _internal_set_target_num(int32_t value);
  public:

  // int32 attack_count = 3;
  void clear_attack_count();
  int32_t attack_count() const;
  void set_attack_count(int32_t value);
  private:
  int32_t _internal_attack_count() const;
  void _internal_set_attack_count(int32_t value);
  public:

  // float phy_coefficient = 4;
  void clear_phy_coefficient();
  float phy_coefficient() const;
  void set_phy_coefficient(float value);
  private:
  float _internal_phy_coefficient() const;
  void _internal_set_phy_coefficient(float value);
  public:

  // float phy_damage = 5;
  void clear_phy_damage();
  float phy_damage() const;
  void set_phy_damage(float value);
  private:
  float _internal_phy_damage() const;
  void _internal_set_phy_damage(float value);
  public:

  // float mag_coefficient = 6;
  void clear_mag_coefficient();
  float mag_coefficient() const;
  void set_mag_coefficient(float value);
  private:
  float _internal_mag_coefficient() const;
  void _internal_set_mag_coefficient(float value);
  public:

  // float mag_damage = 7;
  void clear_mag_damage();
  float mag_damage() const;
  void set_mag_damage(float value);
  private:
  float _internal_mag_damage() const;
  void _internal_set_mag_damage(float value);
  public:

  // float max_damage = 8;
  void clear_max_damage();
  float max_damage() const;
  void set_max_damage(float value);
  private:
  float _internal_max_damage() const;
  void _internal_set_max_damage(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SkillEquipmentAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectData > effects_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectData > shield_effects_;
    float cool_down_;
    int32_t target_num_;
    int32_t attack_count_;
    float phy_coefficient_;
    float phy_damage_;
    float mag_coefficient_;
    float mag_damage_;
    float max_damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SkillEquipmentData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SkillEquipmentData) */ {
 public:
  inline SkillEquipmentData() : SkillEquipmentData(nullptr) {}
  ~SkillEquipmentData() override;
  explicit PROTOBUF_CONSTEXPR SkillEquipmentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillEquipmentData(const SkillEquipmentData& from);
  SkillEquipmentData(SkillEquipmentData&& from) noexcept
    : SkillEquipmentData() {
    *this = ::std::move(from);
  }

  inline SkillEquipmentData& operator=(const SkillEquipmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillEquipmentData& operator=(SkillEquipmentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillEquipmentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillEquipmentData* internal_default_instance() {
    return reinterpret_cast<const SkillEquipmentData*>(
               &_SkillEquipmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SkillEquipmentData& a, SkillEquipmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillEquipmentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillEquipmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkillEquipmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkillEquipmentData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkillEquipmentData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkillEquipmentData& from) {
    SkillEquipmentData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillEquipmentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SkillEquipmentData";
  }
  protected:
  explicit SkillEquipmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
    kReinforceAttributesFieldNumber = 2,
    kQiwenAttributesFieldNumber = 3,
    kJinglianAttributesFieldNumber = 4,
  };
  // .idlepb.SkillEquipmentAttributes attributes = 1;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::idlepb::SkillEquipmentAttributes& attributes() const;
  PROTOBUF_NODISCARD ::idlepb::SkillEquipmentAttributes* release_attributes();
  ::idlepb::SkillEquipmentAttributes* mutable_attributes();
  void set_allocated_attributes(::idlepb::SkillEquipmentAttributes* attributes);
  private:
  const ::idlepb::SkillEquipmentAttributes& _internal_attributes() const;
  ::idlepb::SkillEquipmentAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::idlepb::SkillEquipmentAttributes* attributes);
  ::idlepb::SkillEquipmentAttributes* unsafe_arena_release_attributes();

  // .idlepb.SkillEquipmentAttributes reinforce_attributes = 2;
  bool has_reinforce_attributes() const;
  private:
  bool _internal_has_reinforce_attributes() const;
  public:
  void clear_reinforce_attributes();
  const ::idlepb::SkillEquipmentAttributes& reinforce_attributes() const;
  PROTOBUF_NODISCARD ::idlepb::SkillEquipmentAttributes* release_reinforce_attributes();
  ::idlepb::SkillEquipmentAttributes* mutable_reinforce_attributes();
  void set_allocated_reinforce_attributes(::idlepb::SkillEquipmentAttributes* reinforce_attributes);
  private:
  const ::idlepb::SkillEquipmentAttributes& _internal_reinforce_attributes() const;
  ::idlepb::SkillEquipmentAttributes* _internal_mutable_reinforce_attributes();
  public:
  void unsafe_arena_set_allocated_reinforce_attributes(
      ::idlepb::SkillEquipmentAttributes* reinforce_attributes);
  ::idlepb::SkillEquipmentAttributes* unsafe_arena_release_reinforce_attributes();

  // .idlepb.SkillEquipmentAttributes qiwen_attributes = 3;
  bool has_qiwen_attributes() const;
  private:
  bool _internal_has_qiwen_attributes() const;
  public:
  void clear_qiwen_attributes();
  const ::idlepb::SkillEquipmentAttributes& qiwen_attributes() const;
  PROTOBUF_NODISCARD ::idlepb::SkillEquipmentAttributes* release_qiwen_attributes();
  ::idlepb::SkillEquipmentAttributes* mutable_qiwen_attributes();
  void set_allocated_qiwen_attributes(::idlepb::SkillEquipmentAttributes* qiwen_attributes);
  private:
  const ::idlepb::SkillEquipmentAttributes& _internal_qiwen_attributes() const;
  ::idlepb::SkillEquipmentAttributes* _internal_mutable_qiwen_attributes();
  public:
  void unsafe_arena_set_allocated_qiwen_attributes(
      ::idlepb::SkillEquipmentAttributes* qiwen_attributes);
  ::idlepb::SkillEquipmentAttributes* unsafe_arena_release_qiwen_attributes();

  // .idlepb.SkillEquipmentAttributes jinglian_attributes = 4;
  bool has_jinglian_attributes() const;
  private:
  bool _internal_has_jinglian_attributes() const;
  public:
  void clear_jinglian_attributes();
  const ::idlepb::SkillEquipmentAttributes& jinglian_attributes() const;
  PROTOBUF_NODISCARD ::idlepb::SkillEquipmentAttributes* release_jinglian_attributes();
  ::idlepb::SkillEquipmentAttributes* mutable_jinglian_attributes();
  void set_allocated_jinglian_attributes(::idlepb::SkillEquipmentAttributes* jinglian_attributes);
  private:
  const ::idlepb::SkillEquipmentAttributes& _internal_jinglian_attributes() const;
  ::idlepb::SkillEquipmentAttributes* _internal_mutable_jinglian_attributes();
  public:
  void unsafe_arena_set_allocated_jinglian_attributes(
      ::idlepb::SkillEquipmentAttributes* jinglian_attributes);
  ::idlepb::SkillEquipmentAttributes* unsafe_arena_release_jinglian_attributes();

  // @@protoc_insertion_point(class_scope:idlepb.SkillEquipmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::SkillEquipmentAttributes* attributes_;
    ::idlepb::SkillEquipmentAttributes* reinforce_attributes_;
    ::idlepb::SkillEquipmentAttributes* qiwen_attributes_;
    ::idlepb::SkillEquipmentAttributes* jinglian_attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CollectionEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CollectionEntry) */ {
 public:
  inline CollectionEntry() : CollectionEntry(nullptr) {}
  ~CollectionEntry() override;
  explicit PROTOBUF_CONSTEXPR CollectionEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionEntry(const CollectionEntry& from);
  CollectionEntry(CollectionEntry&& from) noexcept
    : CollectionEntry() {
    *this = ::std::move(from);
  }

  inline CollectionEntry& operator=(const CollectionEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionEntry& operator=(CollectionEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionEntry* internal_default_instance() {
    return reinterpret_cast<const CollectionEntry*>(
               &_CollectionEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CollectionEntry& a, CollectionEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionEntry& from) {
    CollectionEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CollectionEntry";
  }
  protected:
  explicit CollectionEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kStarFieldNumber = 3,
    kIsActivatedFieldNumber = 4,
    kPieceNumFieldNumber = 5,
    kLifeNumFieldNumber = 6,
    kCombatPowerFieldNumber = 7,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 star = 3;
  void clear_star();
  int32_t star() const;
  void set_star(int32_t value);
  private:
  int32_t _internal_star() const;
  void _internal_set_star(int32_t value);
  public:

  // bool is_activated = 4;
  void clear_is_activated();
  bool is_activated() const;
  void set_is_activated(bool value);
  private:
  bool _internal_is_activated() const;
  void _internal_set_is_activated(bool value);
  public:

  // int32 piece_num = 5;
  void clear_piece_num();
  int32_t piece_num() const;
  void set_piece_num(int32_t value);
  private:
  int32_t _internal_piece_num() const;
  void _internal_set_piece_num(int32_t value);
  public:

  // int32 life_num = 6;
  void clear_life_num();
  int32_t life_num() const;
  void set_life_num(int32_t value);
  private:
  int32_t _internal_life_num() const;
  void _internal_set_life_num(int32_t value);
  public:

  // float combat_power = 7;
  void clear_combat_power();
  float combat_power() const;
  void set_combat_power(float value);
  private:
  float _internal_combat_power() const;
  void _internal_set_combat_power(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CollectionEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t level_;
    int32_t star_;
    bool is_activated_;
    int32_t piece_num_;
    int32_t life_num_;
    float combat_power_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API EquipmentData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.EquipmentData) */ {
 public:
  inline EquipmentData() : EquipmentData(nullptr) {}
  ~EquipmentData() override;
  explicit PROTOBUF_CONSTEXPR EquipmentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EquipmentData(const EquipmentData& from);
  EquipmentData(EquipmentData&& from) noexcept
    : EquipmentData() {
    *this = ::std::move(from);
  }

  inline EquipmentData& operator=(const EquipmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquipmentData& operator=(EquipmentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquipmentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquipmentData* internal_default_instance() {
    return reinterpret_cast<const EquipmentData*>(
               &_EquipmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(EquipmentData& a, EquipmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(EquipmentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquipmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EquipmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EquipmentData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EquipmentData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EquipmentData& from) {
    EquipmentData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipmentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.EquipmentData";
  }
  protected:
  explicit EquipmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerksFieldNumber = 10,
    kMakerNameFieldNumber = 4,
    kSkillEquipmentDataFieldNumber = 11,
    kCollectionDataFieldNumber = 12,
    kBaseStatsFieldNumber = 100,
    kReinforceStatsFieldNumber = 101,
    kQiwenStatsFieldNumber = 102,
    kRefineStatsFieldNumber = 103,
    kPerkStatsFieldNumber = 104,
    kQiwenResonanceStatsFieldNumber = 105,
    kCombatPowerFieldNumber = 3,
    kMakerRoleidFieldNumber = 5,
    kSlotIndexFieldNumber = 1,
    kReinforceLevelFieldNumber = 30,
    kRefineLevelFieldNumber = 31,
    kQiwenALevelFieldNumber = 50,
    kQiwenBLevelFieldNumber = 51,
    kQiwenCLevelFieldNumber = 52,
    kQiwenExtraEffectNumFieldNumber = 53,
    kQiwenMoneycastFieldNumber = 54,
    kQiwenCurrentExpAFieldNumber = 55,
    kQiwenCurrentExpBFieldNumber = 56,
    kQiwenCurrentExpCFieldNumber = 57,
    kQiwenTotalExpAFieldNumber = 58,
    kQiwenTotalExpBFieldNumber = 59,
    kQiwenTotalExpCFieldNumber = 60,
  };
  // repeated .idlepb.EquipPerkEntry perks = 10;
  int perks_size() const;
  private:
  int _internal_perks_size() const;
  public:
  void clear_perks();
  ::idlepb::EquipPerkEntry* mutable_perks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::EquipPerkEntry >*
      mutable_perks();
  private:
  const ::idlepb::EquipPerkEntry& _internal_perks(int index) const;
  ::idlepb::EquipPerkEntry* _internal_add_perks();
  public:
  const ::idlepb::EquipPerkEntry& perks(int index) const;
  ::idlepb::EquipPerkEntry* add_perks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::EquipPerkEntry >&
      perks() const;

  // string maker_name = 4;
  void clear_maker_name();
  const std::string& maker_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maker_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maker_name();
  PROTOBUF_NODISCARD std::string* release_maker_name();
  void set_allocated_maker_name(std::string* maker_name);
  private:
  const std::string& _internal_maker_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maker_name(const std::string& value);
  std::string* _internal_mutable_maker_name();
  public:

  // .idlepb.SkillEquipmentData skill_equipment_data = 11;
  bool has_skill_equipment_data() const;
  private:
  bool _internal_has_skill_equipment_data() const;
  public:
  void clear_skill_equipment_data();
  const ::idlepb::SkillEquipmentData& skill_equipment_data() const;
  PROTOBUF_NODISCARD ::idlepb::SkillEquipmentData* release_skill_equipment_data();
  ::idlepb::SkillEquipmentData* mutable_skill_equipment_data();
  void set_allocated_skill_equipment_data(::idlepb::SkillEquipmentData* skill_equipment_data);
  private:
  const ::idlepb::SkillEquipmentData& _internal_skill_equipment_data() const;
  ::idlepb::SkillEquipmentData* _internal_mutable_skill_equipment_data();
  public:
  void unsafe_arena_set_allocated_skill_equipment_data(
      ::idlepb::SkillEquipmentData* skill_equipment_data);
  ::idlepb::SkillEquipmentData* unsafe_arena_release_skill_equipment_data();

  // .idlepb.CollectionEntry collection_data = 12;
  bool has_collection_data() const;
  private:
  bool _internal_has_collection_data() const;
  public:
  void clear_collection_data();
  const ::idlepb::CollectionEntry& collection_data() const;
  PROTOBUF_NODISCARD ::idlepb::CollectionEntry* release_collection_data();
  ::idlepb::CollectionEntry* mutable_collection_data();
  void set_allocated_collection_data(::idlepb::CollectionEntry* collection_data);
  private:
  const ::idlepb::CollectionEntry& _internal_collection_data() const;
  ::idlepb::CollectionEntry* _internal_mutable_collection_data();
  public:
  void unsafe_arena_set_allocated_collection_data(
      ::idlepb::CollectionEntry* collection_data);
  ::idlepb::CollectionEntry* unsafe_arena_release_collection_data();

  // .idlepb.GameStatsData base_stats = 100;
  bool has_base_stats() const;
  private:
  bool _internal_has_base_stats() const;
  public:
  void clear_base_stats();
  const ::idlepb::GameStatsData& base_stats() const;
  PROTOBUF_NODISCARD ::idlepb::GameStatsData* release_base_stats();
  ::idlepb::GameStatsData* mutable_base_stats();
  void set_allocated_base_stats(::idlepb::GameStatsData* base_stats);
  private:
  const ::idlepb::GameStatsData& _internal_base_stats() const;
  ::idlepb::GameStatsData* _internal_mutable_base_stats();
  public:
  void unsafe_arena_set_allocated_base_stats(
      ::idlepb::GameStatsData* base_stats);
  ::idlepb::GameStatsData* unsafe_arena_release_base_stats();

  // .idlepb.GameStatsData reinforce_stats = 101;
  bool has_reinforce_stats() const;
  private:
  bool _internal_has_reinforce_stats() const;
  public:
  void clear_reinforce_stats();
  const ::idlepb::GameStatsData& reinforce_stats() const;
  PROTOBUF_NODISCARD ::idlepb::GameStatsData* release_reinforce_stats();
  ::idlepb::GameStatsData* mutable_reinforce_stats();
  void set_allocated_reinforce_stats(::idlepb::GameStatsData* reinforce_stats);
  private:
  const ::idlepb::GameStatsData& _internal_reinforce_stats() const;
  ::idlepb::GameStatsData* _internal_mutable_reinforce_stats();
  public:
  void unsafe_arena_set_allocated_reinforce_stats(
      ::idlepb::GameStatsData* reinforce_stats);
  ::idlepb::GameStatsData* unsafe_arena_release_reinforce_stats();

  // .idlepb.GameStatsData qiwen_stats = 102;
  bool has_qiwen_stats() const;
  private:
  bool _internal_has_qiwen_stats() const;
  public:
  void clear_qiwen_stats();
  const ::idlepb::GameStatsData& qiwen_stats() const;
  PROTOBUF_NODISCARD ::idlepb::GameStatsData* release_qiwen_stats();
  ::idlepb::GameStatsData* mutable_qiwen_stats();
  void set_allocated_qiwen_stats(::idlepb::GameStatsData* qiwen_stats);
  private:
  const ::idlepb::GameStatsData& _internal_qiwen_stats() const;
  ::idlepb::GameStatsData* _internal_mutable_qiwen_stats();
  public:
  void unsafe_arena_set_allocated_qiwen_stats(
      ::idlepb::GameStatsData* qiwen_stats);
  ::idlepb::GameStatsData* unsafe_arena_release_qiwen_stats();

  // .idlepb.GameStatsData refine_stats = 103;
  bool has_refine_stats() const;
  private:
  bool _internal_has_refine_stats() const;
  public:
  void clear_refine_stats();
  const ::idlepb::GameStatsData& refine_stats() const;
  PROTOBUF_NODISCARD ::idlepb::GameStatsData* release_refine_stats();
  ::idlepb::GameStatsData* mutable_refine_stats();
  void set_allocated_refine_stats(::idlepb::GameStatsData* refine_stats);
  private:
  const ::idlepb::GameStatsData& _internal_refine_stats() const;
  ::idlepb::GameStatsData* _internal_mutable_refine_stats();
  public:
  void unsafe_arena_set_allocated_refine_stats(
      ::idlepb::GameStatsData* refine_stats);
  ::idlepb::GameStatsData* unsafe_arena_release_refine_stats();

  // .idlepb.GameStatsData perk_stats = 104;
  bool has_perk_stats() const;
  private:
  bool _internal_has_perk_stats() const;
  public:
  void clear_perk_stats();
  const ::idlepb::GameStatsData& perk_stats() const;
  PROTOBUF_NODISCARD ::idlepb::GameStatsData* release_perk_stats();
  ::idlepb::GameStatsData* mutable_perk_stats();
  void set_allocated_perk_stats(::idlepb::GameStatsData* perk_stats);
  private:
  const ::idlepb::GameStatsData& _internal_perk_stats() const;
  ::idlepb::GameStatsData* _internal_mutable_perk_stats();
  public:
  void unsafe_arena_set_allocated_perk_stats(
      ::idlepb::GameStatsData* perk_stats);
  ::idlepb::GameStatsData* unsafe_arena_release_perk_stats();

  // .idlepb.GameStatsData qiwen_resonance_stats = 105;
  bool has_qiwen_resonance_stats() const;
  private:
  bool _internal_has_qiwen_resonance_stats() const;
  public:
  void clear_qiwen_resonance_stats();
  const ::idlepb::GameStatsData& qiwen_resonance_stats() const;
  PROTOBUF_NODISCARD ::idlepb::GameStatsData* release_qiwen_resonance_stats();
  ::idlepb::GameStatsData* mutable_qiwen_resonance_stats();
  void set_allocated_qiwen_resonance_stats(::idlepb::GameStatsData* qiwen_resonance_stats);
  private:
  const ::idlepb::GameStatsData& _internal_qiwen_resonance_stats() const;
  ::idlepb::GameStatsData* _internal_mutable_qiwen_resonance_stats();
  public:
  void unsafe_arena_set_allocated_qiwen_resonance_stats(
      ::idlepb::GameStatsData* qiwen_resonance_stats);
  ::idlepb::GameStatsData* unsafe_arena_release_qiwen_resonance_stats();

  // int64 combat_power = 3;
  void clear_combat_power();
  int64_t combat_power() const;
  void set_combat_power(int64_t value);
  private:
  int64_t _internal_combat_power() const;
  void _internal_set_combat_power(int64_t value);
  public:

  // int64 maker_roleid = 5;
  void clear_maker_roleid();
  int64_t maker_roleid() const;
  void set_maker_roleid(int64_t value);
  private:
  int64_t _internal_maker_roleid() const;
  void _internal_set_maker_roleid(int64_t value);
  public:

  // int32 slot_index = 1;
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // int32 reinforce_level = 30;
  void clear_reinforce_level();
  int32_t reinforce_level() const;
  void set_reinforce_level(int32_t value);
  private:
  int32_t _internal_reinforce_level() const;
  void _internal_set_reinforce_level(int32_t value);
  public:

  // int32 refine_level = 31;
  void clear_refine_level();
  int32_t refine_level() const;
  void set_refine_level(int32_t value);
  private:
  int32_t _internal_refine_level() const;
  void _internal_set_refine_level(int32_t value);
  public:

  // int32 qiwen_a_level = 50;
  void clear_qiwen_a_level();
  int32_t qiwen_a_level() const;
  void set_qiwen_a_level(int32_t value);
  private:
  int32_t _internal_qiwen_a_level() const;
  void _internal_set_qiwen_a_level(int32_t value);
  public:

  // int32 qiwen_b_level = 51;
  void clear_qiwen_b_level();
  int32_t qiwen_b_level() const;
  void set_qiwen_b_level(int32_t value);
  private:
  int32_t _internal_qiwen_b_level() const;
  void _internal_set_qiwen_b_level(int32_t value);
  public:

  // int32 qiwen_c_level = 52;
  void clear_qiwen_c_level();
  int32_t qiwen_c_level() const;
  void set_qiwen_c_level(int32_t value);
  private:
  int32_t _internal_qiwen_c_level() const;
  void _internal_set_qiwen_c_level(int32_t value);
  public:

  // int32 qiwen_extra_effect_num = 53;
  void clear_qiwen_extra_effect_num();
  int32_t qiwen_extra_effect_num() const;
  void set_qiwen_extra_effect_num(int32_t value);
  private:
  int32_t _internal_qiwen_extra_effect_num() const;
  void _internal_set_qiwen_extra_effect_num(int32_t value);
  public:

  // int32 qiwen_moneycast = 54;
  void clear_qiwen_moneycast();
  int32_t qiwen_moneycast() const;
  void set_qiwen_moneycast(int32_t value);
  private:
  int32_t _internal_qiwen_moneycast() const;
  void _internal_set_qiwen_moneycast(int32_t value);
  public:

  // int32 qiwen_current_exp_a = 55;
  void clear_qiwen_current_exp_a();
  int32_t qiwen_current_exp_a() const;
  void set_qiwen_current_exp_a(int32_t value);
  private:
  int32_t _internal_qiwen_current_exp_a() const;
  void _internal_set_qiwen_current_exp_a(int32_t value);
  public:

  // int32 qiwen_current_exp_b = 56;
  void clear_qiwen_current_exp_b();
  int32_t qiwen_current_exp_b() const;
  void set_qiwen_current_exp_b(int32_t value);
  private:
  int32_t _internal_qiwen_current_exp_b() const;
  void _internal_set_qiwen_current_exp_b(int32_t value);
  public:

  // int32 qiwen_current_exp_c = 57;
  void clear_qiwen_current_exp_c();
  int32_t qiwen_current_exp_c() const;
  void set_qiwen_current_exp_c(int32_t value);
  private:
  int32_t _internal_qiwen_current_exp_c() const;
  void _internal_set_qiwen_current_exp_c(int32_t value);
  public:

  // int32 qiwen_total_exp_a = 58;
  void clear_qiwen_total_exp_a();
  int32_t qiwen_total_exp_a() const;
  void set_qiwen_total_exp_a(int32_t value);
  private:
  int32_t _internal_qiwen_total_exp_a() const;
  void _internal_set_qiwen_total_exp_a(int32_t value);
  public:

  // int32 qiwen_total_exp_b = 59;
  void clear_qiwen_total_exp_b();
  int32_t qiwen_total_exp_b() const;
  void set_qiwen_total_exp_b(int32_t value);
  private:
  int32_t _internal_qiwen_total_exp_b() const;
  void _internal_set_qiwen_total_exp_b(int32_t value);
  public:

  // int32 qiwen_total_exp_c = 60;
  void clear_qiwen_total_exp_c();
  int32_t qiwen_total_exp_c() const;
  void set_qiwen_total_exp_c(int32_t value);
  private:
  int32_t _internal_qiwen_total_exp_c() const;
  void _internal_set_qiwen_total_exp_c(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.EquipmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::EquipPerkEntry > perks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maker_name_;
    ::idlepb::SkillEquipmentData* skill_equipment_data_;
    ::idlepb::CollectionEntry* collection_data_;
    ::idlepb::GameStatsData* base_stats_;
    ::idlepb::GameStatsData* reinforce_stats_;
    ::idlepb::GameStatsData* qiwen_stats_;
    ::idlepb::GameStatsData* refine_stats_;
    ::idlepb::GameStatsData* perk_stats_;
    ::idlepb::GameStatsData* qiwen_resonance_stats_;
    int64_t combat_power_;
    int64_t maker_roleid_;
    int32_t slot_index_;
    int32_t reinforce_level_;
    int32_t refine_level_;
    int32_t qiwen_a_level_;
    int32_t qiwen_b_level_;
    int32_t qiwen_c_level_;
    int32_t qiwen_extra_effect_num_;
    int32_t qiwen_moneycast_;
    int32_t qiwen_current_exp_a_;
    int32_t qiwen_current_exp_b_;
    int32_t qiwen_current_exp_c_;
    int32_t qiwen_total_exp_a_;
    int32_t qiwen_total_exp_b_;
    int32_t qiwen_total_exp_c_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ItemData) */ {
 public:
  inline ItemData() : ItemData(nullptr) {}
  ~ItemData() override;
  explicit PROTOBUF_CONSTEXPR ItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemData(const ItemData& from);
  ItemData(ItemData&& from) noexcept
    : ItemData() {
    *this = ::std::move(from);
  }

  inline ItemData& operator=(const ItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemData& operator=(ItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemData* internal_default_instance() {
    return reinterpret_cast<const ItemData*>(
               &_ItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ItemData& a, ItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemData& from) {
    ItemData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ItemData";
  }
  protected:
  explicit ItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentDataFieldNumber = 10,
    kIdFieldNumber = 1,
    kCfgIdFieldNumber = 2,
    kNumFieldNumber = 3,
    kLockedFieldNumber = 4,
  };
  // .idlepb.EquipmentData equipment_data = 10;
  bool has_equipment_data() const;
  private:
  bool _internal_has_equipment_data() const;
  public:
  void clear_equipment_data();
  const ::idlepb::EquipmentData& equipment_data() const;
  PROTOBUF_NODISCARD ::idlepb::EquipmentData* release_equipment_data();
  ::idlepb::EquipmentData* mutable_equipment_data();
  void set_allocated_equipment_data(::idlepb::EquipmentData* equipment_data);
  private:
  const ::idlepb::EquipmentData& _internal_equipment_data() const;
  ::idlepb::EquipmentData* _internal_mutable_equipment_data();
  public:
  void unsafe_arena_set_allocated_equipment_data(
      ::idlepb::EquipmentData* equipment_data);
  ::idlepb::EquipmentData* unsafe_arena_release_equipment_data();

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int32 cfg_id = 2;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // int32 num = 3;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // bool locked = 4;
  void clear_locked();
  bool locked() const;
  void set_locked(bool value);
  private:
  bool _internal_locked() const;
  void _internal_set_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::EquipmentData* equipment_data_;
    int64_t id_;
    int32_t cfg_id_;
    int32_t num_;
    bool locked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SimpleItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SimpleItemData) */ {
 public:
  inline SimpleItemData() : SimpleItemData(nullptr) {}
  ~SimpleItemData() override;
  explicit PROTOBUF_CONSTEXPR SimpleItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleItemData(const SimpleItemData& from);
  SimpleItemData(SimpleItemData&& from) noexcept
    : SimpleItemData() {
    *this = ::std::move(from);
  }

  inline SimpleItemData& operator=(const SimpleItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleItemData& operator=(SimpleItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleItemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleItemData* internal_default_instance() {
    return reinterpret_cast<const SimpleItemData*>(
               &_SimpleItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SimpleItemData& a, SimpleItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleItemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleItemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleItemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleItemData& from) {
    SimpleItemData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleItemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SimpleItemData";
  }
  protected:
  explicit SimpleItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCfgIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 cfg_id = 1;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // int32 num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SimpleItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t cfg_id_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API TemporaryPackageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.TemporaryPackageItem) */ {
 public:
  inline TemporaryPackageItem() : TemporaryPackageItem(nullptr) {}
  ~TemporaryPackageItem() override;
  explicit PROTOBUF_CONSTEXPR TemporaryPackageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TemporaryPackageItem(const TemporaryPackageItem& from);
  TemporaryPackageItem(TemporaryPackageItem&& from) noexcept
    : TemporaryPackageItem() {
    *this = ::std::move(from);
  }

  inline TemporaryPackageItem& operator=(const TemporaryPackageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemporaryPackageItem& operator=(TemporaryPackageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemporaryPackageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const TemporaryPackageItem* internal_default_instance() {
    return reinterpret_cast<const TemporaryPackageItem*>(
               &_TemporaryPackageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(TemporaryPackageItem& a, TemporaryPackageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(TemporaryPackageItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemporaryPackageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemporaryPackageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TemporaryPackageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TemporaryPackageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TemporaryPackageItem& from) {
    TemporaryPackageItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemporaryPackageItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.TemporaryPackageItem";
  }
  protected:
  explicit TemporaryPackageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCfgIdFieldNumber = 2,
    kNumFieldNumber = 3,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int32 cfg_id = 2;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // int32 num = 3;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.TemporaryPackageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t id_;
    int32_t cfg_id_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ArenaExplorationStatisticalItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ArenaExplorationStatisticalItem) */ {
 public:
  inline ArenaExplorationStatisticalItem() : ArenaExplorationStatisticalItem(nullptr) {}
  ~ArenaExplorationStatisticalItem() override;
  explicit PROTOBUF_CONSTEXPR ArenaExplorationStatisticalItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArenaExplorationStatisticalItem(const ArenaExplorationStatisticalItem& from);
  ArenaExplorationStatisticalItem(ArenaExplorationStatisticalItem&& from) noexcept
    : ArenaExplorationStatisticalItem() {
    *this = ::std::move(from);
  }

  inline ArenaExplorationStatisticalItem& operator=(const ArenaExplorationStatisticalItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArenaExplorationStatisticalItem& operator=(ArenaExplorationStatisticalItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArenaExplorationStatisticalItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArenaExplorationStatisticalItem* internal_default_instance() {
    return reinterpret_cast<const ArenaExplorationStatisticalItem*>(
               &_ArenaExplorationStatisticalItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ArenaExplorationStatisticalItem& a, ArenaExplorationStatisticalItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ArenaExplorationStatisticalItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArenaExplorationStatisticalItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArenaExplorationStatisticalItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArenaExplorationStatisticalItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArenaExplorationStatisticalItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArenaExplorationStatisticalItem& from) {
    ArenaExplorationStatisticalItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArenaExplorationStatisticalItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ArenaExplorationStatisticalItem";
  }
  protected:
  explicit ArenaExplorationStatisticalItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapnameFieldNumber = 2,
    kTimeFieldNumber = 1,
    kKillnumFieldNumber = 3,
    kDeathnumFieldNumber = 4,
    kItemnumFieldNumber = 5,
    kMoneynumFieldNumber = 6,
  };
  // string mapname = 2;
  void clear_mapname();
  const std::string& mapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapname();
  PROTOBUF_NODISCARD std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int32 killnum = 3;
  void clear_killnum();
  int32_t killnum() const;
  void set_killnum(int32_t value);
  private:
  int32_t _internal_killnum() const;
  void _internal_set_killnum(int32_t value);
  public:

  // int32 deathnum = 4;
  void clear_deathnum();
  int32_t deathnum() const;
  void set_deathnum(int32_t value);
  private:
  int32_t _internal_deathnum() const;
  void _internal_set_deathnum(int32_t value);
  public:

  // int64 itemnum = 5;
  void clear_itemnum();
  int64_t itemnum() const;
  void set_itemnum(int64_t value);
  private:
  int64_t _internal_itemnum() const;
  void _internal_set_itemnum(int64_t value);
  public:

  // int64 moneynum = 6;
  void clear_moneynum();
  int64_t moneynum() const;
  void set_moneynum(int64_t value);
  private:
  int64_t _internal_moneynum() const;
  void _internal_set_moneynum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ArenaExplorationStatisticalItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
    int64_t time_;
    int32_t killnum_;
    int32_t deathnum_;
    int64_t itemnum_;
    int64_t moneynum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ShopItemBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ShopItemBase) */ {
 public:
  inline ShopItemBase() : ShopItemBase(nullptr) {}
  ~ShopItemBase() override;
  explicit PROTOBUF_CONSTEXPR ShopItemBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShopItemBase(const ShopItemBase& from);
  ShopItemBase(ShopItemBase&& from) noexcept
    : ShopItemBase() {
    *this = ::std::move(from);
  }

  inline ShopItemBase& operator=(const ShopItemBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShopItemBase& operator=(ShopItemBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShopItemBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShopItemBase* internal_default_instance() {
    return reinterpret_cast<const ShopItemBase*>(
               &_ShopItemBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ShopItemBase& a, ShopItemBase& b) {
    a.Swap(&b);
  }
  inline void Swap(ShopItemBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShopItemBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShopItemBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShopItemBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShopItemBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShopItemBase& from) {
    ShopItemBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopItemBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ShopItemBase";
  }
  protected:
  explicit ShopItemBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kNumFieldNumber = 3,
    kPriceFieldNumber = 4,
    kCountFieldNumber = 5,
    kBoughtCountFieldNumber = 6,
    kCfgIdFieldNumber = 7,
    kMustBuyFieldNumber = 8,
    kDiscountFieldNumber = 9,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 item_id = 2;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 num = 3;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // int32 price = 4;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // int32 count = 5;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // int32 bought_count = 6;
  void clear_bought_count();
  int32_t bought_count() const;
  void set_bought_count(int32_t value);
  private:
  int32_t _internal_bought_count() const;
  void _internal_set_bought_count(int32_t value);
  public:

  // int32 cfg_id = 7;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // bool must_buy = 8;
  void clear_must_buy();
  bool must_buy() const;
  void set_must_buy(bool value);
  private:
  bool _internal_must_buy() const;
  void _internal_set_must_buy(bool value);
  public:

  // float discount = 9;
  void clear_discount();
  float discount() const;
  void set_discount(float value);
  private:
  float _internal_discount() const;
  void _internal_set_discount(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ShopItemBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t item_id_;
    int32_t num_;
    int32_t price_;
    int32_t count_;
    int32_t bought_count_;
    int32_t cfg_id_;
    bool must_buy_;
    float discount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ShopItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ShopItem) */ {
 public:
  inline ShopItem() : ShopItem(nullptr) {}
  ~ShopItem() override;
  explicit PROTOBUF_CONSTEXPR ShopItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShopItem(const ShopItem& from);
  ShopItem(ShopItem&& from) noexcept
    : ShopItem() {
    *this = ::std::move(from);
  }

  inline ShopItem& operator=(const ShopItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShopItem& operator=(ShopItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShopItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShopItem* internal_default_instance() {
    return reinterpret_cast<const ShopItem*>(
               &_ShopItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ShopItem& a, ShopItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ShopItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShopItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShopItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShopItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShopItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShopItem& from) {
    ShopItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ShopItem";
  }
  protected:
  explicit ShopItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDataFieldNumber = 6,
    kIndexFieldNumber = 1,
    kCfgIdFieldNumber = 2,
    kNumFieldNumber = 3,
    kMoneyFieldNumber = 4,
    kIsSoldOutFieldNumber = 5,
  };
  // .idlepb.ItemData item_data = 6;
  bool has_item_data() const;
  private:
  bool _internal_has_item_data() const;
  public:
  void clear_item_data();
  const ::idlepb::ItemData& item_data() const;
  PROTOBUF_NODISCARD ::idlepb::ItemData* release_item_data();
  ::idlepb::ItemData* mutable_item_data();
  void set_allocated_item_data(::idlepb::ItemData* item_data);
  private:
  const ::idlepb::ItemData& _internal_item_data() const;
  ::idlepb::ItemData* _internal_mutable_item_data();
  public:
  void unsafe_arena_set_allocated_item_data(
      ::idlepb::ItemData* item_data);
  ::idlepb::ItemData* unsafe_arena_release_item_data();

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 cfg_id = 2;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // int32 num = 3;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // int32 money = 4;
  void clear_money();
  int32_t money() const;
  void set_money(int32_t value);
  private:
  int32_t _internal_money() const;
  void _internal_set_money(int32_t value);
  public:

  // bool is_sold_out = 5;
  void clear_is_sold_out();
  bool is_sold_out() const;
  void set_is_sold_out(bool value);
  private:
  bool _internal_is_sold_out() const;
  void _internal_set_is_sold_out(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ShopItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::ItemData* item_data_;
    int32_t index_;
    int32_t cfg_id_;
    int32_t num_;
    int32_t money_;
    bool is_sold_out_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API DeluxeShopItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.DeluxeShopItem) */ {
 public:
  inline DeluxeShopItem() : DeluxeShopItem(nullptr) {}
  ~DeluxeShopItem() override;
  explicit PROTOBUF_CONSTEXPR DeluxeShopItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeluxeShopItem(const DeluxeShopItem& from);
  DeluxeShopItem(DeluxeShopItem&& from) noexcept
    : DeluxeShopItem() {
    *this = ::std::move(from);
  }

  inline DeluxeShopItem& operator=(const DeluxeShopItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeluxeShopItem& operator=(DeluxeShopItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeluxeShopItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeluxeShopItem* internal_default_instance() {
    return reinterpret_cast<const DeluxeShopItem*>(
               &_DeluxeShopItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(DeluxeShopItem& a, DeluxeShopItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DeluxeShopItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeluxeShopItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeluxeShopItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeluxeShopItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeluxeShopItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeluxeShopItem& from) {
    DeluxeShopItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeluxeShopItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.DeluxeShopItem";
  }
  protected:
  explicit DeluxeShopItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDataFieldNumber = 8,
    kIndexFieldNumber = 1,
    kCfgIdFieldNumber = 2,
    kNumFieldNumber = 3,
    kSellcountFieldNumber = 4,
    kDiscountFieldNumber = 5,
    kMoneyFieldNumber = 6,
    kIsSoldOutFieldNumber = 7,
    kMustBuyFieldNumber = 9,
  };
  // .idlepb.ItemData item_data = 8;
  bool has_item_data() const;
  private:
  bool _internal_has_item_data() const;
  public:
  void clear_item_data();
  const ::idlepb::ItemData& item_data() const;
  PROTOBUF_NODISCARD ::idlepb::ItemData* release_item_data();
  ::idlepb::ItemData* mutable_item_data();
  void set_allocated_item_data(::idlepb::ItemData* item_data);
  private:
  const ::idlepb::ItemData& _internal_item_data() const;
  ::idlepb::ItemData* _internal_mutable_item_data();
  public:
  void unsafe_arena_set_allocated_item_data(
      ::idlepb::ItemData* item_data);
  ::idlepb::ItemData* unsafe_arena_release_item_data();

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 cfg_id = 2;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // int32 num = 3;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // int32 sellcount = 4;
  void clear_sellcount();
  int32_t sellcount() const;
  void set_sellcount(int32_t value);
  private:
  int32_t _internal_sellcount() const;
  void _internal_set_sellcount(int32_t value);
  public:

  // int32 discount = 5;
  void clear_discount();
  int32_t discount() const;
  void set_discount(int32_t value);
  private:
  int32_t _internal_discount() const;
  void _internal_set_discount(int32_t value);
  public:

  // int32 money = 6;
  void clear_money();
  int32_t money() const;
  void set_money(int32_t value);
  private:
  int32_t _internal_money() const;
  void _internal_set_money(int32_t value);
  public:

  // bool is_sold_out = 7;
  void clear_is_sold_out();
  bool is_sold_out() const;
  void set_is_sold_out(bool value);
  private:
  bool _internal_is_sold_out() const;
  void _internal_set_is_sold_out(bool value);
  public:

  // bool must_buy = 9;
  void clear_must_buy();
  bool must_buy() const;
  void set_must_buy(bool value);
  private:
  bool _internal_must_buy() const;
  void _internal_set_must_buy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.DeluxeShopItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::ItemData* item_data_;
    int32_t index_;
    int32_t cfg_id_;
    int32_t num_;
    int32_t sellcount_;
    int32_t discount_;
    int32_t money_;
    bool is_sold_out_;
    bool must_buy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleVipShopData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleVipShopData) */ {
 public:
  inline RoleVipShopData() : RoleVipShopData(nullptr) {}
  ~RoleVipShopData() override;
  explicit PROTOBUF_CONSTEXPR RoleVipShopData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleVipShopData(const RoleVipShopData& from);
  RoleVipShopData(RoleVipShopData&& from) noexcept
    : RoleVipShopData() {
    *this = ::std::move(from);
  }

  inline RoleVipShopData& operator=(const RoleVipShopData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleVipShopData& operator=(RoleVipShopData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleVipShopData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleVipShopData* internal_default_instance() {
    return reinterpret_cast<const RoleVipShopData*>(
               &_RoleVipShopData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RoleVipShopData& a, RoleVipShopData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleVipShopData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleVipShopData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleVipShopData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleVipShopData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleVipShopData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleVipShopData& from) {
    RoleVipShopData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleVipShopData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleVipShopData";
  }
  protected:
  explicit RoleVipShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopItemsFieldNumber = 1,
    kLastDayRefreshTimeFieldNumber = 2,
    kLastWeekRefreshTimeFieldNumber = 3,
  };
  // repeated .idlepb.ShopItemBase shop_items = 1;
  int shop_items_size() const;
  private:
  int _internal_shop_items_size() const;
  public:
  void clear_shop_items();
  ::idlepb::ShopItemBase* mutable_shop_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItemBase >*
      mutable_shop_items();
  private:
  const ::idlepb::ShopItemBase& _internal_shop_items(int index) const;
  ::idlepb::ShopItemBase* _internal_add_shop_items();
  public:
  const ::idlepb::ShopItemBase& shop_items(int index) const;
  ::idlepb::ShopItemBase* add_shop_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItemBase >&
      shop_items() const;

  // int64 last_day_refresh_time = 2;
  void clear_last_day_refresh_time();
  int64_t last_day_refresh_time() const;
  void set_last_day_refresh_time(int64_t value);
  private:
  int64_t _internal_last_day_refresh_time() const;
  void _internal_set_last_day_refresh_time(int64_t value);
  public:

  // int64 last_week_refresh_time = 3;
  void clear_last_week_refresh_time();
  int64_t last_week_refresh_time() const;
  void set_last_week_refresh_time(int64_t value);
  private:
  int64_t _internal_last_week_refresh_time() const;
  void _internal_set_last_week_refresh_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleVipShopData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItemBase > shop_items_;
    int64_t last_day_refresh_time_;
    int64_t last_week_refresh_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CharacterModelConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CharacterModelConfig) */ {
 public:
  inline CharacterModelConfig() : CharacterModelConfig(nullptr) {}
  ~CharacterModelConfig() override;
  explicit PROTOBUF_CONSTEXPR CharacterModelConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterModelConfig(const CharacterModelConfig& from);
  CharacterModelConfig(CharacterModelConfig&& from) noexcept
    : CharacterModelConfig() {
    *this = ::std::move(from);
  }

  inline CharacterModelConfig& operator=(const CharacterModelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterModelConfig& operator=(CharacterModelConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterModelConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterModelConfig* internal_default_instance() {
    return reinterpret_cast<const CharacterModelConfig*>(
               &_CharacterModelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CharacterModelConfig& a, CharacterModelConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterModelConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterModelConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterModelConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterModelConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterModelConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterModelConfig& from) {
    CharacterModelConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterModelConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CharacterModelConfig";
  }
  protected:
  explicit CharacterModelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelSlotsFieldNumber = 52,
    kSkeletonTypeFieldNumber = 51,
  };
  // repeated int32 model_slots = 52;
  int model_slots_size() const;
  private:
  int _internal_model_slots_size() const;
  public:
  void clear_model_slots();
  private:
  int32_t _internal_model_slots(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_model_slots() const;
  void _internal_add_model_slots(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_model_slots();
  public:
  int32_t model_slots(int index) const;
  void set_model_slots(int index, int32_t value);
  void add_model_slots(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      model_slots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_model_slots();

  // int32 skeleton_type = 51;
  void clear_skeleton_type();
  int32_t skeleton_type() const;
  void set_skeleton_type(int32_t value);
  private:
  int32_t _internal_skeleton_type() const;
  void _internal_set_skeleton_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CharacterModelConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > model_slots_;
    mutable std::atomic<int> _model_slots_cached_byte_size_;
    int32_t skeleton_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleAppearanceShopData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleAppearanceShopData) */ {
 public:
  inline RoleAppearanceShopData() : RoleAppearanceShopData(nullptr) {}
  ~RoleAppearanceShopData() override;
  explicit PROTOBUF_CONSTEXPR RoleAppearanceShopData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleAppearanceShopData(const RoleAppearanceShopData& from);
  RoleAppearanceShopData(RoleAppearanceShopData&& from) noexcept
    : RoleAppearanceShopData() {
    *this = ::std::move(from);
  }

  inline RoleAppearanceShopData& operator=(const RoleAppearanceShopData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleAppearanceShopData& operator=(RoleAppearanceShopData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleAppearanceShopData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleAppearanceShopData* internal_default_instance() {
    return reinterpret_cast<const RoleAppearanceShopData*>(
               &_RoleAppearanceShopData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(RoleAppearanceShopData& a, RoleAppearanceShopData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleAppearanceShopData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleAppearanceShopData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleAppearanceShopData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleAppearanceShopData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleAppearanceShopData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleAppearanceShopData& from) {
    RoleAppearanceShopData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleAppearanceShopData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleAppearanceShopData";
  }
  protected:
  explicit RoleAppearanceShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoods1FieldNumber = 1,
    kLastAutoRefreshTimeFieldNumber = 5,
  };
  // repeated .idlepb.ShopItemBase goods1 = 1;
  int goods1_size() const;
  private:
  int _internal_goods1_size() const;
  public:
  void clear_goods1();
  ::idlepb::ShopItemBase* mutable_goods1(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItemBase >*
      mutable_goods1();
  private:
  const ::idlepb::ShopItemBase& _internal_goods1(int index) const;
  ::idlepb::ShopItemBase* _internal_add_goods1();
  public:
  const ::idlepb::ShopItemBase& goods1(int index) const;
  ::idlepb::ShopItemBase* add_goods1();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItemBase >&
      goods1() const;

  // int64 last_auto_refresh_time = 5;
  void clear_last_auto_refresh_time();
  int64_t last_auto_refresh_time() const;
  void set_last_auto_refresh_time(int64_t value);
  private:
  int64_t _internal_last_auto_refresh_time() const;
  void _internal_set_last_auto_refresh_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleAppearanceShopData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItemBase > goods1_;
    int64_t last_auto_refresh_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AppearanceCollection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AppearanceCollection) */ {
 public:
  inline AppearanceCollection() : AppearanceCollection(nullptr) {}
  ~AppearanceCollection() override;
  explicit PROTOBUF_CONSTEXPR AppearanceCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppearanceCollection(const AppearanceCollection& from);
  AppearanceCollection(AppearanceCollection&& from) noexcept
    : AppearanceCollection() {
    *this = ::std::move(from);
  }

  inline AppearanceCollection& operator=(const AppearanceCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppearanceCollection& operator=(AppearanceCollection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppearanceCollection& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppearanceCollection* internal_default_instance() {
    return reinterpret_cast<const AppearanceCollection*>(
               &_AppearanceCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(AppearanceCollection& a, AppearanceCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(AppearanceCollection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppearanceCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppearanceCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppearanceCollection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppearanceCollection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppearanceCollection& from) {
    AppearanceCollection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppearanceCollection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AppearanceCollection";
  }
  protected:
  explicit AppearanceCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 3,
    kBeginDateFieldNumber = 4,
    kGroupIdFieldNumber = 1,
  };
  // int64 duration = 3;
  void clear_duration();
  int64_t duration() const;
  void set_duration(int64_t value);
  private:
  int64_t _internal_duration() const;
  void _internal_set_duration(int64_t value);
  public:

  // int64 begin_date = 4;
  void clear_begin_date();
  int64_t begin_date() const;
  void set_begin_date(int64_t value);
  private:
  int64_t _internal_begin_date() const;
  void _internal_set_begin_date(int64_t value);
  public:

  // int32 group_id = 1;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AppearanceCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t duration_;
    int64_t begin_date_;
    int32_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleAppearanceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleAppearanceData) */ {
 public:
  inline RoleAppearanceData() : RoleAppearanceData(nullptr) {}
  ~RoleAppearanceData() override;
  explicit PROTOBUF_CONSTEXPR RoleAppearanceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleAppearanceData(const RoleAppearanceData& from);
  RoleAppearanceData(RoleAppearanceData&& from) noexcept
    : RoleAppearanceData() {
    *this = ::std::move(from);
  }

  inline RoleAppearanceData& operator=(const RoleAppearanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleAppearanceData& operator=(RoleAppearanceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleAppearanceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleAppearanceData* internal_default_instance() {
    return reinterpret_cast<const RoleAppearanceData*>(
               &_RoleAppearanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(RoleAppearanceData& a, RoleAppearanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleAppearanceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleAppearanceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleAppearanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleAppearanceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleAppearanceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleAppearanceData& from) {
    RoleAppearanceData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleAppearanceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleAppearanceData";
  }
  protected:
  explicit RoleAppearanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionFieldNumber = 2,
    kCurrentModelFieldNumber = 3,
    kShopDataFieldNumber = 11,
    kLastChangeSkeletonTimeFieldNumber = 1,
  };
  // repeated .idlepb.AppearanceCollection collection = 2;
  int collection_size() const;
  private:
  int _internal_collection_size() const;
  public:
  void clear_collection();
  ::idlepb::AppearanceCollection* mutable_collection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceCollection >*
      mutable_collection();
  private:
  const ::idlepb::AppearanceCollection& _internal_collection(int index) const;
  ::idlepb::AppearanceCollection* _internal_add_collection();
  public:
  const ::idlepb::AppearanceCollection& collection(int index) const;
  ::idlepb::AppearanceCollection* add_collection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceCollection >&
      collection() const;

  // .idlepb.CharacterModelConfig current_model = 3;
  bool has_current_model() const;
  private:
  bool _internal_has_current_model() const;
  public:
  void clear_current_model();
  const ::idlepb::CharacterModelConfig& current_model() const;
  PROTOBUF_NODISCARD ::idlepb::CharacterModelConfig* release_current_model();
  ::idlepb::CharacterModelConfig* mutable_current_model();
  void set_allocated_current_model(::idlepb::CharacterModelConfig* current_model);
  private:
  const ::idlepb::CharacterModelConfig& _internal_current_model() const;
  ::idlepb::CharacterModelConfig* _internal_mutable_current_model();
  public:
  void unsafe_arena_set_allocated_current_model(
      ::idlepb::CharacterModelConfig* current_model);
  ::idlepb::CharacterModelConfig* unsafe_arena_release_current_model();

  // .idlepb.RoleAppearanceShopData shop_data = 11;
  bool has_shop_data() const;
  private:
  bool _internal_has_shop_data() const;
  public:
  void clear_shop_data();
  const ::idlepb::RoleAppearanceShopData& shop_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleAppearanceShopData* release_shop_data();
  ::idlepb::RoleAppearanceShopData* mutable_shop_data();
  void set_allocated_shop_data(::idlepb::RoleAppearanceShopData* shop_data);
  private:
  const ::idlepb::RoleAppearanceShopData& _internal_shop_data() const;
  ::idlepb::RoleAppearanceShopData* _internal_mutable_shop_data();
  public:
  void unsafe_arena_set_allocated_shop_data(
      ::idlepb::RoleAppearanceShopData* shop_data);
  ::idlepb::RoleAppearanceShopData* unsafe_arena_release_shop_data();

  // int64 last_change_skeleton_time = 1;
  void clear_last_change_skeleton_time();
  int64_t last_change_skeleton_time() const;
  void set_last_change_skeleton_time(int64_t value);
  private:
  int64_t _internal_last_change_skeleton_time() const;
  void _internal_set_last_change_skeleton_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleAppearanceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceCollection > collection_;
    ::idlepb::CharacterModelConfig* current_model_;
    ::idlepb::RoleAppearanceShopData* shop_data_;
    int64_t last_change_skeleton_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AlchemyPackageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AlchemyPackageItem) */ {
 public:
  inline AlchemyPackageItem() : AlchemyPackageItem(nullptr) {}
  ~AlchemyPackageItem() override;
  explicit PROTOBUF_CONSTEXPR AlchemyPackageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlchemyPackageItem(const AlchemyPackageItem& from);
  AlchemyPackageItem(AlchemyPackageItem&& from) noexcept
    : AlchemyPackageItem() {
    *this = ::std::move(from);
  }

  inline AlchemyPackageItem& operator=(const AlchemyPackageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlchemyPackageItem& operator=(AlchemyPackageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlchemyPackageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlchemyPackageItem* internal_default_instance() {
    return reinterpret_cast<const AlchemyPackageItem*>(
               &_AlchemyPackageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(AlchemyPackageItem& a, AlchemyPackageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(AlchemyPackageItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlchemyPackageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlchemyPackageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlchemyPackageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlchemyPackageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlchemyPackageItem& from) {
    AlchemyPackageItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlchemyPackageItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AlchemyPackageItem";
  }
  protected:
  explicit AlchemyPackageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCfgIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 cfg_id = 1;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // int32 num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AlchemyPackageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t cfg_id_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AlchemyMakeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AlchemyMakeData) */ {
 public:
  inline AlchemyMakeData() : AlchemyMakeData(nullptr) {}
  ~AlchemyMakeData() override;
  explicit PROTOBUF_CONSTEXPR AlchemyMakeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlchemyMakeData(const AlchemyMakeData& from);
  AlchemyMakeData(AlchemyMakeData&& from) noexcept
    : AlchemyMakeData() {
    *this = ::std::move(from);
  }

  inline AlchemyMakeData& operator=(const AlchemyMakeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlchemyMakeData& operator=(AlchemyMakeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlchemyMakeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlchemyMakeData* internal_default_instance() {
    return reinterpret_cast<const AlchemyMakeData*>(
               &_AlchemyMakeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(AlchemyMakeData& a, AlchemyMakeData& b) {
    a.Swap(&b);
  }
  inline void Swap(AlchemyMakeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlchemyMakeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlchemyMakeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlchemyMakeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlchemyMakeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlchemyMakeData& from) {
    AlchemyMakeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlchemyMakeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AlchemyMakeData";
  }
  protected:
  explicit AlchemyMakeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 8,
    kRecipeIdFieldNumber = 1,
    kRecipeDegreeFieldNumber = 2,
    kMaterialIdFieldNumber = 3,
    kMaterialQualityFieldNumber = 4,
    kTargetNumFieldNumber = 5,
    kCurNumFieldNumber = 6,
    kNextDoneTimeFieldNumber = 7,
    kLastProduceItemCfgIdFieldNumber = 10,
    kLastProduceItemNumFieldNumber = 11,
    kTotalStartTimeFieldNumber = 12,
    kTotalDoneTimeFieldNumber = 13,
    kAddExpFieldNumber = 14,
    kCurSuccessedNumFieldNumber = 15,
    kCurFailedNumFieldNumber = 16,
  };
  // repeated .idlepb.AlchemyPackageItem items = 8;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::idlepb::AlchemyPackageItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AlchemyPackageItem >*
      mutable_items();
  private:
  const ::idlepb::AlchemyPackageItem& _internal_items(int index) const;
  ::idlepb::AlchemyPackageItem* _internal_add_items();
  public:
  const ::idlepb::AlchemyPackageItem& items(int index) const;
  ::idlepb::AlchemyPackageItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AlchemyPackageItem >&
      items() const;

  // int32 recipe_id = 1;
  void clear_recipe_id();
  int32_t recipe_id() const;
  void set_recipe_id(int32_t value);
  private:
  int32_t _internal_recipe_id() const;
  void _internal_set_recipe_id(int32_t value);
  public:

  // int32 recipe_degree = 2;
  void clear_recipe_degree();
  int32_t recipe_degree() const;
  void set_recipe_degree(int32_t value);
  private:
  int32_t _internal_recipe_degree() const;
  void _internal_set_recipe_degree(int32_t value);
  public:

  // int32 material_id = 3;
  void clear_material_id();
  int32_t material_id() const;
  void set_material_id(int32_t value);
  private:
  int32_t _internal_material_id() const;
  void _internal_set_material_id(int32_t value);
  public:

  // .idlepb.ItemQuality material_quality = 4;
  void clear_material_quality();
  ::idlepb::ItemQuality material_quality() const;
  void set_material_quality(::idlepb::ItemQuality value);
  private:
  ::idlepb::ItemQuality _internal_material_quality() const;
  void _internal_set_material_quality(::idlepb::ItemQuality value);
  public:

  // int32 target_num = 5;
  void clear_target_num();
  int32_t target_num() const;
  void set_target_num(int32_t value);
  private:
  int32_t _internal_target_num() const;
  void _internal_set_target_num(int32_t value);
  public:

  // int32 cur_num = 6;
  void clear_cur_num();
  int32_t cur_num() const;
  void set_cur_num(int32_t value);
  private:
  int32_t _internal_cur_num() const;
  void _internal_set_cur_num(int32_t value);
  public:

  // int64 next_done_time = 7;
  void clear_next_done_time();
  int64_t next_done_time() const;
  void set_next_done_time(int64_t value);
  private:
  int64_t _internal_next_done_time() const;
  void _internal_set_next_done_time(int64_t value);
  public:

  // int32 last_produce_item_cfg_id = 10;
  void clear_last_produce_item_cfg_id();
  int32_t last_produce_item_cfg_id() const;
  void set_last_produce_item_cfg_id(int32_t value);
  private:
  int32_t _internal_last_produce_item_cfg_id() const;
  void _internal_set_last_produce_item_cfg_id(int32_t value);
  public:

  // int32 last_produce_item_num = 11;
  void clear_last_produce_item_num();
  int32_t last_produce_item_num() const;
  void set_last_produce_item_num(int32_t value);
  private:
  int32_t _internal_last_produce_item_num() const;
  void _internal_set_last_produce_item_num(int32_t value);
  public:

  // int64 total_start_time = 12;
  void clear_total_start_time();
  int64_t total_start_time() const;
  void set_total_start_time(int64_t value);
  private:
  int64_t _internal_total_start_time() const;
  void _internal_set_total_start_time(int64_t value);
  public:

  // int64 total_done_time = 13;
  void clear_total_done_time();
  int64_t total_done_time() const;
  void set_total_done_time(int64_t value);
  private:
  int64_t _internal_total_done_time() const;
  void _internal_set_total_done_time(int64_t value);
  public:

  // int32 add_exp = 14;
  void clear_add_exp();
  int32_t add_exp() const;
  void set_add_exp(int32_t value);
  private:
  int32_t _internal_add_exp() const;
  void _internal_set_add_exp(int32_t value);
  public:

  // int32 cur_successed_num = 15;
  void clear_cur_successed_num();
  int32_t cur_successed_num() const;
  void set_cur_successed_num(int32_t value);
  private:
  int32_t _internal_cur_successed_num() const;
  void _internal_set_cur_successed_num(int32_t value);
  public:

  // int32 cur_failed_num = 16;
  void clear_cur_failed_num();
  int32_t cur_failed_num() const;
  void set_cur_failed_num(int32_t value);
  private:
  int32_t _internal_cur_failed_num() const;
  void _internal_set_cur_failed_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AlchemyMakeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AlchemyPackageItem > items_;
    int32_t recipe_id_;
    int32_t recipe_degree_;
    int32_t material_id_;
    int material_quality_;
    int32_t target_num_;
    int32_t cur_num_;
    int64_t next_done_time_;
    int32_t last_produce_item_cfg_id_;
    int32_t last_produce_item_num_;
    int64_t total_start_time_;
    int64_t total_done_time_;
    int32_t add_exp_;
    int32_t cur_successed_num_;
    int32_t cur_failed_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AlchemyRecipeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AlchemyRecipeData) */ {
 public:
  inline AlchemyRecipeData() : AlchemyRecipeData(nullptr) {}
  ~AlchemyRecipeData() override;
  explicit PROTOBUF_CONSTEXPR AlchemyRecipeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlchemyRecipeData(const AlchemyRecipeData& from);
  AlchemyRecipeData(AlchemyRecipeData&& from) noexcept
    : AlchemyRecipeData() {
    *this = ::std::move(from);
  }

  inline AlchemyRecipeData& operator=(const AlchemyRecipeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlchemyRecipeData& operator=(AlchemyRecipeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlchemyRecipeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlchemyRecipeData* internal_default_instance() {
    return reinterpret_cast<const AlchemyRecipeData*>(
               &_AlchemyRecipeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(AlchemyRecipeData& a, AlchemyRecipeData& b) {
    a.Swap(&b);
  }
  inline void Swap(AlchemyRecipeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlchemyRecipeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlchemyRecipeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlchemyRecipeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlchemyRecipeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlchemyRecipeData& from) {
    AlchemyRecipeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlchemyRecipeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AlchemyRecipeData";
  }
  protected:
  explicit AlchemyRecipeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipeIdFieldNumber = 1,
    kBigChanceFieldNumber = 2,
    kSmallChanceFieldNumber = 3,
  };
  // int32 recipe_id = 1;
  void clear_recipe_id();
  int32_t recipe_id() const;
  void set_recipe_id(int32_t value);
  private:
  int32_t _internal_recipe_id() const;
  void _internal_set_recipe_id(int32_t value);
  public:

  // int32 big_chance = 2;
  void clear_big_chance();
  int32_t big_chance() const;
  void set_big_chance(int32_t value);
  private:
  int32_t _internal_big_chance() const;
  void _internal_set_big_chance(int32_t value);
  public:

  // int32 small_chance = 3;
  void clear_small_chance();
  int32_t small_chance() const;
  void set_small_chance(int32_t value);
  private:
  int32_t _internal_small_chance() const;
  void _internal_set_small_chance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AlchemyRecipeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t recipe_id_;
    int32_t big_chance_;
    int32_t small_chance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleAlchemyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleAlchemyData) */ {
 public:
  inline RoleAlchemyData() : RoleAlchemyData(nullptr) {}
  ~RoleAlchemyData() override;
  explicit PROTOBUF_CONSTEXPR RoleAlchemyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleAlchemyData(const RoleAlchemyData& from);
  RoleAlchemyData(RoleAlchemyData&& from) noexcept
    : RoleAlchemyData() {
    *this = ::std::move(from);
  }

  inline RoleAlchemyData& operator=(const RoleAlchemyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleAlchemyData& operator=(RoleAlchemyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleAlchemyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleAlchemyData* internal_default_instance() {
    return reinterpret_cast<const RoleAlchemyData*>(
               &_RoleAlchemyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(RoleAlchemyData& a, RoleAlchemyData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleAlchemyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleAlchemyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleAlchemyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleAlchemyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleAlchemyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleAlchemyData& from) {
    RoleAlchemyData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleAlchemyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleAlchemyData";
  }
  protected:
  explicit RoleAlchemyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProduceQualityStatsFieldNumber = 8,
    kRecipesFieldNumber = 9,
    kCurMakeDataFieldNumber = 4,
    kRankFieldNumber = 1,
    kExpFieldNumber = 2,
    kTotalRefineNumFieldNumber = 7,
  };
  // repeated int32 produce_quality_stats = 8;
  int produce_quality_stats_size() const;
  private:
  int _internal_produce_quality_stats_size() const;
  public:
  void clear_produce_quality_stats();
  private:
  int32_t _internal_produce_quality_stats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_produce_quality_stats() const;
  void _internal_add_produce_quality_stats(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_produce_quality_stats();
  public:
  int32_t produce_quality_stats(int index) const;
  void set_produce_quality_stats(int index, int32_t value);
  void add_produce_quality_stats(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      produce_quality_stats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_produce_quality_stats();

  // repeated .idlepb.AlchemyRecipeData recipes = 9;
  int recipes_size() const;
  private:
  int _internal_recipes_size() const;
  public:
  void clear_recipes();
  ::idlepb::AlchemyRecipeData* mutable_recipes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AlchemyRecipeData >*
      mutable_recipes();
  private:
  const ::idlepb::AlchemyRecipeData& _internal_recipes(int index) const;
  ::idlepb::AlchemyRecipeData* _internal_add_recipes();
  public:
  const ::idlepb::AlchemyRecipeData& recipes(int index) const;
  ::idlepb::AlchemyRecipeData* add_recipes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AlchemyRecipeData >&
      recipes() const;

  // .idlepb.AlchemyMakeData cur_make_data = 4;
  bool has_cur_make_data() const;
  private:
  bool _internal_has_cur_make_data() const;
  public:
  void clear_cur_make_data();
  const ::idlepb::AlchemyMakeData& cur_make_data() const;
  PROTOBUF_NODISCARD ::idlepb::AlchemyMakeData* release_cur_make_data();
  ::idlepb::AlchemyMakeData* mutable_cur_make_data();
  void set_allocated_cur_make_data(::idlepb::AlchemyMakeData* cur_make_data);
  private:
  const ::idlepb::AlchemyMakeData& _internal_cur_make_data() const;
  ::idlepb::AlchemyMakeData* _internal_mutable_cur_make_data();
  public:
  void unsafe_arena_set_allocated_cur_make_data(
      ::idlepb::AlchemyMakeData* cur_make_data);
  ::idlepb::AlchemyMakeData* unsafe_arena_release_cur_make_data();

  // int32 rank = 1;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // int32 exp = 2;
  void clear_exp();
  int32_t exp() const;
  void set_exp(int32_t value);
  private:
  int32_t _internal_exp() const;
  void _internal_set_exp(int32_t value);
  public:

  // int32 total_refine_num = 7;
  void clear_total_refine_num();
  int32_t total_refine_num() const;
  void set_total_refine_num(int32_t value);
  private:
  int32_t _internal_total_refine_num() const;
  void _internal_set_total_refine_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleAlchemyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > produce_quality_stats_;
    mutable std::atomic<int> _produce_quality_stats_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AlchemyRecipeData > recipes_;
    ::idlepb::AlchemyMakeData* cur_make_data_;
    int32_t rank_;
    int32_t exp_;
    int32_t total_refine_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ForgePackageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ForgePackageItem) */ {
 public:
  inline ForgePackageItem() : ForgePackageItem(nullptr) {}
  ~ForgePackageItem() override;
  explicit PROTOBUF_CONSTEXPR ForgePackageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForgePackageItem(const ForgePackageItem& from);
  ForgePackageItem(ForgePackageItem&& from) noexcept
    : ForgePackageItem() {
    *this = ::std::move(from);
  }

  inline ForgePackageItem& operator=(const ForgePackageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForgePackageItem& operator=(ForgePackageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForgePackageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForgePackageItem* internal_default_instance() {
    return reinterpret_cast<const ForgePackageItem*>(
               &_ForgePackageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ForgePackageItem& a, ForgePackageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ForgePackageItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForgePackageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForgePackageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForgePackageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForgePackageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForgePackageItem& from) {
    ForgePackageItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForgePackageItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ForgePackageItem";
  }
  protected:
  explicit ForgePackageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCfgIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 cfg_id = 1;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // int32 num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ForgePackageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t cfg_id_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ForgeMakeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ForgeMakeData) */ {
 public:
  inline ForgeMakeData() : ForgeMakeData(nullptr) {}
  ~ForgeMakeData() override;
  explicit PROTOBUF_CONSTEXPR ForgeMakeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForgeMakeData(const ForgeMakeData& from);
  ForgeMakeData(ForgeMakeData&& from) noexcept
    : ForgeMakeData() {
    *this = ::std::move(from);
  }

  inline ForgeMakeData& operator=(const ForgeMakeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForgeMakeData& operator=(ForgeMakeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForgeMakeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForgeMakeData* internal_default_instance() {
    return reinterpret_cast<const ForgeMakeData*>(
               &_ForgeMakeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ForgeMakeData& a, ForgeMakeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ForgeMakeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForgeMakeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForgeMakeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForgeMakeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForgeMakeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForgeMakeData& from) {
    ForgeMakeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForgeMakeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ForgeMakeData";
  }
  protected:
  explicit ForgeMakeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 8,
    kRecipeIdFieldNumber = 1,
    kRecipeDegreeFieldNumber = 2,
    kMaterialIdFieldNumber = 3,
    kMaterialQualityFieldNumber = 4,
    kTargetNumFieldNumber = 5,
    kCurNumFieldNumber = 6,
    kNextDoneTimeFieldNumber = 7,
    kLastProduceItemCfgIdFieldNumber = 10,
    kLastProduceItemNumFieldNumber = 11,
    kTotalStartTimeFieldNumber = 12,
    kTotalDoneTimeFieldNumber = 13,
    kAddExpFieldNumber = 14,
    kCurSuccessedNumFieldNumber = 15,
    kCurFailedNumFieldNumber = 16,
    kExtMaterialIdFieldNumber = 17,
    kAutoSellPoorFieldNumber = 18,
    kAutoSellMiddleFieldNumber = 19,
  };
  // repeated .idlepb.ForgePackageItem items = 8;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::idlepb::ForgePackageItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ForgePackageItem >*
      mutable_items();
  private:
  const ::idlepb::ForgePackageItem& _internal_items(int index) const;
  ::idlepb::ForgePackageItem* _internal_add_items();
  public:
  const ::idlepb::ForgePackageItem& items(int index) const;
  ::idlepb::ForgePackageItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ForgePackageItem >&
      items() const;

  // int32 recipe_id = 1;
  void clear_recipe_id();
  int32_t recipe_id() const;
  void set_recipe_id(int32_t value);
  private:
  int32_t _internal_recipe_id() const;
  void _internal_set_recipe_id(int32_t value);
  public:

  // int32 recipe_degree = 2;
  void clear_recipe_degree();
  int32_t recipe_degree() const;
  void set_recipe_degree(int32_t value);
  private:
  int32_t _internal_recipe_degree() const;
  void _internal_set_recipe_degree(int32_t value);
  public:

  // int32 material_id = 3;
  void clear_material_id();
  int32_t material_id() const;
  void set_material_id(int32_t value);
  private:
  int32_t _internal_material_id() const;
  void _internal_set_material_id(int32_t value);
  public:

  // .idlepb.ItemQuality material_quality = 4;
  void clear_material_quality();
  ::idlepb::ItemQuality material_quality() const;
  void set_material_quality(::idlepb::ItemQuality value);
  private:
  ::idlepb::ItemQuality _internal_material_quality() const;
  void _internal_set_material_quality(::idlepb::ItemQuality value);
  public:

  // int32 target_num = 5;
  void clear_target_num();
  int32_t target_num() const;
  void set_target_num(int32_t value);
  private:
  int32_t _internal_target_num() const;
  void _internal_set_target_num(int32_t value);
  public:

  // int32 cur_num = 6;
  void clear_cur_num();
  int32_t cur_num() const;
  void set_cur_num(int32_t value);
  private:
  int32_t _internal_cur_num() const;
  void _internal_set_cur_num(int32_t value);
  public:

  // int64 next_done_time = 7;
  void clear_next_done_time();
  int64_t next_done_time() const;
  void set_next_done_time(int64_t value);
  private:
  int64_t _internal_next_done_time() const;
  void _internal_set_next_done_time(int64_t value);
  public:

  // int32 last_produce_item_cfg_id = 10;
  void clear_last_produce_item_cfg_id();
  int32_t last_produce_item_cfg_id() const;
  void set_last_produce_item_cfg_id(int32_t value);
  private:
  int32_t _internal_last_produce_item_cfg_id() const;
  void _internal_set_last_produce_item_cfg_id(int32_t value);
  public:

  // int32 last_produce_item_num = 11;
  void clear_last_produce_item_num();
  int32_t last_produce_item_num() const;
  void set_last_produce_item_num(int32_t value);
  private:
  int32_t _internal_last_produce_item_num() const;
  void _internal_set_last_produce_item_num(int32_t value);
  public:

  // int64 total_start_time = 12;
  void clear_total_start_time();
  int64_t total_start_time() const;
  void set_total_start_time(int64_t value);
  private:
  int64_t _internal_total_start_time() const;
  void _internal_set_total_start_time(int64_t value);
  public:

  // int64 total_done_time = 13;
  void clear_total_done_time();
  int64_t total_done_time() const;
  void set_total_done_time(int64_t value);
  private:
  int64_t _internal_total_done_time() const;
  void _internal_set_total_done_time(int64_t value);
  public:

  // int32 add_exp = 14;
  void clear_add_exp();
  int32_t add_exp() const;
  void set_add_exp(int32_t value);
  private:
  int32_t _internal_add_exp() const;
  void _internal_set_add_exp(int32_t value);
  public:

  // int32 cur_successed_num = 15;
  void clear_cur_successed_num();
  int32_t cur_successed_num() const;
  void set_cur_successed_num(int32_t value);
  private:
  int32_t _internal_cur_successed_num() const;
  void _internal_set_cur_successed_num(int32_t value);
  public:

  // int32 cur_failed_num = 16;
  void clear_cur_failed_num();
  int32_t cur_failed_num() const;
  void set_cur_failed_num(int32_t value);
  private:
  int32_t _internal_cur_failed_num() const;
  void _internal_set_cur_failed_num(int32_t value);
  public:

  // int32 ext_material_id = 17;
  void clear_ext_material_id();
  int32_t ext_material_id() const;
  void set_ext_material_id(int32_t value);
  private:
  int32_t _internal_ext_material_id() const;
  void _internal_set_ext_material_id(int32_t value);
  public:

  // bool auto_sell_poor = 18;
  void clear_auto_sell_poor();
  bool auto_sell_poor() const;
  void set_auto_sell_poor(bool value);
  private:
  bool _internal_auto_sell_poor() const;
  void _internal_set_auto_sell_poor(bool value);
  public:

  // bool auto_sell_middle = 19;
  void clear_auto_sell_middle();
  bool auto_sell_middle() const;
  void set_auto_sell_middle(bool value);
  private:
  bool _internal_auto_sell_middle() const;
  void _internal_set_auto_sell_middle(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ForgeMakeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ForgePackageItem > items_;
    int32_t recipe_id_;
    int32_t recipe_degree_;
    int32_t material_id_;
    int material_quality_;
    int32_t target_num_;
    int32_t cur_num_;
    int64_t next_done_time_;
    int32_t last_produce_item_cfg_id_;
    int32_t last_produce_item_num_;
    int64_t total_start_time_;
    int64_t total_done_time_;
    int32_t add_exp_;
    int32_t cur_successed_num_;
    int32_t cur_failed_num_;
    int32_t ext_material_id_;
    bool auto_sell_poor_;
    bool auto_sell_middle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ForgeRecipeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ForgeRecipeData) */ {
 public:
  inline ForgeRecipeData() : ForgeRecipeData(nullptr) {}
  ~ForgeRecipeData() override;
  explicit PROTOBUF_CONSTEXPR ForgeRecipeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForgeRecipeData(const ForgeRecipeData& from);
  ForgeRecipeData(ForgeRecipeData&& from) noexcept
    : ForgeRecipeData() {
    *this = ::std::move(from);
  }

  inline ForgeRecipeData& operator=(const ForgeRecipeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForgeRecipeData& operator=(ForgeRecipeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForgeRecipeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForgeRecipeData* internal_default_instance() {
    return reinterpret_cast<const ForgeRecipeData*>(
               &_ForgeRecipeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ForgeRecipeData& a, ForgeRecipeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ForgeRecipeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForgeRecipeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForgeRecipeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForgeRecipeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForgeRecipeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForgeRecipeData& from) {
    ForgeRecipeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForgeRecipeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ForgeRecipeData";
  }
  protected:
  explicit ForgeRecipeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipeIdFieldNumber = 1,
    kBigChanceFieldNumber = 2,
    kSmallChanceFieldNumber = 3,
  };
  // int32 recipe_id = 1;
  void clear_recipe_id();
  int32_t recipe_id() const;
  void set_recipe_id(int32_t value);
  private:
  int32_t _internal_recipe_id() const;
  void _internal_set_recipe_id(int32_t value);
  public:

  // int32 big_chance = 2;
  void clear_big_chance();
  int32_t big_chance() const;
  void set_big_chance(int32_t value);
  private:
  int32_t _internal_big_chance() const;
  void _internal_set_big_chance(int32_t value);
  public:

  // int32 small_chance = 3;
  void clear_small_chance();
  int32_t small_chance() const;
  void set_small_chance(int32_t value);
  private:
  int32_t _internal_small_chance() const;
  void _internal_set_small_chance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ForgeRecipeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t recipe_id_;
    int32_t big_chance_;
    int32_t small_chance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API LostEquipmentData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.LostEquipmentData) */ {
 public:
  inline LostEquipmentData() : LostEquipmentData(nullptr) {}
  ~LostEquipmentData() override;
  explicit PROTOBUF_CONSTEXPR LostEquipmentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LostEquipmentData(const LostEquipmentData& from);
  LostEquipmentData(LostEquipmentData&& from) noexcept
    : LostEquipmentData() {
    *this = ::std::move(from);
  }

  inline LostEquipmentData& operator=(const LostEquipmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LostEquipmentData& operator=(LostEquipmentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LostEquipmentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LostEquipmentData* internal_default_instance() {
    return reinterpret_cast<const LostEquipmentData*>(
               &_LostEquipmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(LostEquipmentData& a, LostEquipmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(LostEquipmentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LostEquipmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LostEquipmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LostEquipmentData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LostEquipmentData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LostEquipmentData& from) {
    LostEquipmentData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LostEquipmentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.LostEquipmentData";
  }
  protected:
  explicit LostEquipmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDataFieldNumber = 4,
    kUidFieldNumber = 1,
    kTagFieldNumber = 2,
    kLostDateFieldNumber = 3,
  };
  // .idlepb.ItemData item_data = 4;
  bool has_item_data() const;
  private:
  bool _internal_has_item_data() const;
  public:
  void clear_item_data();
  const ::idlepb::ItemData& item_data() const;
  PROTOBUF_NODISCARD ::idlepb::ItemData* release_item_data();
  ::idlepb::ItemData* mutable_item_data();
  void set_allocated_item_data(::idlepb::ItemData* item_data);
  private:
  const ::idlepb::ItemData& _internal_item_data() const;
  ::idlepb::ItemData* _internal_mutable_item_data();
  public:
  void unsafe_arena_set_allocated_item_data(
      ::idlepb::ItemData* item_data);
  ::idlepb::ItemData* unsafe_arena_release_item_data();

  // int32 uid = 1;
  void clear_uid();
  int32_t uid() const;
  void set_uid(int32_t value);
  private:
  int32_t _internal_uid() const;
  void _internal_set_uid(int32_t value);
  public:

  // int32 tag = 2;
  void clear_tag();
  int32_t tag() const;
  void set_tag(int32_t value);
  private:
  int32_t _internal_tag() const;
  void _internal_set_tag(int32_t value);
  public:

  // int64 lost_date = 3;
  void clear_lost_date();
  int64_t lost_date() const;
  void set_lost_date(int64_t value);
  private:
  int64_t _internal_lost_date() const;
  void _internal_set_lost_date(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.LostEquipmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::ItemData* item_data_;
    int32_t uid_;
    int32_t tag_;
    int64_t lost_date_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleForgeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleForgeData) */ {
 public:
  inline RoleForgeData() : RoleForgeData(nullptr) {}
  ~RoleForgeData() override;
  explicit PROTOBUF_CONSTEXPR RoleForgeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleForgeData(const RoleForgeData& from);
  RoleForgeData(RoleForgeData&& from) noexcept
    : RoleForgeData() {
    *this = ::std::move(from);
  }

  inline RoleForgeData& operator=(const RoleForgeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleForgeData& operator=(RoleForgeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleForgeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleForgeData* internal_default_instance() {
    return reinterpret_cast<const RoleForgeData*>(
               &_RoleForgeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(RoleForgeData& a, RoleForgeData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleForgeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleForgeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleForgeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleForgeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleForgeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleForgeData& from) {
    RoleForgeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleForgeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleForgeData";
  }
  protected:
  explicit RoleForgeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProduceEquipQualityStatsFieldNumber = 8,
    kProduceSkillequipQualityStatsFieldNumber = 9,
    kRecipesFieldNumber = 10,
    kLostEquipmentDataFieldNumber = 21,
    kCurMakeDataFieldNumber = 4,
    kRankFieldNumber = 1,
    kExpFieldNumber = 2,
    kTotalRefineNumFieldNumber = 7,
    kDestroyNumFieldNumber = 22,
  };
  // repeated int32 produce_equip_quality_stats = 8;
  int produce_equip_quality_stats_size() const;
  private:
  int _internal_produce_equip_quality_stats_size() const;
  public:
  void clear_produce_equip_quality_stats();
  private:
  int32_t _internal_produce_equip_quality_stats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_produce_equip_quality_stats() const;
  void _internal_add_produce_equip_quality_stats(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_produce_equip_quality_stats();
  public:
  int32_t produce_equip_quality_stats(int index) const;
  void set_produce_equip_quality_stats(int index, int32_t value);
  void add_produce_equip_quality_stats(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      produce_equip_quality_stats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_produce_equip_quality_stats();

  // repeated int32 produce_skillequip_quality_stats = 9;
  int produce_skillequip_quality_stats_size() const;
  private:
  int _internal_produce_skillequip_quality_stats_size() const;
  public:
  void clear_produce_skillequip_quality_stats();
  private:
  int32_t _internal_produce_skillequip_quality_stats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_produce_skillequip_quality_stats() const;
  void _internal_add_produce_skillequip_quality_stats(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_produce_skillequip_quality_stats();
  public:
  int32_t produce_skillequip_quality_stats(int index) const;
  void set_produce_skillequip_quality_stats(int index, int32_t value);
  void add_produce_skillequip_quality_stats(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      produce_skillequip_quality_stats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_produce_skillequip_quality_stats();

  // repeated .idlepb.ForgeRecipeData recipes = 10;
  int recipes_size() const;
  private:
  int _internal_recipes_size() const;
  public:
  void clear_recipes();
  ::idlepb::ForgeRecipeData* mutable_recipes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ForgeRecipeData >*
      mutable_recipes();
  private:
  const ::idlepb::ForgeRecipeData& _internal_recipes(int index) const;
  ::idlepb::ForgeRecipeData* _internal_add_recipes();
  public:
  const ::idlepb::ForgeRecipeData& recipes(int index) const;
  ::idlepb::ForgeRecipeData* add_recipes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ForgeRecipeData >&
      recipes() const;

  // repeated .idlepb.LostEquipmentData lost_equipment_data = 21;
  int lost_equipment_data_size() const;
  private:
  int _internal_lost_equipment_data_size() const;
  public:
  void clear_lost_equipment_data();
  ::idlepb::LostEquipmentData* mutable_lost_equipment_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LostEquipmentData >*
      mutable_lost_equipment_data();
  private:
  const ::idlepb::LostEquipmentData& _internal_lost_equipment_data(int index) const;
  ::idlepb::LostEquipmentData* _internal_add_lost_equipment_data();
  public:
  const ::idlepb::LostEquipmentData& lost_equipment_data(int index) const;
  ::idlepb::LostEquipmentData* add_lost_equipment_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LostEquipmentData >&
      lost_equipment_data() const;

  // .idlepb.ForgeMakeData cur_make_data = 4;
  bool has_cur_make_data() const;
  private:
  bool _internal_has_cur_make_data() const;
  public:
  void clear_cur_make_data();
  const ::idlepb::ForgeMakeData& cur_make_data() const;
  PROTOBUF_NODISCARD ::idlepb::ForgeMakeData* release_cur_make_data();
  ::idlepb::ForgeMakeData* mutable_cur_make_data();
  void set_allocated_cur_make_data(::idlepb::ForgeMakeData* cur_make_data);
  private:
  const ::idlepb::ForgeMakeData& _internal_cur_make_data() const;
  ::idlepb::ForgeMakeData* _internal_mutable_cur_make_data();
  public:
  void unsafe_arena_set_allocated_cur_make_data(
      ::idlepb::ForgeMakeData* cur_make_data);
  ::idlepb::ForgeMakeData* unsafe_arena_release_cur_make_data();

  // int32 rank = 1;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // int32 exp = 2;
  void clear_exp();
  int32_t exp() const;
  void set_exp(int32_t value);
  private:
  int32_t _internal_exp() const;
  void _internal_set_exp(int32_t value);
  public:

  // int32 total_refine_num = 7;
  void clear_total_refine_num();
  int32_t total_refine_num() const;
  void set_total_refine_num(int32_t value);
  private:
  int32_t _internal_total_refine_num() const;
  void _internal_set_total_refine_num(int32_t value);
  public:

  // int32 destroy_num = 22;
  void clear_destroy_num();
  int32_t destroy_num() const;
  void set_destroy_num(int32_t value);
  private:
  int32_t _internal_destroy_num() const;
  void _internal_set_destroy_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleForgeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > produce_equip_quality_stats_;
    mutable std::atomic<int> _produce_equip_quality_stats_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > produce_skillequip_quality_stats_;
    mutable std::atomic<int> _produce_skillequip_quality_stats_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ForgeRecipeData > recipes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LostEquipmentData > lost_equipment_data_;
    ::idlepb::ForgeMakeData* cur_make_data_;
    int32_t rank_;
    int32_t exp_;
    int32_t total_refine_num_;
    int32_t destroy_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PillPropertyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PillPropertyData) */ {
 public:
  inline PillPropertyData() : PillPropertyData(nullptr) {}
  ~PillPropertyData() override;
  explicit PROTOBUF_CONSTEXPR PillPropertyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PillPropertyData(const PillPropertyData& from);
  PillPropertyData(PillPropertyData&& from) noexcept
    : PillPropertyData() {
    *this = ::std::move(from);
  }

  inline PillPropertyData& operator=(const PillPropertyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PillPropertyData& operator=(PillPropertyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PillPropertyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PillPropertyData* internal_default_instance() {
    return reinterpret_cast<const PillPropertyData*>(
               &_PillPropertyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(PillPropertyData& a, PillPropertyData& b) {
    a.Swap(&b);
  }
  inline void Swap(PillPropertyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PillPropertyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PillPropertyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PillPropertyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PillPropertyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PillPropertyData& from) {
    PillPropertyData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PillPropertyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PillPropertyData";
  }
  protected:
  explicit PillPropertyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kConsumedNumFieldNumber = 3,
  };
  // int32 item_id = 1;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 consumed_num = 3;
  void clear_consumed_num();
  int32_t consumed_num() const;
  void set_consumed_num(int32_t value);
  private:
  int32_t _internal_consumed_num() const;
  void _internal_set_consumed_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PillPropertyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t item_id_;
    int32_t consumed_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API GongFaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.GongFaData) */ {
 public:
  inline GongFaData() : GongFaData(nullptr) {}
  ~GongFaData() override;
  explicit PROTOBUF_CONSTEXPR GongFaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GongFaData(const GongFaData& from);
  GongFaData(GongFaData&& from) noexcept
    : GongFaData() {
    *this = ::std::move(from);
  }

  inline GongFaData& operator=(const GongFaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GongFaData& operator=(GongFaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GongFaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GongFaData* internal_default_instance() {
    return reinterpret_cast<const GongFaData*>(
               &_GongFaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GongFaData& a, GongFaData& b) {
    a.Swap(&b);
  }
  inline void Swap(GongFaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GongFaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GongFaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GongFaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GongFaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GongFaData& from) {
    GongFaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GongFaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.GongFaData";
  }
  protected:
  explicit GongFaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCfgIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kBeginTimeFieldNumber = 3,
    kStateFieldNumber = 4,
    kCombatPowerFieldNumber = 6,
  };
  // int32 cfg_id = 1;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // int32 level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int64 begin_time = 3;
  void clear_begin_time();
  int64_t begin_time() const;
  void set_begin_time(int64_t value);
  private:
  int64_t _internal_begin_time() const;
  void _internal_set_begin_time(int64_t value);
  public:

  // .idlepb.GongFaState state = 4;
  void clear_state();
  ::idlepb::GongFaState state() const;
  void set_state(::idlepb::GongFaState value);
  private:
  ::idlepb::GongFaState _internal_state() const;
  void _internal_set_state(::idlepb::GongFaState value);
  public:

  // float combat_power = 6;
  void clear_combat_power();
  float combat_power() const;
  void set_combat_power(float value);
  private:
  float _internal_combat_power() const;
  void _internal_set_combat_power(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.GongFaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t cfg_id_;
    int32_t level_;
    int64_t begin_time_;
    int state_;
    float combat_power_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleGongFaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleGongFaData) */ {
 public:
  inline RoleGongFaData() : RoleGongFaData(nullptr) {}
  ~RoleGongFaData() override;
  explicit PROTOBUF_CONSTEXPR RoleGongFaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleGongFaData(const RoleGongFaData& from);
  RoleGongFaData(RoleGongFaData&& from) noexcept
    : RoleGongFaData() {
    *this = ::std::move(from);
  }

  inline RoleGongFaData& operator=(const RoleGongFaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleGongFaData& operator=(RoleGongFaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleGongFaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleGongFaData* internal_default_instance() {
    return reinterpret_cast<const RoleGongFaData*>(
               &_RoleGongFaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RoleGongFaData& a, RoleGongFaData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleGongFaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleGongFaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleGongFaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleGongFaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleGongFaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleGongFaData& from) {
    RoleGongFaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleGongFaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleGongFaData";
  }
  protected:
  explicit RoleGongFaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kActiveMaxEffectFieldNumber = 2,
    kGongfaPointUseNumFieldNumber = 3,
  };
  // repeated .idlepb.GongFaData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::idlepb::GongFaData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GongFaData >*
      mutable_data();
  private:
  const ::idlepb::GongFaData& _internal_data(int index) const;
  ::idlepb::GongFaData* _internal_add_data();
  public:
  const ::idlepb::GongFaData& data(int index) const;
  ::idlepb::GongFaData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GongFaData >&
      data() const;

  // repeated int32 active_max_effect = 2;
  int active_max_effect_size() const;
  private:
  int _internal_active_max_effect_size() const;
  public:
  void clear_active_max_effect();
  private:
  int32_t _internal_active_max_effect(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_active_max_effect() const;
  void _internal_add_active_max_effect(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_active_max_effect();
  public:
  int32_t active_max_effect(int index) const;
  void set_active_max_effect(int index, int32_t value);
  void add_active_max_effect(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      active_max_effect() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_active_max_effect();

  // int32 gongfa_point_use_num = 3;
  void clear_gongfa_point_use_num();
  int32_t gongfa_point_use_num() const;
  void set_gongfa_point_use_num(int32_t value);
  private:
  int32_t _internal_gongfa_point_use_num() const;
  void _internal_set_gongfa_point_use_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleGongFaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GongFaData > data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > active_max_effect_;
    mutable std::atomic<int> _active_max_effect_cached_byte_size_;
    int32_t gongfa_point_use_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CollectionEntrySaveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CollectionEntrySaveData) */ {
 public:
  inline CollectionEntrySaveData() : CollectionEntrySaveData(nullptr) {}
  ~CollectionEntrySaveData() override;
  explicit PROTOBUF_CONSTEXPR CollectionEntrySaveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionEntrySaveData(const CollectionEntrySaveData& from);
  CollectionEntrySaveData(CollectionEntrySaveData&& from) noexcept
    : CollectionEntrySaveData() {
    *this = ::std::move(from);
  }

  inline CollectionEntrySaveData& operator=(const CollectionEntrySaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionEntrySaveData& operator=(CollectionEntrySaveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionEntrySaveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionEntrySaveData* internal_default_instance() {
    return reinterpret_cast<const CollectionEntrySaveData*>(
               &_CollectionEntrySaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CollectionEntrySaveData& a, CollectionEntrySaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionEntrySaveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionEntrySaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionEntrySaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionEntrySaveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionEntrySaveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionEntrySaveData& from) {
    CollectionEntrySaveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionEntrySaveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CollectionEntrySaveData";
  }
  protected:
  explicit CollectionEntrySaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kStarFieldNumber = 3,
    kIsActivatedFieldNumber = 4,
    kPieceNumFieldNumber = 5,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 star = 3;
  void clear_star();
  int32_t star() const;
  void set_star(int32_t value);
  private:
  int32_t _internal_star() const;
  void _internal_set_star(int32_t value);
  public:

  // bool is_activated = 4;
  void clear_is_activated();
  bool is_activated() const;
  void set_is_activated(bool value);
  private:
  bool _internal_is_activated() const;
  void _internal_set_is_activated(bool value);
  public:

  // int32 piece_num = 5;
  void clear_piece_num();
  int32_t piece_num() const;
  void set_piece_num(int32_t value);
  private:
  int32_t _internal_piece_num() const;
  void _internal_set_piece_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CollectionEntrySaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t level_;
    int32_t star_;
    bool is_activated_;
    int32_t piece_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CommonCollectionPieceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CommonCollectionPieceData) */ {
 public:
  inline CommonCollectionPieceData() : CommonCollectionPieceData(nullptr) {}
  ~CommonCollectionPieceData() override;
  explicit PROTOBUF_CONSTEXPR CommonCollectionPieceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonCollectionPieceData(const CommonCollectionPieceData& from);
  CommonCollectionPieceData(CommonCollectionPieceData&& from) noexcept
    : CommonCollectionPieceData() {
    *this = ::std::move(from);
  }

  inline CommonCollectionPieceData& operator=(const CommonCollectionPieceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonCollectionPieceData& operator=(CommonCollectionPieceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonCollectionPieceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonCollectionPieceData* internal_default_instance() {
    return reinterpret_cast<const CommonCollectionPieceData*>(
               &_CommonCollectionPieceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CommonCollectionPieceData& a, CommonCollectionPieceData& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonCollectionPieceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonCollectionPieceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonCollectionPieceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonCollectionPieceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonCollectionPieceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonCollectionPieceData& from) {
    CommonCollectionPieceData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonCollectionPieceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CommonCollectionPieceData";
  }
  protected:
  explicit CommonCollectionPieceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQualityFieldNumber = 1,
    kPieceNumFieldNumber = 2,
  };
  // .idlepb.ItemQuality quality = 1;
  void clear_quality();
  ::idlepb::ItemQuality quality() const;
  void set_quality(::idlepb::ItemQuality value);
  private:
  ::idlepb::ItemQuality _internal_quality() const;
  void _internal_set_quality(::idlepb::ItemQuality value);
  public:

  // int32 piece_num = 2;
  void clear_piece_num();
  int32_t piece_num() const;
  void set_piece_num(int32_t value);
  private:
  int32_t _internal_piece_num() const;
  void _internal_set_piece_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CommonCollectionPieceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int quality_;
    int32_t piece_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CollectionZoneActiveAwardData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CollectionZoneActiveAwardData) */ {
 public:
  inline CollectionZoneActiveAwardData() : CollectionZoneActiveAwardData(nullptr) {}
  ~CollectionZoneActiveAwardData() override;
  explicit PROTOBUF_CONSTEXPR CollectionZoneActiveAwardData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionZoneActiveAwardData(const CollectionZoneActiveAwardData& from);
  CollectionZoneActiveAwardData(CollectionZoneActiveAwardData&& from) noexcept
    : CollectionZoneActiveAwardData() {
    *this = ::std::move(from);
  }

  inline CollectionZoneActiveAwardData& operator=(const CollectionZoneActiveAwardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionZoneActiveAwardData& operator=(CollectionZoneActiveAwardData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionZoneActiveAwardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionZoneActiveAwardData* internal_default_instance() {
    return reinterpret_cast<const CollectionZoneActiveAwardData*>(
               &_CollectionZoneActiveAwardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CollectionZoneActiveAwardData& a, CollectionZoneActiveAwardData& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionZoneActiveAwardData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionZoneActiveAwardData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionZoneActiveAwardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionZoneActiveAwardData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionZoneActiveAwardData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionZoneActiveAwardData& from) {
    CollectionZoneActiveAwardData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionZoneActiveAwardData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CollectionZoneActiveAwardData";
  }
  protected:
  explicit CollectionZoneActiveAwardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneTypeFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // .idlepb.CollectionZoneType zone_type = 1;
  void clear_zone_type();
  ::idlepb::CollectionZoneType zone_type() const;
  void set_zone_type(::idlepb::CollectionZoneType value);
  private:
  ::idlepb::CollectionZoneType _internal_zone_type() const;
  void _internal_set_zone_type(::idlepb::CollectionZoneType value);
  public:

  // int32 num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CollectionZoneActiveAwardData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int zone_type_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleCollectionSaveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleCollectionSaveData) */ {
 public:
  inline RoleCollectionSaveData() : RoleCollectionSaveData(nullptr) {}
  ~RoleCollectionSaveData() override;
  explicit PROTOBUF_CONSTEXPR RoleCollectionSaveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleCollectionSaveData(const RoleCollectionSaveData& from);
  RoleCollectionSaveData(RoleCollectionSaveData&& from) noexcept
    : RoleCollectionSaveData() {
    *this = ::std::move(from);
  }

  inline RoleCollectionSaveData& operator=(const RoleCollectionSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleCollectionSaveData& operator=(RoleCollectionSaveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleCollectionSaveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleCollectionSaveData* internal_default_instance() {
    return reinterpret_cast<const RoleCollectionSaveData*>(
               &_RoleCollectionSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(RoleCollectionSaveData& a, RoleCollectionSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleCollectionSaveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleCollectionSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleCollectionSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleCollectionSaveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleCollectionSaveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleCollectionSaveData& from) {
    RoleCollectionSaveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleCollectionSaveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleCollectionSaveData";
  }
  protected:
  explicit RoleCollectionSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllEntriesFieldNumber = 1,
    kCommonPiecesFieldNumber = 2,
    kDrawAwardDoneHistoriesFieldNumber = 3,
    kZoneActiveAwardsFieldNumber = 4,
    kNextResetEnhanceTicksFieldNumber = 5,
  };
  // repeated .idlepb.CollectionEntrySaveData all_entries = 1;
  int all_entries_size() const;
  private:
  int _internal_all_entries_size() const;
  public:
  void clear_all_entries();
  ::idlepb::CollectionEntrySaveData* mutable_all_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionEntrySaveData >*
      mutable_all_entries();
  private:
  const ::idlepb::CollectionEntrySaveData& _internal_all_entries(int index) const;
  ::idlepb::CollectionEntrySaveData* _internal_add_all_entries();
  public:
  const ::idlepb::CollectionEntrySaveData& all_entries(int index) const;
  ::idlepb::CollectionEntrySaveData* add_all_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionEntrySaveData >&
      all_entries() const;

  // repeated .idlepb.CommonCollectionPieceData common_pieces = 2;
  int common_pieces_size() const;
  private:
  int _internal_common_pieces_size() const;
  public:
  void clear_common_pieces();
  ::idlepb::CommonCollectionPieceData* mutable_common_pieces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CommonCollectionPieceData >*
      mutable_common_pieces();
  private:
  const ::idlepb::CommonCollectionPieceData& _internal_common_pieces(int index) const;
  ::idlepb::CommonCollectionPieceData* _internal_add_common_pieces();
  public:
  const ::idlepb::CommonCollectionPieceData& common_pieces(int index) const;
  ::idlepb::CommonCollectionPieceData* add_common_pieces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CommonCollectionPieceData >&
      common_pieces() const;

  // repeated int32 draw_award_done_histories = 3;
  int draw_award_done_histories_size() const;
  private:
  int _internal_draw_award_done_histories_size() const;
  public:
  void clear_draw_award_done_histories();
  private:
  int32_t _internal_draw_award_done_histories(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_draw_award_done_histories() const;
  void _internal_add_draw_award_done_histories(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_draw_award_done_histories();
  public:
  int32_t draw_award_done_histories(int index) const;
  void set_draw_award_done_histories(int index, int32_t value);
  void add_draw_award_done_histories(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      draw_award_done_histories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_draw_award_done_histories();

  // repeated .idlepb.CollectionZoneActiveAwardData zone_active_awards = 4;
  int zone_active_awards_size() const;
  private:
  int _internal_zone_active_awards_size() const;
  public:
  void clear_zone_active_awards();
  ::idlepb::CollectionZoneActiveAwardData* mutable_zone_active_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionZoneActiveAwardData >*
      mutable_zone_active_awards();
  private:
  const ::idlepb::CollectionZoneActiveAwardData& _internal_zone_active_awards(int index) const;
  ::idlepb::CollectionZoneActiveAwardData* _internal_add_zone_active_awards();
  public:
  const ::idlepb::CollectionZoneActiveAwardData& zone_active_awards(int index) const;
  ::idlepb::CollectionZoneActiveAwardData* add_zone_active_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionZoneActiveAwardData >&
      zone_active_awards() const;

  // int64 next_reset_enhance_ticks = 5;
  void clear_next_reset_enhance_ticks();
  int64_t next_reset_enhance_ticks() const;
  void set_next_reset_enhance_ticks(int64_t value);
  private:
  int64_t _internal_next_reset_enhance_ticks() const;
  void _internal_set_next_reset_enhance_ticks(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleCollectionSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionEntrySaveData > all_entries_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CommonCollectionPieceData > common_pieces_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > draw_award_done_histories_;
    mutable std::atomic<int> _draw_award_done_histories_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionZoneActiveAwardData > zone_active_awards_;
    int64_t next_reset_enhance_ticks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API FuZengTuple final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.FuZengTuple) */ {
 public:
  inline FuZengTuple() : FuZengTuple(nullptr) {}
  ~FuZengTuple() override;
  explicit PROTOBUF_CONSTEXPR FuZengTuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FuZengTuple(const FuZengTuple& from);
  FuZengTuple(FuZengTuple&& from) noexcept
    : FuZengTuple() {
    *this = ::std::move(from);
  }

  inline FuZengTuple& operator=(const FuZengTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuZengTuple& operator=(FuZengTuple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FuZengTuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const FuZengTuple* internal_default_instance() {
    return reinterpret_cast<const FuZengTuple*>(
               &_FuZengTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(FuZengTuple& a, FuZengTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(FuZengTuple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuZengTuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FuZengTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FuZengTuple>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FuZengTuple& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FuZengTuple& from) {
    FuZengTuple::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuZengTuple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.FuZengTuple";
  }
  protected:
  explicit FuZengTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 2,
    kCfgIdFieldNumber = 1,
  };
  // repeated int64 num = 2;
  int num_size() const;
  private:
  int _internal_num_size() const;
  public:
  void clear_num();
  private:
  int64_t _internal_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_num() const;
  void _internal_add_num(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_num();
  public:
  int64_t num(int index) const;
  void set_num(int index, int64_t value);
  void add_num(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_num();

  // int32 cfg_id = 1;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.FuZengTuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > num_;
    mutable std::atomic<int> _num_cached_byte_size_;
    int32_t cfg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API FuZengData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.FuZengData) */ {
 public:
  inline FuZengData() : FuZengData(nullptr) {}
  ~FuZengData() override;
  explicit PROTOBUF_CONSTEXPR FuZengData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FuZengData(const FuZengData& from);
  FuZengData(FuZengData&& from) noexcept
    : FuZengData() {
    *this = ::std::move(from);
  }

  inline FuZengData& operator=(const FuZengData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuZengData& operator=(FuZengData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FuZengData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FuZengData* internal_default_instance() {
    return reinterpret_cast<const FuZengData*>(
               &_FuZengData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(FuZengData& a, FuZengData& b) {
    a.Swap(&b);
  }
  inline void Swap(FuZengData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuZengData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FuZengData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FuZengData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FuZengData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FuZengData& from) {
    FuZengData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuZengData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.FuZengData";
  }
  protected:
  explicit FuZengData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceivedRecordFieldNumber = 2,
    kMaxNumFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated .idlepb.FuZengTuple received_record = 2;
  int received_record_size() const;
  private:
  int _internal_received_record_size() const;
  public:
  void clear_received_record();
  ::idlepb::FuZengTuple* mutable_received_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZengTuple >*
      mutable_received_record();
  private:
  const ::idlepb::FuZengTuple& _internal_received_record(int index) const;
  ::idlepb::FuZengTuple* _internal_add_received_record();
  public:
  const ::idlepb::FuZengTuple& received_record(int index) const;
  ::idlepb::FuZengTuple* add_received_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZengTuple >&
      received_record() const;

  // int64 max_num = 3;
  void clear_max_num();
  int64_t max_num() const;
  void set_max_num(int64_t value);
  private:
  int64_t _internal_max_num() const;
  void _internal_set_max_num(int64_t value);
  public:

  // .idlepb.FuZengType type = 1;
  void clear_type();
  ::idlepb::FuZengType type() const;
  void set_type(::idlepb::FuZengType value);
  private:
  ::idlepb::FuZengType _internal_type() const;
  void _internal_set_type(::idlepb::FuZengType value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.FuZengData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZengTuple > received_record_;
    int64_t max_num_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleFuZengData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleFuZengData) */ {
 public:
  inline RoleFuZengData() : RoleFuZengData(nullptr) {}
  ~RoleFuZengData() override;
  explicit PROTOBUF_CONSTEXPR RoleFuZengData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleFuZengData(const RoleFuZengData& from);
  RoleFuZengData(RoleFuZengData&& from) noexcept
    : RoleFuZengData() {
    *this = ::std::move(from);
  }

  inline RoleFuZengData& operator=(const RoleFuZengData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleFuZengData& operator=(RoleFuZengData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleFuZengData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleFuZengData* internal_default_instance() {
    return reinterpret_cast<const RoleFuZengData*>(
               &_RoleFuZengData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(RoleFuZengData& a, RoleFuZengData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleFuZengData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleFuZengData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleFuZengData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleFuZengData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleFuZengData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleFuZengData& from) {
    RoleFuZengData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleFuZengData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleFuZengData";
  }
  protected:
  explicit RoleFuZengData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .idlepb.FuZengData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::idlepb::FuZengData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZengData >*
      mutable_data();
  private:
  const ::idlepb::FuZengData& _internal_data(int index) const;
  ::idlepb::FuZengData* _internal_add_data();
  public:
  const ::idlepb::FuZengData& data(int index) const;
  ::idlepb::FuZengData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZengData >&
      data() const;

  // @@protoc_insertion_point(class_scope:idlepb.RoleFuZengData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZengData > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleFightModeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleFightModeData) */ {
 public:
  inline RoleFightModeData() : RoleFightModeData(nullptr) {}
  ~RoleFightModeData() override;
  explicit PROTOBUF_CONSTEXPR RoleFightModeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleFightModeData(const RoleFightModeData& from);
  RoleFightModeData(RoleFightModeData&& from) noexcept
    : RoleFightModeData() {
    *this = ::std::move(from);
  }

  inline RoleFightModeData& operator=(const RoleFightModeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleFightModeData& operator=(RoleFightModeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleFightModeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleFightModeData* internal_default_instance() {
    return reinterpret_cast<const RoleFightModeData*>(
               &_RoleFightModeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(RoleFightModeData& a, RoleFightModeData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleFightModeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleFightModeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleFightModeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleFightModeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleFightModeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleFightModeData& from) {
    RoleFightModeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleFightModeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleFightModeData";
  }
  protected:
  explicit RoleFightModeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastAttackTicksFieldNumber = 2,
    kLastDefenceTicksFieldNumber = 3,
    kCurModeFieldNumber = 1,
  };
  // int64 last_attack_ticks = 2;
  void clear_last_attack_ticks();
  int64_t last_attack_ticks() const;
  void set_last_attack_ticks(int64_t value);
  private:
  int64_t _internal_last_attack_ticks() const;
  void _internal_set_last_attack_ticks(int64_t value);
  public:

  // int64 last_defence_ticks = 3;
  void clear_last_defence_ticks();
  int64_t last_defence_ticks() const;
  void set_last_defence_ticks(int64_t value);
  private:
  int64_t _internal_last_defence_ticks() const;
  void _internal_set_last_defence_ticks(int64_t value);
  public:

  // .idlepb.FightMode cur_mode = 1;
  void clear_cur_mode();
  ::idlepb::FightMode cur_mode() const;
  void set_cur_mode(::idlepb::FightMode value);
  private:
  ::idlepb::FightMode _internal_cur_mode() const;
  void _internal_set_cur_mode(::idlepb::FightMode value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleFightModeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t last_attack_ticks_;
    int64_t last_defence_ticks_;
    int cur_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleNormalSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleNormalSettings) */ {
 public:
  inline RoleNormalSettings() : RoleNormalSettings(nullptr) {}
  ~RoleNormalSettings() override;
  explicit PROTOBUF_CONSTEXPR RoleNormalSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleNormalSettings(const RoleNormalSettings& from);
  RoleNormalSettings(RoleNormalSettings&& from) noexcept
    : RoleNormalSettings() {
    *this = ::std::move(from);
  }

  inline RoleNormalSettings& operator=(const RoleNormalSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleNormalSettings& operator=(RoleNormalSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleNormalSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleNormalSettings* internal_default_instance() {
    return reinterpret_cast<const RoleNormalSettings*>(
               &_RoleNormalSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(RoleNormalSettings& a, RoleNormalSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleNormalSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleNormalSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleNormalSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleNormalSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleNormalSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleNormalSettings& from) {
    RoleNormalSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleNormalSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleNormalSettings";
  }
  protected:
  explicit RoleNormalSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackLockTypeFieldNumber = 1,
    kAttackUnlockTypeFieldNumber = 2,
    kShowUnlockButtonFieldNumber = 3,
  };
  // .idlepb.AttackLockType attack_lock_type = 1;
  void clear_attack_lock_type();
  ::idlepb::AttackLockType attack_lock_type() const;
  void set_attack_lock_type(::idlepb::AttackLockType value);
  private:
  ::idlepb::AttackLockType _internal_attack_lock_type() const;
  void _internal_set_attack_lock_type(::idlepb::AttackLockType value);
  public:

  // .idlepb.AttackUnlockType attack_unlock_type = 2;
  void clear_attack_unlock_type();
  ::idlepb::AttackUnlockType attack_unlock_type() const;
  void set_attack_unlock_type(::idlepb::AttackUnlockType value);
  private:
  ::idlepb::AttackUnlockType _internal_attack_unlock_type() const;
  void _internal_set_attack_unlock_type(::idlepb::AttackUnlockType value);
  public:

  // bool show_unlock_button = 3;
  void clear_show_unlock_button();
  bool show_unlock_button() const;
  void set_show_unlock_button(bool value);
  private:
  bool _internal_show_unlock_button() const;
  void _internal_set_show_unlock_button(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleNormalSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int attack_lock_type_;
    int attack_unlock_type_;
    bool show_unlock_button_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleData) */ {
 public:
  inline RoleData() : RoleData(nullptr) {}
  ~RoleData() override;
  explicit PROTOBUF_CONSTEXPR RoleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleData(const RoleData& from);
  RoleData(RoleData&& from) noexcept
    : RoleData() {
    *this = ::std::move(from);
  }

  inline RoleData& operator=(const RoleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleData& operator=(RoleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleData* internal_default_instance() {
    return reinterpret_cast<const RoleData*>(
               &_RoleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(RoleData& a, RoleData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleData& from) {
    RoleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleData";
  }
  protected:
  explicit RoleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnlockedModulesFieldNumber = 18,
    kPillPropertyDataFieldNumber = 21,
    kRoleNameFieldNumber = 3,
    kCurrencyDataFieldNumber = 4,
    kPhysicsDataFieldNumber = 5,
    kMagicDataFieldNumber = 6,
    kDailyCounterFieldNumber = 9,
    kModelConfigFieldNumber = 10,
    kLastWorldPosFieldNumber = 12,
    kFightModeFieldNumber = 22,
    kNormalSettingsFieldNumber = 26,
    kWeeklyCounterFieldNumber = 28,
    kLastArenaWorldPosFieldNumber = 30,
    kGameStatsFieldNumber = 31,
    kLastAllArenaWorldPosFieldNumber = 33,
    kUserIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
    kLastExpCycleTimestampFieldNumber = 8,
    kCultivationDirFieldNumber = 7,
    kLastWorldCfgidFieldNumber = 11,
    kNextTeleportTimeFieldNumber = 14,
    kCombatPowerFieldNumber = 16,
    kLastUnlockArenaIdFieldNumber = 15,
    kLoginCountFieldNumber = 17,
    kCreateTimeFieldNumber = 19,
    kQiCollectorRankFieldNumber = 23,
    kLastArenaWorldCfgidFieldNumber = 29,
    kOfflineTimeFieldNumber = 27,
    kLastAllArenaWorldCfgidFieldNumber = 32,
  };
  // repeated int32 unlocked_modules = 18;
  int unlocked_modules_size() const;
  private:
  int _internal_unlocked_modules_size() const;
  public:
  void clear_unlocked_modules();
  private:
  int32_t _internal_unlocked_modules(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_unlocked_modules() const;
  void _internal_add_unlocked_modules(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_unlocked_modules();
  public:
  int32_t unlocked_modules(int index) const;
  void set_unlocked_modules(int index, int32_t value);
  void add_unlocked_modules(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      unlocked_modules() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_unlocked_modules();

  // repeated .idlepb.PillPropertyData pill_property_data = 21;
  int pill_property_data_size() const;
  private:
  int _internal_pill_property_data_size() const;
  public:
  void clear_pill_property_data();
  ::idlepb::PillPropertyData* mutable_pill_property_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PillPropertyData >*
      mutable_pill_property_data();
  private:
  const ::idlepb::PillPropertyData& _internal_pill_property_data(int index) const;
  ::idlepb::PillPropertyData* _internal_add_pill_property_data();
  public:
  const ::idlepb::PillPropertyData& pill_property_data(int index) const;
  ::idlepb::PillPropertyData* add_pill_property_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PillPropertyData >&
      pill_property_data() const;

  // string role_name = 3;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // .idlepb.CurrencyData currency_data = 4;
  bool has_currency_data() const;
  private:
  bool _internal_has_currency_data() const;
  public:
  void clear_currency_data();
  const ::idlepb::CurrencyData& currency_data() const;
  PROTOBUF_NODISCARD ::idlepb::CurrencyData* release_currency_data();
  ::idlepb::CurrencyData* mutable_currency_data();
  void set_allocated_currency_data(::idlepb::CurrencyData* currency_data);
  private:
  const ::idlepb::CurrencyData& _internal_currency_data() const;
  ::idlepb::CurrencyData* _internal_mutable_currency_data();
  public:
  void unsafe_arena_set_allocated_currency_data(
      ::idlepb::CurrencyData* currency_data);
  ::idlepb::CurrencyData* unsafe_arena_release_currency_data();

  // .idlepb.CultivationData physics_data = 5;
  bool has_physics_data() const;
  private:
  bool _internal_has_physics_data() const;
  public:
  void clear_physics_data();
  const ::idlepb::CultivationData& physics_data() const;
  PROTOBUF_NODISCARD ::idlepb::CultivationData* release_physics_data();
  ::idlepb::CultivationData* mutable_physics_data();
  void set_allocated_physics_data(::idlepb::CultivationData* physics_data);
  private:
  const ::idlepb::CultivationData& _internal_physics_data() const;
  ::idlepb::CultivationData* _internal_mutable_physics_data();
  public:
  void unsafe_arena_set_allocated_physics_data(
      ::idlepb::CultivationData* physics_data);
  ::idlepb::CultivationData* unsafe_arena_release_physics_data();

  // .idlepb.CultivationData magic_data = 6;
  bool has_magic_data() const;
  private:
  bool _internal_has_magic_data() const;
  public:
  void clear_magic_data();
  const ::idlepb::CultivationData& magic_data() const;
  PROTOBUF_NODISCARD ::idlepb::CultivationData* release_magic_data();
  ::idlepb::CultivationData* mutable_magic_data();
  void set_allocated_magic_data(::idlepb::CultivationData* magic_data);
  private:
  const ::idlepb::CultivationData& _internal_magic_data() const;
  ::idlepb::CultivationData* _internal_mutable_magic_data();
  public:
  void unsafe_arena_set_allocated_magic_data(
      ::idlepb::CultivationData* magic_data);
  ::idlepb::CultivationData* unsafe_arena_release_magic_data();

  // .idlepb.RoleDailyCounter daily_counter = 9;
  bool has_daily_counter() const;
  private:
  bool _internal_has_daily_counter() const;
  public:
  void clear_daily_counter();
  const ::idlepb::RoleDailyCounter& daily_counter() const;
  PROTOBUF_NODISCARD ::idlepb::RoleDailyCounter* release_daily_counter();
  ::idlepb::RoleDailyCounter* mutable_daily_counter();
  void set_allocated_daily_counter(::idlepb::RoleDailyCounter* daily_counter);
  private:
  const ::idlepb::RoleDailyCounter& _internal_daily_counter() const;
  ::idlepb::RoleDailyCounter* _internal_mutable_daily_counter();
  public:
  void unsafe_arena_set_allocated_daily_counter(
      ::idlepb::RoleDailyCounter* daily_counter);
  ::idlepb::RoleDailyCounter* unsafe_arena_release_daily_counter();

  // .idlepb.CharacterModelConfig model_config = 10;
  bool has_model_config() const;
  private:
  bool _internal_has_model_config() const;
  public:
  void clear_model_config();
  const ::idlepb::CharacterModelConfig& model_config() const;
  PROTOBUF_NODISCARD ::idlepb::CharacterModelConfig* release_model_config();
  ::idlepb::CharacterModelConfig* mutable_model_config();
  void set_allocated_model_config(::idlepb::CharacterModelConfig* model_config);
  private:
  const ::idlepb::CharacterModelConfig& _internal_model_config() const;
  ::idlepb::CharacterModelConfig* _internal_mutable_model_config();
  public:
  void unsafe_arena_set_allocated_model_config(
      ::idlepb::CharacterModelConfig* model_config);
  ::idlepb::CharacterModelConfig* unsafe_arena_release_model_config();

  // .idlepb.Vector3 last_world_pos = 12;
  bool has_last_world_pos() const;
  private:
  bool _internal_has_last_world_pos() const;
  public:
  void clear_last_world_pos();
  const ::idlepb::Vector3& last_world_pos() const;
  PROTOBUF_NODISCARD ::idlepb::Vector3* release_last_world_pos();
  ::idlepb::Vector3* mutable_last_world_pos();
  void set_allocated_last_world_pos(::idlepb::Vector3* last_world_pos);
  private:
  const ::idlepb::Vector3& _internal_last_world_pos() const;
  ::idlepb::Vector3* _internal_mutable_last_world_pos();
  public:
  void unsafe_arena_set_allocated_last_world_pos(
      ::idlepb::Vector3* last_world_pos);
  ::idlepb::Vector3* unsafe_arena_release_last_world_pos();

  // .idlepb.RoleFightModeData fight_mode = 22;
  bool has_fight_mode() const;
  private:
  bool _internal_has_fight_mode() const;
  public:
  void clear_fight_mode();
  const ::idlepb::RoleFightModeData& fight_mode() const;
  PROTOBUF_NODISCARD ::idlepb::RoleFightModeData* release_fight_mode();
  ::idlepb::RoleFightModeData* mutable_fight_mode();
  void set_allocated_fight_mode(::idlepb::RoleFightModeData* fight_mode);
  private:
  const ::idlepb::RoleFightModeData& _internal_fight_mode() const;
  ::idlepb::RoleFightModeData* _internal_mutable_fight_mode();
  public:
  void unsafe_arena_set_allocated_fight_mode(
      ::idlepb::RoleFightModeData* fight_mode);
  ::idlepb::RoleFightModeData* unsafe_arena_release_fight_mode();

  // .idlepb.RoleNormalSettings normal_settings = 26;
  bool has_normal_settings() const;
  private:
  bool _internal_has_normal_settings() const;
  public:
  void clear_normal_settings();
  const ::idlepb::RoleNormalSettings& normal_settings() const;
  PROTOBUF_NODISCARD ::idlepb::RoleNormalSettings* release_normal_settings();
  ::idlepb::RoleNormalSettings* mutable_normal_settings();
  void set_allocated_normal_settings(::idlepb::RoleNormalSettings* normal_settings);
  private:
  const ::idlepb::RoleNormalSettings& _internal_normal_settings() const;
  ::idlepb::RoleNormalSettings* _internal_mutable_normal_settings();
  public:
  void unsafe_arena_set_allocated_normal_settings(
      ::idlepb::RoleNormalSettings* normal_settings);
  ::idlepb::RoleNormalSettings* unsafe_arena_release_normal_settings();

  // .idlepb.RoleWeeklyCounter weekly_counter = 28;
  bool has_weekly_counter() const;
  private:
  bool _internal_has_weekly_counter() const;
  public:
  void clear_weekly_counter();
  const ::idlepb::RoleWeeklyCounter& weekly_counter() const;
  PROTOBUF_NODISCARD ::idlepb::RoleWeeklyCounter* release_weekly_counter();
  ::idlepb::RoleWeeklyCounter* mutable_weekly_counter();
  void set_allocated_weekly_counter(::idlepb::RoleWeeklyCounter* weekly_counter);
  private:
  const ::idlepb::RoleWeeklyCounter& _internal_weekly_counter() const;
  ::idlepb::RoleWeeklyCounter* _internal_mutable_weekly_counter();
  public:
  void unsafe_arena_set_allocated_weekly_counter(
      ::idlepb::RoleWeeklyCounter* weekly_counter);
  ::idlepb::RoleWeeklyCounter* unsafe_arena_release_weekly_counter();

  // .idlepb.Vector3 last_arena_world_pos = 30;
  bool has_last_arena_world_pos() const;
  private:
  bool _internal_has_last_arena_world_pos() const;
  public:
  void clear_last_arena_world_pos();
  const ::idlepb::Vector3& last_arena_world_pos() const;
  PROTOBUF_NODISCARD ::idlepb::Vector3* release_last_arena_world_pos();
  ::idlepb::Vector3* mutable_last_arena_world_pos();
  void set_allocated_last_arena_world_pos(::idlepb::Vector3* last_arena_world_pos);
  private:
  const ::idlepb::Vector3& _internal_last_arena_world_pos() const;
  ::idlepb::Vector3* _internal_mutable_last_arena_world_pos();
  public:
  void unsafe_arena_set_allocated_last_arena_world_pos(
      ::idlepb::Vector3* last_arena_world_pos);
  ::idlepb::Vector3* unsafe_arena_release_last_arena_world_pos();

  // .idlepb.GameStatsData game_stats = 31;
  bool has_game_stats() const;
  private:
  bool _internal_has_game_stats() const;
  public:
  void clear_game_stats();
  const ::idlepb::GameStatsData& game_stats() const;
  PROTOBUF_NODISCARD ::idlepb::GameStatsData* release_game_stats();
  ::idlepb::GameStatsData* mutable_game_stats();
  void set_allocated_game_stats(::idlepb::GameStatsData* game_stats);
  private:
  const ::idlepb::GameStatsData& _internal_game_stats() const;
  ::idlepb::GameStatsData* _internal_mutable_game_stats();
  public:
  void unsafe_arena_set_allocated_game_stats(
      ::idlepb::GameStatsData* game_stats);
  ::idlepb::GameStatsData* unsafe_arena_release_game_stats();

  // .idlepb.Vector3 last_all_arena_world_pos = 33;
  bool has_last_all_arena_world_pos() const;
  private:
  bool _internal_has_last_all_arena_world_pos() const;
  public:
  void clear_last_all_arena_world_pos();
  const ::idlepb::Vector3& last_all_arena_world_pos() const;
  PROTOBUF_NODISCARD ::idlepb::Vector3* release_last_all_arena_world_pos();
  ::idlepb::Vector3* mutable_last_all_arena_world_pos();
  void set_allocated_last_all_arena_world_pos(::idlepb::Vector3* last_all_arena_world_pos);
  private:
  const ::idlepb::Vector3& _internal_last_all_arena_world_pos() const;
  ::idlepb::Vector3* _internal_mutable_last_all_arena_world_pos();
  public:
  void unsafe_arena_set_allocated_last_all_arena_world_pos(
      ::idlepb::Vector3* last_all_arena_world_pos);
  ::idlepb::Vector3* unsafe_arena_release_last_all_arena_world_pos();

  // uint64 user_id = 1;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // uint64 role_id = 2;
  void clear_role_id();
  uint64_t role_id() const;
  void set_role_id(uint64_t value);
  private:
  uint64_t _internal_role_id() const;
  void _internal_set_role_id(uint64_t value);
  public:

  // int64 last_exp_cycle_timestamp = 8;
  void clear_last_exp_cycle_timestamp();
  int64_t last_exp_cycle_timestamp() const;
  void set_last_exp_cycle_timestamp(int64_t value);
  private:
  int64_t _internal_last_exp_cycle_timestamp() const;
  void _internal_set_last_exp_cycle_timestamp(int64_t value);
  public:

  // .idlepb.CultivationDirection cultivation_dir = 7;
  void clear_cultivation_dir();
  ::idlepb::CultivationDirection cultivation_dir() const;
  void set_cultivation_dir(::idlepb::CultivationDirection value);
  private:
  ::idlepb::CultivationDirection _internal_cultivation_dir() const;
  void _internal_set_cultivation_dir(::idlepb::CultivationDirection value);
  public:

  // int32 last_world_cfgid = 11;
  void clear_last_world_cfgid();
  int32_t last_world_cfgid() const;
  void set_last_world_cfgid(int32_t value);
  private:
  int32_t _internal_last_world_cfgid() const;
  void _internal_set_last_world_cfgid(int32_t value);
  public:

  // int64 next_teleport_time = 14;
  void clear_next_teleport_time();
  int64_t next_teleport_time() const;
  void set_next_teleport_time(int64_t value);
  private:
  int64_t _internal_next_teleport_time() const;
  void _internal_set_next_teleport_time(int64_t value);
  public:

  // int64 combat_power = 16;
  void clear_combat_power();
  int64_t combat_power() const;
  void set_combat_power(int64_t value);
  private:
  int64_t _internal_combat_power() const;
  void _internal_set_combat_power(int64_t value);
  public:

  // int32 last_unlock_arena_id = 15;
  void clear_last_unlock_arena_id();
  int32_t last_unlock_arena_id() const;
  void set_last_unlock_arena_id(int32_t value);
  private:
  int32_t _internal_last_unlock_arena_id() const;
  void _internal_set_last_unlock_arena_id(int32_t value);
  public:

  // int32 login_count = 17;
  void clear_login_count();
  int32_t login_count() const;
  void set_login_count(int32_t value);
  private:
  int32_t _internal_login_count() const;
  void _internal_set_login_count(int32_t value);
  public:

  // int64 create_time = 19;
  void clear_create_time();
  int64_t create_time() const;
  void set_create_time(int64_t value);
  private:
  int64_t _internal_create_time() const;
  void _internal_set_create_time(int64_t value);
  public:

  // int32 qi_collector_rank = 23;
  void clear_qi_collector_rank();
  int32_t qi_collector_rank() const;
  void set_qi_collector_rank(int32_t value);
  private:
  int32_t _internal_qi_collector_rank() const;
  void _internal_set_qi_collector_rank(int32_t value);
  public:

  // int32 last_arena_world_cfgid = 29;
  void clear_last_arena_world_cfgid();
  int32_t last_arena_world_cfgid() const;
  void set_last_arena_world_cfgid(int32_t value);
  private:
  int32_t _internal_last_arena_world_cfgid() const;
  void _internal_set_last_arena_world_cfgid(int32_t value);
  public:

  // int64 offline_time = 27;
  void clear_offline_time();
  int64_t offline_time() const;
  void set_offline_time(int64_t value);
  private:
  int64_t _internal_offline_time() const;
  void _internal_set_offline_time(int64_t value);
  public:

  // int32 last_all_arena_world_cfgid = 32;
  void clear_last_all_arena_world_cfgid();
  int32_t last_all_arena_world_cfgid() const;
  void set_last_all_arena_world_cfgid(int32_t value);
  private:
  int32_t _internal_last_all_arena_world_cfgid() const;
  void _internal_set_last_all_arena_world_cfgid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > unlocked_modules_;
    mutable std::atomic<int> _unlocked_modules_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PillPropertyData > pill_property_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    ::idlepb::CurrencyData* currency_data_;
    ::idlepb::CultivationData* physics_data_;
    ::idlepb::CultivationData* magic_data_;
    ::idlepb::RoleDailyCounter* daily_counter_;
    ::idlepb::CharacterModelConfig* model_config_;
    ::idlepb::Vector3* last_world_pos_;
    ::idlepb::RoleFightModeData* fight_mode_;
    ::idlepb::RoleNormalSettings* normal_settings_;
    ::idlepb::RoleWeeklyCounter* weekly_counter_;
    ::idlepb::Vector3* last_arena_world_pos_;
    ::idlepb::GameStatsData* game_stats_;
    ::idlepb::Vector3* last_all_arena_world_pos_;
    uint64_t user_id_;
    uint64_t role_id_;
    int64_t last_exp_cycle_timestamp_;
    int cultivation_dir_;
    int32_t last_world_cfgid_;
    int64_t next_teleport_time_;
    int64_t combat_power_;
    int32_t last_unlock_arena_id_;
    int32_t login_count_;
    int64_t create_time_;
    int32_t qi_collector_rank_;
    int32_t last_arena_world_cfgid_;
    int64_t offline_time_;
    int32_t last_all_arena_world_cfgid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SimpleAbilityData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SimpleAbilityData) */ {
 public:
  inline SimpleAbilityData() : SimpleAbilityData(nullptr) {}
  ~SimpleAbilityData() override;
  explicit PROTOBUF_CONSTEXPR SimpleAbilityData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleAbilityData(const SimpleAbilityData& from);
  SimpleAbilityData(SimpleAbilityData&& from) noexcept
    : SimpleAbilityData() {
    *this = ::std::move(from);
  }

  inline SimpleAbilityData& operator=(const SimpleAbilityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleAbilityData& operator=(SimpleAbilityData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleAbilityData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleAbilityData* internal_default_instance() {
    return reinterpret_cast<const SimpleAbilityData*>(
               &_SimpleAbilityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SimpleAbilityData& a, SimpleAbilityData& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleAbilityData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleAbilityData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleAbilityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleAbilityData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleAbilityData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleAbilityData& from) {
    SimpleAbilityData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleAbilityData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SimpleAbilityData";
  }
  protected:
  explicit SimpleAbilityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kGradeFieldNumber = 2,
    kStudyGradeFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 grade = 2;
  void clear_grade();
  int32_t grade() const;
  void set_grade(int32_t value);
  private:
  int32_t _internal_grade() const;
  void _internal_set_grade(int32_t value);
  public:

  // int32 study_grade = 3;
  void clear_study_grade();
  int32_t study_grade() const;
  void set_study_grade(int32_t value);
  private:
  int32_t _internal_study_grade() const;
  void _internal_set_study_grade(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SimpleAbilityData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t grade_;
    int32_t study_grade_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SimpleGongFaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SimpleGongFaData) */ {
 public:
  inline SimpleGongFaData() : SimpleGongFaData(nullptr) {}
  ~SimpleGongFaData() override;
  explicit PROTOBUF_CONSTEXPR SimpleGongFaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleGongFaData(const SimpleGongFaData& from);
  SimpleGongFaData(SimpleGongFaData&& from) noexcept
    : SimpleGongFaData() {
    *this = ::std::move(from);
  }

  inline SimpleGongFaData& operator=(const SimpleGongFaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleGongFaData& operator=(SimpleGongFaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleGongFaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleGongFaData* internal_default_instance() {
    return reinterpret_cast<const SimpleGongFaData*>(
               &_SimpleGongFaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(SimpleGongFaData& a, SimpleGongFaData& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleGongFaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleGongFaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleGongFaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleGongFaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleGongFaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleGongFaData& from) {
    SimpleGongFaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleGongFaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SimpleGongFaData";
  }
  protected:
  explicit SimpleGongFaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kIsFullFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // bool is_full = 3;
  void clear_is_full();
  bool is_full() const;
  void set_is_full(bool value);
  private:
  bool _internal_is_full() const;
  void _internal_set_is_full(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SimpleGongFaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t level_;
    bool is_full_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleInfo) */ {
 public:
  inline RoleInfo() : RoleInfo(nullptr) {}
  ~RoleInfo() override;
  explicit PROTOBUF_CONSTEXPR RoleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleInfo(const RoleInfo& from);
  RoleInfo(RoleInfo&& from) noexcept
    : RoleInfo() {
    *this = ::std::move(from);
  }

  inline RoleInfo& operator=(const RoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleInfo& operator=(RoleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleInfo* internal_default_instance() {
    return reinterpret_cast<const RoleInfo*>(
               &_RoleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(RoleInfo& a, RoleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleInfo& from) {
    RoleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleInfo";
  }
  protected:
  explicit RoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 11,
    kEquipmentsFieldNumber = 13,
    kUnlockedEquipmentSlotsFieldNumber = 14,
    kSlottedAbilitiesFieldNumber = 20,
    kUnslottedAbilitiesFieldNumber = 21,
    kGongFaEntriesFieldNumber = 22,
    kRoleNameFieldNumber = 3,
    kSeptNameFieldNumber = 17,
    kCharacterModelFieldNumber = 10,
    kAllStatsDataFieldNumber = 19,
    kUserIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
    kCreateTimeFieldNumber = 4,
    kCultivationMainDirFieldNumber = 5,
    kCultivationMainRankFieldNumber = 6,
    kCultivationSecondDirFieldNumber = 7,
    kCultivationSecondRankFieldNumber = 8,
    kCombatPowerFieldNumber = 12,
    kSeptIdFieldNumber = 15,
    kSeptPositionFieldNumber = 16,
    kSeptLogoFieldNumber = 18,
  };
  // repeated int32 title = 11;
  int title_size() const;
  private:
  int _internal_title_size() const;
  public:
  void clear_title();
  private:
  int32_t _internal_title(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_title() const;
  void _internal_add_title(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_title();
  public:
  int32_t title(int index) const;
  void set_title(int index, int32_t value);
  void add_title(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      title() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_title();

  // repeated .idlepb.ItemData equipments = 13;
  int equipments_size() const;
  private:
  int _internal_equipments_size() const;
  public:
  void clear_equipments();
  ::idlepb::ItemData* mutable_equipments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >*
      mutable_equipments();
  private:
  const ::idlepb::ItemData& _internal_equipments(int index) const;
  ::idlepb::ItemData* _internal_add_equipments();
  public:
  const ::idlepb::ItemData& equipments(int index) const;
  ::idlepb::ItemData* add_equipments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >&
      equipments() const;

  // repeated int32 unlocked_equipment_slots = 14;
  int unlocked_equipment_slots_size() const;
  private:
  int _internal_unlocked_equipment_slots_size() const;
  public:
  void clear_unlocked_equipment_slots();
  private:
  int32_t _internal_unlocked_equipment_slots(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_unlocked_equipment_slots() const;
  void _internal_add_unlocked_equipment_slots(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_unlocked_equipment_slots();
  public:
  int32_t unlocked_equipment_slots(int index) const;
  void set_unlocked_equipment_slots(int index, int32_t value);
  void add_unlocked_equipment_slots(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      unlocked_equipment_slots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_unlocked_equipment_slots();

  // repeated .idlepb.SimpleAbilityData slotted_abilities = 20;
  int slotted_abilities_size() const;
  private:
  int _internal_slotted_abilities_size() const;
  public:
  void clear_slotted_abilities();
  ::idlepb::SimpleAbilityData* mutable_slotted_abilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleAbilityData >*
      mutable_slotted_abilities();
  private:
  const ::idlepb::SimpleAbilityData& _internal_slotted_abilities(int index) const;
  ::idlepb::SimpleAbilityData* _internal_add_slotted_abilities();
  public:
  const ::idlepb::SimpleAbilityData& slotted_abilities(int index) const;
  ::idlepb::SimpleAbilityData* add_slotted_abilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleAbilityData >&
      slotted_abilities() const;

  // repeated .idlepb.SimpleAbilityData unslotted_abilities = 21;
  int unslotted_abilities_size() const;
  private:
  int _internal_unslotted_abilities_size() const;
  public:
  void clear_unslotted_abilities();
  ::idlepb::SimpleAbilityData* mutable_unslotted_abilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleAbilityData >*
      mutable_unslotted_abilities();
  private:
  const ::idlepb::SimpleAbilityData& _internal_unslotted_abilities(int index) const;
  ::idlepb::SimpleAbilityData* _internal_add_unslotted_abilities();
  public:
  const ::idlepb::SimpleAbilityData& unslotted_abilities(int index) const;
  ::idlepb::SimpleAbilityData* add_unslotted_abilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleAbilityData >&
      unslotted_abilities() const;

  // repeated .idlepb.SimpleGongFaData gong_fa_entries = 22;
  int gong_fa_entries_size() const;
  private:
  int _internal_gong_fa_entries_size() const;
  public:
  void clear_gong_fa_entries();
  ::idlepb::SimpleGongFaData* mutable_gong_fa_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleGongFaData >*
      mutable_gong_fa_entries();
  private:
  const ::idlepb::SimpleGongFaData& _internal_gong_fa_entries(int index) const;
  ::idlepb::SimpleGongFaData* _internal_add_gong_fa_entries();
  public:
  const ::idlepb::SimpleGongFaData& gong_fa_entries(int index) const;
  ::idlepb::SimpleGongFaData* add_gong_fa_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleGongFaData >&
      gong_fa_entries() const;

  // string role_name = 3;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // string sept_name = 17;
  void clear_sept_name();
  const std::string& sept_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sept_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sept_name();
  PROTOBUF_NODISCARD std::string* release_sept_name();
  void set_allocated_sept_name(std::string* sept_name);
  private:
  const std::string& _internal_sept_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sept_name(const std::string& value);
  std::string* _internal_mutable_sept_name();
  public:

  // .idlepb.CharacterModelConfig character_model = 10;
  bool has_character_model() const;
  private:
  bool _internal_has_character_model() const;
  public:
  void clear_character_model();
  const ::idlepb::CharacterModelConfig& character_model() const;
  PROTOBUF_NODISCARD ::idlepb::CharacterModelConfig* release_character_model();
  ::idlepb::CharacterModelConfig* mutable_character_model();
  void set_allocated_character_model(::idlepb::CharacterModelConfig* character_model);
  private:
  const ::idlepb::CharacterModelConfig& _internal_character_model() const;
  ::idlepb::CharacterModelConfig* _internal_mutable_character_model();
  public:
  void unsafe_arena_set_allocated_character_model(
      ::idlepb::CharacterModelConfig* character_model);
  ::idlepb::CharacterModelConfig* unsafe_arena_release_character_model();

  // .idlepb.GameStatsAllModuleData all_stats_data = 19;
  bool has_all_stats_data() const;
  private:
  bool _internal_has_all_stats_data() const;
  public:
  void clear_all_stats_data();
  const ::idlepb::GameStatsAllModuleData& all_stats_data() const;
  PROTOBUF_NODISCARD ::idlepb::GameStatsAllModuleData* release_all_stats_data();
  ::idlepb::GameStatsAllModuleData* mutable_all_stats_data();
  void set_allocated_all_stats_data(::idlepb::GameStatsAllModuleData* all_stats_data);
  private:
  const ::idlepb::GameStatsAllModuleData& _internal_all_stats_data() const;
  ::idlepb::GameStatsAllModuleData* _internal_mutable_all_stats_data();
  public:
  void unsafe_arena_set_allocated_all_stats_data(
      ::idlepb::GameStatsAllModuleData* all_stats_data);
  ::idlepb::GameStatsAllModuleData* unsafe_arena_release_all_stats_data();

  // uint64 user_id = 1;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // uint64 role_id = 2;
  void clear_role_id();
  uint64_t role_id() const;
  void set_role_id(uint64_t value);
  private:
  uint64_t _internal_role_id() const;
  void _internal_set_role_id(uint64_t value);
  public:

  // int64 create_time = 4;
  void clear_create_time();
  int64_t create_time() const;
  void set_create_time(int64_t value);
  private:
  int64_t _internal_create_time() const;
  void _internal_set_create_time(int64_t value);
  public:

  // .idlepb.CultivationDirection cultivation_main_dir = 5;
  void clear_cultivation_main_dir();
  ::idlepb::CultivationDirection cultivation_main_dir() const;
  void set_cultivation_main_dir(::idlepb::CultivationDirection value);
  private:
  ::idlepb::CultivationDirection _internal_cultivation_main_dir() const;
  void _internal_set_cultivation_main_dir(::idlepb::CultivationDirection value);
  public:

  // int32 cultivation_main_rank = 6;
  void clear_cultivation_main_rank();
  int32_t cultivation_main_rank() const;
  void set_cultivation_main_rank(int32_t value);
  private:
  int32_t _internal_cultivation_main_rank() const;
  void _internal_set_cultivation_main_rank(int32_t value);
  public:

  // .idlepb.CultivationDirection cultivation_second_dir = 7;
  void clear_cultivation_second_dir();
  ::idlepb::CultivationDirection cultivation_second_dir() const;
  void set_cultivation_second_dir(::idlepb::CultivationDirection value);
  private:
  ::idlepb::CultivationDirection _internal_cultivation_second_dir() const;
  void _internal_set_cultivation_second_dir(::idlepb::CultivationDirection value);
  public:

  // int32 cultivation_second_rank = 8;
  void clear_cultivation_second_rank();
  int32_t cultivation_second_rank() const;
  void set_cultivation_second_rank(int32_t value);
  private:
  int32_t _internal_cultivation_second_rank() const;
  void _internal_set_cultivation_second_rank(int32_t value);
  public:

  // int64 combat_power = 12;
  void clear_combat_power();
  int64_t combat_power() const;
  void set_combat_power(int64_t value);
  private:
  int64_t _internal_combat_power() const;
  void _internal_set_combat_power(int64_t value);
  public:

  // uint64 sept_id = 15;
  void clear_sept_id();
  uint64_t sept_id() const;
  void set_sept_id(uint64_t value);
  private:
  uint64_t _internal_sept_id() const;
  void _internal_set_sept_id(uint64_t value);
  public:

  // .idlepb.SeptPosition sept_position = 16;
  void clear_sept_position();
  ::idlepb::SeptPosition sept_position() const;
  void set_sept_position(::idlepb::SeptPosition value);
  private:
  ::idlepb::SeptPosition _internal_sept_position() const;
  void _internal_set_sept_position(::idlepb::SeptPosition value);
  public:

  // int32 sept_logo = 18;
  void clear_sept_logo();
  int32_t sept_logo() const;
  void set_sept_logo(int32_t value);
  private:
  int32_t _internal_sept_logo() const;
  void _internal_set_sept_logo(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > title_;
    mutable std::atomic<int> _title_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData > equipments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > unlocked_equipment_slots_;
    mutable std::atomic<int> _unlocked_equipment_slots_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleAbilityData > slotted_abilities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleAbilityData > unslotted_abilities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleGongFaData > gong_fa_entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sept_name_;
    ::idlepb::CharacterModelConfig* character_model_;
    ::idlepb::GameStatsAllModuleData* all_stats_data_;
    uint64_t user_id_;
    uint64_t role_id_;
    int64_t create_time_;
    int cultivation_main_dir_;
    int32_t cultivation_main_rank_;
    int cultivation_second_dir_;
    int32_t cultivation_second_rank_;
    int64_t combat_power_;
    uint64_t sept_id_;
    int sept_position_;
    int32_t sept_logo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleInventoryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleInventoryData) */ {
 public:
  inline RoleInventoryData() : RoleInventoryData(nullptr) {}
  ~RoleInventoryData() override;
  explicit PROTOBUF_CONSTEXPR RoleInventoryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleInventoryData(const RoleInventoryData& from);
  RoleInventoryData(RoleInventoryData&& from) noexcept
    : RoleInventoryData() {
    *this = ::std::move(from);
  }

  inline RoleInventoryData& operator=(const RoleInventoryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleInventoryData& operator=(RoleInventoryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleInventoryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleInventoryData* internal_default_instance() {
    return reinterpret_cast<const RoleInventoryData*>(
               &_RoleInventoryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(RoleInventoryData& a, RoleInventoryData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleInventoryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleInventoryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleInventoryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleInventoryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleInventoryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleInventoryData& from) {
    RoleInventoryData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleInventoryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleInventoryData";
  }
  protected:
  explicit RoleInventoryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kUnlockedEquipmentSlotsFieldNumber = 6,
    kNextItemIdFieldNumber = 2,
    kHpPillCooldownExpireTimeFieldNumber = 4,
    kMpPillCooldownExpireTimeFieldNumber = 5,
    kInventorySpaceNumFieldNumber = 7,
  };
  // repeated .idlepb.ItemData items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::idlepb::ItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >*
      mutable_items();
  private:
  const ::idlepb::ItemData& _internal_items(int index) const;
  ::idlepb::ItemData* _internal_add_items();
  public:
  const ::idlepb::ItemData& items(int index) const;
  ::idlepb::ItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >&
      items() const;

  // repeated int32 unlocked_equipment_slots = 6;
  int unlocked_equipment_slots_size() const;
  private:
  int _internal_unlocked_equipment_slots_size() const;
  public:
  void clear_unlocked_equipment_slots();
  private:
  int32_t _internal_unlocked_equipment_slots(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_unlocked_equipment_slots() const;
  void _internal_add_unlocked_equipment_slots(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_unlocked_equipment_slots();
  public:
  int32_t unlocked_equipment_slots(int index) const;
  void set_unlocked_equipment_slots(int index, int32_t value);
  void add_unlocked_equipment_slots(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      unlocked_equipment_slots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_unlocked_equipment_slots();

  // int64 next_item_id = 2;
  void clear_next_item_id();
  int64_t next_item_id() const;
  void set_next_item_id(int64_t value);
  private:
  int64_t _internal_next_item_id() const;
  void _internal_set_next_item_id(int64_t value);
  public:

  // int64 hp_pill_cooldown_expire_time = 4;
  void clear_hp_pill_cooldown_expire_time();
  int64_t hp_pill_cooldown_expire_time() const;
  void set_hp_pill_cooldown_expire_time(int64_t value);
  private:
  int64_t _internal_hp_pill_cooldown_expire_time() const;
  void _internal_set_hp_pill_cooldown_expire_time(int64_t value);
  public:

  // int64 mp_pill_cooldown_expire_time = 5;
  void clear_mp_pill_cooldown_expire_time();
  int64_t mp_pill_cooldown_expire_time() const;
  void set_mp_pill_cooldown_expire_time(int64_t value);
  private:
  int64_t _internal_mp_pill_cooldown_expire_time() const;
  void _internal_set_mp_pill_cooldown_expire_time(int64_t value);
  public:

  // int32 inventory_space_num = 7;
  void clear_inventory_space_num();
  int32_t inventory_space_num() const;
  void set_inventory_space_num(int32_t value);
  private:
  int32_t _internal_inventory_space_num() const;
  void _internal_set_inventory_space_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleInventoryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData > items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > unlocked_equipment_slots_;
    mutable std::atomic<int> _unlocked_equipment_slots_cached_byte_size_;
    int64_t next_item_id_;
    int64_t hp_pill_cooldown_expire_time_;
    int64_t mp_pill_cooldown_expire_time_;
    int32_t inventory_space_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleTemporaryPackageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleTemporaryPackageData) */ {
 public:
  inline RoleTemporaryPackageData() : RoleTemporaryPackageData(nullptr) {}
  ~RoleTemporaryPackageData() override;
  explicit PROTOBUF_CONSTEXPR RoleTemporaryPackageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleTemporaryPackageData(const RoleTemporaryPackageData& from);
  RoleTemporaryPackageData(RoleTemporaryPackageData&& from) noexcept
    : RoleTemporaryPackageData() {
    *this = ::std::move(from);
  }

  inline RoleTemporaryPackageData& operator=(const RoleTemporaryPackageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleTemporaryPackageData& operator=(RoleTemporaryPackageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleTemporaryPackageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleTemporaryPackageData* internal_default_instance() {
    return reinterpret_cast<const RoleTemporaryPackageData*>(
               &_RoleTemporaryPackageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(RoleTemporaryPackageData& a, RoleTemporaryPackageData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleTemporaryPackageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleTemporaryPackageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleTemporaryPackageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleTemporaryPackageData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleTemporaryPackageData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleTemporaryPackageData& from) {
    RoleTemporaryPackageData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleTemporaryPackageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleTemporaryPackageData";
  }
  protected:
  explicit RoleTemporaryPackageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kLastExtractTimeFieldNumber = 2,
    kNextItemIdFieldNumber = 3,
  };
  // repeated .idlepb.TemporaryPackageItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::idlepb::TemporaryPackageItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::TemporaryPackageItem >*
      mutable_items();
  private:
  const ::idlepb::TemporaryPackageItem& _internal_items(int index) const;
  ::idlepb::TemporaryPackageItem* _internal_add_items();
  public:
  const ::idlepb::TemporaryPackageItem& items(int index) const;
  ::idlepb::TemporaryPackageItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::TemporaryPackageItem >&
      items() const;

  // int64 last_extract_time = 2;
  void clear_last_extract_time();
  int64_t last_extract_time() const;
  void set_last_extract_time(int64_t value);
  private:
  int64_t _internal_last_extract_time() const;
  void _internal_set_last_extract_time(int64_t value);
  public:

  // int64 next_item_id = 3;
  void clear_next_item_id();
  int64_t next_item_id() const;
  void set_next_item_id(int64_t value);
  private:
  int64_t _internal_next_item_id() const;
  void _internal_set_next_item_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleTemporaryPackageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::TemporaryPackageItem > items_;
    int64_t last_extract_time_;
    int64_t next_item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleArenaExplorationStatisticalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleArenaExplorationStatisticalData) */ {
 public:
  inline RoleArenaExplorationStatisticalData() : RoleArenaExplorationStatisticalData(nullptr) {}
  ~RoleArenaExplorationStatisticalData() override;
  explicit PROTOBUF_CONSTEXPR RoleArenaExplorationStatisticalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleArenaExplorationStatisticalData(const RoleArenaExplorationStatisticalData& from);
  RoleArenaExplorationStatisticalData(RoleArenaExplorationStatisticalData&& from) noexcept
    : RoleArenaExplorationStatisticalData() {
    *this = ::std::move(from);
  }

  inline RoleArenaExplorationStatisticalData& operator=(const RoleArenaExplorationStatisticalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleArenaExplorationStatisticalData& operator=(RoleArenaExplorationStatisticalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleArenaExplorationStatisticalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleArenaExplorationStatisticalData* internal_default_instance() {
    return reinterpret_cast<const RoleArenaExplorationStatisticalData*>(
               &_RoleArenaExplorationStatisticalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(RoleArenaExplorationStatisticalData& a, RoleArenaExplorationStatisticalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleArenaExplorationStatisticalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleArenaExplorationStatisticalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleArenaExplorationStatisticalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleArenaExplorationStatisticalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleArenaExplorationStatisticalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleArenaExplorationStatisticalData& from) {
    RoleArenaExplorationStatisticalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleArenaExplorationStatisticalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleArenaExplorationStatisticalData";
  }
  protected:
  explicit RoleArenaExplorationStatisticalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .idlepb.ArenaExplorationStatisticalItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::idlepb::ArenaExplorationStatisticalItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaExplorationStatisticalItem >*
      mutable_items();
  private:
  const ::idlepb::ArenaExplorationStatisticalItem& _internal_items(int index) const;
  ::idlepb::ArenaExplorationStatisticalItem* _internal_add_items();
  public:
  const ::idlepb::ArenaExplorationStatisticalItem& items(int index) const;
  ::idlepb::ArenaExplorationStatisticalItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaExplorationStatisticalItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:idlepb.RoleArenaExplorationStatisticalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaExplorationStatisticalItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API QuestProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.QuestProgress) */ {
 public:
  inline QuestProgress() : QuestProgress(nullptr) {}
  ~QuestProgress() override;
  explicit PROTOBUF_CONSTEXPR QuestProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuestProgress(const QuestProgress& from);
  QuestProgress(QuestProgress&& from) noexcept
    : QuestProgress() {
    *this = ::std::move(from);
  }

  inline QuestProgress& operator=(const QuestProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuestProgress& operator=(QuestProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuestProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuestProgress* internal_default_instance() {
    return reinterpret_cast<const QuestProgress*>(
               &_QuestProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(QuestProgress& a, QuestProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(QuestProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuestProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuestProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuestProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuestProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuestProgress& from) {
    QuestProgress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.QuestProgress";
  }
  protected:
  explicit QuestProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 2,
    kIdFieldNumber = 1,
    kStateFieldNumber = 3,
  };
  // repeated int32 progress = 2;
  int progress_size() const;
  private:
  int _internal_progress_size() const;
  public:
  void clear_progress();
  private:
  int32_t _internal_progress(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_progress() const;
  void _internal_add_progress(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_progress();
  public:
  int32_t progress(int index) const;
  void set_progress(int index, int32_t value);
  void add_progress(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      progress() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_progress();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 state = 3;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.QuestProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > progress_;
    mutable std::atomic<int> _progress_cached_byte_size_;
    int32_t id_;
    int32_t state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleQuestData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleQuestData) */ {
 public:
  inline RoleQuestData() : RoleQuestData(nullptr) {}
  ~RoleQuestData() override;
  explicit PROTOBUF_CONSTEXPR RoleQuestData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleQuestData(const RoleQuestData& from);
  RoleQuestData(RoleQuestData&& from) noexcept
    : RoleQuestData() {
    *this = ::std::move(from);
  }

  inline RoleQuestData& operator=(const RoleQuestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleQuestData& operator=(RoleQuestData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleQuestData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleQuestData* internal_default_instance() {
    return reinterpret_cast<const RoleQuestData*>(
               &_RoleQuestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(RoleQuestData& a, RoleQuestData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleQuestData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleQuestData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleQuestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleQuestData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleQuestData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleQuestData& from) {
    RoleQuestData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleQuestData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleQuestData";
  }
  protected:
  explicit RoleQuestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptedQuestsFieldNumber = 1,
    kFinishedQuestsFieldNumber = 2,
    kQuestsProgressFieldNumber = 3,
  };
  // repeated int32 accepted_quests = 1;
  int accepted_quests_size() const;
  private:
  int _internal_accepted_quests_size() const;
  public:
  void clear_accepted_quests();
  private:
  int32_t _internal_accepted_quests(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_accepted_quests() const;
  void _internal_add_accepted_quests(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_accepted_quests();
  public:
  int32_t accepted_quests(int index) const;
  void set_accepted_quests(int index, int32_t value);
  void add_accepted_quests(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      accepted_quests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_accepted_quests();

  // repeated int32 finished_quests = 2;
  int finished_quests_size() const;
  private:
  int _internal_finished_quests_size() const;
  public:
  void clear_finished_quests();
  private:
  int32_t _internal_finished_quests(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_finished_quests() const;
  void _internal_add_finished_quests(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_finished_quests();
  public:
  int32_t finished_quests(int index) const;
  void set_finished_quests(int index, int32_t value);
  void add_finished_quests(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      finished_quests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_finished_quests();

  // repeated .idlepb.QuestProgress quests_progress = 3;
  int quests_progress_size() const;
  private:
  int _internal_quests_progress_size() const;
  public:
  void clear_quests_progress();
  ::idlepb::QuestProgress* mutable_quests_progress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::QuestProgress >*
      mutable_quests_progress();
  private:
  const ::idlepb::QuestProgress& _internal_quests_progress(int index) const;
  ::idlepb::QuestProgress* _internal_add_quests_progress();
  public:
  const ::idlepb::QuestProgress& quests_progress(int index) const;
  ::idlepb::QuestProgress* add_quests_progress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::QuestProgress >&
      quests_progress() const;

  // @@protoc_insertion_point(class_scope:idlepb.RoleQuestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > accepted_quests_;
    mutable std::atomic<int> _accepted_quests_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > finished_quests_;
    mutable std::atomic<int> _finished_quests_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::QuestProgress > quests_progress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleShopData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleShopData) */ {
 public:
  inline RoleShopData() : RoleShopData(nullptr) {}
  ~RoleShopData() override;
  explicit PROTOBUF_CONSTEXPR RoleShopData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleShopData(const RoleShopData& from);
  RoleShopData(RoleShopData&& from) noexcept
    : RoleShopData() {
    *this = ::std::move(from);
  }

  inline RoleShopData& operator=(const RoleShopData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleShopData& operator=(RoleShopData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleShopData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleShopData* internal_default_instance() {
    return reinterpret_cast<const RoleShopData*>(
               &_RoleShopData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(RoleShopData& a, RoleShopData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleShopData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleShopData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleShopData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleShopData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleShopData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleShopData& from) {
    RoleShopData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleShopData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleShopData";
  }
  protected:
  explicit RoleShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kLastAutoRefreshTimeFieldNumber = 4,
    kTodayManualRefreshNumFieldNumber = 3,
    kGuaranteeRefreshNumFieldNumber = 6,
    kLastResetTimeFieldNumber = 5,
  };
  // repeated .idlepb.ShopItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::idlepb::ShopItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItem >*
      mutable_items();
  private:
  const ::idlepb::ShopItem& _internal_items(int index) const;
  ::idlepb::ShopItem* _internal_add_items();
  public:
  const ::idlepb::ShopItem& items(int index) const;
  ::idlepb::ShopItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItem >&
      items() const;

  // int64 last_auto_refresh_time = 4;
  void clear_last_auto_refresh_time();
  int64_t last_auto_refresh_time() const;
  void set_last_auto_refresh_time(int64_t value);
  private:
  int64_t _internal_last_auto_refresh_time() const;
  void _internal_set_last_auto_refresh_time(int64_t value);
  public:

  // int32 today_manual_refresh_num = 3;
  void clear_today_manual_refresh_num();
  int32_t today_manual_refresh_num() const;
  void set_today_manual_refresh_num(int32_t value);
  private:
  int32_t _internal_today_manual_refresh_num() const;
  void _internal_set_today_manual_refresh_num(int32_t value);
  public:

  // int32 guarantee_refresh_num = 6;
  void clear_guarantee_refresh_num();
  int32_t guarantee_refresh_num() const;
  void set_guarantee_refresh_num(int32_t value);
  private:
  int32_t _internal_guarantee_refresh_num() const;
  void _internal_set_guarantee_refresh_num(int32_t value);
  public:

  // int64 last_reset_time = 5;
  void clear_last_reset_time();
  int64_t last_reset_time() const;
  void set_last_reset_time(int64_t value);
  private:
  int64_t _internal_last_reset_time() const;
  void _internal_set_last_reset_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleShopData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItem > items_;
    int64_t last_auto_refresh_time_;
    int32_t today_manual_refresh_num_;
    int32_t guarantee_refresh_num_;
    int64_t last_reset_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleDeluxeShopData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleDeluxeShopData) */ {
 public:
  inline RoleDeluxeShopData() : RoleDeluxeShopData(nullptr) {}
  ~RoleDeluxeShopData() override;
  explicit PROTOBUF_CONSTEXPR RoleDeluxeShopData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleDeluxeShopData(const RoleDeluxeShopData& from);
  RoleDeluxeShopData(RoleDeluxeShopData&& from) noexcept
    : RoleDeluxeShopData() {
    *this = ::std::move(from);
  }

  inline RoleDeluxeShopData& operator=(const RoleDeluxeShopData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleDeluxeShopData& operator=(RoleDeluxeShopData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleDeluxeShopData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleDeluxeShopData* internal_default_instance() {
    return reinterpret_cast<const RoleDeluxeShopData*>(
               &_RoleDeluxeShopData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(RoleDeluxeShopData& a, RoleDeluxeShopData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleDeluxeShopData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleDeluxeShopData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleDeluxeShopData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleDeluxeShopData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleDeluxeShopData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleDeluxeShopData& from) {
    RoleDeluxeShopData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleDeluxeShopData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleDeluxeShopData";
  }
  protected:
  explicit RoleDeluxeShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kTodayManualRefreshNumItemFieldNumber = 3,
    kTodayManualRefreshNumGoldFieldNumber = 4,
    kLastAutoRefreshTimeFieldNumber = 5,
    kLastResetTimeFieldNumber = 6,
  };
  // repeated .idlepb.DeluxeShopItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::idlepb::DeluxeShopItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::DeluxeShopItem >*
      mutable_items();
  private:
  const ::idlepb::DeluxeShopItem& _internal_items(int index) const;
  ::idlepb::DeluxeShopItem* _internal_add_items();
  public:
  const ::idlepb::DeluxeShopItem& items(int index) const;
  ::idlepb::DeluxeShopItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::DeluxeShopItem >&
      items() const;

  // int32 today_manual_refresh_num_item = 3;
  void clear_today_manual_refresh_num_item();
  int32_t today_manual_refresh_num_item() const;
  void set_today_manual_refresh_num_item(int32_t value);
  private:
  int32_t _internal_today_manual_refresh_num_item() const;
  void _internal_set_today_manual_refresh_num_item(int32_t value);
  public:

  // int32 today_manual_refresh_num_gold = 4;
  void clear_today_manual_refresh_num_gold();
  int32_t today_manual_refresh_num_gold() const;
  void set_today_manual_refresh_num_gold(int32_t value);
  private:
  int32_t _internal_today_manual_refresh_num_gold() const;
  void _internal_set_today_manual_refresh_num_gold(int32_t value);
  public:

  // int64 last_auto_refresh_time = 5;
  void clear_last_auto_refresh_time();
  int64_t last_auto_refresh_time() const;
  void set_last_auto_refresh_time(int64_t value);
  private:
  int64_t _internal_last_auto_refresh_time() const;
  void _internal_set_last_auto_refresh_time(int64_t value);
  public:

  // int64 last_reset_time = 6;
  void clear_last_reset_time();
  int64_t last_reset_time() const;
  void set_last_reset_time(int64_t value);
  private:
  int64_t _internal_last_reset_time() const;
  void _internal_set_last_reset_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleDeluxeShopData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::DeluxeShopItem > items_;
    int32_t today_manual_refresh_num_item_;
    int32_t today_manual_refresh_num_gold_;
    int64_t last_auto_refresh_time_;
    int64_t last_reset_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API MailAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.MailAttachment) */ {
 public:
  inline MailAttachment() : MailAttachment(nullptr) {}
  ~MailAttachment() override;
  explicit PROTOBUF_CONSTEXPR MailAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailAttachment(const MailAttachment& from);
  MailAttachment(MailAttachment&& from) noexcept
    : MailAttachment() {
    *this = ::std::move(from);
  }

  inline MailAttachment& operator=(const MailAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailAttachment& operator=(MailAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailAttachment* internal_default_instance() {
    return reinterpret_cast<const MailAttachment*>(
               &_MailAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(MailAttachment& a, MailAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(MailAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MailAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MailAttachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MailAttachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MailAttachment& from) {
    MailAttachment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.MailAttachment";
  }
  protected:
  explicit MailAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumFieldNumber = 2,
    kReceivedFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // bool received = 3;
  void clear_received();
  bool received() const;
  void set_received(bool value);
  private:
  bool _internal_received() const;
  void _internal_set_received(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.MailAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t num_;
    bool received_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API Mail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.Mail) */ {
 public:
  inline Mail() : Mail(nullptr) {}
  ~Mail() override;
  explicit PROTOBUF_CONSTEXPR Mail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail(const Mail& from);
  Mail(Mail&& from) noexcept
    : Mail() {
    *this = ::std::move(from);
  }

  inline Mail& operator=(const Mail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail& operator=(Mail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail* internal_default_instance() {
    return reinterpret_cast<const Mail*>(
               &_Mail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(Mail& a, Mail& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Mail& from) {
    Mail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.Mail";
  }
  protected:
  explicit Mail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsFieldNumber = 7,
    kEquipmentsFieldNumber = 12,
    kTitleFieldNumber = 3,
    kSubtitleFieldNumber = 4,
    kBodyTextFieldNumber = 5,
    kSenderFieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kBeginDateFieldNumber = 8,
    kKeepTimeFieldNumber = 9,
    kIsReadFieldNumber = 10,
    kIsReceivedFieldNumber = 11,
  };
  // repeated .idlepb.MailAttachment attachments = 7;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  ::idlepb::MailAttachment* mutable_attachments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MailAttachment >*
      mutable_attachments();
  private:
  const ::idlepb::MailAttachment& _internal_attachments(int index) const;
  ::idlepb::MailAttachment* _internal_add_attachments();
  public:
  const ::idlepb::MailAttachment& attachments(int index) const;
  ::idlepb::MailAttachment* add_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MailAttachment >&
      attachments() const;

  // repeated .idlepb.ItemData equipments = 12;
  int equipments_size() const;
  private:
  int _internal_equipments_size() const;
  public:
  void clear_equipments();
  ::idlepb::ItemData* mutable_equipments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >*
      mutable_equipments();
  private:
  const ::idlepb::ItemData& _internal_equipments(int index) const;
  ::idlepb::ItemData* _internal_add_equipments();
  public:
  const ::idlepb::ItemData& equipments(int index) const;
  ::idlepb::ItemData* add_equipments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >&
      equipments() const;

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string subtitle = 4;
  void clear_subtitle();
  const std::string& subtitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtitle();
  PROTOBUF_NODISCARD std::string* release_subtitle();
  void set_allocated_subtitle(std::string* subtitle);
  private:
  const std::string& _internal_subtitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtitle(const std::string& value);
  std::string* _internal_mutable_subtitle();
  public:

  // string body_text = 5;
  void clear_body_text();
  const std::string& body_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body_text();
  PROTOBUF_NODISCARD std::string* release_body_text();
  void set_allocated_body_text(std::string* body_text);
  private:
  const std::string& _internal_body_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body_text(const std::string& value);
  std::string* _internal_mutable_body_text();
  public:

  // string sender = 6;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .idlepb.MailType type = 2;
  void clear_type();
  ::idlepb::MailType type() const;
  void set_type(::idlepb::MailType value);
  private:
  ::idlepb::MailType _internal_type() const;
  void _internal_set_type(::idlepb::MailType value);
  public:

  // int64 begin_date = 8;
  void clear_begin_date();
  int64_t begin_date() const;
  void set_begin_date(int64_t value);
  private:
  int64_t _internal_begin_date() const;
  void _internal_set_begin_date(int64_t value);
  public:

  // int32 keep_time = 9;
  void clear_keep_time();
  int32_t keep_time() const;
  void set_keep_time(int32_t value);
  private:
  int32_t _internal_keep_time() const;
  void _internal_set_keep_time(int32_t value);
  public:

  // bool is_read = 10;
  void clear_is_read();
  bool is_read() const;
  void set_is_read(bool value);
  private:
  bool _internal_is_read() const;
  void _internal_set_is_read(bool value);
  public:

  // bool is_received = 11;
  void clear_is_received();
  bool is_received() const;
  void set_is_received(bool value);
  private:
  bool _internal_is_received() const;
  void _internal_set_is_received(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.Mail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MailAttachment > attachments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData > equipments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtitle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    int32_t id_;
    int type_;
    int64_t begin_date_;
    int32_t keep_time_;
    bool is_read_;
    bool is_received_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleMailData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleMailData) */ {
 public:
  inline RoleMailData() : RoleMailData(nullptr) {}
  ~RoleMailData() override;
  explicit PROTOBUF_CONSTEXPR RoleMailData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleMailData(const RoleMailData& from);
  RoleMailData(RoleMailData&& from) noexcept
    : RoleMailData() {
    *this = ::std::move(from);
  }

  inline RoleMailData& operator=(const RoleMailData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleMailData& operator=(RoleMailData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleMailData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleMailData* internal_default_instance() {
    return reinterpret_cast<const RoleMailData*>(
               &_RoleMailData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(RoleMailData& a, RoleMailData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleMailData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleMailData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleMailData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleMailData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleMailData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleMailData& from) {
    RoleMailData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleMailData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleMailData";
  }
  protected:
  explicit RoleMailData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailBoxFieldNumber = 1,
    kSystemMailCounterFieldNumber = 4,
    kTotalNumFieldNumber = 3,
  };
  // repeated .idlepb.Mail mail_box = 1;
  int mail_box_size() const;
  private:
  int _internal_mail_box_size() const;
  public:
  void clear_mail_box();
  ::idlepb::Mail* mutable_mail_box(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Mail >*
      mutable_mail_box();
  private:
  const ::idlepb::Mail& _internal_mail_box(int index) const;
  ::idlepb::Mail* _internal_add_mail_box();
  public:
  const ::idlepb::Mail& mail_box(int index) const;
  ::idlepb::Mail* add_mail_box();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Mail >&
      mail_box() const;

  // repeated .idlepb.MapValueInt32 system_mail_counter = 4;
  int system_mail_counter_size() const;
  private:
  int _internal_system_mail_counter_size() const;
  public:
  void clear_system_mail_counter();
  ::idlepb::MapValueInt32* mutable_system_mail_counter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >*
      mutable_system_mail_counter();
  private:
  const ::idlepb::MapValueInt32& _internal_system_mail_counter(int index) const;
  ::idlepb::MapValueInt32* _internal_add_system_mail_counter();
  public:
  const ::idlepb::MapValueInt32& system_mail_counter(int index) const;
  ::idlepb::MapValueInt32* add_system_mail_counter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >&
      system_mail_counter() const;

  // int32 total_num = 3;
  void clear_total_num();
  int32_t total_num() const;
  void set_total_num(int32_t value);
  private:
  int32_t _internal_total_num() const;
  void _internal_set_total_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleMailData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Mail > mail_box_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 > system_mail_counter_;
    int32_t total_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API OfflineAwardSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.OfflineAwardSummary) */ {
 public:
  inline OfflineAwardSummary() : OfflineAwardSummary(nullptr) {}
  ~OfflineAwardSummary() override;
  explicit PROTOBUF_CONSTEXPR OfflineAwardSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OfflineAwardSummary(const OfflineAwardSummary& from);
  OfflineAwardSummary(OfflineAwardSummary&& from) noexcept
    : OfflineAwardSummary() {
    *this = ::std::move(from);
  }

  inline OfflineAwardSummary& operator=(const OfflineAwardSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineAwardSummary& operator=(OfflineAwardSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OfflineAwardSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const OfflineAwardSummary* internal_default_instance() {
    return reinterpret_cast<const OfflineAwardSummary*>(
               &_OfflineAwardSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(OfflineAwardSummary& a, OfflineAwardSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineAwardSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineAwardSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OfflineAwardSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OfflineAwardSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OfflineAwardSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OfflineAwardSummary& from) {
    OfflineAwardSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfflineAwardSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.OfflineAwardSummary";
  }
  protected:
  explicit OfflineAwardSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeDuringFieldNumber = 2,
    kAddExpFieldNumber = 3,
    kAddAttrFieldNumber = 4,
    kDirFieldNumber = 1,
  };
  // int64 time_during = 2;
  void clear_time_during();
  int64_t time_during() const;
  void set_time_during(int64_t value);
  private:
  int64_t _internal_time_during() const;
  void _internal_set_time_during(int64_t value);
  public:

  // int64 add_exp = 3;
  void clear_add_exp();
  int64_t add_exp() const;
  void set_add_exp(int64_t value);
  private:
  int64_t _internal_add_exp() const;
  void _internal_set_add_exp(int64_t value);
  public:

  // int64 add_attr = 4;
  void clear_add_attr();
  int64_t add_attr() const;
  void set_add_attr(int64_t value);
  private:
  int64_t _internal_add_attr() const;
  void _internal_set_add_attr(int64_t value);
  public:

  // .idlepb.CultivationDirection dir = 1;
  void clear_dir();
  ::idlepb::CultivationDirection dir() const;
  void set_dir(::idlepb::CultivationDirection value);
  private:
  ::idlepb::CultivationDirection _internal_dir() const;
  void _internal_set_dir(::idlepb::CultivationDirection value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.OfflineAwardSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t time_during_;
    int64_t add_exp_;
    int64_t add_attr_;
    int dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleOfflineData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleOfflineData) */ {
 public:
  inline RoleOfflineData() : RoleOfflineData(nullptr) {}
  ~RoleOfflineData() override;
  explicit PROTOBUF_CONSTEXPR RoleOfflineData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleOfflineData(const RoleOfflineData& from);
  RoleOfflineData(RoleOfflineData&& from) noexcept
    : RoleOfflineData() {
    *this = ::std::move(from);
  }

  inline RoleOfflineData& operator=(const RoleOfflineData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleOfflineData& operator=(RoleOfflineData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleOfflineData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleOfflineData* internal_default_instance() {
    return reinterpret_cast<const RoleOfflineData*>(
               &_RoleOfflineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(RoleOfflineData& a, RoleOfflineData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleOfflineData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleOfflineData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleOfflineData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleOfflineData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleOfflineData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleOfflineData& from) {
    RoleOfflineData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleOfflineData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleOfflineData";
  }
  protected:
  explicit RoleOfflineData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastAwardSummaryFieldNumber = 3,
    kLastExpValueFieldNumber = 1,
    kLastAttrValueFieldNumber = 2,
  };
  // .idlepb.OfflineAwardSummary last_award_summary = 3;
  bool has_last_award_summary() const;
  private:
  bool _internal_has_last_award_summary() const;
  public:
  void clear_last_award_summary();
  const ::idlepb::OfflineAwardSummary& last_award_summary() const;
  PROTOBUF_NODISCARD ::idlepb::OfflineAwardSummary* release_last_award_summary();
  ::idlepb::OfflineAwardSummary* mutable_last_award_summary();
  void set_allocated_last_award_summary(::idlepb::OfflineAwardSummary* last_award_summary);
  private:
  const ::idlepb::OfflineAwardSummary& _internal_last_award_summary() const;
  ::idlepb::OfflineAwardSummary* _internal_mutable_last_award_summary();
  public:
  void unsafe_arena_set_allocated_last_award_summary(
      ::idlepb::OfflineAwardSummary* last_award_summary);
  ::idlepb::OfflineAwardSummary* unsafe_arena_release_last_award_summary();

  // int64 last_exp_value = 1;
  void clear_last_exp_value();
  int64_t last_exp_value() const;
  void set_last_exp_value(int64_t value);
  private:
  int64_t _internal_last_exp_value() const;
  void _internal_set_last_exp_value(int64_t value);
  public:

  // int64 last_attr_value = 2;
  void clear_last_attr_value();
  int64_t last_attr_value() const;
  void set_last_attr_value(int64_t value);
  private:
  int64_t _internal_last_attr_value() const;
  void _internal_set_last_attr_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleOfflineData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::OfflineAwardSummary* last_award_summary_;
    int64_t last_exp_value_;
    int64_t last_attr_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PillElixirData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PillElixirData) */ {
 public:
  inline PillElixirData() : PillElixirData(nullptr) {}
  ~PillElixirData() override;
  explicit PROTOBUF_CONSTEXPR PillElixirData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PillElixirData(const PillElixirData& from);
  PillElixirData(PillElixirData&& from) noexcept
    : PillElixirData() {
    *this = ::std::move(from);
  }

  inline PillElixirData& operator=(const PillElixirData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PillElixirData& operator=(PillElixirData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PillElixirData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PillElixirData* internal_default_instance() {
    return reinterpret_cast<const PillElixirData*>(
               &_PillElixirData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(PillElixirData& a, PillElixirData& b) {
    a.Swap(&b);
  }
  inline void Swap(PillElixirData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PillElixirData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PillElixirData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PillElixirData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PillElixirData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PillElixirData& from) {
    PillElixirData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PillElixirData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PillElixirData";
  }
  protected:
  explicit PillElixirData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kHoldingNumFieldNumber = 2,
  };
  // int32 item_id = 1;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 holding_num = 2;
  void clear_holding_num();
  int32_t holding_num() const;
  void set_holding_num(int32_t value);
  private:
  int32_t _internal_holding_num() const;
  void _internal_set_holding_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PillElixirData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t item_id_;
    int32_t holding_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RolePillElixirData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RolePillElixirData) */ {
 public:
  inline RolePillElixirData() : RolePillElixirData(nullptr) {}
  ~RolePillElixirData() override;
  explicit PROTOBUF_CONSTEXPR RolePillElixirData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RolePillElixirData(const RolePillElixirData& from);
  RolePillElixirData(RolePillElixirData&& from) noexcept
    : RolePillElixirData() {
    *this = ::std::move(from);
  }

  inline RolePillElixirData& operator=(const RolePillElixirData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RolePillElixirData& operator=(RolePillElixirData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RolePillElixirData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RolePillElixirData* internal_default_instance() {
    return reinterpret_cast<const RolePillElixirData*>(
               &_RolePillElixirData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(RolePillElixirData& a, RolePillElixirData& b) {
    a.Swap(&b);
  }
  inline void Swap(RolePillElixirData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RolePillElixirData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RolePillElixirData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RolePillElixirData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RolePillElixirData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RolePillElixirData& from) {
    RolePillElixirData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RolePillElixirData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RolePillElixirData";
  }
  protected:
  explicit RolePillElixirData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPillDataFieldNumber = 1,
    kLimitDoubleFieldNumber = 2,
    kLimitExpFieldNumber = 3,
    kLimitPropertyFieldNumber = 4,
  };
  // repeated .idlepb.PillElixirData pill_data = 1;
  int pill_data_size() const;
  private:
  int _internal_pill_data_size() const;
  public:
  void clear_pill_data();
  ::idlepb::PillElixirData* mutable_pill_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PillElixirData >*
      mutable_pill_data();
  private:
  const ::idlepb::PillElixirData& _internal_pill_data(int index) const;
  ::idlepb::PillElixirData* _internal_add_pill_data();
  public:
  const ::idlepb::PillElixirData& pill_data(int index) const;
  ::idlepb::PillElixirData* add_pill_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PillElixirData >&
      pill_data() const;

  // int32 limit_double = 2;
  void clear_limit_double();
  int32_t limit_double() const;
  void set_limit_double(int32_t value);
  private:
  int32_t _internal_limit_double() const;
  void _internal_set_limit_double(int32_t value);
  public:

  // int32 limit_exp = 3;
  void clear_limit_exp();
  int32_t limit_exp() const;
  void set_limit_exp(int32_t value);
  private:
  int32_t _internal_limit_exp() const;
  void _internal_set_limit_exp(int32_t value);
  public:

  // int32 limit_property = 4;
  void clear_limit_property();
  int32_t limit_property() const;
  void set_limit_property(int32_t value);
  private:
  int32_t _internal_limit_property() const;
  void _internal_set_limit_property(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RolePillElixirData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PillElixirData > pill_data_;
    int32_t limit_double_;
    int32_t limit_exp_;
    int32_t limit_property_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AbilityEffectDefData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AbilityEffectDefData) */ {
 public:
  inline AbilityEffectDefData() : AbilityEffectDefData(nullptr) {}
  ~AbilityEffectDefData() override;
  explicit PROTOBUF_CONSTEXPR AbilityEffectDefData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbilityEffectDefData(const AbilityEffectDefData& from);
  AbilityEffectDefData(AbilityEffectDefData&& from) noexcept
    : AbilityEffectDefData() {
    *this = ::std::move(from);
  }

  inline AbilityEffectDefData& operator=(const AbilityEffectDefData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbilityEffectDefData& operator=(AbilityEffectDefData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbilityEffectDefData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbilityEffectDefData* internal_default_instance() {
    return reinterpret_cast<const AbilityEffectDefData*>(
               &_AbilityEffectDefData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(AbilityEffectDefData& a, AbilityEffectDefData& b) {
    a.Swap(&b);
  }
  inline void Swap(AbilityEffectDefData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbilityEffectDefData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AbilityEffectDefData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AbilityEffectDefData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AbilityEffectDefData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AbilityEffectDefData& from) {
    AbilityEffectDefData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbilityEffectDefData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AbilityEffectDefData";
  }
  protected:
  explicit AbilityEffectDefData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kDurationFieldNumber = 2,
    kPeriodFieldNumber = 3,
    kDurationPolicyFieldNumber = 4,
    kXFieldNumber = 10,
    kYFieldNumber = 11,
    kZFieldNumber = 12,
    kMFieldNumber = 13,
    kNFieldNumber = 14,
  };
  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // float duration = 2;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // float period = 3;
  void clear_period();
  float period() const;
  void set_period(float value);
  private:
  float _internal_period() const;
  void _internal_set_period(float value);
  public:

  // int32 duration_policy = 4;
  void clear_duration_policy();
  int32_t duration_policy() const;
  void set_duration_policy(int32_t value);
  private:
  int32_t _internal_duration_policy() const;
  void _internal_set_duration_policy(int32_t value);
  public:

  // float x = 10;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 11;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 12;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float m = 13;
  void clear_m();
  float m() const;
  void set_m(float value);
  private:
  float _internal_m() const;
  void _internal_set_m(float value);
  public:

  // float n = 14;
  void clear_n();
  float n() const;
  void set_n(float value);
  private:
  float _internal_n() const;
  void _internal_set_n(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AbilityEffectDefData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t type_;
    float duration_;
    float period_;
    int32_t duration_policy_;
    float x_;
    float y_;
    float z_;
    float m_;
    float n_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AbilityData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AbilityData) */ {
 public:
  inline AbilityData() : AbilityData(nullptr) {}
  ~AbilityData() override;
  explicit PROTOBUF_CONSTEXPR AbilityData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbilityData(const AbilityData& from);
  AbilityData(AbilityData&& from) noexcept
    : AbilityData() {
    *this = ::std::move(from);
  }

  inline AbilityData& operator=(const AbilityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbilityData& operator=(AbilityData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbilityData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbilityData* internal_default_instance() {
    return reinterpret_cast<const AbilityData*>(
               &_AbilityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(AbilityData& a, AbilityData& b) {
    a.Swap(&b);
  }
  inline void Swap(AbilityData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbilityData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AbilityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AbilityData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AbilityData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AbilityData& from) {
    AbilityData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbilityData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AbilityData";
  }
  protected:
  explicit AbilityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectDefsFieldNumber = 200,
    kIdFieldNumber = 1,
    kGradeFieldNumber = 2,
    kActivetimeUtcFieldNumber = 3,
    kActivetimeWorldFieldNumber = 4,
    kUniqueIdFieldNumber = 5,
    kStudyGradeFieldNumber = 6,
    kCooldownFieldNumber = 100,
    kTargetNumFieldNumber = 101,
    kTargetDistanceFieldNumber = 102,
    kTargetCatchdistanceFieldNumber = 103,
    kAttackCountFieldNumber = 104,
    kPhyCoefficientFieldNumber = 105,
    kPhyDamageFieldNumber = 106,
    kManaCoefficientFieldNumber = 107,
    kManaDamageFieldNumber = 108,
    kItemIdFieldNumber = 109,
    kItemMaxdamageFieldNumber = 110,
    kItemCfgidFieldNumber = 111,
  };
  // repeated .idlepb.AbilityEffectDefData effect_defs = 200;
  int effect_defs_size() const;
  private:
  int _internal_effect_defs_size() const;
  public:
  void clear_effect_defs();
  ::idlepb::AbilityEffectDefData* mutable_effect_defs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectDefData >*
      mutable_effect_defs();
  private:
  const ::idlepb::AbilityEffectDefData& _internal_effect_defs(int index) const;
  ::idlepb::AbilityEffectDefData* _internal_add_effect_defs();
  public:
  const ::idlepb::AbilityEffectDefData& effect_defs(int index) const;
  ::idlepb::AbilityEffectDefData* add_effect_defs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectDefData >&
      effect_defs() const;

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 grade = 2;
  void clear_grade();
  int32_t grade() const;
  void set_grade(int32_t value);
  private:
  int32_t _internal_grade() const;
  void _internal_set_grade(int32_t value);
  public:

  // int64 activetime_utc = 3;
  void clear_activetime_utc();
  int64_t activetime_utc() const;
  void set_activetime_utc(int64_t value);
  private:
  int64_t _internal_activetime_utc() const;
  void _internal_set_activetime_utc(int64_t value);
  public:

  // float activetime_world = 4;
  void clear_activetime_world();
  float activetime_world() const;
  void set_activetime_world(float value);
  private:
  float _internal_activetime_world() const;
  void _internal_set_activetime_world(float value);
  public:

  // int32 unique_id = 5;
  void clear_unique_id();
  int32_t unique_id() const;
  void set_unique_id(int32_t value);
  private:
  int32_t _internal_unique_id() const;
  void _internal_set_unique_id(int32_t value);
  public:

  // int32 study_grade = 6;
  void clear_study_grade();
  int32_t study_grade() const;
  void set_study_grade(int32_t value);
  private:
  int32_t _internal_study_grade() const;
  void _internal_set_study_grade(int32_t value);
  public:

  // float cooldown = 100;
  void clear_cooldown();
  float cooldown() const;
  void set_cooldown(float value);
  private:
  float _internal_cooldown() const;
  void _internal_set_cooldown(float value);
  public:

  // float target_num = 101;
  void clear_target_num();
  float target_num() const;
  void set_target_num(float value);
  private:
  float _internal_target_num() const;
  void _internal_set_target_num(float value);
  public:

  // float target_distance = 102;
  void clear_target_distance();
  float target_distance() const;
  void set_target_distance(float value);
  private:
  float _internal_target_distance() const;
  void _internal_set_target_distance(float value);
  public:

  // float target_catchdistance = 103;
  void clear_target_catchdistance();
  float target_catchdistance() const;
  void set_target_catchdistance(float value);
  private:
  float _internal_target_catchdistance() const;
  void _internal_set_target_catchdistance(float value);
  public:

  // float attack_count = 104;
  void clear_attack_count();
  float attack_count() const;
  void set_attack_count(float value);
  private:
  float _internal_attack_count() const;
  void _internal_set_attack_count(float value);
  public:

  // float phy_coefficient = 105;
  void clear_phy_coefficient();
  float phy_coefficient() const;
  void set_phy_coefficient(float value);
  private:
  float _internal_phy_coefficient() const;
  void _internal_set_phy_coefficient(float value);
  public:

  // float phy_damage = 106;
  void clear_phy_damage();
  float phy_damage() const;
  void set_phy_damage(float value);
  private:
  float _internal_phy_damage() const;
  void _internal_set_phy_damage(float value);
  public:

  // float mana_coefficient = 107;
  void clear_mana_coefficient();
  float mana_coefficient() const;
  void set_mana_coefficient(float value);
  private:
  float _internal_mana_coefficient() const;
  void _internal_set_mana_coefficient(float value);
  public:

  // float mana_damage = 108;
  void clear_mana_damage();
  float mana_damage() const;
  void set_mana_damage(float value);
  private:
  float _internal_mana_damage() const;
  void _internal_set_mana_damage(float value);
  public:

  // int64 item_id = 109;
  void clear_item_id();
  int64_t item_id() const;
  void set_item_id(int64_t value);
  private:
  int64_t _internal_item_id() const;
  void _internal_set_item_id(int64_t value);
  public:

  // float item_maxdamage = 110;
  void clear_item_maxdamage();
  float item_maxdamage() const;
  void set_item_maxdamage(float value);
  private:
  float _internal_item_maxdamage() const;
  void _internal_set_item_maxdamage(float value);
  public:

  // int32 item_cfgid = 111;
  void clear_item_cfgid();
  int32_t item_cfgid() const;
  void set_item_cfgid(int32_t value);
  private:
  int32_t _internal_item_cfgid() const;
  void _internal_set_item_cfgid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AbilityData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectDefData > effect_defs_;
    int32_t id_;
    int32_t grade_;
    int64_t activetime_utc_;
    float activetime_world_;
    int32_t unique_id_;
    int32_t study_grade_;
    float cooldown_;
    float target_num_;
    float target_distance_;
    float target_catchdistance_;
    float attack_count_;
    float phy_coefficient_;
    float phy_damage_;
    float mana_coefficient_;
    float mana_damage_;
    int64_t item_id_;
    float item_maxdamage_;
    int32_t item_cfgid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerAbilityData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerAbilityData) */ {
 public:
  inline PlayerAbilityData() : PlayerAbilityData(nullptr) {}
  ~PlayerAbilityData() override;
  explicit PROTOBUF_CONSTEXPR PlayerAbilityData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerAbilityData(const PlayerAbilityData& from);
  PlayerAbilityData(PlayerAbilityData&& from) noexcept
    : PlayerAbilityData() {
    *this = ::std::move(from);
  }

  inline PlayerAbilityData& operator=(const PlayerAbilityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAbilityData& operator=(PlayerAbilityData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerAbilityData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerAbilityData* internal_default_instance() {
    return reinterpret_cast<const PlayerAbilityData*>(
               &_PlayerAbilityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(PlayerAbilityData& a, PlayerAbilityData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAbilityData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAbilityData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerAbilityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerAbilityData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerAbilityData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerAbilityData& from) {
    PlayerAbilityData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAbilityData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerAbilityData";
  }
  protected:
  explicit PlayerAbilityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilitiesFieldNumber = 1,
    kSlottedAbilitesFieldNumber = 2,
    kActiveQueueFieldNumber = 3,
    kRevertAllSkillCooldownFieldNumber = 5,
    kIsShiledFirstFieldNumber = 4,
  };
  // repeated .idlepb.AbilityData abilities = 1;
  int abilities_size() const;
  private:
  int _internal_abilities_size() const;
  public:
  void clear_abilities();
  ::idlepb::AbilityData* mutable_abilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityData >*
      mutable_abilities();
  private:
  const ::idlepb::AbilityData& _internal_abilities(int index) const;
  ::idlepb::AbilityData* _internal_add_abilities();
  public:
  const ::idlepb::AbilityData& abilities(int index) const;
  ::idlepb::AbilityData* add_abilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityData >&
      abilities() const;

  // repeated .idlepb.MapValueInt32 slotted_abilites = 2;
  int slotted_abilites_size() const;
  private:
  int _internal_slotted_abilites_size() const;
  public:
  void clear_slotted_abilites();
  ::idlepb::MapValueInt32* mutable_slotted_abilites(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >*
      mutable_slotted_abilites();
  private:
  const ::idlepb::MapValueInt32& _internal_slotted_abilites(int index) const;
  ::idlepb::MapValueInt32* _internal_add_slotted_abilites();
  public:
  const ::idlepb::MapValueInt32& slotted_abilites(int index) const;
  ::idlepb::MapValueInt32* add_slotted_abilites();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >&
      slotted_abilites() const;

  // repeated int32 active_queue = 3;
  int active_queue_size() const;
  private:
  int _internal_active_queue_size() const;
  public:
  void clear_active_queue();
  private:
  int32_t _internal_active_queue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_active_queue() const;
  void _internal_add_active_queue(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_active_queue();
  public:
  int32_t active_queue(int index) const;
  void set_active_queue(int index, int32_t value);
  void add_active_queue(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      active_queue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_active_queue();

  // int64 revert_all_skill_cooldown = 5;
  void clear_revert_all_skill_cooldown();
  int64_t revert_all_skill_cooldown() const;
  void set_revert_all_skill_cooldown(int64_t value);
  private:
  int64_t _internal_revert_all_skill_cooldown() const;
  void _internal_set_revert_all_skill_cooldown(int64_t value);
  public:

  // bool is_shiled_first = 4;
  void clear_is_shiled_first();
  bool is_shiled_first() const;
  void set_is_shiled_first(bool value);
  private:
  bool _internal_is_shiled_first() const;
  void _internal_set_is_shiled_first(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerAbilityData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityData > abilities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 > slotted_abilites_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > active_queue_;
    mutable std::atomic<int> _active_queue_cached_byte_size_;
    int64_t revert_all_skill_cooldown_;
    bool is_shiled_first_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleZasData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleZasData) */ {
 public:
  inline RoleZasData() : RoleZasData(nullptr) {}
  ~RoleZasData() override;
  explicit PROTOBUF_CONSTEXPR RoleZasData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleZasData(const RoleZasData& from);
  RoleZasData(RoleZasData&& from) noexcept
    : RoleZasData() {
    *this = ::std::move(from);
  }

  inline RoleZasData& operator=(const RoleZasData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleZasData& operator=(RoleZasData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleZasData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleZasData* internal_default_instance() {
    return reinterpret_cast<const RoleZasData*>(
               &_RoleZasData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(RoleZasData& a, RoleZasData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleZasData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleZasData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleZasData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleZasData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleZasData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleZasData& from) {
    RoleZasData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleZasData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleZasData";
  }
  protected:
  explicit RoleZasData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZasAbilityFieldNumber = 2,
    kZasVersionFieldNumber = 1,
    kShentongUpgradePointUseNumFieldNumber = 11,
  };
  // .idlepb.PlayerAbilityData zas_ability = 2;
  bool has_zas_ability() const;
  private:
  bool _internal_has_zas_ability() const;
  public:
  void clear_zas_ability();
  const ::idlepb::PlayerAbilityData& zas_ability() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerAbilityData* release_zas_ability();
  ::idlepb::PlayerAbilityData* mutable_zas_ability();
  void set_allocated_zas_ability(::idlepb::PlayerAbilityData* zas_ability);
  private:
  const ::idlepb::PlayerAbilityData& _internal_zas_ability() const;
  ::idlepb::PlayerAbilityData* _internal_mutable_zas_ability();
  public:
  void unsafe_arena_set_allocated_zas_ability(
      ::idlepb::PlayerAbilityData* zas_ability);
  ::idlepb::PlayerAbilityData* unsafe_arena_release_zas_ability();

  // int32 zas_version = 1;
  void clear_zas_version();
  int32_t zas_version() const;
  void set_zas_version(int32_t value);
  private:
  int32_t _internal_zas_version() const;
  void _internal_set_zas_version(int32_t value);
  public:

  // int32 shentong_upgrade_point_use_num = 11;
  void clear_shentong_upgrade_point_use_num();
  int32_t shentong_upgrade_point_use_num() const;
  void set_shentong_upgrade_point_use_num(int32_t value);
  private:
  int32_t _internal_shentong_upgrade_point_use_num() const;
  void _internal_set_shentong_upgrade_point_use_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleZasData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::PlayerAbilityData* zas_ability_;
    int32_t zas_version_;
    int32_t shentong_upgrade_point_use_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AbilityPKResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AbilityPKResult) */ {
 public:
  inline AbilityPKResult() : AbilityPKResult(nullptr) {}
  ~AbilityPKResult() override;
  explicit PROTOBUF_CONSTEXPR AbilityPKResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbilityPKResult(const AbilityPKResult& from);
  AbilityPKResult(AbilityPKResult&& from) noexcept
    : AbilityPKResult() {
    *this = ::std::move(from);
  }

  inline AbilityPKResult& operator=(const AbilityPKResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbilityPKResult& operator=(AbilityPKResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbilityPKResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbilityPKResult* internal_default_instance() {
    return reinterpret_cast<const AbilityPKResult*>(
               &_AbilityPKResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(AbilityPKResult& a, AbilityPKResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AbilityPKResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbilityPKResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AbilityPKResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AbilityPKResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AbilityPKResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AbilityPKResult& from) {
    AbilityPKResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbilityPKResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AbilityPKResult";
  }
  protected:
  explicit AbilityPKResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstigatorFieldNumber = 1,
    kTargetFieldNumber = 2,
    kDamageFieldNumber = 10,
    kAdditionalDamageFieldNumber = 11,
    kIsHitFieldNumber = 12,
    kIsCriticalFieldNumber = 13,
    kIsCounteredFieldNumber = 14,
    kIsExtremedamageFieldNumber = 15,
    kCountereddamageFieldNumber = 16,
    kCurrentattackcountFieldNumber = 17,
    kShieldSuckdamageFieldNumber = 18,
    kIsCounteredCriticalFieldNumber = 19,
    kCounteredShieldSuckdamageFieldNumber = 20,
  };
  // uint64 instigator = 1;
  void clear_instigator();
  uint64_t instigator() const;
  void set_instigator(uint64_t value);
  private:
  uint64_t _internal_instigator() const;
  void _internal_set_instigator(uint64_t value);
  public:

  // uint64 target = 2;
  void clear_target();
  uint64_t target() const;
  void set_target(uint64_t value);
  private:
  uint64_t _internal_target() const;
  void _internal_set_target(uint64_t value);
  public:

  // float damage = 10;
  void clear_damage();
  float damage() const;
  void set_damage(float value);
  private:
  float _internal_damage() const;
  void _internal_set_damage(float value);
  public:

  // float additional_damage = 11;
  void clear_additional_damage();
  float additional_damage() const;
  void set_additional_damage(float value);
  private:
  float _internal_additional_damage() const;
  void _internal_set_additional_damage(float value);
  public:

  // bool is_hit = 12;
  void clear_is_hit();
  bool is_hit() const;
  void set_is_hit(bool value);
  private:
  bool _internal_is_hit() const;
  void _internal_set_is_hit(bool value);
  public:

  // bool is_critical = 13;
  void clear_is_critical();
  bool is_critical() const;
  void set_is_critical(bool value);
  private:
  bool _internal_is_critical() const;
  void _internal_set_is_critical(bool value);
  public:

  // bool is_countered = 14;
  void clear_is_countered();
  bool is_countered() const;
  void set_is_countered(bool value);
  private:
  bool _internal_is_countered() const;
  void _internal_set_is_countered(bool value);
  public:

  // bool is_extremedamage = 15;
  void clear_is_extremedamage();
  bool is_extremedamage() const;
  void set_is_extremedamage(bool value);
  private:
  bool _internal_is_extremedamage() const;
  void _internal_set_is_extremedamage(bool value);
  public:

  // float countereddamage = 16;
  void clear_countereddamage();
  float countereddamage() const;
  void set_countereddamage(float value);
  private:
  float _internal_countereddamage() const;
  void _internal_set_countereddamage(float value);
  public:

  // int32 currentattackcount = 17;
  void clear_currentattackcount();
  int32_t currentattackcount() const;
  void set_currentattackcount(int32_t value);
  private:
  int32_t _internal_currentattackcount() const;
  void _internal_set_currentattackcount(int32_t value);
  public:

  // float shield_suckdamage = 18;
  void clear_shield_suckdamage();
  float shield_suckdamage() const;
  void set_shield_suckdamage(float value);
  private:
  float _internal_shield_suckdamage() const;
  void _internal_set_shield_suckdamage(float value);
  public:

  // bool is_countered_critical = 19;
  void clear_is_countered_critical();
  bool is_countered_critical() const;
  void set_is_countered_critical(bool value);
  private:
  bool _internal_is_countered_critical() const;
  void _internal_set_is_countered_critical(bool value);
  public:

  // float countered_shield_suckdamage = 20;
  void clear_countered_shield_suckdamage();
  float countered_shield_suckdamage() const;
  void set_countered_shield_suckdamage(float value);
  private:
  float _internal_countered_shield_suckdamage() const;
  void _internal_set_countered_shield_suckdamage(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AbilityPKResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t instigator_;
    uint64_t target_;
    float damage_;
    float additional_damage_;
    bool is_hit_;
    bool is_critical_;
    bool is_countered_;
    bool is_extremedamage_;
    float countereddamage_;
    int32_t currentattackcount_;
    float shield_suckdamage_;
    bool is_countered_critical_;
    float countered_shield_suckdamage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AbilityActiveResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AbilityActiveResult) */ {
 public:
  inline AbilityActiveResult() : AbilityActiveResult(nullptr) {}
  ~AbilityActiveResult() override;
  explicit PROTOBUF_CONSTEXPR AbilityActiveResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbilityActiveResult(const AbilityActiveResult& from);
  AbilityActiveResult(AbilityActiveResult&& from) noexcept
    : AbilityActiveResult() {
    *this = ::std::move(from);
  }

  inline AbilityActiveResult& operator=(const AbilityActiveResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbilityActiveResult& operator=(AbilityActiveResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbilityActiveResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbilityActiveResult* internal_default_instance() {
    return reinterpret_cast<const AbilityActiveResult*>(
               &_AbilityActiveResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(AbilityActiveResult& a, AbilityActiveResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AbilityActiveResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbilityActiveResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AbilityActiveResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AbilityActiveResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AbilityActiveResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AbilityActiveResult& from) {
    AbilityActiveResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbilityActiveResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AbilityActiveResult";
  }
  protected:
  explicit AbilityActiveResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 5,
    kEffectsFieldNumber = 6,
    kEidFieldNumber = 1,
    kAbilityFieldNumber = 2,
    kAbilityUniqueIdFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // repeated .idlepb.AbilityPKResult results = 5;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::idlepb::AbilityPKResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityPKResult >*
      mutable_results();
  private:
  const ::idlepb::AbilityPKResult& _internal_results(int index) const;
  ::idlepb::AbilityPKResult* _internal_add_results();
  public:
  const ::idlepb::AbilityPKResult& results(int index) const;
  ::idlepb::AbilityPKResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityPKResult >&
      results() const;

  // repeated int32 effects = 6;
  int effects_size() const;
  private:
  int _internal_effects_size() const;
  public:
  void clear_effects();
  private:
  int32_t _internal_effects(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_effects() const;
  void _internal_add_effects(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_effects();
  public:
  int32_t effects(int index) const;
  void set_effects(int index, int32_t value);
  void add_effects(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      effects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_effects();

  // uint64 eid = 1;
  void clear_eid();
  uint64_t eid() const;
  void set_eid(uint64_t value);
  private:
  uint64_t _internal_eid() const;
  void _internal_set_eid(uint64_t value);
  public:

  // int32 ability = 2;
  void clear_ability();
  int32_t ability() const;
  void set_ability(int32_t value);
  private:
  int32_t _internal_ability() const;
  void _internal_set_ability(int32_t value);
  public:

  // int32 ability_unique_id = 3;
  void clear_ability_unique_id();
  int32_t ability_unique_id() const;
  void set_ability_unique_id(int32_t value);
  private:
  int32_t _internal_ability_unique_id() const;
  void _internal_set_ability_unique_id(int32_t value);
  public:

  // .idlepb.AbilityActiveErrorCode error = 4;
  void clear_error();
  ::idlepb::AbilityActiveErrorCode error() const;
  void set_error(::idlepb::AbilityActiveErrorCode value);
  private:
  ::idlepb::AbilityActiveErrorCode _internal_error() const;
  void _internal_set_error(::idlepb::AbilityActiveErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AbilityActiveResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityPKResult > results_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > effects_;
    mutable std::atomic<int> _effects_cached_byte_size_;
    uint64_t eid_;
    int32_t ability_;
    int32_t ability_unique_id_;
    int error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ShanhetuItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ShanhetuItem) */ {
 public:
  inline ShanhetuItem() : ShanhetuItem(nullptr) {}
  ~ShanhetuItem() override;
  explicit PROTOBUF_CONSTEXPR ShanhetuItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShanhetuItem(const ShanhetuItem& from);
  ShanhetuItem(ShanhetuItem&& from) noexcept
    : ShanhetuItem() {
    *this = ::std::move(from);
  }

  inline ShanhetuItem& operator=(const ShanhetuItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShanhetuItem& operator=(ShanhetuItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShanhetuItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShanhetuItem* internal_default_instance() {
    return reinterpret_cast<const ShanhetuItem*>(
               &_ShanhetuItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(ShanhetuItem& a, ShanhetuItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ShanhetuItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShanhetuItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShanhetuItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShanhetuItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShanhetuItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShanhetuItem& from) {
    ShanhetuItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShanhetuItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ShanhetuItem";
  }
  protected:
  explicit ShanhetuItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kNumFieldNumber = 2,
    kWeightFieldNumber = 3,
    kScoreFieldNumber = 4,
  };
  // int32 item_id = 1;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // int32 weight = 3;
  void clear_weight();
  int32_t weight() const;
  void set_weight(int32_t value);
  private:
  int32_t _internal_weight() const;
  void _internal_set_weight(int32_t value);
  public:

  // int32 score = 4;
  void clear_score();
  int32_t score() const;
  void set_score(int32_t value);
  private:
  int32_t _internal_score() const;
  void _internal_set_score(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ShanhetuItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t item_id_;
    int32_t num_;
    int32_t weight_;
    int32_t score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ShanhetuRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ShanhetuRecord) */ {
 public:
  inline ShanhetuRecord() : ShanhetuRecord(nullptr) {}
  ~ShanhetuRecord() override;
  explicit PROTOBUF_CONSTEXPR ShanhetuRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShanhetuRecord(const ShanhetuRecord& from);
  ShanhetuRecord(ShanhetuRecord&& from) noexcept
    : ShanhetuRecord() {
    *this = ::std::move(from);
  }

  inline ShanhetuRecord& operator=(const ShanhetuRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShanhetuRecord& operator=(ShanhetuRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShanhetuRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShanhetuRecord* internal_default_instance() {
    return reinterpret_cast<const ShanhetuRecord*>(
               &_ShanhetuRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ShanhetuRecord& a, ShanhetuRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ShanhetuRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShanhetuRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShanhetuRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShanhetuRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShanhetuRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShanhetuRecord& from) {
    ShanhetuRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShanhetuRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ShanhetuRecord";
  }
  protected:
  explicit ShanhetuRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 5,
    kUidFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kScaleIdFieldNumber = 3,
    kUseTimeFieldNumber = 6,
    kScoreFieldNumber = 4,
  };
  // repeated .idlepb.ShanhetuItem items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::idlepb::ShanhetuItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuItem >*
      mutable_items();
  private:
  const ::idlepb::ShanhetuItem& _internal_items(int index) const;
  ::idlepb::ShanhetuItem* _internal_add_items();
  public:
  const ::idlepb::ShanhetuItem& items(int index) const;
  ::idlepb::ShanhetuItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuItem >&
      items() const;

  // int64 uid = 1;
  void clear_uid();
  int64_t uid() const;
  void set_uid(int64_t value);
  private:
  int64_t _internal_uid() const;
  void _internal_set_uid(int64_t value);
  public:

  // int32 item_id = 2;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 scale_id = 3;
  void clear_scale_id();
  int32_t scale_id() const;
  void set_scale_id(int32_t value);
  private:
  int32_t _internal_scale_id() const;
  void _internal_set_scale_id(int32_t value);
  public:

  // int64 use_time = 6;
  void clear_use_time();
  int64_t use_time() const;
  void set_use_time(int64_t value);
  private:
  int64_t _internal_use_time() const;
  void _internal_set_use_time(int64_t value);
  public:

  // int32 score = 4;
  void clear_score();
  int32_t score() const;
  void set_score(int32_t value);
  private:
  int32_t _internal_score() const;
  void _internal_set_score(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ShanhetuRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuItem > items_;
    int64_t uid_;
    int32_t item_id_;
    int32_t scale_id_;
    int64_t use_time_;
    int32_t score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ShanhetuBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ShanhetuBlock) */ {
 public:
  inline ShanhetuBlock() : ShanhetuBlock(nullptr) {}
  ~ShanhetuBlock() override;
  explicit PROTOBUF_CONSTEXPR ShanhetuBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShanhetuBlock(const ShanhetuBlock& from);
  ShanhetuBlock(ShanhetuBlock&& from) noexcept
    : ShanhetuBlock() {
    *this = ::std::move(from);
  }

  inline ShanhetuBlock& operator=(const ShanhetuBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShanhetuBlock& operator=(ShanhetuBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShanhetuBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShanhetuBlock* internal_default_instance() {
    return reinterpret_cast<const ShanhetuBlock*>(
               &_ShanhetuBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(ShanhetuBlock& a, ShanhetuBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(ShanhetuBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShanhetuBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShanhetuBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShanhetuBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShanhetuBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShanhetuBlock& from) {
    ShanhetuBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShanhetuBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ShanhetuBlock";
  }
  protected:
  explicit ShanhetuBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 3,
    kTypeFieldNumber = 1,
    kQualityFieldNumber = 2,
    kEventCfgIdFieldNumber = 11,
  };
  // .idlepb.ShanhetuItem item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::idlepb::ShanhetuItem& item() const;
  PROTOBUF_NODISCARD ::idlepb::ShanhetuItem* release_item();
  ::idlepb::ShanhetuItem* mutable_item();
  void set_allocated_item(::idlepb::ShanhetuItem* item);
  private:
  const ::idlepb::ShanhetuItem& _internal_item() const;
  ::idlepb::ShanhetuItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::idlepb::ShanhetuItem* item);
  ::idlepb::ShanhetuItem* unsafe_arena_release_item();

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 quality = 2;
  void clear_quality();
  int32_t quality() const;
  void set_quality(int32_t value);
  private:
  int32_t _internal_quality() const;
  void _internal_set_quality(int32_t value);
  public:

  // int32 event_cfg_id = 11;
  void clear_event_cfg_id();
  int32_t event_cfg_id() const;
  void set_event_cfg_id(int32_t value);
  private:
  int32_t _internal_event_cfg_id() const;
  void _internal_set_event_cfg_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ShanhetuBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::ShanhetuItem* item_;
    int32_t type_;
    int32_t quality_;
    int32_t event_cfg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ShanhetuBlockRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ShanhetuBlockRow) */ {
 public:
  inline ShanhetuBlockRow() : ShanhetuBlockRow(nullptr) {}
  ~ShanhetuBlockRow() override;
  explicit PROTOBUF_CONSTEXPR ShanhetuBlockRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShanhetuBlockRow(const ShanhetuBlockRow& from);
  ShanhetuBlockRow(ShanhetuBlockRow&& from) noexcept
    : ShanhetuBlockRow() {
    *this = ::std::move(from);
  }

  inline ShanhetuBlockRow& operator=(const ShanhetuBlockRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShanhetuBlockRow& operator=(ShanhetuBlockRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShanhetuBlockRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShanhetuBlockRow* internal_default_instance() {
    return reinterpret_cast<const ShanhetuBlockRow*>(
               &_ShanhetuBlockRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(ShanhetuBlockRow& a, ShanhetuBlockRow& b) {
    a.Swap(&b);
  }
  inline void Swap(ShanhetuBlockRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShanhetuBlockRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShanhetuBlockRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShanhetuBlockRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShanhetuBlockRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShanhetuBlockRow& from) {
    ShanhetuBlockRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShanhetuBlockRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ShanhetuBlockRow";
  }
  protected:
  explicit ShanhetuBlockRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
  };
  // repeated .idlepb.ShanhetuBlock blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::idlepb::ShanhetuBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuBlock >*
      mutable_blocks();
  private:
  const ::idlepb::ShanhetuBlock& _internal_blocks(int index) const;
  ::idlepb::ShanhetuBlock* _internal_add_blocks();
  public:
  const ::idlepb::ShanhetuBlock& blocks(int index) const;
  ::idlepb::ShanhetuBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuBlock >&
      blocks() const;

  // @@protoc_insertion_point(class_scope:idlepb.ShanhetuBlockRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuBlock > blocks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ShanhetuMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ShanhetuMap) */ {
 public:
  inline ShanhetuMap() : ShanhetuMap(nullptr) {}
  ~ShanhetuMap() override;
  explicit PROTOBUF_CONSTEXPR ShanhetuMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShanhetuMap(const ShanhetuMap& from);
  ShanhetuMap(ShanhetuMap&& from) noexcept
    : ShanhetuMap() {
    *this = ::std::move(from);
  }

  inline ShanhetuMap& operator=(const ShanhetuMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShanhetuMap& operator=(ShanhetuMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShanhetuMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShanhetuMap* internal_default_instance() {
    return reinterpret_cast<const ShanhetuMap*>(
               &_ShanhetuMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(ShanhetuMap& a, ShanhetuMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ShanhetuMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShanhetuMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShanhetuMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShanhetuMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShanhetuMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShanhetuMap& from) {
    ShanhetuMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShanhetuMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ShanhetuMap";
  }
  protected:
  explicit ShanhetuMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 4,
    kRecordFieldNumber = 3,
    kDoneFieldNumber = 1,
    kCurrentRowFieldNumber = 2,
  };
  // repeated .idlepb.ShanhetuBlockRow map = 4;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  ::idlepb::ShanhetuBlockRow* mutable_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuBlockRow >*
      mutable_map();
  private:
  const ::idlepb::ShanhetuBlockRow& _internal_map(int index) const;
  ::idlepb::ShanhetuBlockRow* _internal_add_map();
  public:
  const ::idlepb::ShanhetuBlockRow& map(int index) const;
  ::idlepb::ShanhetuBlockRow* add_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuBlockRow >&
      map() const;

  // .idlepb.ShanhetuRecord record = 3;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::idlepb::ShanhetuRecord& record() const;
  PROTOBUF_NODISCARD ::idlepb::ShanhetuRecord* release_record();
  ::idlepb::ShanhetuRecord* mutable_record();
  void set_allocated_record(::idlepb::ShanhetuRecord* record);
  private:
  const ::idlepb::ShanhetuRecord& _internal_record() const;
  ::idlepb::ShanhetuRecord* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::idlepb::ShanhetuRecord* record);
  ::idlepb::ShanhetuRecord* unsafe_arena_release_record();

  // bool done = 1;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // int32 current_row = 2;
  void clear_current_row();
  int32_t current_row() const;
  void set_current_row(int32_t value);
  private:
  int32_t _internal_current_row() const;
  void _internal_set_current_row(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ShanhetuMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuBlockRow > map_;
    ::idlepb::ShanhetuRecord* record_;
    bool done_;
    int32_t current_row_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleShanhetuData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleShanhetuData) */ {
 public:
  inline RoleShanhetuData() : RoleShanhetuData(nullptr) {}
  ~RoleShanhetuData() override;
  explicit PROTOBUF_CONSTEXPR RoleShanhetuData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleShanhetuData(const RoleShanhetuData& from);
  RoleShanhetuData(RoleShanhetuData&& from) noexcept
    : RoleShanhetuData() {
    *this = ::std::move(from);
  }

  inline RoleShanhetuData& operator=(const RoleShanhetuData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleShanhetuData& operator=(RoleShanhetuData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleShanhetuData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleShanhetuData* internal_default_instance() {
    return reinterpret_cast<const RoleShanhetuData*>(
               &_RoleShanhetuData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(RoleShanhetuData& a, RoleShanhetuData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleShanhetuData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleShanhetuData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleShanhetuData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleShanhetuData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleShanhetuData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleShanhetuData& from) {
    RoleShanhetuData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleShanhetuData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleShanhetuData";
  }
  protected:
  explicit RoleShanhetuData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 9,
    kCurrentMapFieldNumber = 7,
    kAutoSkipGreenFieldNumber = 1,
    kAutoSkipBlueFieldNumber = 2,
    kAutoSkipPerpoFieldNumber = 3,
    kAutoSkipGoldFieldNumber = 4,
    kAutoSkipRedFieldNumber = 5,
    kTotalNumFieldNumber = 8,
    kLastUpdateDateFieldNumber = 12,
    kAutoSelectFieldNumber = 6,
  };
  // repeated .idlepb.ShanhetuRecord records = 9;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::idlepb::ShanhetuRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuRecord >*
      mutable_records();
  private:
  const ::idlepb::ShanhetuRecord& _internal_records(int index) const;
  ::idlepb::ShanhetuRecord* _internal_add_records();
  public:
  const ::idlepb::ShanhetuRecord& records(int index) const;
  ::idlepb::ShanhetuRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuRecord >&
      records() const;

  // .idlepb.ShanhetuMap current_map = 7;
  bool has_current_map() const;
  private:
  bool _internal_has_current_map() const;
  public:
  void clear_current_map();
  const ::idlepb::ShanhetuMap& current_map() const;
  PROTOBUF_NODISCARD ::idlepb::ShanhetuMap* release_current_map();
  ::idlepb::ShanhetuMap* mutable_current_map();
  void set_allocated_current_map(::idlepb::ShanhetuMap* current_map);
  private:
  const ::idlepb::ShanhetuMap& _internal_current_map() const;
  ::idlepb::ShanhetuMap* _internal_mutable_current_map();
  public:
  void unsafe_arena_set_allocated_current_map(
      ::idlepb::ShanhetuMap* current_map);
  ::idlepb::ShanhetuMap* unsafe_arena_release_current_map();

  // bool auto_skip_green = 1;
  void clear_auto_skip_green();
  bool auto_skip_green() const;
  void set_auto_skip_green(bool value);
  private:
  bool _internal_auto_skip_green() const;
  void _internal_set_auto_skip_green(bool value);
  public:

  // bool auto_skip_blue = 2;
  void clear_auto_skip_blue();
  bool auto_skip_blue() const;
  void set_auto_skip_blue(bool value);
  private:
  bool _internal_auto_skip_blue() const;
  void _internal_set_auto_skip_blue(bool value);
  public:

  // bool auto_skip_perpo = 3;
  void clear_auto_skip_perpo();
  bool auto_skip_perpo() const;
  void set_auto_skip_perpo(bool value);
  private:
  bool _internal_auto_skip_perpo() const;
  void _internal_set_auto_skip_perpo(bool value);
  public:

  // bool auto_skip_gold = 4;
  void clear_auto_skip_gold();
  bool auto_skip_gold() const;
  void set_auto_skip_gold(bool value);
  private:
  bool _internal_auto_skip_gold() const;
  void _internal_set_auto_skip_gold(bool value);
  public:

  // bool auto_skip_red = 5;
  void clear_auto_skip_red();
  bool auto_skip_red() const;
  void set_auto_skip_red(bool value);
  private:
  bool _internal_auto_skip_red() const;
  void _internal_set_auto_skip_red(bool value);
  public:

  // int64 total_num = 8;
  void clear_total_num();
  int64_t total_num() const;
  void set_total_num(int64_t value);
  private:
  int64_t _internal_total_num() const;
  void _internal_set_total_num(int64_t value);
  public:

  // int64 last_update_date = 12;
  void clear_last_update_date();
  int64_t last_update_date() const;
  void set_last_update_date(int64_t value);
  private:
  int64_t _internal_last_update_date() const;
  void _internal_set_last_update_date(int64_t value);
  public:

  // int32 auto_select = 6;
  void clear_auto_select();
  int32_t auto_select() const;
  void set_auto_select(int32_t value);
  private:
  int32_t _internal_auto_select() const;
  void _internal_set_auto_select(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleShanhetuData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuRecord > records_;
    ::idlepb::ShanhetuMap* current_map_;
    bool auto_skip_green_;
    bool auto_skip_blue_;
    bool auto_skip_perpo_;
    bool auto_skip_gold_;
    bool auto_skip_red_;
    int64_t total_num_;
    int64_t last_update_date_;
    int32_t auto_select_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleLeaderboardData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleLeaderboardData) */ {
 public:
  inline RoleLeaderboardData() : RoleLeaderboardData(nullptr) {}
  ~RoleLeaderboardData() override;
  explicit PROTOBUF_CONSTEXPR RoleLeaderboardData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleLeaderboardData(const RoleLeaderboardData& from);
  RoleLeaderboardData(RoleLeaderboardData&& from) noexcept
    : RoleLeaderboardData() {
    *this = ::std::move(from);
  }

  inline RoleLeaderboardData& operator=(const RoleLeaderboardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleLeaderboardData& operator=(RoleLeaderboardData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleLeaderboardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleLeaderboardData* internal_default_instance() {
    return reinterpret_cast<const RoleLeaderboardData*>(
               &_RoleLeaderboardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(RoleLeaderboardData& a, RoleLeaderboardData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleLeaderboardData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleLeaderboardData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleLeaderboardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleLeaderboardData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleLeaderboardData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleLeaderboardData& from) {
    RoleLeaderboardData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleLeaderboardData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleLeaderboardData";
  }
  protected:
  explicit RoleLeaderboardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasReceivedChallangeRewardFieldNumber = 23,
    kRankMessageFieldNumber = 5,
    kWeaponFieldNumber = 6,
    kAmmorFieldNumber = 7,
    kJewleryFieldNumber = 8,
    kSkillWeaponFieldNumber = 9,
    kShanhetuHistoryFieldNumber = 10,
    kShanhetuWeekFieldNumber = 11,
    kRoleIdFieldNumber = 1,
    kLastResetTimeFieldNumber = 4,
    kBlikeNumFieldNumber = 2,
    kMonsterTowerBlikeNumFieldNumber = 22,
    kFuzeRankFieldNumber = 24,
    kFuzeDaysFieldNumber = 25,
    kFuzeExpFieldNumber = 26,
    kFuzeLeaderboardRankFieldNumber = 27,
  };
  // repeated int32 has_received_challange_reward = 23;
  int has_received_challange_reward_size() const;
  private:
  int _internal_has_received_challange_reward_size() const;
  public:
  void clear_has_received_challange_reward();
  private:
  int32_t _internal_has_received_challange_reward(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_has_received_challange_reward() const;
  void _internal_add_has_received_challange_reward(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_has_received_challange_reward();
  public:
  int32_t has_received_challange_reward(int index) const;
  void set_has_received_challange_reward(int index, int32_t value);
  void add_has_received_challange_reward(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      has_received_challange_reward() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_has_received_challange_reward();

  // string rank_message = 5;
  void clear_rank_message();
  const std::string& rank_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rank_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rank_message();
  PROTOBUF_NODISCARD std::string* release_rank_message();
  void set_allocated_rank_message(std::string* rank_message);
  private:
  const std::string& _internal_rank_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rank_message(const std::string& value);
  std::string* _internal_mutable_rank_message();
  public:

  // .idlepb.ItemData weapon = 6;
  bool has_weapon() const;
  private:
  bool _internal_has_weapon() const;
  public:
  void clear_weapon();
  const ::idlepb::ItemData& weapon() const;
  PROTOBUF_NODISCARD ::idlepb::ItemData* release_weapon();
  ::idlepb::ItemData* mutable_weapon();
  void set_allocated_weapon(::idlepb::ItemData* weapon);
  private:
  const ::idlepb::ItemData& _internal_weapon() const;
  ::idlepb::ItemData* _internal_mutable_weapon();
  public:
  void unsafe_arena_set_allocated_weapon(
      ::idlepb::ItemData* weapon);
  ::idlepb::ItemData* unsafe_arena_release_weapon();

  // .idlepb.ItemData ammor = 7;
  bool has_ammor() const;
  private:
  bool _internal_has_ammor() const;
  public:
  void clear_ammor();
  const ::idlepb::ItemData& ammor() const;
  PROTOBUF_NODISCARD ::idlepb::ItemData* release_ammor();
  ::idlepb::ItemData* mutable_ammor();
  void set_allocated_ammor(::idlepb::ItemData* ammor);
  private:
  const ::idlepb::ItemData& _internal_ammor() const;
  ::idlepb::ItemData* _internal_mutable_ammor();
  public:
  void unsafe_arena_set_allocated_ammor(
      ::idlepb::ItemData* ammor);
  ::idlepb::ItemData* unsafe_arena_release_ammor();

  // .idlepb.ItemData jewlery = 8;
  bool has_jewlery() const;
  private:
  bool _internal_has_jewlery() const;
  public:
  void clear_jewlery();
  const ::idlepb::ItemData& jewlery() const;
  PROTOBUF_NODISCARD ::idlepb::ItemData* release_jewlery();
  ::idlepb::ItemData* mutable_jewlery();
  void set_allocated_jewlery(::idlepb::ItemData* jewlery);
  private:
  const ::idlepb::ItemData& _internal_jewlery() const;
  ::idlepb::ItemData* _internal_mutable_jewlery();
  public:
  void unsafe_arena_set_allocated_jewlery(
      ::idlepb::ItemData* jewlery);
  ::idlepb::ItemData* unsafe_arena_release_jewlery();

  // .idlepb.ItemData skill_weapon = 9;
  bool has_skill_weapon() const;
  private:
  bool _internal_has_skill_weapon() const;
  public:
  void clear_skill_weapon();
  const ::idlepb::ItemData& skill_weapon() const;
  PROTOBUF_NODISCARD ::idlepb::ItemData* release_skill_weapon();
  ::idlepb::ItemData* mutable_skill_weapon();
  void set_allocated_skill_weapon(::idlepb::ItemData* skill_weapon);
  private:
  const ::idlepb::ItemData& _internal_skill_weapon() const;
  ::idlepb::ItemData* _internal_mutable_skill_weapon();
  public:
  void unsafe_arena_set_allocated_skill_weapon(
      ::idlepb::ItemData* skill_weapon);
  ::idlepb::ItemData* unsafe_arena_release_skill_weapon();

  // .idlepb.ShanhetuRecord shanhetu_history = 10;
  bool has_shanhetu_history() const;
  private:
  bool _internal_has_shanhetu_history() const;
  public:
  void clear_shanhetu_history();
  const ::idlepb::ShanhetuRecord& shanhetu_history() const;
  PROTOBUF_NODISCARD ::idlepb::ShanhetuRecord* release_shanhetu_history();
  ::idlepb::ShanhetuRecord* mutable_shanhetu_history();
  void set_allocated_shanhetu_history(::idlepb::ShanhetuRecord* shanhetu_history);
  private:
  const ::idlepb::ShanhetuRecord& _internal_shanhetu_history() const;
  ::idlepb::ShanhetuRecord* _internal_mutable_shanhetu_history();
  public:
  void unsafe_arena_set_allocated_shanhetu_history(
      ::idlepb::ShanhetuRecord* shanhetu_history);
  ::idlepb::ShanhetuRecord* unsafe_arena_release_shanhetu_history();

  // .idlepb.ShanhetuRecord shanhetu_week = 11;
  bool has_shanhetu_week() const;
  private:
  bool _internal_has_shanhetu_week() const;
  public:
  void clear_shanhetu_week();
  const ::idlepb::ShanhetuRecord& shanhetu_week() const;
  PROTOBUF_NODISCARD ::idlepb::ShanhetuRecord* release_shanhetu_week();
  ::idlepb::ShanhetuRecord* mutable_shanhetu_week();
  void set_allocated_shanhetu_week(::idlepb::ShanhetuRecord* shanhetu_week);
  private:
  const ::idlepb::ShanhetuRecord& _internal_shanhetu_week() const;
  ::idlepb::ShanhetuRecord* _internal_mutable_shanhetu_week();
  public:
  void unsafe_arena_set_allocated_shanhetu_week(
      ::idlepb::ShanhetuRecord* shanhetu_week);
  ::idlepb::ShanhetuRecord* unsafe_arena_release_shanhetu_week();

  // int64 role_id = 1;
  void clear_role_id();
  int64_t role_id() const;
  void set_role_id(int64_t value);
  private:
  int64_t _internal_role_id() const;
  void _internal_set_role_id(int64_t value);
  public:

  // int64 last_reset_time = 4;
  void clear_last_reset_time();
  int64_t last_reset_time() const;
  void set_last_reset_time(int64_t value);
  private:
  int64_t _internal_last_reset_time() const;
  void _internal_set_last_reset_time(int64_t value);
  public:

  // int32 blike_num = 2;
  void clear_blike_num();
  int32_t blike_num() const;
  void set_blike_num(int32_t value);
  private:
  int32_t _internal_blike_num() const;
  void _internal_set_blike_num(int32_t value);
  public:

  // int32 monster_tower_blike_num = 22;
  void clear_monster_tower_blike_num();
  int32_t monster_tower_blike_num() const;
  void set_monster_tower_blike_num(int32_t value);
  private:
  int32_t _internal_monster_tower_blike_num() const;
  void _internal_set_monster_tower_blike_num(int32_t value);
  public:

  // int32 fuze_rank = 24;
  void clear_fuze_rank();
  int32_t fuze_rank() const;
  void set_fuze_rank(int32_t value);
  private:
  int32_t _internal_fuze_rank() const;
  void _internal_set_fuze_rank(int32_t value);
  public:

  // int32 fuze_days = 25;
  void clear_fuze_days();
  int32_t fuze_days() const;
  void set_fuze_days(int32_t value);
  private:
  int32_t _internal_fuze_days() const;
  void _internal_set_fuze_days(int32_t value);
  public:

  // int64 fuze_exp = 26;
  void clear_fuze_exp();
  int64_t fuze_exp() const;
  void set_fuze_exp(int64_t value);
  private:
  int64_t _internal_fuze_exp() const;
  void _internal_set_fuze_exp(int64_t value);
  public:

  // int32 fuze_leaderboard_rank = 27;
  void clear_fuze_leaderboard_rank();
  int32_t fuze_leaderboard_rank() const;
  void set_fuze_leaderboard_rank(int32_t value);
  private:
  int32_t _internal_fuze_leaderboard_rank() const;
  void _internal_set_fuze_leaderboard_rank(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleLeaderboardData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > has_received_challange_reward_;
    mutable std::atomic<int> _has_received_challange_reward_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rank_message_;
    ::idlepb::ItemData* weapon_;
    ::idlepb::ItemData* ammor_;
    ::idlepb::ItemData* jewlery_;
    ::idlepb::ItemData* skill_weapon_;
    ::idlepb::ShanhetuRecord* shanhetu_history_;
    ::idlepb::ShanhetuRecord* shanhetu_week_;
    int64_t role_id_;
    int64_t last_reset_time_;
    int32_t blike_num_;
    int32_t monster_tower_blike_num_;
    int32_t fuze_rank_;
    int32_t fuze_days_;
    int64_t fuze_exp_;
    int32_t fuze_leaderboard_rank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleMonsterTowerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleMonsterTowerData) */ {
 public:
  inline RoleMonsterTowerData() : RoleMonsterTowerData(nullptr) {}
  ~RoleMonsterTowerData() override;
  explicit PROTOBUF_CONSTEXPR RoleMonsterTowerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleMonsterTowerData(const RoleMonsterTowerData& from);
  RoleMonsterTowerData(RoleMonsterTowerData&& from) noexcept
    : RoleMonsterTowerData() {
    *this = ::std::move(from);
  }

  inline RoleMonsterTowerData& operator=(const RoleMonsterTowerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleMonsterTowerData& operator=(RoleMonsterTowerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleMonsterTowerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleMonsterTowerData* internal_default_instance() {
    return reinterpret_cast<const RoleMonsterTowerData*>(
               &_RoleMonsterTowerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(RoleMonsterTowerData& a, RoleMonsterTowerData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleMonsterTowerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleMonsterTowerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleMonsterTowerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleMonsterTowerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleMonsterTowerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleMonsterTowerData& from) {
    RoleMonsterTowerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleMonsterTowerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleMonsterTowerData";
  }
  protected:
  explicit RoleMonsterTowerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdleDuringTicksFieldNumber = 2,
    kLastFloorFieldNumber = 1,
  };
  // int64 idle_during_ticks = 2;
  void clear_idle_during_ticks();
  int64_t idle_during_ticks() const;
  void set_idle_during_ticks(int64_t value);
  private:
  int64_t _internal_idle_during_ticks() const;
  void _internal_set_idle_during_ticks(int64_t value);
  public:

  // int32 last_floor = 1;
  void clear_last_floor();
  int32_t last_floor() const;
  void set_last_floor(int32_t value);
  private:
  int32_t _internal_last_floor() const;
  void _internal_set_last_floor(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleMonsterTowerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t idle_during_ticks_;
    int32_t last_floor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleDungeonKillAllData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleDungeonKillAllData) */ {
 public:
  inline RoleDungeonKillAllData() : RoleDungeonKillAllData(nullptr) {}
  ~RoleDungeonKillAllData() override;
  explicit PROTOBUF_CONSTEXPR RoleDungeonKillAllData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleDungeonKillAllData(const RoleDungeonKillAllData& from);
  RoleDungeonKillAllData(RoleDungeonKillAllData&& from) noexcept
    : RoleDungeonKillAllData() {
    *this = ::std::move(from);
  }

  inline RoleDungeonKillAllData& operator=(const RoleDungeonKillAllData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleDungeonKillAllData& operator=(RoleDungeonKillAllData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleDungeonKillAllData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleDungeonKillAllData* internal_default_instance() {
    return reinterpret_cast<const RoleDungeonKillAllData*>(
               &_RoleDungeonKillAllData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(RoleDungeonKillAllData& a, RoleDungeonKillAllData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleDungeonKillAllData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleDungeonKillAllData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleDungeonKillAllData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleDungeonKillAllData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleDungeonKillAllData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleDungeonKillAllData& from) {
    RoleDungeonKillAllData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleDungeonKillAllData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleDungeonKillAllData";
  }
  protected:
  explicit RoleDungeonKillAllData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoneUidFieldNumber = 1,
  };
  // repeated int32 done_uid = 1;
  int done_uid_size() const;
  private:
  int _internal_done_uid_size() const;
  public:
  void clear_done_uid();
  private:
  int32_t _internal_done_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_done_uid() const;
  void _internal_add_done_uid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_done_uid();
  public:
  int32_t done_uid(int index) const;
  void set_done_uid(int index, int32_t value);
  void add_done_uid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      done_uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_done_uid();

  // @@protoc_insertion_point(class_scope:idlepb.RoleDungeonKillAllData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > done_uid_;
    mutable std::atomic<int> _done_uid_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleDungeonSurviveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleDungeonSurviveData) */ {
 public:
  inline RoleDungeonSurviveData() : RoleDungeonSurviveData(nullptr) {}
  ~RoleDungeonSurviveData() override;
  explicit PROTOBUF_CONSTEXPR RoleDungeonSurviveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleDungeonSurviveData(const RoleDungeonSurviveData& from);
  RoleDungeonSurviveData(RoleDungeonSurviveData&& from) noexcept
    : RoleDungeonSurviveData() {
    *this = ::std::move(from);
  }

  inline RoleDungeonSurviveData& operator=(const RoleDungeonSurviveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleDungeonSurviveData& operator=(RoleDungeonSurviveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleDungeonSurviveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleDungeonSurviveData* internal_default_instance() {
    return reinterpret_cast<const RoleDungeonSurviveData*>(
               &_RoleDungeonSurviveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(RoleDungeonSurviveData& a, RoleDungeonSurviveData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleDungeonSurviveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleDungeonSurviveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleDungeonSurviveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleDungeonSurviveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleDungeonSurviveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleDungeonSurviveData& from) {
    RoleDungeonSurviveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleDungeonSurviveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleDungeonSurviveData";
  }
  protected:
  explicit RoleDungeonSurviveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoneUidFieldNumber = 1,
  };
  // repeated int32 done_uid = 1;
  int done_uid_size() const;
  private:
  int _internal_done_uid_size() const;
  public:
  void clear_done_uid();
  private:
  int32_t _internal_done_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_done_uid() const;
  void _internal_add_done_uid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_done_uid();
  public:
  int32_t done_uid(int index) const;
  void set_done_uid(int index, int32_t value);
  void add_done_uid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      done_uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_done_uid();

  // @@protoc_insertion_point(class_scope:idlepb.RoleDungeonSurviveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > done_uid_;
    mutable std::atomic<int> _done_uid_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API BossInvasionRewardEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.BossInvasionRewardEntry) */ {
 public:
  inline BossInvasionRewardEntry() : BossInvasionRewardEntry(nullptr) {}
  ~BossInvasionRewardEntry() override;
  explicit PROTOBUF_CONSTEXPR BossInvasionRewardEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BossInvasionRewardEntry(const BossInvasionRewardEntry& from);
  BossInvasionRewardEntry(BossInvasionRewardEntry&& from) noexcept
    : BossInvasionRewardEntry() {
    *this = ::std::move(from);
  }

  inline BossInvasionRewardEntry& operator=(const BossInvasionRewardEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline BossInvasionRewardEntry& operator=(BossInvasionRewardEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BossInvasionRewardEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const BossInvasionRewardEntry* internal_default_instance() {
    return reinterpret_cast<const BossInvasionRewardEntry*>(
               &_BossInvasionRewardEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(BossInvasionRewardEntry& a, BossInvasionRewardEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(BossInvasionRewardEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BossInvasionRewardEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BossInvasionRewardEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BossInvasionRewardEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BossInvasionRewardEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BossInvasionRewardEntry& from) {
    BossInvasionRewardEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BossInvasionRewardEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.BossInvasionRewardEntry";
  }
  protected:
  explicit BossInvasionRewardEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kArenaCfgIdFieldNumber = 2,
    kRankFieldNumber = 3,
  };
  // int64 unique_id = 1;
  void clear_unique_id();
  int64_t unique_id() const;
  void set_unique_id(int64_t value);
  private:
  int64_t _internal_unique_id() const;
  void _internal_set_unique_id(int64_t value);
  public:

  // int32 arena_cfg_id = 2;
  void clear_arena_cfg_id();
  int32_t arena_cfg_id() const;
  void set_arena_cfg_id(int32_t value);
  private:
  int32_t _internal_arena_cfg_id() const;
  void _internal_set_arena_cfg_id(int32_t value);
  public:

  // int32 rank = 3;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.BossInvasionRewardEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t unique_id_;
    int32_t arena_cfg_id_;
    int32_t rank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API BossInvasionKillRewardData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.BossInvasionKillRewardData) */ {
 public:
  inline BossInvasionKillRewardData() : BossInvasionKillRewardData(nullptr) {}
  ~BossInvasionKillRewardData() override;
  explicit PROTOBUF_CONSTEXPR BossInvasionKillRewardData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BossInvasionKillRewardData(const BossInvasionKillRewardData& from);
  BossInvasionKillRewardData(BossInvasionKillRewardData&& from) noexcept
    : BossInvasionKillRewardData() {
    *this = ::std::move(from);
  }

  inline BossInvasionKillRewardData& operator=(const BossInvasionKillRewardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BossInvasionKillRewardData& operator=(BossInvasionKillRewardData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BossInvasionKillRewardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BossInvasionKillRewardData* internal_default_instance() {
    return reinterpret_cast<const BossInvasionKillRewardData*>(
               &_BossInvasionKillRewardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(BossInvasionKillRewardData& a, BossInvasionKillRewardData& b) {
    a.Swap(&b);
  }
  inline void Swap(BossInvasionKillRewardData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BossInvasionKillRewardData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BossInvasionKillRewardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BossInvasionKillRewardData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BossInvasionKillRewardData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BossInvasionKillRewardData& from) {
    BossInvasionKillRewardData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BossInvasionKillRewardData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.BossInvasionKillRewardData";
  }
  protected:
  explicit BossInvasionKillRewardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardsFieldNumber = 2,
    kStartTicksFieldNumber = 1,
    kDrawedUniqueIdFieldNumber = 4,
    kIsDrawDoneFieldNumber = 3,
  };
  // repeated .idlepb.BossInvasionRewardEntry rewards = 2;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;
  public:
  void clear_rewards();
  ::idlepb::BossInvasionRewardEntry* mutable_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionRewardEntry >*
      mutable_rewards();
  private:
  const ::idlepb::BossInvasionRewardEntry& _internal_rewards(int index) const;
  ::idlepb::BossInvasionRewardEntry* _internal_add_rewards();
  public:
  const ::idlepb::BossInvasionRewardEntry& rewards(int index) const;
  ::idlepb::BossInvasionRewardEntry* add_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionRewardEntry >&
      rewards() const;

  // int64 start_ticks = 1;
  void clear_start_ticks();
  int64_t start_ticks() const;
  void set_start_ticks(int64_t value);
  private:
  int64_t _internal_start_ticks() const;
  void _internal_set_start_ticks(int64_t value);
  public:

  // int64 drawed_unique_id = 4;
  void clear_drawed_unique_id();
  int64_t drawed_unique_id() const;
  void set_drawed_unique_id(int64_t value);
  private:
  int64_t _internal_drawed_unique_id() const;
  void _internal_set_drawed_unique_id(int64_t value);
  public:

  // bool is_draw_done = 3;
  void clear_is_draw_done();
  bool is_draw_done() const;
  void set_is_draw_done(bool value);
  private:
  bool _internal_is_draw_done() const;
  void _internal_set_is_draw_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.BossInvasionKillRewardData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionRewardEntry > rewards_;
    int64_t start_ticks_;
    int64_t drawed_unique_id_;
    bool is_draw_done_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API BossInvasionDamageRewardData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.BossInvasionDamageRewardData) */ {
 public:
  inline BossInvasionDamageRewardData() : BossInvasionDamageRewardData(nullptr) {}
  ~BossInvasionDamageRewardData() override;
  explicit PROTOBUF_CONSTEXPR BossInvasionDamageRewardData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BossInvasionDamageRewardData(const BossInvasionDamageRewardData& from);
  BossInvasionDamageRewardData(BossInvasionDamageRewardData&& from) noexcept
    : BossInvasionDamageRewardData() {
    *this = ::std::move(from);
  }

  inline BossInvasionDamageRewardData& operator=(const BossInvasionDamageRewardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BossInvasionDamageRewardData& operator=(BossInvasionDamageRewardData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BossInvasionDamageRewardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BossInvasionDamageRewardData* internal_default_instance() {
    return reinterpret_cast<const BossInvasionDamageRewardData*>(
               &_BossInvasionDamageRewardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(BossInvasionDamageRewardData& a, BossInvasionDamageRewardData& b) {
    a.Swap(&b);
  }
  inline void Swap(BossInvasionDamageRewardData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BossInvasionDamageRewardData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BossInvasionDamageRewardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BossInvasionDamageRewardData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BossInvasionDamageRewardData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BossInvasionDamageRewardData& from) {
    BossInvasionDamageRewardData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BossInvasionDamageRewardData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.BossInvasionDamageRewardData";
  }
  protected:
  explicit BossInvasionDamageRewardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardsFieldNumber = 2,
    kStartTicksFieldNumber = 1,
  };
  // repeated .idlepb.BossInvasionRewardEntry rewards = 2;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;
  public:
  void clear_rewards();
  ::idlepb::BossInvasionRewardEntry* mutable_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionRewardEntry >*
      mutable_rewards();
  private:
  const ::idlepb::BossInvasionRewardEntry& _internal_rewards(int index) const;
  ::idlepb::BossInvasionRewardEntry* _internal_add_rewards();
  public:
  const ::idlepb::BossInvasionRewardEntry& rewards(int index) const;
  ::idlepb::BossInvasionRewardEntry* add_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionRewardEntry >&
      rewards() const;

  // int64 start_ticks = 1;
  void clear_start_ticks();
  int64_t start_ticks() const;
  void set_start_ticks(int64_t value);
  private:
  int64_t _internal_start_ticks() const;
  void _internal_set_start_ticks(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.BossInvasionDamageRewardData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionRewardEntry > rewards_;
    int64_t start_ticks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleBossInvasionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleBossInvasionData) */ {
 public:
  inline RoleBossInvasionData() : RoleBossInvasionData(nullptr) {}
  ~RoleBossInvasionData() override;
  explicit PROTOBUF_CONSTEXPR RoleBossInvasionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleBossInvasionData(const RoleBossInvasionData& from);
  RoleBossInvasionData(RoleBossInvasionData&& from) noexcept
    : RoleBossInvasionData() {
    *this = ::std::move(from);
  }

  inline RoleBossInvasionData& operator=(const RoleBossInvasionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleBossInvasionData& operator=(RoleBossInvasionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleBossInvasionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleBossInvasionData* internal_default_instance() {
    return reinterpret_cast<const RoleBossInvasionData*>(
               &_RoleBossInvasionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(RoleBossInvasionData& a, RoleBossInvasionData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleBossInvasionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleBossInvasionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleBossInvasionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleBossInvasionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleBossInvasionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleBossInvasionData& from) {
    RoleBossInvasionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleBossInvasionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleBossInvasionData";
  }
  protected:
  explicit RoleBossInvasionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDamageRewardFieldNumber = 12,
    kKillRewardFieldNumber = 10,
    kLastResetTicksFieldNumber = 1,
    kDrawedUniqueIdFieldNumber = 14,
  };
  // repeated .idlepb.BossInvasionDamageRewardData damage_reward = 12;
  int damage_reward_size() const;
  private:
  int _internal_damage_reward_size() const;
  public:
  void clear_damage_reward();
  ::idlepb::BossInvasionDamageRewardData* mutable_damage_reward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionDamageRewardData >*
      mutable_damage_reward();
  private:
  const ::idlepb::BossInvasionDamageRewardData& _internal_damage_reward(int index) const;
  ::idlepb::BossInvasionDamageRewardData* _internal_add_damage_reward();
  public:
  const ::idlepb::BossInvasionDamageRewardData& damage_reward(int index) const;
  ::idlepb::BossInvasionDamageRewardData* add_damage_reward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionDamageRewardData >&
      damage_reward() const;

  // .idlepb.BossInvasionKillRewardData kill_reward = 10;
  bool has_kill_reward() const;
  private:
  bool _internal_has_kill_reward() const;
  public:
  void clear_kill_reward();
  const ::idlepb::BossInvasionKillRewardData& kill_reward() const;
  PROTOBUF_NODISCARD ::idlepb::BossInvasionKillRewardData* release_kill_reward();
  ::idlepb::BossInvasionKillRewardData* mutable_kill_reward();
  void set_allocated_kill_reward(::idlepb::BossInvasionKillRewardData* kill_reward);
  private:
  const ::idlepb::BossInvasionKillRewardData& _internal_kill_reward() const;
  ::idlepb::BossInvasionKillRewardData* _internal_mutable_kill_reward();
  public:
  void unsafe_arena_set_allocated_kill_reward(
      ::idlepb::BossInvasionKillRewardData* kill_reward);
  ::idlepb::BossInvasionKillRewardData* unsafe_arena_release_kill_reward();

  // int64 last_reset_ticks = 1;
  void clear_last_reset_ticks();
  int64_t last_reset_ticks() const;
  void set_last_reset_ticks(int64_t value);
  private:
  int64_t _internal_last_reset_ticks() const;
  void _internal_set_last_reset_ticks(int64_t value);
  public:

  // int64 drawed_unique_id = 14;
  void clear_drawed_unique_id();
  int64_t drawed_unique_id() const;
  void set_drawed_unique_id(int64_t value);
  private:
  int64_t _internal_drawed_unique_id() const;
  void _internal_set_drawed_unique_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleBossInvasionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionDamageRewardData > damage_reward_;
    ::idlepb::BossInvasionKillRewardData* kill_reward_;
    int64_t last_reset_ticks_;
    int64_t drawed_unique_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleMasiveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleMasiveData) */ {
 public:
  inline RoleMasiveData() : RoleMasiveData(nullptr) {}
  ~RoleMasiveData() override;
  explicit PROTOBUF_CONSTEXPR RoleMasiveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleMasiveData(const RoleMasiveData& from);
  RoleMasiveData(RoleMasiveData&& from) noexcept
    : RoleMasiveData() {
    *this = ::std::move(from);
  }

  inline RoleMasiveData& operator=(const RoleMasiveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleMasiveData& operator=(RoleMasiveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleMasiveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleMasiveData* internal_default_instance() {
    return reinterpret_cast<const RoleMasiveData*>(
               &_RoleMasiveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(RoleMasiveData& a, RoleMasiveData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleMasiveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleMasiveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleMasiveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleMasiveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleMasiveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleMasiveData& from) {
    RoleMasiveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleMasiveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleMasiveData";
  }
  protected:
  explicit RoleMasiveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserVarsFieldNumber = 1,
    kNextSelfUniqueIdFieldNumber = 2,
  };
  // repeated .idlepb.StringKeyInt32ValueEntry user_vars = 1;
  int user_vars_size() const;
  private:
  int _internal_user_vars_size() const;
  public:
  void clear_user_vars();
  ::idlepb::StringKeyInt32ValueEntry* mutable_user_vars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::StringKeyInt32ValueEntry >*
      mutable_user_vars();
  private:
  const ::idlepb::StringKeyInt32ValueEntry& _internal_user_vars(int index) const;
  ::idlepb::StringKeyInt32ValueEntry* _internal_add_user_vars();
  public:
  const ::idlepb::StringKeyInt32ValueEntry& user_vars(int index) const;
  ::idlepb::StringKeyInt32ValueEntry* add_user_vars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::StringKeyInt32ValueEntry >&
      user_vars() const;

  // int64 next_self_unique_id = 2;
  void clear_next_self_unique_id();
  int64_t next_self_unique_id() const;
  void set_next_self_unique_id(int64_t value);
  private:
  int64_t _internal_next_self_unique_id() const;
  void _internal_set_next_self_unique_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleMasiveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::StringKeyInt32ValueEntry > user_vars_;
    int64_t next_self_unique_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CheckTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CheckTask) */ {
 public:
  inline CheckTask() : CheckTask(nullptr) {}
  ~CheckTask() override;
  explicit PROTOBUF_CONSTEXPR CheckTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckTask(const CheckTask& from);
  CheckTask(CheckTask&& from) noexcept
    : CheckTask() {
    *this = ::std::move(from);
  }

  inline CheckTask& operator=(const CheckTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckTask& operator=(CheckTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckTask* internal_default_instance() {
    return reinterpret_cast<const CheckTask*>(
               &_CheckTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CheckTask& a, CheckTask& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckTask& from) {
    CheckTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CheckTask";
  }
  protected:
  explicit CheckTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kNeedNumFieldNumber = 3,
    kPointFieldNumber = 4,
    kProgressFieldNumber = 5,
    kIsSubmittedFieldNumber = 6,
  };
  // int32 task_id = 1;
  void clear_task_id();
  int32_t task_id() const;
  void set_task_id(int32_t value);
  private:
  int32_t _internal_task_id() const;
  void _internal_set_task_id(int32_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 need_num = 3;
  void clear_need_num();
  int32_t need_num() const;
  void set_need_num(int32_t value);
  private:
  int32_t _internal_need_num() const;
  void _internal_set_need_num(int32_t value);
  public:

  // int32 point = 4;
  void clear_point();
  int32_t point() const;
  void set_point(int32_t value);
  private:
  int32_t _internal_point() const;
  void _internal_set_point(int32_t value);
  public:

  // int32 progress = 5;
  void clear_progress();
  int32_t progress() const;
  void set_progress(int32_t value);
  private:
  int32_t _internal_progress() const;
  void _internal_set_progress(int32_t value);
  public:

  // bool is_submitted = 6;
  void clear_is_submitted();
  bool is_submitted() const;
  void set_is_submitted(bool value);
  private:
  bool _internal_is_submitted() const;
  void _internal_set_is_submitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CheckTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t task_id_;
    int32_t type_;
    int32_t need_num_;
    int32_t point_;
    int32_t progress_;
    bool is_submitted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleChecklistData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleChecklistData) */ {
 public:
  inline RoleChecklistData() : RoleChecklistData(nullptr) {}
  ~RoleChecklistData() override;
  explicit PROTOBUF_CONSTEXPR RoleChecklistData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleChecklistData(const RoleChecklistData& from);
  RoleChecklistData(RoleChecklistData&& from) noexcept
    : RoleChecklistData() {
    *this = ::std::move(from);
  }

  inline RoleChecklistData& operator=(const RoleChecklistData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleChecklistData& operator=(RoleChecklistData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleChecklistData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleChecklistData* internal_default_instance() {
    return reinterpret_cast<const RoleChecklistData*>(
               &_RoleChecklistData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(RoleChecklistData& a, RoleChecklistData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleChecklistData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleChecklistData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleChecklistData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleChecklistData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleChecklistData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleChecklistData& from) {
    RoleChecklistData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleChecklistData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleChecklistData";
  }
  protected:
  explicit RoleChecklistData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayTasksFieldNumber = 3,
    kWeekTasksFieldNumber = 4,
    kDayPointFieldNumber = 1,
    kWeekPointFieldNumber = 2,
    kDayReceivedTimeFieldNumber = 5,
    kWeekReceivedTimeFieldNumber = 6,
    kLastResetDayTimeFieldNumber = 7,
    kLastResetWeekTimeFieldNumber = 8,
    kBossInvasionTimeFieldNumber = 9,
    kDegreeLockedDayFieldNumber = 10,
    kDegreeLockedWeekFieldNumber = 11,
  };
  // repeated .idlepb.CheckTask day_tasks = 3;
  int day_tasks_size() const;
  private:
  int _internal_day_tasks_size() const;
  public:
  void clear_day_tasks();
  ::idlepb::CheckTask* mutable_day_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CheckTask >*
      mutable_day_tasks();
  private:
  const ::idlepb::CheckTask& _internal_day_tasks(int index) const;
  ::idlepb::CheckTask* _internal_add_day_tasks();
  public:
  const ::idlepb::CheckTask& day_tasks(int index) const;
  ::idlepb::CheckTask* add_day_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CheckTask >&
      day_tasks() const;

  // repeated .idlepb.CheckTask week_tasks = 4;
  int week_tasks_size() const;
  private:
  int _internal_week_tasks_size() const;
  public:
  void clear_week_tasks();
  ::idlepb::CheckTask* mutable_week_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CheckTask >*
      mutable_week_tasks();
  private:
  const ::idlepb::CheckTask& _internal_week_tasks(int index) const;
  ::idlepb::CheckTask* _internal_add_week_tasks();
  public:
  const ::idlepb::CheckTask& week_tasks(int index) const;
  ::idlepb::CheckTask* add_week_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CheckTask >&
      week_tasks() const;

  // int32 day_point = 1;
  void clear_day_point();
  int32_t day_point() const;
  void set_day_point(int32_t value);
  private:
  int32_t _internal_day_point() const;
  void _internal_set_day_point(int32_t value);
  public:

  // int32 week_point = 2;
  void clear_week_point();
  int32_t week_point() const;
  void set_week_point(int32_t value);
  private:
  int32_t _internal_week_point() const;
  void _internal_set_week_point(int32_t value);
  public:

  // int32 day_received_time = 5;
  void clear_day_received_time();
  int32_t day_received_time() const;
  void set_day_received_time(int32_t value);
  private:
  int32_t _internal_day_received_time() const;
  void _internal_set_day_received_time(int32_t value);
  public:

  // int32 week_received_time = 6;
  void clear_week_received_time();
  int32_t week_received_time() const;
  void set_week_received_time(int32_t value);
  private:
  int32_t _internal_week_received_time() const;
  void _internal_set_week_received_time(int32_t value);
  public:

  // int64 last_reset_day_time = 7;
  void clear_last_reset_day_time();
  int64_t last_reset_day_time() const;
  void set_last_reset_day_time(int64_t value);
  private:
  int64_t _internal_last_reset_day_time() const;
  void _internal_set_last_reset_day_time(int64_t value);
  public:

  // int64 last_reset_week_time = 8;
  void clear_last_reset_week_time();
  int64_t last_reset_week_time() const;
  void set_last_reset_week_time(int64_t value);
  private:
  int64_t _internal_last_reset_week_time() const;
  void _internal_set_last_reset_week_time(int64_t value);
  public:

  // int64 boss_invasion_time = 9;
  void clear_boss_invasion_time();
  int64_t boss_invasion_time() const;
  void set_boss_invasion_time(int64_t value);
  private:
  int64_t _internal_boss_invasion_time() const;
  void _internal_set_boss_invasion_time(int64_t value);
  public:

  // int32 degree_locked_day = 10;
  void clear_degree_locked_day();
  int32_t degree_locked_day() const;
  void set_degree_locked_day(int32_t value);
  private:
  int32_t _internal_degree_locked_day() const;
  void _internal_set_degree_locked_day(int32_t value);
  public:

  // int32 degree_locked_week = 11;
  void clear_degree_locked_week();
  int32_t degree_locked_week() const;
  void set_degree_locked_week(int32_t value);
  private:
  int32_t _internal_degree_locked_week() const;
  void _internal_set_degree_locked_week(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleChecklistData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CheckTask > day_tasks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CheckTask > week_tasks_;
    int32_t day_point_;
    int32_t week_point_;
    int32_t day_received_time_;
    int32_t week_received_time_;
    int64_t last_reset_day_time_;
    int64_t last_reset_week_time_;
    int64_t boss_invasion_time_;
    int32_t degree_locked_day_;
    int32_t degree_locked_week_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleCommonItemExchangeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleCommonItemExchangeData) */ {
 public:
  inline RoleCommonItemExchangeData() : RoleCommonItemExchangeData(nullptr) {}
  ~RoleCommonItemExchangeData() override;
  explicit PROTOBUF_CONSTEXPR RoleCommonItemExchangeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleCommonItemExchangeData(const RoleCommonItemExchangeData& from);
  RoleCommonItemExchangeData(RoleCommonItemExchangeData&& from) noexcept
    : RoleCommonItemExchangeData() {
    *this = ::std::move(from);
  }

  inline RoleCommonItemExchangeData& operator=(const RoleCommonItemExchangeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleCommonItemExchangeData& operator=(RoleCommonItemExchangeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleCommonItemExchangeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleCommonItemExchangeData* internal_default_instance() {
    return reinterpret_cast<const RoleCommonItemExchangeData*>(
               &_RoleCommonItemExchangeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(RoleCommonItemExchangeData& a, RoleCommonItemExchangeData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleCommonItemExchangeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleCommonItemExchangeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleCommonItemExchangeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleCommonItemExchangeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleCommonItemExchangeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleCommonItemExchangeData& from) {
    RoleCommonItemExchangeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleCommonItemExchangeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleCommonItemExchangeData";
  }
  protected:
  explicit RoleCommonItemExchangeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemExchangeDayFieldNumber = 4,
    kItemExchangeWeekFieldNumber = 5,
    kLastResetDayFieldNumber = 2,
    kLastResetWeekFieldNumber = 3,
  };
  // repeated .idlepb.MapValueInt32 item_exchange_day = 4;
  int item_exchange_day_size() const;
  private:
  int _internal_item_exchange_day_size() const;
  public:
  void clear_item_exchange_day();
  ::idlepb::MapValueInt32* mutable_item_exchange_day(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >*
      mutable_item_exchange_day();
  private:
  const ::idlepb::MapValueInt32& _internal_item_exchange_day(int index) const;
  ::idlepb::MapValueInt32* _internal_add_item_exchange_day();
  public:
  const ::idlepb::MapValueInt32& item_exchange_day(int index) const;
  ::idlepb::MapValueInt32* add_item_exchange_day();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >&
      item_exchange_day() const;

  // repeated .idlepb.MapValueInt32 item_exchange_week = 5;
  int item_exchange_week_size() const;
  private:
  int _internal_item_exchange_week_size() const;
  public:
  void clear_item_exchange_week();
  ::idlepb::MapValueInt32* mutable_item_exchange_week(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >*
      mutable_item_exchange_week();
  private:
  const ::idlepb::MapValueInt32& _internal_item_exchange_week(int index) const;
  ::idlepb::MapValueInt32* _internal_add_item_exchange_week();
  public:
  const ::idlepb::MapValueInt32& item_exchange_week(int index) const;
  ::idlepb::MapValueInt32* add_item_exchange_week();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >&
      item_exchange_week() const;

  // int64 last_reset_day = 2;
  void clear_last_reset_day();
  int64_t last_reset_day() const;
  void set_last_reset_day(int64_t value);
  private:
  int64_t _internal_last_reset_day() const;
  void _internal_set_last_reset_day(int64_t value);
  public:

  // int64 last_reset_week = 3;
  void clear_last_reset_week();
  int64_t last_reset_week() const;
  void set_last_reset_week(int64_t value);
  private:
  int64_t _internal_last_reset_week() const;
  void _internal_set_last_reset_week(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleCommonItemExchangeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 > item_exchange_day_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 > item_exchange_week_;
    int64_t last_reset_day_;
    int64_t last_reset_week_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleTreasuryChestData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleTreasuryChestData) */ {
 public:
  inline RoleTreasuryChestData() : RoleTreasuryChestData(nullptr) {}
  ~RoleTreasuryChestData() override;
  explicit PROTOBUF_CONSTEXPR RoleTreasuryChestData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleTreasuryChestData(const RoleTreasuryChestData& from);
  RoleTreasuryChestData(RoleTreasuryChestData&& from) noexcept
    : RoleTreasuryChestData() {
    *this = ::std::move(from);
  }

  inline RoleTreasuryChestData& operator=(const RoleTreasuryChestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleTreasuryChestData& operator=(RoleTreasuryChestData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleTreasuryChestData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleTreasuryChestData* internal_default_instance() {
    return reinterpret_cast<const RoleTreasuryChestData*>(
               &_RoleTreasuryChestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(RoleTreasuryChestData& a, RoleTreasuryChestData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleTreasuryChestData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleTreasuryChestData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleTreasuryChestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleTreasuryChestData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleTreasuryChestData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleTreasuryChestData& from) {
    RoleTreasuryChestData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleTreasuryChestData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleTreasuryChestData";
  }
  protected:
  explicit RoleTreasuryChestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTodayOpenTimesFieldNumber = 1,
    kGuaranteeCountFieldNumber = 2,
  };
  // repeated int32 today_open_times = 1;
  int today_open_times_size() const;
  private:
  int _internal_today_open_times_size() const;
  public:
  void clear_today_open_times();
  private:
  int32_t _internal_today_open_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_today_open_times() const;
  void _internal_add_today_open_times(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_today_open_times();
  public:
  int32_t today_open_times(int index) const;
  void set_today_open_times(int index, int32_t value);
  void add_today_open_times(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      today_open_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_today_open_times();

  // repeated int32 guarantee_count = 2;
  int guarantee_count_size() const;
  private:
  int _internal_guarantee_count_size() const;
  public:
  void clear_guarantee_count();
  private:
  int32_t _internal_guarantee_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_guarantee_count() const;
  void _internal_add_guarantee_count(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_guarantee_count();
  public:
  int32_t guarantee_count(int index) const;
  void set_guarantee_count(int index, int32_t value);
  void add_guarantee_count(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      guarantee_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_guarantee_count();

  // @@protoc_insertion_point(class_scope:idlepb.RoleTreasuryChestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > today_open_times_;
    mutable std::atomic<int> _today_open_times_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > guarantee_count_;
    mutable std::atomic<int> _guarantee_count_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleTreasuryGachaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleTreasuryGachaData) */ {
 public:
  inline RoleTreasuryGachaData() : RoleTreasuryGachaData(nullptr) {}
  ~RoleTreasuryGachaData() override;
  explicit PROTOBUF_CONSTEXPR RoleTreasuryGachaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleTreasuryGachaData(const RoleTreasuryGachaData& from);
  RoleTreasuryGachaData(RoleTreasuryGachaData&& from) noexcept
    : RoleTreasuryGachaData() {
    *this = ::std::move(from);
  }

  inline RoleTreasuryGachaData& operator=(const RoleTreasuryGachaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleTreasuryGachaData& operator=(RoleTreasuryGachaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleTreasuryGachaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleTreasuryGachaData* internal_default_instance() {
    return reinterpret_cast<const RoleTreasuryGachaData*>(
               &_RoleTreasuryGachaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(RoleTreasuryGachaData& a, RoleTreasuryGachaData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleTreasuryGachaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleTreasuryGachaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleTreasuryGachaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleTreasuryGachaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleTreasuryGachaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleTreasuryGachaData& from) {
    RoleTreasuryGachaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleTreasuryGachaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleTreasuryGachaData";
  }
  protected:
  explicit RoleTreasuryGachaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTodayOpenTimesFieldNumber = 1,
    kFreeOpenTimesFieldNumber = 2,
    kGuaranteeCountFieldNumber = 3,
    kTotalOpenTimeFieldNumber = 6,
  };
  // repeated int32 today_open_times = 1;
  int today_open_times_size() const;
  private:
  int _internal_today_open_times_size() const;
  public:
  void clear_today_open_times();
  private:
  int32_t _internal_today_open_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_today_open_times() const;
  void _internal_add_today_open_times(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_today_open_times();
  public:
  int32_t today_open_times(int index) const;
  void set_today_open_times(int index, int32_t value);
  void add_today_open_times(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      today_open_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_today_open_times();

  // repeated int32 free_open_times = 2;
  int free_open_times_size() const;
  private:
  int _internal_free_open_times_size() const;
  public:
  void clear_free_open_times();
  private:
  int32_t _internal_free_open_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_free_open_times() const;
  void _internal_add_free_open_times(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_free_open_times();
  public:
  int32_t free_open_times(int index) const;
  void set_free_open_times(int index, int32_t value);
  void add_free_open_times(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      free_open_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_free_open_times();

  // repeated int32 guarantee_count = 3;
  int guarantee_count_size() const;
  private:
  int _internal_guarantee_count_size() const;
  public:
  void clear_guarantee_count();
  private:
  int32_t _internal_guarantee_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_guarantee_count() const;
  void _internal_add_guarantee_count(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_guarantee_count();
  public:
  int32_t guarantee_count(int index) const;
  void set_guarantee_count(int index, int32_t value);
  void add_guarantee_count(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      guarantee_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_guarantee_count();

  // int32 total_open_time = 6;
  void clear_total_open_time();
  int32_t total_open_time() const;
  void set_total_open_time(int32_t value);
  private:
  int32_t _internal_total_open_time() const;
  void _internal_set_total_open_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleTreasuryGachaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > today_open_times_;
    mutable std::atomic<int> _today_open_times_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > free_open_times_;
    mutable std::atomic<int> _free_open_times_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > guarantee_count_;
    mutable std::atomic<int> _guarantee_count_cached_byte_size_;
    int32_t total_open_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API TreasuryShopItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.TreasuryShopItem) */ {
 public:
  inline TreasuryShopItem() : TreasuryShopItem(nullptr) {}
  ~TreasuryShopItem() override;
  explicit PROTOBUF_CONSTEXPR TreasuryShopItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TreasuryShopItem(const TreasuryShopItem& from);
  TreasuryShopItem(TreasuryShopItem&& from) noexcept
    : TreasuryShopItem() {
    *this = ::std::move(from);
  }

  inline TreasuryShopItem& operator=(const TreasuryShopItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreasuryShopItem& operator=(TreasuryShopItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TreasuryShopItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const TreasuryShopItem* internal_default_instance() {
    return reinterpret_cast<const TreasuryShopItem*>(
               &_TreasuryShopItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(TreasuryShopItem& a, TreasuryShopItem& b) {
    a.Swap(&b);
  }
  inline void Swap(TreasuryShopItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreasuryShopItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TreasuryShopItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TreasuryShopItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TreasuryShopItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TreasuryShopItem& from) {
    TreasuryShopItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreasuryShopItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.TreasuryShopItem";
  }
  protected:
  explicit TreasuryShopItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kNumFieldNumber = 3,
    kPriceFieldNumber = 4,
    kCountFieldNumber = 5,
    kBoughtCountFieldNumber = 6,
    kCfgIdFieldNumber = 7,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 item_id = 2;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 num = 3;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // int32 price = 4;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // int32 count = 5;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // int32 bought_count = 6;
  void clear_bought_count();
  int32_t bought_count() const;
  void set_bought_count(int32_t value);
  private:
  int32_t _internal_bought_count() const;
  void _internal_set_bought_count(int32_t value);
  public:

  // int32 cfg_id = 7;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.TreasuryShopItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t item_id_;
    int32_t num_;
    int32_t price_;
    int32_t count_;
    int32_t bought_count_;
    int32_t cfg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleTreasuryShopData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleTreasuryShopData) */ {
 public:
  inline RoleTreasuryShopData() : RoleTreasuryShopData(nullptr) {}
  ~RoleTreasuryShopData() override;
  explicit PROTOBUF_CONSTEXPR RoleTreasuryShopData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleTreasuryShopData(const RoleTreasuryShopData& from);
  RoleTreasuryShopData(RoleTreasuryShopData&& from) noexcept
    : RoleTreasuryShopData() {
    *this = ::std::move(from);
  }

  inline RoleTreasuryShopData& operator=(const RoleTreasuryShopData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleTreasuryShopData& operator=(RoleTreasuryShopData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleTreasuryShopData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleTreasuryShopData* internal_default_instance() {
    return reinterpret_cast<const RoleTreasuryShopData*>(
               &_RoleTreasuryShopData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(RoleTreasuryShopData& a, RoleTreasuryShopData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleTreasuryShopData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleTreasuryShopData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleTreasuryShopData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleTreasuryShopData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleTreasuryShopData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleTreasuryShopData& from) {
    RoleTreasuryShopData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleTreasuryShopData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleTreasuryShopData";
  }
  protected:
  explicit RoleTreasuryShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopItemsFieldNumber = 1,
    kTodayRefreshTimeFieldNumber = 2,
    kShopRefreshFlagFieldNumber = 3,
  };
  // repeated .idlepb.TreasuryShopItem shop_items = 1;
  int shop_items_size() const;
  private:
  int _internal_shop_items_size() const;
  public:
  void clear_shop_items();
  ::idlepb::TreasuryShopItem* mutable_shop_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::TreasuryShopItem >*
      mutable_shop_items();
  private:
  const ::idlepb::TreasuryShopItem& _internal_shop_items(int index) const;
  ::idlepb::TreasuryShopItem* _internal_add_shop_items();
  public:
  const ::idlepb::TreasuryShopItem& shop_items(int index) const;
  ::idlepb::TreasuryShopItem* add_shop_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::TreasuryShopItem >&
      shop_items() const;

  // int32 today_refresh_time = 2;
  void clear_today_refresh_time();
  int32_t today_refresh_time() const;
  void set_today_refresh_time(int32_t value);
  private:
  int32_t _internal_today_refresh_time() const;
  void _internal_set_today_refresh_time(int32_t value);
  public:

  // bool shop_refresh_flag = 3;
  void clear_shop_refresh_flag();
  bool shop_refresh_flag() const;
  void set_shop_refresh_flag(bool value);
  private:
  bool _internal_shop_refresh_flag() const;
  void _internal_set_shop_refresh_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleTreasuryShopData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::TreasuryShopItem > shop_items_;
    int32_t today_refresh_time_;
    bool shop_refresh_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleTreasurySaveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleTreasurySaveData) */ {
 public:
  inline RoleTreasurySaveData() : RoleTreasurySaveData(nullptr) {}
  ~RoleTreasurySaveData() override;
  explicit PROTOBUF_CONSTEXPR RoleTreasurySaveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleTreasurySaveData(const RoleTreasurySaveData& from);
  RoleTreasurySaveData(RoleTreasurySaveData&& from) noexcept
    : RoleTreasurySaveData() {
    *this = ::std::move(from);
  }

  inline RoleTreasurySaveData& operator=(const RoleTreasurySaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleTreasurySaveData& operator=(RoleTreasurySaveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleTreasurySaveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleTreasurySaveData* internal_default_instance() {
    return reinterpret_cast<const RoleTreasurySaveData*>(
               &_RoleTreasurySaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(RoleTreasurySaveData& a, RoleTreasurySaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleTreasurySaveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleTreasurySaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleTreasurySaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleTreasurySaveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleTreasurySaveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleTreasurySaveData& from) {
    RoleTreasurySaveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleTreasurySaveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleTreasurySaveData";
  }
  protected:
  explicit RoleTreasurySaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreasuryChestDataFieldNumber = 1,
    kTreasuryGachaDataFieldNumber = 2,
    kTreasuryShopDataFieldNumber = 3,
    kLastResetTimeFieldNumber = 6,
  };
  // .idlepb.RoleTreasuryChestData treasury_chest_data = 1;
  bool has_treasury_chest_data() const;
  private:
  bool _internal_has_treasury_chest_data() const;
  public:
  void clear_treasury_chest_data();
  const ::idlepb::RoleTreasuryChestData& treasury_chest_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleTreasuryChestData* release_treasury_chest_data();
  ::idlepb::RoleTreasuryChestData* mutable_treasury_chest_data();
  void set_allocated_treasury_chest_data(::idlepb::RoleTreasuryChestData* treasury_chest_data);
  private:
  const ::idlepb::RoleTreasuryChestData& _internal_treasury_chest_data() const;
  ::idlepb::RoleTreasuryChestData* _internal_mutable_treasury_chest_data();
  public:
  void unsafe_arena_set_allocated_treasury_chest_data(
      ::idlepb::RoleTreasuryChestData* treasury_chest_data);
  ::idlepb::RoleTreasuryChestData* unsafe_arena_release_treasury_chest_data();

  // .idlepb.RoleTreasuryGachaData treasury_gacha_data = 2;
  bool has_treasury_gacha_data() const;
  private:
  bool _internal_has_treasury_gacha_data() const;
  public:
  void clear_treasury_gacha_data();
  const ::idlepb::RoleTreasuryGachaData& treasury_gacha_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleTreasuryGachaData* release_treasury_gacha_data();
  ::idlepb::RoleTreasuryGachaData* mutable_treasury_gacha_data();
  void set_allocated_treasury_gacha_data(::idlepb::RoleTreasuryGachaData* treasury_gacha_data);
  private:
  const ::idlepb::RoleTreasuryGachaData& _internal_treasury_gacha_data() const;
  ::idlepb::RoleTreasuryGachaData* _internal_mutable_treasury_gacha_data();
  public:
  void unsafe_arena_set_allocated_treasury_gacha_data(
      ::idlepb::RoleTreasuryGachaData* treasury_gacha_data);
  ::idlepb::RoleTreasuryGachaData* unsafe_arena_release_treasury_gacha_data();

  // .idlepb.RoleTreasuryShopData treasury_shop_data = 3;
  bool has_treasury_shop_data() const;
  private:
  bool _internal_has_treasury_shop_data() const;
  public:
  void clear_treasury_shop_data();
  const ::idlepb::RoleTreasuryShopData& treasury_shop_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleTreasuryShopData* release_treasury_shop_data();
  ::idlepb::RoleTreasuryShopData* mutable_treasury_shop_data();
  void set_allocated_treasury_shop_data(::idlepb::RoleTreasuryShopData* treasury_shop_data);
  private:
  const ::idlepb::RoleTreasuryShopData& _internal_treasury_shop_data() const;
  ::idlepb::RoleTreasuryShopData* _internal_mutable_treasury_shop_data();
  public:
  void unsafe_arena_set_allocated_treasury_shop_data(
      ::idlepb::RoleTreasuryShopData* treasury_shop_data);
  ::idlepb::RoleTreasuryShopData* unsafe_arena_release_treasury_shop_data();

  // int64 last_reset_time = 6;
  void clear_last_reset_time();
  int64_t last_reset_time() const;
  void set_last_reset_time(int64_t value);
  private:
  int64_t _internal_last_reset_time() const;
  void _internal_set_last_reset_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleTreasurySaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::RoleTreasuryChestData* treasury_chest_data_;
    ::idlepb::RoleTreasuryGachaData* treasury_gacha_data_;
    ::idlepb::RoleTreasuryShopData* treasury_shop_data_;
    int64_t last_reset_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ArenaCheckListData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ArenaCheckListData) */ {
 public:
  inline ArenaCheckListData() : ArenaCheckListData(nullptr) {}
  ~ArenaCheckListData() override;
  explicit PROTOBUF_CONSTEXPR ArenaCheckListData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArenaCheckListData(const ArenaCheckListData& from);
  ArenaCheckListData(ArenaCheckListData&& from) noexcept
    : ArenaCheckListData() {
    *this = ::std::move(from);
  }

  inline ArenaCheckListData& operator=(const ArenaCheckListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArenaCheckListData& operator=(ArenaCheckListData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArenaCheckListData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArenaCheckListData* internal_default_instance() {
    return reinterpret_cast<const ArenaCheckListData*>(
               &_ArenaCheckListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(ArenaCheckListData& a, ArenaCheckListData& b) {
    a.Swap(&b);
  }
  inline void Swap(ArenaCheckListData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArenaCheckListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArenaCheckListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArenaCheckListData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArenaCheckListData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArenaCheckListData& from) {
    ArenaCheckListData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArenaCheckListData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ArenaCheckListData";
  }
  protected:
  explicit ArenaCheckListData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChecklistIdFieldNumber = 1,
    kChecklistNumFieldNumber = 2,
    kChecklistStateFieldNumber = 3,
  };
  // int32 checklist_id = 1;
  void clear_checklist_id();
  int32_t checklist_id() const;
  void set_checklist_id(int32_t value);
  private:
  int32_t _internal_checklist_id() const;
  void _internal_set_checklist_id(int32_t value);
  public:

  // int32 checklist_num = 2;
  void clear_checklist_num();
  int32_t checklist_num() const;
  void set_checklist_num(int32_t value);
  private:
  int32_t _internal_checklist_num() const;
  void _internal_set_checklist_num(int32_t value);
  public:

  // .idlepb.ArenaCheckListState checklist_state = 3;
  void clear_checklist_state();
  ::idlepb::ArenaCheckListState checklist_state() const;
  void set_checklist_state(::idlepb::ArenaCheckListState value);
  private:
  ::idlepb::ArenaCheckListState _internal_checklist_state() const;
  void _internal_set_checklist_state(::idlepb::ArenaCheckListState value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ArenaCheckListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t checklist_id_;
    int32_t checklist_num_;
    int checklist_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ArenaCheckListRewardData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ArenaCheckListRewardData) */ {
 public:
  inline ArenaCheckListRewardData() : ArenaCheckListRewardData(nullptr) {}
  ~ArenaCheckListRewardData() override;
  explicit PROTOBUF_CONSTEXPR ArenaCheckListRewardData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArenaCheckListRewardData(const ArenaCheckListRewardData& from);
  ArenaCheckListRewardData(ArenaCheckListRewardData&& from) noexcept
    : ArenaCheckListRewardData() {
    *this = ::std::move(from);
  }

  inline ArenaCheckListRewardData& operator=(const ArenaCheckListRewardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArenaCheckListRewardData& operator=(ArenaCheckListRewardData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArenaCheckListRewardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArenaCheckListRewardData* internal_default_instance() {
    return reinterpret_cast<const ArenaCheckListRewardData*>(
               &_ArenaCheckListRewardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(ArenaCheckListRewardData& a, ArenaCheckListRewardData& b) {
    a.Swap(&b);
  }
  inline void Swap(ArenaCheckListRewardData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArenaCheckListRewardData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArenaCheckListRewardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArenaCheckListRewardData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArenaCheckListRewardData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArenaCheckListRewardData& from) {
    ArenaCheckListRewardData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArenaCheckListRewardData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ArenaCheckListRewardData";
  }
  protected:
  explicit ArenaCheckListRewardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardIdFieldNumber = 1,
    kRewardStateFieldNumber = 2,
  };
  // int32 reward_id = 1;
  void clear_reward_id();
  int32_t reward_id() const;
  void set_reward_id(int32_t value);
  private:
  int32_t _internal_reward_id() const;
  void _internal_set_reward_id(int32_t value);
  public:

  // .idlepb.ArenaCheckListRewardState reward_state = 2;
  void clear_reward_state();
  ::idlepb::ArenaCheckListRewardState reward_state() const;
  void set_reward_state(::idlepb::ArenaCheckListRewardState value);
  private:
  ::idlepb::ArenaCheckListRewardState _internal_reward_state() const;
  void _internal_set_reward_state(::idlepb::ArenaCheckListRewardState value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ArenaCheckListRewardData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t reward_id_;
    int reward_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleArenaCheckListData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleArenaCheckListData) */ {
 public:
  inline RoleArenaCheckListData() : RoleArenaCheckListData(nullptr) {}
  ~RoleArenaCheckListData() override;
  explicit PROTOBUF_CONSTEXPR RoleArenaCheckListData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleArenaCheckListData(const RoleArenaCheckListData& from);
  RoleArenaCheckListData(RoleArenaCheckListData&& from) noexcept
    : RoleArenaCheckListData() {
    *this = ::std::move(from);
  }

  inline RoleArenaCheckListData& operator=(const RoleArenaCheckListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleArenaCheckListData& operator=(RoleArenaCheckListData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleArenaCheckListData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleArenaCheckListData* internal_default_instance() {
    return reinterpret_cast<const RoleArenaCheckListData*>(
               &_RoleArenaCheckListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(RoleArenaCheckListData& a, RoleArenaCheckListData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleArenaCheckListData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleArenaCheckListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleArenaCheckListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleArenaCheckListData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleArenaCheckListData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleArenaCheckListData& from) {
    RoleArenaCheckListData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleArenaCheckListData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleArenaCheckListData";
  }
  protected:
  explicit RoleArenaCheckListData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArenaCheckDataFieldNumber = 1,
    kCheckRewardDataFieldNumber = 2,
  };
  // repeated .idlepb.ArenaCheckListData arena_check_data = 1;
  int arena_check_data_size() const;
  private:
  int _internal_arena_check_data_size() const;
  public:
  void clear_arena_check_data();
  ::idlepb::ArenaCheckListData* mutable_arena_check_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaCheckListData >*
      mutable_arena_check_data();
  private:
  const ::idlepb::ArenaCheckListData& _internal_arena_check_data(int index) const;
  ::idlepb::ArenaCheckListData* _internal_add_arena_check_data();
  public:
  const ::idlepb::ArenaCheckListData& arena_check_data(int index) const;
  ::idlepb::ArenaCheckListData* add_arena_check_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaCheckListData >&
      arena_check_data() const;

  // repeated .idlepb.ArenaCheckListRewardData check_reward_data = 2;
  int check_reward_data_size() const;
  private:
  int _internal_check_reward_data_size() const;
  public:
  void clear_check_reward_data();
  ::idlepb::ArenaCheckListRewardData* mutable_check_reward_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaCheckListRewardData >*
      mutable_check_reward_data();
  private:
  const ::idlepb::ArenaCheckListRewardData& _internal_check_reward_data(int index) const;
  ::idlepb::ArenaCheckListRewardData* _internal_add_check_reward_data();
  public:
  const ::idlepb::ArenaCheckListRewardData& check_reward_data(int index) const;
  ::idlepb::ArenaCheckListRewardData* add_check_reward_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaCheckListRewardData >&
      check_reward_data() const;

  // @@protoc_insertion_point(class_scope:idlepb.RoleArenaCheckListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaCheckListData > arena_check_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaCheckListRewardData > check_reward_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleSeptInviteEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleSeptInviteEntry) */ {
 public:
  inline RoleSeptInviteEntry() : RoleSeptInviteEntry(nullptr) {}
  ~RoleSeptInviteEntry() override;
  explicit PROTOBUF_CONSTEXPR RoleSeptInviteEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleSeptInviteEntry(const RoleSeptInviteEntry& from);
  RoleSeptInviteEntry(RoleSeptInviteEntry&& from) noexcept
    : RoleSeptInviteEntry() {
    *this = ::std::move(from);
  }

  inline RoleSeptInviteEntry& operator=(const RoleSeptInviteEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleSeptInviteEntry& operator=(RoleSeptInviteEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleSeptInviteEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleSeptInviteEntry* internal_default_instance() {
    return reinterpret_cast<const RoleSeptInviteEntry*>(
               &_RoleSeptInviteEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(RoleSeptInviteEntry& a, RoleSeptInviteEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleSeptInviteEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleSeptInviteEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleSeptInviteEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleSeptInviteEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleSeptInviteEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleSeptInviteEntry& from) {
    RoleSeptInviteEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleSeptInviteEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleSeptInviteEntry";
  }
  protected:
  explicit RoleSeptInviteEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // .idlepb.SeptPosition position = 1;
  void clear_position();
  ::idlepb::SeptPosition position() const;
  void set_position(::idlepb::SeptPosition value);
  private:
  ::idlepb::SeptPosition _internal_position() const;
  void _internal_set_position(::idlepb::SeptPosition value);
  public:

  // int32 num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleSeptInviteEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int position_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SeptQuest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SeptQuest) */ {
 public:
  inline SeptQuest() : SeptQuest(nullptr) {}
  ~SeptQuest() override;
  explicit PROTOBUF_CONSTEXPR SeptQuest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeptQuest(const SeptQuest& from);
  SeptQuest(SeptQuest&& from) noexcept
    : SeptQuest() {
    *this = ::std::move(from);
  }

  inline SeptQuest& operator=(const SeptQuest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeptQuest& operator=(SeptQuest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeptQuest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeptQuest* internal_default_instance() {
    return reinterpret_cast<const SeptQuest*>(
               &_SeptQuest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(SeptQuest& a, SeptQuest& b) {
    a.Swap(&b);
  }
  inline void Swap(SeptQuest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeptQuest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeptQuest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeptQuest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeptQuest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeptQuest& from) {
    SeptQuest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeptQuest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SeptQuest";
  }
  protected:
  explicit SeptQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginTimeFieldNumber = 2,
    kQuestIdFieldNumber = 1,
    kReceivedFieldNumber = 3,
    kUidFieldNumber = 4,
    kLevelFieldNumber = 11,
    kMoneyNumFieldNumber = 12,
  };
  // int64 begin_time = 2;
  void clear_begin_time();
  int64_t begin_time() const;
  void set_begin_time(int64_t value);
  private:
  int64_t _internal_begin_time() const;
  void _internal_set_begin_time(int64_t value);
  public:

  // int32 quest_id = 1;
  void clear_quest_id();
  int32_t quest_id() const;
  void set_quest_id(int32_t value);
  private:
  int32_t _internal_quest_id() const;
  void _internal_set_quest_id(int32_t value);
  public:

  // bool received = 3;
  void clear_received();
  bool received() const;
  void set_received(bool value);
  private:
  bool _internal_received() const;
  void _internal_set_received(bool value);
  public:

  // int32 uid = 4;
  void clear_uid();
  int32_t uid() const;
  void set_uid(int32_t value);
  private:
  int32_t _internal_uid() const;
  void _internal_set_uid(int32_t value);
  public:

  // int32 level = 11;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 money_num = 12;
  void clear_money_num();
  int32_t money_num() const;
  void set_money_num(int32_t value);
  private:
  int32_t _internal_money_num() const;
  void _internal_set_money_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SeptQuest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t begin_time_;
    int32_t quest_id_;
    bool received_;
    int32_t uid_;
    int32_t level_;
    int32_t money_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleSeptQuestData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleSeptQuestData) */ {
 public:
  inline RoleSeptQuestData() : RoleSeptQuestData(nullptr) {}
  ~RoleSeptQuestData() override;
  explicit PROTOBUF_CONSTEXPR RoleSeptQuestData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleSeptQuestData(const RoleSeptQuestData& from);
  RoleSeptQuestData(RoleSeptQuestData&& from) noexcept
    : RoleSeptQuestData() {
    *this = ::std::move(from);
  }

  inline RoleSeptQuestData& operator=(const RoleSeptQuestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleSeptQuestData& operator=(RoleSeptQuestData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleSeptQuestData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleSeptQuestData* internal_default_instance() {
    return reinterpret_cast<const RoleSeptQuestData*>(
               &_RoleSeptQuestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(RoleSeptQuestData& a, RoleSeptQuestData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleSeptQuestData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleSeptQuestData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleSeptQuestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleSeptQuestData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleSeptQuestData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleSeptQuestData& from) {
    RoleSeptQuestData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleSeptQuestData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleSeptQuestData";
  }
  protected:
  explicit RoleSeptQuestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestsFieldNumber = 1,
    kTodayManualRefreshNumFieldNumber = 2,
    kLevelFieldNumber = 3,
    kCurrentExpFieldNumber = 4,
    kTotalNumFieldNumber = 5,
  };
  // repeated .idlepb.SeptQuest quests = 1;
  int quests_size() const;
  private:
  int _internal_quests_size() const;
  public:
  void clear_quests();
  ::idlepb::SeptQuest* mutable_quests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptQuest >*
      mutable_quests();
  private:
  const ::idlepb::SeptQuest& _internal_quests(int index) const;
  ::idlepb::SeptQuest* _internal_add_quests();
  public:
  const ::idlepb::SeptQuest& quests(int index) const;
  ::idlepb::SeptQuest* add_quests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptQuest >&
      quests() const;

  // int32 today_manual_refresh_num = 2;
  void clear_today_manual_refresh_num();
  int32_t today_manual_refresh_num() const;
  void set_today_manual_refresh_num(int32_t value);
  private:
  int32_t _internal_today_manual_refresh_num() const;
  void _internal_set_today_manual_refresh_num(int32_t value);
  public:

  // int32 level = 3;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 current_exp = 4;
  void clear_current_exp();
  int32_t current_exp() const;
  void set_current_exp(int32_t value);
  private:
  int32_t _internal_current_exp() const;
  void _internal_set_current_exp(int32_t value);
  public:

  // int32 total_num = 5;
  void clear_total_num();
  int32_t total_num() const;
  void set_total_num(int32_t value);
  private:
  int32_t _internal_total_num() const;
  void _internal_set_total_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleSeptQuestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptQuest > quests_;
    int32_t today_manual_refresh_num_;
    int32_t level_;
    int32_t current_exp_;
    int32_t total_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleSeptShopData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleSeptShopData) */ {
 public:
  inline RoleSeptShopData() : RoleSeptShopData(nullptr) {}
  ~RoleSeptShopData() override;
  explicit PROTOBUF_CONSTEXPR RoleSeptShopData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleSeptShopData(const RoleSeptShopData& from);
  RoleSeptShopData(RoleSeptShopData&& from) noexcept
    : RoleSeptShopData() {
    *this = ::std::move(from);
  }

  inline RoleSeptShopData& operator=(const RoleSeptShopData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleSeptShopData& operator=(RoleSeptShopData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleSeptShopData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleSeptShopData* internal_default_instance() {
    return reinterpret_cast<const RoleSeptShopData*>(
               &_RoleSeptShopData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(RoleSeptShopData& a, RoleSeptShopData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleSeptShopData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleSeptShopData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleSeptShopData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleSeptShopData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleSeptShopData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleSeptShopData& from) {
    RoleSeptShopData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleSeptShopData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleSeptShopData";
  }
  protected:
  explicit RoleSeptShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeHistoryFieldNumber = 2,
    kLastResetTimeSeptShopFieldNumber = 1,
  };
  // repeated .idlepb.SimpleItemData exchange_history = 2;
  int exchange_history_size() const;
  private:
  int _internal_exchange_history_size() const;
  public:
  void clear_exchange_history();
  ::idlepb::SimpleItemData* mutable_exchange_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >*
      mutable_exchange_history();
  private:
  const ::idlepb::SimpleItemData& _internal_exchange_history(int index) const;
  ::idlepb::SimpleItemData* _internal_add_exchange_history();
  public:
  const ::idlepb::SimpleItemData& exchange_history(int index) const;
  ::idlepb::SimpleItemData* add_exchange_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >&
      exchange_history() const;

  // int64 last_reset_time_sept_shop = 1;
  void clear_last_reset_time_sept_shop();
  int64_t last_reset_time_sept_shop() const;
  void set_last_reset_time_sept_shop(int64_t value);
  private:
  int64_t _internal_last_reset_time_sept_shop() const;
  void _internal_set_last_reset_time_sept_shop(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleSeptShopData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData > exchange_history_;
    int64_t last_reset_time_sept_shop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleSeptData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleSeptData) */ {
 public:
  inline RoleSeptData() : RoleSeptData(nullptr) {}
  ~RoleSeptData() override;
  explicit PROTOBUF_CONSTEXPR RoleSeptData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleSeptData(const RoleSeptData& from);
  RoleSeptData(RoleSeptData&& from) noexcept
    : RoleSeptData() {
    *this = ::std::move(from);
  }

  inline RoleSeptData& operator=(const RoleSeptData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleSeptData& operator=(RoleSeptData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleSeptData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleSeptData* internal_default_instance() {
    return reinterpret_cast<const RoleSeptData*>(
               &_RoleSeptData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(RoleSeptData& a, RoleSeptData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleSeptData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleSeptData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleSeptData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleSeptData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleSeptData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleSeptData& from) {
    RoleSeptData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleSeptData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleSeptData";
  }
  protected:
  explicit RoleSeptData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDailyInviteEntriesFieldNumber = 2,
    kSeptDemonDamageRewardReceivedFieldNumber = 15,
    kSeptDemonDamageRewardFinishedFieldNumber = 16,
    kSeptShopDataFieldNumber = 6,
    kSeptQuestDataFieldNumber = 11,
    kNextJoinTicksFieldNumber = 1,
    kSeptDemonCumulativeTimeFieldNumber = 12,
    kSeptDemonStageRewardNumFieldNumber = 13,
    kSeptDemonStageRewardUseNumFieldNumber = 14,
  };
  // repeated .idlepb.RoleSeptInviteEntry daily_invite_entries = 2;
  int daily_invite_entries_size() const;
  private:
  int _internal_daily_invite_entries_size() const;
  public:
  void clear_daily_invite_entries();
  ::idlepb::RoleSeptInviteEntry* mutable_daily_invite_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleSeptInviteEntry >*
      mutable_daily_invite_entries();
  private:
  const ::idlepb::RoleSeptInviteEntry& _internal_daily_invite_entries(int index) const;
  ::idlepb::RoleSeptInviteEntry* _internal_add_daily_invite_entries();
  public:
  const ::idlepb::RoleSeptInviteEntry& daily_invite_entries(int index) const;
  ::idlepb::RoleSeptInviteEntry* add_daily_invite_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleSeptInviteEntry >&
      daily_invite_entries() const;

  // repeated int32 sept_demon_damage_reward_received = 15;
  int sept_demon_damage_reward_received_size() const;
  private:
  int _internal_sept_demon_damage_reward_received_size() const;
  public:
  void clear_sept_demon_damage_reward_received();
  private:
  int32_t _internal_sept_demon_damage_reward_received(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_sept_demon_damage_reward_received() const;
  void _internal_add_sept_demon_damage_reward_received(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_sept_demon_damage_reward_received();
  public:
  int32_t sept_demon_damage_reward_received(int index) const;
  void set_sept_demon_damage_reward_received(int index, int32_t value);
  void add_sept_demon_damage_reward_received(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      sept_demon_damage_reward_received() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_sept_demon_damage_reward_received();

  // repeated int32 sept_demon_damage_reward_finished = 16;
  int sept_demon_damage_reward_finished_size() const;
  private:
  int _internal_sept_demon_damage_reward_finished_size() const;
  public:
  void clear_sept_demon_damage_reward_finished();
  private:
  int32_t _internal_sept_demon_damage_reward_finished(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_sept_demon_damage_reward_finished() const;
  void _internal_add_sept_demon_damage_reward_finished(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_sept_demon_damage_reward_finished();
  public:
  int32_t sept_demon_damage_reward_finished(int index) const;
  void set_sept_demon_damage_reward_finished(int index, int32_t value);
  void add_sept_demon_damage_reward_finished(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      sept_demon_damage_reward_finished() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_sept_demon_damage_reward_finished();

  // .idlepb.RoleSeptShopData sept_shop_data = 6;
  bool has_sept_shop_data() const;
  private:
  bool _internal_has_sept_shop_data() const;
  public:
  void clear_sept_shop_data();
  const ::idlepb::RoleSeptShopData& sept_shop_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleSeptShopData* release_sept_shop_data();
  ::idlepb::RoleSeptShopData* mutable_sept_shop_data();
  void set_allocated_sept_shop_data(::idlepb::RoleSeptShopData* sept_shop_data);
  private:
  const ::idlepb::RoleSeptShopData& _internal_sept_shop_data() const;
  ::idlepb::RoleSeptShopData* _internal_mutable_sept_shop_data();
  public:
  void unsafe_arena_set_allocated_sept_shop_data(
      ::idlepb::RoleSeptShopData* sept_shop_data);
  ::idlepb::RoleSeptShopData* unsafe_arena_release_sept_shop_data();

  // .idlepb.RoleSeptQuestData sept_quest_data = 11;
  bool has_sept_quest_data() const;
  private:
  bool _internal_has_sept_quest_data() const;
  public:
  void clear_sept_quest_data();
  const ::idlepb::RoleSeptQuestData& sept_quest_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleSeptQuestData* release_sept_quest_data();
  ::idlepb::RoleSeptQuestData* mutable_sept_quest_data();
  void set_allocated_sept_quest_data(::idlepb::RoleSeptQuestData* sept_quest_data);
  private:
  const ::idlepb::RoleSeptQuestData& _internal_sept_quest_data() const;
  ::idlepb::RoleSeptQuestData* _internal_mutable_sept_quest_data();
  public:
  void unsafe_arena_set_allocated_sept_quest_data(
      ::idlepb::RoleSeptQuestData* sept_quest_data);
  ::idlepb::RoleSeptQuestData* unsafe_arena_release_sept_quest_data();

  // int64 next_join_ticks = 1;
  void clear_next_join_ticks();
  int64_t next_join_ticks() const;
  void set_next_join_ticks(int64_t value);
  private:
  int64_t _internal_next_join_ticks() const;
  void _internal_set_next_join_ticks(int64_t value);
  public:

  // int32 sept_demon_cumulative_time = 12;
  void clear_sept_demon_cumulative_time();
  int32_t sept_demon_cumulative_time() const;
  void set_sept_demon_cumulative_time(int32_t value);
  private:
  int32_t _internal_sept_demon_cumulative_time() const;
  void _internal_set_sept_demon_cumulative_time(int32_t value);
  public:

  // int32 sept_demon_stage_reward_num = 13;
  void clear_sept_demon_stage_reward_num();
  int32_t sept_demon_stage_reward_num() const;
  void set_sept_demon_stage_reward_num(int32_t value);
  private:
  int32_t _internal_sept_demon_stage_reward_num() const;
  void _internal_set_sept_demon_stage_reward_num(int32_t value);
  public:

  // int32 sept_demon_stage_reward_use_num = 14;
  void clear_sept_demon_stage_reward_use_num();
  int32_t sept_demon_stage_reward_use_num() const;
  void set_sept_demon_stage_reward_use_num(int32_t value);
  private:
  int32_t _internal_sept_demon_stage_reward_use_num() const;
  void _internal_set_sept_demon_stage_reward_use_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleSeptData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleSeptInviteEntry > daily_invite_entries_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > sept_demon_damage_reward_received_;
    mutable std::atomic<int> _sept_demon_damage_reward_received_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > sept_demon_damage_reward_finished_;
    mutable std::atomic<int> _sept_demon_damage_reward_finished_cached_byte_size_;
    ::idlepb::RoleSeptShopData* sept_shop_data_;
    ::idlepb::RoleSeptQuestData* sept_quest_data_;
    int64_t next_join_ticks_;
    int32_t sept_demon_cumulative_time_;
    int32_t sept_demon_stage_reward_num_;
    int32_t sept_demon_stage_reward_use_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SeptDemonWorldData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SeptDemonWorldData) */ {
 public:
  inline SeptDemonWorldData() : SeptDemonWorldData(nullptr) {}
  ~SeptDemonWorldData() override;
  explicit PROTOBUF_CONSTEXPR SeptDemonWorldData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeptDemonWorldData(const SeptDemonWorldData& from);
  SeptDemonWorldData(SeptDemonWorldData&& from) noexcept
    : SeptDemonWorldData() {
    *this = ::std::move(from);
  }

  inline SeptDemonWorldData& operator=(const SeptDemonWorldData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeptDemonWorldData& operator=(SeptDemonWorldData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeptDemonWorldData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeptDemonWorldData* internal_default_instance() {
    return reinterpret_cast<const SeptDemonWorldData*>(
               &_SeptDemonWorldData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(SeptDemonWorldData& a, SeptDemonWorldData& b) {
    a.Swap(&b);
  }
  inline void Swap(SeptDemonWorldData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeptDemonWorldData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeptDemonWorldData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeptDemonWorldData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeptDemonWorldData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeptDemonWorldData& from) {
    SeptDemonWorldData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeptDemonWorldData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SeptDemonWorldData";
  }
  protected:
  explicit SeptDemonWorldData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdsFieldNumber = 8,
    kCurEndTicksFieldNumber = 2,
    kIsStartedFieldNumber = 1,
    kCurStageFieldNumber = 4,
    kNextOpenTicksFieldNumber = 3,
    kCurStageHpFieldNumber = 5,
    kCurStageMaxhpFieldNumber = 6,
    kLastStageFieldNumber = 7,
  };
  // repeated int64 player_ids = 8;
  int player_ids_size() const;
  private:
  int _internal_player_ids_size() const;
  public:
  void clear_player_ids();
  private:
  int64_t _internal_player_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_player_ids() const;
  void _internal_add_player_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_player_ids();
  public:
  int64_t player_ids(int index) const;
  void set_player_ids(int index, int64_t value);
  void add_player_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      player_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_player_ids();

  // int64 cur_end_ticks = 2;
  void clear_cur_end_ticks();
  int64_t cur_end_ticks() const;
  void set_cur_end_ticks(int64_t value);
  private:
  int64_t _internal_cur_end_ticks() const;
  void _internal_set_cur_end_ticks(int64_t value);
  public:

  // bool is_started = 1;
  void clear_is_started();
  bool is_started() const;
  void set_is_started(bool value);
  private:
  bool _internal_is_started() const;
  void _internal_set_is_started(bool value);
  public:

  // int32 cur_stage = 4;
  void clear_cur_stage();
  int32_t cur_stage() const;
  void set_cur_stage(int32_t value);
  private:
  int32_t _internal_cur_stage() const;
  void _internal_set_cur_stage(int32_t value);
  public:

  // int64 next_open_ticks = 3;
  void clear_next_open_ticks();
  int64_t next_open_ticks() const;
  void set_next_open_ticks(int64_t value);
  private:
  int64_t _internal_next_open_ticks() const;
  void _internal_set_next_open_ticks(int64_t value);
  public:

  // float cur_stage_hp = 5;
  void clear_cur_stage_hp();
  float cur_stage_hp() const;
  void set_cur_stage_hp(float value);
  private:
  float _internal_cur_stage_hp() const;
  void _internal_set_cur_stage_hp(float value);
  public:

  // float cur_stage_maxhp = 6;
  void clear_cur_stage_maxhp();
  float cur_stage_maxhp() const;
  void set_cur_stage_maxhp(float value);
  private:
  float _internal_cur_stage_maxhp() const;
  void _internal_set_cur_stage_maxhp(float value);
  public:

  // int32 last_stage = 7;
  void clear_last_stage();
  int32_t last_stage() const;
  void set_last_stage(int32_t value);
  private:
  int32_t _internal_last_stage() const;
  void _internal_set_last_stage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SeptDemonWorldData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > player_ids_;
    mutable std::atomic<int> _player_ids_cached_byte_size_;
    int64_t cur_end_ticks_;
    bool is_started_;
    int32_t cur_stage_;
    int64_t next_open_ticks_;
    float cur_stage_hp_;
    float cur_stage_maxhp_;
    int32_t last_stage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SimpleCounter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SimpleCounter) */ {
 public:
  inline SimpleCounter() : SimpleCounter(nullptr) {}
  ~SimpleCounter() override;
  explicit PROTOBUF_CONSTEXPR SimpleCounter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleCounter(const SimpleCounter& from);
  SimpleCounter(SimpleCounter&& from) noexcept
    : SimpleCounter() {
    *this = ::std::move(from);
  }

  inline SimpleCounter& operator=(const SimpleCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleCounter& operator=(SimpleCounter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleCounter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleCounter* internal_default_instance() {
    return reinterpret_cast<const SimpleCounter*>(
               &_SimpleCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(SimpleCounter& a, SimpleCounter& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleCounter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleCounter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleCounter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleCounter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleCounter& from) {
    SimpleCounter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleCounter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SimpleCounter";
  }
  protected:
  explicit SimpleCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // int64 num = 2;
  void clear_num();
  int64_t num() const;
  void set_num(int64_t value);
  private:
  int64_t _internal_num() const;
  void _internal_set_num(int64_t value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SimpleCounter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t num_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API FunctionCounter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.FunctionCounter) */ {
 public:
  inline FunctionCounter() : FunctionCounter(nullptr) {}
  ~FunctionCounter() override;
  explicit PROTOBUF_CONSTEXPR FunctionCounter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCounter(const FunctionCounter& from);
  FunctionCounter(FunctionCounter&& from) noexcept
    : FunctionCounter() {
    *this = ::std::move(from);
  }

  inline FunctionCounter& operator=(const FunctionCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCounter& operator=(FunctionCounter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCounter& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCounter* internal_default_instance() {
    return reinterpret_cast<const FunctionCounter*>(
               &_FunctionCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(FunctionCounter& a, FunctionCounter& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCounter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCounter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCounter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCounter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FunctionCounter& from) {
    FunctionCounter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCounter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.FunctionCounter";
  }
  protected:
  explicit FunctionCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountersFieldNumber = 2,
    kFunctionTypeFieldNumber = 1,
  };
  // repeated .idlepb.SimpleCounter counters = 2;
  int counters_size() const;
  private:
  int _internal_counters_size() const;
  public:
  void clear_counters();
  ::idlepb::SimpleCounter* mutable_counters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleCounter >*
      mutable_counters();
  private:
  const ::idlepb::SimpleCounter& _internal_counters(int index) const;
  ::idlepb::SimpleCounter* _internal_add_counters();
  public:
  const ::idlepb::SimpleCounter& counters(int index) const;
  ::idlepb::SimpleCounter* add_counters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleCounter >&
      counters() const;

  // int32 function_type = 1;
  void clear_function_type();
  int32_t function_type() const;
  void set_function_type(int32_t value);
  private:
  int32_t _internal_function_type() const;
  void _internal_set_function_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.FunctionCounter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleCounter > counters_;
    int32_t function_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleLifeCounterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleLifeCounterData) */ {
 public:
  inline RoleLifeCounterData() : RoleLifeCounterData(nullptr) {}
  ~RoleLifeCounterData() override;
  explicit PROTOBUF_CONSTEXPR RoleLifeCounterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleLifeCounterData(const RoleLifeCounterData& from);
  RoleLifeCounterData(RoleLifeCounterData&& from) noexcept
    : RoleLifeCounterData() {
    *this = ::std::move(from);
  }

  inline RoleLifeCounterData& operator=(const RoleLifeCounterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleLifeCounterData& operator=(RoleLifeCounterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleLifeCounterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleLifeCounterData* internal_default_instance() {
    return reinterpret_cast<const RoleLifeCounterData*>(
               &_RoleLifeCounterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(RoleLifeCounterData& a, RoleLifeCounterData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleLifeCounterData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleLifeCounterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleLifeCounterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleLifeCounterData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleLifeCounterData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleLifeCounterData& from) {
    RoleLifeCounterData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleLifeCounterData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleLifeCounterData";
  }
  protected:
  explicit RoleLifeCounterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionCounterFieldNumber = 2,
  };
  // repeated .idlepb.FunctionCounter function_counter = 2;
  int function_counter_size() const;
  private:
  int _internal_function_counter_size() const;
  public:
  void clear_function_counter();
  ::idlepb::FunctionCounter* mutable_function_counter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FunctionCounter >*
      mutable_function_counter();
  private:
  const ::idlepb::FunctionCounter& _internal_function_counter(int index) const;
  ::idlepb::FunctionCounter* _internal_add_function_counter();
  public:
  const ::idlepb::FunctionCounter& function_counter(int index) const;
  ::idlepb::FunctionCounter* add_function_counter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FunctionCounter >&
      function_counter() const;

  // @@protoc_insertion_point(class_scope:idlepb.RoleLifeCounterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FunctionCounter > function_counter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API FarmlandManagementInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.FarmlandManagementInfo) */ {
 public:
  inline FarmlandManagementInfo() : FarmlandManagementInfo(nullptr) {}
  ~FarmlandManagementInfo() override;
  explicit PROTOBUF_CONSTEXPR FarmlandManagementInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FarmlandManagementInfo(const FarmlandManagementInfo& from);
  FarmlandManagementInfo(FarmlandManagementInfo&& from) noexcept
    : FarmlandManagementInfo() {
    *this = ::std::move(from);
  }

  inline FarmlandManagementInfo& operator=(const FarmlandManagementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FarmlandManagementInfo& operator=(FarmlandManagementInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FarmlandManagementInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FarmlandManagementInfo* internal_default_instance() {
    return reinterpret_cast<const FarmlandManagementInfo*>(
               &_FarmlandManagementInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(FarmlandManagementInfo& a, FarmlandManagementInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FarmlandManagementInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FarmlandManagementInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FarmlandManagementInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FarmlandManagementInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FarmlandManagementInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FarmlandManagementInfo& from) {
    FarmlandManagementInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FarmlandManagementInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.FarmlandManagementInfo";
  }
  protected:
  explicit FarmlandManagementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlantUidFieldNumber = 1,
    kTargetStageFieldNumber = 2,
    kAutoSeedFieldNumber = 3,
    kAutoHarvestFieldNumber = 4,
  };
  // int32 plant_uid = 1;
  void clear_plant_uid();
  int32_t plant_uid() const;
  void set_plant_uid(int32_t value);
  private:
  int32_t _internal_plant_uid() const;
  void _internal_set_plant_uid(int32_t value);
  public:

  // int32 target_stage = 2;
  void clear_target_stage();
  int32_t target_stage() const;
  void set_target_stage(int32_t value);
  private:
  int32_t _internal_target_stage() const;
  void _internal_set_target_stage(int32_t value);
  public:

  // bool auto_seed = 3;
  void clear_auto_seed();
  bool auto_seed() const;
  void set_auto_seed(bool value);
  private:
  bool _internal_auto_seed() const;
  void _internal_set_auto_seed(bool value);
  public:

  // bool auto_harvest = 4;
  void clear_auto_harvest();
  bool auto_harvest() const;
  void set_auto_harvest(bool value);
  private:
  bool _internal_auto_harvest() const;
  void _internal_set_auto_harvest(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.FarmlandManagementInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t plant_uid_;
    int32_t target_stage_;
    bool auto_seed_;
    bool auto_harvest_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API FarmlandPlantData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.FarmlandPlantData) */ {
 public:
  inline FarmlandPlantData() : FarmlandPlantData(nullptr) {}
  ~FarmlandPlantData() override;
  explicit PROTOBUF_CONSTEXPR FarmlandPlantData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FarmlandPlantData(const FarmlandPlantData& from);
  FarmlandPlantData(FarmlandPlantData&& from) noexcept
    : FarmlandPlantData() {
    *this = ::std::move(from);
  }

  inline FarmlandPlantData& operator=(const FarmlandPlantData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FarmlandPlantData& operator=(FarmlandPlantData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FarmlandPlantData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FarmlandPlantData* internal_default_instance() {
    return reinterpret_cast<const FarmlandPlantData*>(
               &_FarmlandPlantData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(FarmlandPlantData& a, FarmlandPlantData& b) {
    a.Swap(&b);
  }
  inline void Swap(FarmlandPlantData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FarmlandPlantData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FarmlandPlantData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FarmlandPlantData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FarmlandPlantData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FarmlandPlantData& from) {
    FarmlandPlantData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FarmlandPlantData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.FarmlandPlantData";
  }
  protected:
  explicit FarmlandPlantData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlantUidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kRotationFieldNumber = 4,
    kConfigIdFieldNumber = 5,
    kShenlingFieldNumber = 6,
    kBeginDateFieldNumber = 7,
    kSpeedUpFieldNumber = 8,
  };
  // int32 plant_uid = 1;
  void clear_plant_uid();
  int32_t plant_uid() const;
  void set_plant_uid(int32_t value);
  private:
  int32_t _internal_plant_uid() const;
  void _internal_set_plant_uid(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 rotation = 4;
  void clear_rotation();
  int32_t rotation() const;
  void set_rotation(int32_t value);
  private:
  int32_t _internal_rotation() const;
  void _internal_set_rotation(int32_t value);
  public:

  // int32 config_id = 5;
  void clear_config_id();
  int32_t config_id() const;
  void set_config_id(int32_t value);
  private:
  int32_t _internal_config_id() const;
  void _internal_set_config_id(int32_t value);
  public:

  // int32 shenling = 6;
  void clear_shenling();
  int32_t shenling() const;
  void set_shenling(int32_t value);
  private:
  int32_t _internal_shenling() const;
  void _internal_set_shenling(int32_t value);
  public:

  // int64 begin_date = 7;
  void clear_begin_date();
  int64_t begin_date() const;
  void set_begin_date(int64_t value);
  private:
  int64_t _internal_begin_date() const;
  void _internal_set_begin_date(int64_t value);
  public:

  // int32 speed_up = 8;
  void clear_speed_up();
  int32_t speed_up() const;
  void set_speed_up(int32_t value);
  private:
  int32_t _internal_speed_up() const;
  void _internal_set_speed_up(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.FarmlandPlantData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t plant_uid_;
    int32_t x_;
    int32_t y_;
    int32_t rotation_;
    int32_t config_id_;
    int32_t shenling_;
    int64_t begin_date_;
    int32_t speed_up_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleFarmlandData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleFarmlandData) */ {
 public:
  inline RoleFarmlandData() : RoleFarmlandData(nullptr) {}
  ~RoleFarmlandData() override;
  explicit PROTOBUF_CONSTEXPR RoleFarmlandData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleFarmlandData(const RoleFarmlandData& from);
  RoleFarmlandData(RoleFarmlandData&& from) noexcept
    : RoleFarmlandData() {
    *this = ::std::move(from);
  }

  inline RoleFarmlandData& operator=(const RoleFarmlandData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleFarmlandData& operator=(RoleFarmlandData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleFarmlandData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleFarmlandData* internal_default_instance() {
    return reinterpret_cast<const RoleFarmlandData*>(
               &_RoleFarmlandData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(RoleFarmlandData& a, RoleFarmlandData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleFarmlandData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleFarmlandData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleFarmlandData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleFarmlandData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleFarmlandData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleFarmlandData& from) {
    RoleFarmlandData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleFarmlandData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleFarmlandData";
  }
  protected:
  explicit RoleFarmlandData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPlantsFieldNumber = 1,
    kManagmentPlanFieldNumber = 2,
    kUnlockBlocksFieldNumber = 3,
    kRipeItemsFieldNumber = 6,
    kFarmerGradeFieldNumber = 4,
    kFarmerFriendshipExpFieldNumber = 5,
  };
  // repeated .idlepb.FarmlandPlantData current_plants = 1;
  int current_plants_size() const;
  private:
  int _internal_current_plants_size() const;
  public:
  void clear_current_plants();
  ::idlepb::FarmlandPlantData* mutable_current_plants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FarmlandPlantData >*
      mutable_current_plants();
  private:
  const ::idlepb::FarmlandPlantData& _internal_current_plants(int index) const;
  ::idlepb::FarmlandPlantData* _internal_add_current_plants();
  public:
  const ::idlepb::FarmlandPlantData& current_plants(int index) const;
  ::idlepb::FarmlandPlantData* add_current_plants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FarmlandPlantData >&
      current_plants() const;

  // repeated .idlepb.FarmlandManagementInfo managment_plan = 2;
  int managment_plan_size() const;
  private:
  int _internal_managment_plan_size() const;
  public:
  void clear_managment_plan();
  ::idlepb::FarmlandManagementInfo* mutable_managment_plan(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FarmlandManagementInfo >*
      mutable_managment_plan();
  private:
  const ::idlepb::FarmlandManagementInfo& _internal_managment_plan(int index) const;
  ::idlepb::FarmlandManagementInfo* _internal_add_managment_plan();
  public:
  const ::idlepb::FarmlandManagementInfo& managment_plan(int index) const;
  ::idlepb::FarmlandManagementInfo* add_managment_plan();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FarmlandManagementInfo >&
      managment_plan() const;

  // repeated .idlepb.Vector2 unlock_blocks = 3;
  int unlock_blocks_size() const;
  private:
  int _internal_unlock_blocks_size() const;
  public:
  void clear_unlock_blocks();
  ::idlepb::Vector2* mutable_unlock_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Vector2 >*
      mutable_unlock_blocks();
  private:
  const ::idlepb::Vector2& _internal_unlock_blocks(int index) const;
  ::idlepb::Vector2* _internal_add_unlock_blocks();
  public:
  const ::idlepb::Vector2& unlock_blocks(int index) const;
  ::idlepb::Vector2* add_unlock_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Vector2 >&
      unlock_blocks() const;

  // repeated .idlepb.SimpleItemData ripe_items = 6;
  int ripe_items_size() const;
  private:
  int _internal_ripe_items_size() const;
  public:
  void clear_ripe_items();
  ::idlepb::SimpleItemData* mutable_ripe_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >*
      mutable_ripe_items();
  private:
  const ::idlepb::SimpleItemData& _internal_ripe_items(int index) const;
  ::idlepb::SimpleItemData* _internal_add_ripe_items();
  public:
  const ::idlepb::SimpleItemData& ripe_items(int index) const;
  ::idlepb::SimpleItemData* add_ripe_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >&
      ripe_items() const;

  // int32 farmer_grade = 4;
  void clear_farmer_grade();
  int32_t farmer_grade() const;
  void set_farmer_grade(int32_t value);
  private:
  int32_t _internal_farmer_grade() const;
  void _internal_set_farmer_grade(int32_t value);
  public:

  // int32 farmer_friendship_exp = 5;
  void clear_farmer_friendship_exp();
  int32_t farmer_friendship_exp() const;
  void set_farmer_friendship_exp(int32_t value);
  private:
  int32_t _internal_farmer_friendship_exp() const;
  void _internal_set_farmer_friendship_exp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleFarmlandData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FarmlandPlantData > current_plants_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FarmlandManagementInfo > managment_plan_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Vector2 > unlock_blocks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData > ripe_items_;
    int32_t farmer_grade_;
    int32_t farmer_friendship_exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleAvatarData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleAvatarData) */ {
 public:
  inline RoleAvatarData() : RoleAvatarData(nullptr) {}
  ~RoleAvatarData() override;
  explicit PROTOBUF_CONSTEXPR RoleAvatarData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleAvatarData(const RoleAvatarData& from);
  RoleAvatarData(RoleAvatarData&& from) noexcept
    : RoleAvatarData() {
    *this = ::std::move(from);
  }

  inline RoleAvatarData& operator=(const RoleAvatarData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleAvatarData& operator=(RoleAvatarData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleAvatarData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleAvatarData* internal_default_instance() {
    return reinterpret_cast<const RoleAvatarData*>(
               &_RoleAvatarData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(RoleAvatarData& a, RoleAvatarData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleAvatarData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleAvatarData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleAvatarData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleAvatarData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleAvatarData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleAvatarData& from) {
    RoleAvatarData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleAvatarData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleAvatarData";
  }
  protected:
  explicit RoleAvatarData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempPackageFieldNumber = 5,
    kRankFieldNumber = 1,
    kCurrentWorldIndexFieldNumber = 2,
    kBeginTimeFieldNumber = 3,
    kLastDrawTimeFieldNumber = 4,
    kLastWroldIndexFieldNumber = 6,
  };
  // repeated .idlepb.SimpleItemData temp_package = 5;
  int temp_package_size() const;
  private:
  int _internal_temp_package_size() const;
  public:
  void clear_temp_package();
  ::idlepb::SimpleItemData* mutable_temp_package(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >*
      mutable_temp_package();
  private:
  const ::idlepb::SimpleItemData& _internal_temp_package(int index) const;
  ::idlepb::SimpleItemData* _internal_add_temp_package();
  public:
  const ::idlepb::SimpleItemData& temp_package(int index) const;
  ::idlepb::SimpleItemData* add_temp_package();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >&
      temp_package() const;

  // int32 rank = 1;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // int32 current_world_index = 2;
  void clear_current_world_index();
  int32_t current_world_index() const;
  void set_current_world_index(int32_t value);
  private:
  int32_t _internal_current_world_index() const;
  void _internal_set_current_world_index(int32_t value);
  public:

  // int64 begin_time = 3;
  void clear_begin_time();
  int64_t begin_time() const;
  void set_begin_time(int64_t value);
  private:
  int64_t _internal_begin_time() const;
  void _internal_set_begin_time(int64_t value);
  public:

  // int64 last_draw_time = 4;
  void clear_last_draw_time();
  int64_t last_draw_time() const;
  void set_last_draw_time(int64_t value);
  private:
  int64_t _internal_last_draw_time() const;
  void _internal_set_last_draw_time(int64_t value);
  public:

  // int32 last_wrold_index = 6;
  void clear_last_wrold_index();
  int32_t last_wrold_index() const;
  void set_last_wrold_index(int32_t value);
  private:
  int32_t _internal_last_wrold_index() const;
  void _internal_set_last_wrold_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleAvatarData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData > temp_package_;
    int32_t rank_;
    int32_t current_world_index_;
    int64_t begin_time_;
    int64_t last_draw_time_;
    int32_t last_wrold_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API BiographyRoleLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.BiographyRoleLog) */ {
 public:
  inline BiographyRoleLog() : BiographyRoleLog(nullptr) {}
  ~BiographyRoleLog() override;
  explicit PROTOBUF_CONSTEXPR BiographyRoleLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiographyRoleLog(const BiographyRoleLog& from);
  BiographyRoleLog(BiographyRoleLog&& from) noexcept
    : BiographyRoleLog() {
    *this = ::std::move(from);
  }

  inline BiographyRoleLog& operator=(const BiographyRoleLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiographyRoleLog& operator=(BiographyRoleLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiographyRoleLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiographyRoleLog* internal_default_instance() {
    return reinterpret_cast<const BiographyRoleLog*>(
               &_BiographyRoleLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(BiographyRoleLog& a, BiographyRoleLog& b) {
    a.Swap(&b);
  }
  inline void Swap(BiographyRoleLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiographyRoleLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiographyRoleLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiographyRoleLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiographyRoleLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BiographyRoleLog& from) {
    BiographyRoleLog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiographyRoleLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.BiographyRoleLog";
  }
  protected:
  explicit BiographyRoleLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneNameFieldNumber = 4,
    kRoleNameFieldNumber = 5,
    kContentFieldNumber = 6,
    kDaoYearFieldNumber = 1,
    kLogTypeFieldNumber = 2,
    kPoemSeedFieldNumber = 3,
  };
  // string zone_name = 4;
  void clear_zone_name();
  const std::string& zone_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone_name();
  PROTOBUF_NODISCARD std::string* release_zone_name();
  void set_allocated_zone_name(std::string* zone_name);
  private:
  const std::string& _internal_zone_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone_name(const std::string& value);
  std::string* _internal_mutable_zone_name();
  public:

  // string role_name = 5;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // string content = 6;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 dao_year = 1;
  void clear_dao_year();
  int32_t dao_year() const;
  void set_dao_year(int32_t value);
  private:
  int32_t _internal_dao_year() const;
  void _internal_set_dao_year(int32_t value);
  public:

  // int32 log_type = 2;
  void clear_log_type();
  int32_t log_type() const;
  void set_log_type(int32_t value);
  private:
  int32_t _internal_log_type() const;
  void _internal_set_log_type(int32_t value);
  public:

  // int32 poem_seed = 3;
  void clear_poem_seed();
  int32_t poem_seed() const;
  void set_poem_seed(int32_t value);
  private:
  int32_t _internal_poem_seed() const;
  void _internal_set_poem_seed(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.BiographyRoleLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int32_t dao_year_;
    int32_t log_type_;
    int32_t poem_seed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleBiographyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleBiographyData) */ {
 public:
  inline RoleBiographyData() : RoleBiographyData(nullptr) {}
  ~RoleBiographyData() override;
  explicit PROTOBUF_CONSTEXPR RoleBiographyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleBiographyData(const RoleBiographyData& from);
  RoleBiographyData(RoleBiographyData&& from) noexcept
    : RoleBiographyData() {
    *this = ::std::move(from);
  }

  inline RoleBiographyData& operator=(const RoleBiographyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleBiographyData& operator=(RoleBiographyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleBiographyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleBiographyData* internal_default_instance() {
    return reinterpret_cast<const RoleBiographyData*>(
               &_RoleBiographyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(RoleBiographyData& a, RoleBiographyData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleBiographyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleBiographyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleBiographyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleBiographyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleBiographyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleBiographyData& from) {
    RoleBiographyData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleBiographyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleBiographyData";
  }
  protected:
  explicit RoleBiographyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceivedCfgIdsFieldNumber = 1,
    kReceivedEventCfgIdsFieldNumber = 2,
    kRoleLogsFieldNumber = 3,
  };
  // repeated int32 received_cfg_ids = 1;
  int received_cfg_ids_size() const;
  private:
  int _internal_received_cfg_ids_size() const;
  public:
  void clear_received_cfg_ids();
  private:
  int32_t _internal_received_cfg_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_received_cfg_ids() const;
  void _internal_add_received_cfg_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_received_cfg_ids();
  public:
  int32_t received_cfg_ids(int index) const;
  void set_received_cfg_ids(int index, int32_t value);
  void add_received_cfg_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      received_cfg_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_received_cfg_ids();

  // repeated int32 received_event_cfg_ids = 2;
  int received_event_cfg_ids_size() const;
  private:
  int _internal_received_event_cfg_ids_size() const;
  public:
  void clear_received_event_cfg_ids();
  private:
  int32_t _internal_received_event_cfg_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_received_event_cfg_ids() const;
  void _internal_add_received_event_cfg_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_received_event_cfg_ids();
  public:
  int32_t received_event_cfg_ids(int index) const;
  void set_received_event_cfg_ids(int index, int32_t value);
  void add_received_event_cfg_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      received_event_cfg_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_received_event_cfg_ids();

  // repeated .idlepb.BiographyRoleLog role_logs = 3;
  int role_logs_size() const;
  private:
  int _internal_role_logs_size() const;
  public:
  void clear_role_logs();
  ::idlepb::BiographyRoleLog* mutable_role_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyRoleLog >*
      mutable_role_logs();
  private:
  const ::idlepb::BiographyRoleLog& _internal_role_logs(int index) const;
  ::idlepb::BiographyRoleLog* _internal_add_role_logs();
  public:
  const ::idlepb::BiographyRoleLog& role_logs(int index) const;
  ::idlepb::BiographyRoleLog* add_role_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyRoleLog >&
      role_logs() const;

  // @@protoc_insertion_point(class_scope:idlepb.RoleBiographyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > received_cfg_ids_;
    mutable std::atomic<int> _received_cfg_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > received_event_cfg_ids_;
    mutable std::atomic<int> _received_event_cfg_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyRoleLog > role_logs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SimpleRoleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SimpleRoleInfo) */ {
 public:
  inline SimpleRoleInfo() : SimpleRoleInfo(nullptr) {}
  ~SimpleRoleInfo() override;
  explicit PROTOBUF_CONSTEXPR SimpleRoleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleRoleInfo(const SimpleRoleInfo& from);
  SimpleRoleInfo(SimpleRoleInfo&& from) noexcept
    : SimpleRoleInfo() {
    *this = ::std::move(from);
  }

  inline SimpleRoleInfo& operator=(const SimpleRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleRoleInfo& operator=(SimpleRoleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleRoleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleRoleInfo* internal_default_instance() {
    return reinterpret_cast<const SimpleRoleInfo*>(
               &_SimpleRoleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(SimpleRoleInfo& a, SimpleRoleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleRoleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleRoleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleRoleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleRoleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleRoleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleRoleInfo& from) {
    SimpleRoleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleRoleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SimpleRoleInfo";
  }
  protected:
  explicit SimpleRoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 2,
    kSeptNameFieldNumber = 6,
    kModelConfigFieldNumber = 3,
    kRoleIdFieldNumber = 1,
    kRankFieldNumber = 4,
    kRoleCultivationDirectionFieldNumber = 5,
    kLastOnlineTimespanFieldNumber = 21,
    kServerIdFieldNumber = 22,
    kSeptPositionFieldNumber = 7,
  };
  // string role_name = 2;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // string sept_name = 6;
  void clear_sept_name();
  const std::string& sept_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sept_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sept_name();
  PROTOBUF_NODISCARD std::string* release_sept_name();
  void set_allocated_sept_name(std::string* sept_name);
  private:
  const std::string& _internal_sept_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sept_name(const std::string& value);
  std::string* _internal_mutable_sept_name();
  public:

  // .idlepb.CharacterModelConfig model_config = 3;
  bool has_model_config() const;
  private:
  bool _internal_has_model_config() const;
  public:
  void clear_model_config();
  const ::idlepb::CharacterModelConfig& model_config() const;
  PROTOBUF_NODISCARD ::idlepb::CharacterModelConfig* release_model_config();
  ::idlepb::CharacterModelConfig* mutable_model_config();
  void set_allocated_model_config(::idlepb::CharacterModelConfig* model_config);
  private:
  const ::idlepb::CharacterModelConfig& _internal_model_config() const;
  ::idlepb::CharacterModelConfig* _internal_mutable_model_config();
  public:
  void unsafe_arena_set_allocated_model_config(
      ::idlepb::CharacterModelConfig* model_config);
  ::idlepb::CharacterModelConfig* unsafe_arena_release_model_config();

  // uint64 role_id = 1;
  void clear_role_id();
  uint64_t role_id() const;
  void set_role_id(uint64_t value);
  private:
  uint64_t _internal_role_id() const;
  void _internal_set_role_id(uint64_t value);
  public:

  // int32 rank = 4;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // .idlepb.CultivationDirection role_cultivation_direction = 5;
  void clear_role_cultivation_direction();
  ::idlepb::CultivationDirection role_cultivation_direction() const;
  void set_role_cultivation_direction(::idlepb::CultivationDirection value);
  private:
  ::idlepb::CultivationDirection _internal_role_cultivation_direction() const;
  void _internal_set_role_cultivation_direction(::idlepb::CultivationDirection value);
  public:

  // int64 last_online_timespan = 21;
  void clear_last_online_timespan();
  int64_t last_online_timespan() const;
  void set_last_online_timespan(int64_t value);
  private:
  int64_t _internal_last_online_timespan() const;
  void _internal_set_last_online_timespan(int64_t value);
  public:

  // int64 server_id = 22;
  void clear_server_id();
  int64_t server_id() const;
  void set_server_id(int64_t value);
  private:
  int64_t _internal_server_id() const;
  void _internal_set_server_id(int64_t value);
  public:

  // .idlepb.SeptPosition sept_position = 7;
  void clear_sept_position();
  ::idlepb::SeptPosition sept_position() const;
  void set_sept_position(::idlepb::SeptPosition value);
  private:
  ::idlepb::SeptPosition _internal_sept_position() const;
  void _internal_set_sept_position(::idlepb::SeptPosition value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SimpleRoleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sept_name_;
    ::idlepb::CharacterModelConfig* model_config_;
    uint64_t role_id_;
    int32_t rank_;
    int role_cultivation_direction_;
    int64_t last_online_timespan_;
    int64_t server_id_;
    int sept_position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kRoleInfoFieldNumber = 3,
    kRoleIdFieldNumber = 1,
    kTimeFieldNumber = 5,
    kTypeFieldNumber = 4,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .idlepb.SimpleRoleInfo role_info = 3;
  bool has_role_info() const;
  private:
  bool _internal_has_role_info() const;
  public:
  void clear_role_info();
  const ::idlepb::SimpleRoleInfo& role_info() const;
  PROTOBUF_NODISCARD ::idlepb::SimpleRoleInfo* release_role_info();
  ::idlepb::SimpleRoleInfo* mutable_role_info();
  void set_allocated_role_info(::idlepb::SimpleRoleInfo* role_info);
  private:
  const ::idlepb::SimpleRoleInfo& _internal_role_info() const;
  ::idlepb::SimpleRoleInfo* _internal_mutable_role_info();
  public:
  void unsafe_arena_set_allocated_role_info(
      ::idlepb::SimpleRoleInfo* role_info);
  ::idlepb::SimpleRoleInfo* unsafe_arena_release_role_info();

  // uint64 role_id = 1;
  void clear_role_id();
  uint64_t role_id() const;
  void set_role_id(uint64_t value);
  private:
  uint64_t _internal_role_id() const;
  void _internal_set_role_id(uint64_t value);
  public:

  // int64 time = 5;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // .idlepb.ChatMessageType type = 4;
  void clear_type();
  ::idlepb::ChatMessageType type() const;
  void set_type(::idlepb::ChatMessageType value);
  private:
  ::idlepb::ChatMessageType _internal_type() const;
  void _internal_set_type(::idlepb::ChatMessageType value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::idlepb::SimpleRoleInfo* role_info_;
    uint64_t role_id_;
    int64_t time_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PrivateChatRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PrivateChatRecord) */ {
 public:
  inline PrivateChatRecord() : PrivateChatRecord(nullptr) {}
  ~PrivateChatRecord() override;
  explicit PROTOBUF_CONSTEXPR PrivateChatRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivateChatRecord(const PrivateChatRecord& from);
  PrivateChatRecord(PrivateChatRecord&& from) noexcept
    : PrivateChatRecord() {
    *this = ::std::move(from);
  }

  inline PrivateChatRecord& operator=(const PrivateChatRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateChatRecord& operator=(PrivateChatRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrivateChatRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivateChatRecord* internal_default_instance() {
    return reinterpret_cast<const PrivateChatRecord*>(
               &_PrivateChatRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(PrivateChatRecord& a, PrivateChatRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateChatRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateChatRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivateChatRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivateChatRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrivateChatRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrivateChatRecord& from) {
    PrivateChatRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateChatRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PrivateChatRecord";
  }
  protected:
  explicit PrivateChatRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatRecordFieldNumber = 2,
    kRoleIdFieldNumber = 1,
    kUnreadNumFieldNumber = 3,
  };
  // repeated .idlepb.ChatMessage chat_record = 2;
  int chat_record_size() const;
  private:
  int _internal_chat_record_size() const;
  public:
  void clear_chat_record();
  ::idlepb::ChatMessage* mutable_chat_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >*
      mutable_chat_record();
  private:
  const ::idlepb::ChatMessage& _internal_chat_record(int index) const;
  ::idlepb::ChatMessage* _internal_add_chat_record();
  public:
  const ::idlepb::ChatMessage& chat_record(int index) const;
  ::idlepb::ChatMessage* add_chat_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >&
      chat_record() const;

  // uint64 role_id = 1;
  void clear_role_id();
  uint64_t role_id() const;
  void set_role_id(uint64_t value);
  private:
  uint64_t _internal_role_id() const;
  void _internal_set_role_id(uint64_t value);
  public:

  // int32 unread_num = 3;
  void clear_unread_num();
  int32_t unread_num() const;
  void set_unread_num(int32_t value);
  private:
  int32_t _internal_unread_num() const;
  void _internal_set_unread_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PrivateChatRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage > chat_record_;
    uint64_t role_id_;
    int32_t unread_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RolePrivateChatRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RolePrivateChatRecord) */ {
 public:
  inline RolePrivateChatRecord() : RolePrivateChatRecord(nullptr) {}
  ~RolePrivateChatRecord() override;
  explicit PROTOBUF_CONSTEXPR RolePrivateChatRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RolePrivateChatRecord(const RolePrivateChatRecord& from);
  RolePrivateChatRecord(RolePrivateChatRecord&& from) noexcept
    : RolePrivateChatRecord() {
    *this = ::std::move(from);
  }

  inline RolePrivateChatRecord& operator=(const RolePrivateChatRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline RolePrivateChatRecord& operator=(RolePrivateChatRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RolePrivateChatRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const RolePrivateChatRecord* internal_default_instance() {
    return reinterpret_cast<const RolePrivateChatRecord*>(
               &_RolePrivateChatRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(RolePrivateChatRecord& a, RolePrivateChatRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(RolePrivateChatRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RolePrivateChatRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RolePrivateChatRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RolePrivateChatRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RolePrivateChatRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RolePrivateChatRecord& from) {
    RolePrivateChatRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RolePrivateChatRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RolePrivateChatRecord";
  }
  protected:
  explicit RolePrivateChatRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kRoleIdFieldNumber = 1,
  };
  // repeated .idlepb.PrivateChatRecord data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::idlepb::PrivateChatRecord* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PrivateChatRecord >*
      mutable_data();
  private:
  const ::idlepb::PrivateChatRecord& _internal_data(int index) const;
  ::idlepb::PrivateChatRecord* _internal_add_data();
  public:
  const ::idlepb::PrivateChatRecord& data(int index) const;
  ::idlepb::PrivateChatRecord* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PrivateChatRecord >&
      data() const;

  // uint64 role_id = 1;
  void clear_role_id();
  uint64_t role_id() const;
  void set_role_id(uint64_t value);
  private:
  uint64_t _internal_role_id() const;
  void _internal_set_role_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RolePrivateChatRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PrivateChatRecord > data_;
    uint64_t role_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ChatData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ChatData) */ {
 public:
  inline ChatData() : ChatData(nullptr) {}
  ~ChatData() override;
  explicit PROTOBUF_CONSTEXPR ChatData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatData(const ChatData& from);
  ChatData(ChatData&& from) noexcept
    : ChatData() {
    *this = ::std::move(from);
  }

  inline ChatData& operator=(const ChatData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatData& operator=(ChatData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatData* internal_default_instance() {
    return reinterpret_cast<const ChatData*>(
               &_ChatData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(ChatData& a, ChatData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatData& from) {
    ChatData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ChatData";
  }
  protected:
  explicit ChatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColonyServersFieldNumber = 1,
    kQuadServersFieldNumber = 2,
    kLocalServerFieldNumber = 3,
  };
  // repeated .idlepb.ChatMessage colony_servers = 1;
  int colony_servers_size() const;
  private:
  int _internal_colony_servers_size() const;
  public:
  void clear_colony_servers();
  ::idlepb::ChatMessage* mutable_colony_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >*
      mutable_colony_servers();
  private:
  const ::idlepb::ChatMessage& _internal_colony_servers(int index) const;
  ::idlepb::ChatMessage* _internal_add_colony_servers();
  public:
  const ::idlepb::ChatMessage& colony_servers(int index) const;
  ::idlepb::ChatMessage* add_colony_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >&
      colony_servers() const;

  // repeated .idlepb.ChatMessage quad_servers = 2;
  int quad_servers_size() const;
  private:
  int _internal_quad_servers_size() const;
  public:
  void clear_quad_servers();
  ::idlepb::ChatMessage* mutable_quad_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >*
      mutable_quad_servers();
  private:
  const ::idlepb::ChatMessage& _internal_quad_servers(int index) const;
  ::idlepb::ChatMessage* _internal_add_quad_servers();
  public:
  const ::idlepb::ChatMessage& quad_servers(int index) const;
  ::idlepb::ChatMessage* add_quad_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >&
      quad_servers() const;

  // repeated .idlepb.ChatMessage local_server = 3;
  int local_server_size() const;
  private:
  int _internal_local_server_size() const;
  public:
  void clear_local_server();
  ::idlepb::ChatMessage* mutable_local_server(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >*
      mutable_local_server();
  private:
  const ::idlepb::ChatMessage& _internal_local_server(int index) const;
  ::idlepb::ChatMessage* _internal_add_local_server();
  public:
  const ::idlepb::ChatMessage& local_server(int index) const;
  ::idlepb::ChatMessage* add_local_server();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >&
      local_server() const;

  // @@protoc_insertion_point(class_scope:idlepb.ChatData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage > colony_servers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage > quad_servers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage > local_server_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API FriendListItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.FriendListItem) */ {
 public:
  inline FriendListItem() : FriendListItem(nullptr) {}
  ~FriendListItem() override;
  explicit PROTOBUF_CONSTEXPR FriendListItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendListItem(const FriendListItem& from);
  FriendListItem(FriendListItem&& from) noexcept
    : FriendListItem() {
    *this = ::std::move(from);
  }

  inline FriendListItem& operator=(const FriendListItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListItem& operator=(FriendListItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendListItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendListItem* internal_default_instance() {
    return reinterpret_cast<const FriendListItem*>(
               &_FriendListItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(FriendListItem& a, FriendListItem& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendListItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendListItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendListItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendListItem& from) {
    FriendListItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.FriendListItem";
  }
  protected:
  explicit FriendListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kRelationshipFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int64 role_id = 1;
  void clear_role_id();
  int64_t role_id() const;
  void set_role_id(int64_t value);
  private:
  int64_t _internal_role_id() const;
  void _internal_set_role_id(int64_t value);
  public:

  // int32 relationship = 2;
  void clear_relationship();
  int32_t relationship() const;
  void set_relationship(int32_t value);
  private:
  int32_t _internal_relationship() const;
  void _internal_set_relationship(int32_t value);
  public:

  // .idlepb.FriendRelationshipType type = 3;
  void clear_type();
  ::idlepb::FriendRelationshipType type() const;
  void set_type(::idlepb::FriendRelationshipType value);
  private:
  ::idlepb::FriendRelationshipType _internal_type() const;
  void _internal_set_type(::idlepb::FriendRelationshipType value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.FriendListItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t role_id_;
    int32_t relationship_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleFriendData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleFriendData) */ {
 public:
  inline RoleFriendData() : RoleFriendData(nullptr) {}
  ~RoleFriendData() override;
  explicit PROTOBUF_CONSTEXPR RoleFriendData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleFriendData(const RoleFriendData& from);
  RoleFriendData(RoleFriendData&& from) noexcept
    : RoleFriendData() {
    *this = ::std::move(from);
  }

  inline RoleFriendData& operator=(const RoleFriendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleFriendData& operator=(RoleFriendData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleFriendData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleFriendData* internal_default_instance() {
    return reinterpret_cast<const RoleFriendData*>(
               &_RoleFriendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(RoleFriendData& a, RoleFriendData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleFriendData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleFriendData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleFriendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleFriendData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleFriendData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleFriendData& from) {
    RoleFriendData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleFriendData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleFriendData";
  }
  protected:
  explicit RoleFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 1,
    kRequestListFieldNumber = 2,
    kBlockListFieldNumber = 3,
    kMyRequestFieldNumber = 4,
    kHistoryListFieldNumber = 5,
  };
  // repeated .idlepb.FriendListItem friend_list = 1;
  int friend_list_size() const;
  private:
  int _internal_friend_list_size() const;
  public:
  void clear_friend_list();
  ::idlepb::FriendListItem* mutable_friend_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FriendListItem >*
      mutable_friend_list();
  private:
  const ::idlepb::FriendListItem& _internal_friend_list(int index) const;
  ::idlepb::FriendListItem* _internal_add_friend_list();
  public:
  const ::idlepb::FriendListItem& friend_list(int index) const;
  ::idlepb::FriendListItem* add_friend_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FriendListItem >&
      friend_list() const;

  // repeated int64 request_list = 2;
  int request_list_size() const;
  private:
  int _internal_request_list_size() const;
  public:
  void clear_request_list();
  private:
  int64_t _internal_request_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_request_list() const;
  void _internal_add_request_list(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_request_list();
  public:
  int64_t request_list(int index) const;
  void set_request_list(int index, int64_t value);
  void add_request_list(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      request_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_request_list();

  // repeated int64 block_list = 3;
  int block_list_size() const;
  private:
  int _internal_block_list_size() const;
  public:
  void clear_block_list();
  private:
  int64_t _internal_block_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_block_list() const;
  void _internal_add_block_list(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_block_list();
  public:
  int64_t block_list(int index) const;
  void set_block_list(int index, int64_t value);
  void add_block_list(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      block_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_block_list();

  // repeated int64 my_request = 4;
  int my_request_size() const;
  private:
  int _internal_my_request_size() const;
  public:
  void clear_my_request();
  private:
  int64_t _internal_my_request(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_my_request() const;
  void _internal_add_my_request(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_my_request();
  public:
  int64_t my_request(int index) const;
  void set_my_request(int index, int64_t value);
  void add_my_request(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      my_request() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_my_request();

  // repeated .idlepb.FriendListItem history_list = 5;
  int history_list_size() const;
  private:
  int _internal_history_list_size() const;
  public:
  void clear_history_list();
  ::idlepb::FriendListItem* mutable_history_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FriendListItem >*
      mutable_history_list();
  private:
  const ::idlepb::FriendListItem& _internal_history_list(int index) const;
  ::idlepb::FriendListItem* _internal_add_history_list();
  public:
  const ::idlepb::FriendListItem& history_list(int index) const;
  ::idlepb::FriendListItem* add_history_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FriendListItem >&
      history_list() const;

  // @@protoc_insertion_point(class_scope:idlepb.RoleFriendData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FriendListItem > friend_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > request_list_;
    mutable std::atomic<int> _request_list_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > block_list_;
    mutable std::atomic<int> _block_list_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > my_request_;
    mutable std::atomic<int> _my_request_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FriendListItem > history_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleOfflineFunctionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleOfflineFunctionData) */ {
 public:
  inline RoleOfflineFunctionData() : RoleOfflineFunctionData(nullptr) {}
  ~RoleOfflineFunctionData() override;
  explicit PROTOBUF_CONSTEXPR RoleOfflineFunctionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleOfflineFunctionData(const RoleOfflineFunctionData& from);
  RoleOfflineFunctionData(RoleOfflineFunctionData&& from) noexcept
    : RoleOfflineFunctionData() {
    *this = ::std::move(from);
  }

  inline RoleOfflineFunctionData& operator=(const RoleOfflineFunctionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleOfflineFunctionData& operator=(RoleOfflineFunctionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleOfflineFunctionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleOfflineFunctionData* internal_default_instance() {
    return reinterpret_cast<const RoleOfflineFunctionData*>(
               &_RoleOfflineFunctionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(RoleOfflineFunctionData& a, RoleOfflineFunctionData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleOfflineFunctionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleOfflineFunctionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleOfflineFunctionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleOfflineFunctionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleOfflineFunctionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleOfflineFunctionData& from) {
    RoleOfflineFunctionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleOfflineFunctionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleOfflineFunctionData";
  }
  protected:
  explicit RoleOfflineFunctionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailsFieldNumber = 2,
    kPrivateChatDataFieldNumber = 4,
    kRoleLogsFieldNumber = 5,
    kRoleNameFieldNumber = 11,
    kFriendDataFieldNumber = 3,
    kLeaderboardDataFieldNumber = 6,
    kRoleIdFieldNumber = 1,
    kRankFieldNumber = 12,
    kDegreeFieldNumber = 13,
    kTotalExpFieldNumber = 14,
  };
  // repeated .idlepb.Mail mails = 2;
  int mails_size() const;
  private:
  int _internal_mails_size() const;
  public:
  void clear_mails();
  ::idlepb::Mail* mutable_mails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Mail >*
      mutable_mails();
  private:
  const ::idlepb::Mail& _internal_mails(int index) const;
  ::idlepb::Mail* _internal_add_mails();
  public:
  const ::idlepb::Mail& mails(int index) const;
  ::idlepb::Mail* add_mails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Mail >&
      mails() const;

  // repeated .idlepb.PrivateChatRecord private_chat_data = 4;
  int private_chat_data_size() const;
  private:
  int _internal_private_chat_data_size() const;
  public:
  void clear_private_chat_data();
  ::idlepb::PrivateChatRecord* mutable_private_chat_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PrivateChatRecord >*
      mutable_private_chat_data();
  private:
  const ::idlepb::PrivateChatRecord& _internal_private_chat_data(int index) const;
  ::idlepb::PrivateChatRecord* _internal_add_private_chat_data();
  public:
  const ::idlepb::PrivateChatRecord& private_chat_data(int index) const;
  ::idlepb::PrivateChatRecord* add_private_chat_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PrivateChatRecord >&
      private_chat_data() const;

  // repeated .idlepb.BiographyRoleLog role_logs = 5;
  int role_logs_size() const;
  private:
  int _internal_role_logs_size() const;
  public:
  void clear_role_logs();
  ::idlepb::BiographyRoleLog* mutable_role_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyRoleLog >*
      mutable_role_logs();
  private:
  const ::idlepb::BiographyRoleLog& _internal_role_logs(int index) const;
  ::idlepb::BiographyRoleLog* _internal_add_role_logs();
  public:
  const ::idlepb::BiographyRoleLog& role_logs(int index) const;
  ::idlepb::BiographyRoleLog* add_role_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyRoleLog >&
      role_logs() const;

  // string role_name = 11;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // .idlepb.RoleFriendData friend_data = 3;
  bool has_friend_data() const;
  private:
  bool _internal_has_friend_data() const;
  public:
  void clear_friend_data();
  const ::idlepb::RoleFriendData& friend_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleFriendData* release_friend_data();
  ::idlepb::RoleFriendData* mutable_friend_data();
  void set_allocated_friend_data(::idlepb::RoleFriendData* friend_data);
  private:
  const ::idlepb::RoleFriendData& _internal_friend_data() const;
  ::idlepb::RoleFriendData* _internal_mutable_friend_data();
  public:
  void unsafe_arena_set_allocated_friend_data(
      ::idlepb::RoleFriendData* friend_data);
  ::idlepb::RoleFriendData* unsafe_arena_release_friend_data();

  // .idlepb.RoleLeaderboardData leaderboard_data = 6;
  bool has_leaderboard_data() const;
  private:
  bool _internal_has_leaderboard_data() const;
  public:
  void clear_leaderboard_data();
  const ::idlepb::RoleLeaderboardData& leaderboard_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleLeaderboardData* release_leaderboard_data();
  ::idlepb::RoleLeaderboardData* mutable_leaderboard_data();
  void set_allocated_leaderboard_data(::idlepb::RoleLeaderboardData* leaderboard_data);
  private:
  const ::idlepb::RoleLeaderboardData& _internal_leaderboard_data() const;
  ::idlepb::RoleLeaderboardData* _internal_mutable_leaderboard_data();
  public:
  void unsafe_arena_set_allocated_leaderboard_data(
      ::idlepb::RoleLeaderboardData* leaderboard_data);
  ::idlepb::RoleLeaderboardData* unsafe_arena_release_leaderboard_data();

  // int64 role_id = 1;
  void clear_role_id();
  int64_t role_id() const;
  void set_role_id(int64_t value);
  private:
  int64_t _internal_role_id() const;
  void _internal_set_role_id(int64_t value);
  public:

  // int32 rank = 12;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // int32 degree = 13;
  void clear_degree();
  int32_t degree() const;
  void set_degree(int32_t value);
  private:
  int32_t _internal_degree() const;
  void _internal_set_degree(int32_t value);
  public:

  // int64 total_exp = 14;
  void clear_total_exp();
  int64_t total_exp() const;
  void set_total_exp(int64_t value);
  private:
  int64_t _internal_total_exp() const;
  void _internal_set_total_exp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleOfflineFunctionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Mail > mails_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PrivateChatRecord > private_chat_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyRoleLog > role_logs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    ::idlepb::RoleFriendData* friend_data_;
    ::idlepb::RoleLeaderboardData* leaderboard_data_;
    int64_t role_id_;
    int32_t rank_;
    int32_t degree_;
    int64_t total_exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API ServerCounterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.ServerCounterData) */ {
 public:
  inline ServerCounterData() : ServerCounterData(nullptr) {}
  ~ServerCounterData() override;
  explicit PROTOBUF_CONSTEXPR ServerCounterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerCounterData(const ServerCounterData& from);
  ServerCounterData(ServerCounterData&& from) noexcept
    : ServerCounterData() {
    *this = ::std::move(from);
  }

  inline ServerCounterData& operator=(const ServerCounterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerCounterData& operator=(ServerCounterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerCounterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerCounterData* internal_default_instance() {
    return reinterpret_cast<const ServerCounterData*>(
               &_ServerCounterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(ServerCounterData& a, ServerCounterData& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerCounterData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerCounterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerCounterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerCounterData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerCounterData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerCounterData& from) {
    ServerCounterData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerCounterData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.ServerCounterData";
  }
  protected:
  explicit ServerCounterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionCounterFieldNumber = 1,
  };
  // repeated .idlepb.FunctionCounter function_counter = 1;
  int function_counter_size() const;
  private:
  int _internal_function_counter_size() const;
  public:
  void clear_function_counter();
  ::idlepb::FunctionCounter* mutable_function_counter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FunctionCounter >*
      mutable_function_counter();
  private:
  const ::idlepb::FunctionCounter& _internal_function_counter(int index) const;
  ::idlepb::FunctionCounter* _internal_add_function_counter();
  public:
  const ::idlepb::FunctionCounter& function_counter(int index) const;
  ::idlepb::FunctionCounter* add_function_counter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FunctionCounter >&
      function_counter() const;

  // @@protoc_insertion_point(class_scope:idlepb.ServerCounterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FunctionCounter > function_counter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SocialFunctionCommonSaveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SocialFunctionCommonSaveData) */ {
 public:
  inline SocialFunctionCommonSaveData() : SocialFunctionCommonSaveData(nullptr) {}
  ~SocialFunctionCommonSaveData() override;
  explicit PROTOBUF_CONSTEXPR SocialFunctionCommonSaveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SocialFunctionCommonSaveData(const SocialFunctionCommonSaveData& from);
  SocialFunctionCommonSaveData(SocialFunctionCommonSaveData&& from) noexcept
    : SocialFunctionCommonSaveData() {
    *this = ::std::move(from);
  }

  inline SocialFunctionCommonSaveData& operator=(const SocialFunctionCommonSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocialFunctionCommonSaveData& operator=(SocialFunctionCommonSaveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocialFunctionCommonSaveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocialFunctionCommonSaveData* internal_default_instance() {
    return reinterpret_cast<const SocialFunctionCommonSaveData*>(
               &_SocialFunctionCommonSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(SocialFunctionCommonSaveData& a, SocialFunctionCommonSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(SocialFunctionCommonSaveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocialFunctionCommonSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocialFunctionCommonSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocialFunctionCommonSaveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SocialFunctionCommonSaveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SocialFunctionCommonSaveData& from) {
    SocialFunctionCommonSaveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocialFunctionCommonSaveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SocialFunctionCommonSaveData";
  }
  protected:
  explicit SocialFunctionCommonSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineRoleDatasFieldNumber = 1,
    kRoleListFieldNumber = 3,
    kServerCounterDataFieldNumber = 2,
  };
  // repeated .idlepb.RoleOfflineFunctionData offline_role_datas = 1;
  int offline_role_datas_size() const;
  private:
  int _internal_offline_role_datas_size() const;
  public:
  void clear_offline_role_datas();
  ::idlepb::RoleOfflineFunctionData* mutable_offline_role_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleOfflineFunctionData >*
      mutable_offline_role_datas();
  private:
  const ::idlepb::RoleOfflineFunctionData& _internal_offline_role_datas(int index) const;
  ::idlepb::RoleOfflineFunctionData* _internal_add_offline_role_datas();
  public:
  const ::idlepb::RoleOfflineFunctionData& offline_role_datas(int index) const;
  ::idlepb::RoleOfflineFunctionData* add_offline_role_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleOfflineFunctionData >&
      offline_role_datas() const;

  // repeated .idlepb.StringInt64Pair role_list = 3;
  int role_list_size() const;
  private:
  int _internal_role_list_size() const;
  public:
  void clear_role_list();
  ::idlepb::StringInt64Pair* mutable_role_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::StringInt64Pair >*
      mutable_role_list();
  private:
  const ::idlepb::StringInt64Pair& _internal_role_list(int index) const;
  ::idlepb::StringInt64Pair* _internal_add_role_list();
  public:
  const ::idlepb::StringInt64Pair& role_list(int index) const;
  ::idlepb::StringInt64Pair* add_role_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::StringInt64Pair >&
      role_list() const;

  // .idlepb.ServerCounterData server_counter_data = 2;
  bool has_server_counter_data() const;
  private:
  bool _internal_has_server_counter_data() const;
  public:
  void clear_server_counter_data();
  const ::idlepb::ServerCounterData& server_counter_data() const;
  PROTOBUF_NODISCARD ::idlepb::ServerCounterData* release_server_counter_data();
  ::idlepb::ServerCounterData* mutable_server_counter_data();
  void set_allocated_server_counter_data(::idlepb::ServerCounterData* server_counter_data);
  private:
  const ::idlepb::ServerCounterData& _internal_server_counter_data() const;
  ::idlepb::ServerCounterData* _internal_mutable_server_counter_data();
  public:
  void unsafe_arena_set_allocated_server_counter_data(
      ::idlepb::ServerCounterData* server_counter_data);
  ::idlepb::ServerCounterData* unsafe_arena_release_server_counter_data();

  // @@protoc_insertion_point(class_scope:idlepb.SocialFunctionCommonSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleOfflineFunctionData > offline_role_datas_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::StringInt64Pair > role_list_;
    ::idlepb::ServerCounterData* server_counter_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleSaveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleSaveData) */ {
 public:
  inline RoleSaveData() : RoleSaveData(nullptr) {}
  ~RoleSaveData() override;
  explicit PROTOBUF_CONSTEXPR RoleSaveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleSaveData(const RoleSaveData& from);
  RoleSaveData(RoleSaveData&& from) noexcept
    : RoleSaveData() {
    *this = ::std::move(from);
  }

  inline RoleSaveData& operator=(const RoleSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleSaveData& operator=(RoleSaveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleSaveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleSaveData* internal_default_instance() {
    return reinterpret_cast<const RoleSaveData*>(
               &_RoleSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(RoleSaveData& a, RoleSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleSaveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleSaveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleSaveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleSaveData& from) {
    RoleSaveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleSaveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleSaveData";
  }
  protected:
  explicit RoleSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleDataFieldNumber = 1,
    kAllStatsDataFieldNumber = 2,
    kQuestFieldNumber = 5,
    kShopFieldNumber = 6,
    kTemporaryPackageFieldNumber = 7,
    kInventoryFieldNumber = 8,
    kOfflineDataFieldNumber = 16,
    kAlchemyDataFieldNumber = 17,
    kDeluxeShopFieldNumber = 18,
    kLeaderboardDataFieldNumber = 19,
    kMailDataFieldNumber = 20,
    kForgeDataFieldNumber = 21,
    kPillelixirDataFieldNumber = 22,
    kCommonCultivationDataFieldNumber = 23,
    kZasDataFieldNumber = 24,
    kMonsterTowerDataFieldNumber = 25,
    kShanhetuDataFieldNumber = 26,
    kBossInvasionDataFieldNumber = 27,
    kMassiveDataFieldNumber = 28,
    kChecklistDataFieldNumber = 29,
    kCommonItemExchangeDataFieldNumber = 30,
    kSeptDataFieldNumber = 31,
    kTreasuryChestDataFieldNumber = 33,
    kGongfaDataFieldNumber = 34,
    kFuzengDataFieldNumber = 35,
    kCollectionDataFieldNumber = 36,
    kLifeCounterDataFieldNumber = 37,
    kAppearanceDataFieldNumber = 38,
    kArenaCheckListDataFieldNumber = 39,
    kDungeonKillAllDataFieldNumber = 40,
    kFarmlandDataFieldNumber = 41,
    kDungeonSurviveDataFieldNumber = 42,
    kFriendDataFieldNumber = 43,
    kAvatarDataFieldNumber = 44,
    kArenaStatisticalDataFieldNumber = 45,
    kBiographyDataFieldNumber = 46,
    kVipShopDataFieldNumber = 47,
    kHpFieldNumber = 3,
    kMpFieldNumber = 4,
  };
  // .idlepb.RoleData role_data = 1;
  bool has_role_data() const;
  private:
  bool _internal_has_role_data() const;
  public:
  void clear_role_data();
  const ::idlepb::RoleData& role_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleData* release_role_data();
  ::idlepb::RoleData* mutable_role_data();
  void set_allocated_role_data(::idlepb::RoleData* role_data);
  private:
  const ::idlepb::RoleData& _internal_role_data() const;
  ::idlepb::RoleData* _internal_mutable_role_data();
  public:
  void unsafe_arena_set_allocated_role_data(
      ::idlepb::RoleData* role_data);
  ::idlepb::RoleData* unsafe_arena_release_role_data();

  // .idlepb.GameStatsAllModuleData all_stats_data = 2;
  bool has_all_stats_data() const;
  private:
  bool _internal_has_all_stats_data() const;
  public:
  void clear_all_stats_data();
  const ::idlepb::GameStatsAllModuleData& all_stats_data() const;
  PROTOBUF_NODISCARD ::idlepb::GameStatsAllModuleData* release_all_stats_data();
  ::idlepb::GameStatsAllModuleData* mutable_all_stats_data();
  void set_allocated_all_stats_data(::idlepb::GameStatsAllModuleData* all_stats_data);
  private:
  const ::idlepb::GameStatsAllModuleData& _internal_all_stats_data() const;
  ::idlepb::GameStatsAllModuleData* _internal_mutable_all_stats_data();
  public:
  void unsafe_arena_set_allocated_all_stats_data(
      ::idlepb::GameStatsAllModuleData* all_stats_data);
  ::idlepb::GameStatsAllModuleData* unsafe_arena_release_all_stats_data();

  // .idlepb.RoleQuestData quest = 5;
  bool has_quest() const;
  private:
  bool _internal_has_quest() const;
  public:
  void clear_quest();
  const ::idlepb::RoleQuestData& quest() const;
  PROTOBUF_NODISCARD ::idlepb::RoleQuestData* release_quest();
  ::idlepb::RoleQuestData* mutable_quest();
  void set_allocated_quest(::idlepb::RoleQuestData* quest);
  private:
  const ::idlepb::RoleQuestData& _internal_quest() const;
  ::idlepb::RoleQuestData* _internal_mutable_quest();
  public:
  void unsafe_arena_set_allocated_quest(
      ::idlepb::RoleQuestData* quest);
  ::idlepb::RoleQuestData* unsafe_arena_release_quest();

  // .idlepb.RoleShopData shop = 6;
  bool has_shop() const;
  private:
  bool _internal_has_shop() const;
  public:
  void clear_shop();
  const ::idlepb::RoleShopData& shop() const;
  PROTOBUF_NODISCARD ::idlepb::RoleShopData* release_shop();
  ::idlepb::RoleShopData* mutable_shop();
  void set_allocated_shop(::idlepb::RoleShopData* shop);
  private:
  const ::idlepb::RoleShopData& _internal_shop() const;
  ::idlepb::RoleShopData* _internal_mutable_shop();
  public:
  void unsafe_arena_set_allocated_shop(
      ::idlepb::RoleShopData* shop);
  ::idlepb::RoleShopData* unsafe_arena_release_shop();

  // .idlepb.RoleTemporaryPackageData temporary_package = 7;
  bool has_temporary_package() const;
  private:
  bool _internal_has_temporary_package() const;
  public:
  void clear_temporary_package();
  const ::idlepb::RoleTemporaryPackageData& temporary_package() const;
  PROTOBUF_NODISCARD ::idlepb::RoleTemporaryPackageData* release_temporary_package();
  ::idlepb::RoleTemporaryPackageData* mutable_temporary_package();
  void set_allocated_temporary_package(::idlepb::RoleTemporaryPackageData* temporary_package);
  private:
  const ::idlepb::RoleTemporaryPackageData& _internal_temporary_package() const;
  ::idlepb::RoleTemporaryPackageData* _internal_mutable_temporary_package();
  public:
  void unsafe_arena_set_allocated_temporary_package(
      ::idlepb::RoleTemporaryPackageData* temporary_package);
  ::idlepb::RoleTemporaryPackageData* unsafe_arena_release_temporary_package();

  // .idlepb.RoleInventoryData inventory = 8;
  bool has_inventory() const;
  private:
  bool _internal_has_inventory() const;
  public:
  void clear_inventory();
  const ::idlepb::RoleInventoryData& inventory() const;
  PROTOBUF_NODISCARD ::idlepb::RoleInventoryData* release_inventory();
  ::idlepb::RoleInventoryData* mutable_inventory();
  void set_allocated_inventory(::idlepb::RoleInventoryData* inventory);
  private:
  const ::idlepb::RoleInventoryData& _internal_inventory() const;
  ::idlepb::RoleInventoryData* _internal_mutable_inventory();
  public:
  void unsafe_arena_set_allocated_inventory(
      ::idlepb::RoleInventoryData* inventory);
  ::idlepb::RoleInventoryData* unsafe_arena_release_inventory();

  // .idlepb.RoleOfflineData offline_data = 16;
  bool has_offline_data() const;
  private:
  bool _internal_has_offline_data() const;
  public:
  void clear_offline_data();
  const ::idlepb::RoleOfflineData& offline_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleOfflineData* release_offline_data();
  ::idlepb::RoleOfflineData* mutable_offline_data();
  void set_allocated_offline_data(::idlepb::RoleOfflineData* offline_data);
  private:
  const ::idlepb::RoleOfflineData& _internal_offline_data() const;
  ::idlepb::RoleOfflineData* _internal_mutable_offline_data();
  public:
  void unsafe_arena_set_allocated_offline_data(
      ::idlepb::RoleOfflineData* offline_data);
  ::idlepb::RoleOfflineData* unsafe_arena_release_offline_data();

  // .idlepb.RoleAlchemyData alchemy_data = 17;
  bool has_alchemy_data() const;
  private:
  bool _internal_has_alchemy_data() const;
  public:
  void clear_alchemy_data();
  const ::idlepb::RoleAlchemyData& alchemy_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleAlchemyData* release_alchemy_data();
  ::idlepb::RoleAlchemyData* mutable_alchemy_data();
  void set_allocated_alchemy_data(::idlepb::RoleAlchemyData* alchemy_data);
  private:
  const ::idlepb::RoleAlchemyData& _internal_alchemy_data() const;
  ::idlepb::RoleAlchemyData* _internal_mutable_alchemy_data();
  public:
  void unsafe_arena_set_allocated_alchemy_data(
      ::idlepb::RoleAlchemyData* alchemy_data);
  ::idlepb::RoleAlchemyData* unsafe_arena_release_alchemy_data();

  // .idlepb.RoleDeluxeShopData deluxe_shop = 18;
  bool has_deluxe_shop() const;
  private:
  bool _internal_has_deluxe_shop() const;
  public:
  void clear_deluxe_shop();
  const ::idlepb::RoleDeluxeShopData& deluxe_shop() const;
  PROTOBUF_NODISCARD ::idlepb::RoleDeluxeShopData* release_deluxe_shop();
  ::idlepb::RoleDeluxeShopData* mutable_deluxe_shop();
  void set_allocated_deluxe_shop(::idlepb::RoleDeluxeShopData* deluxe_shop);
  private:
  const ::idlepb::RoleDeluxeShopData& _internal_deluxe_shop() const;
  ::idlepb::RoleDeluxeShopData* _internal_mutable_deluxe_shop();
  public:
  void unsafe_arena_set_allocated_deluxe_shop(
      ::idlepb::RoleDeluxeShopData* deluxe_shop);
  ::idlepb::RoleDeluxeShopData* unsafe_arena_release_deluxe_shop();

  // .idlepb.RoleLeaderboardData leaderboard_data = 19;
  bool has_leaderboard_data() const;
  private:
  bool _internal_has_leaderboard_data() const;
  public:
  void clear_leaderboard_data();
  const ::idlepb::RoleLeaderboardData& leaderboard_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleLeaderboardData* release_leaderboard_data();
  ::idlepb::RoleLeaderboardData* mutable_leaderboard_data();
  void set_allocated_leaderboard_data(::idlepb::RoleLeaderboardData* leaderboard_data);
  private:
  const ::idlepb::RoleLeaderboardData& _internal_leaderboard_data() const;
  ::idlepb::RoleLeaderboardData* _internal_mutable_leaderboard_data();
  public:
  void unsafe_arena_set_allocated_leaderboard_data(
      ::idlepb::RoleLeaderboardData* leaderboard_data);
  ::idlepb::RoleLeaderboardData* unsafe_arena_release_leaderboard_data();

  // .idlepb.RoleMailData mail_data = 20;
  bool has_mail_data() const;
  private:
  bool _internal_has_mail_data() const;
  public:
  void clear_mail_data();
  const ::idlepb::RoleMailData& mail_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleMailData* release_mail_data();
  ::idlepb::RoleMailData* mutable_mail_data();
  void set_allocated_mail_data(::idlepb::RoleMailData* mail_data);
  private:
  const ::idlepb::RoleMailData& _internal_mail_data() const;
  ::idlepb::RoleMailData* _internal_mutable_mail_data();
  public:
  void unsafe_arena_set_allocated_mail_data(
      ::idlepb::RoleMailData* mail_data);
  ::idlepb::RoleMailData* unsafe_arena_release_mail_data();

  // .idlepb.RoleForgeData forge_data = 21;
  bool has_forge_data() const;
  private:
  bool _internal_has_forge_data() const;
  public:
  void clear_forge_data();
  const ::idlepb::RoleForgeData& forge_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleForgeData* release_forge_data();
  ::idlepb::RoleForgeData* mutable_forge_data();
  void set_allocated_forge_data(::idlepb::RoleForgeData* forge_data);
  private:
  const ::idlepb::RoleForgeData& _internal_forge_data() const;
  ::idlepb::RoleForgeData* _internal_mutable_forge_data();
  public:
  void unsafe_arena_set_allocated_forge_data(
      ::idlepb::RoleForgeData* forge_data);
  ::idlepb::RoleForgeData* unsafe_arena_release_forge_data();

  // .idlepb.RolePillElixirData pillelixir_data = 22;
  bool has_pillelixir_data() const;
  private:
  bool _internal_has_pillelixir_data() const;
  public:
  void clear_pillelixir_data();
  const ::idlepb::RolePillElixirData& pillelixir_data() const;
  PROTOBUF_NODISCARD ::idlepb::RolePillElixirData* release_pillelixir_data();
  ::idlepb::RolePillElixirData* mutable_pillelixir_data();
  void set_allocated_pillelixir_data(::idlepb::RolePillElixirData* pillelixir_data);
  private:
  const ::idlepb::RolePillElixirData& _internal_pillelixir_data() const;
  ::idlepb::RolePillElixirData* _internal_mutable_pillelixir_data();
  public:
  void unsafe_arena_set_allocated_pillelixir_data(
      ::idlepb::RolePillElixirData* pillelixir_data);
  ::idlepb::RolePillElixirData* unsafe_arena_release_pillelixir_data();

  // .idlepb.CommonCultivationData common_cultivation_data = 23;
  bool has_common_cultivation_data() const;
  private:
  bool _internal_has_common_cultivation_data() const;
  public:
  void clear_common_cultivation_data();
  const ::idlepb::CommonCultivationData& common_cultivation_data() const;
  PROTOBUF_NODISCARD ::idlepb::CommonCultivationData* release_common_cultivation_data();
  ::idlepb::CommonCultivationData* mutable_common_cultivation_data();
  void set_allocated_common_cultivation_data(::idlepb::CommonCultivationData* common_cultivation_data);
  private:
  const ::idlepb::CommonCultivationData& _internal_common_cultivation_data() const;
  ::idlepb::CommonCultivationData* _internal_mutable_common_cultivation_data();
  public:
  void unsafe_arena_set_allocated_common_cultivation_data(
      ::idlepb::CommonCultivationData* common_cultivation_data);
  ::idlepb::CommonCultivationData* unsafe_arena_release_common_cultivation_data();

  // .idlepb.RoleZasData zas_data = 24;
  bool has_zas_data() const;
  private:
  bool _internal_has_zas_data() const;
  public:
  void clear_zas_data();
  const ::idlepb::RoleZasData& zas_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleZasData* release_zas_data();
  ::idlepb::RoleZasData* mutable_zas_data();
  void set_allocated_zas_data(::idlepb::RoleZasData* zas_data);
  private:
  const ::idlepb::RoleZasData& _internal_zas_data() const;
  ::idlepb::RoleZasData* _internal_mutable_zas_data();
  public:
  void unsafe_arena_set_allocated_zas_data(
      ::idlepb::RoleZasData* zas_data);
  ::idlepb::RoleZasData* unsafe_arena_release_zas_data();

  // .idlepb.RoleMonsterTowerData monster_tower_data = 25;
  bool has_monster_tower_data() const;
  private:
  bool _internal_has_monster_tower_data() const;
  public:
  void clear_monster_tower_data();
  const ::idlepb::RoleMonsterTowerData& monster_tower_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleMonsterTowerData* release_monster_tower_data();
  ::idlepb::RoleMonsterTowerData* mutable_monster_tower_data();
  void set_allocated_monster_tower_data(::idlepb::RoleMonsterTowerData* monster_tower_data);
  private:
  const ::idlepb::RoleMonsterTowerData& _internal_monster_tower_data() const;
  ::idlepb::RoleMonsterTowerData* _internal_mutable_monster_tower_data();
  public:
  void unsafe_arena_set_allocated_monster_tower_data(
      ::idlepb::RoleMonsterTowerData* monster_tower_data);
  ::idlepb::RoleMonsterTowerData* unsafe_arena_release_monster_tower_data();

  // .idlepb.RoleShanhetuData shanhetu_data = 26;
  bool has_shanhetu_data() const;
  private:
  bool _internal_has_shanhetu_data() const;
  public:
  void clear_shanhetu_data();
  const ::idlepb::RoleShanhetuData& shanhetu_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleShanhetuData* release_shanhetu_data();
  ::idlepb::RoleShanhetuData* mutable_shanhetu_data();
  void set_allocated_shanhetu_data(::idlepb::RoleShanhetuData* shanhetu_data);
  private:
  const ::idlepb::RoleShanhetuData& _internal_shanhetu_data() const;
  ::idlepb::RoleShanhetuData* _internal_mutable_shanhetu_data();
  public:
  void unsafe_arena_set_allocated_shanhetu_data(
      ::idlepb::RoleShanhetuData* shanhetu_data);
  ::idlepb::RoleShanhetuData* unsafe_arena_release_shanhetu_data();

  // .idlepb.RoleBossInvasionData boss_invasion_data = 27;
  bool has_boss_invasion_data() const;
  private:
  bool _internal_has_boss_invasion_data() const;
  public:
  void clear_boss_invasion_data();
  const ::idlepb::RoleBossInvasionData& boss_invasion_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleBossInvasionData* release_boss_invasion_data();
  ::idlepb::RoleBossInvasionData* mutable_boss_invasion_data();
  void set_allocated_boss_invasion_data(::idlepb::RoleBossInvasionData* boss_invasion_data);
  private:
  const ::idlepb::RoleBossInvasionData& _internal_boss_invasion_data() const;
  ::idlepb::RoleBossInvasionData* _internal_mutable_boss_invasion_data();
  public:
  void unsafe_arena_set_allocated_boss_invasion_data(
      ::idlepb::RoleBossInvasionData* boss_invasion_data);
  ::idlepb::RoleBossInvasionData* unsafe_arena_release_boss_invasion_data();

  // .idlepb.RoleMasiveData massive_data = 28;
  bool has_massive_data() const;
  private:
  bool _internal_has_massive_data() const;
  public:
  void clear_massive_data();
  const ::idlepb::RoleMasiveData& massive_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleMasiveData* release_massive_data();
  ::idlepb::RoleMasiveData* mutable_massive_data();
  void set_allocated_massive_data(::idlepb::RoleMasiveData* massive_data);
  private:
  const ::idlepb::RoleMasiveData& _internal_massive_data() const;
  ::idlepb::RoleMasiveData* _internal_mutable_massive_data();
  public:
  void unsafe_arena_set_allocated_massive_data(
      ::idlepb::RoleMasiveData* massive_data);
  ::idlepb::RoleMasiveData* unsafe_arena_release_massive_data();

  // .idlepb.RoleChecklistData checklist_data = 29;
  bool has_checklist_data() const;
  private:
  bool _internal_has_checklist_data() const;
  public:
  void clear_checklist_data();
  const ::idlepb::RoleChecklistData& checklist_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleChecklistData* release_checklist_data();
  ::idlepb::RoleChecklistData* mutable_checklist_data();
  void set_allocated_checklist_data(::idlepb::RoleChecklistData* checklist_data);
  private:
  const ::idlepb::RoleChecklistData& _internal_checklist_data() const;
  ::idlepb::RoleChecklistData* _internal_mutable_checklist_data();
  public:
  void unsafe_arena_set_allocated_checklist_data(
      ::idlepb::RoleChecklistData* checklist_data);
  ::idlepb::RoleChecklistData* unsafe_arena_release_checklist_data();

  // .idlepb.RoleCommonItemExchangeData common_item_exchange_data = 30;
  bool has_common_item_exchange_data() const;
  private:
  bool _internal_has_common_item_exchange_data() const;
  public:
  void clear_common_item_exchange_data();
  const ::idlepb::RoleCommonItemExchangeData& common_item_exchange_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleCommonItemExchangeData* release_common_item_exchange_data();
  ::idlepb::RoleCommonItemExchangeData* mutable_common_item_exchange_data();
  void set_allocated_common_item_exchange_data(::idlepb::RoleCommonItemExchangeData* common_item_exchange_data);
  private:
  const ::idlepb::RoleCommonItemExchangeData& _internal_common_item_exchange_data() const;
  ::idlepb::RoleCommonItemExchangeData* _internal_mutable_common_item_exchange_data();
  public:
  void unsafe_arena_set_allocated_common_item_exchange_data(
      ::idlepb::RoleCommonItemExchangeData* common_item_exchange_data);
  ::idlepb::RoleCommonItemExchangeData* unsafe_arena_release_common_item_exchange_data();

  // .idlepb.RoleSeptData sept_data = 31;
  bool has_sept_data() const;
  private:
  bool _internal_has_sept_data() const;
  public:
  void clear_sept_data();
  const ::idlepb::RoleSeptData& sept_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleSeptData* release_sept_data();
  ::idlepb::RoleSeptData* mutable_sept_data();
  void set_allocated_sept_data(::idlepb::RoleSeptData* sept_data);
  private:
  const ::idlepb::RoleSeptData& _internal_sept_data() const;
  ::idlepb::RoleSeptData* _internal_mutable_sept_data();
  public:
  void unsafe_arena_set_allocated_sept_data(
      ::idlepb::RoleSeptData* sept_data);
  ::idlepb::RoleSeptData* unsafe_arena_release_sept_data();

  // .idlepb.RoleTreasurySaveData treasury_chest_data = 33;
  bool has_treasury_chest_data() const;
  private:
  bool _internal_has_treasury_chest_data() const;
  public:
  void clear_treasury_chest_data();
  const ::idlepb::RoleTreasurySaveData& treasury_chest_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleTreasurySaveData* release_treasury_chest_data();
  ::idlepb::RoleTreasurySaveData* mutable_treasury_chest_data();
  void set_allocated_treasury_chest_data(::idlepb::RoleTreasurySaveData* treasury_chest_data);
  private:
  const ::idlepb::RoleTreasurySaveData& _internal_treasury_chest_data() const;
  ::idlepb::RoleTreasurySaveData* _internal_mutable_treasury_chest_data();
  public:
  void unsafe_arena_set_allocated_treasury_chest_data(
      ::idlepb::RoleTreasurySaveData* treasury_chest_data);
  ::idlepb::RoleTreasurySaveData* unsafe_arena_release_treasury_chest_data();

  // .idlepb.RoleGongFaData gongfa_data = 34;
  bool has_gongfa_data() const;
  private:
  bool _internal_has_gongfa_data() const;
  public:
  void clear_gongfa_data();
  const ::idlepb::RoleGongFaData& gongfa_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleGongFaData* release_gongfa_data();
  ::idlepb::RoleGongFaData* mutable_gongfa_data();
  void set_allocated_gongfa_data(::idlepb::RoleGongFaData* gongfa_data);
  private:
  const ::idlepb::RoleGongFaData& _internal_gongfa_data() const;
  ::idlepb::RoleGongFaData* _internal_mutable_gongfa_data();
  public:
  void unsafe_arena_set_allocated_gongfa_data(
      ::idlepb::RoleGongFaData* gongfa_data);
  ::idlepb::RoleGongFaData* unsafe_arena_release_gongfa_data();

  // .idlepb.RoleFuZengData fuzeng_data = 35;
  bool has_fuzeng_data() const;
  private:
  bool _internal_has_fuzeng_data() const;
  public:
  void clear_fuzeng_data();
  const ::idlepb::RoleFuZengData& fuzeng_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleFuZengData* release_fuzeng_data();
  ::idlepb::RoleFuZengData* mutable_fuzeng_data();
  void set_allocated_fuzeng_data(::idlepb::RoleFuZengData* fuzeng_data);
  private:
  const ::idlepb::RoleFuZengData& _internal_fuzeng_data() const;
  ::idlepb::RoleFuZengData* _internal_mutable_fuzeng_data();
  public:
  void unsafe_arena_set_allocated_fuzeng_data(
      ::idlepb::RoleFuZengData* fuzeng_data);
  ::idlepb::RoleFuZengData* unsafe_arena_release_fuzeng_data();

  // .idlepb.RoleCollectionSaveData collection_data = 36;
  bool has_collection_data() const;
  private:
  bool _internal_has_collection_data() const;
  public:
  void clear_collection_data();
  const ::idlepb::RoleCollectionSaveData& collection_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleCollectionSaveData* release_collection_data();
  ::idlepb::RoleCollectionSaveData* mutable_collection_data();
  void set_allocated_collection_data(::idlepb::RoleCollectionSaveData* collection_data);
  private:
  const ::idlepb::RoleCollectionSaveData& _internal_collection_data() const;
  ::idlepb::RoleCollectionSaveData* _internal_mutable_collection_data();
  public:
  void unsafe_arena_set_allocated_collection_data(
      ::idlepb::RoleCollectionSaveData* collection_data);
  ::idlepb::RoleCollectionSaveData* unsafe_arena_release_collection_data();

  // .idlepb.RoleLifeCounterData life_counter_data = 37;
  bool has_life_counter_data() const;
  private:
  bool _internal_has_life_counter_data() const;
  public:
  void clear_life_counter_data();
  const ::idlepb::RoleLifeCounterData& life_counter_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleLifeCounterData* release_life_counter_data();
  ::idlepb::RoleLifeCounterData* mutable_life_counter_data();
  void set_allocated_life_counter_data(::idlepb::RoleLifeCounterData* life_counter_data);
  private:
  const ::idlepb::RoleLifeCounterData& _internal_life_counter_data() const;
  ::idlepb::RoleLifeCounterData* _internal_mutable_life_counter_data();
  public:
  void unsafe_arena_set_allocated_life_counter_data(
      ::idlepb::RoleLifeCounterData* life_counter_data);
  ::idlepb::RoleLifeCounterData* unsafe_arena_release_life_counter_data();

  // .idlepb.RoleAppearanceData appearance_data = 38;
  bool has_appearance_data() const;
  private:
  bool _internal_has_appearance_data() const;
  public:
  void clear_appearance_data();
  const ::idlepb::RoleAppearanceData& appearance_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleAppearanceData* release_appearance_data();
  ::idlepb::RoleAppearanceData* mutable_appearance_data();
  void set_allocated_appearance_data(::idlepb::RoleAppearanceData* appearance_data);
  private:
  const ::idlepb::RoleAppearanceData& _internal_appearance_data() const;
  ::idlepb::RoleAppearanceData* _internal_mutable_appearance_data();
  public:
  void unsafe_arena_set_allocated_appearance_data(
      ::idlepb::RoleAppearanceData* appearance_data);
  ::idlepb::RoleAppearanceData* unsafe_arena_release_appearance_data();

  // .idlepb.RoleArenaCheckListData arena_check_list_data = 39;
  bool has_arena_check_list_data() const;
  private:
  bool _internal_has_arena_check_list_data() const;
  public:
  void clear_arena_check_list_data();
  const ::idlepb::RoleArenaCheckListData& arena_check_list_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleArenaCheckListData* release_arena_check_list_data();
  ::idlepb::RoleArenaCheckListData* mutable_arena_check_list_data();
  void set_allocated_arena_check_list_data(::idlepb::RoleArenaCheckListData* arena_check_list_data);
  private:
  const ::idlepb::RoleArenaCheckListData& _internal_arena_check_list_data() const;
  ::idlepb::RoleArenaCheckListData* _internal_mutable_arena_check_list_data();
  public:
  void unsafe_arena_set_allocated_arena_check_list_data(
      ::idlepb::RoleArenaCheckListData* arena_check_list_data);
  ::idlepb::RoleArenaCheckListData* unsafe_arena_release_arena_check_list_data();

  // .idlepb.RoleDungeonKillAllData dungeon_kill_all_data = 40;
  bool has_dungeon_kill_all_data() const;
  private:
  bool _internal_has_dungeon_kill_all_data() const;
  public:
  void clear_dungeon_kill_all_data();
  const ::idlepb::RoleDungeonKillAllData& dungeon_kill_all_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleDungeonKillAllData* release_dungeon_kill_all_data();
  ::idlepb::RoleDungeonKillAllData* mutable_dungeon_kill_all_data();
  void set_allocated_dungeon_kill_all_data(::idlepb::RoleDungeonKillAllData* dungeon_kill_all_data);
  private:
  const ::idlepb::RoleDungeonKillAllData& _internal_dungeon_kill_all_data() const;
  ::idlepb::RoleDungeonKillAllData* _internal_mutable_dungeon_kill_all_data();
  public:
  void unsafe_arena_set_allocated_dungeon_kill_all_data(
      ::idlepb::RoleDungeonKillAllData* dungeon_kill_all_data);
  ::idlepb::RoleDungeonKillAllData* unsafe_arena_release_dungeon_kill_all_data();

  // .idlepb.RoleFarmlandData farmland_data = 41;
  bool has_farmland_data() const;
  private:
  bool _internal_has_farmland_data() const;
  public:
  void clear_farmland_data();
  const ::idlepb::RoleFarmlandData& farmland_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleFarmlandData* release_farmland_data();
  ::idlepb::RoleFarmlandData* mutable_farmland_data();
  void set_allocated_farmland_data(::idlepb::RoleFarmlandData* farmland_data);
  private:
  const ::idlepb::RoleFarmlandData& _internal_farmland_data() const;
  ::idlepb::RoleFarmlandData* _internal_mutable_farmland_data();
  public:
  void unsafe_arena_set_allocated_farmland_data(
      ::idlepb::RoleFarmlandData* farmland_data);
  ::idlepb::RoleFarmlandData* unsafe_arena_release_farmland_data();

  // .idlepb.RoleDungeonSurviveData dungeon_survive_data = 42;
  bool has_dungeon_survive_data() const;
  private:
  bool _internal_has_dungeon_survive_data() const;
  public:
  void clear_dungeon_survive_data();
  const ::idlepb::RoleDungeonSurviveData& dungeon_survive_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleDungeonSurviveData* release_dungeon_survive_data();
  ::idlepb::RoleDungeonSurviveData* mutable_dungeon_survive_data();
  void set_allocated_dungeon_survive_data(::idlepb::RoleDungeonSurviveData* dungeon_survive_data);
  private:
  const ::idlepb::RoleDungeonSurviveData& _internal_dungeon_survive_data() const;
  ::idlepb::RoleDungeonSurviveData* _internal_mutable_dungeon_survive_data();
  public:
  void unsafe_arena_set_allocated_dungeon_survive_data(
      ::idlepb::RoleDungeonSurviveData* dungeon_survive_data);
  ::idlepb::RoleDungeonSurviveData* unsafe_arena_release_dungeon_survive_data();

  // .idlepb.RoleFriendData friend_data = 43;
  bool has_friend_data() const;
  private:
  bool _internal_has_friend_data() const;
  public:
  void clear_friend_data();
  const ::idlepb::RoleFriendData& friend_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleFriendData* release_friend_data();
  ::idlepb::RoleFriendData* mutable_friend_data();
  void set_allocated_friend_data(::idlepb::RoleFriendData* friend_data);
  private:
  const ::idlepb::RoleFriendData& _internal_friend_data() const;
  ::idlepb::RoleFriendData* _internal_mutable_friend_data();
  public:
  void unsafe_arena_set_allocated_friend_data(
      ::idlepb::RoleFriendData* friend_data);
  ::idlepb::RoleFriendData* unsafe_arena_release_friend_data();

  // .idlepb.RoleAvatarData avatar_data = 44;
  bool has_avatar_data() const;
  private:
  bool _internal_has_avatar_data() const;
  public:
  void clear_avatar_data();
  const ::idlepb::RoleAvatarData& avatar_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleAvatarData* release_avatar_data();
  ::idlepb::RoleAvatarData* mutable_avatar_data();
  void set_allocated_avatar_data(::idlepb::RoleAvatarData* avatar_data);
  private:
  const ::idlepb::RoleAvatarData& _internal_avatar_data() const;
  ::idlepb::RoleAvatarData* _internal_mutable_avatar_data();
  public:
  void unsafe_arena_set_allocated_avatar_data(
      ::idlepb::RoleAvatarData* avatar_data);
  ::idlepb::RoleAvatarData* unsafe_arena_release_avatar_data();

  // .idlepb.RoleArenaExplorationStatisticalData arena_statistical_data = 45;
  bool has_arena_statistical_data() const;
  private:
  bool _internal_has_arena_statistical_data() const;
  public:
  void clear_arena_statistical_data();
  const ::idlepb::RoleArenaExplorationStatisticalData& arena_statistical_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleArenaExplorationStatisticalData* release_arena_statistical_data();
  ::idlepb::RoleArenaExplorationStatisticalData* mutable_arena_statistical_data();
  void set_allocated_arena_statistical_data(::idlepb::RoleArenaExplorationStatisticalData* arena_statistical_data);
  private:
  const ::idlepb::RoleArenaExplorationStatisticalData& _internal_arena_statistical_data() const;
  ::idlepb::RoleArenaExplorationStatisticalData* _internal_mutable_arena_statistical_data();
  public:
  void unsafe_arena_set_allocated_arena_statistical_data(
      ::idlepb::RoleArenaExplorationStatisticalData* arena_statistical_data);
  ::idlepb::RoleArenaExplorationStatisticalData* unsafe_arena_release_arena_statistical_data();

  // .idlepb.RoleBiographyData biography_data = 46;
  bool has_biography_data() const;
  private:
  bool _internal_has_biography_data() const;
  public:
  void clear_biography_data();
  const ::idlepb::RoleBiographyData& biography_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleBiographyData* release_biography_data();
  ::idlepb::RoleBiographyData* mutable_biography_data();
  void set_allocated_biography_data(::idlepb::RoleBiographyData* biography_data);
  private:
  const ::idlepb::RoleBiographyData& _internal_biography_data() const;
  ::idlepb::RoleBiographyData* _internal_mutable_biography_data();
  public:
  void unsafe_arena_set_allocated_biography_data(
      ::idlepb::RoleBiographyData* biography_data);
  ::idlepb::RoleBiographyData* unsafe_arena_release_biography_data();

  // .idlepb.RoleVipShopData vip_shop_data = 47;
  bool has_vip_shop_data() const;
  private:
  bool _internal_has_vip_shop_data() const;
  public:
  void clear_vip_shop_data();
  const ::idlepb::RoleVipShopData& vip_shop_data() const;
  PROTOBUF_NODISCARD ::idlepb::RoleVipShopData* release_vip_shop_data();
  ::idlepb::RoleVipShopData* mutable_vip_shop_data();
  void set_allocated_vip_shop_data(::idlepb::RoleVipShopData* vip_shop_data);
  private:
  const ::idlepb::RoleVipShopData& _internal_vip_shop_data() const;
  ::idlepb::RoleVipShopData* _internal_mutable_vip_shop_data();
  public:
  void unsafe_arena_set_allocated_vip_shop_data(
      ::idlepb::RoleVipShopData* vip_shop_data);
  ::idlepb::RoleVipShopData* unsafe_arena_release_vip_shop_data();

  // float hp = 3;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // float mp = 4;
  void clear_mp();
  float mp() const;
  void set_mp(float value);
  private:
  float _internal_mp() const;
  void _internal_set_mp(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::RoleData* role_data_;
    ::idlepb::GameStatsAllModuleData* all_stats_data_;
    ::idlepb::RoleQuestData* quest_;
    ::idlepb::RoleShopData* shop_;
    ::idlepb::RoleTemporaryPackageData* temporary_package_;
    ::idlepb::RoleInventoryData* inventory_;
    ::idlepb::RoleOfflineData* offline_data_;
    ::idlepb::RoleAlchemyData* alchemy_data_;
    ::idlepb::RoleDeluxeShopData* deluxe_shop_;
    ::idlepb::RoleLeaderboardData* leaderboard_data_;
    ::idlepb::RoleMailData* mail_data_;
    ::idlepb::RoleForgeData* forge_data_;
    ::idlepb::RolePillElixirData* pillelixir_data_;
    ::idlepb::CommonCultivationData* common_cultivation_data_;
    ::idlepb::RoleZasData* zas_data_;
    ::idlepb::RoleMonsterTowerData* monster_tower_data_;
    ::idlepb::RoleShanhetuData* shanhetu_data_;
    ::idlepb::RoleBossInvasionData* boss_invasion_data_;
    ::idlepb::RoleMasiveData* massive_data_;
    ::idlepb::RoleChecklistData* checklist_data_;
    ::idlepb::RoleCommonItemExchangeData* common_item_exchange_data_;
    ::idlepb::RoleSeptData* sept_data_;
    ::idlepb::RoleTreasurySaveData* treasury_chest_data_;
    ::idlepb::RoleGongFaData* gongfa_data_;
    ::idlepb::RoleFuZengData* fuzeng_data_;
    ::idlepb::RoleCollectionSaveData* collection_data_;
    ::idlepb::RoleLifeCounterData* life_counter_data_;
    ::idlepb::RoleAppearanceData* appearance_data_;
    ::idlepb::RoleArenaCheckListData* arena_check_list_data_;
    ::idlepb::RoleDungeonKillAllData* dungeon_kill_all_data_;
    ::idlepb::RoleFarmlandData* farmland_data_;
    ::idlepb::RoleDungeonSurviveData* dungeon_survive_data_;
    ::idlepb::RoleFriendData* friend_data_;
    ::idlepb::RoleAvatarData* avatar_data_;
    ::idlepb::RoleArenaExplorationStatisticalData* arena_statistical_data_;
    ::idlepb::RoleBiographyData* biography_data_;
    ::idlepb::RoleVipShopData* vip_shop_data_;
    float hp_;
    float mp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API BattleHistoryRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.BattleHistoryRecord) */ {
 public:
  inline BattleHistoryRecord() : BattleHistoryRecord(nullptr) {}
  ~BattleHistoryRecord() override;
  explicit PROTOBUF_CONSTEXPR BattleHistoryRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BattleHistoryRecord(const BattleHistoryRecord& from);
  BattleHistoryRecord(BattleHistoryRecord&& from) noexcept
    : BattleHistoryRecord() {
    *this = ::std::move(from);
  }

  inline BattleHistoryRecord& operator=(const BattleHistoryRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleHistoryRecord& operator=(BattleHistoryRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BattleHistoryRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const BattleHistoryRecord* internal_default_instance() {
    return reinterpret_cast<const BattleHistoryRecord*>(
               &_BattleHistoryRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(BattleHistoryRecord& a, BattleHistoryRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleHistoryRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleHistoryRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BattleHistoryRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BattleHistoryRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BattleHistoryRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BattleHistoryRecord& from) {
    BattleHistoryRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleHistoryRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.BattleHistoryRecord";
  }
  protected:
  explicit BattleHistoryRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageBodyFieldNumber = 6,
    kIndexFieldNumber = 1,
    kWorldSecondsFieldNumber = 2,
    kSourceEntityIdFieldNumber = 3,
    kTargetEntityIdFieldNumber = 4,
    kMessageTypeIdFieldNumber = 5,
  };
  // bytes message_body = 6;
  void clear_message_body();
  const std::string& message_body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_body();
  PROTOBUF_NODISCARD std::string* release_message_body();
  void set_allocated_message_body(std::string* message_body);
  private:
  const std::string& _internal_message_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_body(const std::string& value);
  std::string* _internal_mutable_message_body();
  public:

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // float world_seconds = 2;
  void clear_world_seconds();
  float world_seconds() const;
  void set_world_seconds(float value);
  private:
  float _internal_world_seconds() const;
  void _internal_set_world_seconds(float value);
  public:

  // uint64 source_entity_id = 3;
  void clear_source_entity_id();
  uint64_t source_entity_id() const;
  void set_source_entity_id(uint64_t value);
  private:
  uint64_t _internal_source_entity_id() const;
  void _internal_set_source_entity_id(uint64_t value);
  public:

  // uint64 target_entity_id = 4;
  void clear_target_entity_id();
  uint64_t target_entity_id() const;
  void set_target_entity_id(uint64_t value);
  private:
  uint64_t _internal_target_entity_id() const;
  void _internal_set_target_entity_id(uint64_t value);
  public:

  // uint64 message_type_id = 5;
  void clear_message_type_id();
  uint64_t message_type_id() const;
  void set_message_type_id(uint64_t value);
  private:
  uint64_t _internal_message_type_id() const;
  void _internal_set_message_type_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.BattleHistoryRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_body_;
    int32_t index_;
    float world_seconds_;
    uint64_t source_entity_id_;
    uint64_t target_entity_id_;
    uint64_t message_type_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API BattleRoleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.BattleRoleInfo) */ {
 public:
  inline BattleRoleInfo() : BattleRoleInfo(nullptr) {}
  ~BattleRoleInfo() override;
  explicit PROTOBUF_CONSTEXPR BattleRoleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BattleRoleInfo(const BattleRoleInfo& from);
  BattleRoleInfo(BattleRoleInfo&& from) noexcept
    : BattleRoleInfo() {
    *this = ::std::move(from);
  }

  inline BattleRoleInfo& operator=(const BattleRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleRoleInfo& operator=(BattleRoleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BattleRoleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BattleRoleInfo* internal_default_instance() {
    return reinterpret_cast<const BattleRoleInfo*>(
               &_BattleRoleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(BattleRoleInfo& a, BattleRoleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleRoleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleRoleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BattleRoleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BattleRoleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BattleRoleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BattleRoleInfo& from) {
    BattleRoleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleRoleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.BattleRoleInfo";
  }
  protected:
  explicit BattleRoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 2,
    kModelConfigFieldNumber = 13,
    kRoleIdFieldNumber = 1,
    kZoneIdFieldNumber = 3,
    kScoreDeltaFieldNumber = 8,
    kScoreFieldNumber = 9,
    kRankDeltaFieldNumber = 10,
    kCombatPowerFieldNumber = 12,
    kRankFieldNumber = 11,
    kCultivationMainDirFieldNumber = 14,
    kCultivationMainRankFieldNumber = 15,
    kNpcCfgIdFieldNumber = 16,
  };
  // string role_name = 2;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // .idlepb.CharacterModelConfig model_config = 13;
  bool has_model_config() const;
  private:
  bool _internal_has_model_config() const;
  public:
  void clear_model_config();
  const ::idlepb::CharacterModelConfig& model_config() const;
  PROTOBUF_NODISCARD ::idlepb::CharacterModelConfig* release_model_config();
  ::idlepb::CharacterModelConfig* mutable_model_config();
  void set_allocated_model_config(::idlepb::CharacterModelConfig* model_config);
  private:
  const ::idlepb::CharacterModelConfig& _internal_model_config() const;
  ::idlepb::CharacterModelConfig* _internal_mutable_model_config();
  public:
  void unsafe_arena_set_allocated_model_config(
      ::idlepb::CharacterModelConfig* model_config);
  ::idlepb::CharacterModelConfig* unsafe_arena_release_model_config();

  // int64 role_id = 1;
  void clear_role_id();
  int64_t role_id() const;
  void set_role_id(int64_t value);
  private:
  int64_t _internal_role_id() const;
  void _internal_set_role_id(int64_t value);
  public:

  // int32 zone_id = 3;
  void clear_zone_id();
  int32_t zone_id() const;
  void set_zone_id(int32_t value);
  private:
  int32_t _internal_zone_id() const;
  void _internal_set_zone_id(int32_t value);
  public:

  // int32 score_delta = 8;
  void clear_score_delta();
  int32_t score_delta() const;
  void set_score_delta(int32_t value);
  private:
  int32_t _internal_score_delta() const;
  void _internal_set_score_delta(int32_t value);
  public:

  // int32 score = 9;
  void clear_score();
  int32_t score() const;
  void set_score(int32_t value);
  private:
  int32_t _internal_score() const;
  void _internal_set_score(int32_t value);
  public:

  // int32 rank_delta = 10;
  void clear_rank_delta();
  int32_t rank_delta() const;
  void set_rank_delta(int32_t value);
  private:
  int32_t _internal_rank_delta() const;
  void _internal_set_rank_delta(int32_t value);
  public:

  // int64 combat_power = 12;
  void clear_combat_power();
  int64_t combat_power() const;
  void set_combat_power(int64_t value);
  private:
  int64_t _internal_combat_power() const;
  void _internal_set_combat_power(int64_t value);
  public:

  // int32 rank = 11;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // .idlepb.CultivationDirection cultivation_main_dir = 14;
  void clear_cultivation_main_dir();
  ::idlepb::CultivationDirection cultivation_main_dir() const;
  void set_cultivation_main_dir(::idlepb::CultivationDirection value);
  private:
  ::idlepb::CultivationDirection _internal_cultivation_main_dir() const;
  void _internal_set_cultivation_main_dir(::idlepb::CultivationDirection value);
  public:

  // int32 cultivation_main_rank = 15;
  void clear_cultivation_main_rank();
  int32_t cultivation_main_rank() const;
  void set_cultivation_main_rank(int32_t value);
  private:
  int32_t _internal_cultivation_main_rank() const;
  void _internal_set_cultivation_main_rank(int32_t value);
  public:

  // int32 npc_cfg_id = 16;
  void clear_npc_cfg_id();
  int32_t npc_cfg_id() const;
  void set_npc_cfg_id(int32_t value);
  private:
  int32_t _internal_npc_cfg_id() const;
  void _internal_set_npc_cfg_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.BattleRoleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    ::idlepb::CharacterModelConfig* model_config_;
    int64_t role_id_;
    int32_t zone_id_;
    int32_t score_delta_;
    int32_t score_;
    int32_t rank_delta_;
    int64_t combat_power_;
    int32_t rank_;
    int cultivation_main_dir_;
    int32_t cultivation_main_rank_;
    int32_t npc_cfg_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API BattleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.BattleInfo) */ {
 public:
  inline BattleInfo() : BattleInfo(nullptr) {}
  ~BattleInfo() override;
  explicit PROTOBUF_CONSTEXPR BattleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BattleInfo(const BattleInfo& from);
  BattleInfo(BattleInfo&& from) noexcept
    : BattleInfo() {
    *this = ::std::move(from);
  }

  inline BattleInfo& operator=(const BattleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleInfo& operator=(BattleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BattleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BattleInfo* internal_default_instance() {
    return reinterpret_cast<const BattleInfo*>(
               &_BattleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(BattleInfo& a, BattleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BattleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BattleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BattleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BattleInfo& from) {
    BattleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.BattleInfo";
  }
  protected:
  explicit BattleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackerFieldNumber = 10,
    kDefenderFieldNumber = 11,
    kWorldIdFieldNumber = 1,
    kAttackerWinFieldNumber = 2,
    kSoloTypeFieldNumber = 14,
    kBeginTicksFieldNumber = 12,
    kEndTicksFieldNumber = 13,
  };
  // .idlepb.BattleRoleInfo attacker = 10;
  bool has_attacker() const;
  private:
  bool _internal_has_attacker() const;
  public:
  void clear_attacker();
  const ::idlepb::BattleRoleInfo& attacker() const;
  PROTOBUF_NODISCARD ::idlepb::BattleRoleInfo* release_attacker();
  ::idlepb::BattleRoleInfo* mutable_attacker();
  void set_allocated_attacker(::idlepb::BattleRoleInfo* attacker);
  private:
  const ::idlepb::BattleRoleInfo& _internal_attacker() const;
  ::idlepb::BattleRoleInfo* _internal_mutable_attacker();
  public:
  void unsafe_arena_set_allocated_attacker(
      ::idlepb::BattleRoleInfo* attacker);
  ::idlepb::BattleRoleInfo* unsafe_arena_release_attacker();

  // .idlepb.BattleRoleInfo defender = 11;
  bool has_defender() const;
  private:
  bool _internal_has_defender() const;
  public:
  void clear_defender();
  const ::idlepb::BattleRoleInfo& defender() const;
  PROTOBUF_NODISCARD ::idlepb::BattleRoleInfo* release_defender();
  ::idlepb::BattleRoleInfo* mutable_defender();
  void set_allocated_defender(::idlepb::BattleRoleInfo* defender);
  private:
  const ::idlepb::BattleRoleInfo& _internal_defender() const;
  ::idlepb::BattleRoleInfo* _internal_mutable_defender();
  public:
  void unsafe_arena_set_allocated_defender(
      ::idlepb::BattleRoleInfo* defender);
  ::idlepb::BattleRoleInfo* unsafe_arena_release_defender();

  // int64 world_id = 1;
  void clear_world_id();
  int64_t world_id() const;
  void set_world_id(int64_t value);
  private:
  int64_t _internal_world_id() const;
  void _internal_set_world_id(int64_t value);
  public:

  // bool attacker_win = 2;
  void clear_attacker_win();
  bool attacker_win() const;
  void set_attacker_win(bool value);
  private:
  bool _internal_attacker_win() const;
  void _internal_set_attacker_win(bool value);
  public:

  // .idlepb.SoloType solo_type = 14;
  void clear_solo_type();
  ::idlepb::SoloType solo_type() const;
  void set_solo_type(::idlepb::SoloType value);
  private:
  ::idlepb::SoloType _internal_solo_type() const;
  void _internal_set_solo_type(::idlepb::SoloType value);
  public:

  // int64 begin_ticks = 12;
  void clear_begin_ticks();
  int64_t begin_ticks() const;
  void set_begin_ticks(int64_t value);
  private:
  int64_t _internal_begin_ticks() const;
  void _internal_set_begin_ticks(int64_t value);
  public:

  // int64 end_ticks = 13;
  void clear_end_ticks();
  int64_t end_ticks() const;
  void set_end_ticks(int64_t value);
  private:
  int64_t _internal_end_ticks() const;
  void _internal_set_end_ticks(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.BattleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::BattleRoleInfo* attacker_;
    ::idlepb::BattleRoleInfo* defender_;
    int64_t world_id_;
    bool attacker_win_;
    int solo_type_;
    int64_t begin_ticks_;
    int64_t end_ticks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API BattleHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.BattleHistory) */ {
 public:
  inline BattleHistory() : BattleHistory(nullptr) {}
  ~BattleHistory() override;
  explicit PROTOBUF_CONSTEXPR BattleHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BattleHistory(const BattleHistory& from);
  BattleHistory(BattleHistory&& from) noexcept
    : BattleHistory() {
    *this = ::std::move(from);
  }

  inline BattleHistory& operator=(const BattleHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleHistory& operator=(BattleHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BattleHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const BattleHistory* internal_default_instance() {
    return reinterpret_cast<const BattleHistory*>(
               &_BattleHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(BattleHistory& a, BattleHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BattleHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BattleHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BattleHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BattleHistory& from) {
    BattleHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.BattleHistory";
  }
  protected:
  explicit BattleHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 4,
    kInfoFieldNumber = 1,
  };
  // repeated .idlepb.BattleHistoryRecord records = 4;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::idlepb::BattleHistoryRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BattleHistoryRecord >*
      mutable_records();
  private:
  const ::idlepb::BattleHistoryRecord& _internal_records(int index) const;
  ::idlepb::BattleHistoryRecord* _internal_add_records();
  public:
  const ::idlepb::BattleHistoryRecord& records(int index) const;
  ::idlepb::BattleHistoryRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BattleHistoryRecord >&
      records() const;

  // .idlepb.BattleInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::idlepb::BattleInfo& info() const;
  PROTOBUF_NODISCARD ::idlepb::BattleInfo* release_info();
  ::idlepb::BattleInfo* mutable_info();
  void set_allocated_info(::idlepb::BattleInfo* info);
  private:
  const ::idlepb::BattleInfo& _internal_info() const;
  ::idlepb::BattleInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::idlepb::BattleInfo* info);
  ::idlepb::BattleInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:idlepb.BattleHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BattleHistoryRecord > records_;
    ::idlepb::BattleInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleBattleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleBattleInfo) */ {
 public:
  inline RoleBattleInfo() : RoleBattleInfo(nullptr) {}
  ~RoleBattleInfo() override;
  explicit PROTOBUF_CONSTEXPR RoleBattleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleBattleInfo(const RoleBattleInfo& from);
  RoleBattleInfo(RoleBattleInfo&& from) noexcept
    : RoleBattleInfo() {
    *this = ::std::move(from);
  }

  inline RoleBattleInfo& operator=(const RoleBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleBattleInfo& operator=(RoleBattleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleBattleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleBattleInfo* internal_default_instance() {
    return reinterpret_cast<const RoleBattleInfo*>(
               &_RoleBattleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(RoleBattleInfo& a, RoleBattleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleBattleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleBattleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleBattleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleBattleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleBattleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleBattleInfo& from) {
    RoleBattleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleBattleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleBattleInfo";
  }
  protected:
  explicit RoleBattleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kCanRevengeFieldNumber = 2,
    kRoundNumFieldNumber = 3,
  };
  // .idlepb.BattleInfo base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::idlepb::BattleInfo& base() const;
  PROTOBUF_NODISCARD ::idlepb::BattleInfo* release_base();
  ::idlepb::BattleInfo* mutable_base();
  void set_allocated_base(::idlepb::BattleInfo* base);
  private:
  const ::idlepb::BattleInfo& _internal_base() const;
  ::idlepb::BattleInfo* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::idlepb::BattleInfo* base);
  ::idlepb::BattleInfo* unsafe_arena_release_base();

  // bool can_revenge = 2;
  void clear_can_revenge();
  bool can_revenge() const;
  void set_can_revenge(bool value);
  private:
  bool _internal_can_revenge() const;
  void _internal_set_can_revenge(bool value);
  public:

  // int32 round_num = 3;
  void clear_round_num();
  int32_t round_num() const;
  void set_round_num(int32_t value);
  private:
  int32_t _internal_round_num() const;
  void _internal_set_round_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.RoleBattleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::BattleInfo* base_;
    bool can_revenge_;
    int32_t round_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API RoleBattleHistorySaveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.RoleBattleHistorySaveData) */ {
 public:
  inline RoleBattleHistorySaveData() : RoleBattleHistorySaveData(nullptr) {}
  ~RoleBattleHistorySaveData() override;
  explicit PROTOBUF_CONSTEXPR RoleBattleHistorySaveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleBattleHistorySaveData(const RoleBattleHistorySaveData& from);
  RoleBattleHistorySaveData(RoleBattleHistorySaveData&& from) noexcept
    : RoleBattleHistorySaveData() {
    *this = ::std::move(from);
  }

  inline RoleBattleHistorySaveData& operator=(const RoleBattleHistorySaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleBattleHistorySaveData& operator=(RoleBattleHistorySaveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleBattleHistorySaveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleBattleHistorySaveData* internal_default_instance() {
    return reinterpret_cast<const RoleBattleHistorySaveData*>(
               &_RoleBattleHistorySaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(RoleBattleHistorySaveData& a, RoleBattleHistorySaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleBattleHistorySaveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleBattleHistorySaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleBattleHistorySaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleBattleHistorySaveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleBattleHistorySaveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleBattleHistorySaveData& from) {
    RoleBattleHistorySaveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleBattleHistorySaveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.RoleBattleHistorySaveData";
  }
  protected:
  explicit RoleBattleHistorySaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoriesFieldNumber = 5,
  };
  // repeated .idlepb.RoleBattleInfo histories = 5;
  int histories_size() const;
  private:
  int _internal_histories_size() const;
  public:
  void clear_histories();
  ::idlepb::RoleBattleInfo* mutable_histories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleBattleInfo >*
      mutable_histories();
  private:
  const ::idlepb::RoleBattleInfo& _internal_histories(int index) const;
  ::idlepb::RoleBattleInfo* _internal_add_histories();
  public:
  const ::idlepb::RoleBattleInfo& histories(int index) const;
  ::idlepb::RoleBattleInfo* add_histories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleBattleInfo >&
      histories() const;

  // @@protoc_insertion_point(class_scope:idlepb.RoleBattleHistorySaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleBattleInfo > histories_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CompressedData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CompressedData) */ {
 public:
  inline CompressedData() : CompressedData(nullptr) {}
  ~CompressedData() override;
  explicit PROTOBUF_CONSTEXPR CompressedData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompressedData(const CompressedData& from);
  CompressedData(CompressedData&& from) noexcept
    : CompressedData() {
    *this = ::std::move(from);
  }

  inline CompressedData& operator=(const CompressedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompressedData& operator=(CompressedData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompressedData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompressedData* internal_default_instance() {
    return reinterpret_cast<const CompressedData*>(
               &_CompressedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(CompressedData& a, CompressedData& b) {
    a.Swap(&b);
  }
  inline void Swap(CompressedData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompressedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompressedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompressedData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompressedData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompressedData& from) {
    CompressedData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompressedData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CompressedData";
  }
  protected:
  explicit CompressedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompressedDataFieldNumber = 2,
    kOriginalSizeFieldNumber = 1,
  };
  // bytes compressed_data = 2;
  void clear_compressed_data();
  const std::string& compressed_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compressed_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compressed_data();
  PROTOBUF_NODISCARD std::string* release_compressed_data();
  void set_allocated_compressed_data(std::string* compressed_data);
  private:
  const std::string& _internal_compressed_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compressed_data(const std::string& value);
  std::string* _internal_mutable_compressed_data();
  public:

  // int32 original_size = 1;
  void clear_original_size();
  int32_t original_size() const;
  void set_original_size(int32_t value);
  private:
  int32_t _internal_original_size() const;
  void _internal_set_original_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CompressedData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_data_;
    int32_t original_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API DoBreathingExerciseResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.DoBreathingExerciseResult) */ {
 public:
  inline DoBreathingExerciseResult() : DoBreathingExerciseResult(nullptr) {}
  ~DoBreathingExerciseResult() override;
  explicit PROTOBUF_CONSTEXPR DoBreathingExerciseResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoBreathingExerciseResult(const DoBreathingExerciseResult& from);
  DoBreathingExerciseResult(DoBreathingExerciseResult&& from) noexcept
    : DoBreathingExerciseResult() {
    *this = ::std::move(from);
  }

  inline DoBreathingExerciseResult& operator=(const DoBreathingExerciseResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoBreathingExerciseResult& operator=(DoBreathingExerciseResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoBreathingExerciseResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoBreathingExerciseResult* internal_default_instance() {
    return reinterpret_cast<const DoBreathingExerciseResult*>(
               &_DoBreathingExerciseResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(DoBreathingExerciseResult& a, DoBreathingExerciseResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DoBreathingExerciseResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoBreathingExerciseResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoBreathingExerciseResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoBreathingExerciseResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DoBreathingExerciseResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DoBreathingExerciseResult& from) {
    DoBreathingExerciseResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoBreathingExerciseResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.DoBreathingExerciseResult";
  }
  protected:
  explicit DoBreathingExerciseResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
    kPerfectFieldNumber = 2,
    kExpFieldNumber = 3,
    kRateFieldNumber = 4,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // bool perfect = 2;
  void clear_perfect();
  bool perfect() const;
  void set_perfect(bool value);
  private:
  bool _internal_perfect() const;
  void _internal_set_perfect(bool value);
  public:

  // float exp = 3;
  void clear_exp();
  float exp() const;
  void set_exp(float value);
  private:
  float _internal_exp() const;
  void _internal_set_exp(float value);
  public:

  // int32 rate = 4;
  void clear_rate();
  int32_t rate() const;
  void set_rate(int32_t value);
  private:
  int32_t _internal_rate() const;
  void _internal_set_rate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.DoBreathingExerciseResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ok_;
    bool perfect_;
    float exp_;
    int32_t rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SystemNoticeParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SystemNoticeParams) */ {
 public:
  inline SystemNoticeParams() : SystemNoticeParams(nullptr) {}
  ~SystemNoticeParams() override;
  explicit PROTOBUF_CONSTEXPR SystemNoticeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemNoticeParams(const SystemNoticeParams& from);
  SystemNoticeParams(SystemNoticeParams&& from) noexcept
    : SystemNoticeParams() {
    *this = ::std::move(from);
  }

  inline SystemNoticeParams& operator=(const SystemNoticeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemNoticeParams& operator=(SystemNoticeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemNoticeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemNoticeParams* internal_default_instance() {
    return reinterpret_cast<const SystemNoticeParams*>(
               &_SystemNoticeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(SystemNoticeParams& a, SystemNoticeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemNoticeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemNoticeParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemNoticeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemNoticeParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemNoticeParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemNoticeParams& from) {
    SystemNoticeParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemNoticeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SystemNoticeParams";
  }
  protected:
  explicit SystemNoticeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kS1FieldNumber = 1,
    kS2FieldNumber = 2,
    kS3FieldNumber = 3,
    kS4FieldNumber = 4,
    kN1FieldNumber = 5,
    kN2FieldNumber = 6,
    kN3FieldNumber = 7,
    kN4FieldNumber = 8,
  };
  // string s1 = 1;
  void clear_s1();
  const std::string& s1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s1();
  PROTOBUF_NODISCARD std::string* release_s1();
  void set_allocated_s1(std::string* s1);
  private:
  const std::string& _internal_s1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s1(const std::string& value);
  std::string* _internal_mutable_s1();
  public:

  // string s2 = 2;
  void clear_s2();
  const std::string& s2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s2();
  PROTOBUF_NODISCARD std::string* release_s2();
  void set_allocated_s2(std::string* s2);
  private:
  const std::string& _internal_s2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s2(const std::string& value);
  std::string* _internal_mutable_s2();
  public:

  // string s3 = 3;
  void clear_s3();
  const std::string& s3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s3();
  PROTOBUF_NODISCARD std::string* release_s3();
  void set_allocated_s3(std::string* s3);
  private:
  const std::string& _internal_s3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s3(const std::string& value);
  std::string* _internal_mutable_s3();
  public:

  // string s4 = 4;
  void clear_s4();
  const std::string& s4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s4();
  PROTOBUF_NODISCARD std::string* release_s4();
  void set_allocated_s4(std::string* s4);
  private:
  const std::string& _internal_s4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s4(const std::string& value);
  std::string* _internal_mutable_s4();
  public:

  // int64 n1 = 5;
  void clear_n1();
  int64_t n1() const;
  void set_n1(int64_t value);
  private:
  int64_t _internal_n1() const;
  void _internal_set_n1(int64_t value);
  public:

  // int64 n2 = 6;
  void clear_n2();
  int64_t n2() const;
  void set_n2(int64_t value);
  private:
  int64_t _internal_n2() const;
  void _internal_set_n2(int64_t value);
  public:

  // int64 n3 = 7;
  void clear_n3();
  int64_t n3() const;
  void set_n3(int64_t value);
  private:
  int64_t _internal_n3() const;
  void _internal_set_n3(int64_t value);
  public:

  // int64 n4 = 8;
  void clear_n4();
  int64_t n4() const;
  void set_n4(int64_t value);
  private:
  int64_t _internal_n4() const;
  void _internal_set_n4(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SystemNoticeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s4_;
    int64_t n1_;
    int64_t n2_;
    int64_t n3_;
    int64_t n4_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API DropItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.DropItem) */ {
 public:
  inline DropItem() : DropItem(nullptr) {}
  ~DropItem() override;
  explicit PROTOBUF_CONSTEXPR DropItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropItem(const DropItem& from);
  DropItem(DropItem&& from) noexcept
    : DropItem() {
    *this = ::std::move(from);
  }

  inline DropItem& operator=(const DropItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropItem& operator=(DropItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropItem* internal_default_instance() {
    return reinterpret_cast<const DropItem*>(
               &_DropItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(DropItem& a, DropItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DropItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DropItem& from) {
    DropItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.DropItem";
  }
  protected:
  explicit DropItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kItemNumFieldNumber = 2,
  };
  // int32 item_id = 1;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 item_num = 2;
  void clear_item_num();
  int32_t item_num() const;
  void set_item_num(int32_t value);
  private:
  int32_t _internal_item_num() const;
  void _internal_set_item_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.DropItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t item_id_;
    int32_t item_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API BiographyEventLeaderboardItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.BiographyEventLeaderboardItem) */ {
 public:
  inline BiographyEventLeaderboardItem() : BiographyEventLeaderboardItem(nullptr) {}
  ~BiographyEventLeaderboardItem() override;
  explicit PROTOBUF_CONSTEXPR BiographyEventLeaderboardItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiographyEventLeaderboardItem(const BiographyEventLeaderboardItem& from);
  BiographyEventLeaderboardItem(BiographyEventLeaderboardItem&& from) noexcept
    : BiographyEventLeaderboardItem() {
    *this = ::std::move(from);
  }

  inline BiographyEventLeaderboardItem& operator=(const BiographyEventLeaderboardItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiographyEventLeaderboardItem& operator=(BiographyEventLeaderboardItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiographyEventLeaderboardItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiographyEventLeaderboardItem* internal_default_instance() {
    return reinterpret_cast<const BiographyEventLeaderboardItem*>(
               &_BiographyEventLeaderboardItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(BiographyEventLeaderboardItem& a, BiographyEventLeaderboardItem& b) {
    a.Swap(&b);
  }
  inline void Swap(BiographyEventLeaderboardItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiographyEventLeaderboardItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiographyEventLeaderboardItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiographyEventLeaderboardItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiographyEventLeaderboardItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BiographyEventLeaderboardItem& from) {
    BiographyEventLeaderboardItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiographyEventLeaderboardItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.BiographyEventLeaderboardItem";
  }
  protected:
  explicit BiographyEventLeaderboardItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsN1FieldNumber = 8,
    kParamsD1FieldNumber = 9,
    kNameFieldNumber = 2,
    kUidFieldNumber = 1,
    kParamN1FieldNumber = 7,
    kParamD1FieldNumber = 6,
  };
  // repeated int64 params_n1 = 8;
  int params_n1_size() const;
  private:
  int _internal_params_n1_size() const;
  public:
  void clear_params_n1();
  private:
  int64_t _internal_params_n1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_params_n1() const;
  void _internal_add_params_n1(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_params_n1();
  public:
  int64_t params_n1(int index) const;
  void set_params_n1(int index, int64_t value);
  void add_params_n1(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      params_n1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_params_n1();

  // repeated int32 params_d1 = 9;
  int params_d1_size() const;
  private:
  int _internal_params_d1_size() const;
  public:
  void clear_params_d1();
  private:
  int32_t _internal_params_d1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_params_d1() const;
  void _internal_add_params_d1(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_params_d1();
  public:
  int32_t params_d1(int index) const;
  void set_params_d1(int index, int32_t value);
  void add_params_d1(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      params_d1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_params_d1();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 uid = 1;
  void clear_uid();
  int64_t uid() const;
  void set_uid(int64_t value);
  private:
  int64_t _internal_uid() const;
  void _internal_set_uid(int64_t value);
  public:

  // int64 param_n1 = 7;
  void clear_param_n1();
  int64_t param_n1() const;
  void set_param_n1(int64_t value);
  private:
  int64_t _internal_param_n1() const;
  void _internal_set_param_n1(int64_t value);
  public:

  // int32 param_d1 = 6;
  void clear_param_d1();
  int32_t param_d1() const;
  void set_param_d1(int32_t value);
  private:
  int32_t _internal_param_d1() const;
  void _internal_set_param_d1(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.BiographyEventLeaderboardItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > params_n1_;
    mutable std::atomic<int> _params_n1_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > params_d1_;
    mutable std::atomic<int> _params_d1_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t uid_;
    int64_t param_n1_;
    int32_t param_d1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API BiographyEventLeaderboardList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.BiographyEventLeaderboardList) */ {
 public:
  inline BiographyEventLeaderboardList() : BiographyEventLeaderboardList(nullptr) {}
  ~BiographyEventLeaderboardList() override;
  explicit PROTOBUF_CONSTEXPR BiographyEventLeaderboardList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiographyEventLeaderboardList(const BiographyEventLeaderboardList& from);
  BiographyEventLeaderboardList(BiographyEventLeaderboardList&& from) noexcept
    : BiographyEventLeaderboardList() {
    *this = ::std::move(from);
  }

  inline BiographyEventLeaderboardList& operator=(const BiographyEventLeaderboardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiographyEventLeaderboardList& operator=(BiographyEventLeaderboardList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiographyEventLeaderboardList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiographyEventLeaderboardList* internal_default_instance() {
    return reinterpret_cast<const BiographyEventLeaderboardList*>(
               &_BiographyEventLeaderboardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(BiographyEventLeaderboardList& a, BiographyEventLeaderboardList& b) {
    a.Swap(&b);
  }
  inline void Swap(BiographyEventLeaderboardList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiographyEventLeaderboardList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiographyEventLeaderboardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiographyEventLeaderboardList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiographyEventLeaderboardList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BiographyEventLeaderboardList& from) {
    BiographyEventLeaderboardList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiographyEventLeaderboardList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.BiographyEventLeaderboardList";
  }
  protected:
  explicit BiographyEventLeaderboardList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListDataFieldNumber = 1,
    kBeginDateFieldNumber = 3,
    kCfgIdFieldNumber = 2,
    kFinishedFieldNumber = 4,
  };
  // repeated .idlepb.BiographyEventLeaderboardItem list_data = 1;
  int list_data_size() const;
  private:
  int _internal_list_data_size() const;
  public:
  void clear_list_data();
  ::idlepb::BiographyEventLeaderboardItem* mutable_list_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyEventLeaderboardItem >*
      mutable_list_data();
  private:
  const ::idlepb::BiographyEventLeaderboardItem& _internal_list_data(int index) const;
  ::idlepb::BiographyEventLeaderboardItem* _internal_add_list_data();
  public:
  const ::idlepb::BiographyEventLeaderboardItem& list_data(int index) const;
  ::idlepb::BiographyEventLeaderboardItem* add_list_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyEventLeaderboardItem >&
      list_data() const;

  // int64 begin_date = 3;
  void clear_begin_date();
  int64_t begin_date() const;
  void set_begin_date(int64_t value);
  private:
  int64_t _internal_begin_date() const;
  void _internal_set_begin_date(int64_t value);
  public:

  // int32 cfg_id = 2;
  void clear_cfg_id();
  int32_t cfg_id() const;
  void set_cfg_id(int32_t value);
  private:
  int32_t _internal_cfg_id() const;
  void _internal_set_cfg_id(int32_t value);
  public:

  // bool finished = 4;
  void clear_finished();
  bool finished() const;
  void set_finished(bool value);
  private:
  bool _internal_finished() const;
  void _internal_set_finished(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.BiographyEventLeaderboardList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyEventLeaderboardItem > list_data_;
    int64_t begin_date_;
    int32_t cfg_id_;
    bool finished_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API LeaderboardListItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.LeaderboardListItem) */ {
 public:
  inline LeaderboardListItem() : LeaderboardListItem(nullptr) {}
  ~LeaderboardListItem() override;
  explicit PROTOBUF_CONSTEXPR LeaderboardListItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaderboardListItem(const LeaderboardListItem& from);
  LeaderboardListItem(LeaderboardListItem&& from) noexcept
    : LeaderboardListItem() {
    *this = ::std::move(from);
  }

  inline LeaderboardListItem& operator=(const LeaderboardListItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderboardListItem& operator=(LeaderboardListItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaderboardListItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaderboardListItem* internal_default_instance() {
    return reinterpret_cast<const LeaderboardListItem*>(
               &_LeaderboardListItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(LeaderboardListItem& a, LeaderboardListItem& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderboardListItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderboardListItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaderboardListItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaderboardListItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaderboardListItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaderboardListItem& from) {
    LeaderboardListItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderboardListItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.LeaderboardListItem";
  }
  protected:
  explicit LeaderboardListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kRoleIdFieldNumber = 1,
    kPropertyNumFieldNumber = 3,
    kTimeFieldNumber = 4,
    kD1FieldNumber = 5,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int64 role_id = 1;
  void clear_role_id();
  int64_t role_id() const;
  void set_role_id(int64_t value);
  private:
  int64_t _internal_role_id() const;
  void _internal_set_role_id(int64_t value);
  public:

  // int64 property_num = 3;
  void clear_property_num();
  int64_t property_num() const;
  void set_property_num(int64_t value);
  private:
  int64_t _internal_property_num() const;
  void _internal_set_property_num(int64_t value);
  public:

  // int64 time = 4;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int32 d1 = 5;
  void clear_d1();
  int32_t d1() const;
  void set_d1(int32_t value);
  private:
  int32_t _internal_d1() const;
  void _internal_set_d1(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.LeaderboardListItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    int64_t role_id_;
    int64_t property_num_;
    int64_t time_;
    int32_t d1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SeptDataOnLeaderboard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SeptDataOnLeaderboard) */ {
 public:
  inline SeptDataOnLeaderboard() : SeptDataOnLeaderboard(nullptr) {}
  ~SeptDataOnLeaderboard() override;
  explicit PROTOBUF_CONSTEXPR SeptDataOnLeaderboard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeptDataOnLeaderboard(const SeptDataOnLeaderboard& from);
  SeptDataOnLeaderboard(SeptDataOnLeaderboard&& from) noexcept
    : SeptDataOnLeaderboard() {
    *this = ::std::move(from);
  }

  inline SeptDataOnLeaderboard& operator=(const SeptDataOnLeaderboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeptDataOnLeaderboard& operator=(SeptDataOnLeaderboard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeptDataOnLeaderboard& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeptDataOnLeaderboard* internal_default_instance() {
    return reinterpret_cast<const SeptDataOnLeaderboard*>(
               &_SeptDataOnLeaderboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(SeptDataOnLeaderboard& a, SeptDataOnLeaderboard& b) {
    a.Swap(&b);
  }
  inline void Swap(SeptDataOnLeaderboard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeptDataOnLeaderboard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeptDataOnLeaderboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeptDataOnLeaderboard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeptDataOnLeaderboard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeptDataOnLeaderboard& from) {
    SeptDataOnLeaderboard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeptDataOnLeaderboard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SeptDataOnLeaderboard";
  }
  protected:
  explicit SeptDataOnLeaderboard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeptNameFieldNumber = 2,
    kSeptIdFieldNumber = 1,
    kPropertyNumFieldNumber = 4,
    kLogoIndexFieldNumber = 3,
  };
  // string sept_name = 2;
  void clear_sept_name();
  const std::string& sept_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sept_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sept_name();
  PROTOBUF_NODISCARD std::string* release_sept_name();
  void set_allocated_sept_name(std::string* sept_name);
  private:
  const std::string& _internal_sept_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sept_name(const std::string& value);
  std::string* _internal_mutable_sept_name();
  public:

  // int64 sept_id = 1;
  void clear_sept_id();
  int64_t sept_id() const;
  void set_sept_id(int64_t value);
  private:
  int64_t _internal_sept_id() const;
  void _internal_set_sept_id(int64_t value);
  public:

  // int64 property_num = 4;
  void clear_property_num();
  int64_t property_num() const;
  void set_property_num(int64_t value);
  private:
  int64_t _internal_property_num() const;
  void _internal_set_property_num(int64_t value);
  public:

  // int32 logo_index = 3;
  void clear_logo_index();
  int32_t logo_index() const;
  void set_logo_index(int32_t value);
  private:
  int32_t _internal_logo_index() const;
  void _internal_set_logo_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SeptDataOnLeaderboard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sept_name_;
    int64_t sept_id_;
    int64_t property_num_;
    int32_t logo_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API LeaderboardList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.LeaderboardList) */ {
 public:
  inline LeaderboardList() : LeaderboardList(nullptr) {}
  ~LeaderboardList() override;
  explicit PROTOBUF_CONSTEXPR LeaderboardList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaderboardList(const LeaderboardList& from);
  LeaderboardList(LeaderboardList&& from) noexcept
    : LeaderboardList() {
    *this = ::std::move(from);
  }

  inline LeaderboardList& operator=(const LeaderboardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderboardList& operator=(LeaderboardList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaderboardList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaderboardList* internal_default_instance() {
    return reinterpret_cast<const LeaderboardList*>(
               &_LeaderboardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(LeaderboardList& a, LeaderboardList& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderboardList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderboardList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaderboardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaderboardList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaderboardList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaderboardList& from) {
    LeaderboardList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderboardList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.LeaderboardList";
  }
  protected:
  explicit LeaderboardList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListDataFieldNumber = 1,
    kTypeIdFieldNumber = 2,
  };
  // repeated .idlepb.LeaderboardListItem list_data = 1;
  int list_data_size() const;
  private:
  int _internal_list_data_size() const;
  public:
  void clear_list_data();
  ::idlepb::LeaderboardListItem* mutable_list_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardListItem >*
      mutable_list_data();
  private:
  const ::idlepb::LeaderboardListItem& _internal_list_data(int index) const;
  ::idlepb::LeaderboardListItem* _internal_add_list_data();
  public:
  const ::idlepb::LeaderboardListItem& list_data(int index) const;
  ::idlepb::LeaderboardListItem* add_list_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardListItem >&
      list_data() const;

  // int32 type_id = 2;
  void clear_type_id();
  int32_t type_id() const;
  void set_type_id(int32_t value);
  private:
  int32_t _internal_type_id() const;
  void _internal_set_type_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.LeaderboardList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardListItem > list_data_;
    int32_t type_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API LeaderboardSaveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.LeaderboardSaveData) */ {
 public:
  inline LeaderboardSaveData() : LeaderboardSaveData(nullptr) {}
  ~LeaderboardSaveData() override;
  explicit PROTOBUF_CONSTEXPR LeaderboardSaveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaderboardSaveData(const LeaderboardSaveData& from);
  LeaderboardSaveData(LeaderboardSaveData&& from) noexcept
    : LeaderboardSaveData() {
    *this = ::std::move(from);
  }

  inline LeaderboardSaveData& operator=(const LeaderboardSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderboardSaveData& operator=(LeaderboardSaveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaderboardSaveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaderboardSaveData* internal_default_instance() {
    return reinterpret_cast<const LeaderboardSaveData*>(
               &_LeaderboardSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(LeaderboardSaveData& a, LeaderboardSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderboardSaveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderboardSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaderboardSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaderboardSaveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaderboardSaveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaderboardSaveData& from) {
    LeaderboardSaveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderboardSaveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.LeaderboardSaveData";
  }
  protected:
  explicit LeaderboardSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListsDataFieldNumber = 1,
    kSeptListFieldNumber = 3,
    kMonsterTowerChallangeFieldNumber = 11,
    kBiographyListsFieldNumber = 31,
    kFuzeMailListFieldNumber = 33,
    kLastResetWeekTimeFieldNumber = 21,
    kLastResetDayTimeFieldNumber = 22,
    kFuzeExpFieldNumber = 32,
  };
  // repeated .idlepb.LeaderboardList lists_data = 1;
  int lists_data_size() const;
  private:
  int _internal_lists_data_size() const;
  public:
  void clear_lists_data();
  ::idlepb::LeaderboardList* mutable_lists_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardList >*
      mutable_lists_data();
  private:
  const ::idlepb::LeaderboardList& _internal_lists_data(int index) const;
  ::idlepb::LeaderboardList* _internal_add_lists_data();
  public:
  const ::idlepb::LeaderboardList& lists_data(int index) const;
  ::idlepb::LeaderboardList* add_lists_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardList >&
      lists_data() const;

  // repeated .idlepb.SeptDataOnLeaderboard sept_list = 3;
  int sept_list_size() const;
  private:
  int _internal_sept_list_size() const;
  public:
  void clear_sept_list();
  ::idlepb::SeptDataOnLeaderboard* mutable_sept_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptDataOnLeaderboard >*
      mutable_sept_list();
  private:
  const ::idlepb::SeptDataOnLeaderboard& _internal_sept_list(int index) const;
  ::idlepb::SeptDataOnLeaderboard* _internal_add_sept_list();
  public:
  const ::idlepb::SeptDataOnLeaderboard& sept_list(int index) const;
  ::idlepb::SeptDataOnLeaderboard* add_sept_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptDataOnLeaderboard >&
      sept_list() const;

  // repeated .idlepb.LeaderboardList monster_tower_challange = 11;
  int monster_tower_challange_size() const;
  private:
  int _internal_monster_tower_challange_size() const;
  public:
  void clear_monster_tower_challange();
  ::idlepb::LeaderboardList* mutable_monster_tower_challange(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardList >*
      mutable_monster_tower_challange();
  private:
  const ::idlepb::LeaderboardList& _internal_monster_tower_challange(int index) const;
  ::idlepb::LeaderboardList* _internal_add_monster_tower_challange();
  public:
  const ::idlepb::LeaderboardList& monster_tower_challange(int index) const;
  ::idlepb::LeaderboardList* add_monster_tower_challange();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardList >&
      monster_tower_challange() const;

  // repeated .idlepb.BiographyEventLeaderboardList biography_lists = 31;
  int biography_lists_size() const;
  private:
  int _internal_biography_lists_size() const;
  public:
  void clear_biography_lists();
  ::idlepb::BiographyEventLeaderboardList* mutable_biography_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyEventLeaderboardList >*
      mutable_biography_lists();
  private:
  const ::idlepb::BiographyEventLeaderboardList& _internal_biography_lists(int index) const;
  ::idlepb::BiographyEventLeaderboardList* _internal_add_biography_lists();
  public:
  const ::idlepb::BiographyEventLeaderboardList& biography_lists(int index) const;
  ::idlepb::BiographyEventLeaderboardList* add_biography_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyEventLeaderboardList >&
      biography_lists() const;

  // repeated int64 fuze_mail_list = 33;
  int fuze_mail_list_size() const;
  private:
  int _internal_fuze_mail_list_size() const;
  public:
  void clear_fuze_mail_list();
  private:
  int64_t _internal_fuze_mail_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_fuze_mail_list() const;
  void _internal_add_fuze_mail_list(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_fuze_mail_list();
  public:
  int64_t fuze_mail_list(int index) const;
  void set_fuze_mail_list(int index, int64_t value);
  void add_fuze_mail_list(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      fuze_mail_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_fuze_mail_list();

  // int64 last_reset_week_time = 21;
  void clear_last_reset_week_time();
  int64_t last_reset_week_time() const;
  void set_last_reset_week_time(int64_t value);
  private:
  int64_t _internal_last_reset_week_time() const;
  void _internal_set_last_reset_week_time(int64_t value);
  public:

  // int64 last_reset_day_time = 22;
  void clear_last_reset_day_time();
  int64_t last_reset_day_time() const;
  void set_last_reset_day_time(int64_t value);
  private:
  int64_t _internal_last_reset_day_time() const;
  void _internal_set_last_reset_day_time(int64_t value);
  public:

  // int64 fuze_exp = 32;
  void clear_fuze_exp();
  int64_t fuze_exp() const;
  void set_fuze_exp(int64_t value);
  private:
  int64_t _internal_fuze_exp() const;
  void _internal_set_fuze_exp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.LeaderboardSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardList > lists_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptDataOnLeaderboard > sept_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardList > monster_tower_challange_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyEventLeaderboardList > biography_lists_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > fuze_mail_list_;
    mutable std::atomic<int> _fuze_mail_list_cached_byte_size_;
    int64_t last_reset_week_time_;
    int64_t last_reset_day_time_;
    int64_t fuze_exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SeptDemonDamageHistoryEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SeptDemonDamageHistoryEntry) */ {
 public:
  inline SeptDemonDamageHistoryEntry() : SeptDemonDamageHistoryEntry(nullptr) {}
  ~SeptDemonDamageHistoryEntry() override;
  explicit PROTOBUF_CONSTEXPR SeptDemonDamageHistoryEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeptDemonDamageHistoryEntry(const SeptDemonDamageHistoryEntry& from);
  SeptDemonDamageHistoryEntry(SeptDemonDamageHistoryEntry&& from) noexcept
    : SeptDemonDamageHistoryEntry() {
    *this = ::std::move(from);
  }

  inline SeptDemonDamageHistoryEntry& operator=(const SeptDemonDamageHistoryEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeptDemonDamageHistoryEntry& operator=(SeptDemonDamageHistoryEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeptDemonDamageHistoryEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeptDemonDamageHistoryEntry* internal_default_instance() {
    return reinterpret_cast<const SeptDemonDamageHistoryEntry*>(
               &_SeptDemonDamageHistoryEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(SeptDemonDamageHistoryEntry& a, SeptDemonDamageHistoryEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SeptDemonDamageHistoryEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeptDemonDamageHistoryEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeptDemonDamageHistoryEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeptDemonDamageHistoryEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeptDemonDamageHistoryEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeptDemonDamageHistoryEntry& from) {
    SeptDemonDamageHistoryEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeptDemonDamageHistoryEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SeptDemonDamageHistoryEntry";
  }
  protected:
  explicit SeptDemonDamageHistoryEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 2,
    kRoleModelFieldNumber = 5,
    kRoleIdFieldNumber = 1,
    kTotalDamageFieldNumber = 3,
    kRankFieldNumber = 4,
  };
  // string role_name = 2;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // .idlepb.CharacterModelConfig role_model = 5;
  bool has_role_model() const;
  private:
  bool _internal_has_role_model() const;
  public:
  void clear_role_model();
  const ::idlepb::CharacterModelConfig& role_model() const;
  PROTOBUF_NODISCARD ::idlepb::CharacterModelConfig* release_role_model();
  ::idlepb::CharacterModelConfig* mutable_role_model();
  void set_allocated_role_model(::idlepb::CharacterModelConfig* role_model);
  private:
  const ::idlepb::CharacterModelConfig& _internal_role_model() const;
  ::idlepb::CharacterModelConfig* _internal_mutable_role_model();
  public:
  void unsafe_arena_set_allocated_role_model(
      ::idlepb::CharacterModelConfig* role_model);
  ::idlepb::CharacterModelConfig* unsafe_arena_release_role_model();

  // int64 role_id = 1;
  void clear_role_id();
  int64_t role_id() const;
  void set_role_id(int64_t value);
  private:
  int64_t _internal_role_id() const;
  void _internal_set_role_id(int64_t value);
  public:

  // float total_damage = 3;
  void clear_total_damage();
  float total_damage() const;
  void set_total_damage(float value);
  private:
  float _internal_total_damage() const;
  void _internal_set_total_damage(float value);
  public:

  // int32 rank = 4;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SeptDemonDamageHistoryEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    ::idlepb::CharacterModelConfig* role_model_;
    int64_t role_id_;
    float total_damage_;
    int32_t rank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SeptDemonDamageHistoryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SeptDemonDamageHistoryData) */ {
 public:
  inline SeptDemonDamageHistoryData() : SeptDemonDamageHistoryData(nullptr) {}
  ~SeptDemonDamageHistoryData() override;
  explicit PROTOBUF_CONSTEXPR SeptDemonDamageHistoryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeptDemonDamageHistoryData(const SeptDemonDamageHistoryData& from);
  SeptDemonDamageHistoryData(SeptDemonDamageHistoryData&& from) noexcept
    : SeptDemonDamageHistoryData() {
    *this = ::std::move(from);
  }

  inline SeptDemonDamageHistoryData& operator=(const SeptDemonDamageHistoryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeptDemonDamageHistoryData& operator=(SeptDemonDamageHistoryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeptDemonDamageHistoryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeptDemonDamageHistoryData* internal_default_instance() {
    return reinterpret_cast<const SeptDemonDamageHistoryData*>(
               &_SeptDemonDamageHistoryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(SeptDemonDamageHistoryData& a, SeptDemonDamageHistoryData& b) {
    a.Swap(&b);
  }
  inline void Swap(SeptDemonDamageHistoryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeptDemonDamageHistoryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeptDemonDamageHistoryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeptDemonDamageHistoryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeptDemonDamageHistoryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeptDemonDamageHistoryData& from) {
    SeptDemonDamageHistoryData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeptDemonDamageHistoryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SeptDemonDamageHistoryData";
  }
  protected:
  explicit SeptDemonDamageHistoryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllEntriesFieldNumber = 4,
  };
  // repeated .idlepb.SeptDemonDamageHistoryEntry all_entries = 4;
  int all_entries_size() const;
  private:
  int _internal_all_entries_size() const;
  public:
  void clear_all_entries();
  ::idlepb::SeptDemonDamageHistoryEntry* mutable_all_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptDemonDamageHistoryEntry >*
      mutable_all_entries();
  private:
  const ::idlepb::SeptDemonDamageHistoryEntry& _internal_all_entries(int index) const;
  ::idlepb::SeptDemonDamageHistoryEntry* _internal_add_all_entries();
  public:
  const ::idlepb::SeptDemonDamageHistoryEntry& all_entries(int index) const;
  ::idlepb::SeptDemonDamageHistoryEntry* add_all_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptDemonDamageHistoryEntry >&
      all_entries() const;

  // @@protoc_insertion_point(class_scope:idlepb.SeptDemonDamageHistoryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptDemonDamageHistoryEntry > all_entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SelfSeptInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SelfSeptInfo) */ {
 public:
  inline SelfSeptInfo() : SelfSeptInfo(nullptr) {}
  ~SelfSeptInfo() override;
  explicit PROTOBUF_CONSTEXPR SelfSeptInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelfSeptInfo(const SelfSeptInfo& from);
  SelfSeptInfo(SelfSeptInfo&& from) noexcept
    : SelfSeptInfo() {
    *this = ::std::move(from);
  }

  inline SelfSeptInfo& operator=(const SelfSeptInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfSeptInfo& operator=(SelfSeptInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelfSeptInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelfSeptInfo* internal_default_instance() {
    return reinterpret_cast<const SelfSeptInfo*>(
               &_SelfSeptInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(SelfSeptInfo& a, SelfSeptInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SelfSeptInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfSeptInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelfSeptInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelfSeptInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelfSeptInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelfSeptInfo& from) {
    SelfSeptInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelfSeptInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SelfSeptInfo";
  }
  protected:
  explicit SelfSeptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeptNameFieldNumber = 2,
    kSeptIdFieldNumber = 1,
    kNextJoinTicksFieldNumber = 4,
    kSeptPositionFieldNumber = 3,
    kLandFightingFieldNumber = 5,
  };
  // string sept_name = 2;
  void clear_sept_name();
  const std::string& sept_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sept_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sept_name();
  PROTOBUF_NODISCARD std::string* release_sept_name();
  void set_allocated_sept_name(std::string* sept_name);
  private:
  const std::string& _internal_sept_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sept_name(const std::string& value);
  std::string* _internal_mutable_sept_name();
  public:

  // int64 sept_id = 1;
  void clear_sept_id();
  int64_t sept_id() const;
  void set_sept_id(int64_t value);
  private:
  int64_t _internal_sept_id() const;
  void _internal_set_sept_id(int64_t value);
  public:

  // int64 next_join_ticks = 4;
  void clear_next_join_ticks();
  int64_t next_join_ticks() const;
  void set_next_join_ticks(int64_t value);
  private:
  int64_t _internal_next_join_ticks() const;
  void _internal_set_next_join_ticks(int64_t value);
  public:

  // .idlepb.SeptPosition sept_position = 3;
  void clear_sept_position();
  ::idlepb::SeptPosition sept_position() const;
  void set_sept_position(::idlepb::SeptPosition value);
  private:
  ::idlepb::SeptPosition _internal_sept_position() const;
  void _internal_set_sept_position(::idlepb::SeptPosition value);
  public:

  // bool land_fighting = 5;
  void clear_land_fighting();
  bool land_fighting() const;
  void set_land_fighting(bool value);
  private:
  bool _internal_land_fighting() const;
  void _internal_set_land_fighting(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SelfSeptInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sept_name_;
    int64_t sept_id_;
    int64_t next_join_ticks_;
    int sept_position_;
    bool land_fighting_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CreatePlayerParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CreatePlayerParams) */ {
 public:
  inline CreatePlayerParams() : CreatePlayerParams(nullptr) {}
  ~CreatePlayerParams() override;
  explicit PROTOBUF_CONSTEXPR CreatePlayerParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePlayerParams(const CreatePlayerParams& from);
  CreatePlayerParams(CreatePlayerParams&& from) noexcept
    : CreatePlayerParams() {
    *this = ::std::move(from);
  }

  inline CreatePlayerParams& operator=(const CreatePlayerParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePlayerParams& operator=(CreatePlayerParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePlayerParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePlayerParams* internal_default_instance() {
    return reinterpret_cast<const CreatePlayerParams*>(
               &_CreatePlayerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(CreatePlayerParams& a, CreatePlayerParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePlayerParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePlayerParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePlayerParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePlayerParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePlayerParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreatePlayerParams& from) {
    CreatePlayerParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlayerParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CreatePlayerParams";
  }
  protected:
  explicit CreatePlayerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 2,
    kPhysicsRankDataFieldNumber = 3,
    kMagicRankDataFieldNumber = 4,
    kModelConfigFieldNumber = 5,
    kAbilityDataFieldNumber = 12,
    kNormalSettingsFieldNumber = 15,
    kSelfSeptInfoFieldNumber = 16,
    kAllStatsDataFieldNumber = 20,
    kRoleIdFieldNumber = 1,
    kFightModeFieldNumber = 13,
    kIsDummyFieldNumber = 14,
    kCombatPowerFieldNumber = 17,
  };
  // string role_name = 2;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // .idlepb.RankData physics_rank_data = 3;
  bool has_physics_rank_data() const;
  private:
  bool _internal_has_physics_rank_data() const;
  public:
  void clear_physics_rank_data();
  const ::idlepb::RankData& physics_rank_data() const;
  PROTOBUF_NODISCARD ::idlepb::RankData* release_physics_rank_data();
  ::idlepb::RankData* mutable_physics_rank_data();
  void set_allocated_physics_rank_data(::idlepb::RankData* physics_rank_data);
  private:
  const ::idlepb::RankData& _internal_physics_rank_data() const;
  ::idlepb::RankData* _internal_mutable_physics_rank_data();
  public:
  void unsafe_arena_set_allocated_physics_rank_data(
      ::idlepb::RankData* physics_rank_data);
  ::idlepb::RankData* unsafe_arena_release_physics_rank_data();

  // .idlepb.RankData magic_rank_data = 4;
  bool has_magic_rank_data() const;
  private:
  bool _internal_has_magic_rank_data() const;
  public:
  void clear_magic_rank_data();
  const ::idlepb::RankData& magic_rank_data() const;
  PROTOBUF_NODISCARD ::idlepb::RankData* release_magic_rank_data();
  ::idlepb::RankData* mutable_magic_rank_data();
  void set_allocated_magic_rank_data(::idlepb::RankData* magic_rank_data);
  private:
  const ::idlepb::RankData& _internal_magic_rank_data() const;
  ::idlepb::RankData* _internal_mutable_magic_rank_data();
  public:
  void unsafe_arena_set_allocated_magic_rank_data(
      ::idlepb::RankData* magic_rank_data);
  ::idlepb::RankData* unsafe_arena_release_magic_rank_data();

  // .idlepb.CharacterModelConfig model_config = 5;
  bool has_model_config() const;
  private:
  bool _internal_has_model_config() const;
  public:
  void clear_model_config();
  const ::idlepb::CharacterModelConfig& model_config() const;
  PROTOBUF_NODISCARD ::idlepb::CharacterModelConfig* release_model_config();
  ::idlepb::CharacterModelConfig* mutable_model_config();
  void set_allocated_model_config(::idlepb::CharacterModelConfig* model_config);
  private:
  const ::idlepb::CharacterModelConfig& _internal_model_config() const;
  ::idlepb::CharacterModelConfig* _internal_mutable_model_config();
  public:
  void unsafe_arena_set_allocated_model_config(
      ::idlepb::CharacterModelConfig* model_config);
  ::idlepb::CharacterModelConfig* unsafe_arena_release_model_config();

  // .idlepb.PlayerAbilityData ability_data = 12;
  bool has_ability_data() const;
  private:
  bool _internal_has_ability_data() const;
  public:
  void clear_ability_data();
  const ::idlepb::PlayerAbilityData& ability_data() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerAbilityData* release_ability_data();
  ::idlepb::PlayerAbilityData* mutable_ability_data();
  void set_allocated_ability_data(::idlepb::PlayerAbilityData* ability_data);
  private:
  const ::idlepb::PlayerAbilityData& _internal_ability_data() const;
  ::idlepb::PlayerAbilityData* _internal_mutable_ability_data();
  public:
  void unsafe_arena_set_allocated_ability_data(
      ::idlepb::PlayerAbilityData* ability_data);
  ::idlepb::PlayerAbilityData* unsafe_arena_release_ability_data();

  // .idlepb.RoleNormalSettings normal_settings = 15;
  bool has_normal_settings() const;
  private:
  bool _internal_has_normal_settings() const;
  public:
  void clear_normal_settings();
  const ::idlepb::RoleNormalSettings& normal_settings() const;
  PROTOBUF_NODISCARD ::idlepb::RoleNormalSettings* release_normal_settings();
  ::idlepb::RoleNormalSettings* mutable_normal_settings();
  void set_allocated_normal_settings(::idlepb::RoleNormalSettings* normal_settings);
  private:
  const ::idlepb::RoleNormalSettings& _internal_normal_settings() const;
  ::idlepb::RoleNormalSettings* _internal_mutable_normal_settings();
  public:
  void unsafe_arena_set_allocated_normal_settings(
      ::idlepb::RoleNormalSettings* normal_settings);
  ::idlepb::RoleNormalSettings* unsafe_arena_release_normal_settings();

  // .idlepb.SelfSeptInfo self_sept_info = 16;
  bool has_self_sept_info() const;
  private:
  bool _internal_has_self_sept_info() const;
  public:
  void clear_self_sept_info();
  const ::idlepb::SelfSeptInfo& self_sept_info() const;
  PROTOBUF_NODISCARD ::idlepb::SelfSeptInfo* release_self_sept_info();
  ::idlepb::SelfSeptInfo* mutable_self_sept_info();
  void set_allocated_self_sept_info(::idlepb::SelfSeptInfo* self_sept_info);
  private:
  const ::idlepb::SelfSeptInfo& _internal_self_sept_info() const;
  ::idlepb::SelfSeptInfo* _internal_mutable_self_sept_info();
  public:
  void unsafe_arena_set_allocated_self_sept_info(
      ::idlepb::SelfSeptInfo* self_sept_info);
  ::idlepb::SelfSeptInfo* unsafe_arena_release_self_sept_info();

  // .idlepb.GameStatsAllModuleData all_stats_data = 20;
  bool has_all_stats_data() const;
  private:
  bool _internal_has_all_stats_data() const;
  public:
  void clear_all_stats_data();
  const ::idlepb::GameStatsAllModuleData& all_stats_data() const;
  PROTOBUF_NODISCARD ::idlepb::GameStatsAllModuleData* release_all_stats_data();
  ::idlepb::GameStatsAllModuleData* mutable_all_stats_data();
  void set_allocated_all_stats_data(::idlepb::GameStatsAllModuleData* all_stats_data);
  private:
  const ::idlepb::GameStatsAllModuleData& _internal_all_stats_data() const;
  ::idlepb::GameStatsAllModuleData* _internal_mutable_all_stats_data();
  public:
  void unsafe_arena_set_allocated_all_stats_data(
      ::idlepb::GameStatsAllModuleData* all_stats_data);
  ::idlepb::GameStatsAllModuleData* unsafe_arena_release_all_stats_data();

  // int64 role_id = 1;
  void clear_role_id();
  int64_t role_id() const;
  void set_role_id(int64_t value);
  private:
  int64_t _internal_role_id() const;
  void _internal_set_role_id(int64_t value);
  public:

  // .idlepb.FightMode fight_mode = 13;
  void clear_fight_mode();
  ::idlepb::FightMode fight_mode() const;
  void set_fight_mode(::idlepb::FightMode value);
  private:
  ::idlepb::FightMode _internal_fight_mode() const;
  void _internal_set_fight_mode(::idlepb::FightMode value);
  public:

  // bool is_dummy = 14;
  void clear_is_dummy();
  bool is_dummy() const;
  void set_is_dummy(bool value);
  private:
  bool _internal_is_dummy() const;
  void _internal_set_is_dummy(bool value);
  public:

  // int64 combat_power = 17;
  void clear_combat_power();
  int64_t combat_power() const;
  void set_combat_power(int64_t value);
  private:
  int64_t _internal_combat_power() const;
  void _internal_set_combat_power(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CreatePlayerParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    ::idlepb::RankData* physics_rank_data_;
    ::idlepb::RankData* magic_rank_data_;
    ::idlepb::CharacterModelConfig* model_config_;
    ::idlepb::PlayerAbilityData* ability_data_;
    ::idlepb::RoleNormalSettings* normal_settings_;
    ::idlepb::SelfSeptInfo* self_sept_info_;
    ::idlepb::GameStatsAllModuleData* all_stats_data_;
    int64_t role_id_;
    int fight_mode_;
    bool is_dummy_;
    int64_t combat_power_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API WorldRuntimeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.WorldRuntimeData) */ {
 public:
  inline WorldRuntimeData() : WorldRuntimeData(nullptr) {}
  ~WorldRuntimeData() override;
  explicit PROTOBUF_CONSTEXPR WorldRuntimeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldRuntimeData(const WorldRuntimeData& from);
  WorldRuntimeData(WorldRuntimeData&& from) noexcept
    : WorldRuntimeData() {
    *this = ::std::move(from);
  }

  inline WorldRuntimeData& operator=(const WorldRuntimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldRuntimeData& operator=(WorldRuntimeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldRuntimeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldRuntimeData* internal_default_instance() {
    return reinterpret_cast<const WorldRuntimeData*>(
               &_WorldRuntimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(WorldRuntimeData& a, WorldRuntimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldRuntimeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldRuntimeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldRuntimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldRuntimeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldRuntimeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorldRuntimeData& from) {
    WorldRuntimeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldRuntimeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.WorldRuntimeData";
  }
  protected:
  explicit WorldRuntimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldIdFieldNumber = 1,
    kWorldSecondsFieldNumber = 2,
    kTimeDilationFieldNumber = 3,
  };
  // uint64 world_id = 1;
  void clear_world_id();
  uint64_t world_id() const;
  void set_world_id(uint64_t value);
  private:
  uint64_t _internal_world_id() const;
  void _internal_set_world_id(uint64_t value);
  public:

  // float world_seconds = 2;
  void clear_world_seconds();
  float world_seconds() const;
  void set_world_seconds(float value);
  private:
  float _internal_world_seconds() const;
  void _internal_set_world_seconds(float value);
  public:

  // float time_dilation = 3;
  void clear_time_dilation();
  float time_dilation() const;
  void set_time_dilation(float value);
  private:
  float _internal_time_dilation() const;
  void _internal_set_time_dilation(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.WorldRuntimeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t world_id_;
    float world_seconds_;
    float time_dilation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API NotifyGiftPackageResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.NotifyGiftPackageResult) */ {
 public:
  inline NotifyGiftPackageResult() : NotifyGiftPackageResult(nullptr) {}
  ~NotifyGiftPackageResult() override;
  explicit PROTOBUF_CONSTEXPR NotifyGiftPackageResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyGiftPackageResult(const NotifyGiftPackageResult& from);
  NotifyGiftPackageResult(NotifyGiftPackageResult&& from) noexcept
    : NotifyGiftPackageResult() {
    *this = ::std::move(from);
  }

  inline NotifyGiftPackageResult& operator=(const NotifyGiftPackageResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyGiftPackageResult& operator=(NotifyGiftPackageResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyGiftPackageResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyGiftPackageResult* internal_default_instance() {
    return reinterpret_cast<const NotifyGiftPackageResult*>(
               &_NotifyGiftPackageResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(NotifyGiftPackageResult& a, NotifyGiftPackageResult& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyGiftPackageResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyGiftPackageResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyGiftPackageResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyGiftPackageResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyGiftPackageResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotifyGiftPackageResult& from) {
    NotifyGiftPackageResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyGiftPackageResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.NotifyGiftPackageResult";
  }
  protected:
  explicit NotifyGiftPackageResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kConfigIdFieldNumber = 6,
    kGiftItemIdFieldNumber = 2,
  };
  // repeated .idlepb.SimpleItemData items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::idlepb::SimpleItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >*
      mutable_items();
  private:
  const ::idlepb::SimpleItemData& _internal_items(int index) const;
  ::idlepb::SimpleItemData* _internal_add_items();
  public:
  const ::idlepb::SimpleItemData& items(int index) const;
  ::idlepb::SimpleItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >&
      items() const;

  // repeated int32 config_id = 6;
  int config_id_size() const;
  private:
  int _internal_config_id_size() const;
  public:
  void clear_config_id();
  private:
  int32_t _internal_config_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_config_id() const;
  void _internal_add_config_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_config_id();
  public:
  int32_t config_id(int index) const;
  void set_config_id(int index, int32_t value);
  void add_config_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      config_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_config_id();

  // int32 gift_item_id = 2;
  void clear_gift_item_id();
  int32_t gift_item_id() const;
  void set_gift_item_id(int32_t value);
  private:
  int32_t _internal_gift_item_id() const;
  void _internal_set_gift_item_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.NotifyGiftPackageResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData > items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > config_id_;
    mutable std::atomic<int> _config_id_cached_byte_size_;
    int32_t gift_item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API NotifyUsePillProperty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.NotifyUsePillProperty) */ {
 public:
  inline NotifyUsePillProperty() : NotifyUsePillProperty(nullptr) {}
  ~NotifyUsePillProperty() override;
  explicit PROTOBUF_CONSTEXPR NotifyUsePillProperty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyUsePillProperty(const NotifyUsePillProperty& from);
  NotifyUsePillProperty(NotifyUsePillProperty&& from) noexcept
    : NotifyUsePillProperty() {
    *this = ::std::move(from);
  }

  inline NotifyUsePillProperty& operator=(const NotifyUsePillProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyUsePillProperty& operator=(NotifyUsePillProperty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyUsePillProperty& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyUsePillProperty* internal_default_instance() {
    return reinterpret_cast<const NotifyUsePillProperty*>(
               &_NotifyUsePillProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(NotifyUsePillProperty& a, NotifyUsePillProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyUsePillProperty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyUsePillProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyUsePillProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyUsePillProperty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyUsePillProperty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotifyUsePillProperty& from) {
    NotifyUsePillProperty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyUsePillProperty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.NotifyUsePillProperty";
  }
  protected:
  explicit NotifyUsePillProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kNumFieldNumber = 2,
    kPropertyTypeFieldNumber = 3,
    kPropertyNumFieldNumber = 4,
  };
  // int32 item_id = 1;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // int32 property_type = 3;
  void clear_property_type();
  int32_t property_type() const;
  void set_property_type(int32_t value);
  private:
  int32_t _internal_property_type() const;
  void _internal_set_property_type(int32_t value);
  public:

  // float property_num = 4;
  void clear_property_num();
  float property_num() const;
  void set_property_num(float value);
  private:
  float _internal_property_num() const;
  void _internal_set_property_num(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.NotifyUsePillProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t item_id_;
    int32_t num_;
    int32_t property_type_;
    float property_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API EntityCultivationDirData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.EntityCultivationDirData) */ {
 public:
  inline EntityCultivationDirData() : EntityCultivationDirData(nullptr) {}
  ~EntityCultivationDirData() override;
  explicit PROTOBUF_CONSTEXPR EntityCultivationDirData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityCultivationDirData(const EntityCultivationDirData& from);
  EntityCultivationDirData(EntityCultivationDirData&& from) noexcept
    : EntityCultivationDirData() {
    *this = ::std::move(from);
  }

  inline EntityCultivationDirData& operator=(const EntityCultivationDirData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityCultivationDirData& operator=(EntityCultivationDirData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityCultivationDirData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityCultivationDirData* internal_default_instance() {
    return reinterpret_cast<const EntityCultivationDirData*>(
               &_EntityCultivationDirData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(EntityCultivationDirData& a, EntityCultivationDirData& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityCultivationDirData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityCultivationDirData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityCultivationDirData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntityCultivationDirData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntityCultivationDirData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntityCultivationDirData& from) {
    EntityCultivationDirData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityCultivationDirData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.EntityCultivationDirData";
  }
  protected:
  explicit EntityCultivationDirData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 1,
    kRankFieldNumber = 2,
    kLayerFieldNumber = 3,
    kStageFieldNumber = 4,
    kDegreeFieldNumber = 5,
  };
  // .idlepb.CultivationDirection dir = 1;
  void clear_dir();
  ::idlepb::CultivationDirection dir() const;
  void set_dir(::idlepb::CultivationDirection value);
  private:
  ::idlepb::CultivationDirection _internal_dir() const;
  void _internal_set_dir(::idlepb::CultivationDirection value);
  public:

  // int32 rank = 2;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // int32 layer = 3;
  void clear_layer();
  int32_t layer() const;
  void set_layer(int32_t value);
  private:
  int32_t _internal_layer() const;
  void _internal_set_layer(int32_t value);
  public:

  // int32 stage = 4;
  void clear_stage();
  int32_t stage() const;
  void set_stage(int32_t value);
  private:
  int32_t _internal_stage() const;
  void _internal_set_stage(int32_t value);
  public:

  // int32 degree = 5;
  void clear_degree();
  int32_t degree() const;
  void set_degree(int32_t value);
  private:
  int32_t _internal_degree() const;
  void _internal_set_degree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.EntityCultivationDirData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int dir_;
    int32_t rank_;
    int32_t layer_;
    int32_t stage_;
    int32_t degree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API EntityCultivationData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.EntityCultivationData) */ {
 public:
  inline EntityCultivationData() : EntityCultivationData(nullptr) {}
  ~EntityCultivationData() override;
  explicit PROTOBUF_CONSTEXPR EntityCultivationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityCultivationData(const EntityCultivationData& from);
  EntityCultivationData(EntityCultivationData&& from) noexcept
    : EntityCultivationData() {
    *this = ::std::move(from);
  }

  inline EntityCultivationData& operator=(const EntityCultivationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityCultivationData& operator=(EntityCultivationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityCultivationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityCultivationData* internal_default_instance() {
    return reinterpret_cast<const EntityCultivationData*>(
               &_EntityCultivationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(EntityCultivationData& a, EntityCultivationData& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityCultivationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityCultivationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityCultivationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntityCultivationData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntityCultivationData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntityCultivationData& from) {
    EntityCultivationData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityCultivationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.EntityCultivationData";
  }
  protected:
  explicit EntityCultivationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
  };
  // .idlepb.EntityCultivationDirData major = 1;
  bool has_major() const;
  private:
  bool _internal_has_major() const;
  public:
  void clear_major();
  const ::idlepb::EntityCultivationDirData& major() const;
  PROTOBUF_NODISCARD ::idlepb::EntityCultivationDirData* release_major();
  ::idlepb::EntityCultivationDirData* mutable_major();
  void set_allocated_major(::idlepb::EntityCultivationDirData* major);
  private:
  const ::idlepb::EntityCultivationDirData& _internal_major() const;
  ::idlepb::EntityCultivationDirData* _internal_mutable_major();
  public:
  void unsafe_arena_set_allocated_major(
      ::idlepb::EntityCultivationDirData* major);
  ::idlepb::EntityCultivationDirData* unsafe_arena_release_major();

  // .idlepb.EntityCultivationDirData minor = 2;
  bool has_minor() const;
  private:
  bool _internal_has_minor() const;
  public:
  void clear_minor();
  const ::idlepb::EntityCultivationDirData& minor() const;
  PROTOBUF_NODISCARD ::idlepb::EntityCultivationDirData* release_minor();
  ::idlepb::EntityCultivationDirData* mutable_minor();
  void set_allocated_minor(::idlepb::EntityCultivationDirData* minor);
  private:
  const ::idlepb::EntityCultivationDirData& _internal_minor() const;
  ::idlepb::EntityCultivationDirData* _internal_mutable_minor();
  public:
  void unsafe_arena_set_allocated_minor(
      ::idlepb::EntityCultivationDirData* minor);
  ::idlepb::EntityCultivationDirData* unsafe_arena_release_minor();

  // @@protoc_insertion_point(class_scope:idlepb.EntityCultivationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::EntityCultivationDirData* major_;
    ::idlepb::EntityCultivationDirData* minor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SwordPkTopListEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SwordPkTopListEntry) */ {
 public:
  inline SwordPkTopListEntry() : SwordPkTopListEntry(nullptr) {}
  ~SwordPkTopListEntry() override;
  explicit PROTOBUF_CONSTEXPR SwordPkTopListEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwordPkTopListEntry(const SwordPkTopListEntry& from);
  SwordPkTopListEntry(SwordPkTopListEntry&& from) noexcept
    : SwordPkTopListEntry() {
    *this = ::std::move(from);
  }

  inline SwordPkTopListEntry& operator=(const SwordPkTopListEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwordPkTopListEntry& operator=(SwordPkTopListEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwordPkTopListEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwordPkTopListEntry* internal_default_instance() {
    return reinterpret_cast<const SwordPkTopListEntry*>(
               &_SwordPkTopListEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(SwordPkTopListEntry& a, SwordPkTopListEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SwordPkTopListEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwordPkTopListEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwordPkTopListEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwordPkTopListEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwordPkTopListEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwordPkTopListEntry& from) {
    SwordPkTopListEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwordPkTopListEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SwordPkTopListEntry";
  }
  protected:
  explicit SwordPkTopListEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 2,
    kRoleModelFieldNumber = 3,
    kRoleIdFieldNumber = 1,
    kScoreUpdateTicksFieldNumber = 5,
    kScoreFieldNumber = 4,
    kRankFieldNumber = 6,
    kCombatPowerFieldNumber = 7,
  };
  // string role_name = 2;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // .idlepb.CharacterModelConfig role_model = 3;
  bool has_role_model() const;
  private:
  bool _internal_has_role_model() const;
  public:
  void clear_role_model();
  const ::idlepb::CharacterModelConfig& role_model() const;
  PROTOBUF_NODISCARD ::idlepb::CharacterModelConfig* release_role_model();
  ::idlepb::CharacterModelConfig* mutable_role_model();
  void set_allocated_role_model(::idlepb::CharacterModelConfig* role_model);
  private:
  const ::idlepb::CharacterModelConfig& _internal_role_model() const;
  ::idlepb::CharacterModelConfig* _internal_mutable_role_model();
  public:
  void unsafe_arena_set_allocated_role_model(
      ::idlepb::CharacterModelConfig* role_model);
  ::idlepb::CharacterModelConfig* unsafe_arena_release_role_model();

  // int64 role_id = 1;
  void clear_role_id();
  int64_t role_id() const;
  void set_role_id(int64_t value);
  private:
  int64_t _internal_role_id() const;
  void _internal_set_role_id(int64_t value);
  public:

  // int64 score_update_ticks = 5;
  void clear_score_update_ticks();
  int64_t score_update_ticks() const;
  void set_score_update_ticks(int64_t value);
  private:
  int64_t _internal_score_update_ticks() const;
  void _internal_set_score_update_ticks(int64_t value);
  public:

  // int32 score = 4;
  void clear_score();
  int32_t score() const;
  void set_score(int32_t value);
  private:
  int32_t _internal_score() const;
  void _internal_set_score(int32_t value);
  public:

  // int32 rank = 6;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // int64 combat_power = 7;
  void clear_combat_power();
  int64_t combat_power() const;
  void set_combat_power(int64_t value);
  private:
  int64_t _internal_combat_power() const;
  void _internal_set_combat_power(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SwordPkTopListEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    ::idlepb::CharacterModelConfig* role_model_;
    int64_t role_id_;
    int64_t score_update_ticks_;
    int32_t score_;
    int32_t rank_;
    int64_t combat_power_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API SwordPkGlobalSaveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.SwordPkGlobalSaveData) */ {
 public:
  inline SwordPkGlobalSaveData() : SwordPkGlobalSaveData(nullptr) {}
  ~SwordPkGlobalSaveData() override;
  explicit PROTOBUF_CONSTEXPR SwordPkGlobalSaveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwordPkGlobalSaveData(const SwordPkGlobalSaveData& from);
  SwordPkGlobalSaveData(SwordPkGlobalSaveData&& from) noexcept
    : SwordPkGlobalSaveData() {
    *this = ::std::move(from);
  }

  inline SwordPkGlobalSaveData& operator=(const SwordPkGlobalSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwordPkGlobalSaveData& operator=(SwordPkGlobalSaveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwordPkGlobalSaveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwordPkGlobalSaveData* internal_default_instance() {
    return reinterpret_cast<const SwordPkGlobalSaveData*>(
               &_SwordPkGlobalSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(SwordPkGlobalSaveData& a, SwordPkGlobalSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(SwordPkGlobalSaveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwordPkGlobalSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwordPkGlobalSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwordPkGlobalSaveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwordPkGlobalSaveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwordPkGlobalSaveData& from) {
    SwordPkGlobalSaveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwordPkGlobalSaveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.SwordPkGlobalSaveData";
  }
  protected:
  explicit SwordPkGlobalSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopListFieldNumber = 6,
    kBeginLocalTicksFieldNumber = 2,
    kRoundNumFieldNumber = 1,
    kIsOverFieldNumber = 4,
    kEndLocalTicksFieldNumber = 3,
    kNextDailyRewardLocalTicksFieldNumber = 5,
  };
  // repeated .idlepb.SwordPkTopListEntry top_list = 6;
  int top_list_size() const;
  private:
  int _internal_top_list_size() const;
  public:
  void clear_top_list();
  ::idlepb::SwordPkTopListEntry* mutable_top_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SwordPkTopListEntry >*
      mutable_top_list();
  private:
  const ::idlepb::SwordPkTopListEntry& _internal_top_list(int index) const;
  ::idlepb::SwordPkTopListEntry* _internal_add_top_list();
  public:
  const ::idlepb::SwordPkTopListEntry& top_list(int index) const;
  ::idlepb::SwordPkTopListEntry* add_top_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SwordPkTopListEntry >&
      top_list() const;

  // int64 begin_local_ticks = 2;
  void clear_begin_local_ticks();
  int64_t begin_local_ticks() const;
  void set_begin_local_ticks(int64_t value);
  private:
  int64_t _internal_begin_local_ticks() const;
  void _internal_set_begin_local_ticks(int64_t value);
  public:

  // int32 round_num = 1;
  void clear_round_num();
  int32_t round_num() const;
  void set_round_num(int32_t value);
  private:
  int32_t _internal_round_num() const;
  void _internal_set_round_num(int32_t value);
  public:

  // bool is_over = 4;
  void clear_is_over();
  bool is_over() const;
  void set_is_over(bool value);
  private:
  bool _internal_is_over() const;
  void _internal_set_is_over(bool value);
  public:

  // int64 end_local_ticks = 3;
  void clear_end_local_ticks();
  int64_t end_local_ticks() const;
  void set_end_local_ticks(int64_t value);
  private:
  int64_t _internal_end_local_ticks() const;
  void _internal_set_end_local_ticks(int64_t value);
  public:

  // int64 next_daily_reward_local_ticks = 5;
  void clear_next_daily_reward_local_ticks();
  int64_t next_daily_reward_local_ticks() const;
  void set_next_daily_reward_local_ticks(int64_t value);
  private:
  int64_t _internal_next_daily_reward_local_ticks() const;
  void _internal_set_next_daily_reward_local_ticks(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.SwordPkGlobalSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SwordPkTopListEntry > top_list_;
    int64_t begin_local_ticks_;
    int32_t round_num_;
    bool is_over_;
    int64_t end_local_ticks_;
    int64_t next_daily_reward_local_ticks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Int64Data

// int64 value = 1;
inline void Int64Data::clear_value() {
  _impl_.value_ = int64_t{0};
}
inline int64_t Int64Data::_internal_value() const {
  return _impl_.value_;
}
inline int64_t Int64Data::value() const {
  // @@protoc_insertion_point(field_get:idlepb.Int64Data.value)
  return _internal_value();
}
inline void Int64Data::_internal_set_value(int64_t value) {
  
  _impl_.value_ = value;
}
inline void Int64Data::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idlepb.Int64Data.value)
}

// -------------------------------------------------------------------

// Vector2

// float x = 1;
inline void Vector2::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector2::_internal_x() const {
  return _impl_.x_;
}
inline float Vector2::x() const {
  // @@protoc_insertion_point(field_get:idlepb.Vector2.x)
  return _internal_x();
}
inline void Vector2::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:idlepb.Vector2.x)
}

// float y = 2;
inline void Vector2::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector2::_internal_y() const {
  return _impl_.y_;
}
inline float Vector2::y() const {
  // @@protoc_insertion_point(field_get:idlepb.Vector2.y)
  return _internal_y();
}
inline void Vector2::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:idlepb.Vector2.y)
}

// -------------------------------------------------------------------

// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:idlepb.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:idlepb.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:idlepb.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:idlepb.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:idlepb.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:idlepb.Vector3.z)
}

// -------------------------------------------------------------------

// Color

// float r = 1;
inline void Color::clear_r() {
  _impl_.r_ = 0;
}
inline float Color::_internal_r() const {
  return _impl_.r_;
}
inline float Color::r() const {
  // @@protoc_insertion_point(field_get:idlepb.Color.r)
  return _internal_r();
}
inline void Color::_internal_set_r(float value) {
  
  _impl_.r_ = value;
}
inline void Color::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:idlepb.Color.r)
}

// float g = 2;
inline void Color::clear_g() {
  _impl_.g_ = 0;
}
inline float Color::_internal_g() const {
  return _impl_.g_;
}
inline float Color::g() const {
  // @@protoc_insertion_point(field_get:idlepb.Color.g)
  return _internal_g();
}
inline void Color::_internal_set_g(float value) {
  
  _impl_.g_ = value;
}
inline void Color::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:idlepb.Color.g)
}

// float b = 3;
inline void Color::clear_b() {
  _impl_.b_ = 0;
}
inline float Color::_internal_b() const {
  return _impl_.b_;
}
inline float Color::b() const {
  // @@protoc_insertion_point(field_get:idlepb.Color.b)
  return _internal_b();
}
inline void Color::_internal_set_b(float value) {
  
  _impl_.b_ = value;
}
inline void Color::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:idlepb.Color.b)
}

// float a = 4;
inline void Color::clear_a() {
  _impl_.a_ = 0;
}
inline float Color::_internal_a() const {
  return _impl_.a_;
}
inline float Color::a() const {
  // @@protoc_insertion_point(field_get:idlepb.Color.a)
  return _internal_a();
}
inline void Color::_internal_set_a(float value) {
  
  _impl_.a_ = value;
}
inline void Color::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:idlepb.Color.a)
}

// -------------------------------------------------------------------

// Int64Pair

// int64 key = 1;
inline void Int64Pair::clear_key() {
  _impl_.key_ = int64_t{0};
}
inline int64_t Int64Pair::_internal_key() const {
  return _impl_.key_;
}
inline int64_t Int64Pair::key() const {
  // @@protoc_insertion_point(field_get:idlepb.Int64Pair.key)
  return _internal_key();
}
inline void Int64Pair::_internal_set_key(int64_t value) {
  
  _impl_.key_ = value;
}
inline void Int64Pair::set_key(int64_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:idlepb.Int64Pair.key)
}

// int64 value = 2;
inline void Int64Pair::clear_value() {
  _impl_.value_ = int64_t{0};
}
inline int64_t Int64Pair::_internal_value() const {
  return _impl_.value_;
}
inline int64_t Int64Pair::value() const {
  // @@protoc_insertion_point(field_get:idlepb.Int64Pair.value)
  return _internal_value();
}
inline void Int64Pair::_internal_set_value(int64_t value) {
  
  _impl_.value_ = value;
}
inline void Int64Pair::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idlepb.Int64Pair.value)
}

// -------------------------------------------------------------------

// StringKeyInt32ValueEntry

// string key = 1;
inline void StringKeyInt32ValueEntry::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& StringKeyInt32ValueEntry::key() const {
  // @@protoc_insertion_point(field_get:idlepb.StringKeyInt32ValueEntry.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringKeyInt32ValueEntry::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.StringKeyInt32ValueEntry.key)
}
inline std::string* StringKeyInt32ValueEntry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:idlepb.StringKeyInt32ValueEntry.key)
  return _s;
}
inline const std::string& StringKeyInt32ValueEntry::_internal_key() const {
  return _impl_.key_.Get();
}
inline void StringKeyInt32ValueEntry::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* StringKeyInt32ValueEntry::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* StringKeyInt32ValueEntry::release_key() {
  // @@protoc_insertion_point(field_release:idlepb.StringKeyInt32ValueEntry.key)
  return _impl_.key_.Release();
}
inline void StringKeyInt32ValueEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.StringKeyInt32ValueEntry.key)
}

// int32 value = 2;
inline void StringKeyInt32ValueEntry::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t StringKeyInt32ValueEntry::_internal_value() const {
  return _impl_.value_;
}
inline int32_t StringKeyInt32ValueEntry::value() const {
  // @@protoc_insertion_point(field_get:idlepb.StringKeyInt32ValueEntry.value)
  return _internal_value();
}
inline void StringKeyInt32ValueEntry::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void StringKeyInt32ValueEntry::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idlepb.StringKeyInt32ValueEntry.value)
}

// -------------------------------------------------------------------

// MapValueInt32

// int32 key = 1;
inline void MapValueInt32::clear_key() {
  _impl_.key_ = 0;
}
inline int32_t MapValueInt32::_internal_key() const {
  return _impl_.key_;
}
inline int32_t MapValueInt32::key() const {
  // @@protoc_insertion_point(field_get:idlepb.MapValueInt32.key)
  return _internal_key();
}
inline void MapValueInt32::_internal_set_key(int32_t value) {
  
  _impl_.key_ = value;
}
inline void MapValueInt32::set_key(int32_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:idlepb.MapValueInt32.key)
}

// int32 value = 2;
inline void MapValueInt32::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t MapValueInt32::_internal_value() const {
  return _impl_.value_;
}
inline int32_t MapValueInt32::value() const {
  // @@protoc_insertion_point(field_get:idlepb.MapValueInt32.value)
  return _internal_value();
}
inline void MapValueInt32::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void MapValueInt32::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idlepb.MapValueInt32.value)
}

// -------------------------------------------------------------------

// StringInt64Pair

// string str = 1;
inline void StringInt64Pair::clear_str() {
  _impl_.str_.ClearToEmpty();
}
inline const std::string& StringInt64Pair::str() const {
  // @@protoc_insertion_point(field_get:idlepb.StringInt64Pair.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringInt64Pair::set_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.StringInt64Pair.str)
}
inline std::string* StringInt64Pair::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:idlepb.StringInt64Pair.str)
  return _s;
}
inline const std::string& StringInt64Pair::_internal_str() const {
  return _impl_.str_.Get();
}
inline void StringInt64Pair::_internal_set_str(const std::string& value) {
  
  _impl_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* StringInt64Pair::_internal_mutable_str() {
  
  return _impl_.str_.Mutable(GetArenaForAllocation());
}
inline std::string* StringInt64Pair::release_str() {
  // @@protoc_insertion_point(field_release:idlepb.StringInt64Pair.str)
  return _impl_.str_.Release();
}
inline void StringInt64Pair::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  _impl_.str_.SetAllocated(str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_.IsDefault()) {
    _impl_.str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.StringInt64Pair.str)
}

// int64 value = 2;
inline void StringInt64Pair::clear_value() {
  _impl_.value_ = int64_t{0};
}
inline int64_t StringInt64Pair::_internal_value() const {
  return _impl_.value_;
}
inline int64_t StringInt64Pair::value() const {
  // @@protoc_insertion_point(field_get:idlepb.StringInt64Pair.value)
  return _internal_value();
}
inline void StringInt64Pair::_internal_set_value(int64_t value) {
  
  _impl_.value_ = value;
}
inline void StringInt64Pair::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idlepb.StringInt64Pair.value)
}

// -------------------------------------------------------------------

// AbilityEffectData

// int32 type = 1;
inline void AbilityEffectData::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t AbilityEffectData::_internal_type() const {
  return _impl_.type_;
}
inline int32_t AbilityEffectData::type() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectData.type)
  return _internal_type();
}
inline void AbilityEffectData::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void AbilityEffectData::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectData.type)
}

// float duration = 2;
inline void AbilityEffectData::clear_duration() {
  _impl_.duration_ = 0;
}
inline float AbilityEffectData::_internal_duration() const {
  return _impl_.duration_;
}
inline float AbilityEffectData::duration() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectData.duration)
  return _internal_duration();
}
inline void AbilityEffectData::_internal_set_duration(float value) {
  
  _impl_.duration_ = value;
}
inline void AbilityEffectData::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectData.duration)
}

// float period = 3;
inline void AbilityEffectData::clear_period() {
  _impl_.period_ = 0;
}
inline float AbilityEffectData::_internal_period() const {
  return _impl_.period_;
}
inline float AbilityEffectData::period() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectData.period)
  return _internal_period();
}
inline void AbilityEffectData::_internal_set_period(float value) {
  
  _impl_.period_ = value;
}
inline void AbilityEffectData::set_period(float value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectData.period)
}

// int32 duration_policy = 4;
inline void AbilityEffectData::clear_duration_policy() {
  _impl_.duration_policy_ = 0;
}
inline int32_t AbilityEffectData::_internal_duration_policy() const {
  return _impl_.duration_policy_;
}
inline int32_t AbilityEffectData::duration_policy() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectData.duration_policy)
  return _internal_duration_policy();
}
inline void AbilityEffectData::_internal_set_duration_policy(int32_t value) {
  
  _impl_.duration_policy_ = value;
}
inline void AbilityEffectData::set_duration_policy(int32_t value) {
  _internal_set_duration_policy(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectData.duration_policy)
}

// float starttime_world = 5;
inline void AbilityEffectData::clear_starttime_world() {
  _impl_.starttime_world_ = 0;
}
inline float AbilityEffectData::_internal_starttime_world() const {
  return _impl_.starttime_world_;
}
inline float AbilityEffectData::starttime_world() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectData.starttime_world)
  return _internal_starttime_world();
}
inline void AbilityEffectData::_internal_set_starttime_world(float value) {
  
  _impl_.starttime_world_ = value;
}
inline void AbilityEffectData::set_starttime_world(float value) {
  _internal_set_starttime_world(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectData.starttime_world)
}

// int64 starttime_utc = 6;
inline void AbilityEffectData::clear_starttime_utc() {
  _impl_.starttime_utc_ = int64_t{0};
}
inline int64_t AbilityEffectData::_internal_starttime_utc() const {
  return _impl_.starttime_utc_;
}
inline int64_t AbilityEffectData::starttime_utc() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectData.starttime_utc)
  return _internal_starttime_utc();
}
inline void AbilityEffectData::_internal_set_starttime_utc(int64_t value) {
  
  _impl_.starttime_utc_ = value;
}
inline void AbilityEffectData::set_starttime_utc(int64_t value) {
  _internal_set_starttime_utc(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectData.starttime_utc)
}

// float x = 10;
inline void AbilityEffectData::clear_x() {
  _impl_.x_ = 0;
}
inline float AbilityEffectData::_internal_x() const {
  return _impl_.x_;
}
inline float AbilityEffectData::x() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectData.x)
  return _internal_x();
}
inline void AbilityEffectData::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void AbilityEffectData::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectData.x)
}

// float y = 11;
inline void AbilityEffectData::clear_y() {
  _impl_.y_ = 0;
}
inline float AbilityEffectData::_internal_y() const {
  return _impl_.y_;
}
inline float AbilityEffectData::y() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectData.y)
  return _internal_y();
}
inline void AbilityEffectData::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void AbilityEffectData::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectData.y)
}

// float z = 12;
inline void AbilityEffectData::clear_z() {
  _impl_.z_ = 0;
}
inline float AbilityEffectData::_internal_z() const {
  return _impl_.z_;
}
inline float AbilityEffectData::z() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectData.z)
  return _internal_z();
}
inline void AbilityEffectData::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void AbilityEffectData::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectData.z)
}

// float m = 13;
inline void AbilityEffectData::clear_m() {
  _impl_.m_ = 0;
}
inline float AbilityEffectData::_internal_m() const {
  return _impl_.m_;
}
inline float AbilityEffectData::m() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectData.m)
  return _internal_m();
}
inline void AbilityEffectData::_internal_set_m(float value) {
  
  _impl_.m_ = value;
}
inline void AbilityEffectData::set_m(float value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectData.m)
}

// float n = 14;
inline void AbilityEffectData::clear_n() {
  _impl_.n_ = 0;
}
inline float AbilityEffectData::_internal_n() const {
  return _impl_.n_;
}
inline float AbilityEffectData::n() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectData.n)
  return _internal_n();
}
inline void AbilityEffectData::_internal_set_n(float value) {
  
  _impl_.n_ = value;
}
inline void AbilityEffectData::set_n(float value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectData.n)
}

// -------------------------------------------------------------------

// GameStatData

// int32 type = 1;
inline void GameStatData::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t GameStatData::_internal_type() const {
  return _impl_.type_;
}
inline int32_t GameStatData::type() const {
  // @@protoc_insertion_point(field_get:idlepb.GameStatData.type)
  return _internal_type();
}
inline void GameStatData::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void GameStatData::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.GameStatData.type)
}

// float value = 2;
inline void GameStatData::clear_value() {
  _impl_.value_ = 0;
}
inline float GameStatData::_internal_value() const {
  return _impl_.value_;
}
inline float GameStatData::value() const {
  // @@protoc_insertion_point(field_get:idlepb.GameStatData.value)
  return _internal_value();
}
inline void GameStatData::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void GameStatData::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idlepb.GameStatData.value)
}

// -------------------------------------------------------------------

// GameStatsData

// repeated .idlepb.GameStatData stats = 1;
inline int GameStatsData::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int GameStatsData::stats_size() const {
  return _internal_stats_size();
}
inline void GameStatsData::clear_stats() {
  _impl_.stats_.Clear();
}
inline ::idlepb::GameStatData* GameStatsData::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.GameStatsData.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GameStatData >*
GameStatsData::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.GameStatsData.stats)
  return &_impl_.stats_;
}
inline const ::idlepb::GameStatData& GameStatsData::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::idlepb::GameStatData& GameStatsData::stats(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.GameStatsData.stats)
  return _internal_stats(index);
}
inline ::idlepb::GameStatData* GameStatsData::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::idlepb::GameStatData* GameStatsData::add_stats() {
  ::idlepb::GameStatData* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:idlepb.GameStatsData.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GameStatData >&
GameStatsData::stats() const {
  // @@protoc_insertion_point(field_list:idlepb.GameStatsData.stats)
  return _impl_.stats_;
}

// -------------------------------------------------------------------

// GameStatsModuleData

// int32 type = 1;
inline void GameStatsModuleData::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t GameStatsModuleData::_internal_type() const {
  return _impl_.type_;
}
inline int32_t GameStatsModuleData::type() const {
  // @@protoc_insertion_point(field_get:idlepb.GameStatsModuleData.type)
  return _internal_type();
}
inline void GameStatsModuleData::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void GameStatsModuleData::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.GameStatsModuleData.type)
}

// .idlepb.GameStatsData stats = 2;
inline bool GameStatsModuleData::_internal_has_stats() const {
  return this != internal_default_instance() && _impl_.stats_ != nullptr;
}
inline bool GameStatsModuleData::has_stats() const {
  return _internal_has_stats();
}
inline void GameStatsModuleData::clear_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
}
inline const ::idlepb::GameStatsData& GameStatsModuleData::_internal_stats() const {
  const ::idlepb::GameStatsData* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::GameStatsData&>(
      ::idlepb::_GameStatsData_default_instance_);
}
inline const ::idlepb::GameStatsData& GameStatsModuleData::stats() const {
  // @@protoc_insertion_point(field_get:idlepb.GameStatsModuleData.stats)
  return _internal_stats();
}
inline void GameStatsModuleData::unsafe_arena_set_allocated_stats(
    ::idlepb::GameStatsData* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.GameStatsModuleData.stats)
}
inline ::idlepb::GameStatsData* GameStatsModuleData::release_stats() {
  
  ::idlepb::GameStatsData* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::GameStatsData* GameStatsModuleData::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:idlepb.GameStatsModuleData.stats)
  
  ::idlepb::GameStatsData* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::idlepb::GameStatsData* GameStatsModuleData::_internal_mutable_stats() {
  
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::GameStatsData>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::idlepb::GameStatsData* GameStatsModuleData::mutable_stats() {
  ::idlepb::GameStatsData* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:idlepb.GameStatsModuleData.stats)
  return _msg;
}
inline void GameStatsModuleData::set_allocated_stats(::idlepb::GameStatsData* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:idlepb.GameStatsModuleData.stats)
}

// -------------------------------------------------------------------

// GameStatsAllModuleData

// repeated .idlepb.GameStatsModuleData all_module = 1;
inline int GameStatsAllModuleData::_internal_all_module_size() const {
  return _impl_.all_module_.size();
}
inline int GameStatsAllModuleData::all_module_size() const {
  return _internal_all_module_size();
}
inline void GameStatsAllModuleData::clear_all_module() {
  _impl_.all_module_.Clear();
}
inline ::idlepb::GameStatsModuleData* GameStatsAllModuleData::mutable_all_module(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.GameStatsAllModuleData.all_module)
  return _impl_.all_module_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GameStatsModuleData >*
GameStatsAllModuleData::mutable_all_module() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.GameStatsAllModuleData.all_module)
  return &_impl_.all_module_;
}
inline const ::idlepb::GameStatsModuleData& GameStatsAllModuleData::_internal_all_module(int index) const {
  return _impl_.all_module_.Get(index);
}
inline const ::idlepb::GameStatsModuleData& GameStatsAllModuleData::all_module(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.GameStatsAllModuleData.all_module)
  return _internal_all_module(index);
}
inline ::idlepb::GameStatsModuleData* GameStatsAllModuleData::_internal_add_all_module() {
  return _impl_.all_module_.Add();
}
inline ::idlepb::GameStatsModuleData* GameStatsAllModuleData::add_all_module() {
  ::idlepb::GameStatsModuleData* _add = _internal_add_all_module();
  // @@protoc_insertion_point(field_add:idlepb.GameStatsAllModuleData.all_module)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GameStatsModuleData >&
GameStatsAllModuleData::all_module() const {
  // @@protoc_insertion_point(field_list:idlepb.GameStatsAllModuleData.all_module)
  return _impl_.all_module_;
}

// -------------------------------------------------------------------

// RoleAttribute

// float health = 1;
inline void RoleAttribute::clear_health() {
  _impl_.health_ = 0;
}
inline float RoleAttribute::_internal_health() const {
  return _impl_.health_;
}
inline float RoleAttribute::health() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.health)
  return _internal_health();
}
inline void RoleAttribute::_internal_set_health(float value) {
  
  _impl_.health_ = value;
}
inline void RoleAttribute::set_health(float value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.health)
}

// float max_health = 2;
inline void RoleAttribute::clear_max_health() {
  _impl_.max_health_ = 0;
}
inline float RoleAttribute::_internal_max_health() const {
  return _impl_.max_health_;
}
inline float RoleAttribute::max_health() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.max_health)
  return _internal_max_health();
}
inline void RoleAttribute::_internal_set_max_health(float value) {
  
  _impl_.max_health_ = value;
}
inline void RoleAttribute::set_max_health(float value) {
  _internal_set_max_health(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.max_health)
}

// float mana = 3;
inline void RoleAttribute::clear_mana() {
  _impl_.mana_ = 0;
}
inline float RoleAttribute::_internal_mana() const {
  return _impl_.mana_;
}
inline float RoleAttribute::mana() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.mana)
  return _internal_mana();
}
inline void RoleAttribute::_internal_set_mana(float value) {
  
  _impl_.mana_ = value;
}
inline void RoleAttribute::set_mana(float value) {
  _internal_set_mana(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.mana)
}

// float max_mana = 4;
inline void RoleAttribute::clear_max_mana() {
  _impl_.max_mana_ = 0;
}
inline float RoleAttribute::_internal_max_mana() const {
  return _impl_.max_mana_;
}
inline float RoleAttribute::max_mana() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.max_mana)
  return _internal_max_mana();
}
inline void RoleAttribute::_internal_set_max_mana(float value) {
  
  _impl_.max_mana_ = value;
}
inline void RoleAttribute::set_max_mana(float value) {
  _internal_set_max_mana(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.max_mana)
}

// float mind = 5;
inline void RoleAttribute::clear_mind() {
  _impl_.mind_ = 0;
}
inline float RoleAttribute::_internal_mind() const {
  return _impl_.mind_;
}
inline float RoleAttribute::mind() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.mind)
  return _internal_mind();
}
inline void RoleAttribute::_internal_set_mind(float value) {
  
  _impl_.mind_ = value;
}
inline void RoleAttribute::set_mind(float value) {
  _internal_set_mind(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.mind)
}

// float strength = 6;
inline void RoleAttribute::clear_strength() {
  _impl_.strength_ = 0;
}
inline float RoleAttribute::_internal_strength() const {
  return _impl_.strength_;
}
inline float RoleAttribute::strength() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.strength)
  return _internal_strength();
}
inline void RoleAttribute::_internal_set_strength(float value) {
  
  _impl_.strength_ = value;
}
inline void RoleAttribute::set_strength(float value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.strength)
}

// float intellect = 7;
inline void RoleAttribute::clear_intellect() {
  _impl_.intellect_ = 0;
}
inline float RoleAttribute::_internal_intellect() const {
  return _impl_.intellect_;
}
inline float RoleAttribute::intellect() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.intellect)
  return _internal_intellect();
}
inline void RoleAttribute::_internal_set_intellect(float value) {
  
  _impl_.intellect_ = value;
}
inline void RoleAttribute::set_intellect(float value) {
  _internal_set_intellect(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.intellect)
}

// float agility = 8;
inline void RoleAttribute::clear_agility() {
  _impl_.agility_ = 0;
}
inline float RoleAttribute::_internal_agility() const {
  return _impl_.agility_;
}
inline float RoleAttribute::agility() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.agility)
  return _internal_agility();
}
inline void RoleAttribute::_internal_set_agility(float value) {
  
  _impl_.agility_ = value;
}
inline void RoleAttribute::set_agility(float value) {
  _internal_set_agility(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.agility)
}

// float move_speed = 9;
inline void RoleAttribute::clear_move_speed() {
  _impl_.move_speed_ = 0;
}
inline float RoleAttribute::_internal_move_speed() const {
  return _impl_.move_speed_;
}
inline float RoleAttribute::move_speed() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.move_speed)
  return _internal_move_speed();
}
inline void RoleAttribute::_internal_set_move_speed(float value) {
  
  _impl_.move_speed_ = value;
}
inline void RoleAttribute::set_move_speed(float value) {
  _internal_set_move_speed(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.move_speed)
}

// float phy_att = 10;
inline void RoleAttribute::clear_phy_att() {
  _impl_.phy_att_ = 0;
}
inline float RoleAttribute::_internal_phy_att() const {
  return _impl_.phy_att_;
}
inline float RoleAttribute::phy_att() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.phy_att)
  return _internal_phy_att();
}
inline void RoleAttribute::_internal_set_phy_att(float value) {
  
  _impl_.phy_att_ = value;
}
inline void RoleAttribute::set_phy_att(float value) {
  _internal_set_phy_att(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.phy_att)
}

// float phy_def = 11;
inline void RoleAttribute::clear_phy_def() {
  _impl_.phy_def_ = 0;
}
inline float RoleAttribute::_internal_phy_def() const {
  return _impl_.phy_def_;
}
inline float RoleAttribute::phy_def() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.phy_def)
  return _internal_phy_def();
}
inline void RoleAttribute::_internal_set_phy_def(float value) {
  
  _impl_.phy_def_ = value;
}
inline void RoleAttribute::set_phy_def(float value) {
  _internal_set_phy_def(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.phy_def)
}

// float mag_att = 12;
inline void RoleAttribute::clear_mag_att() {
  _impl_.mag_att_ = 0;
}
inline float RoleAttribute::_internal_mag_att() const {
  return _impl_.mag_att_;
}
inline float RoleAttribute::mag_att() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.mag_att)
  return _internal_mag_att();
}
inline void RoleAttribute::_internal_set_mag_att(float value) {
  
  _impl_.mag_att_ = value;
}
inline void RoleAttribute::set_mag_att(float value) {
  _internal_set_mag_att(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.mag_att)
}

// float mag_def = 13;
inline void RoleAttribute::clear_mag_def() {
  _impl_.mag_def_ = 0;
}
inline float RoleAttribute::_internal_mag_def() const {
  return _impl_.mag_def_;
}
inline float RoleAttribute::mag_def() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.mag_def)
  return _internal_mag_def();
}
inline void RoleAttribute::_internal_set_mag_def(float value) {
  
  _impl_.mag_def_ = value;
}
inline void RoleAttribute::set_mag_def(float value) {
  _internal_set_mag_def(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.mag_def)
}

// float phy_dodge = 14;
inline void RoleAttribute::clear_phy_dodge() {
  _impl_.phy_dodge_ = 0;
}
inline float RoleAttribute::_internal_phy_dodge() const {
  return _impl_.phy_dodge_;
}
inline float RoleAttribute::phy_dodge() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.phy_dodge)
  return _internal_phy_dodge();
}
inline void RoleAttribute::_internal_set_phy_dodge(float value) {
  
  _impl_.phy_dodge_ = value;
}
inline void RoleAttribute::set_phy_dodge(float value) {
  _internal_set_phy_dodge(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.phy_dodge)
}

// float mag_dodge = 15;
inline void RoleAttribute::clear_mag_dodge() {
  _impl_.mag_dodge_ = 0;
}
inline float RoleAttribute::_internal_mag_dodge() const {
  return _impl_.mag_dodge_;
}
inline float RoleAttribute::mag_dodge() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.mag_dodge)
  return _internal_mag_dodge();
}
inline void RoleAttribute::_internal_set_mag_dodge(float value) {
  
  _impl_.mag_dodge_ = value;
}
inline void RoleAttribute::set_mag_dodge(float value) {
  _internal_set_mag_dodge(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.mag_dodge)
}

// float phy_hit = 16;
inline void RoleAttribute::clear_phy_hit() {
  _impl_.phy_hit_ = 0;
}
inline float RoleAttribute::_internal_phy_hit() const {
  return _impl_.phy_hit_;
}
inline float RoleAttribute::phy_hit() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.phy_hit)
  return _internal_phy_hit();
}
inline void RoleAttribute::_internal_set_phy_hit(float value) {
  
  _impl_.phy_hit_ = value;
}
inline void RoleAttribute::set_phy_hit(float value) {
  _internal_set_phy_hit(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.phy_hit)
}

// float mag_hit = 17;
inline void RoleAttribute::clear_mag_hit() {
  _impl_.mag_hit_ = 0;
}
inline float RoleAttribute::_internal_mag_hit() const {
  return _impl_.mag_hit_;
}
inline float RoleAttribute::mag_hit() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.mag_hit)
  return _internal_mag_hit();
}
inline void RoleAttribute::_internal_set_mag_hit(float value) {
  
  _impl_.mag_hit_ = value;
}
inline void RoleAttribute::set_mag_hit(float value) {
  _internal_set_mag_hit(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.mag_hit)
}

// float crit = 18;
inline void RoleAttribute::clear_crit() {
  _impl_.crit_ = 0;
}
inline float RoleAttribute::_internal_crit() const {
  return _impl_.crit_;
}
inline float RoleAttribute::crit() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.crit)
  return _internal_crit();
}
inline void RoleAttribute::_internal_set_crit(float value) {
  
  _impl_.crit_ = value;
}
inline void RoleAttribute::set_crit(float value) {
  _internal_set_crit(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.crit)
}

// float crit_def = 19;
inline void RoleAttribute::clear_crit_def() {
  _impl_.crit_def_ = 0;
}
inline float RoleAttribute::_internal_crit_def() const {
  return _impl_.crit_def_;
}
inline float RoleAttribute::crit_def() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.crit_def)
  return _internal_crit_def();
}
inline void RoleAttribute::_internal_set_crit_def(float value) {
  
  _impl_.crit_def_ = value;
}
inline void RoleAttribute::set_crit_def(float value) {
  _internal_set_crit_def(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.crit_def)
}

// float hp_recover_percent = 20;
inline void RoleAttribute::clear_hp_recover_percent() {
  _impl_.hp_recover_percent_ = 0;
}
inline float RoleAttribute::_internal_hp_recover_percent() const {
  return _impl_.hp_recover_percent_;
}
inline float RoleAttribute::hp_recover_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.hp_recover_percent)
  return _internal_hp_recover_percent();
}
inline void RoleAttribute::_internal_set_hp_recover_percent(float value) {
  
  _impl_.hp_recover_percent_ = value;
}
inline void RoleAttribute::set_hp_recover_percent(float value) {
  _internal_set_hp_recover_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.hp_recover_percent)
}

// float mp_recover_percent = 21;
inline void RoleAttribute::clear_mp_recover_percent() {
  _impl_.mp_recover_percent_ = 0;
}
inline float RoleAttribute::_internal_mp_recover_percent() const {
  return _impl_.mp_recover_percent_;
}
inline float RoleAttribute::mp_recover_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.mp_recover_percent)
  return _internal_mp_recover_percent();
}
inline void RoleAttribute::_internal_set_mp_recover_percent(float value) {
  
  _impl_.mp_recover_percent_ = value;
}
inline void RoleAttribute::set_mp_recover_percent(float value) {
  _internal_set_mp_recover_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.mp_recover_percent)
}

// float crit_coef = 22;
inline void RoleAttribute::clear_crit_coef() {
  _impl_.crit_coef_ = 0;
}
inline float RoleAttribute::_internal_crit_coef() const {
  return _impl_.crit_coef_;
}
inline float RoleAttribute::crit_coef() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.crit_coef)
  return _internal_crit_coef();
}
inline void RoleAttribute::_internal_set_crit_coef(float value) {
  
  _impl_.crit_coef_ = value;
}
inline void RoleAttribute::set_crit_coef(float value) {
  _internal_set_crit_coef(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.crit_coef)
}

// float crit_block = 23;
inline void RoleAttribute::clear_crit_block() {
  _impl_.crit_block_ = 0;
}
inline float RoleAttribute::_internal_crit_block() const {
  return _impl_.crit_block_;
}
inline float RoleAttribute::crit_block() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.crit_block)
  return _internal_crit_block();
}
inline void RoleAttribute::_internal_set_crit_block(float value) {
  
  _impl_.crit_block_ = value;
}
inline void RoleAttribute::set_crit_block(float value) {
  _internal_set_crit_block(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.crit_block)
}

// float crit_additional_damage = 24;
inline void RoleAttribute::clear_crit_additional_damage() {
  _impl_.crit_additional_damage_ = 0;
}
inline float RoleAttribute::_internal_crit_additional_damage() const {
  return _impl_.crit_additional_damage_;
}
inline float RoleAttribute::crit_additional_damage() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.crit_additional_damage)
  return _internal_crit_additional_damage();
}
inline void RoleAttribute::_internal_set_crit_additional_damage(float value) {
  
  _impl_.crit_additional_damage_ = value;
}
inline void RoleAttribute::set_crit_additional_damage(float value) {
  _internal_set_crit_additional_damage(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.crit_additional_damage)
}

// float arena_money_add_percent = 25;
inline void RoleAttribute::clear_arena_money_add_percent() {
  _impl_.arena_money_add_percent_ = 0;
}
inline float RoleAttribute::_internal_arena_money_add_percent() const {
  return _impl_.arena_money_add_percent_;
}
inline float RoleAttribute::arena_money_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.arena_money_add_percent)
  return _internal_arena_money_add_percent();
}
inline void RoleAttribute::_internal_set_arena_money_add_percent(float value) {
  
  _impl_.arena_money_add_percent_ = value;
}
inline void RoleAttribute::set_arena_money_add_percent(float value) {
  _internal_set_arena_money_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.arena_money_add_percent)
}

// float mag_break = 26;
inline void RoleAttribute::clear_mag_break() {
  _impl_.mag_break_ = 0;
}
inline float RoleAttribute::_internal_mag_break() const {
  return _impl_.mag_break_;
}
inline float RoleAttribute::mag_break() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.mag_break)
  return _internal_mag_break();
}
inline void RoleAttribute::_internal_set_mag_break(float value) {
  
  _impl_.mag_break_ = value;
}
inline void RoleAttribute::set_mag_break(float value) {
  _internal_set_mag_break(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.mag_break)
}

// float phy_break = 27;
inline void RoleAttribute::clear_phy_break() {
  _impl_.phy_break_ = 0;
}
inline float RoleAttribute::_internal_phy_break() const {
  return _impl_.phy_break_;
}
inline float RoleAttribute::phy_break() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.phy_break)
  return _internal_phy_break();
}
inline void RoleAttribute::_internal_set_phy_break(float value) {
  
  _impl_.phy_break_ = value;
}
inline void RoleAttribute::set_phy_break(float value) {
  _internal_set_phy_break(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.phy_break)
}

// float mag_block = 28;
inline void RoleAttribute::clear_mag_block() {
  _impl_.mag_block_ = 0;
}
inline float RoleAttribute::_internal_mag_block() const {
  return _impl_.mag_block_;
}
inline float RoleAttribute::mag_block() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.mag_block)
  return _internal_mag_block();
}
inline void RoleAttribute::_internal_set_mag_block(float value) {
  
  _impl_.mag_block_ = value;
}
inline void RoleAttribute::set_mag_block(float value) {
  _internal_set_mag_block(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.mag_block)
}

// float phy_block = 29;
inline void RoleAttribute::clear_phy_block() {
  _impl_.phy_block_ = 0;
}
inline float RoleAttribute::_internal_phy_block() const {
  return _impl_.phy_block_;
}
inline float RoleAttribute::phy_block() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.phy_block)
  return _internal_phy_block();
}
inline void RoleAttribute::_internal_set_phy_block(float value) {
  
  _impl_.phy_block_ = value;
}
inline void RoleAttribute::set_phy_block(float value) {
  _internal_set_phy_block(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.phy_block)
}

// float fen_qi = 30;
inline void RoleAttribute::clear_fen_qi() {
  _impl_.fen_qi_ = 0;
}
inline float RoleAttribute::_internal_fen_qi() const {
  return _impl_.fen_qi_;
}
inline float RoleAttribute::fen_qi() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.fen_qi)
  return _internal_fen_qi();
}
inline void RoleAttribute::_internal_set_fen_qi(float value) {
  
  _impl_.fen_qi_ = value;
}
inline void RoleAttribute::set_fen_qi(float value) {
  _internal_set_fen_qi(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.fen_qi)
}

// float tuna_num = 200;
inline void RoleAttribute::clear_tuna_num() {
  _impl_.tuna_num_ = 0;
}
inline float RoleAttribute::_internal_tuna_num() const {
  return _impl_.tuna_num_;
}
inline float RoleAttribute::tuna_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.tuna_num)
  return _internal_tuna_num();
}
inline void RoleAttribute::_internal_set_tuna_num(float value) {
  
  _impl_.tuna_num_ = value;
}
inline void RoleAttribute::set_tuna_num(float value) {
  _internal_set_tuna_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.tuna_num)
}

// float tuna_add_percent = 201;
inline void RoleAttribute::clear_tuna_add_percent() {
  _impl_.tuna_add_percent_ = 0;
}
inline float RoleAttribute::_internal_tuna_add_percent() const {
  return _impl_.tuna_add_percent_;
}
inline float RoleAttribute::tuna_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.tuna_add_percent)
  return _internal_tuna_add_percent();
}
inline void RoleAttribute::_internal_set_tuna_add_percent(float value) {
  
  _impl_.tuna_add_percent_ = value;
}
inline void RoleAttribute::set_tuna_add_percent(float value) {
  _internal_set_tuna_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.tuna_add_percent)
}

// float medicine_num = 202;
inline void RoleAttribute::clear_medicine_num() {
  _impl_.medicine_num_ = 0;
}
inline float RoleAttribute::_internal_medicine_num() const {
  return _impl_.medicine_num_;
}
inline float RoleAttribute::medicine_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.medicine_num)
  return _internal_medicine_num();
}
inline void RoleAttribute::_internal_set_medicine_num(float value) {
  
  _impl_.medicine_num_ = value;
}
inline void RoleAttribute::set_medicine_num(float value) {
  _internal_set_medicine_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.medicine_num)
}

// float medicine_add_percent = 203;
inline void RoleAttribute::clear_medicine_add_percent() {
  _impl_.medicine_add_percent_ = 0;
}
inline float RoleAttribute::_internal_medicine_add_percent() const {
  return _impl_.medicine_add_percent_;
}
inline float RoleAttribute::medicine_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.medicine_add_percent)
  return _internal_medicine_add_percent();
}
inline void RoleAttribute::_internal_set_medicine_add_percent(float value) {
  
  _impl_.medicine_add_percent_ = value;
}
inline void RoleAttribute::set_medicine_add_percent(float value) {
  _internal_set_medicine_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.medicine_add_percent)
}

// float baseqi_add_percent = 204;
inline void RoleAttribute::clear_baseqi_add_percent() {
  _impl_.baseqi_add_percent_ = 0;
}
inline float RoleAttribute::_internal_baseqi_add_percent() const {
  return _impl_.baseqi_add_percent_;
}
inline float RoleAttribute::baseqi_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.baseqi_add_percent)
  return _internal_baseqi_add_percent();
}
inline void RoleAttribute::_internal_set_baseqi_add_percent(float value) {
  
  _impl_.baseqi_add_percent_ = value;
}
inline void RoleAttribute::set_baseqi_add_percent(float value) {
  _internal_set_baseqi_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.baseqi_add_percent)
}

// float shen_tong_damage_to_player_add_percent = 205;
inline void RoleAttribute::clear_shen_tong_damage_to_player_add_percent() {
  _impl_.shen_tong_damage_to_player_add_percent_ = 0;
}
inline float RoleAttribute::_internal_shen_tong_damage_to_player_add_percent() const {
  return _impl_.shen_tong_damage_to_player_add_percent_;
}
inline float RoleAttribute::shen_tong_damage_to_player_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.shen_tong_damage_to_player_add_percent)
  return _internal_shen_tong_damage_to_player_add_percent();
}
inline void RoleAttribute::_internal_set_shen_tong_damage_to_player_add_percent(float value) {
  
  _impl_.shen_tong_damage_to_player_add_percent_ = value;
}
inline void RoleAttribute::set_shen_tong_damage_to_player_add_percent(float value) {
  _internal_set_shen_tong_damage_to_player_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.shen_tong_damage_to_player_add_percent)
}

// float shen_tong_damage_to_player_reduce_percent = 206;
inline void RoleAttribute::clear_shen_tong_damage_to_player_reduce_percent() {
  _impl_.shen_tong_damage_to_player_reduce_percent_ = 0;
}
inline float RoleAttribute::_internal_shen_tong_damage_to_player_reduce_percent() const {
  return _impl_.shen_tong_damage_to_player_reduce_percent_;
}
inline float RoleAttribute::shen_tong_damage_to_player_reduce_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.shen_tong_damage_to_player_reduce_percent)
  return _internal_shen_tong_damage_to_player_reduce_percent();
}
inline void RoleAttribute::_internal_set_shen_tong_damage_to_player_reduce_percent(float value) {
  
  _impl_.shen_tong_damage_to_player_reduce_percent_ = value;
}
inline void RoleAttribute::set_shen_tong_damage_to_player_reduce_percent(float value) {
  _internal_set_shen_tong_damage_to_player_reduce_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.shen_tong_damage_to_player_reduce_percent)
}

// float fa_bao_damage_to_player_add_percent = 207;
inline void RoleAttribute::clear_fa_bao_damage_to_player_add_percent() {
  _impl_.fa_bao_damage_to_player_add_percent_ = 0;
}
inline float RoleAttribute::_internal_fa_bao_damage_to_player_add_percent() const {
  return _impl_.fa_bao_damage_to_player_add_percent_;
}
inline float RoleAttribute::fa_bao_damage_to_player_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.fa_bao_damage_to_player_add_percent)
  return _internal_fa_bao_damage_to_player_add_percent();
}
inline void RoleAttribute::_internal_set_fa_bao_damage_to_player_add_percent(float value) {
  
  _impl_.fa_bao_damage_to_player_add_percent_ = value;
}
inline void RoleAttribute::set_fa_bao_damage_to_player_add_percent(float value) {
  _internal_set_fa_bao_damage_to_player_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.fa_bao_damage_to_player_add_percent)
}

// float fa_bao_damage_to_player_reduce_percent = 208;
inline void RoleAttribute::clear_fa_bao_damage_to_player_reduce_percent() {
  _impl_.fa_bao_damage_to_player_reduce_percent_ = 0;
}
inline float RoleAttribute::_internal_fa_bao_damage_to_player_reduce_percent() const {
  return _impl_.fa_bao_damage_to_player_reduce_percent_;
}
inline float RoleAttribute::fa_bao_damage_to_player_reduce_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.fa_bao_damage_to_player_reduce_percent)
  return _internal_fa_bao_damage_to_player_reduce_percent();
}
inline void RoleAttribute::_internal_set_fa_bao_damage_to_player_reduce_percent(float value) {
  
  _impl_.fa_bao_damage_to_player_reduce_percent_ = value;
}
inline void RoleAttribute::set_fa_bao_damage_to_player_reduce_percent(float value) {
  _internal_set_fa_bao_damage_to_player_reduce_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.fa_bao_damage_to_player_reduce_percent)
}

// float phy_damage_add_percent = 209;
inline void RoleAttribute::clear_phy_damage_add_percent() {
  _impl_.phy_damage_add_percent_ = 0;
}
inline float RoleAttribute::_internal_phy_damage_add_percent() const {
  return _impl_.phy_damage_add_percent_;
}
inline float RoleAttribute::phy_damage_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.phy_damage_add_percent)
  return _internal_phy_damage_add_percent();
}
inline void RoleAttribute::_internal_set_phy_damage_add_percent(float value) {
  
  _impl_.phy_damage_add_percent_ = value;
}
inline void RoleAttribute::set_phy_damage_add_percent(float value) {
  _internal_set_phy_damage_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.phy_damage_add_percent)
}

// float mag_damage_add_percent = 210;
inline void RoleAttribute::clear_mag_damage_add_percent() {
  _impl_.mag_damage_add_percent_ = 0;
}
inline float RoleAttribute::_internal_mag_damage_add_percent() const {
  return _impl_.mag_damage_add_percent_;
}
inline float RoleAttribute::mag_damage_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.mag_damage_add_percent)
  return _internal_mag_damage_add_percent();
}
inline void RoleAttribute::_internal_set_mag_damage_add_percent(float value) {
  
  _impl_.mag_damage_add_percent_ = value;
}
inline void RoleAttribute::set_mag_damage_add_percent(float value) {
  _internal_set_mag_damage_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.mag_damage_add_percent)
}

// float phy_damage_reduce_percent = 211;
inline void RoleAttribute::clear_phy_damage_reduce_percent() {
  _impl_.phy_damage_reduce_percent_ = 0;
}
inline float RoleAttribute::_internal_phy_damage_reduce_percent() const {
  return _impl_.phy_damage_reduce_percent_;
}
inline float RoleAttribute::phy_damage_reduce_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.phy_damage_reduce_percent)
  return _internal_phy_damage_reduce_percent();
}
inline void RoleAttribute::_internal_set_phy_damage_reduce_percent(float value) {
  
  _impl_.phy_damage_reduce_percent_ = value;
}
inline void RoleAttribute::set_phy_damage_reduce_percent(float value) {
  _internal_set_phy_damage_reduce_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.phy_damage_reduce_percent)
}

// float mag_damage_reduce_percent = 212;
inline void RoleAttribute::clear_mag_damage_reduce_percent() {
  _impl_.mag_damage_reduce_percent_ = 0;
}
inline float RoleAttribute::_internal_mag_damage_reduce_percent() const {
  return _impl_.mag_damage_reduce_percent_;
}
inline float RoleAttribute::mag_damage_reduce_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.mag_damage_reduce_percent)
  return _internal_mag_damage_reduce_percent();
}
inline void RoleAttribute::_internal_set_mag_damage_reduce_percent(float value) {
  
  _impl_.mag_damage_reduce_percent_ = value;
}
inline void RoleAttribute::set_mag_damage_reduce_percent(float value) {
  _internal_set_mag_damage_reduce_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.mag_damage_reduce_percent)
}

// float attack_monster_damage_add_percent = 213;
inline void RoleAttribute::clear_attack_monster_damage_add_percent() {
  _impl_.attack_monster_damage_add_percent_ = 0;
}
inline float RoleAttribute::_internal_attack_monster_damage_add_percent() const {
  return _impl_.attack_monster_damage_add_percent_;
}
inline float RoleAttribute::attack_monster_damage_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.attack_monster_damage_add_percent)
  return _internal_attack_monster_damage_add_percent();
}
inline void RoleAttribute::_internal_set_attack_monster_damage_add_percent(float value) {
  
  _impl_.attack_monster_damage_add_percent_ = value;
}
inline void RoleAttribute::set_attack_monster_damage_add_percent(float value) {
  _internal_set_attack_monster_damage_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.attack_monster_damage_add_percent)
}

// float take_monster_damage_reduce_percent = 214;
inline void RoleAttribute::clear_take_monster_damage_reduce_percent() {
  _impl_.take_monster_damage_reduce_percent_ = 0;
}
inline float RoleAttribute::_internal_take_monster_damage_reduce_percent() const {
  return _impl_.take_monster_damage_reduce_percent_;
}
inline float RoleAttribute::take_monster_damage_reduce_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.take_monster_damage_reduce_percent)
  return _internal_take_monster_damage_reduce_percent();
}
inline void RoleAttribute::_internal_set_take_monster_damage_reduce_percent(float value) {
  
  _impl_.take_monster_damage_reduce_percent_ = value;
}
inline void RoleAttribute::set_take_monster_damage_reduce_percent(float value) {
  _internal_set_take_monster_damage_reduce_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.take_monster_damage_reduce_percent)
}

// float base_hp_add_percent = 215;
inline void RoleAttribute::clear_base_hp_add_percent() {
  _impl_.base_hp_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_hp_add_percent() const {
  return _impl_.base_hp_add_percent_;
}
inline float RoleAttribute::base_hp_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_hp_add_percent)
  return _internal_base_hp_add_percent();
}
inline void RoleAttribute::_internal_set_base_hp_add_percent(float value) {
  
  _impl_.base_hp_add_percent_ = value;
}
inline void RoleAttribute::set_base_hp_add_percent(float value) {
  _internal_set_base_hp_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_hp_add_percent)
}

// float base_mp_add_percent = 216;
inline void RoleAttribute::clear_base_mp_add_percent() {
  _impl_.base_mp_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_mp_add_percent() const {
  return _impl_.base_mp_add_percent_;
}
inline float RoleAttribute::base_mp_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_mp_add_percent)
  return _internal_base_mp_add_percent();
}
inline void RoleAttribute::_internal_set_base_mp_add_percent(float value) {
  
  _impl_.base_mp_add_percent_ = value;
}
inline void RoleAttribute::set_base_mp_add_percent(float value) {
  _internal_set_base_mp_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_mp_add_percent)
}

// float base_phy_att_add_percent = 217;
inline void RoleAttribute::clear_base_phy_att_add_percent() {
  _impl_.base_phy_att_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_phy_att_add_percent() const {
  return _impl_.base_phy_att_add_percent_;
}
inline float RoleAttribute::base_phy_att_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_phy_att_add_percent)
  return _internal_base_phy_att_add_percent();
}
inline void RoleAttribute::_internal_set_base_phy_att_add_percent(float value) {
  
  _impl_.base_phy_att_add_percent_ = value;
}
inline void RoleAttribute::set_base_phy_att_add_percent(float value) {
  _internal_set_base_phy_att_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_phy_att_add_percent)
}

// float base_mag_att_add_percent = 218;
inline void RoleAttribute::clear_base_mag_att_add_percent() {
  _impl_.base_mag_att_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_mag_att_add_percent() const {
  return _impl_.base_mag_att_add_percent_;
}
inline float RoleAttribute::base_mag_att_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_mag_att_add_percent)
  return _internal_base_mag_att_add_percent();
}
inline void RoleAttribute::_internal_set_base_mag_att_add_percent(float value) {
  
  _impl_.base_mag_att_add_percent_ = value;
}
inline void RoleAttribute::set_base_mag_att_add_percent(float value) {
  _internal_set_base_mag_att_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_mag_att_add_percent)
}

// float base_phy_def_add_percent = 219;
inline void RoleAttribute::clear_base_phy_def_add_percent() {
  _impl_.base_phy_def_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_phy_def_add_percent() const {
  return _impl_.base_phy_def_add_percent_;
}
inline float RoleAttribute::base_phy_def_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_phy_def_add_percent)
  return _internal_base_phy_def_add_percent();
}
inline void RoleAttribute::_internal_set_base_phy_def_add_percent(float value) {
  
  _impl_.base_phy_def_add_percent_ = value;
}
inline void RoleAttribute::set_base_phy_def_add_percent(float value) {
  _internal_set_base_phy_def_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_phy_def_add_percent)
}

// float base_mag_def_add_percent = 220;
inline void RoleAttribute::clear_base_mag_def_add_percent() {
  _impl_.base_mag_def_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_mag_def_add_percent() const {
  return _impl_.base_mag_def_add_percent_;
}
inline float RoleAttribute::base_mag_def_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_mag_def_add_percent)
  return _internal_base_mag_def_add_percent();
}
inline void RoleAttribute::_internal_set_base_mag_def_add_percent(float value) {
  
  _impl_.base_mag_def_add_percent_ = value;
}
inline void RoleAttribute::set_base_mag_def_add_percent(float value) {
  _internal_set_base_mag_def_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_mag_def_add_percent)
}

// float base_phy_hit_add_percent = 221;
inline void RoleAttribute::clear_base_phy_hit_add_percent() {
  _impl_.base_phy_hit_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_phy_hit_add_percent() const {
  return _impl_.base_phy_hit_add_percent_;
}
inline float RoleAttribute::base_phy_hit_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_phy_hit_add_percent)
  return _internal_base_phy_hit_add_percent();
}
inline void RoleAttribute::_internal_set_base_phy_hit_add_percent(float value) {
  
  _impl_.base_phy_hit_add_percent_ = value;
}
inline void RoleAttribute::set_base_phy_hit_add_percent(float value) {
  _internal_set_base_phy_hit_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_phy_hit_add_percent)
}

// float base_mag_hit_add_percent = 222;
inline void RoleAttribute::clear_base_mag_hit_add_percent() {
  _impl_.base_mag_hit_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_mag_hit_add_percent() const {
  return _impl_.base_mag_hit_add_percent_;
}
inline float RoleAttribute::base_mag_hit_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_mag_hit_add_percent)
  return _internal_base_mag_hit_add_percent();
}
inline void RoleAttribute::_internal_set_base_mag_hit_add_percent(float value) {
  
  _impl_.base_mag_hit_add_percent_ = value;
}
inline void RoleAttribute::set_base_mag_hit_add_percent(float value) {
  _internal_set_base_mag_hit_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_mag_hit_add_percent)
}

// float base_phy_dodge_add_percent = 223;
inline void RoleAttribute::clear_base_phy_dodge_add_percent() {
  _impl_.base_phy_dodge_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_phy_dodge_add_percent() const {
  return _impl_.base_phy_dodge_add_percent_;
}
inline float RoleAttribute::base_phy_dodge_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_phy_dodge_add_percent)
  return _internal_base_phy_dodge_add_percent();
}
inline void RoleAttribute::_internal_set_base_phy_dodge_add_percent(float value) {
  
  _impl_.base_phy_dodge_add_percent_ = value;
}
inline void RoleAttribute::set_base_phy_dodge_add_percent(float value) {
  _internal_set_base_phy_dodge_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_phy_dodge_add_percent)
}

// float base_mag_dodge_add_percent = 224;
inline void RoleAttribute::clear_base_mag_dodge_add_percent() {
  _impl_.base_mag_dodge_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_mag_dodge_add_percent() const {
  return _impl_.base_mag_dodge_add_percent_;
}
inline float RoleAttribute::base_mag_dodge_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_mag_dodge_add_percent)
  return _internal_base_mag_dodge_add_percent();
}
inline void RoleAttribute::_internal_set_base_mag_dodge_add_percent(float value) {
  
  _impl_.base_mag_dodge_add_percent_ = value;
}
inline void RoleAttribute::set_base_mag_dodge_add_percent(float value) {
  _internal_set_base_mag_dodge_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_mag_dodge_add_percent)
}

// float base_crit_add_percent = 225;
inline void RoleAttribute::clear_base_crit_add_percent() {
  _impl_.base_crit_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_crit_add_percent() const {
  return _impl_.base_crit_add_percent_;
}
inline float RoleAttribute::base_crit_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_crit_add_percent)
  return _internal_base_crit_add_percent();
}
inline void RoleAttribute::_internal_set_base_crit_add_percent(float value) {
  
  _impl_.base_crit_add_percent_ = value;
}
inline void RoleAttribute::set_base_crit_add_percent(float value) {
  _internal_set_base_crit_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_crit_add_percent)
}

// float base_crit_def_add_percent = 226;
inline void RoleAttribute::clear_base_crit_def_add_percent() {
  _impl_.base_crit_def_add_percent_ = 0;
}
inline float RoleAttribute::_internal_base_crit_def_add_percent() const {
  return _impl_.base_crit_def_add_percent_;
}
inline float RoleAttribute::base_crit_def_add_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAttribute.base_crit_def_add_percent)
  return _internal_base_crit_def_add_percent();
}
inline void RoleAttribute::_internal_set_base_crit_def_add_percent(float value) {
  
  _impl_.base_crit_def_add_percent_ = value;
}
inline void RoleAttribute::set_base_crit_def_add_percent(float value) {
  _internal_set_base_crit_def_add_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAttribute.base_crit_def_add_percent)
}

// -------------------------------------------------------------------

// RankData

// int32 rank = 1;
inline void RankData::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t RankData::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t RankData::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.RankData.rank)
  return _internal_rank();
}
inline void RankData::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void RankData::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.RankData.rank)
}

// float exp = 2;
inline void RankData::clear_exp() {
  _impl_.exp_ = 0;
}
inline float RankData::_internal_exp() const {
  return _impl_.exp_;
}
inline float RankData::exp() const {
  // @@protoc_insertion_point(field_get:idlepb.RankData.exp)
  return _internal_exp();
}
inline void RankData::_internal_set_exp(float value) {
  
  _impl_.exp_ = value;
}
inline void RankData::set_exp(float value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.RankData.exp)
}

// int32 layer = 3;
inline void RankData::clear_layer() {
  _impl_.layer_ = 0;
}
inline int32_t RankData::_internal_layer() const {
  return _impl_.layer_;
}
inline int32_t RankData::layer() const {
  // @@protoc_insertion_point(field_get:idlepb.RankData.layer)
  return _internal_layer();
}
inline void RankData::_internal_set_layer(int32_t value) {
  
  _impl_.layer_ = value;
}
inline void RankData::set_layer(int32_t value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:idlepb.RankData.layer)
}

// int32 stage = 4;
inline void RankData::clear_stage() {
  _impl_.stage_ = 0;
}
inline int32_t RankData::_internal_stage() const {
  return _impl_.stage_;
}
inline int32_t RankData::stage() const {
  // @@protoc_insertion_point(field_get:idlepb.RankData.stage)
  return _internal_stage();
}
inline void RankData::_internal_set_stage(int32_t value) {
  
  _impl_.stage_ = value;
}
inline void RankData::set_stage(int32_t value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:idlepb.RankData.stage)
}

// int32 degree = 5;
inline void RankData::clear_degree() {
  _impl_.degree_ = 0;
}
inline int32_t RankData::_internal_degree() const {
  return _impl_.degree_;
}
inline int32_t RankData::degree() const {
  // @@protoc_insertion_point(field_get:idlepb.RankData.degree)
  return _internal_degree();
}
inline void RankData::_internal_set_degree(int32_t value) {
  
  _impl_.degree_ = value;
}
inline void RankData::set_degree(int32_t value) {
  _internal_set_degree(value);
  // @@protoc_insertion_point(field_set:idlepb.RankData.degree)
}

// .idlepb.BreakthroughType breakthrough_type = 6;
inline void RankData::clear_breakthrough_type() {
  _impl_.breakthrough_type_ = 0;
}
inline ::idlepb::BreakthroughType RankData::_internal_breakthrough_type() const {
  return static_cast< ::idlepb::BreakthroughType >(_impl_.breakthrough_type_);
}
inline ::idlepb::BreakthroughType RankData::breakthrough_type() const {
  // @@protoc_insertion_point(field_get:idlepb.RankData.breakthrough_type)
  return _internal_breakthrough_type();
}
inline void RankData::_internal_set_breakthrough_type(::idlepb::BreakthroughType value) {
  
  _impl_.breakthrough_type_ = value;
}
inline void RankData::set_breakthrough_type(::idlepb::BreakthroughType value) {
  _internal_set_breakthrough_type(value);
  // @@protoc_insertion_point(field_set:idlepb.RankData.breakthrough_type)
}

// int32 lose_add_probability = 7;
inline void RankData::clear_lose_add_probability() {
  _impl_.lose_add_probability_ = 0;
}
inline int32_t RankData::_internal_lose_add_probability() const {
  return _impl_.lose_add_probability_;
}
inline int32_t RankData::lose_add_probability() const {
  // @@protoc_insertion_point(field_get:idlepb.RankData.lose_add_probability)
  return _internal_lose_add_probability();
}
inline void RankData::_internal_set_lose_add_probability(int32_t value) {
  
  _impl_.lose_add_probability_ = value;
}
inline void RankData::set_lose_add_probability(int32_t value) {
  _internal_set_lose_add_probability(value);
  // @@protoc_insertion_point(field_set:idlepb.RankData.lose_add_probability)
}

// int64 lose_recover_timestamp = 8;
inline void RankData::clear_lose_recover_timestamp() {
  _impl_.lose_recover_timestamp_ = int64_t{0};
}
inline int64_t RankData::_internal_lose_recover_timestamp() const {
  return _impl_.lose_recover_timestamp_;
}
inline int64_t RankData::lose_recover_timestamp() const {
  // @@protoc_insertion_point(field_get:idlepb.RankData.lose_recover_timestamp)
  return _internal_lose_recover_timestamp();
}
inline void RankData::_internal_set_lose_recover_timestamp(int64_t value) {
  
  _impl_.lose_recover_timestamp_ = value;
}
inline void RankData::set_lose_recover_timestamp(int64_t value) {
  _internal_set_lose_recover_timestamp(value);
  // @@protoc_insertion_point(field_set:idlepb.RankData.lose_recover_timestamp)
}

// int64 stage_add_att = 9;
inline void RankData::clear_stage_add_att() {
  _impl_.stage_add_att_ = int64_t{0};
}
inline int64_t RankData::_internal_stage_add_att() const {
  return _impl_.stage_add_att_;
}
inline int64_t RankData::stage_add_att() const {
  // @@protoc_insertion_point(field_get:idlepb.RankData.stage_add_att)
  return _internal_stage_add_att();
}
inline void RankData::_internal_set_stage_add_att(int64_t value) {
  
  _impl_.stage_add_att_ = value;
}
inline void RankData::set_stage_add_att(int64_t value) {
  _internal_set_stage_add_att(value);
  // @@protoc_insertion_point(field_set:idlepb.RankData.stage_add_att)
}

// -------------------------------------------------------------------

// BreathingReward

// int32 index = 1;
inline void BreathingReward::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t BreathingReward::_internal_index() const {
  return _impl_.index_;
}
inline int32_t BreathingReward::index() const {
  // @@protoc_insertion_point(field_get:idlepb.BreathingReward.index)
  return _internal_index();
}
inline void BreathingReward::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void BreathingReward::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:idlepb.BreathingReward.index)
}

// repeated int32 item_id = 2;
inline int BreathingReward::_internal_item_id_size() const {
  return _impl_.item_id_.size();
}
inline int BreathingReward::item_id_size() const {
  return _internal_item_id_size();
}
inline void BreathingReward::clear_item_id() {
  _impl_.item_id_.Clear();
}
inline int32_t BreathingReward::_internal_item_id(int index) const {
  return _impl_.item_id_.Get(index);
}
inline int32_t BreathingReward::item_id(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.BreathingReward.item_id)
  return _internal_item_id(index);
}
inline void BreathingReward::set_item_id(int index, int32_t value) {
  _impl_.item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.BreathingReward.item_id)
}
inline void BreathingReward::_internal_add_item_id(int32_t value) {
  _impl_.item_id_.Add(value);
}
inline void BreathingReward::add_item_id(int32_t value) {
  _internal_add_item_id(value);
  // @@protoc_insertion_point(field_add:idlepb.BreathingReward.item_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BreathingReward::_internal_item_id() const {
  return _impl_.item_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BreathingReward::item_id() const {
  // @@protoc_insertion_point(field_list:idlepb.BreathingReward.item_id)
  return _internal_item_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BreathingReward::_internal_mutable_item_id() {
  return &_impl_.item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BreathingReward::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.BreathingReward.item_id)
  return _internal_mutable_item_id();
}

// repeated int32 num = 3;
inline int BreathingReward::_internal_num_size() const {
  return _impl_.num_.size();
}
inline int BreathingReward::num_size() const {
  return _internal_num_size();
}
inline void BreathingReward::clear_num() {
  _impl_.num_.Clear();
}
inline int32_t BreathingReward::_internal_num(int index) const {
  return _impl_.num_.Get(index);
}
inline int32_t BreathingReward::num(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.BreathingReward.num)
  return _internal_num(index);
}
inline void BreathingReward::set_num(int index, int32_t value) {
  _impl_.num_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.BreathingReward.num)
}
inline void BreathingReward::_internal_add_num(int32_t value) {
  _impl_.num_.Add(value);
}
inline void BreathingReward::add_num(int32_t value) {
  _internal_add_num(value);
  // @@protoc_insertion_point(field_add:idlepb.BreathingReward.num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BreathingReward::_internal_num() const {
  return _impl_.num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BreathingReward::num() const {
  // @@protoc_insertion_point(field_list:idlepb.BreathingReward.num)
  return _internal_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BreathingReward::_internal_mutable_num() {
  return &_impl_.num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BreathingReward::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.BreathingReward.num)
  return _internal_mutable_num();
}

// int32 dir = 4;
inline void BreathingReward::clear_dir() {
  _impl_.dir_ = 0;
}
inline int32_t BreathingReward::_internal_dir() const {
  return _impl_.dir_;
}
inline int32_t BreathingReward::dir() const {
  // @@protoc_insertion_point(field_get:idlepb.BreathingReward.dir)
  return _internal_dir();
}
inline void BreathingReward::_internal_set_dir(int32_t value) {
  
  _impl_.dir_ = value;
}
inline void BreathingReward::set_dir(int32_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:idlepb.BreathingReward.dir)
}

// bool received = 5;
inline void BreathingReward::clear_received() {
  _impl_.received_ = false;
}
inline bool BreathingReward::_internal_received() const {
  return _impl_.received_;
}
inline bool BreathingReward::received() const {
  // @@protoc_insertion_point(field_get:idlepb.BreathingReward.received)
  return _internal_received();
}
inline void BreathingReward::_internal_set_received(bool value) {
  
  _impl_.received_ = value;
}
inline void BreathingReward::set_received(bool value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:idlepb.BreathingReward.received)
}

// -------------------------------------------------------------------

// CommonCultivationData

// repeated .idlepb.BreathingReward breathing_rewards = 1;
inline int CommonCultivationData::_internal_breathing_rewards_size() const {
  return _impl_.breathing_rewards_.size();
}
inline int CommonCultivationData::breathing_rewards_size() const {
  return _internal_breathing_rewards_size();
}
inline void CommonCultivationData::clear_breathing_rewards() {
  _impl_.breathing_rewards_.Clear();
}
inline ::idlepb::BreathingReward* CommonCultivationData::mutable_breathing_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.CommonCultivationData.breathing_rewards)
  return _impl_.breathing_rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BreathingReward >*
CommonCultivationData::mutable_breathing_rewards() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.CommonCultivationData.breathing_rewards)
  return &_impl_.breathing_rewards_;
}
inline const ::idlepb::BreathingReward& CommonCultivationData::_internal_breathing_rewards(int index) const {
  return _impl_.breathing_rewards_.Get(index);
}
inline const ::idlepb::BreathingReward& CommonCultivationData::breathing_rewards(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.CommonCultivationData.breathing_rewards)
  return _internal_breathing_rewards(index);
}
inline ::idlepb::BreathingReward* CommonCultivationData::_internal_add_breathing_rewards() {
  return _impl_.breathing_rewards_.Add();
}
inline ::idlepb::BreathingReward* CommonCultivationData::add_breathing_rewards() {
  ::idlepb::BreathingReward* _add = _internal_add_breathing_rewards();
  // @@protoc_insertion_point(field_add:idlepb.CommonCultivationData.breathing_rewards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BreathingReward >&
CommonCultivationData::breathing_rewards() const {
  // @@protoc_insertion_point(field_list:idlepb.CommonCultivationData.breathing_rewards)
  return _impl_.breathing_rewards_;
}

// bool merge_breathing = 2;
inline void CommonCultivationData::clear_merge_breathing() {
  _impl_.merge_breathing_ = false;
}
inline bool CommonCultivationData::_internal_merge_breathing() const {
  return _impl_.merge_breathing_;
}
inline bool CommonCultivationData::merge_breathing() const {
  // @@protoc_insertion_point(field_get:idlepb.CommonCultivationData.merge_breathing)
  return _internal_merge_breathing();
}
inline void CommonCultivationData::_internal_set_merge_breathing(bool value) {
  
  _impl_.merge_breathing_ = value;
}
inline void CommonCultivationData::set_merge_breathing(bool value) {
  _internal_set_merge_breathing(value);
  // @@protoc_insertion_point(field_set:idlepb.CommonCultivationData.merge_breathing)
}

// -------------------------------------------------------------------

// CultivationData

// .idlepb.RankData rank_data = 1;
inline bool CultivationData::_internal_has_rank_data() const {
  return this != internal_default_instance() && _impl_.rank_data_ != nullptr;
}
inline bool CultivationData::has_rank_data() const {
  return _internal_has_rank_data();
}
inline void CultivationData::clear_rank_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.rank_data_ != nullptr) {
    delete _impl_.rank_data_;
  }
  _impl_.rank_data_ = nullptr;
}
inline const ::idlepb::RankData& CultivationData::_internal_rank_data() const {
  const ::idlepb::RankData* p = _impl_.rank_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RankData&>(
      ::idlepb::_RankData_default_instance_);
}
inline const ::idlepb::RankData& CultivationData::rank_data() const {
  // @@protoc_insertion_point(field_get:idlepb.CultivationData.rank_data)
  return _internal_rank_data();
}
inline void CultivationData::unsafe_arena_set_allocated_rank_data(
    ::idlepb::RankData* rank_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rank_data_);
  }
  _impl_.rank_data_ = rank_data;
  if (rank_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.CultivationData.rank_data)
}
inline ::idlepb::RankData* CultivationData::release_rank_data() {
  
  ::idlepb::RankData* temp = _impl_.rank_data_;
  _impl_.rank_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RankData* CultivationData::unsafe_arena_release_rank_data() {
  // @@protoc_insertion_point(field_release:idlepb.CultivationData.rank_data)
  
  ::idlepb::RankData* temp = _impl_.rank_data_;
  _impl_.rank_data_ = nullptr;
  return temp;
}
inline ::idlepb::RankData* CultivationData::_internal_mutable_rank_data() {
  
  if (_impl_.rank_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RankData>(GetArenaForAllocation());
    _impl_.rank_data_ = p;
  }
  return _impl_.rank_data_;
}
inline ::idlepb::RankData* CultivationData::mutable_rank_data() {
  ::idlepb::RankData* _msg = _internal_mutable_rank_data();
  // @@protoc_insertion_point(field_mutable:idlepb.CultivationData.rank_data)
  return _msg;
}
inline void CultivationData::set_allocated_rank_data(::idlepb::RankData* rank_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rank_data_;
  }
  if (rank_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rank_data);
    if (message_arena != submessage_arena) {
      rank_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rank_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rank_data_ = rank_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.CultivationData.rank_data)
}

// -------------------------------------------------------------------

// RoleDailyCounterEntry

// .idlepb.RoleDailyCounterType type = 1;
inline void RoleDailyCounterEntry::clear_type() {
  _impl_.type_ = 0;
}
inline ::idlepb::RoleDailyCounterType RoleDailyCounterEntry::_internal_type() const {
  return static_cast< ::idlepb::RoleDailyCounterType >(_impl_.type_);
}
inline ::idlepb::RoleDailyCounterType RoleDailyCounterEntry::type() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleDailyCounterEntry.type)
  return _internal_type();
}
inline void RoleDailyCounterEntry::_internal_set_type(::idlepb::RoleDailyCounterType value) {
  
  _impl_.type_ = value;
}
inline void RoleDailyCounterEntry::set_type(::idlepb::RoleDailyCounterType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleDailyCounterEntry.type)
}

// int32 num = 2;
inline void RoleDailyCounterEntry::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t RoleDailyCounterEntry::_internal_num() const {
  return _impl_.num_;
}
inline int32_t RoleDailyCounterEntry::num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleDailyCounterEntry.num)
  return _internal_num();
}
inline void RoleDailyCounterEntry::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void RoleDailyCounterEntry::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleDailyCounterEntry.num)
}

// -------------------------------------------------------------------

// RoleDailyCounter

// repeated .idlepb.RoleDailyCounterEntry entries = 1;
inline int RoleDailyCounter::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int RoleDailyCounter::entries_size() const {
  return _internal_entries_size();
}
inline void RoleDailyCounter::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::idlepb::RoleDailyCounterEntry* RoleDailyCounter::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleDailyCounter.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleDailyCounterEntry >*
RoleDailyCounter::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleDailyCounter.entries)
  return &_impl_.entries_;
}
inline const ::idlepb::RoleDailyCounterEntry& RoleDailyCounter::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::idlepb::RoleDailyCounterEntry& RoleDailyCounter::entries(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleDailyCounter.entries)
  return _internal_entries(index);
}
inline ::idlepb::RoleDailyCounterEntry* RoleDailyCounter::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::idlepb::RoleDailyCounterEntry* RoleDailyCounter::add_entries() {
  ::idlepb::RoleDailyCounterEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:idlepb.RoleDailyCounter.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleDailyCounterEntry >&
RoleDailyCounter::entries() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleDailyCounter.entries)
  return _impl_.entries_;
}

// int64 last_reset_time = 4;
inline void RoleDailyCounter::clear_last_reset_time() {
  _impl_.last_reset_time_ = int64_t{0};
}
inline int64_t RoleDailyCounter::_internal_last_reset_time() const {
  return _impl_.last_reset_time_;
}
inline int64_t RoleDailyCounter::last_reset_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleDailyCounter.last_reset_time)
  return _internal_last_reset_time();
}
inline void RoleDailyCounter::_internal_set_last_reset_time(int64_t value) {
  
  _impl_.last_reset_time_ = value;
}
inline void RoleDailyCounter::set_last_reset_time(int64_t value) {
  _internal_set_last_reset_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleDailyCounter.last_reset_time)
}

// -------------------------------------------------------------------

// RoleWeeklyCounterEntry

// .idlepb.RoleWeeklyCounterType type = 1;
inline void RoleWeeklyCounterEntry::clear_type() {
  _impl_.type_ = 0;
}
inline ::idlepb::RoleWeeklyCounterType RoleWeeklyCounterEntry::_internal_type() const {
  return static_cast< ::idlepb::RoleWeeklyCounterType >(_impl_.type_);
}
inline ::idlepb::RoleWeeklyCounterType RoleWeeklyCounterEntry::type() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleWeeklyCounterEntry.type)
  return _internal_type();
}
inline void RoleWeeklyCounterEntry::_internal_set_type(::idlepb::RoleWeeklyCounterType value) {
  
  _impl_.type_ = value;
}
inline void RoleWeeklyCounterEntry::set_type(::idlepb::RoleWeeklyCounterType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleWeeklyCounterEntry.type)
}

// int32 num = 2;
inline void RoleWeeklyCounterEntry::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t RoleWeeklyCounterEntry::_internal_num() const {
  return _impl_.num_;
}
inline int32_t RoleWeeklyCounterEntry::num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleWeeklyCounterEntry.num)
  return _internal_num();
}
inline void RoleWeeklyCounterEntry::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void RoleWeeklyCounterEntry::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleWeeklyCounterEntry.num)
}

// -------------------------------------------------------------------

// RoleWeeklyCounter

// repeated .idlepb.RoleWeeklyCounterEntry entries = 1;
inline int RoleWeeklyCounter::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int RoleWeeklyCounter::entries_size() const {
  return _internal_entries_size();
}
inline void RoleWeeklyCounter::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::idlepb::RoleWeeklyCounterEntry* RoleWeeklyCounter::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleWeeklyCounter.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleWeeklyCounterEntry >*
RoleWeeklyCounter::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleWeeklyCounter.entries)
  return &_impl_.entries_;
}
inline const ::idlepb::RoleWeeklyCounterEntry& RoleWeeklyCounter::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::idlepb::RoleWeeklyCounterEntry& RoleWeeklyCounter::entries(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleWeeklyCounter.entries)
  return _internal_entries(index);
}
inline ::idlepb::RoleWeeklyCounterEntry* RoleWeeklyCounter::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::idlepb::RoleWeeklyCounterEntry* RoleWeeklyCounter::add_entries() {
  ::idlepb::RoleWeeklyCounterEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:idlepb.RoleWeeklyCounter.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleWeeklyCounterEntry >&
RoleWeeklyCounter::entries() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleWeeklyCounter.entries)
  return _impl_.entries_;
}

// int64 last_reset_time = 4;
inline void RoleWeeklyCounter::clear_last_reset_time() {
  _impl_.last_reset_time_ = int64_t{0};
}
inline int64_t RoleWeeklyCounter::_internal_last_reset_time() const {
  return _impl_.last_reset_time_;
}
inline int64_t RoleWeeklyCounter::last_reset_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleWeeklyCounter.last_reset_time)
  return _internal_last_reset_time();
}
inline void RoleWeeklyCounter::_internal_set_last_reset_time(int64_t value) {
  
  _impl_.last_reset_time_ = value;
}
inline void RoleWeeklyCounter::set_last_reset_time(int64_t value) {
  _internal_set_last_reset_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleWeeklyCounter.last_reset_time)
}

// -------------------------------------------------------------------

// CurrencyEntry

// .idlepb.CurrencyType type = 1;
inline void CurrencyEntry::clear_type() {
  _impl_.type_ = 0;
}
inline ::idlepb::CurrencyType CurrencyEntry::_internal_type() const {
  return static_cast< ::idlepb::CurrencyType >(_impl_.type_);
}
inline ::idlepb::CurrencyType CurrencyEntry::type() const {
  // @@protoc_insertion_point(field_get:idlepb.CurrencyEntry.type)
  return _internal_type();
}
inline void CurrencyEntry::_internal_set_type(::idlepb::CurrencyType value) {
  
  _impl_.type_ = value;
}
inline void CurrencyEntry::set_type(::idlepb::CurrencyType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.CurrencyEntry.type)
}

// int64 num = 2;
inline void CurrencyEntry::clear_num() {
  _impl_.num_ = int64_t{0};
}
inline int64_t CurrencyEntry::_internal_num() const {
  return _impl_.num_;
}
inline int64_t CurrencyEntry::num() const {
  // @@protoc_insertion_point(field_get:idlepb.CurrencyEntry.num)
  return _internal_num();
}
inline void CurrencyEntry::_internal_set_num(int64_t value) {
  
  _impl_.num_ = value;
}
inline void CurrencyEntry::set_num(int64_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.CurrencyEntry.num)
}

// -------------------------------------------------------------------

// CurrencyData

// repeated .idlepb.CurrencyEntry currencies = 10;
inline int CurrencyData::_internal_currencies_size() const {
  return _impl_.currencies_.size();
}
inline int CurrencyData::currencies_size() const {
  return _internal_currencies_size();
}
inline void CurrencyData::clear_currencies() {
  _impl_.currencies_.Clear();
}
inline ::idlepb::CurrencyEntry* CurrencyData::mutable_currencies(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.CurrencyData.currencies)
  return _impl_.currencies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CurrencyEntry >*
CurrencyData::mutable_currencies() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.CurrencyData.currencies)
  return &_impl_.currencies_;
}
inline const ::idlepb::CurrencyEntry& CurrencyData::_internal_currencies(int index) const {
  return _impl_.currencies_.Get(index);
}
inline const ::idlepb::CurrencyEntry& CurrencyData::currencies(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.CurrencyData.currencies)
  return _internal_currencies(index);
}
inline ::idlepb::CurrencyEntry* CurrencyData::_internal_add_currencies() {
  return _impl_.currencies_.Add();
}
inline ::idlepb::CurrencyEntry* CurrencyData::add_currencies() {
  ::idlepb::CurrencyEntry* _add = _internal_add_currencies();
  // @@protoc_insertion_point(field_add:idlepb.CurrencyData.currencies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CurrencyEntry >&
CurrencyData::currencies() const {
  // @@protoc_insertion_point(field_list:idlepb.CurrencyData.currencies)
  return _impl_.currencies_;
}

// -------------------------------------------------------------------

// EquipPerkEntry

// int32 id = 1;
inline void EquipPerkEntry::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t EquipPerkEntry::_internal_id() const {
  return _impl_.id_;
}
inline int32_t EquipPerkEntry::id() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipPerkEntry.id)
  return _internal_id();
}
inline void EquipPerkEntry::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void EquipPerkEntry::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipPerkEntry.id)
}

// .idlepb.ItemQuality quality = 2;
inline void EquipPerkEntry::clear_quality() {
  _impl_.quality_ = 0;
}
inline ::idlepb::ItemQuality EquipPerkEntry::_internal_quality() const {
  return static_cast< ::idlepb::ItemQuality >(_impl_.quality_);
}
inline ::idlepb::ItemQuality EquipPerkEntry::quality() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipPerkEntry.quality)
  return _internal_quality();
}
inline void EquipPerkEntry::_internal_set_quality(::idlepb::ItemQuality value) {
  
  _impl_.quality_ = value;
}
inline void EquipPerkEntry::set_quality(::idlepb::ItemQuality value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipPerkEntry.quality)
}

// int32 num = 3;
inline void EquipPerkEntry::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t EquipPerkEntry::_internal_num() const {
  return _impl_.num_;
}
inline int32_t EquipPerkEntry::num() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipPerkEntry.num)
  return _internal_num();
}
inline void EquipPerkEntry::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void EquipPerkEntry::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipPerkEntry.num)
}

// -------------------------------------------------------------------

// SkillEquipmentAttributes

// float cool_down = 1;
inline void SkillEquipmentAttributes::clear_cool_down() {
  _impl_.cool_down_ = 0;
}
inline float SkillEquipmentAttributes::_internal_cool_down() const {
  return _impl_.cool_down_;
}
inline float SkillEquipmentAttributes::cool_down() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentAttributes.cool_down)
  return _internal_cool_down();
}
inline void SkillEquipmentAttributes::_internal_set_cool_down(float value) {
  
  _impl_.cool_down_ = value;
}
inline void SkillEquipmentAttributes::set_cool_down(float value) {
  _internal_set_cool_down(value);
  // @@protoc_insertion_point(field_set:idlepb.SkillEquipmentAttributes.cool_down)
}

// int32 target_num = 2;
inline void SkillEquipmentAttributes::clear_target_num() {
  _impl_.target_num_ = 0;
}
inline int32_t SkillEquipmentAttributes::_internal_target_num() const {
  return _impl_.target_num_;
}
inline int32_t SkillEquipmentAttributes::target_num() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentAttributes.target_num)
  return _internal_target_num();
}
inline void SkillEquipmentAttributes::_internal_set_target_num(int32_t value) {
  
  _impl_.target_num_ = value;
}
inline void SkillEquipmentAttributes::set_target_num(int32_t value) {
  _internal_set_target_num(value);
  // @@protoc_insertion_point(field_set:idlepb.SkillEquipmentAttributes.target_num)
}

// int32 attack_count = 3;
inline void SkillEquipmentAttributes::clear_attack_count() {
  _impl_.attack_count_ = 0;
}
inline int32_t SkillEquipmentAttributes::_internal_attack_count() const {
  return _impl_.attack_count_;
}
inline int32_t SkillEquipmentAttributes::attack_count() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentAttributes.attack_count)
  return _internal_attack_count();
}
inline void SkillEquipmentAttributes::_internal_set_attack_count(int32_t value) {
  
  _impl_.attack_count_ = value;
}
inline void SkillEquipmentAttributes::set_attack_count(int32_t value) {
  _internal_set_attack_count(value);
  // @@protoc_insertion_point(field_set:idlepb.SkillEquipmentAttributes.attack_count)
}

// float phy_coefficient = 4;
inline void SkillEquipmentAttributes::clear_phy_coefficient() {
  _impl_.phy_coefficient_ = 0;
}
inline float SkillEquipmentAttributes::_internal_phy_coefficient() const {
  return _impl_.phy_coefficient_;
}
inline float SkillEquipmentAttributes::phy_coefficient() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentAttributes.phy_coefficient)
  return _internal_phy_coefficient();
}
inline void SkillEquipmentAttributes::_internal_set_phy_coefficient(float value) {
  
  _impl_.phy_coefficient_ = value;
}
inline void SkillEquipmentAttributes::set_phy_coefficient(float value) {
  _internal_set_phy_coefficient(value);
  // @@protoc_insertion_point(field_set:idlepb.SkillEquipmentAttributes.phy_coefficient)
}

// float phy_damage = 5;
inline void SkillEquipmentAttributes::clear_phy_damage() {
  _impl_.phy_damage_ = 0;
}
inline float SkillEquipmentAttributes::_internal_phy_damage() const {
  return _impl_.phy_damage_;
}
inline float SkillEquipmentAttributes::phy_damage() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentAttributes.phy_damage)
  return _internal_phy_damage();
}
inline void SkillEquipmentAttributes::_internal_set_phy_damage(float value) {
  
  _impl_.phy_damage_ = value;
}
inline void SkillEquipmentAttributes::set_phy_damage(float value) {
  _internal_set_phy_damage(value);
  // @@protoc_insertion_point(field_set:idlepb.SkillEquipmentAttributes.phy_damage)
}

// float mag_coefficient = 6;
inline void SkillEquipmentAttributes::clear_mag_coefficient() {
  _impl_.mag_coefficient_ = 0;
}
inline float SkillEquipmentAttributes::_internal_mag_coefficient() const {
  return _impl_.mag_coefficient_;
}
inline float SkillEquipmentAttributes::mag_coefficient() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentAttributes.mag_coefficient)
  return _internal_mag_coefficient();
}
inline void SkillEquipmentAttributes::_internal_set_mag_coefficient(float value) {
  
  _impl_.mag_coefficient_ = value;
}
inline void SkillEquipmentAttributes::set_mag_coefficient(float value) {
  _internal_set_mag_coefficient(value);
  // @@protoc_insertion_point(field_set:idlepb.SkillEquipmentAttributes.mag_coefficient)
}

// float mag_damage = 7;
inline void SkillEquipmentAttributes::clear_mag_damage() {
  _impl_.mag_damage_ = 0;
}
inline float SkillEquipmentAttributes::_internal_mag_damage() const {
  return _impl_.mag_damage_;
}
inline float SkillEquipmentAttributes::mag_damage() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentAttributes.mag_damage)
  return _internal_mag_damage();
}
inline void SkillEquipmentAttributes::_internal_set_mag_damage(float value) {
  
  _impl_.mag_damage_ = value;
}
inline void SkillEquipmentAttributes::set_mag_damage(float value) {
  _internal_set_mag_damage(value);
  // @@protoc_insertion_point(field_set:idlepb.SkillEquipmentAttributes.mag_damage)
}

// float max_damage = 8;
inline void SkillEquipmentAttributes::clear_max_damage() {
  _impl_.max_damage_ = 0;
}
inline float SkillEquipmentAttributes::_internal_max_damage() const {
  return _impl_.max_damage_;
}
inline float SkillEquipmentAttributes::max_damage() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentAttributes.max_damage)
  return _internal_max_damage();
}
inline void SkillEquipmentAttributes::_internal_set_max_damage(float value) {
  
  _impl_.max_damage_ = value;
}
inline void SkillEquipmentAttributes::set_max_damage(float value) {
  _internal_set_max_damage(value);
  // @@protoc_insertion_point(field_set:idlepb.SkillEquipmentAttributes.max_damage)
}

// repeated .idlepb.AbilityEffectData effects = 9;
inline int SkillEquipmentAttributes::_internal_effects_size() const {
  return _impl_.effects_.size();
}
inline int SkillEquipmentAttributes::effects_size() const {
  return _internal_effects_size();
}
inline void SkillEquipmentAttributes::clear_effects() {
  _impl_.effects_.Clear();
}
inline ::idlepb::AbilityEffectData* SkillEquipmentAttributes::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.SkillEquipmentAttributes.effects)
  return _impl_.effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectData >*
SkillEquipmentAttributes::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.SkillEquipmentAttributes.effects)
  return &_impl_.effects_;
}
inline const ::idlepb::AbilityEffectData& SkillEquipmentAttributes::_internal_effects(int index) const {
  return _impl_.effects_.Get(index);
}
inline const ::idlepb::AbilityEffectData& SkillEquipmentAttributes::effects(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentAttributes.effects)
  return _internal_effects(index);
}
inline ::idlepb::AbilityEffectData* SkillEquipmentAttributes::_internal_add_effects() {
  return _impl_.effects_.Add();
}
inline ::idlepb::AbilityEffectData* SkillEquipmentAttributes::add_effects() {
  ::idlepb::AbilityEffectData* _add = _internal_add_effects();
  // @@protoc_insertion_point(field_add:idlepb.SkillEquipmentAttributes.effects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectData >&
SkillEquipmentAttributes::effects() const {
  // @@protoc_insertion_point(field_list:idlepb.SkillEquipmentAttributes.effects)
  return _impl_.effects_;
}

// repeated .idlepb.AbilityEffectData shield_effects = 10;
inline int SkillEquipmentAttributes::_internal_shield_effects_size() const {
  return _impl_.shield_effects_.size();
}
inline int SkillEquipmentAttributes::shield_effects_size() const {
  return _internal_shield_effects_size();
}
inline void SkillEquipmentAttributes::clear_shield_effects() {
  _impl_.shield_effects_.Clear();
}
inline ::idlepb::AbilityEffectData* SkillEquipmentAttributes::mutable_shield_effects(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.SkillEquipmentAttributes.shield_effects)
  return _impl_.shield_effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectData >*
SkillEquipmentAttributes::mutable_shield_effects() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.SkillEquipmentAttributes.shield_effects)
  return &_impl_.shield_effects_;
}
inline const ::idlepb::AbilityEffectData& SkillEquipmentAttributes::_internal_shield_effects(int index) const {
  return _impl_.shield_effects_.Get(index);
}
inline const ::idlepb::AbilityEffectData& SkillEquipmentAttributes::shield_effects(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentAttributes.shield_effects)
  return _internal_shield_effects(index);
}
inline ::idlepb::AbilityEffectData* SkillEquipmentAttributes::_internal_add_shield_effects() {
  return _impl_.shield_effects_.Add();
}
inline ::idlepb::AbilityEffectData* SkillEquipmentAttributes::add_shield_effects() {
  ::idlepb::AbilityEffectData* _add = _internal_add_shield_effects();
  // @@protoc_insertion_point(field_add:idlepb.SkillEquipmentAttributes.shield_effects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectData >&
SkillEquipmentAttributes::shield_effects() const {
  // @@protoc_insertion_point(field_list:idlepb.SkillEquipmentAttributes.shield_effects)
  return _impl_.shield_effects_;
}

// -------------------------------------------------------------------

// SkillEquipmentData

// .idlepb.SkillEquipmentAttributes attributes = 1;
inline bool SkillEquipmentData::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool SkillEquipmentData::has_attributes() const {
  return _internal_has_attributes();
}
inline void SkillEquipmentData::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && _impl_.attributes_ != nullptr) {
    delete _impl_.attributes_;
  }
  _impl_.attributes_ = nullptr;
}
inline const ::idlepb::SkillEquipmentAttributes& SkillEquipmentData::_internal_attributes() const {
  const ::idlepb::SkillEquipmentAttributes* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::SkillEquipmentAttributes&>(
      ::idlepb::_SkillEquipmentAttributes_default_instance_);
}
inline const ::idlepb::SkillEquipmentAttributes& SkillEquipmentData::attributes() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentData.attributes)
  return _internal_attributes();
}
inline void SkillEquipmentData::unsafe_arena_set_allocated_attributes(
    ::idlepb::SkillEquipmentAttributes* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.SkillEquipmentData.attributes)
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::release_attributes() {
  
  ::idlepb::SkillEquipmentAttributes* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:idlepb.SkillEquipmentData.attributes)
  
  ::idlepb::SkillEquipmentAttributes* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::SkillEquipmentAttributes>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::mutable_attributes() {
  ::idlepb::SkillEquipmentAttributes* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:idlepb.SkillEquipmentData.attributes)
  return _msg;
}
inline void SkillEquipmentData::set_allocated_attributes(::idlepb::SkillEquipmentAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:idlepb.SkillEquipmentData.attributes)
}

// .idlepb.SkillEquipmentAttributes reinforce_attributes = 2;
inline bool SkillEquipmentData::_internal_has_reinforce_attributes() const {
  return this != internal_default_instance() && _impl_.reinforce_attributes_ != nullptr;
}
inline bool SkillEquipmentData::has_reinforce_attributes() const {
  return _internal_has_reinforce_attributes();
}
inline void SkillEquipmentData::clear_reinforce_attributes() {
  if (GetArenaForAllocation() == nullptr && _impl_.reinforce_attributes_ != nullptr) {
    delete _impl_.reinforce_attributes_;
  }
  _impl_.reinforce_attributes_ = nullptr;
}
inline const ::idlepb::SkillEquipmentAttributes& SkillEquipmentData::_internal_reinforce_attributes() const {
  const ::idlepb::SkillEquipmentAttributes* p = _impl_.reinforce_attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::SkillEquipmentAttributes&>(
      ::idlepb::_SkillEquipmentAttributes_default_instance_);
}
inline const ::idlepb::SkillEquipmentAttributes& SkillEquipmentData::reinforce_attributes() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentData.reinforce_attributes)
  return _internal_reinforce_attributes();
}
inline void SkillEquipmentData::unsafe_arena_set_allocated_reinforce_attributes(
    ::idlepb::SkillEquipmentAttributes* reinforce_attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reinforce_attributes_);
  }
  _impl_.reinforce_attributes_ = reinforce_attributes;
  if (reinforce_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.SkillEquipmentData.reinforce_attributes)
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::release_reinforce_attributes() {
  
  ::idlepb::SkillEquipmentAttributes* temp = _impl_.reinforce_attributes_;
  _impl_.reinforce_attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::unsafe_arena_release_reinforce_attributes() {
  // @@protoc_insertion_point(field_release:idlepb.SkillEquipmentData.reinforce_attributes)
  
  ::idlepb::SkillEquipmentAttributes* temp = _impl_.reinforce_attributes_;
  _impl_.reinforce_attributes_ = nullptr;
  return temp;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::_internal_mutable_reinforce_attributes() {
  
  if (_impl_.reinforce_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::SkillEquipmentAttributes>(GetArenaForAllocation());
    _impl_.reinforce_attributes_ = p;
  }
  return _impl_.reinforce_attributes_;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::mutable_reinforce_attributes() {
  ::idlepb::SkillEquipmentAttributes* _msg = _internal_mutable_reinforce_attributes();
  // @@protoc_insertion_point(field_mutable:idlepb.SkillEquipmentData.reinforce_attributes)
  return _msg;
}
inline void SkillEquipmentData::set_allocated_reinforce_attributes(::idlepb::SkillEquipmentAttributes* reinforce_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reinforce_attributes_;
  }
  if (reinforce_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reinforce_attributes);
    if (message_arena != submessage_arena) {
      reinforce_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reinforce_attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reinforce_attributes_ = reinforce_attributes;
  // @@protoc_insertion_point(field_set_allocated:idlepb.SkillEquipmentData.reinforce_attributes)
}

// .idlepb.SkillEquipmentAttributes qiwen_attributes = 3;
inline bool SkillEquipmentData::_internal_has_qiwen_attributes() const {
  return this != internal_default_instance() && _impl_.qiwen_attributes_ != nullptr;
}
inline bool SkillEquipmentData::has_qiwen_attributes() const {
  return _internal_has_qiwen_attributes();
}
inline void SkillEquipmentData::clear_qiwen_attributes() {
  if (GetArenaForAllocation() == nullptr && _impl_.qiwen_attributes_ != nullptr) {
    delete _impl_.qiwen_attributes_;
  }
  _impl_.qiwen_attributes_ = nullptr;
}
inline const ::idlepb::SkillEquipmentAttributes& SkillEquipmentData::_internal_qiwen_attributes() const {
  const ::idlepb::SkillEquipmentAttributes* p = _impl_.qiwen_attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::SkillEquipmentAttributes&>(
      ::idlepb::_SkillEquipmentAttributes_default_instance_);
}
inline const ::idlepb::SkillEquipmentAttributes& SkillEquipmentData::qiwen_attributes() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentData.qiwen_attributes)
  return _internal_qiwen_attributes();
}
inline void SkillEquipmentData::unsafe_arena_set_allocated_qiwen_attributes(
    ::idlepb::SkillEquipmentAttributes* qiwen_attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qiwen_attributes_);
  }
  _impl_.qiwen_attributes_ = qiwen_attributes;
  if (qiwen_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.SkillEquipmentData.qiwen_attributes)
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::release_qiwen_attributes() {
  
  ::idlepb::SkillEquipmentAttributes* temp = _impl_.qiwen_attributes_;
  _impl_.qiwen_attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::unsafe_arena_release_qiwen_attributes() {
  // @@protoc_insertion_point(field_release:idlepb.SkillEquipmentData.qiwen_attributes)
  
  ::idlepb::SkillEquipmentAttributes* temp = _impl_.qiwen_attributes_;
  _impl_.qiwen_attributes_ = nullptr;
  return temp;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::_internal_mutable_qiwen_attributes() {
  
  if (_impl_.qiwen_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::SkillEquipmentAttributes>(GetArenaForAllocation());
    _impl_.qiwen_attributes_ = p;
  }
  return _impl_.qiwen_attributes_;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::mutable_qiwen_attributes() {
  ::idlepb::SkillEquipmentAttributes* _msg = _internal_mutable_qiwen_attributes();
  // @@protoc_insertion_point(field_mutable:idlepb.SkillEquipmentData.qiwen_attributes)
  return _msg;
}
inline void SkillEquipmentData::set_allocated_qiwen_attributes(::idlepb::SkillEquipmentAttributes* qiwen_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.qiwen_attributes_;
  }
  if (qiwen_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(qiwen_attributes);
    if (message_arena != submessage_arena) {
      qiwen_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qiwen_attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.qiwen_attributes_ = qiwen_attributes;
  // @@protoc_insertion_point(field_set_allocated:idlepb.SkillEquipmentData.qiwen_attributes)
}

// .idlepb.SkillEquipmentAttributes jinglian_attributes = 4;
inline bool SkillEquipmentData::_internal_has_jinglian_attributes() const {
  return this != internal_default_instance() && _impl_.jinglian_attributes_ != nullptr;
}
inline bool SkillEquipmentData::has_jinglian_attributes() const {
  return _internal_has_jinglian_attributes();
}
inline void SkillEquipmentData::clear_jinglian_attributes() {
  if (GetArenaForAllocation() == nullptr && _impl_.jinglian_attributes_ != nullptr) {
    delete _impl_.jinglian_attributes_;
  }
  _impl_.jinglian_attributes_ = nullptr;
}
inline const ::idlepb::SkillEquipmentAttributes& SkillEquipmentData::_internal_jinglian_attributes() const {
  const ::idlepb::SkillEquipmentAttributes* p = _impl_.jinglian_attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::SkillEquipmentAttributes&>(
      ::idlepb::_SkillEquipmentAttributes_default_instance_);
}
inline const ::idlepb::SkillEquipmentAttributes& SkillEquipmentData::jinglian_attributes() const {
  // @@protoc_insertion_point(field_get:idlepb.SkillEquipmentData.jinglian_attributes)
  return _internal_jinglian_attributes();
}
inline void SkillEquipmentData::unsafe_arena_set_allocated_jinglian_attributes(
    ::idlepb::SkillEquipmentAttributes* jinglian_attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jinglian_attributes_);
  }
  _impl_.jinglian_attributes_ = jinglian_attributes;
  if (jinglian_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.SkillEquipmentData.jinglian_attributes)
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::release_jinglian_attributes() {
  
  ::idlepb::SkillEquipmentAttributes* temp = _impl_.jinglian_attributes_;
  _impl_.jinglian_attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::unsafe_arena_release_jinglian_attributes() {
  // @@protoc_insertion_point(field_release:idlepb.SkillEquipmentData.jinglian_attributes)
  
  ::idlepb::SkillEquipmentAttributes* temp = _impl_.jinglian_attributes_;
  _impl_.jinglian_attributes_ = nullptr;
  return temp;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::_internal_mutable_jinglian_attributes() {
  
  if (_impl_.jinglian_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::SkillEquipmentAttributes>(GetArenaForAllocation());
    _impl_.jinglian_attributes_ = p;
  }
  return _impl_.jinglian_attributes_;
}
inline ::idlepb::SkillEquipmentAttributes* SkillEquipmentData::mutable_jinglian_attributes() {
  ::idlepb::SkillEquipmentAttributes* _msg = _internal_mutable_jinglian_attributes();
  // @@protoc_insertion_point(field_mutable:idlepb.SkillEquipmentData.jinglian_attributes)
  return _msg;
}
inline void SkillEquipmentData::set_allocated_jinglian_attributes(::idlepb::SkillEquipmentAttributes* jinglian_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.jinglian_attributes_;
  }
  if (jinglian_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(jinglian_attributes);
    if (message_arena != submessage_arena) {
      jinglian_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jinglian_attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.jinglian_attributes_ = jinglian_attributes;
  // @@protoc_insertion_point(field_set_allocated:idlepb.SkillEquipmentData.jinglian_attributes)
}

// -------------------------------------------------------------------

// CollectionEntry

// int32 id = 1;
inline void CollectionEntry::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t CollectionEntry::_internal_id() const {
  return _impl_.id_;
}
inline int32_t CollectionEntry::id() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntry.id)
  return _internal_id();
}
inline void CollectionEntry::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void CollectionEntry::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntry.id)
}

// int32 level = 2;
inline void CollectionEntry::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t CollectionEntry::_internal_level() const {
  return _impl_.level_;
}
inline int32_t CollectionEntry::level() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntry.level)
  return _internal_level();
}
inline void CollectionEntry::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void CollectionEntry::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntry.level)
}

// int32 star = 3;
inline void CollectionEntry::clear_star() {
  _impl_.star_ = 0;
}
inline int32_t CollectionEntry::_internal_star() const {
  return _impl_.star_;
}
inline int32_t CollectionEntry::star() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntry.star)
  return _internal_star();
}
inline void CollectionEntry::_internal_set_star(int32_t value) {
  
  _impl_.star_ = value;
}
inline void CollectionEntry::set_star(int32_t value) {
  _internal_set_star(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntry.star)
}

// bool is_activated = 4;
inline void CollectionEntry::clear_is_activated() {
  _impl_.is_activated_ = false;
}
inline bool CollectionEntry::_internal_is_activated() const {
  return _impl_.is_activated_;
}
inline bool CollectionEntry::is_activated() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntry.is_activated)
  return _internal_is_activated();
}
inline void CollectionEntry::_internal_set_is_activated(bool value) {
  
  _impl_.is_activated_ = value;
}
inline void CollectionEntry::set_is_activated(bool value) {
  _internal_set_is_activated(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntry.is_activated)
}

// int32 piece_num = 5;
inline void CollectionEntry::clear_piece_num() {
  _impl_.piece_num_ = 0;
}
inline int32_t CollectionEntry::_internal_piece_num() const {
  return _impl_.piece_num_;
}
inline int32_t CollectionEntry::piece_num() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntry.piece_num)
  return _internal_piece_num();
}
inline void CollectionEntry::_internal_set_piece_num(int32_t value) {
  
  _impl_.piece_num_ = value;
}
inline void CollectionEntry::set_piece_num(int32_t value) {
  _internal_set_piece_num(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntry.piece_num)
}

// int32 life_num = 6;
inline void CollectionEntry::clear_life_num() {
  _impl_.life_num_ = 0;
}
inline int32_t CollectionEntry::_internal_life_num() const {
  return _impl_.life_num_;
}
inline int32_t CollectionEntry::life_num() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntry.life_num)
  return _internal_life_num();
}
inline void CollectionEntry::_internal_set_life_num(int32_t value) {
  
  _impl_.life_num_ = value;
}
inline void CollectionEntry::set_life_num(int32_t value) {
  _internal_set_life_num(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntry.life_num)
}

// float combat_power = 7;
inline void CollectionEntry::clear_combat_power() {
  _impl_.combat_power_ = 0;
}
inline float CollectionEntry::_internal_combat_power() const {
  return _impl_.combat_power_;
}
inline float CollectionEntry::combat_power() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntry.combat_power)
  return _internal_combat_power();
}
inline void CollectionEntry::_internal_set_combat_power(float value) {
  
  _impl_.combat_power_ = value;
}
inline void CollectionEntry::set_combat_power(float value) {
  _internal_set_combat_power(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntry.combat_power)
}

// -------------------------------------------------------------------

// EquipmentData

// int32 slot_index = 1;
inline void EquipmentData::clear_slot_index() {
  _impl_.slot_index_ = 0;
}
inline int32_t EquipmentData::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline int32_t EquipmentData::slot_index() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.slot_index)
  return _internal_slot_index();
}
inline void EquipmentData::_internal_set_slot_index(int32_t value) {
  
  _impl_.slot_index_ = value;
}
inline void EquipmentData::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.slot_index)
}

// int64 combat_power = 3;
inline void EquipmentData::clear_combat_power() {
  _impl_.combat_power_ = int64_t{0};
}
inline int64_t EquipmentData::_internal_combat_power() const {
  return _impl_.combat_power_;
}
inline int64_t EquipmentData::combat_power() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.combat_power)
  return _internal_combat_power();
}
inline void EquipmentData::_internal_set_combat_power(int64_t value) {
  
  _impl_.combat_power_ = value;
}
inline void EquipmentData::set_combat_power(int64_t value) {
  _internal_set_combat_power(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.combat_power)
}

// string maker_name = 4;
inline void EquipmentData::clear_maker_name() {
  _impl_.maker_name_.ClearToEmpty();
}
inline const std::string& EquipmentData::maker_name() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.maker_name)
  return _internal_maker_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EquipmentData::set_maker_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.maker_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.maker_name)
}
inline std::string* EquipmentData::mutable_maker_name() {
  std::string* _s = _internal_mutable_maker_name();
  // @@protoc_insertion_point(field_mutable:idlepb.EquipmentData.maker_name)
  return _s;
}
inline const std::string& EquipmentData::_internal_maker_name() const {
  return _impl_.maker_name_.Get();
}
inline void EquipmentData::_internal_set_maker_name(const std::string& value) {
  
  _impl_.maker_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EquipmentData::_internal_mutable_maker_name() {
  
  return _impl_.maker_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EquipmentData::release_maker_name() {
  // @@protoc_insertion_point(field_release:idlepb.EquipmentData.maker_name)
  return _impl_.maker_name_.Release();
}
inline void EquipmentData::set_allocated_maker_name(std::string* maker_name) {
  if (maker_name != nullptr) {
    
  } else {
    
  }
  _impl_.maker_name_.SetAllocated(maker_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.maker_name_.IsDefault()) {
    _impl_.maker_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.EquipmentData.maker_name)
}

// int64 maker_roleid = 5;
inline void EquipmentData::clear_maker_roleid() {
  _impl_.maker_roleid_ = int64_t{0};
}
inline int64_t EquipmentData::_internal_maker_roleid() const {
  return _impl_.maker_roleid_;
}
inline int64_t EquipmentData::maker_roleid() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.maker_roleid)
  return _internal_maker_roleid();
}
inline void EquipmentData::_internal_set_maker_roleid(int64_t value) {
  
  _impl_.maker_roleid_ = value;
}
inline void EquipmentData::set_maker_roleid(int64_t value) {
  _internal_set_maker_roleid(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.maker_roleid)
}

// repeated .idlepb.EquipPerkEntry perks = 10;
inline int EquipmentData::_internal_perks_size() const {
  return _impl_.perks_.size();
}
inline int EquipmentData::perks_size() const {
  return _internal_perks_size();
}
inline void EquipmentData::clear_perks() {
  _impl_.perks_.Clear();
}
inline ::idlepb::EquipPerkEntry* EquipmentData::mutable_perks(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.EquipmentData.perks)
  return _impl_.perks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::EquipPerkEntry >*
EquipmentData::mutable_perks() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.EquipmentData.perks)
  return &_impl_.perks_;
}
inline const ::idlepb::EquipPerkEntry& EquipmentData::_internal_perks(int index) const {
  return _impl_.perks_.Get(index);
}
inline const ::idlepb::EquipPerkEntry& EquipmentData::perks(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.perks)
  return _internal_perks(index);
}
inline ::idlepb::EquipPerkEntry* EquipmentData::_internal_add_perks() {
  return _impl_.perks_.Add();
}
inline ::idlepb::EquipPerkEntry* EquipmentData::add_perks() {
  ::idlepb::EquipPerkEntry* _add = _internal_add_perks();
  // @@protoc_insertion_point(field_add:idlepb.EquipmentData.perks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::EquipPerkEntry >&
EquipmentData::perks() const {
  // @@protoc_insertion_point(field_list:idlepb.EquipmentData.perks)
  return _impl_.perks_;
}

// .idlepb.SkillEquipmentData skill_equipment_data = 11;
inline bool EquipmentData::_internal_has_skill_equipment_data() const {
  return this != internal_default_instance() && _impl_.skill_equipment_data_ != nullptr;
}
inline bool EquipmentData::has_skill_equipment_data() const {
  return _internal_has_skill_equipment_data();
}
inline void EquipmentData::clear_skill_equipment_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.skill_equipment_data_ != nullptr) {
    delete _impl_.skill_equipment_data_;
  }
  _impl_.skill_equipment_data_ = nullptr;
}
inline const ::idlepb::SkillEquipmentData& EquipmentData::_internal_skill_equipment_data() const {
  const ::idlepb::SkillEquipmentData* p = _impl_.skill_equipment_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::SkillEquipmentData&>(
      ::idlepb::_SkillEquipmentData_default_instance_);
}
inline const ::idlepb::SkillEquipmentData& EquipmentData::skill_equipment_data() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.skill_equipment_data)
  return _internal_skill_equipment_data();
}
inline void EquipmentData::unsafe_arena_set_allocated_skill_equipment_data(
    ::idlepb::SkillEquipmentData* skill_equipment_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skill_equipment_data_);
  }
  _impl_.skill_equipment_data_ = skill_equipment_data;
  if (skill_equipment_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.EquipmentData.skill_equipment_data)
}
inline ::idlepb::SkillEquipmentData* EquipmentData::release_skill_equipment_data() {
  
  ::idlepb::SkillEquipmentData* temp = _impl_.skill_equipment_data_;
  _impl_.skill_equipment_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::SkillEquipmentData* EquipmentData::unsafe_arena_release_skill_equipment_data() {
  // @@protoc_insertion_point(field_release:idlepb.EquipmentData.skill_equipment_data)
  
  ::idlepb::SkillEquipmentData* temp = _impl_.skill_equipment_data_;
  _impl_.skill_equipment_data_ = nullptr;
  return temp;
}
inline ::idlepb::SkillEquipmentData* EquipmentData::_internal_mutable_skill_equipment_data() {
  
  if (_impl_.skill_equipment_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::SkillEquipmentData>(GetArenaForAllocation());
    _impl_.skill_equipment_data_ = p;
  }
  return _impl_.skill_equipment_data_;
}
inline ::idlepb::SkillEquipmentData* EquipmentData::mutable_skill_equipment_data() {
  ::idlepb::SkillEquipmentData* _msg = _internal_mutable_skill_equipment_data();
  // @@protoc_insertion_point(field_mutable:idlepb.EquipmentData.skill_equipment_data)
  return _msg;
}
inline void EquipmentData::set_allocated_skill_equipment_data(::idlepb::SkillEquipmentData* skill_equipment_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.skill_equipment_data_;
  }
  if (skill_equipment_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(skill_equipment_data);
    if (message_arena != submessage_arena) {
      skill_equipment_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skill_equipment_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.skill_equipment_data_ = skill_equipment_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.EquipmentData.skill_equipment_data)
}

// .idlepb.CollectionEntry collection_data = 12;
inline bool EquipmentData::_internal_has_collection_data() const {
  return this != internal_default_instance() && _impl_.collection_data_ != nullptr;
}
inline bool EquipmentData::has_collection_data() const {
  return _internal_has_collection_data();
}
inline void EquipmentData::clear_collection_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.collection_data_ != nullptr) {
    delete _impl_.collection_data_;
  }
  _impl_.collection_data_ = nullptr;
}
inline const ::idlepb::CollectionEntry& EquipmentData::_internal_collection_data() const {
  const ::idlepb::CollectionEntry* p = _impl_.collection_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CollectionEntry&>(
      ::idlepb::_CollectionEntry_default_instance_);
}
inline const ::idlepb::CollectionEntry& EquipmentData::collection_data() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.collection_data)
  return _internal_collection_data();
}
inline void EquipmentData::unsafe_arena_set_allocated_collection_data(
    ::idlepb::CollectionEntry* collection_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collection_data_);
  }
  _impl_.collection_data_ = collection_data;
  if (collection_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.EquipmentData.collection_data)
}
inline ::idlepb::CollectionEntry* EquipmentData::release_collection_data() {
  
  ::idlepb::CollectionEntry* temp = _impl_.collection_data_;
  _impl_.collection_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CollectionEntry* EquipmentData::unsafe_arena_release_collection_data() {
  // @@protoc_insertion_point(field_release:idlepb.EquipmentData.collection_data)
  
  ::idlepb::CollectionEntry* temp = _impl_.collection_data_;
  _impl_.collection_data_ = nullptr;
  return temp;
}
inline ::idlepb::CollectionEntry* EquipmentData::_internal_mutable_collection_data() {
  
  if (_impl_.collection_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CollectionEntry>(GetArenaForAllocation());
    _impl_.collection_data_ = p;
  }
  return _impl_.collection_data_;
}
inline ::idlepb::CollectionEntry* EquipmentData::mutable_collection_data() {
  ::idlepb::CollectionEntry* _msg = _internal_mutable_collection_data();
  // @@protoc_insertion_point(field_mutable:idlepb.EquipmentData.collection_data)
  return _msg;
}
inline void EquipmentData::set_allocated_collection_data(::idlepb::CollectionEntry* collection_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.collection_data_;
  }
  if (collection_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(collection_data);
    if (message_arena != submessage_arena) {
      collection_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collection_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.collection_data_ = collection_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.EquipmentData.collection_data)
}

// int32 reinforce_level = 30;
inline void EquipmentData::clear_reinforce_level() {
  _impl_.reinforce_level_ = 0;
}
inline int32_t EquipmentData::_internal_reinforce_level() const {
  return _impl_.reinforce_level_;
}
inline int32_t EquipmentData::reinforce_level() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.reinforce_level)
  return _internal_reinforce_level();
}
inline void EquipmentData::_internal_set_reinforce_level(int32_t value) {
  
  _impl_.reinforce_level_ = value;
}
inline void EquipmentData::set_reinforce_level(int32_t value) {
  _internal_set_reinforce_level(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.reinforce_level)
}

// int32 refine_level = 31;
inline void EquipmentData::clear_refine_level() {
  _impl_.refine_level_ = 0;
}
inline int32_t EquipmentData::_internal_refine_level() const {
  return _impl_.refine_level_;
}
inline int32_t EquipmentData::refine_level() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.refine_level)
  return _internal_refine_level();
}
inline void EquipmentData::_internal_set_refine_level(int32_t value) {
  
  _impl_.refine_level_ = value;
}
inline void EquipmentData::set_refine_level(int32_t value) {
  _internal_set_refine_level(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.refine_level)
}

// int32 qiwen_a_level = 50;
inline void EquipmentData::clear_qiwen_a_level() {
  _impl_.qiwen_a_level_ = 0;
}
inline int32_t EquipmentData::_internal_qiwen_a_level() const {
  return _impl_.qiwen_a_level_;
}
inline int32_t EquipmentData::qiwen_a_level() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_a_level)
  return _internal_qiwen_a_level();
}
inline void EquipmentData::_internal_set_qiwen_a_level(int32_t value) {
  
  _impl_.qiwen_a_level_ = value;
}
inline void EquipmentData::set_qiwen_a_level(int32_t value) {
  _internal_set_qiwen_a_level(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.qiwen_a_level)
}

// int32 qiwen_b_level = 51;
inline void EquipmentData::clear_qiwen_b_level() {
  _impl_.qiwen_b_level_ = 0;
}
inline int32_t EquipmentData::_internal_qiwen_b_level() const {
  return _impl_.qiwen_b_level_;
}
inline int32_t EquipmentData::qiwen_b_level() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_b_level)
  return _internal_qiwen_b_level();
}
inline void EquipmentData::_internal_set_qiwen_b_level(int32_t value) {
  
  _impl_.qiwen_b_level_ = value;
}
inline void EquipmentData::set_qiwen_b_level(int32_t value) {
  _internal_set_qiwen_b_level(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.qiwen_b_level)
}

// int32 qiwen_c_level = 52;
inline void EquipmentData::clear_qiwen_c_level() {
  _impl_.qiwen_c_level_ = 0;
}
inline int32_t EquipmentData::_internal_qiwen_c_level() const {
  return _impl_.qiwen_c_level_;
}
inline int32_t EquipmentData::qiwen_c_level() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_c_level)
  return _internal_qiwen_c_level();
}
inline void EquipmentData::_internal_set_qiwen_c_level(int32_t value) {
  
  _impl_.qiwen_c_level_ = value;
}
inline void EquipmentData::set_qiwen_c_level(int32_t value) {
  _internal_set_qiwen_c_level(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.qiwen_c_level)
}

// int32 qiwen_extra_effect_num = 53;
inline void EquipmentData::clear_qiwen_extra_effect_num() {
  _impl_.qiwen_extra_effect_num_ = 0;
}
inline int32_t EquipmentData::_internal_qiwen_extra_effect_num() const {
  return _impl_.qiwen_extra_effect_num_;
}
inline int32_t EquipmentData::qiwen_extra_effect_num() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_extra_effect_num)
  return _internal_qiwen_extra_effect_num();
}
inline void EquipmentData::_internal_set_qiwen_extra_effect_num(int32_t value) {
  
  _impl_.qiwen_extra_effect_num_ = value;
}
inline void EquipmentData::set_qiwen_extra_effect_num(int32_t value) {
  _internal_set_qiwen_extra_effect_num(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.qiwen_extra_effect_num)
}

// int32 qiwen_moneycast = 54;
inline void EquipmentData::clear_qiwen_moneycast() {
  _impl_.qiwen_moneycast_ = 0;
}
inline int32_t EquipmentData::_internal_qiwen_moneycast() const {
  return _impl_.qiwen_moneycast_;
}
inline int32_t EquipmentData::qiwen_moneycast() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_moneycast)
  return _internal_qiwen_moneycast();
}
inline void EquipmentData::_internal_set_qiwen_moneycast(int32_t value) {
  
  _impl_.qiwen_moneycast_ = value;
}
inline void EquipmentData::set_qiwen_moneycast(int32_t value) {
  _internal_set_qiwen_moneycast(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.qiwen_moneycast)
}

// int32 qiwen_current_exp_a = 55;
inline void EquipmentData::clear_qiwen_current_exp_a() {
  _impl_.qiwen_current_exp_a_ = 0;
}
inline int32_t EquipmentData::_internal_qiwen_current_exp_a() const {
  return _impl_.qiwen_current_exp_a_;
}
inline int32_t EquipmentData::qiwen_current_exp_a() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_current_exp_a)
  return _internal_qiwen_current_exp_a();
}
inline void EquipmentData::_internal_set_qiwen_current_exp_a(int32_t value) {
  
  _impl_.qiwen_current_exp_a_ = value;
}
inline void EquipmentData::set_qiwen_current_exp_a(int32_t value) {
  _internal_set_qiwen_current_exp_a(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.qiwen_current_exp_a)
}

// int32 qiwen_current_exp_b = 56;
inline void EquipmentData::clear_qiwen_current_exp_b() {
  _impl_.qiwen_current_exp_b_ = 0;
}
inline int32_t EquipmentData::_internal_qiwen_current_exp_b() const {
  return _impl_.qiwen_current_exp_b_;
}
inline int32_t EquipmentData::qiwen_current_exp_b() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_current_exp_b)
  return _internal_qiwen_current_exp_b();
}
inline void EquipmentData::_internal_set_qiwen_current_exp_b(int32_t value) {
  
  _impl_.qiwen_current_exp_b_ = value;
}
inline void EquipmentData::set_qiwen_current_exp_b(int32_t value) {
  _internal_set_qiwen_current_exp_b(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.qiwen_current_exp_b)
}

// int32 qiwen_current_exp_c = 57;
inline void EquipmentData::clear_qiwen_current_exp_c() {
  _impl_.qiwen_current_exp_c_ = 0;
}
inline int32_t EquipmentData::_internal_qiwen_current_exp_c() const {
  return _impl_.qiwen_current_exp_c_;
}
inline int32_t EquipmentData::qiwen_current_exp_c() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_current_exp_c)
  return _internal_qiwen_current_exp_c();
}
inline void EquipmentData::_internal_set_qiwen_current_exp_c(int32_t value) {
  
  _impl_.qiwen_current_exp_c_ = value;
}
inline void EquipmentData::set_qiwen_current_exp_c(int32_t value) {
  _internal_set_qiwen_current_exp_c(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.qiwen_current_exp_c)
}

// int32 qiwen_total_exp_a = 58;
inline void EquipmentData::clear_qiwen_total_exp_a() {
  _impl_.qiwen_total_exp_a_ = 0;
}
inline int32_t EquipmentData::_internal_qiwen_total_exp_a() const {
  return _impl_.qiwen_total_exp_a_;
}
inline int32_t EquipmentData::qiwen_total_exp_a() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_total_exp_a)
  return _internal_qiwen_total_exp_a();
}
inline void EquipmentData::_internal_set_qiwen_total_exp_a(int32_t value) {
  
  _impl_.qiwen_total_exp_a_ = value;
}
inline void EquipmentData::set_qiwen_total_exp_a(int32_t value) {
  _internal_set_qiwen_total_exp_a(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.qiwen_total_exp_a)
}

// int32 qiwen_total_exp_b = 59;
inline void EquipmentData::clear_qiwen_total_exp_b() {
  _impl_.qiwen_total_exp_b_ = 0;
}
inline int32_t EquipmentData::_internal_qiwen_total_exp_b() const {
  return _impl_.qiwen_total_exp_b_;
}
inline int32_t EquipmentData::qiwen_total_exp_b() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_total_exp_b)
  return _internal_qiwen_total_exp_b();
}
inline void EquipmentData::_internal_set_qiwen_total_exp_b(int32_t value) {
  
  _impl_.qiwen_total_exp_b_ = value;
}
inline void EquipmentData::set_qiwen_total_exp_b(int32_t value) {
  _internal_set_qiwen_total_exp_b(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.qiwen_total_exp_b)
}

// int32 qiwen_total_exp_c = 60;
inline void EquipmentData::clear_qiwen_total_exp_c() {
  _impl_.qiwen_total_exp_c_ = 0;
}
inline int32_t EquipmentData::_internal_qiwen_total_exp_c() const {
  return _impl_.qiwen_total_exp_c_;
}
inline int32_t EquipmentData::qiwen_total_exp_c() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_total_exp_c)
  return _internal_qiwen_total_exp_c();
}
inline void EquipmentData::_internal_set_qiwen_total_exp_c(int32_t value) {
  
  _impl_.qiwen_total_exp_c_ = value;
}
inline void EquipmentData::set_qiwen_total_exp_c(int32_t value) {
  _internal_set_qiwen_total_exp_c(value);
  // @@protoc_insertion_point(field_set:idlepb.EquipmentData.qiwen_total_exp_c)
}

// .idlepb.GameStatsData base_stats = 100;
inline bool EquipmentData::_internal_has_base_stats() const {
  return this != internal_default_instance() && _impl_.base_stats_ != nullptr;
}
inline bool EquipmentData::has_base_stats() const {
  return _internal_has_base_stats();
}
inline void EquipmentData::clear_base_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_stats_ != nullptr) {
    delete _impl_.base_stats_;
  }
  _impl_.base_stats_ = nullptr;
}
inline const ::idlepb::GameStatsData& EquipmentData::_internal_base_stats() const {
  const ::idlepb::GameStatsData* p = _impl_.base_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::GameStatsData&>(
      ::idlepb::_GameStatsData_default_instance_);
}
inline const ::idlepb::GameStatsData& EquipmentData::base_stats() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.base_stats)
  return _internal_base_stats();
}
inline void EquipmentData::unsafe_arena_set_allocated_base_stats(
    ::idlepb::GameStatsData* base_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_stats_);
  }
  _impl_.base_stats_ = base_stats;
  if (base_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.EquipmentData.base_stats)
}
inline ::idlepb::GameStatsData* EquipmentData::release_base_stats() {
  
  ::idlepb::GameStatsData* temp = _impl_.base_stats_;
  _impl_.base_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::unsafe_arena_release_base_stats() {
  // @@protoc_insertion_point(field_release:idlepb.EquipmentData.base_stats)
  
  ::idlepb::GameStatsData* temp = _impl_.base_stats_;
  _impl_.base_stats_ = nullptr;
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::_internal_mutable_base_stats() {
  
  if (_impl_.base_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::GameStatsData>(GetArenaForAllocation());
    _impl_.base_stats_ = p;
  }
  return _impl_.base_stats_;
}
inline ::idlepb::GameStatsData* EquipmentData::mutable_base_stats() {
  ::idlepb::GameStatsData* _msg = _internal_mutable_base_stats();
  // @@protoc_insertion_point(field_mutable:idlepb.EquipmentData.base_stats)
  return _msg;
}
inline void EquipmentData::set_allocated_base_stats(::idlepb::GameStatsData* base_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_stats_;
  }
  if (base_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base_stats);
    if (message_arena != submessage_arena) {
      base_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_stats_ = base_stats;
  // @@protoc_insertion_point(field_set_allocated:idlepb.EquipmentData.base_stats)
}

// .idlepb.GameStatsData reinforce_stats = 101;
inline bool EquipmentData::_internal_has_reinforce_stats() const {
  return this != internal_default_instance() && _impl_.reinforce_stats_ != nullptr;
}
inline bool EquipmentData::has_reinforce_stats() const {
  return _internal_has_reinforce_stats();
}
inline void EquipmentData::clear_reinforce_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.reinforce_stats_ != nullptr) {
    delete _impl_.reinforce_stats_;
  }
  _impl_.reinforce_stats_ = nullptr;
}
inline const ::idlepb::GameStatsData& EquipmentData::_internal_reinforce_stats() const {
  const ::idlepb::GameStatsData* p = _impl_.reinforce_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::GameStatsData&>(
      ::idlepb::_GameStatsData_default_instance_);
}
inline const ::idlepb::GameStatsData& EquipmentData::reinforce_stats() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.reinforce_stats)
  return _internal_reinforce_stats();
}
inline void EquipmentData::unsafe_arena_set_allocated_reinforce_stats(
    ::idlepb::GameStatsData* reinforce_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reinforce_stats_);
  }
  _impl_.reinforce_stats_ = reinforce_stats;
  if (reinforce_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.EquipmentData.reinforce_stats)
}
inline ::idlepb::GameStatsData* EquipmentData::release_reinforce_stats() {
  
  ::idlepb::GameStatsData* temp = _impl_.reinforce_stats_;
  _impl_.reinforce_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::unsafe_arena_release_reinforce_stats() {
  // @@protoc_insertion_point(field_release:idlepb.EquipmentData.reinforce_stats)
  
  ::idlepb::GameStatsData* temp = _impl_.reinforce_stats_;
  _impl_.reinforce_stats_ = nullptr;
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::_internal_mutable_reinforce_stats() {
  
  if (_impl_.reinforce_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::GameStatsData>(GetArenaForAllocation());
    _impl_.reinforce_stats_ = p;
  }
  return _impl_.reinforce_stats_;
}
inline ::idlepb::GameStatsData* EquipmentData::mutable_reinforce_stats() {
  ::idlepb::GameStatsData* _msg = _internal_mutable_reinforce_stats();
  // @@protoc_insertion_point(field_mutable:idlepb.EquipmentData.reinforce_stats)
  return _msg;
}
inline void EquipmentData::set_allocated_reinforce_stats(::idlepb::GameStatsData* reinforce_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reinforce_stats_;
  }
  if (reinforce_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reinforce_stats);
    if (message_arena != submessage_arena) {
      reinforce_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reinforce_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reinforce_stats_ = reinforce_stats;
  // @@protoc_insertion_point(field_set_allocated:idlepb.EquipmentData.reinforce_stats)
}

// .idlepb.GameStatsData qiwen_stats = 102;
inline bool EquipmentData::_internal_has_qiwen_stats() const {
  return this != internal_default_instance() && _impl_.qiwen_stats_ != nullptr;
}
inline bool EquipmentData::has_qiwen_stats() const {
  return _internal_has_qiwen_stats();
}
inline void EquipmentData::clear_qiwen_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.qiwen_stats_ != nullptr) {
    delete _impl_.qiwen_stats_;
  }
  _impl_.qiwen_stats_ = nullptr;
}
inline const ::idlepb::GameStatsData& EquipmentData::_internal_qiwen_stats() const {
  const ::idlepb::GameStatsData* p = _impl_.qiwen_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::GameStatsData&>(
      ::idlepb::_GameStatsData_default_instance_);
}
inline const ::idlepb::GameStatsData& EquipmentData::qiwen_stats() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_stats)
  return _internal_qiwen_stats();
}
inline void EquipmentData::unsafe_arena_set_allocated_qiwen_stats(
    ::idlepb::GameStatsData* qiwen_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qiwen_stats_);
  }
  _impl_.qiwen_stats_ = qiwen_stats;
  if (qiwen_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.EquipmentData.qiwen_stats)
}
inline ::idlepb::GameStatsData* EquipmentData::release_qiwen_stats() {
  
  ::idlepb::GameStatsData* temp = _impl_.qiwen_stats_;
  _impl_.qiwen_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::unsafe_arena_release_qiwen_stats() {
  // @@protoc_insertion_point(field_release:idlepb.EquipmentData.qiwen_stats)
  
  ::idlepb::GameStatsData* temp = _impl_.qiwen_stats_;
  _impl_.qiwen_stats_ = nullptr;
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::_internal_mutable_qiwen_stats() {
  
  if (_impl_.qiwen_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::GameStatsData>(GetArenaForAllocation());
    _impl_.qiwen_stats_ = p;
  }
  return _impl_.qiwen_stats_;
}
inline ::idlepb::GameStatsData* EquipmentData::mutable_qiwen_stats() {
  ::idlepb::GameStatsData* _msg = _internal_mutable_qiwen_stats();
  // @@protoc_insertion_point(field_mutable:idlepb.EquipmentData.qiwen_stats)
  return _msg;
}
inline void EquipmentData::set_allocated_qiwen_stats(::idlepb::GameStatsData* qiwen_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.qiwen_stats_;
  }
  if (qiwen_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(qiwen_stats);
    if (message_arena != submessage_arena) {
      qiwen_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qiwen_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.qiwen_stats_ = qiwen_stats;
  // @@protoc_insertion_point(field_set_allocated:idlepb.EquipmentData.qiwen_stats)
}

// .idlepb.GameStatsData refine_stats = 103;
inline bool EquipmentData::_internal_has_refine_stats() const {
  return this != internal_default_instance() && _impl_.refine_stats_ != nullptr;
}
inline bool EquipmentData::has_refine_stats() const {
  return _internal_has_refine_stats();
}
inline void EquipmentData::clear_refine_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.refine_stats_ != nullptr) {
    delete _impl_.refine_stats_;
  }
  _impl_.refine_stats_ = nullptr;
}
inline const ::idlepb::GameStatsData& EquipmentData::_internal_refine_stats() const {
  const ::idlepb::GameStatsData* p = _impl_.refine_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::GameStatsData&>(
      ::idlepb::_GameStatsData_default_instance_);
}
inline const ::idlepb::GameStatsData& EquipmentData::refine_stats() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.refine_stats)
  return _internal_refine_stats();
}
inline void EquipmentData::unsafe_arena_set_allocated_refine_stats(
    ::idlepb::GameStatsData* refine_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_stats_);
  }
  _impl_.refine_stats_ = refine_stats;
  if (refine_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.EquipmentData.refine_stats)
}
inline ::idlepb::GameStatsData* EquipmentData::release_refine_stats() {
  
  ::idlepb::GameStatsData* temp = _impl_.refine_stats_;
  _impl_.refine_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::unsafe_arena_release_refine_stats() {
  // @@protoc_insertion_point(field_release:idlepb.EquipmentData.refine_stats)
  
  ::idlepb::GameStatsData* temp = _impl_.refine_stats_;
  _impl_.refine_stats_ = nullptr;
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::_internal_mutable_refine_stats() {
  
  if (_impl_.refine_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::GameStatsData>(GetArenaForAllocation());
    _impl_.refine_stats_ = p;
  }
  return _impl_.refine_stats_;
}
inline ::idlepb::GameStatsData* EquipmentData::mutable_refine_stats() {
  ::idlepb::GameStatsData* _msg = _internal_mutable_refine_stats();
  // @@protoc_insertion_point(field_mutable:idlepb.EquipmentData.refine_stats)
  return _msg;
}
inline void EquipmentData::set_allocated_refine_stats(::idlepb::GameStatsData* refine_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.refine_stats_;
  }
  if (refine_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(refine_stats);
    if (message_arena != submessage_arena) {
      refine_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refine_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.refine_stats_ = refine_stats;
  // @@protoc_insertion_point(field_set_allocated:idlepb.EquipmentData.refine_stats)
}

// .idlepb.GameStatsData perk_stats = 104;
inline bool EquipmentData::_internal_has_perk_stats() const {
  return this != internal_default_instance() && _impl_.perk_stats_ != nullptr;
}
inline bool EquipmentData::has_perk_stats() const {
  return _internal_has_perk_stats();
}
inline void EquipmentData::clear_perk_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.perk_stats_ != nullptr) {
    delete _impl_.perk_stats_;
  }
  _impl_.perk_stats_ = nullptr;
}
inline const ::idlepb::GameStatsData& EquipmentData::_internal_perk_stats() const {
  const ::idlepb::GameStatsData* p = _impl_.perk_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::GameStatsData&>(
      ::idlepb::_GameStatsData_default_instance_);
}
inline const ::idlepb::GameStatsData& EquipmentData::perk_stats() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.perk_stats)
  return _internal_perk_stats();
}
inline void EquipmentData::unsafe_arena_set_allocated_perk_stats(
    ::idlepb::GameStatsData* perk_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.perk_stats_);
  }
  _impl_.perk_stats_ = perk_stats;
  if (perk_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.EquipmentData.perk_stats)
}
inline ::idlepb::GameStatsData* EquipmentData::release_perk_stats() {
  
  ::idlepb::GameStatsData* temp = _impl_.perk_stats_;
  _impl_.perk_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::unsafe_arena_release_perk_stats() {
  // @@protoc_insertion_point(field_release:idlepb.EquipmentData.perk_stats)
  
  ::idlepb::GameStatsData* temp = _impl_.perk_stats_;
  _impl_.perk_stats_ = nullptr;
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::_internal_mutable_perk_stats() {
  
  if (_impl_.perk_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::GameStatsData>(GetArenaForAllocation());
    _impl_.perk_stats_ = p;
  }
  return _impl_.perk_stats_;
}
inline ::idlepb::GameStatsData* EquipmentData::mutable_perk_stats() {
  ::idlepb::GameStatsData* _msg = _internal_mutable_perk_stats();
  // @@protoc_insertion_point(field_mutable:idlepb.EquipmentData.perk_stats)
  return _msg;
}
inline void EquipmentData::set_allocated_perk_stats(::idlepb::GameStatsData* perk_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.perk_stats_;
  }
  if (perk_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(perk_stats);
    if (message_arena != submessage_arena) {
      perk_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perk_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.perk_stats_ = perk_stats;
  // @@protoc_insertion_point(field_set_allocated:idlepb.EquipmentData.perk_stats)
}

// .idlepb.GameStatsData qiwen_resonance_stats = 105;
inline bool EquipmentData::_internal_has_qiwen_resonance_stats() const {
  return this != internal_default_instance() && _impl_.qiwen_resonance_stats_ != nullptr;
}
inline bool EquipmentData::has_qiwen_resonance_stats() const {
  return _internal_has_qiwen_resonance_stats();
}
inline void EquipmentData::clear_qiwen_resonance_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.qiwen_resonance_stats_ != nullptr) {
    delete _impl_.qiwen_resonance_stats_;
  }
  _impl_.qiwen_resonance_stats_ = nullptr;
}
inline const ::idlepb::GameStatsData& EquipmentData::_internal_qiwen_resonance_stats() const {
  const ::idlepb::GameStatsData* p = _impl_.qiwen_resonance_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::GameStatsData&>(
      ::idlepb::_GameStatsData_default_instance_);
}
inline const ::idlepb::GameStatsData& EquipmentData::qiwen_resonance_stats() const {
  // @@protoc_insertion_point(field_get:idlepb.EquipmentData.qiwen_resonance_stats)
  return _internal_qiwen_resonance_stats();
}
inline void EquipmentData::unsafe_arena_set_allocated_qiwen_resonance_stats(
    ::idlepb::GameStatsData* qiwen_resonance_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qiwen_resonance_stats_);
  }
  _impl_.qiwen_resonance_stats_ = qiwen_resonance_stats;
  if (qiwen_resonance_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.EquipmentData.qiwen_resonance_stats)
}
inline ::idlepb::GameStatsData* EquipmentData::release_qiwen_resonance_stats() {
  
  ::idlepb::GameStatsData* temp = _impl_.qiwen_resonance_stats_;
  _impl_.qiwen_resonance_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::unsafe_arena_release_qiwen_resonance_stats() {
  // @@protoc_insertion_point(field_release:idlepb.EquipmentData.qiwen_resonance_stats)
  
  ::idlepb::GameStatsData* temp = _impl_.qiwen_resonance_stats_;
  _impl_.qiwen_resonance_stats_ = nullptr;
  return temp;
}
inline ::idlepb::GameStatsData* EquipmentData::_internal_mutable_qiwen_resonance_stats() {
  
  if (_impl_.qiwen_resonance_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::GameStatsData>(GetArenaForAllocation());
    _impl_.qiwen_resonance_stats_ = p;
  }
  return _impl_.qiwen_resonance_stats_;
}
inline ::idlepb::GameStatsData* EquipmentData::mutable_qiwen_resonance_stats() {
  ::idlepb::GameStatsData* _msg = _internal_mutable_qiwen_resonance_stats();
  // @@protoc_insertion_point(field_mutable:idlepb.EquipmentData.qiwen_resonance_stats)
  return _msg;
}
inline void EquipmentData::set_allocated_qiwen_resonance_stats(::idlepb::GameStatsData* qiwen_resonance_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.qiwen_resonance_stats_;
  }
  if (qiwen_resonance_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(qiwen_resonance_stats);
    if (message_arena != submessage_arena) {
      qiwen_resonance_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qiwen_resonance_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.qiwen_resonance_stats_ = qiwen_resonance_stats;
  // @@protoc_insertion_point(field_set_allocated:idlepb.EquipmentData.qiwen_resonance_stats)
}

// -------------------------------------------------------------------

// ItemData

// int64 id = 1;
inline void ItemData::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t ItemData::_internal_id() const {
  return _impl_.id_;
}
inline int64_t ItemData::id() const {
  // @@protoc_insertion_point(field_get:idlepb.ItemData.id)
  return _internal_id();
}
inline void ItemData::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void ItemData::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ItemData.id)
}

// int32 cfg_id = 2;
inline void ItemData::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t ItemData::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t ItemData::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ItemData.cfg_id)
  return _internal_cfg_id();
}
inline void ItemData::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void ItemData::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ItemData.cfg_id)
}

// int32 num = 3;
inline void ItemData::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t ItemData::_internal_num() const {
  return _impl_.num_;
}
inline int32_t ItemData::num() const {
  // @@protoc_insertion_point(field_get:idlepb.ItemData.num)
  return _internal_num();
}
inline void ItemData::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void ItemData::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.ItemData.num)
}

// bool locked = 4;
inline void ItemData::clear_locked() {
  _impl_.locked_ = false;
}
inline bool ItemData::_internal_locked() const {
  return _impl_.locked_;
}
inline bool ItemData::locked() const {
  // @@protoc_insertion_point(field_get:idlepb.ItemData.locked)
  return _internal_locked();
}
inline void ItemData::_internal_set_locked(bool value) {
  
  _impl_.locked_ = value;
}
inline void ItemData::set_locked(bool value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:idlepb.ItemData.locked)
}

// .idlepb.EquipmentData equipment_data = 10;
inline bool ItemData::_internal_has_equipment_data() const {
  return this != internal_default_instance() && _impl_.equipment_data_ != nullptr;
}
inline bool ItemData::has_equipment_data() const {
  return _internal_has_equipment_data();
}
inline void ItemData::clear_equipment_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.equipment_data_ != nullptr) {
    delete _impl_.equipment_data_;
  }
  _impl_.equipment_data_ = nullptr;
}
inline const ::idlepb::EquipmentData& ItemData::_internal_equipment_data() const {
  const ::idlepb::EquipmentData* p = _impl_.equipment_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::EquipmentData&>(
      ::idlepb::_EquipmentData_default_instance_);
}
inline const ::idlepb::EquipmentData& ItemData::equipment_data() const {
  // @@protoc_insertion_point(field_get:idlepb.ItemData.equipment_data)
  return _internal_equipment_data();
}
inline void ItemData::unsafe_arena_set_allocated_equipment_data(
    ::idlepb::EquipmentData* equipment_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equipment_data_);
  }
  _impl_.equipment_data_ = equipment_data;
  if (equipment_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.ItemData.equipment_data)
}
inline ::idlepb::EquipmentData* ItemData::release_equipment_data() {
  
  ::idlepb::EquipmentData* temp = _impl_.equipment_data_;
  _impl_.equipment_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::EquipmentData* ItemData::unsafe_arena_release_equipment_data() {
  // @@protoc_insertion_point(field_release:idlepb.ItemData.equipment_data)
  
  ::idlepb::EquipmentData* temp = _impl_.equipment_data_;
  _impl_.equipment_data_ = nullptr;
  return temp;
}
inline ::idlepb::EquipmentData* ItemData::_internal_mutable_equipment_data() {
  
  if (_impl_.equipment_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::EquipmentData>(GetArenaForAllocation());
    _impl_.equipment_data_ = p;
  }
  return _impl_.equipment_data_;
}
inline ::idlepb::EquipmentData* ItemData::mutable_equipment_data() {
  ::idlepb::EquipmentData* _msg = _internal_mutable_equipment_data();
  // @@protoc_insertion_point(field_mutable:idlepb.ItemData.equipment_data)
  return _msg;
}
inline void ItemData::set_allocated_equipment_data(::idlepb::EquipmentData* equipment_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.equipment_data_;
  }
  if (equipment_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(equipment_data);
    if (message_arena != submessage_arena) {
      equipment_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equipment_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.equipment_data_ = equipment_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.ItemData.equipment_data)
}

// -------------------------------------------------------------------

// SimpleItemData

// int32 cfg_id = 1;
inline void SimpleItemData::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t SimpleItemData::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t SimpleItemData::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleItemData.cfg_id)
  return _internal_cfg_id();
}
inline void SimpleItemData::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void SimpleItemData::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleItemData.cfg_id)
}

// int32 num = 2;
inline void SimpleItemData::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t SimpleItemData::_internal_num() const {
  return _impl_.num_;
}
inline int32_t SimpleItemData::num() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleItemData.num)
  return _internal_num();
}
inline void SimpleItemData::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void SimpleItemData::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleItemData.num)
}

// -------------------------------------------------------------------

// TemporaryPackageItem

// int64 id = 1;
inline void TemporaryPackageItem::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t TemporaryPackageItem::_internal_id() const {
  return _impl_.id_;
}
inline int64_t TemporaryPackageItem::id() const {
  // @@protoc_insertion_point(field_get:idlepb.TemporaryPackageItem.id)
  return _internal_id();
}
inline void TemporaryPackageItem::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void TemporaryPackageItem::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.TemporaryPackageItem.id)
}

// int32 cfg_id = 2;
inline void TemporaryPackageItem::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t TemporaryPackageItem::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t TemporaryPackageItem::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.TemporaryPackageItem.cfg_id)
  return _internal_cfg_id();
}
inline void TemporaryPackageItem::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void TemporaryPackageItem::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.TemporaryPackageItem.cfg_id)
}

// int32 num = 3;
inline void TemporaryPackageItem::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t TemporaryPackageItem::_internal_num() const {
  return _impl_.num_;
}
inline int32_t TemporaryPackageItem::num() const {
  // @@protoc_insertion_point(field_get:idlepb.TemporaryPackageItem.num)
  return _internal_num();
}
inline void TemporaryPackageItem::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void TemporaryPackageItem::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.TemporaryPackageItem.num)
}

// -------------------------------------------------------------------

// ArenaExplorationStatisticalItem

// int64 time = 1;
inline void ArenaExplorationStatisticalItem::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t ArenaExplorationStatisticalItem::_internal_time() const {
  return _impl_.time_;
}
inline int64_t ArenaExplorationStatisticalItem::time() const {
  // @@protoc_insertion_point(field_get:idlepb.ArenaExplorationStatisticalItem.time)
  return _internal_time();
}
inline void ArenaExplorationStatisticalItem::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void ArenaExplorationStatisticalItem::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:idlepb.ArenaExplorationStatisticalItem.time)
}

// string mapname = 2;
inline void ArenaExplorationStatisticalItem::clear_mapname() {
  _impl_.mapname_.ClearToEmpty();
}
inline const std::string& ArenaExplorationStatisticalItem::mapname() const {
  // @@protoc_insertion_point(field_get:idlepb.ArenaExplorationStatisticalItem.mapname)
  return _internal_mapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArenaExplorationStatisticalItem::set_mapname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.ArenaExplorationStatisticalItem.mapname)
}
inline std::string* ArenaExplorationStatisticalItem::mutable_mapname() {
  std::string* _s = _internal_mutable_mapname();
  // @@protoc_insertion_point(field_mutable:idlepb.ArenaExplorationStatisticalItem.mapname)
  return _s;
}
inline const std::string& ArenaExplorationStatisticalItem::_internal_mapname() const {
  return _impl_.mapname_.Get();
}
inline void ArenaExplorationStatisticalItem::_internal_set_mapname(const std::string& value) {
  
  _impl_.mapname_.Set(value, GetArenaForAllocation());
}
inline std::string* ArenaExplorationStatisticalItem::_internal_mutable_mapname() {
  
  return _impl_.mapname_.Mutable(GetArenaForAllocation());
}
inline std::string* ArenaExplorationStatisticalItem::release_mapname() {
  // @@protoc_insertion_point(field_release:idlepb.ArenaExplorationStatisticalItem.mapname)
  return _impl_.mapname_.Release();
}
inline void ArenaExplorationStatisticalItem::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    
  } else {
    
  }
  _impl_.mapname_.SetAllocated(mapname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapname_.IsDefault()) {
    _impl_.mapname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.ArenaExplorationStatisticalItem.mapname)
}

// int32 killnum = 3;
inline void ArenaExplorationStatisticalItem::clear_killnum() {
  _impl_.killnum_ = 0;
}
inline int32_t ArenaExplorationStatisticalItem::_internal_killnum() const {
  return _impl_.killnum_;
}
inline int32_t ArenaExplorationStatisticalItem::killnum() const {
  // @@protoc_insertion_point(field_get:idlepb.ArenaExplorationStatisticalItem.killnum)
  return _internal_killnum();
}
inline void ArenaExplorationStatisticalItem::_internal_set_killnum(int32_t value) {
  
  _impl_.killnum_ = value;
}
inline void ArenaExplorationStatisticalItem::set_killnum(int32_t value) {
  _internal_set_killnum(value);
  // @@protoc_insertion_point(field_set:idlepb.ArenaExplorationStatisticalItem.killnum)
}

// int32 deathnum = 4;
inline void ArenaExplorationStatisticalItem::clear_deathnum() {
  _impl_.deathnum_ = 0;
}
inline int32_t ArenaExplorationStatisticalItem::_internal_deathnum() const {
  return _impl_.deathnum_;
}
inline int32_t ArenaExplorationStatisticalItem::deathnum() const {
  // @@protoc_insertion_point(field_get:idlepb.ArenaExplorationStatisticalItem.deathnum)
  return _internal_deathnum();
}
inline void ArenaExplorationStatisticalItem::_internal_set_deathnum(int32_t value) {
  
  _impl_.deathnum_ = value;
}
inline void ArenaExplorationStatisticalItem::set_deathnum(int32_t value) {
  _internal_set_deathnum(value);
  // @@protoc_insertion_point(field_set:idlepb.ArenaExplorationStatisticalItem.deathnum)
}

// int64 itemnum = 5;
inline void ArenaExplorationStatisticalItem::clear_itemnum() {
  _impl_.itemnum_ = int64_t{0};
}
inline int64_t ArenaExplorationStatisticalItem::_internal_itemnum() const {
  return _impl_.itemnum_;
}
inline int64_t ArenaExplorationStatisticalItem::itemnum() const {
  // @@protoc_insertion_point(field_get:idlepb.ArenaExplorationStatisticalItem.itemnum)
  return _internal_itemnum();
}
inline void ArenaExplorationStatisticalItem::_internal_set_itemnum(int64_t value) {
  
  _impl_.itemnum_ = value;
}
inline void ArenaExplorationStatisticalItem::set_itemnum(int64_t value) {
  _internal_set_itemnum(value);
  // @@protoc_insertion_point(field_set:idlepb.ArenaExplorationStatisticalItem.itemnum)
}

// int64 moneynum = 6;
inline void ArenaExplorationStatisticalItem::clear_moneynum() {
  _impl_.moneynum_ = int64_t{0};
}
inline int64_t ArenaExplorationStatisticalItem::_internal_moneynum() const {
  return _impl_.moneynum_;
}
inline int64_t ArenaExplorationStatisticalItem::moneynum() const {
  // @@protoc_insertion_point(field_get:idlepb.ArenaExplorationStatisticalItem.moneynum)
  return _internal_moneynum();
}
inline void ArenaExplorationStatisticalItem::_internal_set_moneynum(int64_t value) {
  
  _impl_.moneynum_ = value;
}
inline void ArenaExplorationStatisticalItem::set_moneynum(int64_t value) {
  _internal_set_moneynum(value);
  // @@protoc_insertion_point(field_set:idlepb.ArenaExplorationStatisticalItem.moneynum)
}

// -------------------------------------------------------------------

// ShopItemBase

// int32 index = 1;
inline void ShopItemBase::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t ShopItemBase::_internal_index() const {
  return _impl_.index_;
}
inline int32_t ShopItemBase::index() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItemBase.index)
  return _internal_index();
}
inline void ShopItemBase::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void ShopItemBase::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItemBase.index)
}

// int32 item_id = 2;
inline void ShopItemBase::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t ShopItemBase::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t ShopItemBase::item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItemBase.item_id)
  return _internal_item_id();
}
inline void ShopItemBase::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void ShopItemBase::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItemBase.item_id)
}

// int32 num = 3;
inline void ShopItemBase::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t ShopItemBase::_internal_num() const {
  return _impl_.num_;
}
inline int32_t ShopItemBase::num() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItemBase.num)
  return _internal_num();
}
inline void ShopItemBase::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void ShopItemBase::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItemBase.num)
}

// int32 price = 4;
inline void ShopItemBase::clear_price() {
  _impl_.price_ = 0;
}
inline int32_t ShopItemBase::_internal_price() const {
  return _impl_.price_;
}
inline int32_t ShopItemBase::price() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItemBase.price)
  return _internal_price();
}
inline void ShopItemBase::_internal_set_price(int32_t value) {
  
  _impl_.price_ = value;
}
inline void ShopItemBase::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItemBase.price)
}

// int32 count = 5;
inline void ShopItemBase::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t ShopItemBase::_internal_count() const {
  return _impl_.count_;
}
inline int32_t ShopItemBase::count() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItemBase.count)
  return _internal_count();
}
inline void ShopItemBase::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void ShopItemBase::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItemBase.count)
}

// int32 bought_count = 6;
inline void ShopItemBase::clear_bought_count() {
  _impl_.bought_count_ = 0;
}
inline int32_t ShopItemBase::_internal_bought_count() const {
  return _impl_.bought_count_;
}
inline int32_t ShopItemBase::bought_count() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItemBase.bought_count)
  return _internal_bought_count();
}
inline void ShopItemBase::_internal_set_bought_count(int32_t value) {
  
  _impl_.bought_count_ = value;
}
inline void ShopItemBase::set_bought_count(int32_t value) {
  _internal_set_bought_count(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItemBase.bought_count)
}

// int32 cfg_id = 7;
inline void ShopItemBase::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t ShopItemBase::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t ShopItemBase::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItemBase.cfg_id)
  return _internal_cfg_id();
}
inline void ShopItemBase::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void ShopItemBase::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItemBase.cfg_id)
}

// bool must_buy = 8;
inline void ShopItemBase::clear_must_buy() {
  _impl_.must_buy_ = false;
}
inline bool ShopItemBase::_internal_must_buy() const {
  return _impl_.must_buy_;
}
inline bool ShopItemBase::must_buy() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItemBase.must_buy)
  return _internal_must_buy();
}
inline void ShopItemBase::_internal_set_must_buy(bool value) {
  
  _impl_.must_buy_ = value;
}
inline void ShopItemBase::set_must_buy(bool value) {
  _internal_set_must_buy(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItemBase.must_buy)
}

// float discount = 9;
inline void ShopItemBase::clear_discount() {
  _impl_.discount_ = 0;
}
inline float ShopItemBase::_internal_discount() const {
  return _impl_.discount_;
}
inline float ShopItemBase::discount() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItemBase.discount)
  return _internal_discount();
}
inline void ShopItemBase::_internal_set_discount(float value) {
  
  _impl_.discount_ = value;
}
inline void ShopItemBase::set_discount(float value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItemBase.discount)
}

// -------------------------------------------------------------------

// ShopItem

// int32 index = 1;
inline void ShopItem::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t ShopItem::_internal_index() const {
  return _impl_.index_;
}
inline int32_t ShopItem::index() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItem.index)
  return _internal_index();
}
inline void ShopItem::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void ShopItem::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItem.index)
}

// int32 cfg_id = 2;
inline void ShopItem::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t ShopItem::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t ShopItem::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItem.cfg_id)
  return _internal_cfg_id();
}
inline void ShopItem::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void ShopItem::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItem.cfg_id)
}

// int32 num = 3;
inline void ShopItem::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t ShopItem::_internal_num() const {
  return _impl_.num_;
}
inline int32_t ShopItem::num() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItem.num)
  return _internal_num();
}
inline void ShopItem::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void ShopItem::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItem.num)
}

// int32 money = 4;
inline void ShopItem::clear_money() {
  _impl_.money_ = 0;
}
inline int32_t ShopItem::_internal_money() const {
  return _impl_.money_;
}
inline int32_t ShopItem::money() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItem.money)
  return _internal_money();
}
inline void ShopItem::_internal_set_money(int32_t value) {
  
  _impl_.money_ = value;
}
inline void ShopItem::set_money(int32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItem.money)
}

// bool is_sold_out = 5;
inline void ShopItem::clear_is_sold_out() {
  _impl_.is_sold_out_ = false;
}
inline bool ShopItem::_internal_is_sold_out() const {
  return _impl_.is_sold_out_;
}
inline bool ShopItem::is_sold_out() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItem.is_sold_out)
  return _internal_is_sold_out();
}
inline void ShopItem::_internal_set_is_sold_out(bool value) {
  
  _impl_.is_sold_out_ = value;
}
inline void ShopItem::set_is_sold_out(bool value) {
  _internal_set_is_sold_out(value);
  // @@protoc_insertion_point(field_set:idlepb.ShopItem.is_sold_out)
}

// .idlepb.ItemData item_data = 6;
inline bool ShopItem::_internal_has_item_data() const {
  return this != internal_default_instance() && _impl_.item_data_ != nullptr;
}
inline bool ShopItem::has_item_data() const {
  return _internal_has_item_data();
}
inline void ShopItem::clear_item_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_data_ != nullptr) {
    delete _impl_.item_data_;
  }
  _impl_.item_data_ = nullptr;
}
inline const ::idlepb::ItemData& ShopItem::_internal_item_data() const {
  const ::idlepb::ItemData* p = _impl_.item_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ItemData&>(
      ::idlepb::_ItemData_default_instance_);
}
inline const ::idlepb::ItemData& ShopItem::item_data() const {
  // @@protoc_insertion_point(field_get:idlepb.ShopItem.item_data)
  return _internal_item_data();
}
inline void ShopItem::unsafe_arena_set_allocated_item_data(
    ::idlepb::ItemData* item_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_data_);
  }
  _impl_.item_data_ = item_data;
  if (item_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.ShopItem.item_data)
}
inline ::idlepb::ItemData* ShopItem::release_item_data() {
  
  ::idlepb::ItemData* temp = _impl_.item_data_;
  _impl_.item_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ItemData* ShopItem::unsafe_arena_release_item_data() {
  // @@protoc_insertion_point(field_release:idlepb.ShopItem.item_data)
  
  ::idlepb::ItemData* temp = _impl_.item_data_;
  _impl_.item_data_ = nullptr;
  return temp;
}
inline ::idlepb::ItemData* ShopItem::_internal_mutable_item_data() {
  
  if (_impl_.item_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ItemData>(GetArenaForAllocation());
    _impl_.item_data_ = p;
  }
  return _impl_.item_data_;
}
inline ::idlepb::ItemData* ShopItem::mutable_item_data() {
  ::idlepb::ItemData* _msg = _internal_mutable_item_data();
  // @@protoc_insertion_point(field_mutable:idlepb.ShopItem.item_data)
  return _msg;
}
inline void ShopItem::set_allocated_item_data(::idlepb::ItemData* item_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_data_;
  }
  if (item_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item_data);
    if (message_arena != submessage_arena) {
      item_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_data_ = item_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.ShopItem.item_data)
}

// -------------------------------------------------------------------

// DeluxeShopItem

// int32 index = 1;
inline void DeluxeShopItem::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t DeluxeShopItem::_internal_index() const {
  return _impl_.index_;
}
inline int32_t DeluxeShopItem::index() const {
  // @@protoc_insertion_point(field_get:idlepb.DeluxeShopItem.index)
  return _internal_index();
}
inline void DeluxeShopItem::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void DeluxeShopItem::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:idlepb.DeluxeShopItem.index)
}

// int32 cfg_id = 2;
inline void DeluxeShopItem::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t DeluxeShopItem::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t DeluxeShopItem::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.DeluxeShopItem.cfg_id)
  return _internal_cfg_id();
}
inline void DeluxeShopItem::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void DeluxeShopItem::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.DeluxeShopItem.cfg_id)
}

// int32 num = 3;
inline void DeluxeShopItem::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t DeluxeShopItem::_internal_num() const {
  return _impl_.num_;
}
inline int32_t DeluxeShopItem::num() const {
  // @@protoc_insertion_point(field_get:idlepb.DeluxeShopItem.num)
  return _internal_num();
}
inline void DeluxeShopItem::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void DeluxeShopItem::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.DeluxeShopItem.num)
}

// int32 sellcount = 4;
inline void DeluxeShopItem::clear_sellcount() {
  _impl_.sellcount_ = 0;
}
inline int32_t DeluxeShopItem::_internal_sellcount() const {
  return _impl_.sellcount_;
}
inline int32_t DeluxeShopItem::sellcount() const {
  // @@protoc_insertion_point(field_get:idlepb.DeluxeShopItem.sellcount)
  return _internal_sellcount();
}
inline void DeluxeShopItem::_internal_set_sellcount(int32_t value) {
  
  _impl_.sellcount_ = value;
}
inline void DeluxeShopItem::set_sellcount(int32_t value) {
  _internal_set_sellcount(value);
  // @@protoc_insertion_point(field_set:idlepb.DeluxeShopItem.sellcount)
}

// int32 discount = 5;
inline void DeluxeShopItem::clear_discount() {
  _impl_.discount_ = 0;
}
inline int32_t DeluxeShopItem::_internal_discount() const {
  return _impl_.discount_;
}
inline int32_t DeluxeShopItem::discount() const {
  // @@protoc_insertion_point(field_get:idlepb.DeluxeShopItem.discount)
  return _internal_discount();
}
inline void DeluxeShopItem::_internal_set_discount(int32_t value) {
  
  _impl_.discount_ = value;
}
inline void DeluxeShopItem::set_discount(int32_t value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:idlepb.DeluxeShopItem.discount)
}

// int32 money = 6;
inline void DeluxeShopItem::clear_money() {
  _impl_.money_ = 0;
}
inline int32_t DeluxeShopItem::_internal_money() const {
  return _impl_.money_;
}
inline int32_t DeluxeShopItem::money() const {
  // @@protoc_insertion_point(field_get:idlepb.DeluxeShopItem.money)
  return _internal_money();
}
inline void DeluxeShopItem::_internal_set_money(int32_t value) {
  
  _impl_.money_ = value;
}
inline void DeluxeShopItem::set_money(int32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:idlepb.DeluxeShopItem.money)
}

// bool is_sold_out = 7;
inline void DeluxeShopItem::clear_is_sold_out() {
  _impl_.is_sold_out_ = false;
}
inline bool DeluxeShopItem::_internal_is_sold_out() const {
  return _impl_.is_sold_out_;
}
inline bool DeluxeShopItem::is_sold_out() const {
  // @@protoc_insertion_point(field_get:idlepb.DeluxeShopItem.is_sold_out)
  return _internal_is_sold_out();
}
inline void DeluxeShopItem::_internal_set_is_sold_out(bool value) {
  
  _impl_.is_sold_out_ = value;
}
inline void DeluxeShopItem::set_is_sold_out(bool value) {
  _internal_set_is_sold_out(value);
  // @@protoc_insertion_point(field_set:idlepb.DeluxeShopItem.is_sold_out)
}

// .idlepb.ItemData item_data = 8;
inline bool DeluxeShopItem::_internal_has_item_data() const {
  return this != internal_default_instance() && _impl_.item_data_ != nullptr;
}
inline bool DeluxeShopItem::has_item_data() const {
  return _internal_has_item_data();
}
inline void DeluxeShopItem::clear_item_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_data_ != nullptr) {
    delete _impl_.item_data_;
  }
  _impl_.item_data_ = nullptr;
}
inline const ::idlepb::ItemData& DeluxeShopItem::_internal_item_data() const {
  const ::idlepb::ItemData* p = _impl_.item_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ItemData&>(
      ::idlepb::_ItemData_default_instance_);
}
inline const ::idlepb::ItemData& DeluxeShopItem::item_data() const {
  // @@protoc_insertion_point(field_get:idlepb.DeluxeShopItem.item_data)
  return _internal_item_data();
}
inline void DeluxeShopItem::unsafe_arena_set_allocated_item_data(
    ::idlepb::ItemData* item_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_data_);
  }
  _impl_.item_data_ = item_data;
  if (item_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.DeluxeShopItem.item_data)
}
inline ::idlepb::ItemData* DeluxeShopItem::release_item_data() {
  
  ::idlepb::ItemData* temp = _impl_.item_data_;
  _impl_.item_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ItemData* DeluxeShopItem::unsafe_arena_release_item_data() {
  // @@protoc_insertion_point(field_release:idlepb.DeluxeShopItem.item_data)
  
  ::idlepb::ItemData* temp = _impl_.item_data_;
  _impl_.item_data_ = nullptr;
  return temp;
}
inline ::idlepb::ItemData* DeluxeShopItem::_internal_mutable_item_data() {
  
  if (_impl_.item_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ItemData>(GetArenaForAllocation());
    _impl_.item_data_ = p;
  }
  return _impl_.item_data_;
}
inline ::idlepb::ItemData* DeluxeShopItem::mutable_item_data() {
  ::idlepb::ItemData* _msg = _internal_mutable_item_data();
  // @@protoc_insertion_point(field_mutable:idlepb.DeluxeShopItem.item_data)
  return _msg;
}
inline void DeluxeShopItem::set_allocated_item_data(::idlepb::ItemData* item_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_data_;
  }
  if (item_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item_data);
    if (message_arena != submessage_arena) {
      item_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_data_ = item_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.DeluxeShopItem.item_data)
}

// bool must_buy = 9;
inline void DeluxeShopItem::clear_must_buy() {
  _impl_.must_buy_ = false;
}
inline bool DeluxeShopItem::_internal_must_buy() const {
  return _impl_.must_buy_;
}
inline bool DeluxeShopItem::must_buy() const {
  // @@protoc_insertion_point(field_get:idlepb.DeluxeShopItem.must_buy)
  return _internal_must_buy();
}
inline void DeluxeShopItem::_internal_set_must_buy(bool value) {
  
  _impl_.must_buy_ = value;
}
inline void DeluxeShopItem::set_must_buy(bool value) {
  _internal_set_must_buy(value);
  // @@protoc_insertion_point(field_set:idlepb.DeluxeShopItem.must_buy)
}

// -------------------------------------------------------------------

// RoleVipShopData

// repeated .idlepb.ShopItemBase shop_items = 1;
inline int RoleVipShopData::_internal_shop_items_size() const {
  return _impl_.shop_items_.size();
}
inline int RoleVipShopData::shop_items_size() const {
  return _internal_shop_items_size();
}
inline void RoleVipShopData::clear_shop_items() {
  _impl_.shop_items_.Clear();
}
inline ::idlepb::ShopItemBase* RoleVipShopData::mutable_shop_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleVipShopData.shop_items)
  return _impl_.shop_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItemBase >*
RoleVipShopData::mutable_shop_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleVipShopData.shop_items)
  return &_impl_.shop_items_;
}
inline const ::idlepb::ShopItemBase& RoleVipShopData::_internal_shop_items(int index) const {
  return _impl_.shop_items_.Get(index);
}
inline const ::idlepb::ShopItemBase& RoleVipShopData::shop_items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleVipShopData.shop_items)
  return _internal_shop_items(index);
}
inline ::idlepb::ShopItemBase* RoleVipShopData::_internal_add_shop_items() {
  return _impl_.shop_items_.Add();
}
inline ::idlepb::ShopItemBase* RoleVipShopData::add_shop_items() {
  ::idlepb::ShopItemBase* _add = _internal_add_shop_items();
  // @@protoc_insertion_point(field_add:idlepb.RoleVipShopData.shop_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItemBase >&
RoleVipShopData::shop_items() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleVipShopData.shop_items)
  return _impl_.shop_items_;
}

// int64 last_day_refresh_time = 2;
inline void RoleVipShopData::clear_last_day_refresh_time() {
  _impl_.last_day_refresh_time_ = int64_t{0};
}
inline int64_t RoleVipShopData::_internal_last_day_refresh_time() const {
  return _impl_.last_day_refresh_time_;
}
inline int64_t RoleVipShopData::last_day_refresh_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleVipShopData.last_day_refresh_time)
  return _internal_last_day_refresh_time();
}
inline void RoleVipShopData::_internal_set_last_day_refresh_time(int64_t value) {
  
  _impl_.last_day_refresh_time_ = value;
}
inline void RoleVipShopData::set_last_day_refresh_time(int64_t value) {
  _internal_set_last_day_refresh_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleVipShopData.last_day_refresh_time)
}

// int64 last_week_refresh_time = 3;
inline void RoleVipShopData::clear_last_week_refresh_time() {
  _impl_.last_week_refresh_time_ = int64_t{0};
}
inline int64_t RoleVipShopData::_internal_last_week_refresh_time() const {
  return _impl_.last_week_refresh_time_;
}
inline int64_t RoleVipShopData::last_week_refresh_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleVipShopData.last_week_refresh_time)
  return _internal_last_week_refresh_time();
}
inline void RoleVipShopData::_internal_set_last_week_refresh_time(int64_t value) {
  
  _impl_.last_week_refresh_time_ = value;
}
inline void RoleVipShopData::set_last_week_refresh_time(int64_t value) {
  _internal_set_last_week_refresh_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleVipShopData.last_week_refresh_time)
}

// -------------------------------------------------------------------

// CharacterModelConfig

// int32 skeleton_type = 51;
inline void CharacterModelConfig::clear_skeleton_type() {
  _impl_.skeleton_type_ = 0;
}
inline int32_t CharacterModelConfig::_internal_skeleton_type() const {
  return _impl_.skeleton_type_;
}
inline int32_t CharacterModelConfig::skeleton_type() const {
  // @@protoc_insertion_point(field_get:idlepb.CharacterModelConfig.skeleton_type)
  return _internal_skeleton_type();
}
inline void CharacterModelConfig::_internal_set_skeleton_type(int32_t value) {
  
  _impl_.skeleton_type_ = value;
}
inline void CharacterModelConfig::set_skeleton_type(int32_t value) {
  _internal_set_skeleton_type(value);
  // @@protoc_insertion_point(field_set:idlepb.CharacterModelConfig.skeleton_type)
}

// repeated int32 model_slots = 52;
inline int CharacterModelConfig::_internal_model_slots_size() const {
  return _impl_.model_slots_.size();
}
inline int CharacterModelConfig::model_slots_size() const {
  return _internal_model_slots_size();
}
inline void CharacterModelConfig::clear_model_slots() {
  _impl_.model_slots_.Clear();
}
inline int32_t CharacterModelConfig::_internal_model_slots(int index) const {
  return _impl_.model_slots_.Get(index);
}
inline int32_t CharacterModelConfig::model_slots(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.CharacterModelConfig.model_slots)
  return _internal_model_slots(index);
}
inline void CharacterModelConfig::set_model_slots(int index, int32_t value) {
  _impl_.model_slots_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.CharacterModelConfig.model_slots)
}
inline void CharacterModelConfig::_internal_add_model_slots(int32_t value) {
  _impl_.model_slots_.Add(value);
}
inline void CharacterModelConfig::add_model_slots(int32_t value) {
  _internal_add_model_slots(value);
  // @@protoc_insertion_point(field_add:idlepb.CharacterModelConfig.model_slots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CharacterModelConfig::_internal_model_slots() const {
  return _impl_.model_slots_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CharacterModelConfig::model_slots() const {
  // @@protoc_insertion_point(field_list:idlepb.CharacterModelConfig.model_slots)
  return _internal_model_slots();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CharacterModelConfig::_internal_mutable_model_slots() {
  return &_impl_.model_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CharacterModelConfig::mutable_model_slots() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.CharacterModelConfig.model_slots)
  return _internal_mutable_model_slots();
}

// -------------------------------------------------------------------

// RoleAppearanceShopData

// repeated .idlepb.ShopItemBase goods1 = 1;
inline int RoleAppearanceShopData::_internal_goods1_size() const {
  return _impl_.goods1_.size();
}
inline int RoleAppearanceShopData::goods1_size() const {
  return _internal_goods1_size();
}
inline void RoleAppearanceShopData::clear_goods1() {
  _impl_.goods1_.Clear();
}
inline ::idlepb::ShopItemBase* RoleAppearanceShopData::mutable_goods1(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleAppearanceShopData.goods1)
  return _impl_.goods1_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItemBase >*
RoleAppearanceShopData::mutable_goods1() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleAppearanceShopData.goods1)
  return &_impl_.goods1_;
}
inline const ::idlepb::ShopItemBase& RoleAppearanceShopData::_internal_goods1(int index) const {
  return _impl_.goods1_.Get(index);
}
inline const ::idlepb::ShopItemBase& RoleAppearanceShopData::goods1(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAppearanceShopData.goods1)
  return _internal_goods1(index);
}
inline ::idlepb::ShopItemBase* RoleAppearanceShopData::_internal_add_goods1() {
  return _impl_.goods1_.Add();
}
inline ::idlepb::ShopItemBase* RoleAppearanceShopData::add_goods1() {
  ::idlepb::ShopItemBase* _add = _internal_add_goods1();
  // @@protoc_insertion_point(field_add:idlepb.RoleAppearanceShopData.goods1)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItemBase >&
RoleAppearanceShopData::goods1() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleAppearanceShopData.goods1)
  return _impl_.goods1_;
}

// int64 last_auto_refresh_time = 5;
inline void RoleAppearanceShopData::clear_last_auto_refresh_time() {
  _impl_.last_auto_refresh_time_ = int64_t{0};
}
inline int64_t RoleAppearanceShopData::_internal_last_auto_refresh_time() const {
  return _impl_.last_auto_refresh_time_;
}
inline int64_t RoleAppearanceShopData::last_auto_refresh_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAppearanceShopData.last_auto_refresh_time)
  return _internal_last_auto_refresh_time();
}
inline void RoleAppearanceShopData::_internal_set_last_auto_refresh_time(int64_t value) {
  
  _impl_.last_auto_refresh_time_ = value;
}
inline void RoleAppearanceShopData::set_last_auto_refresh_time(int64_t value) {
  _internal_set_last_auto_refresh_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAppearanceShopData.last_auto_refresh_time)
}

// -------------------------------------------------------------------

// AppearanceCollection

// int32 group_id = 1;
inline void AppearanceCollection::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t AppearanceCollection::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t AppearanceCollection::group_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceCollection.group_id)
  return _internal_group_id();
}
inline void AppearanceCollection::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void AppearanceCollection::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceCollection.group_id)
}

// int64 duration = 3;
inline void AppearanceCollection::clear_duration() {
  _impl_.duration_ = int64_t{0};
}
inline int64_t AppearanceCollection::_internal_duration() const {
  return _impl_.duration_;
}
inline int64_t AppearanceCollection::duration() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceCollection.duration)
  return _internal_duration();
}
inline void AppearanceCollection::_internal_set_duration(int64_t value) {
  
  _impl_.duration_ = value;
}
inline void AppearanceCollection::set_duration(int64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceCollection.duration)
}

// int64 begin_date = 4;
inline void AppearanceCollection::clear_begin_date() {
  _impl_.begin_date_ = int64_t{0};
}
inline int64_t AppearanceCollection::_internal_begin_date() const {
  return _impl_.begin_date_;
}
inline int64_t AppearanceCollection::begin_date() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceCollection.begin_date)
  return _internal_begin_date();
}
inline void AppearanceCollection::_internal_set_begin_date(int64_t value) {
  
  _impl_.begin_date_ = value;
}
inline void AppearanceCollection::set_begin_date(int64_t value) {
  _internal_set_begin_date(value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceCollection.begin_date)
}

// -------------------------------------------------------------------

// RoleAppearanceData

// int64 last_change_skeleton_time = 1;
inline void RoleAppearanceData::clear_last_change_skeleton_time() {
  _impl_.last_change_skeleton_time_ = int64_t{0};
}
inline int64_t RoleAppearanceData::_internal_last_change_skeleton_time() const {
  return _impl_.last_change_skeleton_time_;
}
inline int64_t RoleAppearanceData::last_change_skeleton_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAppearanceData.last_change_skeleton_time)
  return _internal_last_change_skeleton_time();
}
inline void RoleAppearanceData::_internal_set_last_change_skeleton_time(int64_t value) {
  
  _impl_.last_change_skeleton_time_ = value;
}
inline void RoleAppearanceData::set_last_change_skeleton_time(int64_t value) {
  _internal_set_last_change_skeleton_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAppearanceData.last_change_skeleton_time)
}

// repeated .idlepb.AppearanceCollection collection = 2;
inline int RoleAppearanceData::_internal_collection_size() const {
  return _impl_.collection_.size();
}
inline int RoleAppearanceData::collection_size() const {
  return _internal_collection_size();
}
inline void RoleAppearanceData::clear_collection() {
  _impl_.collection_.Clear();
}
inline ::idlepb::AppearanceCollection* RoleAppearanceData::mutable_collection(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleAppearanceData.collection)
  return _impl_.collection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceCollection >*
RoleAppearanceData::mutable_collection() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleAppearanceData.collection)
  return &_impl_.collection_;
}
inline const ::idlepb::AppearanceCollection& RoleAppearanceData::_internal_collection(int index) const {
  return _impl_.collection_.Get(index);
}
inline const ::idlepb::AppearanceCollection& RoleAppearanceData::collection(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAppearanceData.collection)
  return _internal_collection(index);
}
inline ::idlepb::AppearanceCollection* RoleAppearanceData::_internal_add_collection() {
  return _impl_.collection_.Add();
}
inline ::idlepb::AppearanceCollection* RoleAppearanceData::add_collection() {
  ::idlepb::AppearanceCollection* _add = _internal_add_collection();
  // @@protoc_insertion_point(field_add:idlepb.RoleAppearanceData.collection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceCollection >&
RoleAppearanceData::collection() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleAppearanceData.collection)
  return _impl_.collection_;
}

// .idlepb.CharacterModelConfig current_model = 3;
inline bool RoleAppearanceData::_internal_has_current_model() const {
  return this != internal_default_instance() && _impl_.current_model_ != nullptr;
}
inline bool RoleAppearanceData::has_current_model() const {
  return _internal_has_current_model();
}
inline void RoleAppearanceData::clear_current_model() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_model_ != nullptr) {
    delete _impl_.current_model_;
  }
  _impl_.current_model_ = nullptr;
}
inline const ::idlepb::CharacterModelConfig& RoleAppearanceData::_internal_current_model() const {
  const ::idlepb::CharacterModelConfig* p = _impl_.current_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CharacterModelConfig&>(
      ::idlepb::_CharacterModelConfig_default_instance_);
}
inline const ::idlepb::CharacterModelConfig& RoleAppearanceData::current_model() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAppearanceData.current_model)
  return _internal_current_model();
}
inline void RoleAppearanceData::unsafe_arena_set_allocated_current_model(
    ::idlepb::CharacterModelConfig* current_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_model_);
  }
  _impl_.current_model_ = current_model;
  if (current_model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleAppearanceData.current_model)
}
inline ::idlepb::CharacterModelConfig* RoleAppearanceData::release_current_model() {
  
  ::idlepb::CharacterModelConfig* temp = _impl_.current_model_;
  _impl_.current_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CharacterModelConfig* RoleAppearanceData::unsafe_arena_release_current_model() {
  // @@protoc_insertion_point(field_release:idlepb.RoleAppearanceData.current_model)
  
  ::idlepb::CharacterModelConfig* temp = _impl_.current_model_;
  _impl_.current_model_ = nullptr;
  return temp;
}
inline ::idlepb::CharacterModelConfig* RoleAppearanceData::_internal_mutable_current_model() {
  
  if (_impl_.current_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CharacterModelConfig>(GetArenaForAllocation());
    _impl_.current_model_ = p;
  }
  return _impl_.current_model_;
}
inline ::idlepb::CharacterModelConfig* RoleAppearanceData::mutable_current_model() {
  ::idlepb::CharacterModelConfig* _msg = _internal_mutable_current_model();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleAppearanceData.current_model)
  return _msg;
}
inline void RoleAppearanceData::set_allocated_current_model(::idlepb::CharacterModelConfig* current_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.current_model_;
  }
  if (current_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(current_model);
    if (message_arena != submessage_arena) {
      current_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_model, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.current_model_ = current_model;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleAppearanceData.current_model)
}

// .idlepb.RoleAppearanceShopData shop_data = 11;
inline bool RoleAppearanceData::_internal_has_shop_data() const {
  return this != internal_default_instance() && _impl_.shop_data_ != nullptr;
}
inline bool RoleAppearanceData::has_shop_data() const {
  return _internal_has_shop_data();
}
inline void RoleAppearanceData::clear_shop_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.shop_data_ != nullptr) {
    delete _impl_.shop_data_;
  }
  _impl_.shop_data_ = nullptr;
}
inline const ::idlepb::RoleAppearanceShopData& RoleAppearanceData::_internal_shop_data() const {
  const ::idlepb::RoleAppearanceShopData* p = _impl_.shop_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleAppearanceShopData&>(
      ::idlepb::_RoleAppearanceShopData_default_instance_);
}
inline const ::idlepb::RoleAppearanceShopData& RoleAppearanceData::shop_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAppearanceData.shop_data)
  return _internal_shop_data();
}
inline void RoleAppearanceData::unsafe_arena_set_allocated_shop_data(
    ::idlepb::RoleAppearanceShopData* shop_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shop_data_);
  }
  _impl_.shop_data_ = shop_data;
  if (shop_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleAppearanceData.shop_data)
}
inline ::idlepb::RoleAppearanceShopData* RoleAppearanceData::release_shop_data() {
  
  ::idlepb::RoleAppearanceShopData* temp = _impl_.shop_data_;
  _impl_.shop_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleAppearanceShopData* RoleAppearanceData::unsafe_arena_release_shop_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleAppearanceData.shop_data)
  
  ::idlepb::RoleAppearanceShopData* temp = _impl_.shop_data_;
  _impl_.shop_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleAppearanceShopData* RoleAppearanceData::_internal_mutable_shop_data() {
  
  if (_impl_.shop_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleAppearanceShopData>(GetArenaForAllocation());
    _impl_.shop_data_ = p;
  }
  return _impl_.shop_data_;
}
inline ::idlepb::RoleAppearanceShopData* RoleAppearanceData::mutable_shop_data() {
  ::idlepb::RoleAppearanceShopData* _msg = _internal_mutable_shop_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleAppearanceData.shop_data)
  return _msg;
}
inline void RoleAppearanceData::set_allocated_shop_data(::idlepb::RoleAppearanceShopData* shop_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shop_data_;
  }
  if (shop_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shop_data);
    if (message_arena != submessage_arena) {
      shop_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shop_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shop_data_ = shop_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleAppearanceData.shop_data)
}

// -------------------------------------------------------------------

// AlchemyPackageItem

// int32 cfg_id = 1;
inline void AlchemyPackageItem::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t AlchemyPackageItem::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t AlchemyPackageItem::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyPackageItem.cfg_id)
  return _internal_cfg_id();
}
inline void AlchemyPackageItem::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void AlchemyPackageItem::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyPackageItem.cfg_id)
}

// int32 num = 2;
inline void AlchemyPackageItem::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t AlchemyPackageItem::_internal_num() const {
  return _impl_.num_;
}
inline int32_t AlchemyPackageItem::num() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyPackageItem.num)
  return _internal_num();
}
inline void AlchemyPackageItem::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void AlchemyPackageItem::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyPackageItem.num)
}

// -------------------------------------------------------------------

// AlchemyMakeData

// int32 recipe_id = 1;
inline void AlchemyMakeData::clear_recipe_id() {
  _impl_.recipe_id_ = 0;
}
inline int32_t AlchemyMakeData::_internal_recipe_id() const {
  return _impl_.recipe_id_;
}
inline int32_t AlchemyMakeData::recipe_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.recipe_id)
  return _internal_recipe_id();
}
inline void AlchemyMakeData::_internal_set_recipe_id(int32_t value) {
  
  _impl_.recipe_id_ = value;
}
inline void AlchemyMakeData::set_recipe_id(int32_t value) {
  _internal_set_recipe_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.recipe_id)
}

// int32 recipe_degree = 2;
inline void AlchemyMakeData::clear_recipe_degree() {
  _impl_.recipe_degree_ = 0;
}
inline int32_t AlchemyMakeData::_internal_recipe_degree() const {
  return _impl_.recipe_degree_;
}
inline int32_t AlchemyMakeData::recipe_degree() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.recipe_degree)
  return _internal_recipe_degree();
}
inline void AlchemyMakeData::_internal_set_recipe_degree(int32_t value) {
  
  _impl_.recipe_degree_ = value;
}
inline void AlchemyMakeData::set_recipe_degree(int32_t value) {
  _internal_set_recipe_degree(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.recipe_degree)
}

// int32 material_id = 3;
inline void AlchemyMakeData::clear_material_id() {
  _impl_.material_id_ = 0;
}
inline int32_t AlchemyMakeData::_internal_material_id() const {
  return _impl_.material_id_;
}
inline int32_t AlchemyMakeData::material_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.material_id)
  return _internal_material_id();
}
inline void AlchemyMakeData::_internal_set_material_id(int32_t value) {
  
  _impl_.material_id_ = value;
}
inline void AlchemyMakeData::set_material_id(int32_t value) {
  _internal_set_material_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.material_id)
}

// .idlepb.ItemQuality material_quality = 4;
inline void AlchemyMakeData::clear_material_quality() {
  _impl_.material_quality_ = 0;
}
inline ::idlepb::ItemQuality AlchemyMakeData::_internal_material_quality() const {
  return static_cast< ::idlepb::ItemQuality >(_impl_.material_quality_);
}
inline ::idlepb::ItemQuality AlchemyMakeData::material_quality() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.material_quality)
  return _internal_material_quality();
}
inline void AlchemyMakeData::_internal_set_material_quality(::idlepb::ItemQuality value) {
  
  _impl_.material_quality_ = value;
}
inline void AlchemyMakeData::set_material_quality(::idlepb::ItemQuality value) {
  _internal_set_material_quality(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.material_quality)
}

// int32 target_num = 5;
inline void AlchemyMakeData::clear_target_num() {
  _impl_.target_num_ = 0;
}
inline int32_t AlchemyMakeData::_internal_target_num() const {
  return _impl_.target_num_;
}
inline int32_t AlchemyMakeData::target_num() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.target_num)
  return _internal_target_num();
}
inline void AlchemyMakeData::_internal_set_target_num(int32_t value) {
  
  _impl_.target_num_ = value;
}
inline void AlchemyMakeData::set_target_num(int32_t value) {
  _internal_set_target_num(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.target_num)
}

// int32 cur_num = 6;
inline void AlchemyMakeData::clear_cur_num() {
  _impl_.cur_num_ = 0;
}
inline int32_t AlchemyMakeData::_internal_cur_num() const {
  return _impl_.cur_num_;
}
inline int32_t AlchemyMakeData::cur_num() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.cur_num)
  return _internal_cur_num();
}
inline void AlchemyMakeData::_internal_set_cur_num(int32_t value) {
  
  _impl_.cur_num_ = value;
}
inline void AlchemyMakeData::set_cur_num(int32_t value) {
  _internal_set_cur_num(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.cur_num)
}

// int64 next_done_time = 7;
inline void AlchemyMakeData::clear_next_done_time() {
  _impl_.next_done_time_ = int64_t{0};
}
inline int64_t AlchemyMakeData::_internal_next_done_time() const {
  return _impl_.next_done_time_;
}
inline int64_t AlchemyMakeData::next_done_time() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.next_done_time)
  return _internal_next_done_time();
}
inline void AlchemyMakeData::_internal_set_next_done_time(int64_t value) {
  
  _impl_.next_done_time_ = value;
}
inline void AlchemyMakeData::set_next_done_time(int64_t value) {
  _internal_set_next_done_time(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.next_done_time)
}

// repeated .idlepb.AlchemyPackageItem items = 8;
inline int AlchemyMakeData::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int AlchemyMakeData::items_size() const {
  return _internal_items_size();
}
inline void AlchemyMakeData::clear_items() {
  _impl_.items_.Clear();
}
inline ::idlepb::AlchemyPackageItem* AlchemyMakeData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.AlchemyMakeData.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AlchemyPackageItem >*
AlchemyMakeData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.AlchemyMakeData.items)
  return &_impl_.items_;
}
inline const ::idlepb::AlchemyPackageItem& AlchemyMakeData::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::idlepb::AlchemyPackageItem& AlchemyMakeData::items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.items)
  return _internal_items(index);
}
inline ::idlepb::AlchemyPackageItem* AlchemyMakeData::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::idlepb::AlchemyPackageItem* AlchemyMakeData::add_items() {
  ::idlepb::AlchemyPackageItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:idlepb.AlchemyMakeData.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AlchemyPackageItem >&
AlchemyMakeData::items() const {
  // @@protoc_insertion_point(field_list:idlepb.AlchemyMakeData.items)
  return _impl_.items_;
}

// int32 last_produce_item_cfg_id = 10;
inline void AlchemyMakeData::clear_last_produce_item_cfg_id() {
  _impl_.last_produce_item_cfg_id_ = 0;
}
inline int32_t AlchemyMakeData::_internal_last_produce_item_cfg_id() const {
  return _impl_.last_produce_item_cfg_id_;
}
inline int32_t AlchemyMakeData::last_produce_item_cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.last_produce_item_cfg_id)
  return _internal_last_produce_item_cfg_id();
}
inline void AlchemyMakeData::_internal_set_last_produce_item_cfg_id(int32_t value) {
  
  _impl_.last_produce_item_cfg_id_ = value;
}
inline void AlchemyMakeData::set_last_produce_item_cfg_id(int32_t value) {
  _internal_set_last_produce_item_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.last_produce_item_cfg_id)
}

// int32 last_produce_item_num = 11;
inline void AlchemyMakeData::clear_last_produce_item_num() {
  _impl_.last_produce_item_num_ = 0;
}
inline int32_t AlchemyMakeData::_internal_last_produce_item_num() const {
  return _impl_.last_produce_item_num_;
}
inline int32_t AlchemyMakeData::last_produce_item_num() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.last_produce_item_num)
  return _internal_last_produce_item_num();
}
inline void AlchemyMakeData::_internal_set_last_produce_item_num(int32_t value) {
  
  _impl_.last_produce_item_num_ = value;
}
inline void AlchemyMakeData::set_last_produce_item_num(int32_t value) {
  _internal_set_last_produce_item_num(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.last_produce_item_num)
}

// int64 total_start_time = 12;
inline void AlchemyMakeData::clear_total_start_time() {
  _impl_.total_start_time_ = int64_t{0};
}
inline int64_t AlchemyMakeData::_internal_total_start_time() const {
  return _impl_.total_start_time_;
}
inline int64_t AlchemyMakeData::total_start_time() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.total_start_time)
  return _internal_total_start_time();
}
inline void AlchemyMakeData::_internal_set_total_start_time(int64_t value) {
  
  _impl_.total_start_time_ = value;
}
inline void AlchemyMakeData::set_total_start_time(int64_t value) {
  _internal_set_total_start_time(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.total_start_time)
}

// int64 total_done_time = 13;
inline void AlchemyMakeData::clear_total_done_time() {
  _impl_.total_done_time_ = int64_t{0};
}
inline int64_t AlchemyMakeData::_internal_total_done_time() const {
  return _impl_.total_done_time_;
}
inline int64_t AlchemyMakeData::total_done_time() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.total_done_time)
  return _internal_total_done_time();
}
inline void AlchemyMakeData::_internal_set_total_done_time(int64_t value) {
  
  _impl_.total_done_time_ = value;
}
inline void AlchemyMakeData::set_total_done_time(int64_t value) {
  _internal_set_total_done_time(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.total_done_time)
}

// int32 add_exp = 14;
inline void AlchemyMakeData::clear_add_exp() {
  _impl_.add_exp_ = 0;
}
inline int32_t AlchemyMakeData::_internal_add_exp() const {
  return _impl_.add_exp_;
}
inline int32_t AlchemyMakeData::add_exp() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.add_exp)
  return _internal_add_exp();
}
inline void AlchemyMakeData::_internal_set_add_exp(int32_t value) {
  
  _impl_.add_exp_ = value;
}
inline void AlchemyMakeData::set_add_exp(int32_t value) {
  _internal_set_add_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.add_exp)
}

// int32 cur_successed_num = 15;
inline void AlchemyMakeData::clear_cur_successed_num() {
  _impl_.cur_successed_num_ = 0;
}
inline int32_t AlchemyMakeData::_internal_cur_successed_num() const {
  return _impl_.cur_successed_num_;
}
inline int32_t AlchemyMakeData::cur_successed_num() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.cur_successed_num)
  return _internal_cur_successed_num();
}
inline void AlchemyMakeData::_internal_set_cur_successed_num(int32_t value) {
  
  _impl_.cur_successed_num_ = value;
}
inline void AlchemyMakeData::set_cur_successed_num(int32_t value) {
  _internal_set_cur_successed_num(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.cur_successed_num)
}

// int32 cur_failed_num = 16;
inline void AlchemyMakeData::clear_cur_failed_num() {
  _impl_.cur_failed_num_ = 0;
}
inline int32_t AlchemyMakeData::_internal_cur_failed_num() const {
  return _impl_.cur_failed_num_;
}
inline int32_t AlchemyMakeData::cur_failed_num() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyMakeData.cur_failed_num)
  return _internal_cur_failed_num();
}
inline void AlchemyMakeData::_internal_set_cur_failed_num(int32_t value) {
  
  _impl_.cur_failed_num_ = value;
}
inline void AlchemyMakeData::set_cur_failed_num(int32_t value) {
  _internal_set_cur_failed_num(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyMakeData.cur_failed_num)
}

// -------------------------------------------------------------------

// AlchemyRecipeData

// int32 recipe_id = 1;
inline void AlchemyRecipeData::clear_recipe_id() {
  _impl_.recipe_id_ = 0;
}
inline int32_t AlchemyRecipeData::_internal_recipe_id() const {
  return _impl_.recipe_id_;
}
inline int32_t AlchemyRecipeData::recipe_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyRecipeData.recipe_id)
  return _internal_recipe_id();
}
inline void AlchemyRecipeData::_internal_set_recipe_id(int32_t value) {
  
  _impl_.recipe_id_ = value;
}
inline void AlchemyRecipeData::set_recipe_id(int32_t value) {
  _internal_set_recipe_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyRecipeData.recipe_id)
}

// int32 big_chance = 2;
inline void AlchemyRecipeData::clear_big_chance() {
  _impl_.big_chance_ = 0;
}
inline int32_t AlchemyRecipeData::_internal_big_chance() const {
  return _impl_.big_chance_;
}
inline int32_t AlchemyRecipeData::big_chance() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyRecipeData.big_chance)
  return _internal_big_chance();
}
inline void AlchemyRecipeData::_internal_set_big_chance(int32_t value) {
  
  _impl_.big_chance_ = value;
}
inline void AlchemyRecipeData::set_big_chance(int32_t value) {
  _internal_set_big_chance(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyRecipeData.big_chance)
}

// int32 small_chance = 3;
inline void AlchemyRecipeData::clear_small_chance() {
  _impl_.small_chance_ = 0;
}
inline int32_t AlchemyRecipeData::_internal_small_chance() const {
  return _impl_.small_chance_;
}
inline int32_t AlchemyRecipeData::small_chance() const {
  // @@protoc_insertion_point(field_get:idlepb.AlchemyRecipeData.small_chance)
  return _internal_small_chance();
}
inline void AlchemyRecipeData::_internal_set_small_chance(int32_t value) {
  
  _impl_.small_chance_ = value;
}
inline void AlchemyRecipeData::set_small_chance(int32_t value) {
  _internal_set_small_chance(value);
  // @@protoc_insertion_point(field_set:idlepb.AlchemyRecipeData.small_chance)
}

// -------------------------------------------------------------------

// RoleAlchemyData

// int32 rank = 1;
inline void RoleAlchemyData::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t RoleAlchemyData::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t RoleAlchemyData::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAlchemyData.rank)
  return _internal_rank();
}
inline void RoleAlchemyData::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void RoleAlchemyData::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAlchemyData.rank)
}

// int32 exp = 2;
inline void RoleAlchemyData::clear_exp() {
  _impl_.exp_ = 0;
}
inline int32_t RoleAlchemyData::_internal_exp() const {
  return _impl_.exp_;
}
inline int32_t RoleAlchemyData::exp() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAlchemyData.exp)
  return _internal_exp();
}
inline void RoleAlchemyData::_internal_set_exp(int32_t value) {
  
  _impl_.exp_ = value;
}
inline void RoleAlchemyData::set_exp(int32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAlchemyData.exp)
}

// .idlepb.AlchemyMakeData cur_make_data = 4;
inline bool RoleAlchemyData::_internal_has_cur_make_data() const {
  return this != internal_default_instance() && _impl_.cur_make_data_ != nullptr;
}
inline bool RoleAlchemyData::has_cur_make_data() const {
  return _internal_has_cur_make_data();
}
inline void RoleAlchemyData::clear_cur_make_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.cur_make_data_ != nullptr) {
    delete _impl_.cur_make_data_;
  }
  _impl_.cur_make_data_ = nullptr;
}
inline const ::idlepb::AlchemyMakeData& RoleAlchemyData::_internal_cur_make_data() const {
  const ::idlepb::AlchemyMakeData* p = _impl_.cur_make_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::AlchemyMakeData&>(
      ::idlepb::_AlchemyMakeData_default_instance_);
}
inline const ::idlepb::AlchemyMakeData& RoleAlchemyData::cur_make_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAlchemyData.cur_make_data)
  return _internal_cur_make_data();
}
inline void RoleAlchemyData::unsafe_arena_set_allocated_cur_make_data(
    ::idlepb::AlchemyMakeData* cur_make_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_make_data_);
  }
  _impl_.cur_make_data_ = cur_make_data;
  if (cur_make_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleAlchemyData.cur_make_data)
}
inline ::idlepb::AlchemyMakeData* RoleAlchemyData::release_cur_make_data() {
  
  ::idlepb::AlchemyMakeData* temp = _impl_.cur_make_data_;
  _impl_.cur_make_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::AlchemyMakeData* RoleAlchemyData::unsafe_arena_release_cur_make_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleAlchemyData.cur_make_data)
  
  ::idlepb::AlchemyMakeData* temp = _impl_.cur_make_data_;
  _impl_.cur_make_data_ = nullptr;
  return temp;
}
inline ::idlepb::AlchemyMakeData* RoleAlchemyData::_internal_mutable_cur_make_data() {
  
  if (_impl_.cur_make_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::AlchemyMakeData>(GetArenaForAllocation());
    _impl_.cur_make_data_ = p;
  }
  return _impl_.cur_make_data_;
}
inline ::idlepb::AlchemyMakeData* RoleAlchemyData::mutable_cur_make_data() {
  ::idlepb::AlchemyMakeData* _msg = _internal_mutable_cur_make_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleAlchemyData.cur_make_data)
  return _msg;
}
inline void RoleAlchemyData::set_allocated_cur_make_data(::idlepb::AlchemyMakeData* cur_make_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cur_make_data_;
  }
  if (cur_make_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cur_make_data);
    if (message_arena != submessage_arena) {
      cur_make_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_make_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_make_data_ = cur_make_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleAlchemyData.cur_make_data)
}

// int32 total_refine_num = 7;
inline void RoleAlchemyData::clear_total_refine_num() {
  _impl_.total_refine_num_ = 0;
}
inline int32_t RoleAlchemyData::_internal_total_refine_num() const {
  return _impl_.total_refine_num_;
}
inline int32_t RoleAlchemyData::total_refine_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAlchemyData.total_refine_num)
  return _internal_total_refine_num();
}
inline void RoleAlchemyData::_internal_set_total_refine_num(int32_t value) {
  
  _impl_.total_refine_num_ = value;
}
inline void RoleAlchemyData::set_total_refine_num(int32_t value) {
  _internal_set_total_refine_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAlchemyData.total_refine_num)
}

// repeated int32 produce_quality_stats = 8;
inline int RoleAlchemyData::_internal_produce_quality_stats_size() const {
  return _impl_.produce_quality_stats_.size();
}
inline int RoleAlchemyData::produce_quality_stats_size() const {
  return _internal_produce_quality_stats_size();
}
inline void RoleAlchemyData::clear_produce_quality_stats() {
  _impl_.produce_quality_stats_.Clear();
}
inline int32_t RoleAlchemyData::_internal_produce_quality_stats(int index) const {
  return _impl_.produce_quality_stats_.Get(index);
}
inline int32_t RoleAlchemyData::produce_quality_stats(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAlchemyData.produce_quality_stats)
  return _internal_produce_quality_stats(index);
}
inline void RoleAlchemyData::set_produce_quality_stats(int index, int32_t value) {
  _impl_.produce_quality_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAlchemyData.produce_quality_stats)
}
inline void RoleAlchemyData::_internal_add_produce_quality_stats(int32_t value) {
  _impl_.produce_quality_stats_.Add(value);
}
inline void RoleAlchemyData::add_produce_quality_stats(int32_t value) {
  _internal_add_produce_quality_stats(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleAlchemyData.produce_quality_stats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleAlchemyData::_internal_produce_quality_stats() const {
  return _impl_.produce_quality_stats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleAlchemyData::produce_quality_stats() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleAlchemyData.produce_quality_stats)
  return _internal_produce_quality_stats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleAlchemyData::_internal_mutable_produce_quality_stats() {
  return &_impl_.produce_quality_stats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleAlchemyData::mutable_produce_quality_stats() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleAlchemyData.produce_quality_stats)
  return _internal_mutable_produce_quality_stats();
}

// repeated .idlepb.AlchemyRecipeData recipes = 9;
inline int RoleAlchemyData::_internal_recipes_size() const {
  return _impl_.recipes_.size();
}
inline int RoleAlchemyData::recipes_size() const {
  return _internal_recipes_size();
}
inline void RoleAlchemyData::clear_recipes() {
  _impl_.recipes_.Clear();
}
inline ::idlepb::AlchemyRecipeData* RoleAlchemyData::mutable_recipes(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleAlchemyData.recipes)
  return _impl_.recipes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AlchemyRecipeData >*
RoleAlchemyData::mutable_recipes() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleAlchemyData.recipes)
  return &_impl_.recipes_;
}
inline const ::idlepb::AlchemyRecipeData& RoleAlchemyData::_internal_recipes(int index) const {
  return _impl_.recipes_.Get(index);
}
inline const ::idlepb::AlchemyRecipeData& RoleAlchemyData::recipes(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAlchemyData.recipes)
  return _internal_recipes(index);
}
inline ::idlepb::AlchemyRecipeData* RoleAlchemyData::_internal_add_recipes() {
  return _impl_.recipes_.Add();
}
inline ::idlepb::AlchemyRecipeData* RoleAlchemyData::add_recipes() {
  ::idlepb::AlchemyRecipeData* _add = _internal_add_recipes();
  // @@protoc_insertion_point(field_add:idlepb.RoleAlchemyData.recipes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AlchemyRecipeData >&
RoleAlchemyData::recipes() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleAlchemyData.recipes)
  return _impl_.recipes_;
}

// -------------------------------------------------------------------

// ForgePackageItem

// int32 cfg_id = 1;
inline void ForgePackageItem::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t ForgePackageItem::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t ForgePackageItem::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgePackageItem.cfg_id)
  return _internal_cfg_id();
}
inline void ForgePackageItem::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void ForgePackageItem::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgePackageItem.cfg_id)
}

// int32 num = 2;
inline void ForgePackageItem::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t ForgePackageItem::_internal_num() const {
  return _impl_.num_;
}
inline int32_t ForgePackageItem::num() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgePackageItem.num)
  return _internal_num();
}
inline void ForgePackageItem::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void ForgePackageItem::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgePackageItem.num)
}

// -------------------------------------------------------------------

// ForgeMakeData

// int32 recipe_id = 1;
inline void ForgeMakeData::clear_recipe_id() {
  _impl_.recipe_id_ = 0;
}
inline int32_t ForgeMakeData::_internal_recipe_id() const {
  return _impl_.recipe_id_;
}
inline int32_t ForgeMakeData::recipe_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.recipe_id)
  return _internal_recipe_id();
}
inline void ForgeMakeData::_internal_set_recipe_id(int32_t value) {
  
  _impl_.recipe_id_ = value;
}
inline void ForgeMakeData::set_recipe_id(int32_t value) {
  _internal_set_recipe_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.recipe_id)
}

// int32 recipe_degree = 2;
inline void ForgeMakeData::clear_recipe_degree() {
  _impl_.recipe_degree_ = 0;
}
inline int32_t ForgeMakeData::_internal_recipe_degree() const {
  return _impl_.recipe_degree_;
}
inline int32_t ForgeMakeData::recipe_degree() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.recipe_degree)
  return _internal_recipe_degree();
}
inline void ForgeMakeData::_internal_set_recipe_degree(int32_t value) {
  
  _impl_.recipe_degree_ = value;
}
inline void ForgeMakeData::set_recipe_degree(int32_t value) {
  _internal_set_recipe_degree(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.recipe_degree)
}

// int32 material_id = 3;
inline void ForgeMakeData::clear_material_id() {
  _impl_.material_id_ = 0;
}
inline int32_t ForgeMakeData::_internal_material_id() const {
  return _impl_.material_id_;
}
inline int32_t ForgeMakeData::material_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.material_id)
  return _internal_material_id();
}
inline void ForgeMakeData::_internal_set_material_id(int32_t value) {
  
  _impl_.material_id_ = value;
}
inline void ForgeMakeData::set_material_id(int32_t value) {
  _internal_set_material_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.material_id)
}

// .idlepb.ItemQuality material_quality = 4;
inline void ForgeMakeData::clear_material_quality() {
  _impl_.material_quality_ = 0;
}
inline ::idlepb::ItemQuality ForgeMakeData::_internal_material_quality() const {
  return static_cast< ::idlepb::ItemQuality >(_impl_.material_quality_);
}
inline ::idlepb::ItemQuality ForgeMakeData::material_quality() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.material_quality)
  return _internal_material_quality();
}
inline void ForgeMakeData::_internal_set_material_quality(::idlepb::ItemQuality value) {
  
  _impl_.material_quality_ = value;
}
inline void ForgeMakeData::set_material_quality(::idlepb::ItemQuality value) {
  _internal_set_material_quality(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.material_quality)
}

// int32 target_num = 5;
inline void ForgeMakeData::clear_target_num() {
  _impl_.target_num_ = 0;
}
inline int32_t ForgeMakeData::_internal_target_num() const {
  return _impl_.target_num_;
}
inline int32_t ForgeMakeData::target_num() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.target_num)
  return _internal_target_num();
}
inline void ForgeMakeData::_internal_set_target_num(int32_t value) {
  
  _impl_.target_num_ = value;
}
inline void ForgeMakeData::set_target_num(int32_t value) {
  _internal_set_target_num(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.target_num)
}

// int32 cur_num = 6;
inline void ForgeMakeData::clear_cur_num() {
  _impl_.cur_num_ = 0;
}
inline int32_t ForgeMakeData::_internal_cur_num() const {
  return _impl_.cur_num_;
}
inline int32_t ForgeMakeData::cur_num() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.cur_num)
  return _internal_cur_num();
}
inline void ForgeMakeData::_internal_set_cur_num(int32_t value) {
  
  _impl_.cur_num_ = value;
}
inline void ForgeMakeData::set_cur_num(int32_t value) {
  _internal_set_cur_num(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.cur_num)
}

// int64 next_done_time = 7;
inline void ForgeMakeData::clear_next_done_time() {
  _impl_.next_done_time_ = int64_t{0};
}
inline int64_t ForgeMakeData::_internal_next_done_time() const {
  return _impl_.next_done_time_;
}
inline int64_t ForgeMakeData::next_done_time() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.next_done_time)
  return _internal_next_done_time();
}
inline void ForgeMakeData::_internal_set_next_done_time(int64_t value) {
  
  _impl_.next_done_time_ = value;
}
inline void ForgeMakeData::set_next_done_time(int64_t value) {
  _internal_set_next_done_time(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.next_done_time)
}

// repeated .idlepb.ForgePackageItem items = 8;
inline int ForgeMakeData::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ForgeMakeData::items_size() const {
  return _internal_items_size();
}
inline void ForgeMakeData::clear_items() {
  _impl_.items_.Clear();
}
inline ::idlepb::ForgePackageItem* ForgeMakeData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.ForgeMakeData.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ForgePackageItem >*
ForgeMakeData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.ForgeMakeData.items)
  return &_impl_.items_;
}
inline const ::idlepb::ForgePackageItem& ForgeMakeData::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::idlepb::ForgePackageItem& ForgeMakeData::items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.items)
  return _internal_items(index);
}
inline ::idlepb::ForgePackageItem* ForgeMakeData::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::idlepb::ForgePackageItem* ForgeMakeData::add_items() {
  ::idlepb::ForgePackageItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:idlepb.ForgeMakeData.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ForgePackageItem >&
ForgeMakeData::items() const {
  // @@protoc_insertion_point(field_list:idlepb.ForgeMakeData.items)
  return _impl_.items_;
}

// int32 last_produce_item_cfg_id = 10;
inline void ForgeMakeData::clear_last_produce_item_cfg_id() {
  _impl_.last_produce_item_cfg_id_ = 0;
}
inline int32_t ForgeMakeData::_internal_last_produce_item_cfg_id() const {
  return _impl_.last_produce_item_cfg_id_;
}
inline int32_t ForgeMakeData::last_produce_item_cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.last_produce_item_cfg_id)
  return _internal_last_produce_item_cfg_id();
}
inline void ForgeMakeData::_internal_set_last_produce_item_cfg_id(int32_t value) {
  
  _impl_.last_produce_item_cfg_id_ = value;
}
inline void ForgeMakeData::set_last_produce_item_cfg_id(int32_t value) {
  _internal_set_last_produce_item_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.last_produce_item_cfg_id)
}

// int32 last_produce_item_num = 11;
inline void ForgeMakeData::clear_last_produce_item_num() {
  _impl_.last_produce_item_num_ = 0;
}
inline int32_t ForgeMakeData::_internal_last_produce_item_num() const {
  return _impl_.last_produce_item_num_;
}
inline int32_t ForgeMakeData::last_produce_item_num() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.last_produce_item_num)
  return _internal_last_produce_item_num();
}
inline void ForgeMakeData::_internal_set_last_produce_item_num(int32_t value) {
  
  _impl_.last_produce_item_num_ = value;
}
inline void ForgeMakeData::set_last_produce_item_num(int32_t value) {
  _internal_set_last_produce_item_num(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.last_produce_item_num)
}

// int64 total_start_time = 12;
inline void ForgeMakeData::clear_total_start_time() {
  _impl_.total_start_time_ = int64_t{0};
}
inline int64_t ForgeMakeData::_internal_total_start_time() const {
  return _impl_.total_start_time_;
}
inline int64_t ForgeMakeData::total_start_time() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.total_start_time)
  return _internal_total_start_time();
}
inline void ForgeMakeData::_internal_set_total_start_time(int64_t value) {
  
  _impl_.total_start_time_ = value;
}
inline void ForgeMakeData::set_total_start_time(int64_t value) {
  _internal_set_total_start_time(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.total_start_time)
}

// int64 total_done_time = 13;
inline void ForgeMakeData::clear_total_done_time() {
  _impl_.total_done_time_ = int64_t{0};
}
inline int64_t ForgeMakeData::_internal_total_done_time() const {
  return _impl_.total_done_time_;
}
inline int64_t ForgeMakeData::total_done_time() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.total_done_time)
  return _internal_total_done_time();
}
inline void ForgeMakeData::_internal_set_total_done_time(int64_t value) {
  
  _impl_.total_done_time_ = value;
}
inline void ForgeMakeData::set_total_done_time(int64_t value) {
  _internal_set_total_done_time(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.total_done_time)
}

// int32 add_exp = 14;
inline void ForgeMakeData::clear_add_exp() {
  _impl_.add_exp_ = 0;
}
inline int32_t ForgeMakeData::_internal_add_exp() const {
  return _impl_.add_exp_;
}
inline int32_t ForgeMakeData::add_exp() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.add_exp)
  return _internal_add_exp();
}
inline void ForgeMakeData::_internal_set_add_exp(int32_t value) {
  
  _impl_.add_exp_ = value;
}
inline void ForgeMakeData::set_add_exp(int32_t value) {
  _internal_set_add_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.add_exp)
}

// int32 cur_successed_num = 15;
inline void ForgeMakeData::clear_cur_successed_num() {
  _impl_.cur_successed_num_ = 0;
}
inline int32_t ForgeMakeData::_internal_cur_successed_num() const {
  return _impl_.cur_successed_num_;
}
inline int32_t ForgeMakeData::cur_successed_num() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.cur_successed_num)
  return _internal_cur_successed_num();
}
inline void ForgeMakeData::_internal_set_cur_successed_num(int32_t value) {
  
  _impl_.cur_successed_num_ = value;
}
inline void ForgeMakeData::set_cur_successed_num(int32_t value) {
  _internal_set_cur_successed_num(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.cur_successed_num)
}

// int32 cur_failed_num = 16;
inline void ForgeMakeData::clear_cur_failed_num() {
  _impl_.cur_failed_num_ = 0;
}
inline int32_t ForgeMakeData::_internal_cur_failed_num() const {
  return _impl_.cur_failed_num_;
}
inline int32_t ForgeMakeData::cur_failed_num() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.cur_failed_num)
  return _internal_cur_failed_num();
}
inline void ForgeMakeData::_internal_set_cur_failed_num(int32_t value) {
  
  _impl_.cur_failed_num_ = value;
}
inline void ForgeMakeData::set_cur_failed_num(int32_t value) {
  _internal_set_cur_failed_num(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.cur_failed_num)
}

// int32 ext_material_id = 17;
inline void ForgeMakeData::clear_ext_material_id() {
  _impl_.ext_material_id_ = 0;
}
inline int32_t ForgeMakeData::_internal_ext_material_id() const {
  return _impl_.ext_material_id_;
}
inline int32_t ForgeMakeData::ext_material_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.ext_material_id)
  return _internal_ext_material_id();
}
inline void ForgeMakeData::_internal_set_ext_material_id(int32_t value) {
  
  _impl_.ext_material_id_ = value;
}
inline void ForgeMakeData::set_ext_material_id(int32_t value) {
  _internal_set_ext_material_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.ext_material_id)
}

// bool auto_sell_poor = 18;
inline void ForgeMakeData::clear_auto_sell_poor() {
  _impl_.auto_sell_poor_ = false;
}
inline bool ForgeMakeData::_internal_auto_sell_poor() const {
  return _impl_.auto_sell_poor_;
}
inline bool ForgeMakeData::auto_sell_poor() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.auto_sell_poor)
  return _internal_auto_sell_poor();
}
inline void ForgeMakeData::_internal_set_auto_sell_poor(bool value) {
  
  _impl_.auto_sell_poor_ = value;
}
inline void ForgeMakeData::set_auto_sell_poor(bool value) {
  _internal_set_auto_sell_poor(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.auto_sell_poor)
}

// bool auto_sell_middle = 19;
inline void ForgeMakeData::clear_auto_sell_middle() {
  _impl_.auto_sell_middle_ = false;
}
inline bool ForgeMakeData::_internal_auto_sell_middle() const {
  return _impl_.auto_sell_middle_;
}
inline bool ForgeMakeData::auto_sell_middle() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeMakeData.auto_sell_middle)
  return _internal_auto_sell_middle();
}
inline void ForgeMakeData::_internal_set_auto_sell_middle(bool value) {
  
  _impl_.auto_sell_middle_ = value;
}
inline void ForgeMakeData::set_auto_sell_middle(bool value) {
  _internal_set_auto_sell_middle(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeMakeData.auto_sell_middle)
}

// -------------------------------------------------------------------

// ForgeRecipeData

// int32 recipe_id = 1;
inline void ForgeRecipeData::clear_recipe_id() {
  _impl_.recipe_id_ = 0;
}
inline int32_t ForgeRecipeData::_internal_recipe_id() const {
  return _impl_.recipe_id_;
}
inline int32_t ForgeRecipeData::recipe_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeRecipeData.recipe_id)
  return _internal_recipe_id();
}
inline void ForgeRecipeData::_internal_set_recipe_id(int32_t value) {
  
  _impl_.recipe_id_ = value;
}
inline void ForgeRecipeData::set_recipe_id(int32_t value) {
  _internal_set_recipe_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeRecipeData.recipe_id)
}

// int32 big_chance = 2;
inline void ForgeRecipeData::clear_big_chance() {
  _impl_.big_chance_ = 0;
}
inline int32_t ForgeRecipeData::_internal_big_chance() const {
  return _impl_.big_chance_;
}
inline int32_t ForgeRecipeData::big_chance() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeRecipeData.big_chance)
  return _internal_big_chance();
}
inline void ForgeRecipeData::_internal_set_big_chance(int32_t value) {
  
  _impl_.big_chance_ = value;
}
inline void ForgeRecipeData::set_big_chance(int32_t value) {
  _internal_set_big_chance(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeRecipeData.big_chance)
}

// int32 small_chance = 3;
inline void ForgeRecipeData::clear_small_chance() {
  _impl_.small_chance_ = 0;
}
inline int32_t ForgeRecipeData::_internal_small_chance() const {
  return _impl_.small_chance_;
}
inline int32_t ForgeRecipeData::small_chance() const {
  // @@protoc_insertion_point(field_get:idlepb.ForgeRecipeData.small_chance)
  return _internal_small_chance();
}
inline void ForgeRecipeData::_internal_set_small_chance(int32_t value) {
  
  _impl_.small_chance_ = value;
}
inline void ForgeRecipeData::set_small_chance(int32_t value) {
  _internal_set_small_chance(value);
  // @@protoc_insertion_point(field_set:idlepb.ForgeRecipeData.small_chance)
}

// -------------------------------------------------------------------

// LostEquipmentData

// int32 uid = 1;
inline void LostEquipmentData::clear_uid() {
  _impl_.uid_ = 0;
}
inline int32_t LostEquipmentData::_internal_uid() const {
  return _impl_.uid_;
}
inline int32_t LostEquipmentData::uid() const {
  // @@protoc_insertion_point(field_get:idlepb.LostEquipmentData.uid)
  return _internal_uid();
}
inline void LostEquipmentData::_internal_set_uid(int32_t value) {
  
  _impl_.uid_ = value;
}
inline void LostEquipmentData::set_uid(int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:idlepb.LostEquipmentData.uid)
}

// int32 tag = 2;
inline void LostEquipmentData::clear_tag() {
  _impl_.tag_ = 0;
}
inline int32_t LostEquipmentData::_internal_tag() const {
  return _impl_.tag_;
}
inline int32_t LostEquipmentData::tag() const {
  // @@protoc_insertion_point(field_get:idlepb.LostEquipmentData.tag)
  return _internal_tag();
}
inline void LostEquipmentData::_internal_set_tag(int32_t value) {
  
  _impl_.tag_ = value;
}
inline void LostEquipmentData::set_tag(int32_t value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:idlepb.LostEquipmentData.tag)
}

// int64 lost_date = 3;
inline void LostEquipmentData::clear_lost_date() {
  _impl_.lost_date_ = int64_t{0};
}
inline int64_t LostEquipmentData::_internal_lost_date() const {
  return _impl_.lost_date_;
}
inline int64_t LostEquipmentData::lost_date() const {
  // @@protoc_insertion_point(field_get:idlepb.LostEquipmentData.lost_date)
  return _internal_lost_date();
}
inline void LostEquipmentData::_internal_set_lost_date(int64_t value) {
  
  _impl_.lost_date_ = value;
}
inline void LostEquipmentData::set_lost_date(int64_t value) {
  _internal_set_lost_date(value);
  // @@protoc_insertion_point(field_set:idlepb.LostEquipmentData.lost_date)
}

// .idlepb.ItemData item_data = 4;
inline bool LostEquipmentData::_internal_has_item_data() const {
  return this != internal_default_instance() && _impl_.item_data_ != nullptr;
}
inline bool LostEquipmentData::has_item_data() const {
  return _internal_has_item_data();
}
inline void LostEquipmentData::clear_item_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_data_ != nullptr) {
    delete _impl_.item_data_;
  }
  _impl_.item_data_ = nullptr;
}
inline const ::idlepb::ItemData& LostEquipmentData::_internal_item_data() const {
  const ::idlepb::ItemData* p = _impl_.item_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ItemData&>(
      ::idlepb::_ItemData_default_instance_);
}
inline const ::idlepb::ItemData& LostEquipmentData::item_data() const {
  // @@protoc_insertion_point(field_get:idlepb.LostEquipmentData.item_data)
  return _internal_item_data();
}
inline void LostEquipmentData::unsafe_arena_set_allocated_item_data(
    ::idlepb::ItemData* item_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_data_);
  }
  _impl_.item_data_ = item_data;
  if (item_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.LostEquipmentData.item_data)
}
inline ::idlepb::ItemData* LostEquipmentData::release_item_data() {
  
  ::idlepb::ItemData* temp = _impl_.item_data_;
  _impl_.item_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ItemData* LostEquipmentData::unsafe_arena_release_item_data() {
  // @@protoc_insertion_point(field_release:idlepb.LostEquipmentData.item_data)
  
  ::idlepb::ItemData* temp = _impl_.item_data_;
  _impl_.item_data_ = nullptr;
  return temp;
}
inline ::idlepb::ItemData* LostEquipmentData::_internal_mutable_item_data() {
  
  if (_impl_.item_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ItemData>(GetArenaForAllocation());
    _impl_.item_data_ = p;
  }
  return _impl_.item_data_;
}
inline ::idlepb::ItemData* LostEquipmentData::mutable_item_data() {
  ::idlepb::ItemData* _msg = _internal_mutable_item_data();
  // @@protoc_insertion_point(field_mutable:idlepb.LostEquipmentData.item_data)
  return _msg;
}
inline void LostEquipmentData::set_allocated_item_data(::idlepb::ItemData* item_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_data_;
  }
  if (item_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item_data);
    if (message_arena != submessage_arena) {
      item_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_data_ = item_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.LostEquipmentData.item_data)
}

// -------------------------------------------------------------------

// RoleForgeData

// int32 rank = 1;
inline void RoleForgeData::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t RoleForgeData::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t RoleForgeData::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleForgeData.rank)
  return _internal_rank();
}
inline void RoleForgeData::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void RoleForgeData::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleForgeData.rank)
}

// int32 exp = 2;
inline void RoleForgeData::clear_exp() {
  _impl_.exp_ = 0;
}
inline int32_t RoleForgeData::_internal_exp() const {
  return _impl_.exp_;
}
inline int32_t RoleForgeData::exp() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleForgeData.exp)
  return _internal_exp();
}
inline void RoleForgeData::_internal_set_exp(int32_t value) {
  
  _impl_.exp_ = value;
}
inline void RoleForgeData::set_exp(int32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleForgeData.exp)
}

// .idlepb.ForgeMakeData cur_make_data = 4;
inline bool RoleForgeData::_internal_has_cur_make_data() const {
  return this != internal_default_instance() && _impl_.cur_make_data_ != nullptr;
}
inline bool RoleForgeData::has_cur_make_data() const {
  return _internal_has_cur_make_data();
}
inline void RoleForgeData::clear_cur_make_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.cur_make_data_ != nullptr) {
    delete _impl_.cur_make_data_;
  }
  _impl_.cur_make_data_ = nullptr;
}
inline const ::idlepb::ForgeMakeData& RoleForgeData::_internal_cur_make_data() const {
  const ::idlepb::ForgeMakeData* p = _impl_.cur_make_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ForgeMakeData&>(
      ::idlepb::_ForgeMakeData_default_instance_);
}
inline const ::idlepb::ForgeMakeData& RoleForgeData::cur_make_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleForgeData.cur_make_data)
  return _internal_cur_make_data();
}
inline void RoleForgeData::unsafe_arena_set_allocated_cur_make_data(
    ::idlepb::ForgeMakeData* cur_make_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_make_data_);
  }
  _impl_.cur_make_data_ = cur_make_data;
  if (cur_make_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleForgeData.cur_make_data)
}
inline ::idlepb::ForgeMakeData* RoleForgeData::release_cur_make_data() {
  
  ::idlepb::ForgeMakeData* temp = _impl_.cur_make_data_;
  _impl_.cur_make_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ForgeMakeData* RoleForgeData::unsafe_arena_release_cur_make_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleForgeData.cur_make_data)
  
  ::idlepb::ForgeMakeData* temp = _impl_.cur_make_data_;
  _impl_.cur_make_data_ = nullptr;
  return temp;
}
inline ::idlepb::ForgeMakeData* RoleForgeData::_internal_mutable_cur_make_data() {
  
  if (_impl_.cur_make_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ForgeMakeData>(GetArenaForAllocation());
    _impl_.cur_make_data_ = p;
  }
  return _impl_.cur_make_data_;
}
inline ::idlepb::ForgeMakeData* RoleForgeData::mutable_cur_make_data() {
  ::idlepb::ForgeMakeData* _msg = _internal_mutable_cur_make_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleForgeData.cur_make_data)
  return _msg;
}
inline void RoleForgeData::set_allocated_cur_make_data(::idlepb::ForgeMakeData* cur_make_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cur_make_data_;
  }
  if (cur_make_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cur_make_data);
    if (message_arena != submessage_arena) {
      cur_make_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_make_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_make_data_ = cur_make_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleForgeData.cur_make_data)
}

// int32 total_refine_num = 7;
inline void RoleForgeData::clear_total_refine_num() {
  _impl_.total_refine_num_ = 0;
}
inline int32_t RoleForgeData::_internal_total_refine_num() const {
  return _impl_.total_refine_num_;
}
inline int32_t RoleForgeData::total_refine_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleForgeData.total_refine_num)
  return _internal_total_refine_num();
}
inline void RoleForgeData::_internal_set_total_refine_num(int32_t value) {
  
  _impl_.total_refine_num_ = value;
}
inline void RoleForgeData::set_total_refine_num(int32_t value) {
  _internal_set_total_refine_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleForgeData.total_refine_num)
}

// repeated int32 produce_equip_quality_stats = 8;
inline int RoleForgeData::_internal_produce_equip_quality_stats_size() const {
  return _impl_.produce_equip_quality_stats_.size();
}
inline int RoleForgeData::produce_equip_quality_stats_size() const {
  return _internal_produce_equip_quality_stats_size();
}
inline void RoleForgeData::clear_produce_equip_quality_stats() {
  _impl_.produce_equip_quality_stats_.Clear();
}
inline int32_t RoleForgeData::_internal_produce_equip_quality_stats(int index) const {
  return _impl_.produce_equip_quality_stats_.Get(index);
}
inline int32_t RoleForgeData::produce_equip_quality_stats(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleForgeData.produce_equip_quality_stats)
  return _internal_produce_equip_quality_stats(index);
}
inline void RoleForgeData::set_produce_equip_quality_stats(int index, int32_t value) {
  _impl_.produce_equip_quality_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleForgeData.produce_equip_quality_stats)
}
inline void RoleForgeData::_internal_add_produce_equip_quality_stats(int32_t value) {
  _impl_.produce_equip_quality_stats_.Add(value);
}
inline void RoleForgeData::add_produce_equip_quality_stats(int32_t value) {
  _internal_add_produce_equip_quality_stats(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleForgeData.produce_equip_quality_stats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleForgeData::_internal_produce_equip_quality_stats() const {
  return _impl_.produce_equip_quality_stats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleForgeData::produce_equip_quality_stats() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleForgeData.produce_equip_quality_stats)
  return _internal_produce_equip_quality_stats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleForgeData::_internal_mutable_produce_equip_quality_stats() {
  return &_impl_.produce_equip_quality_stats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleForgeData::mutable_produce_equip_quality_stats() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleForgeData.produce_equip_quality_stats)
  return _internal_mutable_produce_equip_quality_stats();
}

// repeated int32 produce_skillequip_quality_stats = 9;
inline int RoleForgeData::_internal_produce_skillequip_quality_stats_size() const {
  return _impl_.produce_skillequip_quality_stats_.size();
}
inline int RoleForgeData::produce_skillequip_quality_stats_size() const {
  return _internal_produce_skillequip_quality_stats_size();
}
inline void RoleForgeData::clear_produce_skillequip_quality_stats() {
  _impl_.produce_skillequip_quality_stats_.Clear();
}
inline int32_t RoleForgeData::_internal_produce_skillequip_quality_stats(int index) const {
  return _impl_.produce_skillequip_quality_stats_.Get(index);
}
inline int32_t RoleForgeData::produce_skillequip_quality_stats(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleForgeData.produce_skillequip_quality_stats)
  return _internal_produce_skillequip_quality_stats(index);
}
inline void RoleForgeData::set_produce_skillequip_quality_stats(int index, int32_t value) {
  _impl_.produce_skillequip_quality_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleForgeData.produce_skillequip_quality_stats)
}
inline void RoleForgeData::_internal_add_produce_skillequip_quality_stats(int32_t value) {
  _impl_.produce_skillequip_quality_stats_.Add(value);
}
inline void RoleForgeData::add_produce_skillequip_quality_stats(int32_t value) {
  _internal_add_produce_skillequip_quality_stats(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleForgeData.produce_skillequip_quality_stats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleForgeData::_internal_produce_skillequip_quality_stats() const {
  return _impl_.produce_skillequip_quality_stats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleForgeData::produce_skillequip_quality_stats() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleForgeData.produce_skillequip_quality_stats)
  return _internal_produce_skillequip_quality_stats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleForgeData::_internal_mutable_produce_skillequip_quality_stats() {
  return &_impl_.produce_skillequip_quality_stats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleForgeData::mutable_produce_skillequip_quality_stats() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleForgeData.produce_skillequip_quality_stats)
  return _internal_mutable_produce_skillequip_quality_stats();
}

// repeated .idlepb.ForgeRecipeData recipes = 10;
inline int RoleForgeData::_internal_recipes_size() const {
  return _impl_.recipes_.size();
}
inline int RoleForgeData::recipes_size() const {
  return _internal_recipes_size();
}
inline void RoleForgeData::clear_recipes() {
  _impl_.recipes_.Clear();
}
inline ::idlepb::ForgeRecipeData* RoleForgeData::mutable_recipes(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleForgeData.recipes)
  return _impl_.recipes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ForgeRecipeData >*
RoleForgeData::mutable_recipes() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleForgeData.recipes)
  return &_impl_.recipes_;
}
inline const ::idlepb::ForgeRecipeData& RoleForgeData::_internal_recipes(int index) const {
  return _impl_.recipes_.Get(index);
}
inline const ::idlepb::ForgeRecipeData& RoleForgeData::recipes(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleForgeData.recipes)
  return _internal_recipes(index);
}
inline ::idlepb::ForgeRecipeData* RoleForgeData::_internal_add_recipes() {
  return _impl_.recipes_.Add();
}
inline ::idlepb::ForgeRecipeData* RoleForgeData::add_recipes() {
  ::idlepb::ForgeRecipeData* _add = _internal_add_recipes();
  // @@protoc_insertion_point(field_add:idlepb.RoleForgeData.recipes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ForgeRecipeData >&
RoleForgeData::recipes() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleForgeData.recipes)
  return _impl_.recipes_;
}

// repeated .idlepb.LostEquipmentData lost_equipment_data = 21;
inline int RoleForgeData::_internal_lost_equipment_data_size() const {
  return _impl_.lost_equipment_data_.size();
}
inline int RoleForgeData::lost_equipment_data_size() const {
  return _internal_lost_equipment_data_size();
}
inline void RoleForgeData::clear_lost_equipment_data() {
  _impl_.lost_equipment_data_.Clear();
}
inline ::idlepb::LostEquipmentData* RoleForgeData::mutable_lost_equipment_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleForgeData.lost_equipment_data)
  return _impl_.lost_equipment_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LostEquipmentData >*
RoleForgeData::mutable_lost_equipment_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleForgeData.lost_equipment_data)
  return &_impl_.lost_equipment_data_;
}
inline const ::idlepb::LostEquipmentData& RoleForgeData::_internal_lost_equipment_data(int index) const {
  return _impl_.lost_equipment_data_.Get(index);
}
inline const ::idlepb::LostEquipmentData& RoleForgeData::lost_equipment_data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleForgeData.lost_equipment_data)
  return _internal_lost_equipment_data(index);
}
inline ::idlepb::LostEquipmentData* RoleForgeData::_internal_add_lost_equipment_data() {
  return _impl_.lost_equipment_data_.Add();
}
inline ::idlepb::LostEquipmentData* RoleForgeData::add_lost_equipment_data() {
  ::idlepb::LostEquipmentData* _add = _internal_add_lost_equipment_data();
  // @@protoc_insertion_point(field_add:idlepb.RoleForgeData.lost_equipment_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LostEquipmentData >&
RoleForgeData::lost_equipment_data() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleForgeData.lost_equipment_data)
  return _impl_.lost_equipment_data_;
}

// int32 destroy_num = 22;
inline void RoleForgeData::clear_destroy_num() {
  _impl_.destroy_num_ = 0;
}
inline int32_t RoleForgeData::_internal_destroy_num() const {
  return _impl_.destroy_num_;
}
inline int32_t RoleForgeData::destroy_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleForgeData.destroy_num)
  return _internal_destroy_num();
}
inline void RoleForgeData::_internal_set_destroy_num(int32_t value) {
  
  _impl_.destroy_num_ = value;
}
inline void RoleForgeData::set_destroy_num(int32_t value) {
  _internal_set_destroy_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleForgeData.destroy_num)
}

// -------------------------------------------------------------------

// PillPropertyData

// int32 item_id = 1;
inline void PillPropertyData::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t PillPropertyData::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t PillPropertyData::item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.PillPropertyData.item_id)
  return _internal_item_id();
}
inline void PillPropertyData::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void PillPropertyData::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.PillPropertyData.item_id)
}

// int32 consumed_num = 3;
inline void PillPropertyData::clear_consumed_num() {
  _impl_.consumed_num_ = 0;
}
inline int32_t PillPropertyData::_internal_consumed_num() const {
  return _impl_.consumed_num_;
}
inline int32_t PillPropertyData::consumed_num() const {
  // @@protoc_insertion_point(field_get:idlepb.PillPropertyData.consumed_num)
  return _internal_consumed_num();
}
inline void PillPropertyData::_internal_set_consumed_num(int32_t value) {
  
  _impl_.consumed_num_ = value;
}
inline void PillPropertyData::set_consumed_num(int32_t value) {
  _internal_set_consumed_num(value);
  // @@protoc_insertion_point(field_set:idlepb.PillPropertyData.consumed_num)
}

// -------------------------------------------------------------------

// GongFaData

// int32 cfg_id = 1;
inline void GongFaData::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t GongFaData::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t GongFaData::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.GongFaData.cfg_id)
  return _internal_cfg_id();
}
inline void GongFaData::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void GongFaData::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.GongFaData.cfg_id)
}

// int32 level = 2;
inline void GongFaData::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t GongFaData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t GongFaData::level() const {
  // @@protoc_insertion_point(field_get:idlepb.GongFaData.level)
  return _internal_level();
}
inline void GongFaData::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void GongFaData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:idlepb.GongFaData.level)
}

// int64 begin_time = 3;
inline void GongFaData::clear_begin_time() {
  _impl_.begin_time_ = int64_t{0};
}
inline int64_t GongFaData::_internal_begin_time() const {
  return _impl_.begin_time_;
}
inline int64_t GongFaData::begin_time() const {
  // @@protoc_insertion_point(field_get:idlepb.GongFaData.begin_time)
  return _internal_begin_time();
}
inline void GongFaData::_internal_set_begin_time(int64_t value) {
  
  _impl_.begin_time_ = value;
}
inline void GongFaData::set_begin_time(int64_t value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:idlepb.GongFaData.begin_time)
}

// .idlepb.GongFaState state = 4;
inline void GongFaData::clear_state() {
  _impl_.state_ = 0;
}
inline ::idlepb::GongFaState GongFaData::_internal_state() const {
  return static_cast< ::idlepb::GongFaState >(_impl_.state_);
}
inline ::idlepb::GongFaState GongFaData::state() const {
  // @@protoc_insertion_point(field_get:idlepb.GongFaData.state)
  return _internal_state();
}
inline void GongFaData::_internal_set_state(::idlepb::GongFaState value) {
  
  _impl_.state_ = value;
}
inline void GongFaData::set_state(::idlepb::GongFaState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:idlepb.GongFaData.state)
}

// float combat_power = 6;
inline void GongFaData::clear_combat_power() {
  _impl_.combat_power_ = 0;
}
inline float GongFaData::_internal_combat_power() const {
  return _impl_.combat_power_;
}
inline float GongFaData::combat_power() const {
  // @@protoc_insertion_point(field_get:idlepb.GongFaData.combat_power)
  return _internal_combat_power();
}
inline void GongFaData::_internal_set_combat_power(float value) {
  
  _impl_.combat_power_ = value;
}
inline void GongFaData::set_combat_power(float value) {
  _internal_set_combat_power(value);
  // @@protoc_insertion_point(field_set:idlepb.GongFaData.combat_power)
}

// -------------------------------------------------------------------

// RoleGongFaData

// repeated .idlepb.GongFaData data = 1;
inline int RoleGongFaData::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int RoleGongFaData::data_size() const {
  return _internal_data_size();
}
inline void RoleGongFaData::clear_data() {
  _impl_.data_.Clear();
}
inline ::idlepb::GongFaData* RoleGongFaData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleGongFaData.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GongFaData >*
RoleGongFaData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleGongFaData.data)
  return &_impl_.data_;
}
inline const ::idlepb::GongFaData& RoleGongFaData::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::idlepb::GongFaData& RoleGongFaData::data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleGongFaData.data)
  return _internal_data(index);
}
inline ::idlepb::GongFaData* RoleGongFaData::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::idlepb::GongFaData* RoleGongFaData::add_data() {
  ::idlepb::GongFaData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:idlepb.RoleGongFaData.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::GongFaData >&
RoleGongFaData::data() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleGongFaData.data)
  return _impl_.data_;
}

// repeated int32 active_max_effect = 2;
inline int RoleGongFaData::_internal_active_max_effect_size() const {
  return _impl_.active_max_effect_.size();
}
inline int RoleGongFaData::active_max_effect_size() const {
  return _internal_active_max_effect_size();
}
inline void RoleGongFaData::clear_active_max_effect() {
  _impl_.active_max_effect_.Clear();
}
inline int32_t RoleGongFaData::_internal_active_max_effect(int index) const {
  return _impl_.active_max_effect_.Get(index);
}
inline int32_t RoleGongFaData::active_max_effect(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleGongFaData.active_max_effect)
  return _internal_active_max_effect(index);
}
inline void RoleGongFaData::set_active_max_effect(int index, int32_t value) {
  _impl_.active_max_effect_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleGongFaData.active_max_effect)
}
inline void RoleGongFaData::_internal_add_active_max_effect(int32_t value) {
  _impl_.active_max_effect_.Add(value);
}
inline void RoleGongFaData::add_active_max_effect(int32_t value) {
  _internal_add_active_max_effect(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleGongFaData.active_max_effect)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleGongFaData::_internal_active_max_effect() const {
  return _impl_.active_max_effect_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleGongFaData::active_max_effect() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleGongFaData.active_max_effect)
  return _internal_active_max_effect();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleGongFaData::_internal_mutable_active_max_effect() {
  return &_impl_.active_max_effect_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleGongFaData::mutable_active_max_effect() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleGongFaData.active_max_effect)
  return _internal_mutable_active_max_effect();
}

// int32 gongfa_point_use_num = 3;
inline void RoleGongFaData::clear_gongfa_point_use_num() {
  _impl_.gongfa_point_use_num_ = 0;
}
inline int32_t RoleGongFaData::_internal_gongfa_point_use_num() const {
  return _impl_.gongfa_point_use_num_;
}
inline int32_t RoleGongFaData::gongfa_point_use_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleGongFaData.gongfa_point_use_num)
  return _internal_gongfa_point_use_num();
}
inline void RoleGongFaData::_internal_set_gongfa_point_use_num(int32_t value) {
  
  _impl_.gongfa_point_use_num_ = value;
}
inline void RoleGongFaData::set_gongfa_point_use_num(int32_t value) {
  _internal_set_gongfa_point_use_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleGongFaData.gongfa_point_use_num)
}

// -------------------------------------------------------------------

// CollectionEntrySaveData

// int32 id = 1;
inline void CollectionEntrySaveData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t CollectionEntrySaveData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t CollectionEntrySaveData::id() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntrySaveData.id)
  return _internal_id();
}
inline void CollectionEntrySaveData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void CollectionEntrySaveData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntrySaveData.id)
}

// int32 level = 2;
inline void CollectionEntrySaveData::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t CollectionEntrySaveData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t CollectionEntrySaveData::level() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntrySaveData.level)
  return _internal_level();
}
inline void CollectionEntrySaveData::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void CollectionEntrySaveData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntrySaveData.level)
}

// int32 star = 3;
inline void CollectionEntrySaveData::clear_star() {
  _impl_.star_ = 0;
}
inline int32_t CollectionEntrySaveData::_internal_star() const {
  return _impl_.star_;
}
inline int32_t CollectionEntrySaveData::star() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntrySaveData.star)
  return _internal_star();
}
inline void CollectionEntrySaveData::_internal_set_star(int32_t value) {
  
  _impl_.star_ = value;
}
inline void CollectionEntrySaveData::set_star(int32_t value) {
  _internal_set_star(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntrySaveData.star)
}

// bool is_activated = 4;
inline void CollectionEntrySaveData::clear_is_activated() {
  _impl_.is_activated_ = false;
}
inline bool CollectionEntrySaveData::_internal_is_activated() const {
  return _impl_.is_activated_;
}
inline bool CollectionEntrySaveData::is_activated() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntrySaveData.is_activated)
  return _internal_is_activated();
}
inline void CollectionEntrySaveData::_internal_set_is_activated(bool value) {
  
  _impl_.is_activated_ = value;
}
inline void CollectionEntrySaveData::set_is_activated(bool value) {
  _internal_set_is_activated(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntrySaveData.is_activated)
}

// int32 piece_num = 5;
inline void CollectionEntrySaveData::clear_piece_num() {
  _impl_.piece_num_ = 0;
}
inline int32_t CollectionEntrySaveData::_internal_piece_num() const {
  return _impl_.piece_num_;
}
inline int32_t CollectionEntrySaveData::piece_num() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionEntrySaveData.piece_num)
  return _internal_piece_num();
}
inline void CollectionEntrySaveData::_internal_set_piece_num(int32_t value) {
  
  _impl_.piece_num_ = value;
}
inline void CollectionEntrySaveData::set_piece_num(int32_t value) {
  _internal_set_piece_num(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionEntrySaveData.piece_num)
}

// -------------------------------------------------------------------

// CommonCollectionPieceData

// .idlepb.ItemQuality quality = 1;
inline void CommonCollectionPieceData::clear_quality() {
  _impl_.quality_ = 0;
}
inline ::idlepb::ItemQuality CommonCollectionPieceData::_internal_quality() const {
  return static_cast< ::idlepb::ItemQuality >(_impl_.quality_);
}
inline ::idlepb::ItemQuality CommonCollectionPieceData::quality() const {
  // @@protoc_insertion_point(field_get:idlepb.CommonCollectionPieceData.quality)
  return _internal_quality();
}
inline void CommonCollectionPieceData::_internal_set_quality(::idlepb::ItemQuality value) {
  
  _impl_.quality_ = value;
}
inline void CommonCollectionPieceData::set_quality(::idlepb::ItemQuality value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:idlepb.CommonCollectionPieceData.quality)
}

// int32 piece_num = 2;
inline void CommonCollectionPieceData::clear_piece_num() {
  _impl_.piece_num_ = 0;
}
inline int32_t CommonCollectionPieceData::_internal_piece_num() const {
  return _impl_.piece_num_;
}
inline int32_t CommonCollectionPieceData::piece_num() const {
  // @@protoc_insertion_point(field_get:idlepb.CommonCollectionPieceData.piece_num)
  return _internal_piece_num();
}
inline void CommonCollectionPieceData::_internal_set_piece_num(int32_t value) {
  
  _impl_.piece_num_ = value;
}
inline void CommonCollectionPieceData::set_piece_num(int32_t value) {
  _internal_set_piece_num(value);
  // @@protoc_insertion_point(field_set:idlepb.CommonCollectionPieceData.piece_num)
}

// -------------------------------------------------------------------

// CollectionZoneActiveAwardData

// .idlepb.CollectionZoneType zone_type = 1;
inline void CollectionZoneActiveAwardData::clear_zone_type() {
  _impl_.zone_type_ = 0;
}
inline ::idlepb::CollectionZoneType CollectionZoneActiveAwardData::_internal_zone_type() const {
  return static_cast< ::idlepb::CollectionZoneType >(_impl_.zone_type_);
}
inline ::idlepb::CollectionZoneType CollectionZoneActiveAwardData::zone_type() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionZoneActiveAwardData.zone_type)
  return _internal_zone_type();
}
inline void CollectionZoneActiveAwardData::_internal_set_zone_type(::idlepb::CollectionZoneType value) {
  
  _impl_.zone_type_ = value;
}
inline void CollectionZoneActiveAwardData::set_zone_type(::idlepb::CollectionZoneType value) {
  _internal_set_zone_type(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionZoneActiveAwardData.zone_type)
}

// int32 num = 2;
inline void CollectionZoneActiveAwardData::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t CollectionZoneActiveAwardData::_internal_num() const {
  return _impl_.num_;
}
inline int32_t CollectionZoneActiveAwardData::num() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionZoneActiveAwardData.num)
  return _internal_num();
}
inline void CollectionZoneActiveAwardData::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void CollectionZoneActiveAwardData::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionZoneActiveAwardData.num)
}

// -------------------------------------------------------------------

// RoleCollectionSaveData

// repeated .idlepb.CollectionEntrySaveData all_entries = 1;
inline int RoleCollectionSaveData::_internal_all_entries_size() const {
  return _impl_.all_entries_.size();
}
inline int RoleCollectionSaveData::all_entries_size() const {
  return _internal_all_entries_size();
}
inline void RoleCollectionSaveData::clear_all_entries() {
  _impl_.all_entries_.Clear();
}
inline ::idlepb::CollectionEntrySaveData* RoleCollectionSaveData::mutable_all_entries(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleCollectionSaveData.all_entries)
  return _impl_.all_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionEntrySaveData >*
RoleCollectionSaveData::mutable_all_entries() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleCollectionSaveData.all_entries)
  return &_impl_.all_entries_;
}
inline const ::idlepb::CollectionEntrySaveData& RoleCollectionSaveData::_internal_all_entries(int index) const {
  return _impl_.all_entries_.Get(index);
}
inline const ::idlepb::CollectionEntrySaveData& RoleCollectionSaveData::all_entries(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleCollectionSaveData.all_entries)
  return _internal_all_entries(index);
}
inline ::idlepb::CollectionEntrySaveData* RoleCollectionSaveData::_internal_add_all_entries() {
  return _impl_.all_entries_.Add();
}
inline ::idlepb::CollectionEntrySaveData* RoleCollectionSaveData::add_all_entries() {
  ::idlepb::CollectionEntrySaveData* _add = _internal_add_all_entries();
  // @@protoc_insertion_point(field_add:idlepb.RoleCollectionSaveData.all_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionEntrySaveData >&
RoleCollectionSaveData::all_entries() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleCollectionSaveData.all_entries)
  return _impl_.all_entries_;
}

// repeated .idlepb.CommonCollectionPieceData common_pieces = 2;
inline int RoleCollectionSaveData::_internal_common_pieces_size() const {
  return _impl_.common_pieces_.size();
}
inline int RoleCollectionSaveData::common_pieces_size() const {
  return _internal_common_pieces_size();
}
inline void RoleCollectionSaveData::clear_common_pieces() {
  _impl_.common_pieces_.Clear();
}
inline ::idlepb::CommonCollectionPieceData* RoleCollectionSaveData::mutable_common_pieces(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleCollectionSaveData.common_pieces)
  return _impl_.common_pieces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CommonCollectionPieceData >*
RoleCollectionSaveData::mutable_common_pieces() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleCollectionSaveData.common_pieces)
  return &_impl_.common_pieces_;
}
inline const ::idlepb::CommonCollectionPieceData& RoleCollectionSaveData::_internal_common_pieces(int index) const {
  return _impl_.common_pieces_.Get(index);
}
inline const ::idlepb::CommonCollectionPieceData& RoleCollectionSaveData::common_pieces(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleCollectionSaveData.common_pieces)
  return _internal_common_pieces(index);
}
inline ::idlepb::CommonCollectionPieceData* RoleCollectionSaveData::_internal_add_common_pieces() {
  return _impl_.common_pieces_.Add();
}
inline ::idlepb::CommonCollectionPieceData* RoleCollectionSaveData::add_common_pieces() {
  ::idlepb::CommonCollectionPieceData* _add = _internal_add_common_pieces();
  // @@protoc_insertion_point(field_add:idlepb.RoleCollectionSaveData.common_pieces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CommonCollectionPieceData >&
RoleCollectionSaveData::common_pieces() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleCollectionSaveData.common_pieces)
  return _impl_.common_pieces_;
}

// repeated int32 draw_award_done_histories = 3;
inline int RoleCollectionSaveData::_internal_draw_award_done_histories_size() const {
  return _impl_.draw_award_done_histories_.size();
}
inline int RoleCollectionSaveData::draw_award_done_histories_size() const {
  return _internal_draw_award_done_histories_size();
}
inline void RoleCollectionSaveData::clear_draw_award_done_histories() {
  _impl_.draw_award_done_histories_.Clear();
}
inline int32_t RoleCollectionSaveData::_internal_draw_award_done_histories(int index) const {
  return _impl_.draw_award_done_histories_.Get(index);
}
inline int32_t RoleCollectionSaveData::draw_award_done_histories(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleCollectionSaveData.draw_award_done_histories)
  return _internal_draw_award_done_histories(index);
}
inline void RoleCollectionSaveData::set_draw_award_done_histories(int index, int32_t value) {
  _impl_.draw_award_done_histories_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleCollectionSaveData.draw_award_done_histories)
}
inline void RoleCollectionSaveData::_internal_add_draw_award_done_histories(int32_t value) {
  _impl_.draw_award_done_histories_.Add(value);
}
inline void RoleCollectionSaveData::add_draw_award_done_histories(int32_t value) {
  _internal_add_draw_award_done_histories(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleCollectionSaveData.draw_award_done_histories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleCollectionSaveData::_internal_draw_award_done_histories() const {
  return _impl_.draw_award_done_histories_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleCollectionSaveData::draw_award_done_histories() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleCollectionSaveData.draw_award_done_histories)
  return _internal_draw_award_done_histories();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleCollectionSaveData::_internal_mutable_draw_award_done_histories() {
  return &_impl_.draw_award_done_histories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleCollectionSaveData::mutable_draw_award_done_histories() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleCollectionSaveData.draw_award_done_histories)
  return _internal_mutable_draw_award_done_histories();
}

// repeated .idlepb.CollectionZoneActiveAwardData zone_active_awards = 4;
inline int RoleCollectionSaveData::_internal_zone_active_awards_size() const {
  return _impl_.zone_active_awards_.size();
}
inline int RoleCollectionSaveData::zone_active_awards_size() const {
  return _internal_zone_active_awards_size();
}
inline void RoleCollectionSaveData::clear_zone_active_awards() {
  _impl_.zone_active_awards_.Clear();
}
inline ::idlepb::CollectionZoneActiveAwardData* RoleCollectionSaveData::mutable_zone_active_awards(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleCollectionSaveData.zone_active_awards)
  return _impl_.zone_active_awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionZoneActiveAwardData >*
RoleCollectionSaveData::mutable_zone_active_awards() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleCollectionSaveData.zone_active_awards)
  return &_impl_.zone_active_awards_;
}
inline const ::idlepb::CollectionZoneActiveAwardData& RoleCollectionSaveData::_internal_zone_active_awards(int index) const {
  return _impl_.zone_active_awards_.Get(index);
}
inline const ::idlepb::CollectionZoneActiveAwardData& RoleCollectionSaveData::zone_active_awards(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleCollectionSaveData.zone_active_awards)
  return _internal_zone_active_awards(index);
}
inline ::idlepb::CollectionZoneActiveAwardData* RoleCollectionSaveData::_internal_add_zone_active_awards() {
  return _impl_.zone_active_awards_.Add();
}
inline ::idlepb::CollectionZoneActiveAwardData* RoleCollectionSaveData::add_zone_active_awards() {
  ::idlepb::CollectionZoneActiveAwardData* _add = _internal_add_zone_active_awards();
  // @@protoc_insertion_point(field_add:idlepb.RoleCollectionSaveData.zone_active_awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionZoneActiveAwardData >&
RoleCollectionSaveData::zone_active_awards() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleCollectionSaveData.zone_active_awards)
  return _impl_.zone_active_awards_;
}

// int64 next_reset_enhance_ticks = 5;
inline void RoleCollectionSaveData::clear_next_reset_enhance_ticks() {
  _impl_.next_reset_enhance_ticks_ = int64_t{0};
}
inline int64_t RoleCollectionSaveData::_internal_next_reset_enhance_ticks() const {
  return _impl_.next_reset_enhance_ticks_;
}
inline int64_t RoleCollectionSaveData::next_reset_enhance_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleCollectionSaveData.next_reset_enhance_ticks)
  return _internal_next_reset_enhance_ticks();
}
inline void RoleCollectionSaveData::_internal_set_next_reset_enhance_ticks(int64_t value) {
  
  _impl_.next_reset_enhance_ticks_ = value;
}
inline void RoleCollectionSaveData::set_next_reset_enhance_ticks(int64_t value) {
  _internal_set_next_reset_enhance_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleCollectionSaveData.next_reset_enhance_ticks)
}

// -------------------------------------------------------------------

// FuZengTuple

// int32 cfg_id = 1;
inline void FuZengTuple::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t FuZengTuple::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t FuZengTuple::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.FuZengTuple.cfg_id)
  return _internal_cfg_id();
}
inline void FuZengTuple::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void FuZengTuple::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.FuZengTuple.cfg_id)
}

// repeated int64 num = 2;
inline int FuZengTuple::_internal_num_size() const {
  return _impl_.num_.size();
}
inline int FuZengTuple::num_size() const {
  return _internal_num_size();
}
inline void FuZengTuple::clear_num() {
  _impl_.num_.Clear();
}
inline int64_t FuZengTuple::_internal_num(int index) const {
  return _impl_.num_.Get(index);
}
inline int64_t FuZengTuple::num(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.FuZengTuple.num)
  return _internal_num(index);
}
inline void FuZengTuple::set_num(int index, int64_t value) {
  _impl_.num_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.FuZengTuple.num)
}
inline void FuZengTuple::_internal_add_num(int64_t value) {
  _impl_.num_.Add(value);
}
inline void FuZengTuple::add_num(int64_t value) {
  _internal_add_num(value);
  // @@protoc_insertion_point(field_add:idlepb.FuZengTuple.num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FuZengTuple::_internal_num() const {
  return _impl_.num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FuZengTuple::num() const {
  // @@protoc_insertion_point(field_list:idlepb.FuZengTuple.num)
  return _internal_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FuZengTuple::_internal_mutable_num() {
  return &_impl_.num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FuZengTuple::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.FuZengTuple.num)
  return _internal_mutable_num();
}

// -------------------------------------------------------------------

// FuZengData

// .idlepb.FuZengType type = 1;
inline void FuZengData::clear_type() {
  _impl_.type_ = 0;
}
inline ::idlepb::FuZengType FuZengData::_internal_type() const {
  return static_cast< ::idlepb::FuZengType >(_impl_.type_);
}
inline ::idlepb::FuZengType FuZengData::type() const {
  // @@protoc_insertion_point(field_get:idlepb.FuZengData.type)
  return _internal_type();
}
inline void FuZengData::_internal_set_type(::idlepb::FuZengType value) {
  
  _impl_.type_ = value;
}
inline void FuZengData::set_type(::idlepb::FuZengType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.FuZengData.type)
}

// repeated .idlepb.FuZengTuple received_record = 2;
inline int FuZengData::_internal_received_record_size() const {
  return _impl_.received_record_.size();
}
inline int FuZengData::received_record_size() const {
  return _internal_received_record_size();
}
inline void FuZengData::clear_received_record() {
  _impl_.received_record_.Clear();
}
inline ::idlepb::FuZengTuple* FuZengData::mutable_received_record(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.FuZengData.received_record)
  return _impl_.received_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZengTuple >*
FuZengData::mutable_received_record() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.FuZengData.received_record)
  return &_impl_.received_record_;
}
inline const ::idlepb::FuZengTuple& FuZengData::_internal_received_record(int index) const {
  return _impl_.received_record_.Get(index);
}
inline const ::idlepb::FuZengTuple& FuZengData::received_record(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.FuZengData.received_record)
  return _internal_received_record(index);
}
inline ::idlepb::FuZengTuple* FuZengData::_internal_add_received_record() {
  return _impl_.received_record_.Add();
}
inline ::idlepb::FuZengTuple* FuZengData::add_received_record() {
  ::idlepb::FuZengTuple* _add = _internal_add_received_record();
  // @@protoc_insertion_point(field_add:idlepb.FuZengData.received_record)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZengTuple >&
FuZengData::received_record() const {
  // @@protoc_insertion_point(field_list:idlepb.FuZengData.received_record)
  return _impl_.received_record_;
}

// int64 max_num = 3;
inline void FuZengData::clear_max_num() {
  _impl_.max_num_ = int64_t{0};
}
inline int64_t FuZengData::_internal_max_num() const {
  return _impl_.max_num_;
}
inline int64_t FuZengData::max_num() const {
  // @@protoc_insertion_point(field_get:idlepb.FuZengData.max_num)
  return _internal_max_num();
}
inline void FuZengData::_internal_set_max_num(int64_t value) {
  
  _impl_.max_num_ = value;
}
inline void FuZengData::set_max_num(int64_t value) {
  _internal_set_max_num(value);
  // @@protoc_insertion_point(field_set:idlepb.FuZengData.max_num)
}

// -------------------------------------------------------------------

// RoleFuZengData

// repeated .idlepb.FuZengData data = 1;
inline int RoleFuZengData::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int RoleFuZengData::data_size() const {
  return _internal_data_size();
}
inline void RoleFuZengData::clear_data() {
  _impl_.data_.Clear();
}
inline ::idlepb::FuZengData* RoleFuZengData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleFuZengData.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZengData >*
RoleFuZengData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleFuZengData.data)
  return &_impl_.data_;
}
inline const ::idlepb::FuZengData& RoleFuZengData::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::idlepb::FuZengData& RoleFuZengData::data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFuZengData.data)
  return _internal_data(index);
}
inline ::idlepb::FuZengData* RoleFuZengData::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::idlepb::FuZengData* RoleFuZengData::add_data() {
  ::idlepb::FuZengData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:idlepb.RoleFuZengData.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZengData >&
RoleFuZengData::data() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleFuZengData.data)
  return _impl_.data_;
}

// -------------------------------------------------------------------

// RoleFightModeData

// .idlepb.FightMode cur_mode = 1;
inline void RoleFightModeData::clear_cur_mode() {
  _impl_.cur_mode_ = 0;
}
inline ::idlepb::FightMode RoleFightModeData::_internal_cur_mode() const {
  return static_cast< ::idlepb::FightMode >(_impl_.cur_mode_);
}
inline ::idlepb::FightMode RoleFightModeData::cur_mode() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFightModeData.cur_mode)
  return _internal_cur_mode();
}
inline void RoleFightModeData::_internal_set_cur_mode(::idlepb::FightMode value) {
  
  _impl_.cur_mode_ = value;
}
inline void RoleFightModeData::set_cur_mode(::idlepb::FightMode value) {
  _internal_set_cur_mode(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleFightModeData.cur_mode)
}

// int64 last_attack_ticks = 2;
inline void RoleFightModeData::clear_last_attack_ticks() {
  _impl_.last_attack_ticks_ = int64_t{0};
}
inline int64_t RoleFightModeData::_internal_last_attack_ticks() const {
  return _impl_.last_attack_ticks_;
}
inline int64_t RoleFightModeData::last_attack_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFightModeData.last_attack_ticks)
  return _internal_last_attack_ticks();
}
inline void RoleFightModeData::_internal_set_last_attack_ticks(int64_t value) {
  
  _impl_.last_attack_ticks_ = value;
}
inline void RoleFightModeData::set_last_attack_ticks(int64_t value) {
  _internal_set_last_attack_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleFightModeData.last_attack_ticks)
}

// int64 last_defence_ticks = 3;
inline void RoleFightModeData::clear_last_defence_ticks() {
  _impl_.last_defence_ticks_ = int64_t{0};
}
inline int64_t RoleFightModeData::_internal_last_defence_ticks() const {
  return _impl_.last_defence_ticks_;
}
inline int64_t RoleFightModeData::last_defence_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFightModeData.last_defence_ticks)
  return _internal_last_defence_ticks();
}
inline void RoleFightModeData::_internal_set_last_defence_ticks(int64_t value) {
  
  _impl_.last_defence_ticks_ = value;
}
inline void RoleFightModeData::set_last_defence_ticks(int64_t value) {
  _internal_set_last_defence_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleFightModeData.last_defence_ticks)
}

// -------------------------------------------------------------------

// RoleNormalSettings

// .idlepb.AttackLockType attack_lock_type = 1;
inline void RoleNormalSettings::clear_attack_lock_type() {
  _impl_.attack_lock_type_ = 0;
}
inline ::idlepb::AttackLockType RoleNormalSettings::_internal_attack_lock_type() const {
  return static_cast< ::idlepb::AttackLockType >(_impl_.attack_lock_type_);
}
inline ::idlepb::AttackLockType RoleNormalSettings::attack_lock_type() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleNormalSettings.attack_lock_type)
  return _internal_attack_lock_type();
}
inline void RoleNormalSettings::_internal_set_attack_lock_type(::idlepb::AttackLockType value) {
  
  _impl_.attack_lock_type_ = value;
}
inline void RoleNormalSettings::set_attack_lock_type(::idlepb::AttackLockType value) {
  _internal_set_attack_lock_type(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleNormalSettings.attack_lock_type)
}

// .idlepb.AttackUnlockType attack_unlock_type = 2;
inline void RoleNormalSettings::clear_attack_unlock_type() {
  _impl_.attack_unlock_type_ = 0;
}
inline ::idlepb::AttackUnlockType RoleNormalSettings::_internal_attack_unlock_type() const {
  return static_cast< ::idlepb::AttackUnlockType >(_impl_.attack_unlock_type_);
}
inline ::idlepb::AttackUnlockType RoleNormalSettings::attack_unlock_type() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleNormalSettings.attack_unlock_type)
  return _internal_attack_unlock_type();
}
inline void RoleNormalSettings::_internal_set_attack_unlock_type(::idlepb::AttackUnlockType value) {
  
  _impl_.attack_unlock_type_ = value;
}
inline void RoleNormalSettings::set_attack_unlock_type(::idlepb::AttackUnlockType value) {
  _internal_set_attack_unlock_type(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleNormalSettings.attack_unlock_type)
}

// bool show_unlock_button = 3;
inline void RoleNormalSettings::clear_show_unlock_button() {
  _impl_.show_unlock_button_ = false;
}
inline bool RoleNormalSettings::_internal_show_unlock_button() const {
  return _impl_.show_unlock_button_;
}
inline bool RoleNormalSettings::show_unlock_button() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleNormalSettings.show_unlock_button)
  return _internal_show_unlock_button();
}
inline void RoleNormalSettings::_internal_set_show_unlock_button(bool value) {
  
  _impl_.show_unlock_button_ = value;
}
inline void RoleNormalSettings::set_show_unlock_button(bool value) {
  _internal_set_show_unlock_button(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleNormalSettings.show_unlock_button)
}

// -------------------------------------------------------------------

// RoleData

// uint64 user_id = 1;
inline void RoleData::clear_user_id() {
  _impl_.user_id_ = uint64_t{0u};
}
inline uint64_t RoleData::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint64_t RoleData::user_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.user_id)
  return _internal_user_id();
}
inline void RoleData::_internal_set_user_id(uint64_t value) {
  
  _impl_.user_id_ = value;
}
inline void RoleData::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.user_id)
}

// uint64 role_id = 2;
inline void RoleData::clear_role_id() {
  _impl_.role_id_ = uint64_t{0u};
}
inline uint64_t RoleData::_internal_role_id() const {
  return _impl_.role_id_;
}
inline uint64_t RoleData::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.role_id)
  return _internal_role_id();
}
inline void RoleData::_internal_set_role_id(uint64_t value) {
  
  _impl_.role_id_ = value;
}
inline void RoleData::set_role_id(uint64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.role_id)
}

// string role_name = 3;
inline void RoleData::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& RoleData::role_name() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleData::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.RoleData.role_name)
}
inline std::string* RoleData::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.role_name)
  return _s;
}
inline const std::string& RoleData::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void RoleData::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleData::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleData::release_role_name() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.role_name)
  return _impl_.role_name_.Release();
}
inline void RoleData::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.role_name)
}

// .idlepb.CurrencyData currency_data = 4;
inline bool RoleData::_internal_has_currency_data() const {
  return this != internal_default_instance() && _impl_.currency_data_ != nullptr;
}
inline bool RoleData::has_currency_data() const {
  return _internal_has_currency_data();
}
inline void RoleData::clear_currency_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.currency_data_ != nullptr) {
    delete _impl_.currency_data_;
  }
  _impl_.currency_data_ = nullptr;
}
inline const ::idlepb::CurrencyData& RoleData::_internal_currency_data() const {
  const ::idlepb::CurrencyData* p = _impl_.currency_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CurrencyData&>(
      ::idlepb::_CurrencyData_default_instance_);
}
inline const ::idlepb::CurrencyData& RoleData::currency_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.currency_data)
  return _internal_currency_data();
}
inline void RoleData::unsafe_arena_set_allocated_currency_data(
    ::idlepb::CurrencyData* currency_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.currency_data_);
  }
  _impl_.currency_data_ = currency_data;
  if (currency_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.currency_data)
}
inline ::idlepb::CurrencyData* RoleData::release_currency_data() {
  
  ::idlepb::CurrencyData* temp = _impl_.currency_data_;
  _impl_.currency_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CurrencyData* RoleData::unsafe_arena_release_currency_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.currency_data)
  
  ::idlepb::CurrencyData* temp = _impl_.currency_data_;
  _impl_.currency_data_ = nullptr;
  return temp;
}
inline ::idlepb::CurrencyData* RoleData::_internal_mutable_currency_data() {
  
  if (_impl_.currency_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CurrencyData>(GetArenaForAllocation());
    _impl_.currency_data_ = p;
  }
  return _impl_.currency_data_;
}
inline ::idlepb::CurrencyData* RoleData::mutable_currency_data() {
  ::idlepb::CurrencyData* _msg = _internal_mutable_currency_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.currency_data)
  return _msg;
}
inline void RoleData::set_allocated_currency_data(::idlepb::CurrencyData* currency_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.currency_data_;
  }
  if (currency_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(currency_data);
    if (message_arena != submessage_arena) {
      currency_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currency_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.currency_data_ = currency_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.currency_data)
}

// .idlepb.CultivationData physics_data = 5;
inline bool RoleData::_internal_has_physics_data() const {
  return this != internal_default_instance() && _impl_.physics_data_ != nullptr;
}
inline bool RoleData::has_physics_data() const {
  return _internal_has_physics_data();
}
inline void RoleData::clear_physics_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.physics_data_ != nullptr) {
    delete _impl_.physics_data_;
  }
  _impl_.physics_data_ = nullptr;
}
inline const ::idlepb::CultivationData& RoleData::_internal_physics_data() const {
  const ::idlepb::CultivationData* p = _impl_.physics_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CultivationData&>(
      ::idlepb::_CultivationData_default_instance_);
}
inline const ::idlepb::CultivationData& RoleData::physics_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.physics_data)
  return _internal_physics_data();
}
inline void RoleData::unsafe_arena_set_allocated_physics_data(
    ::idlepb::CultivationData* physics_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physics_data_);
  }
  _impl_.physics_data_ = physics_data;
  if (physics_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.physics_data)
}
inline ::idlepb::CultivationData* RoleData::release_physics_data() {
  
  ::idlepb::CultivationData* temp = _impl_.physics_data_;
  _impl_.physics_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CultivationData* RoleData::unsafe_arena_release_physics_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.physics_data)
  
  ::idlepb::CultivationData* temp = _impl_.physics_data_;
  _impl_.physics_data_ = nullptr;
  return temp;
}
inline ::idlepb::CultivationData* RoleData::_internal_mutable_physics_data() {
  
  if (_impl_.physics_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CultivationData>(GetArenaForAllocation());
    _impl_.physics_data_ = p;
  }
  return _impl_.physics_data_;
}
inline ::idlepb::CultivationData* RoleData::mutable_physics_data() {
  ::idlepb::CultivationData* _msg = _internal_mutable_physics_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.physics_data)
  return _msg;
}
inline void RoleData::set_allocated_physics_data(::idlepb::CultivationData* physics_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.physics_data_;
  }
  if (physics_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physics_data);
    if (message_arena != submessage_arena) {
      physics_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physics_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physics_data_ = physics_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.physics_data)
}

// .idlepb.CultivationData magic_data = 6;
inline bool RoleData::_internal_has_magic_data() const {
  return this != internal_default_instance() && _impl_.magic_data_ != nullptr;
}
inline bool RoleData::has_magic_data() const {
  return _internal_has_magic_data();
}
inline void RoleData::clear_magic_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.magic_data_ != nullptr) {
    delete _impl_.magic_data_;
  }
  _impl_.magic_data_ = nullptr;
}
inline const ::idlepb::CultivationData& RoleData::_internal_magic_data() const {
  const ::idlepb::CultivationData* p = _impl_.magic_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CultivationData&>(
      ::idlepb::_CultivationData_default_instance_);
}
inline const ::idlepb::CultivationData& RoleData::magic_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.magic_data)
  return _internal_magic_data();
}
inline void RoleData::unsafe_arena_set_allocated_magic_data(
    ::idlepb::CultivationData* magic_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.magic_data_);
  }
  _impl_.magic_data_ = magic_data;
  if (magic_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.magic_data)
}
inline ::idlepb::CultivationData* RoleData::release_magic_data() {
  
  ::idlepb::CultivationData* temp = _impl_.magic_data_;
  _impl_.magic_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CultivationData* RoleData::unsafe_arena_release_magic_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.magic_data)
  
  ::idlepb::CultivationData* temp = _impl_.magic_data_;
  _impl_.magic_data_ = nullptr;
  return temp;
}
inline ::idlepb::CultivationData* RoleData::_internal_mutable_magic_data() {
  
  if (_impl_.magic_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CultivationData>(GetArenaForAllocation());
    _impl_.magic_data_ = p;
  }
  return _impl_.magic_data_;
}
inline ::idlepb::CultivationData* RoleData::mutable_magic_data() {
  ::idlepb::CultivationData* _msg = _internal_mutable_magic_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.magic_data)
  return _msg;
}
inline void RoleData::set_allocated_magic_data(::idlepb::CultivationData* magic_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.magic_data_;
  }
  if (magic_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(magic_data);
    if (message_arena != submessage_arena) {
      magic_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, magic_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.magic_data_ = magic_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.magic_data)
}

// .idlepb.CultivationDirection cultivation_dir = 7;
inline void RoleData::clear_cultivation_dir() {
  _impl_.cultivation_dir_ = 0;
}
inline ::idlepb::CultivationDirection RoleData::_internal_cultivation_dir() const {
  return static_cast< ::idlepb::CultivationDirection >(_impl_.cultivation_dir_);
}
inline ::idlepb::CultivationDirection RoleData::cultivation_dir() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.cultivation_dir)
  return _internal_cultivation_dir();
}
inline void RoleData::_internal_set_cultivation_dir(::idlepb::CultivationDirection value) {
  
  _impl_.cultivation_dir_ = value;
}
inline void RoleData::set_cultivation_dir(::idlepb::CultivationDirection value) {
  _internal_set_cultivation_dir(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.cultivation_dir)
}

// int64 last_exp_cycle_timestamp = 8;
inline void RoleData::clear_last_exp_cycle_timestamp() {
  _impl_.last_exp_cycle_timestamp_ = int64_t{0};
}
inline int64_t RoleData::_internal_last_exp_cycle_timestamp() const {
  return _impl_.last_exp_cycle_timestamp_;
}
inline int64_t RoleData::last_exp_cycle_timestamp() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.last_exp_cycle_timestamp)
  return _internal_last_exp_cycle_timestamp();
}
inline void RoleData::_internal_set_last_exp_cycle_timestamp(int64_t value) {
  
  _impl_.last_exp_cycle_timestamp_ = value;
}
inline void RoleData::set_last_exp_cycle_timestamp(int64_t value) {
  _internal_set_last_exp_cycle_timestamp(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.last_exp_cycle_timestamp)
}

// .idlepb.RoleDailyCounter daily_counter = 9;
inline bool RoleData::_internal_has_daily_counter() const {
  return this != internal_default_instance() && _impl_.daily_counter_ != nullptr;
}
inline bool RoleData::has_daily_counter() const {
  return _internal_has_daily_counter();
}
inline void RoleData::clear_daily_counter() {
  if (GetArenaForAllocation() == nullptr && _impl_.daily_counter_ != nullptr) {
    delete _impl_.daily_counter_;
  }
  _impl_.daily_counter_ = nullptr;
}
inline const ::idlepb::RoleDailyCounter& RoleData::_internal_daily_counter() const {
  const ::idlepb::RoleDailyCounter* p = _impl_.daily_counter_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleDailyCounter&>(
      ::idlepb::_RoleDailyCounter_default_instance_);
}
inline const ::idlepb::RoleDailyCounter& RoleData::daily_counter() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.daily_counter)
  return _internal_daily_counter();
}
inline void RoleData::unsafe_arena_set_allocated_daily_counter(
    ::idlepb::RoleDailyCounter* daily_counter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.daily_counter_);
  }
  _impl_.daily_counter_ = daily_counter;
  if (daily_counter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.daily_counter)
}
inline ::idlepb::RoleDailyCounter* RoleData::release_daily_counter() {
  
  ::idlepb::RoleDailyCounter* temp = _impl_.daily_counter_;
  _impl_.daily_counter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleDailyCounter* RoleData::unsafe_arena_release_daily_counter() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.daily_counter)
  
  ::idlepb::RoleDailyCounter* temp = _impl_.daily_counter_;
  _impl_.daily_counter_ = nullptr;
  return temp;
}
inline ::idlepb::RoleDailyCounter* RoleData::_internal_mutable_daily_counter() {
  
  if (_impl_.daily_counter_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleDailyCounter>(GetArenaForAllocation());
    _impl_.daily_counter_ = p;
  }
  return _impl_.daily_counter_;
}
inline ::idlepb::RoleDailyCounter* RoleData::mutable_daily_counter() {
  ::idlepb::RoleDailyCounter* _msg = _internal_mutable_daily_counter();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.daily_counter)
  return _msg;
}
inline void RoleData::set_allocated_daily_counter(::idlepb::RoleDailyCounter* daily_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.daily_counter_;
  }
  if (daily_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(daily_counter);
    if (message_arena != submessage_arena) {
      daily_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, daily_counter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.daily_counter_ = daily_counter;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.daily_counter)
}

// .idlepb.CharacterModelConfig model_config = 10;
inline bool RoleData::_internal_has_model_config() const {
  return this != internal_default_instance() && _impl_.model_config_ != nullptr;
}
inline bool RoleData::has_model_config() const {
  return _internal_has_model_config();
}
inline void RoleData::clear_model_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_config_ != nullptr) {
    delete _impl_.model_config_;
  }
  _impl_.model_config_ = nullptr;
}
inline const ::idlepb::CharacterModelConfig& RoleData::_internal_model_config() const {
  const ::idlepb::CharacterModelConfig* p = _impl_.model_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CharacterModelConfig&>(
      ::idlepb::_CharacterModelConfig_default_instance_);
}
inline const ::idlepb::CharacterModelConfig& RoleData::model_config() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.model_config)
  return _internal_model_config();
}
inline void RoleData::unsafe_arena_set_allocated_model_config(
    ::idlepb::CharacterModelConfig* model_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_config_);
  }
  _impl_.model_config_ = model_config;
  if (model_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.model_config)
}
inline ::idlepb::CharacterModelConfig* RoleData::release_model_config() {
  
  ::idlepb::CharacterModelConfig* temp = _impl_.model_config_;
  _impl_.model_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CharacterModelConfig* RoleData::unsafe_arena_release_model_config() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.model_config)
  
  ::idlepb::CharacterModelConfig* temp = _impl_.model_config_;
  _impl_.model_config_ = nullptr;
  return temp;
}
inline ::idlepb::CharacterModelConfig* RoleData::_internal_mutable_model_config() {
  
  if (_impl_.model_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CharacterModelConfig>(GetArenaForAllocation());
    _impl_.model_config_ = p;
  }
  return _impl_.model_config_;
}
inline ::idlepb::CharacterModelConfig* RoleData::mutable_model_config() {
  ::idlepb::CharacterModelConfig* _msg = _internal_mutable_model_config();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.model_config)
  return _msg;
}
inline void RoleData::set_allocated_model_config(::idlepb::CharacterModelConfig* model_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.model_config_;
  }
  if (model_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(model_config);
    if (message_arena != submessage_arena) {
      model_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.model_config_ = model_config;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.model_config)
}

// int32 last_world_cfgid = 11;
inline void RoleData::clear_last_world_cfgid() {
  _impl_.last_world_cfgid_ = 0;
}
inline int32_t RoleData::_internal_last_world_cfgid() const {
  return _impl_.last_world_cfgid_;
}
inline int32_t RoleData::last_world_cfgid() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.last_world_cfgid)
  return _internal_last_world_cfgid();
}
inline void RoleData::_internal_set_last_world_cfgid(int32_t value) {
  
  _impl_.last_world_cfgid_ = value;
}
inline void RoleData::set_last_world_cfgid(int32_t value) {
  _internal_set_last_world_cfgid(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.last_world_cfgid)
}

// .idlepb.Vector3 last_world_pos = 12;
inline bool RoleData::_internal_has_last_world_pos() const {
  return this != internal_default_instance() && _impl_.last_world_pos_ != nullptr;
}
inline bool RoleData::has_last_world_pos() const {
  return _internal_has_last_world_pos();
}
inline void RoleData::clear_last_world_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_world_pos_ != nullptr) {
    delete _impl_.last_world_pos_;
  }
  _impl_.last_world_pos_ = nullptr;
}
inline const ::idlepb::Vector3& RoleData::_internal_last_world_pos() const {
  const ::idlepb::Vector3* p = _impl_.last_world_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::Vector3&>(
      ::idlepb::_Vector3_default_instance_);
}
inline const ::idlepb::Vector3& RoleData::last_world_pos() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.last_world_pos)
  return _internal_last_world_pos();
}
inline void RoleData::unsafe_arena_set_allocated_last_world_pos(
    ::idlepb::Vector3* last_world_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_world_pos_);
  }
  _impl_.last_world_pos_ = last_world_pos;
  if (last_world_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.last_world_pos)
}
inline ::idlepb::Vector3* RoleData::release_last_world_pos() {
  
  ::idlepb::Vector3* temp = _impl_.last_world_pos_;
  _impl_.last_world_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::Vector3* RoleData::unsafe_arena_release_last_world_pos() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.last_world_pos)
  
  ::idlepb::Vector3* temp = _impl_.last_world_pos_;
  _impl_.last_world_pos_ = nullptr;
  return temp;
}
inline ::idlepb::Vector3* RoleData::_internal_mutable_last_world_pos() {
  
  if (_impl_.last_world_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::Vector3>(GetArenaForAllocation());
    _impl_.last_world_pos_ = p;
  }
  return _impl_.last_world_pos_;
}
inline ::idlepb::Vector3* RoleData::mutable_last_world_pos() {
  ::idlepb::Vector3* _msg = _internal_mutable_last_world_pos();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.last_world_pos)
  return _msg;
}
inline void RoleData::set_allocated_last_world_pos(::idlepb::Vector3* last_world_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.last_world_pos_;
  }
  if (last_world_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_world_pos);
    if (message_arena != submessage_arena) {
      last_world_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_world_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_world_pos_ = last_world_pos;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.last_world_pos)
}

// int64 next_teleport_time = 14;
inline void RoleData::clear_next_teleport_time() {
  _impl_.next_teleport_time_ = int64_t{0};
}
inline int64_t RoleData::_internal_next_teleport_time() const {
  return _impl_.next_teleport_time_;
}
inline int64_t RoleData::next_teleport_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.next_teleport_time)
  return _internal_next_teleport_time();
}
inline void RoleData::_internal_set_next_teleport_time(int64_t value) {
  
  _impl_.next_teleport_time_ = value;
}
inline void RoleData::set_next_teleport_time(int64_t value) {
  _internal_set_next_teleport_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.next_teleport_time)
}

// int32 last_unlock_arena_id = 15;
inline void RoleData::clear_last_unlock_arena_id() {
  _impl_.last_unlock_arena_id_ = 0;
}
inline int32_t RoleData::_internal_last_unlock_arena_id() const {
  return _impl_.last_unlock_arena_id_;
}
inline int32_t RoleData::last_unlock_arena_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.last_unlock_arena_id)
  return _internal_last_unlock_arena_id();
}
inline void RoleData::_internal_set_last_unlock_arena_id(int32_t value) {
  
  _impl_.last_unlock_arena_id_ = value;
}
inline void RoleData::set_last_unlock_arena_id(int32_t value) {
  _internal_set_last_unlock_arena_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.last_unlock_arena_id)
}

// int64 combat_power = 16;
inline void RoleData::clear_combat_power() {
  _impl_.combat_power_ = int64_t{0};
}
inline int64_t RoleData::_internal_combat_power() const {
  return _impl_.combat_power_;
}
inline int64_t RoleData::combat_power() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.combat_power)
  return _internal_combat_power();
}
inline void RoleData::_internal_set_combat_power(int64_t value) {
  
  _impl_.combat_power_ = value;
}
inline void RoleData::set_combat_power(int64_t value) {
  _internal_set_combat_power(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.combat_power)
}

// int32 login_count = 17;
inline void RoleData::clear_login_count() {
  _impl_.login_count_ = 0;
}
inline int32_t RoleData::_internal_login_count() const {
  return _impl_.login_count_;
}
inline int32_t RoleData::login_count() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.login_count)
  return _internal_login_count();
}
inline void RoleData::_internal_set_login_count(int32_t value) {
  
  _impl_.login_count_ = value;
}
inline void RoleData::set_login_count(int32_t value) {
  _internal_set_login_count(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.login_count)
}

// repeated int32 unlocked_modules = 18;
inline int RoleData::_internal_unlocked_modules_size() const {
  return _impl_.unlocked_modules_.size();
}
inline int RoleData::unlocked_modules_size() const {
  return _internal_unlocked_modules_size();
}
inline void RoleData::clear_unlocked_modules() {
  _impl_.unlocked_modules_.Clear();
}
inline int32_t RoleData::_internal_unlocked_modules(int index) const {
  return _impl_.unlocked_modules_.Get(index);
}
inline int32_t RoleData::unlocked_modules(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.unlocked_modules)
  return _internal_unlocked_modules(index);
}
inline void RoleData::set_unlocked_modules(int index, int32_t value) {
  _impl_.unlocked_modules_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.unlocked_modules)
}
inline void RoleData::_internal_add_unlocked_modules(int32_t value) {
  _impl_.unlocked_modules_.Add(value);
}
inline void RoleData::add_unlocked_modules(int32_t value) {
  _internal_add_unlocked_modules(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleData.unlocked_modules)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleData::_internal_unlocked_modules() const {
  return _impl_.unlocked_modules_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleData::unlocked_modules() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleData.unlocked_modules)
  return _internal_unlocked_modules();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleData::_internal_mutable_unlocked_modules() {
  return &_impl_.unlocked_modules_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleData::mutable_unlocked_modules() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleData.unlocked_modules)
  return _internal_mutable_unlocked_modules();
}

// int64 create_time = 19;
inline void RoleData::clear_create_time() {
  _impl_.create_time_ = int64_t{0};
}
inline int64_t RoleData::_internal_create_time() const {
  return _impl_.create_time_;
}
inline int64_t RoleData::create_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.create_time)
  return _internal_create_time();
}
inline void RoleData::_internal_set_create_time(int64_t value) {
  
  _impl_.create_time_ = value;
}
inline void RoleData::set_create_time(int64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.create_time)
}

// repeated .idlepb.PillPropertyData pill_property_data = 21;
inline int RoleData::_internal_pill_property_data_size() const {
  return _impl_.pill_property_data_.size();
}
inline int RoleData::pill_property_data_size() const {
  return _internal_pill_property_data_size();
}
inline void RoleData::clear_pill_property_data() {
  _impl_.pill_property_data_.Clear();
}
inline ::idlepb::PillPropertyData* RoleData::mutable_pill_property_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.pill_property_data)
  return _impl_.pill_property_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PillPropertyData >*
RoleData::mutable_pill_property_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleData.pill_property_data)
  return &_impl_.pill_property_data_;
}
inline const ::idlepb::PillPropertyData& RoleData::_internal_pill_property_data(int index) const {
  return _impl_.pill_property_data_.Get(index);
}
inline const ::idlepb::PillPropertyData& RoleData::pill_property_data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.pill_property_data)
  return _internal_pill_property_data(index);
}
inline ::idlepb::PillPropertyData* RoleData::_internal_add_pill_property_data() {
  return _impl_.pill_property_data_.Add();
}
inline ::idlepb::PillPropertyData* RoleData::add_pill_property_data() {
  ::idlepb::PillPropertyData* _add = _internal_add_pill_property_data();
  // @@protoc_insertion_point(field_add:idlepb.RoleData.pill_property_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PillPropertyData >&
RoleData::pill_property_data() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleData.pill_property_data)
  return _impl_.pill_property_data_;
}

// .idlepb.RoleFightModeData fight_mode = 22;
inline bool RoleData::_internal_has_fight_mode() const {
  return this != internal_default_instance() && _impl_.fight_mode_ != nullptr;
}
inline bool RoleData::has_fight_mode() const {
  return _internal_has_fight_mode();
}
inline void RoleData::clear_fight_mode() {
  if (GetArenaForAllocation() == nullptr && _impl_.fight_mode_ != nullptr) {
    delete _impl_.fight_mode_;
  }
  _impl_.fight_mode_ = nullptr;
}
inline const ::idlepb::RoleFightModeData& RoleData::_internal_fight_mode() const {
  const ::idlepb::RoleFightModeData* p = _impl_.fight_mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleFightModeData&>(
      ::idlepb::_RoleFightModeData_default_instance_);
}
inline const ::idlepb::RoleFightModeData& RoleData::fight_mode() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.fight_mode)
  return _internal_fight_mode();
}
inline void RoleData::unsafe_arena_set_allocated_fight_mode(
    ::idlepb::RoleFightModeData* fight_mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fight_mode_);
  }
  _impl_.fight_mode_ = fight_mode;
  if (fight_mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.fight_mode)
}
inline ::idlepb::RoleFightModeData* RoleData::release_fight_mode() {
  
  ::idlepb::RoleFightModeData* temp = _impl_.fight_mode_;
  _impl_.fight_mode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleFightModeData* RoleData::unsafe_arena_release_fight_mode() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.fight_mode)
  
  ::idlepb::RoleFightModeData* temp = _impl_.fight_mode_;
  _impl_.fight_mode_ = nullptr;
  return temp;
}
inline ::idlepb::RoleFightModeData* RoleData::_internal_mutable_fight_mode() {
  
  if (_impl_.fight_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleFightModeData>(GetArenaForAllocation());
    _impl_.fight_mode_ = p;
  }
  return _impl_.fight_mode_;
}
inline ::idlepb::RoleFightModeData* RoleData::mutable_fight_mode() {
  ::idlepb::RoleFightModeData* _msg = _internal_mutable_fight_mode();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.fight_mode)
  return _msg;
}
inline void RoleData::set_allocated_fight_mode(::idlepb::RoleFightModeData* fight_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fight_mode_;
  }
  if (fight_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fight_mode);
    if (message_arena != submessage_arena) {
      fight_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fight_mode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fight_mode_ = fight_mode;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.fight_mode)
}

// int32 qi_collector_rank = 23;
inline void RoleData::clear_qi_collector_rank() {
  _impl_.qi_collector_rank_ = 0;
}
inline int32_t RoleData::_internal_qi_collector_rank() const {
  return _impl_.qi_collector_rank_;
}
inline int32_t RoleData::qi_collector_rank() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.qi_collector_rank)
  return _internal_qi_collector_rank();
}
inline void RoleData::_internal_set_qi_collector_rank(int32_t value) {
  
  _impl_.qi_collector_rank_ = value;
}
inline void RoleData::set_qi_collector_rank(int32_t value) {
  _internal_set_qi_collector_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.qi_collector_rank)
}

// .idlepb.RoleNormalSettings normal_settings = 26;
inline bool RoleData::_internal_has_normal_settings() const {
  return this != internal_default_instance() && _impl_.normal_settings_ != nullptr;
}
inline bool RoleData::has_normal_settings() const {
  return _internal_has_normal_settings();
}
inline void RoleData::clear_normal_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.normal_settings_ != nullptr) {
    delete _impl_.normal_settings_;
  }
  _impl_.normal_settings_ = nullptr;
}
inline const ::idlepb::RoleNormalSettings& RoleData::_internal_normal_settings() const {
  const ::idlepb::RoleNormalSettings* p = _impl_.normal_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleNormalSettings&>(
      ::idlepb::_RoleNormalSettings_default_instance_);
}
inline const ::idlepb::RoleNormalSettings& RoleData::normal_settings() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.normal_settings)
  return _internal_normal_settings();
}
inline void RoleData::unsafe_arena_set_allocated_normal_settings(
    ::idlepb::RoleNormalSettings* normal_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normal_settings_);
  }
  _impl_.normal_settings_ = normal_settings;
  if (normal_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.normal_settings)
}
inline ::idlepb::RoleNormalSettings* RoleData::release_normal_settings() {
  
  ::idlepb::RoleNormalSettings* temp = _impl_.normal_settings_;
  _impl_.normal_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleNormalSettings* RoleData::unsafe_arena_release_normal_settings() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.normal_settings)
  
  ::idlepb::RoleNormalSettings* temp = _impl_.normal_settings_;
  _impl_.normal_settings_ = nullptr;
  return temp;
}
inline ::idlepb::RoleNormalSettings* RoleData::_internal_mutable_normal_settings() {
  
  if (_impl_.normal_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleNormalSettings>(GetArenaForAllocation());
    _impl_.normal_settings_ = p;
  }
  return _impl_.normal_settings_;
}
inline ::idlepb::RoleNormalSettings* RoleData::mutable_normal_settings() {
  ::idlepb::RoleNormalSettings* _msg = _internal_mutable_normal_settings();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.normal_settings)
  return _msg;
}
inline void RoleData::set_allocated_normal_settings(::idlepb::RoleNormalSettings* normal_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.normal_settings_;
  }
  if (normal_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(normal_settings);
    if (message_arena != submessage_arena) {
      normal_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.normal_settings_ = normal_settings;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.normal_settings)
}

// int64 offline_time = 27;
inline void RoleData::clear_offline_time() {
  _impl_.offline_time_ = int64_t{0};
}
inline int64_t RoleData::_internal_offline_time() const {
  return _impl_.offline_time_;
}
inline int64_t RoleData::offline_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.offline_time)
  return _internal_offline_time();
}
inline void RoleData::_internal_set_offline_time(int64_t value) {
  
  _impl_.offline_time_ = value;
}
inline void RoleData::set_offline_time(int64_t value) {
  _internal_set_offline_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.offline_time)
}

// .idlepb.RoleWeeklyCounter weekly_counter = 28;
inline bool RoleData::_internal_has_weekly_counter() const {
  return this != internal_default_instance() && _impl_.weekly_counter_ != nullptr;
}
inline bool RoleData::has_weekly_counter() const {
  return _internal_has_weekly_counter();
}
inline void RoleData::clear_weekly_counter() {
  if (GetArenaForAllocation() == nullptr && _impl_.weekly_counter_ != nullptr) {
    delete _impl_.weekly_counter_;
  }
  _impl_.weekly_counter_ = nullptr;
}
inline const ::idlepb::RoleWeeklyCounter& RoleData::_internal_weekly_counter() const {
  const ::idlepb::RoleWeeklyCounter* p = _impl_.weekly_counter_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleWeeklyCounter&>(
      ::idlepb::_RoleWeeklyCounter_default_instance_);
}
inline const ::idlepb::RoleWeeklyCounter& RoleData::weekly_counter() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.weekly_counter)
  return _internal_weekly_counter();
}
inline void RoleData::unsafe_arena_set_allocated_weekly_counter(
    ::idlepb::RoleWeeklyCounter* weekly_counter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weekly_counter_);
  }
  _impl_.weekly_counter_ = weekly_counter;
  if (weekly_counter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.weekly_counter)
}
inline ::idlepb::RoleWeeklyCounter* RoleData::release_weekly_counter() {
  
  ::idlepb::RoleWeeklyCounter* temp = _impl_.weekly_counter_;
  _impl_.weekly_counter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleWeeklyCounter* RoleData::unsafe_arena_release_weekly_counter() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.weekly_counter)
  
  ::idlepb::RoleWeeklyCounter* temp = _impl_.weekly_counter_;
  _impl_.weekly_counter_ = nullptr;
  return temp;
}
inline ::idlepb::RoleWeeklyCounter* RoleData::_internal_mutable_weekly_counter() {
  
  if (_impl_.weekly_counter_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleWeeklyCounter>(GetArenaForAllocation());
    _impl_.weekly_counter_ = p;
  }
  return _impl_.weekly_counter_;
}
inline ::idlepb::RoleWeeklyCounter* RoleData::mutable_weekly_counter() {
  ::idlepb::RoleWeeklyCounter* _msg = _internal_mutable_weekly_counter();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.weekly_counter)
  return _msg;
}
inline void RoleData::set_allocated_weekly_counter(::idlepb::RoleWeeklyCounter* weekly_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weekly_counter_;
  }
  if (weekly_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weekly_counter);
    if (message_arena != submessage_arena) {
      weekly_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weekly_counter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weekly_counter_ = weekly_counter;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.weekly_counter)
}

// int32 last_arena_world_cfgid = 29;
inline void RoleData::clear_last_arena_world_cfgid() {
  _impl_.last_arena_world_cfgid_ = 0;
}
inline int32_t RoleData::_internal_last_arena_world_cfgid() const {
  return _impl_.last_arena_world_cfgid_;
}
inline int32_t RoleData::last_arena_world_cfgid() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.last_arena_world_cfgid)
  return _internal_last_arena_world_cfgid();
}
inline void RoleData::_internal_set_last_arena_world_cfgid(int32_t value) {
  
  _impl_.last_arena_world_cfgid_ = value;
}
inline void RoleData::set_last_arena_world_cfgid(int32_t value) {
  _internal_set_last_arena_world_cfgid(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.last_arena_world_cfgid)
}

// .idlepb.Vector3 last_arena_world_pos = 30;
inline bool RoleData::_internal_has_last_arena_world_pos() const {
  return this != internal_default_instance() && _impl_.last_arena_world_pos_ != nullptr;
}
inline bool RoleData::has_last_arena_world_pos() const {
  return _internal_has_last_arena_world_pos();
}
inline void RoleData::clear_last_arena_world_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_arena_world_pos_ != nullptr) {
    delete _impl_.last_arena_world_pos_;
  }
  _impl_.last_arena_world_pos_ = nullptr;
}
inline const ::idlepb::Vector3& RoleData::_internal_last_arena_world_pos() const {
  const ::idlepb::Vector3* p = _impl_.last_arena_world_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::Vector3&>(
      ::idlepb::_Vector3_default_instance_);
}
inline const ::idlepb::Vector3& RoleData::last_arena_world_pos() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.last_arena_world_pos)
  return _internal_last_arena_world_pos();
}
inline void RoleData::unsafe_arena_set_allocated_last_arena_world_pos(
    ::idlepb::Vector3* last_arena_world_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_arena_world_pos_);
  }
  _impl_.last_arena_world_pos_ = last_arena_world_pos;
  if (last_arena_world_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.last_arena_world_pos)
}
inline ::idlepb::Vector3* RoleData::release_last_arena_world_pos() {
  
  ::idlepb::Vector3* temp = _impl_.last_arena_world_pos_;
  _impl_.last_arena_world_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::Vector3* RoleData::unsafe_arena_release_last_arena_world_pos() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.last_arena_world_pos)
  
  ::idlepb::Vector3* temp = _impl_.last_arena_world_pos_;
  _impl_.last_arena_world_pos_ = nullptr;
  return temp;
}
inline ::idlepb::Vector3* RoleData::_internal_mutable_last_arena_world_pos() {
  
  if (_impl_.last_arena_world_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::Vector3>(GetArenaForAllocation());
    _impl_.last_arena_world_pos_ = p;
  }
  return _impl_.last_arena_world_pos_;
}
inline ::idlepb::Vector3* RoleData::mutable_last_arena_world_pos() {
  ::idlepb::Vector3* _msg = _internal_mutable_last_arena_world_pos();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.last_arena_world_pos)
  return _msg;
}
inline void RoleData::set_allocated_last_arena_world_pos(::idlepb::Vector3* last_arena_world_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.last_arena_world_pos_;
  }
  if (last_arena_world_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_arena_world_pos);
    if (message_arena != submessage_arena) {
      last_arena_world_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_arena_world_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_arena_world_pos_ = last_arena_world_pos;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.last_arena_world_pos)
}

// .idlepb.GameStatsData game_stats = 31;
inline bool RoleData::_internal_has_game_stats() const {
  return this != internal_default_instance() && _impl_.game_stats_ != nullptr;
}
inline bool RoleData::has_game_stats() const {
  return _internal_has_game_stats();
}
inline void RoleData::clear_game_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_stats_ != nullptr) {
    delete _impl_.game_stats_;
  }
  _impl_.game_stats_ = nullptr;
}
inline const ::idlepb::GameStatsData& RoleData::_internal_game_stats() const {
  const ::idlepb::GameStatsData* p = _impl_.game_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::GameStatsData&>(
      ::idlepb::_GameStatsData_default_instance_);
}
inline const ::idlepb::GameStatsData& RoleData::game_stats() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.game_stats)
  return _internal_game_stats();
}
inline void RoleData::unsafe_arena_set_allocated_game_stats(
    ::idlepb::GameStatsData* game_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_stats_);
  }
  _impl_.game_stats_ = game_stats;
  if (game_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.game_stats)
}
inline ::idlepb::GameStatsData* RoleData::release_game_stats() {
  
  ::idlepb::GameStatsData* temp = _impl_.game_stats_;
  _impl_.game_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::GameStatsData* RoleData::unsafe_arena_release_game_stats() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.game_stats)
  
  ::idlepb::GameStatsData* temp = _impl_.game_stats_;
  _impl_.game_stats_ = nullptr;
  return temp;
}
inline ::idlepb::GameStatsData* RoleData::_internal_mutable_game_stats() {
  
  if (_impl_.game_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::GameStatsData>(GetArenaForAllocation());
    _impl_.game_stats_ = p;
  }
  return _impl_.game_stats_;
}
inline ::idlepb::GameStatsData* RoleData::mutable_game_stats() {
  ::idlepb::GameStatsData* _msg = _internal_mutable_game_stats();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.game_stats)
  return _msg;
}
inline void RoleData::set_allocated_game_stats(::idlepb::GameStatsData* game_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.game_stats_;
  }
  if (game_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(game_stats);
    if (message_arena != submessage_arena) {
      game_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.game_stats_ = game_stats;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.game_stats)
}

// int32 last_all_arena_world_cfgid = 32;
inline void RoleData::clear_last_all_arena_world_cfgid() {
  _impl_.last_all_arena_world_cfgid_ = 0;
}
inline int32_t RoleData::_internal_last_all_arena_world_cfgid() const {
  return _impl_.last_all_arena_world_cfgid_;
}
inline int32_t RoleData::last_all_arena_world_cfgid() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.last_all_arena_world_cfgid)
  return _internal_last_all_arena_world_cfgid();
}
inline void RoleData::_internal_set_last_all_arena_world_cfgid(int32_t value) {
  
  _impl_.last_all_arena_world_cfgid_ = value;
}
inline void RoleData::set_last_all_arena_world_cfgid(int32_t value) {
  _internal_set_last_all_arena_world_cfgid(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleData.last_all_arena_world_cfgid)
}

// .idlepb.Vector3 last_all_arena_world_pos = 33;
inline bool RoleData::_internal_has_last_all_arena_world_pos() const {
  return this != internal_default_instance() && _impl_.last_all_arena_world_pos_ != nullptr;
}
inline bool RoleData::has_last_all_arena_world_pos() const {
  return _internal_has_last_all_arena_world_pos();
}
inline void RoleData::clear_last_all_arena_world_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_all_arena_world_pos_ != nullptr) {
    delete _impl_.last_all_arena_world_pos_;
  }
  _impl_.last_all_arena_world_pos_ = nullptr;
}
inline const ::idlepb::Vector3& RoleData::_internal_last_all_arena_world_pos() const {
  const ::idlepb::Vector3* p = _impl_.last_all_arena_world_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::Vector3&>(
      ::idlepb::_Vector3_default_instance_);
}
inline const ::idlepb::Vector3& RoleData::last_all_arena_world_pos() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleData.last_all_arena_world_pos)
  return _internal_last_all_arena_world_pos();
}
inline void RoleData::unsafe_arena_set_allocated_last_all_arena_world_pos(
    ::idlepb::Vector3* last_all_arena_world_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_all_arena_world_pos_);
  }
  _impl_.last_all_arena_world_pos_ = last_all_arena_world_pos;
  if (last_all_arena_world_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleData.last_all_arena_world_pos)
}
inline ::idlepb::Vector3* RoleData::release_last_all_arena_world_pos() {
  
  ::idlepb::Vector3* temp = _impl_.last_all_arena_world_pos_;
  _impl_.last_all_arena_world_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::Vector3* RoleData::unsafe_arena_release_last_all_arena_world_pos() {
  // @@protoc_insertion_point(field_release:idlepb.RoleData.last_all_arena_world_pos)
  
  ::idlepb::Vector3* temp = _impl_.last_all_arena_world_pos_;
  _impl_.last_all_arena_world_pos_ = nullptr;
  return temp;
}
inline ::idlepb::Vector3* RoleData::_internal_mutable_last_all_arena_world_pos() {
  
  if (_impl_.last_all_arena_world_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::Vector3>(GetArenaForAllocation());
    _impl_.last_all_arena_world_pos_ = p;
  }
  return _impl_.last_all_arena_world_pos_;
}
inline ::idlepb::Vector3* RoleData::mutable_last_all_arena_world_pos() {
  ::idlepb::Vector3* _msg = _internal_mutable_last_all_arena_world_pos();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleData.last_all_arena_world_pos)
  return _msg;
}
inline void RoleData::set_allocated_last_all_arena_world_pos(::idlepb::Vector3* last_all_arena_world_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.last_all_arena_world_pos_;
  }
  if (last_all_arena_world_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_all_arena_world_pos);
    if (message_arena != submessage_arena) {
      last_all_arena_world_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_all_arena_world_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_all_arena_world_pos_ = last_all_arena_world_pos;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleData.last_all_arena_world_pos)
}

// -------------------------------------------------------------------

// SimpleAbilityData

// int32 id = 1;
inline void SimpleAbilityData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SimpleAbilityData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SimpleAbilityData::id() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleAbilityData.id)
  return _internal_id();
}
inline void SimpleAbilityData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SimpleAbilityData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleAbilityData.id)
}

// int32 grade = 2;
inline void SimpleAbilityData::clear_grade() {
  _impl_.grade_ = 0;
}
inline int32_t SimpleAbilityData::_internal_grade() const {
  return _impl_.grade_;
}
inline int32_t SimpleAbilityData::grade() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleAbilityData.grade)
  return _internal_grade();
}
inline void SimpleAbilityData::_internal_set_grade(int32_t value) {
  
  _impl_.grade_ = value;
}
inline void SimpleAbilityData::set_grade(int32_t value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleAbilityData.grade)
}

// int32 study_grade = 3;
inline void SimpleAbilityData::clear_study_grade() {
  _impl_.study_grade_ = 0;
}
inline int32_t SimpleAbilityData::_internal_study_grade() const {
  return _impl_.study_grade_;
}
inline int32_t SimpleAbilityData::study_grade() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleAbilityData.study_grade)
  return _internal_study_grade();
}
inline void SimpleAbilityData::_internal_set_study_grade(int32_t value) {
  
  _impl_.study_grade_ = value;
}
inline void SimpleAbilityData::set_study_grade(int32_t value) {
  _internal_set_study_grade(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleAbilityData.study_grade)
}

// -------------------------------------------------------------------

// SimpleGongFaData

// int32 id = 1;
inline void SimpleGongFaData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SimpleGongFaData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SimpleGongFaData::id() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleGongFaData.id)
  return _internal_id();
}
inline void SimpleGongFaData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SimpleGongFaData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleGongFaData.id)
}

// int32 level = 2;
inline void SimpleGongFaData::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t SimpleGongFaData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t SimpleGongFaData::level() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleGongFaData.level)
  return _internal_level();
}
inline void SimpleGongFaData::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void SimpleGongFaData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleGongFaData.level)
}

// bool is_full = 3;
inline void SimpleGongFaData::clear_is_full() {
  _impl_.is_full_ = false;
}
inline bool SimpleGongFaData::_internal_is_full() const {
  return _impl_.is_full_;
}
inline bool SimpleGongFaData::is_full() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleGongFaData.is_full)
  return _internal_is_full();
}
inline void SimpleGongFaData::_internal_set_is_full(bool value) {
  
  _impl_.is_full_ = value;
}
inline void SimpleGongFaData::set_is_full(bool value) {
  _internal_set_is_full(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleGongFaData.is_full)
}

// -------------------------------------------------------------------

// RoleInfo

// uint64 user_id = 1;
inline void RoleInfo::clear_user_id() {
  _impl_.user_id_ = uint64_t{0u};
}
inline uint64_t RoleInfo::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint64_t RoleInfo::user_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.user_id)
  return _internal_user_id();
}
inline void RoleInfo::_internal_set_user_id(uint64_t value) {
  
  _impl_.user_id_ = value;
}
inline void RoleInfo::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.user_id)
}

// uint64 role_id = 2;
inline void RoleInfo::clear_role_id() {
  _impl_.role_id_ = uint64_t{0u};
}
inline uint64_t RoleInfo::_internal_role_id() const {
  return _impl_.role_id_;
}
inline uint64_t RoleInfo::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.role_id)
  return _internal_role_id();
}
inline void RoleInfo::_internal_set_role_id(uint64_t value) {
  
  _impl_.role_id_ = value;
}
inline void RoleInfo::set_role_id(uint64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.role_id)
}

// string role_name = 3;
inline void RoleInfo::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& RoleInfo::role_name() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleInfo::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.role_name)
}
inline std::string* RoleInfo::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleInfo.role_name)
  return _s;
}
inline const std::string& RoleInfo::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void RoleInfo::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleInfo::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleInfo::release_role_name() {
  // @@protoc_insertion_point(field_release:idlepb.RoleInfo.role_name)
  return _impl_.role_name_.Release();
}
inline void RoleInfo::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleInfo.role_name)
}

// int64 create_time = 4;
inline void RoleInfo::clear_create_time() {
  _impl_.create_time_ = int64_t{0};
}
inline int64_t RoleInfo::_internal_create_time() const {
  return _impl_.create_time_;
}
inline int64_t RoleInfo::create_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.create_time)
  return _internal_create_time();
}
inline void RoleInfo::_internal_set_create_time(int64_t value) {
  
  _impl_.create_time_ = value;
}
inline void RoleInfo::set_create_time(int64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.create_time)
}

// .idlepb.CultivationDirection cultivation_main_dir = 5;
inline void RoleInfo::clear_cultivation_main_dir() {
  _impl_.cultivation_main_dir_ = 0;
}
inline ::idlepb::CultivationDirection RoleInfo::_internal_cultivation_main_dir() const {
  return static_cast< ::idlepb::CultivationDirection >(_impl_.cultivation_main_dir_);
}
inline ::idlepb::CultivationDirection RoleInfo::cultivation_main_dir() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.cultivation_main_dir)
  return _internal_cultivation_main_dir();
}
inline void RoleInfo::_internal_set_cultivation_main_dir(::idlepb::CultivationDirection value) {
  
  _impl_.cultivation_main_dir_ = value;
}
inline void RoleInfo::set_cultivation_main_dir(::idlepb::CultivationDirection value) {
  _internal_set_cultivation_main_dir(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.cultivation_main_dir)
}

// int32 cultivation_main_rank = 6;
inline void RoleInfo::clear_cultivation_main_rank() {
  _impl_.cultivation_main_rank_ = 0;
}
inline int32_t RoleInfo::_internal_cultivation_main_rank() const {
  return _impl_.cultivation_main_rank_;
}
inline int32_t RoleInfo::cultivation_main_rank() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.cultivation_main_rank)
  return _internal_cultivation_main_rank();
}
inline void RoleInfo::_internal_set_cultivation_main_rank(int32_t value) {
  
  _impl_.cultivation_main_rank_ = value;
}
inline void RoleInfo::set_cultivation_main_rank(int32_t value) {
  _internal_set_cultivation_main_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.cultivation_main_rank)
}

// .idlepb.CultivationDirection cultivation_second_dir = 7;
inline void RoleInfo::clear_cultivation_second_dir() {
  _impl_.cultivation_second_dir_ = 0;
}
inline ::idlepb::CultivationDirection RoleInfo::_internal_cultivation_second_dir() const {
  return static_cast< ::idlepb::CultivationDirection >(_impl_.cultivation_second_dir_);
}
inline ::idlepb::CultivationDirection RoleInfo::cultivation_second_dir() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.cultivation_second_dir)
  return _internal_cultivation_second_dir();
}
inline void RoleInfo::_internal_set_cultivation_second_dir(::idlepb::CultivationDirection value) {
  
  _impl_.cultivation_second_dir_ = value;
}
inline void RoleInfo::set_cultivation_second_dir(::idlepb::CultivationDirection value) {
  _internal_set_cultivation_second_dir(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.cultivation_second_dir)
}

// int32 cultivation_second_rank = 8;
inline void RoleInfo::clear_cultivation_second_rank() {
  _impl_.cultivation_second_rank_ = 0;
}
inline int32_t RoleInfo::_internal_cultivation_second_rank() const {
  return _impl_.cultivation_second_rank_;
}
inline int32_t RoleInfo::cultivation_second_rank() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.cultivation_second_rank)
  return _internal_cultivation_second_rank();
}
inline void RoleInfo::_internal_set_cultivation_second_rank(int32_t value) {
  
  _impl_.cultivation_second_rank_ = value;
}
inline void RoleInfo::set_cultivation_second_rank(int32_t value) {
  _internal_set_cultivation_second_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.cultivation_second_rank)
}

// .idlepb.CharacterModelConfig character_model = 10;
inline bool RoleInfo::_internal_has_character_model() const {
  return this != internal_default_instance() && _impl_.character_model_ != nullptr;
}
inline bool RoleInfo::has_character_model() const {
  return _internal_has_character_model();
}
inline void RoleInfo::clear_character_model() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_model_ != nullptr) {
    delete _impl_.character_model_;
  }
  _impl_.character_model_ = nullptr;
}
inline const ::idlepb::CharacterModelConfig& RoleInfo::_internal_character_model() const {
  const ::idlepb::CharacterModelConfig* p = _impl_.character_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CharacterModelConfig&>(
      ::idlepb::_CharacterModelConfig_default_instance_);
}
inline const ::idlepb::CharacterModelConfig& RoleInfo::character_model() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.character_model)
  return _internal_character_model();
}
inline void RoleInfo::unsafe_arena_set_allocated_character_model(
    ::idlepb::CharacterModelConfig* character_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_model_);
  }
  _impl_.character_model_ = character_model;
  if (character_model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleInfo.character_model)
}
inline ::idlepb::CharacterModelConfig* RoleInfo::release_character_model() {
  
  ::idlepb::CharacterModelConfig* temp = _impl_.character_model_;
  _impl_.character_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CharacterModelConfig* RoleInfo::unsafe_arena_release_character_model() {
  // @@protoc_insertion_point(field_release:idlepb.RoleInfo.character_model)
  
  ::idlepb::CharacterModelConfig* temp = _impl_.character_model_;
  _impl_.character_model_ = nullptr;
  return temp;
}
inline ::idlepb::CharacterModelConfig* RoleInfo::_internal_mutable_character_model() {
  
  if (_impl_.character_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CharacterModelConfig>(GetArenaForAllocation());
    _impl_.character_model_ = p;
  }
  return _impl_.character_model_;
}
inline ::idlepb::CharacterModelConfig* RoleInfo::mutable_character_model() {
  ::idlepb::CharacterModelConfig* _msg = _internal_mutable_character_model();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleInfo.character_model)
  return _msg;
}
inline void RoleInfo::set_allocated_character_model(::idlepb::CharacterModelConfig* character_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.character_model_;
  }
  if (character_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(character_model);
    if (message_arena != submessage_arena) {
      character_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_model, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_model_ = character_model;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleInfo.character_model)
}

// repeated int32 title = 11;
inline int RoleInfo::_internal_title_size() const {
  return _impl_.title_.size();
}
inline int RoleInfo::title_size() const {
  return _internal_title_size();
}
inline void RoleInfo::clear_title() {
  _impl_.title_.Clear();
}
inline int32_t RoleInfo::_internal_title(int index) const {
  return _impl_.title_.Get(index);
}
inline int32_t RoleInfo::title(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.title)
  return _internal_title(index);
}
inline void RoleInfo::set_title(int index, int32_t value) {
  _impl_.title_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.title)
}
inline void RoleInfo::_internal_add_title(int32_t value) {
  _impl_.title_.Add(value);
}
inline void RoleInfo::add_title(int32_t value) {
  _internal_add_title(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleInfo.title)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleInfo::_internal_title() const {
  return _impl_.title_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleInfo::title() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleInfo.title)
  return _internal_title();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleInfo::_internal_mutable_title() {
  return &_impl_.title_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleInfo::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleInfo.title)
  return _internal_mutable_title();
}

// int64 combat_power = 12;
inline void RoleInfo::clear_combat_power() {
  _impl_.combat_power_ = int64_t{0};
}
inline int64_t RoleInfo::_internal_combat_power() const {
  return _impl_.combat_power_;
}
inline int64_t RoleInfo::combat_power() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.combat_power)
  return _internal_combat_power();
}
inline void RoleInfo::_internal_set_combat_power(int64_t value) {
  
  _impl_.combat_power_ = value;
}
inline void RoleInfo::set_combat_power(int64_t value) {
  _internal_set_combat_power(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.combat_power)
}

// repeated .idlepb.ItemData equipments = 13;
inline int RoleInfo::_internal_equipments_size() const {
  return _impl_.equipments_.size();
}
inline int RoleInfo::equipments_size() const {
  return _internal_equipments_size();
}
inline void RoleInfo::clear_equipments() {
  _impl_.equipments_.Clear();
}
inline ::idlepb::ItemData* RoleInfo::mutable_equipments(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleInfo.equipments)
  return _impl_.equipments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >*
RoleInfo::mutable_equipments() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleInfo.equipments)
  return &_impl_.equipments_;
}
inline const ::idlepb::ItemData& RoleInfo::_internal_equipments(int index) const {
  return _impl_.equipments_.Get(index);
}
inline const ::idlepb::ItemData& RoleInfo::equipments(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.equipments)
  return _internal_equipments(index);
}
inline ::idlepb::ItemData* RoleInfo::_internal_add_equipments() {
  return _impl_.equipments_.Add();
}
inline ::idlepb::ItemData* RoleInfo::add_equipments() {
  ::idlepb::ItemData* _add = _internal_add_equipments();
  // @@protoc_insertion_point(field_add:idlepb.RoleInfo.equipments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >&
RoleInfo::equipments() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleInfo.equipments)
  return _impl_.equipments_;
}

// repeated int32 unlocked_equipment_slots = 14;
inline int RoleInfo::_internal_unlocked_equipment_slots_size() const {
  return _impl_.unlocked_equipment_slots_.size();
}
inline int RoleInfo::unlocked_equipment_slots_size() const {
  return _internal_unlocked_equipment_slots_size();
}
inline void RoleInfo::clear_unlocked_equipment_slots() {
  _impl_.unlocked_equipment_slots_.Clear();
}
inline int32_t RoleInfo::_internal_unlocked_equipment_slots(int index) const {
  return _impl_.unlocked_equipment_slots_.Get(index);
}
inline int32_t RoleInfo::unlocked_equipment_slots(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.unlocked_equipment_slots)
  return _internal_unlocked_equipment_slots(index);
}
inline void RoleInfo::set_unlocked_equipment_slots(int index, int32_t value) {
  _impl_.unlocked_equipment_slots_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.unlocked_equipment_slots)
}
inline void RoleInfo::_internal_add_unlocked_equipment_slots(int32_t value) {
  _impl_.unlocked_equipment_slots_.Add(value);
}
inline void RoleInfo::add_unlocked_equipment_slots(int32_t value) {
  _internal_add_unlocked_equipment_slots(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleInfo.unlocked_equipment_slots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleInfo::_internal_unlocked_equipment_slots() const {
  return _impl_.unlocked_equipment_slots_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleInfo::unlocked_equipment_slots() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleInfo.unlocked_equipment_slots)
  return _internal_unlocked_equipment_slots();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleInfo::_internal_mutable_unlocked_equipment_slots() {
  return &_impl_.unlocked_equipment_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleInfo::mutable_unlocked_equipment_slots() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleInfo.unlocked_equipment_slots)
  return _internal_mutable_unlocked_equipment_slots();
}

// uint64 sept_id = 15;
inline void RoleInfo::clear_sept_id() {
  _impl_.sept_id_ = uint64_t{0u};
}
inline uint64_t RoleInfo::_internal_sept_id() const {
  return _impl_.sept_id_;
}
inline uint64_t RoleInfo::sept_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.sept_id)
  return _internal_sept_id();
}
inline void RoleInfo::_internal_set_sept_id(uint64_t value) {
  
  _impl_.sept_id_ = value;
}
inline void RoleInfo::set_sept_id(uint64_t value) {
  _internal_set_sept_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.sept_id)
}

// .idlepb.SeptPosition sept_position = 16;
inline void RoleInfo::clear_sept_position() {
  _impl_.sept_position_ = 0;
}
inline ::idlepb::SeptPosition RoleInfo::_internal_sept_position() const {
  return static_cast< ::idlepb::SeptPosition >(_impl_.sept_position_);
}
inline ::idlepb::SeptPosition RoleInfo::sept_position() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.sept_position)
  return _internal_sept_position();
}
inline void RoleInfo::_internal_set_sept_position(::idlepb::SeptPosition value) {
  
  _impl_.sept_position_ = value;
}
inline void RoleInfo::set_sept_position(::idlepb::SeptPosition value) {
  _internal_set_sept_position(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.sept_position)
}

// string sept_name = 17;
inline void RoleInfo::clear_sept_name() {
  _impl_.sept_name_.ClearToEmpty();
}
inline const std::string& RoleInfo::sept_name() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.sept_name)
  return _internal_sept_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleInfo::set_sept_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sept_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.sept_name)
}
inline std::string* RoleInfo::mutable_sept_name() {
  std::string* _s = _internal_mutable_sept_name();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleInfo.sept_name)
  return _s;
}
inline const std::string& RoleInfo::_internal_sept_name() const {
  return _impl_.sept_name_.Get();
}
inline void RoleInfo::_internal_set_sept_name(const std::string& value) {
  
  _impl_.sept_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleInfo::_internal_mutable_sept_name() {
  
  return _impl_.sept_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleInfo::release_sept_name() {
  // @@protoc_insertion_point(field_release:idlepb.RoleInfo.sept_name)
  return _impl_.sept_name_.Release();
}
inline void RoleInfo::set_allocated_sept_name(std::string* sept_name) {
  if (sept_name != nullptr) {
    
  } else {
    
  }
  _impl_.sept_name_.SetAllocated(sept_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sept_name_.IsDefault()) {
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleInfo.sept_name)
}

// int32 sept_logo = 18;
inline void RoleInfo::clear_sept_logo() {
  _impl_.sept_logo_ = 0;
}
inline int32_t RoleInfo::_internal_sept_logo() const {
  return _impl_.sept_logo_;
}
inline int32_t RoleInfo::sept_logo() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.sept_logo)
  return _internal_sept_logo();
}
inline void RoleInfo::_internal_set_sept_logo(int32_t value) {
  
  _impl_.sept_logo_ = value;
}
inline void RoleInfo::set_sept_logo(int32_t value) {
  _internal_set_sept_logo(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInfo.sept_logo)
}

// .idlepb.GameStatsAllModuleData all_stats_data = 19;
inline bool RoleInfo::_internal_has_all_stats_data() const {
  return this != internal_default_instance() && _impl_.all_stats_data_ != nullptr;
}
inline bool RoleInfo::has_all_stats_data() const {
  return _internal_has_all_stats_data();
}
inline void RoleInfo::clear_all_stats_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.all_stats_data_ != nullptr) {
    delete _impl_.all_stats_data_;
  }
  _impl_.all_stats_data_ = nullptr;
}
inline const ::idlepb::GameStatsAllModuleData& RoleInfo::_internal_all_stats_data() const {
  const ::idlepb::GameStatsAllModuleData* p = _impl_.all_stats_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::GameStatsAllModuleData&>(
      ::idlepb::_GameStatsAllModuleData_default_instance_);
}
inline const ::idlepb::GameStatsAllModuleData& RoleInfo::all_stats_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.all_stats_data)
  return _internal_all_stats_data();
}
inline void RoleInfo::unsafe_arena_set_allocated_all_stats_data(
    ::idlepb::GameStatsAllModuleData* all_stats_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.all_stats_data_);
  }
  _impl_.all_stats_data_ = all_stats_data;
  if (all_stats_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleInfo.all_stats_data)
}
inline ::idlepb::GameStatsAllModuleData* RoleInfo::release_all_stats_data() {
  
  ::idlepb::GameStatsAllModuleData* temp = _impl_.all_stats_data_;
  _impl_.all_stats_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::GameStatsAllModuleData* RoleInfo::unsafe_arena_release_all_stats_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleInfo.all_stats_data)
  
  ::idlepb::GameStatsAllModuleData* temp = _impl_.all_stats_data_;
  _impl_.all_stats_data_ = nullptr;
  return temp;
}
inline ::idlepb::GameStatsAllModuleData* RoleInfo::_internal_mutable_all_stats_data() {
  
  if (_impl_.all_stats_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::GameStatsAllModuleData>(GetArenaForAllocation());
    _impl_.all_stats_data_ = p;
  }
  return _impl_.all_stats_data_;
}
inline ::idlepb::GameStatsAllModuleData* RoleInfo::mutable_all_stats_data() {
  ::idlepb::GameStatsAllModuleData* _msg = _internal_mutable_all_stats_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleInfo.all_stats_data)
  return _msg;
}
inline void RoleInfo::set_allocated_all_stats_data(::idlepb::GameStatsAllModuleData* all_stats_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.all_stats_data_;
  }
  if (all_stats_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(all_stats_data);
    if (message_arena != submessage_arena) {
      all_stats_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_stats_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.all_stats_data_ = all_stats_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleInfo.all_stats_data)
}

// repeated .idlepb.SimpleAbilityData slotted_abilities = 20;
inline int RoleInfo::_internal_slotted_abilities_size() const {
  return _impl_.slotted_abilities_.size();
}
inline int RoleInfo::slotted_abilities_size() const {
  return _internal_slotted_abilities_size();
}
inline void RoleInfo::clear_slotted_abilities() {
  _impl_.slotted_abilities_.Clear();
}
inline ::idlepb::SimpleAbilityData* RoleInfo::mutable_slotted_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleInfo.slotted_abilities)
  return _impl_.slotted_abilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleAbilityData >*
RoleInfo::mutable_slotted_abilities() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleInfo.slotted_abilities)
  return &_impl_.slotted_abilities_;
}
inline const ::idlepb::SimpleAbilityData& RoleInfo::_internal_slotted_abilities(int index) const {
  return _impl_.slotted_abilities_.Get(index);
}
inline const ::idlepb::SimpleAbilityData& RoleInfo::slotted_abilities(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.slotted_abilities)
  return _internal_slotted_abilities(index);
}
inline ::idlepb::SimpleAbilityData* RoleInfo::_internal_add_slotted_abilities() {
  return _impl_.slotted_abilities_.Add();
}
inline ::idlepb::SimpleAbilityData* RoleInfo::add_slotted_abilities() {
  ::idlepb::SimpleAbilityData* _add = _internal_add_slotted_abilities();
  // @@protoc_insertion_point(field_add:idlepb.RoleInfo.slotted_abilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleAbilityData >&
RoleInfo::slotted_abilities() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleInfo.slotted_abilities)
  return _impl_.slotted_abilities_;
}

// repeated .idlepb.SimpleAbilityData unslotted_abilities = 21;
inline int RoleInfo::_internal_unslotted_abilities_size() const {
  return _impl_.unslotted_abilities_.size();
}
inline int RoleInfo::unslotted_abilities_size() const {
  return _internal_unslotted_abilities_size();
}
inline void RoleInfo::clear_unslotted_abilities() {
  _impl_.unslotted_abilities_.Clear();
}
inline ::idlepb::SimpleAbilityData* RoleInfo::mutable_unslotted_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleInfo.unslotted_abilities)
  return _impl_.unslotted_abilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleAbilityData >*
RoleInfo::mutable_unslotted_abilities() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleInfo.unslotted_abilities)
  return &_impl_.unslotted_abilities_;
}
inline const ::idlepb::SimpleAbilityData& RoleInfo::_internal_unslotted_abilities(int index) const {
  return _impl_.unslotted_abilities_.Get(index);
}
inline const ::idlepb::SimpleAbilityData& RoleInfo::unslotted_abilities(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.unslotted_abilities)
  return _internal_unslotted_abilities(index);
}
inline ::idlepb::SimpleAbilityData* RoleInfo::_internal_add_unslotted_abilities() {
  return _impl_.unslotted_abilities_.Add();
}
inline ::idlepb::SimpleAbilityData* RoleInfo::add_unslotted_abilities() {
  ::idlepb::SimpleAbilityData* _add = _internal_add_unslotted_abilities();
  // @@protoc_insertion_point(field_add:idlepb.RoleInfo.unslotted_abilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleAbilityData >&
RoleInfo::unslotted_abilities() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleInfo.unslotted_abilities)
  return _impl_.unslotted_abilities_;
}

// repeated .idlepb.SimpleGongFaData gong_fa_entries = 22;
inline int RoleInfo::_internal_gong_fa_entries_size() const {
  return _impl_.gong_fa_entries_.size();
}
inline int RoleInfo::gong_fa_entries_size() const {
  return _internal_gong_fa_entries_size();
}
inline void RoleInfo::clear_gong_fa_entries() {
  _impl_.gong_fa_entries_.Clear();
}
inline ::idlepb::SimpleGongFaData* RoleInfo::mutable_gong_fa_entries(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleInfo.gong_fa_entries)
  return _impl_.gong_fa_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleGongFaData >*
RoleInfo::mutable_gong_fa_entries() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleInfo.gong_fa_entries)
  return &_impl_.gong_fa_entries_;
}
inline const ::idlepb::SimpleGongFaData& RoleInfo::_internal_gong_fa_entries(int index) const {
  return _impl_.gong_fa_entries_.Get(index);
}
inline const ::idlepb::SimpleGongFaData& RoleInfo::gong_fa_entries(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInfo.gong_fa_entries)
  return _internal_gong_fa_entries(index);
}
inline ::idlepb::SimpleGongFaData* RoleInfo::_internal_add_gong_fa_entries() {
  return _impl_.gong_fa_entries_.Add();
}
inline ::idlepb::SimpleGongFaData* RoleInfo::add_gong_fa_entries() {
  ::idlepb::SimpleGongFaData* _add = _internal_add_gong_fa_entries();
  // @@protoc_insertion_point(field_add:idlepb.RoleInfo.gong_fa_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleGongFaData >&
RoleInfo::gong_fa_entries() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleInfo.gong_fa_entries)
  return _impl_.gong_fa_entries_;
}

// -------------------------------------------------------------------

// RoleInventoryData

// int64 next_item_id = 2;
inline void RoleInventoryData::clear_next_item_id() {
  _impl_.next_item_id_ = int64_t{0};
}
inline int64_t RoleInventoryData::_internal_next_item_id() const {
  return _impl_.next_item_id_;
}
inline int64_t RoleInventoryData::next_item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInventoryData.next_item_id)
  return _internal_next_item_id();
}
inline void RoleInventoryData::_internal_set_next_item_id(int64_t value) {
  
  _impl_.next_item_id_ = value;
}
inline void RoleInventoryData::set_next_item_id(int64_t value) {
  _internal_set_next_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInventoryData.next_item_id)
}

// repeated .idlepb.ItemData items = 3;
inline int RoleInventoryData::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int RoleInventoryData::items_size() const {
  return _internal_items_size();
}
inline void RoleInventoryData::clear_items() {
  _impl_.items_.Clear();
}
inline ::idlepb::ItemData* RoleInventoryData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleInventoryData.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >*
RoleInventoryData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleInventoryData.items)
  return &_impl_.items_;
}
inline const ::idlepb::ItemData& RoleInventoryData::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::idlepb::ItemData& RoleInventoryData::items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInventoryData.items)
  return _internal_items(index);
}
inline ::idlepb::ItemData* RoleInventoryData::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::idlepb::ItemData* RoleInventoryData::add_items() {
  ::idlepb::ItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:idlepb.RoleInventoryData.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >&
RoleInventoryData::items() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleInventoryData.items)
  return _impl_.items_;
}

// int64 hp_pill_cooldown_expire_time = 4;
inline void RoleInventoryData::clear_hp_pill_cooldown_expire_time() {
  _impl_.hp_pill_cooldown_expire_time_ = int64_t{0};
}
inline int64_t RoleInventoryData::_internal_hp_pill_cooldown_expire_time() const {
  return _impl_.hp_pill_cooldown_expire_time_;
}
inline int64_t RoleInventoryData::hp_pill_cooldown_expire_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInventoryData.hp_pill_cooldown_expire_time)
  return _internal_hp_pill_cooldown_expire_time();
}
inline void RoleInventoryData::_internal_set_hp_pill_cooldown_expire_time(int64_t value) {
  
  _impl_.hp_pill_cooldown_expire_time_ = value;
}
inline void RoleInventoryData::set_hp_pill_cooldown_expire_time(int64_t value) {
  _internal_set_hp_pill_cooldown_expire_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInventoryData.hp_pill_cooldown_expire_time)
}

// int64 mp_pill_cooldown_expire_time = 5;
inline void RoleInventoryData::clear_mp_pill_cooldown_expire_time() {
  _impl_.mp_pill_cooldown_expire_time_ = int64_t{0};
}
inline int64_t RoleInventoryData::_internal_mp_pill_cooldown_expire_time() const {
  return _impl_.mp_pill_cooldown_expire_time_;
}
inline int64_t RoleInventoryData::mp_pill_cooldown_expire_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInventoryData.mp_pill_cooldown_expire_time)
  return _internal_mp_pill_cooldown_expire_time();
}
inline void RoleInventoryData::_internal_set_mp_pill_cooldown_expire_time(int64_t value) {
  
  _impl_.mp_pill_cooldown_expire_time_ = value;
}
inline void RoleInventoryData::set_mp_pill_cooldown_expire_time(int64_t value) {
  _internal_set_mp_pill_cooldown_expire_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInventoryData.mp_pill_cooldown_expire_time)
}

// repeated int32 unlocked_equipment_slots = 6;
inline int RoleInventoryData::_internal_unlocked_equipment_slots_size() const {
  return _impl_.unlocked_equipment_slots_.size();
}
inline int RoleInventoryData::unlocked_equipment_slots_size() const {
  return _internal_unlocked_equipment_slots_size();
}
inline void RoleInventoryData::clear_unlocked_equipment_slots() {
  _impl_.unlocked_equipment_slots_.Clear();
}
inline int32_t RoleInventoryData::_internal_unlocked_equipment_slots(int index) const {
  return _impl_.unlocked_equipment_slots_.Get(index);
}
inline int32_t RoleInventoryData::unlocked_equipment_slots(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInventoryData.unlocked_equipment_slots)
  return _internal_unlocked_equipment_slots(index);
}
inline void RoleInventoryData::set_unlocked_equipment_slots(int index, int32_t value) {
  _impl_.unlocked_equipment_slots_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInventoryData.unlocked_equipment_slots)
}
inline void RoleInventoryData::_internal_add_unlocked_equipment_slots(int32_t value) {
  _impl_.unlocked_equipment_slots_.Add(value);
}
inline void RoleInventoryData::add_unlocked_equipment_slots(int32_t value) {
  _internal_add_unlocked_equipment_slots(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleInventoryData.unlocked_equipment_slots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleInventoryData::_internal_unlocked_equipment_slots() const {
  return _impl_.unlocked_equipment_slots_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleInventoryData::unlocked_equipment_slots() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleInventoryData.unlocked_equipment_slots)
  return _internal_unlocked_equipment_slots();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleInventoryData::_internal_mutable_unlocked_equipment_slots() {
  return &_impl_.unlocked_equipment_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleInventoryData::mutable_unlocked_equipment_slots() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleInventoryData.unlocked_equipment_slots)
  return _internal_mutable_unlocked_equipment_slots();
}

// int32 inventory_space_num = 7;
inline void RoleInventoryData::clear_inventory_space_num() {
  _impl_.inventory_space_num_ = 0;
}
inline int32_t RoleInventoryData::_internal_inventory_space_num() const {
  return _impl_.inventory_space_num_;
}
inline int32_t RoleInventoryData::inventory_space_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleInventoryData.inventory_space_num)
  return _internal_inventory_space_num();
}
inline void RoleInventoryData::_internal_set_inventory_space_num(int32_t value) {
  
  _impl_.inventory_space_num_ = value;
}
inline void RoleInventoryData::set_inventory_space_num(int32_t value) {
  _internal_set_inventory_space_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleInventoryData.inventory_space_num)
}

// -------------------------------------------------------------------

// RoleTemporaryPackageData

// repeated .idlepb.TemporaryPackageItem items = 1;
inline int RoleTemporaryPackageData::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int RoleTemporaryPackageData::items_size() const {
  return _internal_items_size();
}
inline void RoleTemporaryPackageData::clear_items() {
  _impl_.items_.Clear();
}
inline ::idlepb::TemporaryPackageItem* RoleTemporaryPackageData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleTemporaryPackageData.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::TemporaryPackageItem >*
RoleTemporaryPackageData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleTemporaryPackageData.items)
  return &_impl_.items_;
}
inline const ::idlepb::TemporaryPackageItem& RoleTemporaryPackageData::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::idlepb::TemporaryPackageItem& RoleTemporaryPackageData::items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTemporaryPackageData.items)
  return _internal_items(index);
}
inline ::idlepb::TemporaryPackageItem* RoleTemporaryPackageData::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::idlepb::TemporaryPackageItem* RoleTemporaryPackageData::add_items() {
  ::idlepb::TemporaryPackageItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:idlepb.RoleTemporaryPackageData.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::TemporaryPackageItem >&
RoleTemporaryPackageData::items() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleTemporaryPackageData.items)
  return _impl_.items_;
}

// int64 last_extract_time = 2;
inline void RoleTemporaryPackageData::clear_last_extract_time() {
  _impl_.last_extract_time_ = int64_t{0};
}
inline int64_t RoleTemporaryPackageData::_internal_last_extract_time() const {
  return _impl_.last_extract_time_;
}
inline int64_t RoleTemporaryPackageData::last_extract_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTemporaryPackageData.last_extract_time)
  return _internal_last_extract_time();
}
inline void RoleTemporaryPackageData::_internal_set_last_extract_time(int64_t value) {
  
  _impl_.last_extract_time_ = value;
}
inline void RoleTemporaryPackageData::set_last_extract_time(int64_t value) {
  _internal_set_last_extract_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleTemporaryPackageData.last_extract_time)
}

// int64 next_item_id = 3;
inline void RoleTemporaryPackageData::clear_next_item_id() {
  _impl_.next_item_id_ = int64_t{0};
}
inline int64_t RoleTemporaryPackageData::_internal_next_item_id() const {
  return _impl_.next_item_id_;
}
inline int64_t RoleTemporaryPackageData::next_item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTemporaryPackageData.next_item_id)
  return _internal_next_item_id();
}
inline void RoleTemporaryPackageData::_internal_set_next_item_id(int64_t value) {
  
  _impl_.next_item_id_ = value;
}
inline void RoleTemporaryPackageData::set_next_item_id(int64_t value) {
  _internal_set_next_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleTemporaryPackageData.next_item_id)
}

// -------------------------------------------------------------------

// RoleArenaExplorationStatisticalData

// repeated .idlepb.ArenaExplorationStatisticalItem items = 1;
inline int RoleArenaExplorationStatisticalData::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int RoleArenaExplorationStatisticalData::items_size() const {
  return _internal_items_size();
}
inline void RoleArenaExplorationStatisticalData::clear_items() {
  _impl_.items_.Clear();
}
inline ::idlepb::ArenaExplorationStatisticalItem* RoleArenaExplorationStatisticalData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleArenaExplorationStatisticalData.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaExplorationStatisticalItem >*
RoleArenaExplorationStatisticalData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleArenaExplorationStatisticalData.items)
  return &_impl_.items_;
}
inline const ::idlepb::ArenaExplorationStatisticalItem& RoleArenaExplorationStatisticalData::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::idlepb::ArenaExplorationStatisticalItem& RoleArenaExplorationStatisticalData::items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleArenaExplorationStatisticalData.items)
  return _internal_items(index);
}
inline ::idlepb::ArenaExplorationStatisticalItem* RoleArenaExplorationStatisticalData::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::idlepb::ArenaExplorationStatisticalItem* RoleArenaExplorationStatisticalData::add_items() {
  ::idlepb::ArenaExplorationStatisticalItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:idlepb.RoleArenaExplorationStatisticalData.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaExplorationStatisticalItem >&
RoleArenaExplorationStatisticalData::items() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleArenaExplorationStatisticalData.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// QuestProgress

// int32 id = 1;
inline void QuestProgress::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t QuestProgress::_internal_id() const {
  return _impl_.id_;
}
inline int32_t QuestProgress::id() const {
  // @@protoc_insertion_point(field_get:idlepb.QuestProgress.id)
  return _internal_id();
}
inline void QuestProgress::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void QuestProgress::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.QuestProgress.id)
}

// repeated int32 progress = 2;
inline int QuestProgress::_internal_progress_size() const {
  return _impl_.progress_.size();
}
inline int QuestProgress::progress_size() const {
  return _internal_progress_size();
}
inline void QuestProgress::clear_progress() {
  _impl_.progress_.Clear();
}
inline int32_t QuestProgress::_internal_progress(int index) const {
  return _impl_.progress_.Get(index);
}
inline int32_t QuestProgress::progress(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.QuestProgress.progress)
  return _internal_progress(index);
}
inline void QuestProgress::set_progress(int index, int32_t value) {
  _impl_.progress_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.QuestProgress.progress)
}
inline void QuestProgress::_internal_add_progress(int32_t value) {
  _impl_.progress_.Add(value);
}
inline void QuestProgress::add_progress(int32_t value) {
  _internal_add_progress(value);
  // @@protoc_insertion_point(field_add:idlepb.QuestProgress.progress)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
QuestProgress::_internal_progress() const {
  return _impl_.progress_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
QuestProgress::progress() const {
  // @@protoc_insertion_point(field_list:idlepb.QuestProgress.progress)
  return _internal_progress();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
QuestProgress::_internal_mutable_progress() {
  return &_impl_.progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
QuestProgress::mutable_progress() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.QuestProgress.progress)
  return _internal_mutable_progress();
}

// int32 state = 3;
inline void QuestProgress::clear_state() {
  _impl_.state_ = 0;
}
inline int32_t QuestProgress::_internal_state() const {
  return _impl_.state_;
}
inline int32_t QuestProgress::state() const {
  // @@protoc_insertion_point(field_get:idlepb.QuestProgress.state)
  return _internal_state();
}
inline void QuestProgress::_internal_set_state(int32_t value) {
  
  _impl_.state_ = value;
}
inline void QuestProgress::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:idlepb.QuestProgress.state)
}

// -------------------------------------------------------------------

// RoleQuestData

// repeated int32 accepted_quests = 1;
inline int RoleQuestData::_internal_accepted_quests_size() const {
  return _impl_.accepted_quests_.size();
}
inline int RoleQuestData::accepted_quests_size() const {
  return _internal_accepted_quests_size();
}
inline void RoleQuestData::clear_accepted_quests() {
  _impl_.accepted_quests_.Clear();
}
inline int32_t RoleQuestData::_internal_accepted_quests(int index) const {
  return _impl_.accepted_quests_.Get(index);
}
inline int32_t RoleQuestData::accepted_quests(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleQuestData.accepted_quests)
  return _internal_accepted_quests(index);
}
inline void RoleQuestData::set_accepted_quests(int index, int32_t value) {
  _impl_.accepted_quests_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleQuestData.accepted_quests)
}
inline void RoleQuestData::_internal_add_accepted_quests(int32_t value) {
  _impl_.accepted_quests_.Add(value);
}
inline void RoleQuestData::add_accepted_quests(int32_t value) {
  _internal_add_accepted_quests(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleQuestData.accepted_quests)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleQuestData::_internal_accepted_quests() const {
  return _impl_.accepted_quests_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleQuestData::accepted_quests() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleQuestData.accepted_quests)
  return _internal_accepted_quests();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleQuestData::_internal_mutable_accepted_quests() {
  return &_impl_.accepted_quests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleQuestData::mutable_accepted_quests() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleQuestData.accepted_quests)
  return _internal_mutable_accepted_quests();
}

// repeated int32 finished_quests = 2;
inline int RoleQuestData::_internal_finished_quests_size() const {
  return _impl_.finished_quests_.size();
}
inline int RoleQuestData::finished_quests_size() const {
  return _internal_finished_quests_size();
}
inline void RoleQuestData::clear_finished_quests() {
  _impl_.finished_quests_.Clear();
}
inline int32_t RoleQuestData::_internal_finished_quests(int index) const {
  return _impl_.finished_quests_.Get(index);
}
inline int32_t RoleQuestData::finished_quests(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleQuestData.finished_quests)
  return _internal_finished_quests(index);
}
inline void RoleQuestData::set_finished_quests(int index, int32_t value) {
  _impl_.finished_quests_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleQuestData.finished_quests)
}
inline void RoleQuestData::_internal_add_finished_quests(int32_t value) {
  _impl_.finished_quests_.Add(value);
}
inline void RoleQuestData::add_finished_quests(int32_t value) {
  _internal_add_finished_quests(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleQuestData.finished_quests)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleQuestData::_internal_finished_quests() const {
  return _impl_.finished_quests_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleQuestData::finished_quests() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleQuestData.finished_quests)
  return _internal_finished_quests();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleQuestData::_internal_mutable_finished_quests() {
  return &_impl_.finished_quests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleQuestData::mutable_finished_quests() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleQuestData.finished_quests)
  return _internal_mutable_finished_quests();
}

// repeated .idlepb.QuestProgress quests_progress = 3;
inline int RoleQuestData::_internal_quests_progress_size() const {
  return _impl_.quests_progress_.size();
}
inline int RoleQuestData::quests_progress_size() const {
  return _internal_quests_progress_size();
}
inline void RoleQuestData::clear_quests_progress() {
  _impl_.quests_progress_.Clear();
}
inline ::idlepb::QuestProgress* RoleQuestData::mutable_quests_progress(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleQuestData.quests_progress)
  return _impl_.quests_progress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::QuestProgress >*
RoleQuestData::mutable_quests_progress() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleQuestData.quests_progress)
  return &_impl_.quests_progress_;
}
inline const ::idlepb::QuestProgress& RoleQuestData::_internal_quests_progress(int index) const {
  return _impl_.quests_progress_.Get(index);
}
inline const ::idlepb::QuestProgress& RoleQuestData::quests_progress(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleQuestData.quests_progress)
  return _internal_quests_progress(index);
}
inline ::idlepb::QuestProgress* RoleQuestData::_internal_add_quests_progress() {
  return _impl_.quests_progress_.Add();
}
inline ::idlepb::QuestProgress* RoleQuestData::add_quests_progress() {
  ::idlepb::QuestProgress* _add = _internal_add_quests_progress();
  // @@protoc_insertion_point(field_add:idlepb.RoleQuestData.quests_progress)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::QuestProgress >&
RoleQuestData::quests_progress() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleQuestData.quests_progress)
  return _impl_.quests_progress_;
}

// -------------------------------------------------------------------

// RoleShopData

// repeated .idlepb.ShopItem items = 2;
inline int RoleShopData::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int RoleShopData::items_size() const {
  return _internal_items_size();
}
inline void RoleShopData::clear_items() {
  _impl_.items_.Clear();
}
inline ::idlepb::ShopItem* RoleShopData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleShopData.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItem >*
RoleShopData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleShopData.items)
  return &_impl_.items_;
}
inline const ::idlepb::ShopItem& RoleShopData::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::idlepb::ShopItem& RoleShopData::items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShopData.items)
  return _internal_items(index);
}
inline ::idlepb::ShopItem* RoleShopData::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::idlepb::ShopItem* RoleShopData::add_items() {
  ::idlepb::ShopItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:idlepb.RoleShopData.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShopItem >&
RoleShopData::items() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleShopData.items)
  return _impl_.items_;
}

// int32 today_manual_refresh_num = 3;
inline void RoleShopData::clear_today_manual_refresh_num() {
  _impl_.today_manual_refresh_num_ = 0;
}
inline int32_t RoleShopData::_internal_today_manual_refresh_num() const {
  return _impl_.today_manual_refresh_num_;
}
inline int32_t RoleShopData::today_manual_refresh_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShopData.today_manual_refresh_num)
  return _internal_today_manual_refresh_num();
}
inline void RoleShopData::_internal_set_today_manual_refresh_num(int32_t value) {
  
  _impl_.today_manual_refresh_num_ = value;
}
inline void RoleShopData::set_today_manual_refresh_num(int32_t value) {
  _internal_set_today_manual_refresh_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShopData.today_manual_refresh_num)
}

// int64 last_auto_refresh_time = 4;
inline void RoleShopData::clear_last_auto_refresh_time() {
  _impl_.last_auto_refresh_time_ = int64_t{0};
}
inline int64_t RoleShopData::_internal_last_auto_refresh_time() const {
  return _impl_.last_auto_refresh_time_;
}
inline int64_t RoleShopData::last_auto_refresh_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShopData.last_auto_refresh_time)
  return _internal_last_auto_refresh_time();
}
inline void RoleShopData::_internal_set_last_auto_refresh_time(int64_t value) {
  
  _impl_.last_auto_refresh_time_ = value;
}
inline void RoleShopData::set_last_auto_refresh_time(int64_t value) {
  _internal_set_last_auto_refresh_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShopData.last_auto_refresh_time)
}

// int64 last_reset_time = 5;
inline void RoleShopData::clear_last_reset_time() {
  _impl_.last_reset_time_ = int64_t{0};
}
inline int64_t RoleShopData::_internal_last_reset_time() const {
  return _impl_.last_reset_time_;
}
inline int64_t RoleShopData::last_reset_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShopData.last_reset_time)
  return _internal_last_reset_time();
}
inline void RoleShopData::_internal_set_last_reset_time(int64_t value) {
  
  _impl_.last_reset_time_ = value;
}
inline void RoleShopData::set_last_reset_time(int64_t value) {
  _internal_set_last_reset_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShopData.last_reset_time)
}

// int32 guarantee_refresh_num = 6;
inline void RoleShopData::clear_guarantee_refresh_num() {
  _impl_.guarantee_refresh_num_ = 0;
}
inline int32_t RoleShopData::_internal_guarantee_refresh_num() const {
  return _impl_.guarantee_refresh_num_;
}
inline int32_t RoleShopData::guarantee_refresh_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShopData.guarantee_refresh_num)
  return _internal_guarantee_refresh_num();
}
inline void RoleShopData::_internal_set_guarantee_refresh_num(int32_t value) {
  
  _impl_.guarantee_refresh_num_ = value;
}
inline void RoleShopData::set_guarantee_refresh_num(int32_t value) {
  _internal_set_guarantee_refresh_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShopData.guarantee_refresh_num)
}

// -------------------------------------------------------------------

// RoleDeluxeShopData

// repeated .idlepb.DeluxeShopItem items = 2;
inline int RoleDeluxeShopData::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int RoleDeluxeShopData::items_size() const {
  return _internal_items_size();
}
inline void RoleDeluxeShopData::clear_items() {
  _impl_.items_.Clear();
}
inline ::idlepb::DeluxeShopItem* RoleDeluxeShopData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleDeluxeShopData.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::DeluxeShopItem >*
RoleDeluxeShopData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleDeluxeShopData.items)
  return &_impl_.items_;
}
inline const ::idlepb::DeluxeShopItem& RoleDeluxeShopData::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::idlepb::DeluxeShopItem& RoleDeluxeShopData::items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleDeluxeShopData.items)
  return _internal_items(index);
}
inline ::idlepb::DeluxeShopItem* RoleDeluxeShopData::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::idlepb::DeluxeShopItem* RoleDeluxeShopData::add_items() {
  ::idlepb::DeluxeShopItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:idlepb.RoleDeluxeShopData.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::DeluxeShopItem >&
RoleDeluxeShopData::items() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleDeluxeShopData.items)
  return _impl_.items_;
}

// int32 today_manual_refresh_num_item = 3;
inline void RoleDeluxeShopData::clear_today_manual_refresh_num_item() {
  _impl_.today_manual_refresh_num_item_ = 0;
}
inline int32_t RoleDeluxeShopData::_internal_today_manual_refresh_num_item() const {
  return _impl_.today_manual_refresh_num_item_;
}
inline int32_t RoleDeluxeShopData::today_manual_refresh_num_item() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleDeluxeShopData.today_manual_refresh_num_item)
  return _internal_today_manual_refresh_num_item();
}
inline void RoleDeluxeShopData::_internal_set_today_manual_refresh_num_item(int32_t value) {
  
  _impl_.today_manual_refresh_num_item_ = value;
}
inline void RoleDeluxeShopData::set_today_manual_refresh_num_item(int32_t value) {
  _internal_set_today_manual_refresh_num_item(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleDeluxeShopData.today_manual_refresh_num_item)
}

// int32 today_manual_refresh_num_gold = 4;
inline void RoleDeluxeShopData::clear_today_manual_refresh_num_gold() {
  _impl_.today_manual_refresh_num_gold_ = 0;
}
inline int32_t RoleDeluxeShopData::_internal_today_manual_refresh_num_gold() const {
  return _impl_.today_manual_refresh_num_gold_;
}
inline int32_t RoleDeluxeShopData::today_manual_refresh_num_gold() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleDeluxeShopData.today_manual_refresh_num_gold)
  return _internal_today_manual_refresh_num_gold();
}
inline void RoleDeluxeShopData::_internal_set_today_manual_refresh_num_gold(int32_t value) {
  
  _impl_.today_manual_refresh_num_gold_ = value;
}
inline void RoleDeluxeShopData::set_today_manual_refresh_num_gold(int32_t value) {
  _internal_set_today_manual_refresh_num_gold(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleDeluxeShopData.today_manual_refresh_num_gold)
}

// int64 last_auto_refresh_time = 5;
inline void RoleDeluxeShopData::clear_last_auto_refresh_time() {
  _impl_.last_auto_refresh_time_ = int64_t{0};
}
inline int64_t RoleDeluxeShopData::_internal_last_auto_refresh_time() const {
  return _impl_.last_auto_refresh_time_;
}
inline int64_t RoleDeluxeShopData::last_auto_refresh_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleDeluxeShopData.last_auto_refresh_time)
  return _internal_last_auto_refresh_time();
}
inline void RoleDeluxeShopData::_internal_set_last_auto_refresh_time(int64_t value) {
  
  _impl_.last_auto_refresh_time_ = value;
}
inline void RoleDeluxeShopData::set_last_auto_refresh_time(int64_t value) {
  _internal_set_last_auto_refresh_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleDeluxeShopData.last_auto_refresh_time)
}

// int64 last_reset_time = 6;
inline void RoleDeluxeShopData::clear_last_reset_time() {
  _impl_.last_reset_time_ = int64_t{0};
}
inline int64_t RoleDeluxeShopData::_internal_last_reset_time() const {
  return _impl_.last_reset_time_;
}
inline int64_t RoleDeluxeShopData::last_reset_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleDeluxeShopData.last_reset_time)
  return _internal_last_reset_time();
}
inline void RoleDeluxeShopData::_internal_set_last_reset_time(int64_t value) {
  
  _impl_.last_reset_time_ = value;
}
inline void RoleDeluxeShopData::set_last_reset_time(int64_t value) {
  _internal_set_last_reset_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleDeluxeShopData.last_reset_time)
}

// -------------------------------------------------------------------

// MailAttachment

// int32 id = 1;
inline void MailAttachment::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t MailAttachment::_internal_id() const {
  return _impl_.id_;
}
inline int32_t MailAttachment::id() const {
  // @@protoc_insertion_point(field_get:idlepb.MailAttachment.id)
  return _internal_id();
}
inline void MailAttachment::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void MailAttachment::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.MailAttachment.id)
}

// int32 num = 2;
inline void MailAttachment::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t MailAttachment::_internal_num() const {
  return _impl_.num_;
}
inline int32_t MailAttachment::num() const {
  // @@protoc_insertion_point(field_get:idlepb.MailAttachment.num)
  return _internal_num();
}
inline void MailAttachment::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void MailAttachment::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.MailAttachment.num)
}

// bool received = 3;
inline void MailAttachment::clear_received() {
  _impl_.received_ = false;
}
inline bool MailAttachment::_internal_received() const {
  return _impl_.received_;
}
inline bool MailAttachment::received() const {
  // @@protoc_insertion_point(field_get:idlepb.MailAttachment.received)
  return _internal_received();
}
inline void MailAttachment::_internal_set_received(bool value) {
  
  _impl_.received_ = value;
}
inline void MailAttachment::set_received(bool value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:idlepb.MailAttachment.received)
}

// -------------------------------------------------------------------

// Mail

// int32 id = 1;
inline void Mail::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Mail::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Mail::id() const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.id)
  return _internal_id();
}
inline void Mail::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Mail::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.Mail.id)
}

// .idlepb.MailType type = 2;
inline void Mail::clear_type() {
  _impl_.type_ = 0;
}
inline ::idlepb::MailType Mail::_internal_type() const {
  return static_cast< ::idlepb::MailType >(_impl_.type_);
}
inline ::idlepb::MailType Mail::type() const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.type)
  return _internal_type();
}
inline void Mail::_internal_set_type(::idlepb::MailType value) {
  
  _impl_.type_ = value;
}
inline void Mail::set_type(::idlepb::MailType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.Mail.type)
}

// string title = 3;
inline void Mail::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Mail::title() const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mail::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.Mail.title)
}
inline std::string* Mail::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:idlepb.Mail.title)
  return _s;
}
inline const std::string& Mail::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Mail::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Mail::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Mail::release_title() {
  // @@protoc_insertion_point(field_release:idlepb.Mail.title)
  return _impl_.title_.Release();
}
inline void Mail::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.Mail.title)
}

// string subtitle = 4;
inline void Mail::clear_subtitle() {
  _impl_.subtitle_.ClearToEmpty();
}
inline const std::string& Mail::subtitle() const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.subtitle)
  return _internal_subtitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mail::set_subtitle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.Mail.subtitle)
}
inline std::string* Mail::mutable_subtitle() {
  std::string* _s = _internal_mutable_subtitle();
  // @@protoc_insertion_point(field_mutable:idlepb.Mail.subtitle)
  return _s;
}
inline const std::string& Mail::_internal_subtitle() const {
  return _impl_.subtitle_.Get();
}
inline void Mail::_internal_set_subtitle(const std::string& value) {
  
  _impl_.subtitle_.Set(value, GetArenaForAllocation());
}
inline std::string* Mail::_internal_mutable_subtitle() {
  
  return _impl_.subtitle_.Mutable(GetArenaForAllocation());
}
inline std::string* Mail::release_subtitle() {
  // @@protoc_insertion_point(field_release:idlepb.Mail.subtitle)
  return _impl_.subtitle_.Release();
}
inline void Mail::set_allocated_subtitle(std::string* subtitle) {
  if (subtitle != nullptr) {
    
  } else {
    
  }
  _impl_.subtitle_.SetAllocated(subtitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtitle_.IsDefault()) {
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.Mail.subtitle)
}

// string body_text = 5;
inline void Mail::clear_body_text() {
  _impl_.body_text_.ClearToEmpty();
}
inline const std::string& Mail::body_text() const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.body_text)
  return _internal_body_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mail::set_body_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.Mail.body_text)
}
inline std::string* Mail::mutable_body_text() {
  std::string* _s = _internal_mutable_body_text();
  // @@protoc_insertion_point(field_mutable:idlepb.Mail.body_text)
  return _s;
}
inline const std::string& Mail::_internal_body_text() const {
  return _impl_.body_text_.Get();
}
inline void Mail::_internal_set_body_text(const std::string& value) {
  
  _impl_.body_text_.Set(value, GetArenaForAllocation());
}
inline std::string* Mail::_internal_mutable_body_text() {
  
  return _impl_.body_text_.Mutable(GetArenaForAllocation());
}
inline std::string* Mail::release_body_text() {
  // @@protoc_insertion_point(field_release:idlepb.Mail.body_text)
  return _impl_.body_text_.Release();
}
inline void Mail::set_allocated_body_text(std::string* body_text) {
  if (body_text != nullptr) {
    
  } else {
    
  }
  _impl_.body_text_.SetAllocated(body_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_text_.IsDefault()) {
    _impl_.body_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.Mail.body_text)
}

// string sender = 6;
inline void Mail::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& Mail::sender() const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mail::set_sender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.Mail.sender)
}
inline std::string* Mail::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:idlepb.Mail.sender)
  return _s;
}
inline const std::string& Mail::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void Mail::_internal_set_sender(const std::string& value) {
  
  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* Mail::_internal_mutable_sender() {
  
  return _impl_.sender_.Mutable(GetArenaForAllocation());
}
inline std::string* Mail::release_sender() {
  // @@protoc_insertion_point(field_release:idlepb.Mail.sender)
  return _impl_.sender_.Release();
}
inline void Mail::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  _impl_.sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.Mail.sender)
}

// repeated .idlepb.MailAttachment attachments = 7;
inline int Mail::_internal_attachments_size() const {
  return _impl_.attachments_.size();
}
inline int Mail::attachments_size() const {
  return _internal_attachments_size();
}
inline void Mail::clear_attachments() {
  _impl_.attachments_.Clear();
}
inline ::idlepb::MailAttachment* Mail::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.Mail.attachments)
  return _impl_.attachments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MailAttachment >*
Mail::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.Mail.attachments)
  return &_impl_.attachments_;
}
inline const ::idlepb::MailAttachment& Mail::_internal_attachments(int index) const {
  return _impl_.attachments_.Get(index);
}
inline const ::idlepb::MailAttachment& Mail::attachments(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.attachments)
  return _internal_attachments(index);
}
inline ::idlepb::MailAttachment* Mail::_internal_add_attachments() {
  return _impl_.attachments_.Add();
}
inline ::idlepb::MailAttachment* Mail::add_attachments() {
  ::idlepb::MailAttachment* _add = _internal_add_attachments();
  // @@protoc_insertion_point(field_add:idlepb.Mail.attachments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MailAttachment >&
Mail::attachments() const {
  // @@protoc_insertion_point(field_list:idlepb.Mail.attachments)
  return _impl_.attachments_;
}

// int64 begin_date = 8;
inline void Mail::clear_begin_date() {
  _impl_.begin_date_ = int64_t{0};
}
inline int64_t Mail::_internal_begin_date() const {
  return _impl_.begin_date_;
}
inline int64_t Mail::begin_date() const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.begin_date)
  return _internal_begin_date();
}
inline void Mail::_internal_set_begin_date(int64_t value) {
  
  _impl_.begin_date_ = value;
}
inline void Mail::set_begin_date(int64_t value) {
  _internal_set_begin_date(value);
  // @@protoc_insertion_point(field_set:idlepb.Mail.begin_date)
}

// int32 keep_time = 9;
inline void Mail::clear_keep_time() {
  _impl_.keep_time_ = 0;
}
inline int32_t Mail::_internal_keep_time() const {
  return _impl_.keep_time_;
}
inline int32_t Mail::keep_time() const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.keep_time)
  return _internal_keep_time();
}
inline void Mail::_internal_set_keep_time(int32_t value) {
  
  _impl_.keep_time_ = value;
}
inline void Mail::set_keep_time(int32_t value) {
  _internal_set_keep_time(value);
  // @@protoc_insertion_point(field_set:idlepb.Mail.keep_time)
}

// bool is_read = 10;
inline void Mail::clear_is_read() {
  _impl_.is_read_ = false;
}
inline bool Mail::_internal_is_read() const {
  return _impl_.is_read_;
}
inline bool Mail::is_read() const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.is_read)
  return _internal_is_read();
}
inline void Mail::_internal_set_is_read(bool value) {
  
  _impl_.is_read_ = value;
}
inline void Mail::set_is_read(bool value) {
  _internal_set_is_read(value);
  // @@protoc_insertion_point(field_set:idlepb.Mail.is_read)
}

// bool is_received = 11;
inline void Mail::clear_is_received() {
  _impl_.is_received_ = false;
}
inline bool Mail::_internal_is_received() const {
  return _impl_.is_received_;
}
inline bool Mail::is_received() const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.is_received)
  return _internal_is_received();
}
inline void Mail::_internal_set_is_received(bool value) {
  
  _impl_.is_received_ = value;
}
inline void Mail::set_is_received(bool value) {
  _internal_set_is_received(value);
  // @@protoc_insertion_point(field_set:idlepb.Mail.is_received)
}

// repeated .idlepb.ItemData equipments = 12;
inline int Mail::_internal_equipments_size() const {
  return _impl_.equipments_.size();
}
inline int Mail::equipments_size() const {
  return _internal_equipments_size();
}
inline void Mail::clear_equipments() {
  _impl_.equipments_.Clear();
}
inline ::idlepb::ItemData* Mail::mutable_equipments(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.Mail.equipments)
  return _impl_.equipments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >*
Mail::mutable_equipments() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.Mail.equipments)
  return &_impl_.equipments_;
}
inline const ::idlepb::ItemData& Mail::_internal_equipments(int index) const {
  return _impl_.equipments_.Get(index);
}
inline const ::idlepb::ItemData& Mail::equipments(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.Mail.equipments)
  return _internal_equipments(index);
}
inline ::idlepb::ItemData* Mail::_internal_add_equipments() {
  return _impl_.equipments_.Add();
}
inline ::idlepb::ItemData* Mail::add_equipments() {
  ::idlepb::ItemData* _add = _internal_add_equipments();
  // @@protoc_insertion_point(field_add:idlepb.Mail.equipments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ItemData >&
Mail::equipments() const {
  // @@protoc_insertion_point(field_list:idlepb.Mail.equipments)
  return _impl_.equipments_;
}

// -------------------------------------------------------------------

// RoleMailData

// repeated .idlepb.Mail mail_box = 1;
inline int RoleMailData::_internal_mail_box_size() const {
  return _impl_.mail_box_.size();
}
inline int RoleMailData::mail_box_size() const {
  return _internal_mail_box_size();
}
inline void RoleMailData::clear_mail_box() {
  _impl_.mail_box_.Clear();
}
inline ::idlepb::Mail* RoleMailData::mutable_mail_box(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleMailData.mail_box)
  return _impl_.mail_box_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Mail >*
RoleMailData::mutable_mail_box() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleMailData.mail_box)
  return &_impl_.mail_box_;
}
inline const ::idlepb::Mail& RoleMailData::_internal_mail_box(int index) const {
  return _impl_.mail_box_.Get(index);
}
inline const ::idlepb::Mail& RoleMailData::mail_box(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleMailData.mail_box)
  return _internal_mail_box(index);
}
inline ::idlepb::Mail* RoleMailData::_internal_add_mail_box() {
  return _impl_.mail_box_.Add();
}
inline ::idlepb::Mail* RoleMailData::add_mail_box() {
  ::idlepb::Mail* _add = _internal_add_mail_box();
  // @@protoc_insertion_point(field_add:idlepb.RoleMailData.mail_box)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Mail >&
RoleMailData::mail_box() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleMailData.mail_box)
  return _impl_.mail_box_;
}

// int32 total_num = 3;
inline void RoleMailData::clear_total_num() {
  _impl_.total_num_ = 0;
}
inline int32_t RoleMailData::_internal_total_num() const {
  return _impl_.total_num_;
}
inline int32_t RoleMailData::total_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleMailData.total_num)
  return _internal_total_num();
}
inline void RoleMailData::_internal_set_total_num(int32_t value) {
  
  _impl_.total_num_ = value;
}
inline void RoleMailData::set_total_num(int32_t value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleMailData.total_num)
}

// repeated .idlepb.MapValueInt32 system_mail_counter = 4;
inline int RoleMailData::_internal_system_mail_counter_size() const {
  return _impl_.system_mail_counter_.size();
}
inline int RoleMailData::system_mail_counter_size() const {
  return _internal_system_mail_counter_size();
}
inline void RoleMailData::clear_system_mail_counter() {
  _impl_.system_mail_counter_.Clear();
}
inline ::idlepb::MapValueInt32* RoleMailData::mutable_system_mail_counter(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleMailData.system_mail_counter)
  return _impl_.system_mail_counter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >*
RoleMailData::mutable_system_mail_counter() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleMailData.system_mail_counter)
  return &_impl_.system_mail_counter_;
}
inline const ::idlepb::MapValueInt32& RoleMailData::_internal_system_mail_counter(int index) const {
  return _impl_.system_mail_counter_.Get(index);
}
inline const ::idlepb::MapValueInt32& RoleMailData::system_mail_counter(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleMailData.system_mail_counter)
  return _internal_system_mail_counter(index);
}
inline ::idlepb::MapValueInt32* RoleMailData::_internal_add_system_mail_counter() {
  return _impl_.system_mail_counter_.Add();
}
inline ::idlepb::MapValueInt32* RoleMailData::add_system_mail_counter() {
  ::idlepb::MapValueInt32* _add = _internal_add_system_mail_counter();
  // @@protoc_insertion_point(field_add:idlepb.RoleMailData.system_mail_counter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >&
RoleMailData::system_mail_counter() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleMailData.system_mail_counter)
  return _impl_.system_mail_counter_;
}

// -------------------------------------------------------------------

// OfflineAwardSummary

// .idlepb.CultivationDirection dir = 1;
inline void OfflineAwardSummary::clear_dir() {
  _impl_.dir_ = 0;
}
inline ::idlepb::CultivationDirection OfflineAwardSummary::_internal_dir() const {
  return static_cast< ::idlepb::CultivationDirection >(_impl_.dir_);
}
inline ::idlepb::CultivationDirection OfflineAwardSummary::dir() const {
  // @@protoc_insertion_point(field_get:idlepb.OfflineAwardSummary.dir)
  return _internal_dir();
}
inline void OfflineAwardSummary::_internal_set_dir(::idlepb::CultivationDirection value) {
  
  _impl_.dir_ = value;
}
inline void OfflineAwardSummary::set_dir(::idlepb::CultivationDirection value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:idlepb.OfflineAwardSummary.dir)
}

// int64 time_during = 2;
inline void OfflineAwardSummary::clear_time_during() {
  _impl_.time_during_ = int64_t{0};
}
inline int64_t OfflineAwardSummary::_internal_time_during() const {
  return _impl_.time_during_;
}
inline int64_t OfflineAwardSummary::time_during() const {
  // @@protoc_insertion_point(field_get:idlepb.OfflineAwardSummary.time_during)
  return _internal_time_during();
}
inline void OfflineAwardSummary::_internal_set_time_during(int64_t value) {
  
  _impl_.time_during_ = value;
}
inline void OfflineAwardSummary::set_time_during(int64_t value) {
  _internal_set_time_during(value);
  // @@protoc_insertion_point(field_set:idlepb.OfflineAwardSummary.time_during)
}

// int64 add_exp = 3;
inline void OfflineAwardSummary::clear_add_exp() {
  _impl_.add_exp_ = int64_t{0};
}
inline int64_t OfflineAwardSummary::_internal_add_exp() const {
  return _impl_.add_exp_;
}
inline int64_t OfflineAwardSummary::add_exp() const {
  // @@protoc_insertion_point(field_get:idlepb.OfflineAwardSummary.add_exp)
  return _internal_add_exp();
}
inline void OfflineAwardSummary::_internal_set_add_exp(int64_t value) {
  
  _impl_.add_exp_ = value;
}
inline void OfflineAwardSummary::set_add_exp(int64_t value) {
  _internal_set_add_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.OfflineAwardSummary.add_exp)
}

// int64 add_attr = 4;
inline void OfflineAwardSummary::clear_add_attr() {
  _impl_.add_attr_ = int64_t{0};
}
inline int64_t OfflineAwardSummary::_internal_add_attr() const {
  return _impl_.add_attr_;
}
inline int64_t OfflineAwardSummary::add_attr() const {
  // @@protoc_insertion_point(field_get:idlepb.OfflineAwardSummary.add_attr)
  return _internal_add_attr();
}
inline void OfflineAwardSummary::_internal_set_add_attr(int64_t value) {
  
  _impl_.add_attr_ = value;
}
inline void OfflineAwardSummary::set_add_attr(int64_t value) {
  _internal_set_add_attr(value);
  // @@protoc_insertion_point(field_set:idlepb.OfflineAwardSummary.add_attr)
}

// -------------------------------------------------------------------

// RoleOfflineData

// int64 last_exp_value = 1;
inline void RoleOfflineData::clear_last_exp_value() {
  _impl_.last_exp_value_ = int64_t{0};
}
inline int64_t RoleOfflineData::_internal_last_exp_value() const {
  return _impl_.last_exp_value_;
}
inline int64_t RoleOfflineData::last_exp_value() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineData.last_exp_value)
  return _internal_last_exp_value();
}
inline void RoleOfflineData::_internal_set_last_exp_value(int64_t value) {
  
  _impl_.last_exp_value_ = value;
}
inline void RoleOfflineData::set_last_exp_value(int64_t value) {
  _internal_set_last_exp_value(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleOfflineData.last_exp_value)
}

// int64 last_attr_value = 2;
inline void RoleOfflineData::clear_last_attr_value() {
  _impl_.last_attr_value_ = int64_t{0};
}
inline int64_t RoleOfflineData::_internal_last_attr_value() const {
  return _impl_.last_attr_value_;
}
inline int64_t RoleOfflineData::last_attr_value() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineData.last_attr_value)
  return _internal_last_attr_value();
}
inline void RoleOfflineData::_internal_set_last_attr_value(int64_t value) {
  
  _impl_.last_attr_value_ = value;
}
inline void RoleOfflineData::set_last_attr_value(int64_t value) {
  _internal_set_last_attr_value(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleOfflineData.last_attr_value)
}

// .idlepb.OfflineAwardSummary last_award_summary = 3;
inline bool RoleOfflineData::_internal_has_last_award_summary() const {
  return this != internal_default_instance() && _impl_.last_award_summary_ != nullptr;
}
inline bool RoleOfflineData::has_last_award_summary() const {
  return _internal_has_last_award_summary();
}
inline void RoleOfflineData::clear_last_award_summary() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_award_summary_ != nullptr) {
    delete _impl_.last_award_summary_;
  }
  _impl_.last_award_summary_ = nullptr;
}
inline const ::idlepb::OfflineAwardSummary& RoleOfflineData::_internal_last_award_summary() const {
  const ::idlepb::OfflineAwardSummary* p = _impl_.last_award_summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::OfflineAwardSummary&>(
      ::idlepb::_OfflineAwardSummary_default_instance_);
}
inline const ::idlepb::OfflineAwardSummary& RoleOfflineData::last_award_summary() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineData.last_award_summary)
  return _internal_last_award_summary();
}
inline void RoleOfflineData::unsafe_arena_set_allocated_last_award_summary(
    ::idlepb::OfflineAwardSummary* last_award_summary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_award_summary_);
  }
  _impl_.last_award_summary_ = last_award_summary;
  if (last_award_summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleOfflineData.last_award_summary)
}
inline ::idlepb::OfflineAwardSummary* RoleOfflineData::release_last_award_summary() {
  
  ::idlepb::OfflineAwardSummary* temp = _impl_.last_award_summary_;
  _impl_.last_award_summary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::OfflineAwardSummary* RoleOfflineData::unsafe_arena_release_last_award_summary() {
  // @@protoc_insertion_point(field_release:idlepb.RoleOfflineData.last_award_summary)
  
  ::idlepb::OfflineAwardSummary* temp = _impl_.last_award_summary_;
  _impl_.last_award_summary_ = nullptr;
  return temp;
}
inline ::idlepb::OfflineAwardSummary* RoleOfflineData::_internal_mutable_last_award_summary() {
  
  if (_impl_.last_award_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::OfflineAwardSummary>(GetArenaForAllocation());
    _impl_.last_award_summary_ = p;
  }
  return _impl_.last_award_summary_;
}
inline ::idlepb::OfflineAwardSummary* RoleOfflineData::mutable_last_award_summary() {
  ::idlepb::OfflineAwardSummary* _msg = _internal_mutable_last_award_summary();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleOfflineData.last_award_summary)
  return _msg;
}
inline void RoleOfflineData::set_allocated_last_award_summary(::idlepb::OfflineAwardSummary* last_award_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.last_award_summary_;
  }
  if (last_award_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_award_summary);
    if (message_arena != submessage_arena) {
      last_award_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_award_summary, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_award_summary_ = last_award_summary;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleOfflineData.last_award_summary)
}

// -------------------------------------------------------------------

// PillElixirData

// int32 item_id = 1;
inline void PillElixirData::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t PillElixirData::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t PillElixirData::item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.PillElixirData.item_id)
  return _internal_item_id();
}
inline void PillElixirData::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void PillElixirData::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.PillElixirData.item_id)
}

// int32 holding_num = 2;
inline void PillElixirData::clear_holding_num() {
  _impl_.holding_num_ = 0;
}
inline int32_t PillElixirData::_internal_holding_num() const {
  return _impl_.holding_num_;
}
inline int32_t PillElixirData::holding_num() const {
  // @@protoc_insertion_point(field_get:idlepb.PillElixirData.holding_num)
  return _internal_holding_num();
}
inline void PillElixirData::_internal_set_holding_num(int32_t value) {
  
  _impl_.holding_num_ = value;
}
inline void PillElixirData::set_holding_num(int32_t value) {
  _internal_set_holding_num(value);
  // @@protoc_insertion_point(field_set:idlepb.PillElixirData.holding_num)
}

// -------------------------------------------------------------------

// RolePillElixirData

// repeated .idlepb.PillElixirData pill_data = 1;
inline int RolePillElixirData::_internal_pill_data_size() const {
  return _impl_.pill_data_.size();
}
inline int RolePillElixirData::pill_data_size() const {
  return _internal_pill_data_size();
}
inline void RolePillElixirData::clear_pill_data() {
  _impl_.pill_data_.Clear();
}
inline ::idlepb::PillElixirData* RolePillElixirData::mutable_pill_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RolePillElixirData.pill_data)
  return _impl_.pill_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PillElixirData >*
RolePillElixirData::mutable_pill_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RolePillElixirData.pill_data)
  return &_impl_.pill_data_;
}
inline const ::idlepb::PillElixirData& RolePillElixirData::_internal_pill_data(int index) const {
  return _impl_.pill_data_.Get(index);
}
inline const ::idlepb::PillElixirData& RolePillElixirData::pill_data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RolePillElixirData.pill_data)
  return _internal_pill_data(index);
}
inline ::idlepb::PillElixirData* RolePillElixirData::_internal_add_pill_data() {
  return _impl_.pill_data_.Add();
}
inline ::idlepb::PillElixirData* RolePillElixirData::add_pill_data() {
  ::idlepb::PillElixirData* _add = _internal_add_pill_data();
  // @@protoc_insertion_point(field_add:idlepb.RolePillElixirData.pill_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PillElixirData >&
RolePillElixirData::pill_data() const {
  // @@protoc_insertion_point(field_list:idlepb.RolePillElixirData.pill_data)
  return _impl_.pill_data_;
}

// int32 limit_double = 2;
inline void RolePillElixirData::clear_limit_double() {
  _impl_.limit_double_ = 0;
}
inline int32_t RolePillElixirData::_internal_limit_double() const {
  return _impl_.limit_double_;
}
inline int32_t RolePillElixirData::limit_double() const {
  // @@protoc_insertion_point(field_get:idlepb.RolePillElixirData.limit_double)
  return _internal_limit_double();
}
inline void RolePillElixirData::_internal_set_limit_double(int32_t value) {
  
  _impl_.limit_double_ = value;
}
inline void RolePillElixirData::set_limit_double(int32_t value) {
  _internal_set_limit_double(value);
  // @@protoc_insertion_point(field_set:idlepb.RolePillElixirData.limit_double)
}

// int32 limit_exp = 3;
inline void RolePillElixirData::clear_limit_exp() {
  _impl_.limit_exp_ = 0;
}
inline int32_t RolePillElixirData::_internal_limit_exp() const {
  return _impl_.limit_exp_;
}
inline int32_t RolePillElixirData::limit_exp() const {
  // @@protoc_insertion_point(field_get:idlepb.RolePillElixirData.limit_exp)
  return _internal_limit_exp();
}
inline void RolePillElixirData::_internal_set_limit_exp(int32_t value) {
  
  _impl_.limit_exp_ = value;
}
inline void RolePillElixirData::set_limit_exp(int32_t value) {
  _internal_set_limit_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.RolePillElixirData.limit_exp)
}

// int32 limit_property = 4;
inline void RolePillElixirData::clear_limit_property() {
  _impl_.limit_property_ = 0;
}
inline int32_t RolePillElixirData::_internal_limit_property() const {
  return _impl_.limit_property_;
}
inline int32_t RolePillElixirData::limit_property() const {
  // @@protoc_insertion_point(field_get:idlepb.RolePillElixirData.limit_property)
  return _internal_limit_property();
}
inline void RolePillElixirData::_internal_set_limit_property(int32_t value) {
  
  _impl_.limit_property_ = value;
}
inline void RolePillElixirData::set_limit_property(int32_t value) {
  _internal_set_limit_property(value);
  // @@protoc_insertion_point(field_set:idlepb.RolePillElixirData.limit_property)
}

// -------------------------------------------------------------------

// AbilityEffectDefData

// int32 type = 1;
inline void AbilityEffectDefData::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t AbilityEffectDefData::_internal_type() const {
  return _impl_.type_;
}
inline int32_t AbilityEffectDefData::type() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectDefData.type)
  return _internal_type();
}
inline void AbilityEffectDefData::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void AbilityEffectDefData::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectDefData.type)
}

// float duration = 2;
inline void AbilityEffectDefData::clear_duration() {
  _impl_.duration_ = 0;
}
inline float AbilityEffectDefData::_internal_duration() const {
  return _impl_.duration_;
}
inline float AbilityEffectDefData::duration() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectDefData.duration)
  return _internal_duration();
}
inline void AbilityEffectDefData::_internal_set_duration(float value) {
  
  _impl_.duration_ = value;
}
inline void AbilityEffectDefData::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectDefData.duration)
}

// float period = 3;
inline void AbilityEffectDefData::clear_period() {
  _impl_.period_ = 0;
}
inline float AbilityEffectDefData::_internal_period() const {
  return _impl_.period_;
}
inline float AbilityEffectDefData::period() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectDefData.period)
  return _internal_period();
}
inline void AbilityEffectDefData::_internal_set_period(float value) {
  
  _impl_.period_ = value;
}
inline void AbilityEffectDefData::set_period(float value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectDefData.period)
}

// int32 duration_policy = 4;
inline void AbilityEffectDefData::clear_duration_policy() {
  _impl_.duration_policy_ = 0;
}
inline int32_t AbilityEffectDefData::_internal_duration_policy() const {
  return _impl_.duration_policy_;
}
inline int32_t AbilityEffectDefData::duration_policy() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectDefData.duration_policy)
  return _internal_duration_policy();
}
inline void AbilityEffectDefData::_internal_set_duration_policy(int32_t value) {
  
  _impl_.duration_policy_ = value;
}
inline void AbilityEffectDefData::set_duration_policy(int32_t value) {
  _internal_set_duration_policy(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectDefData.duration_policy)
}

// float x = 10;
inline void AbilityEffectDefData::clear_x() {
  _impl_.x_ = 0;
}
inline float AbilityEffectDefData::_internal_x() const {
  return _impl_.x_;
}
inline float AbilityEffectDefData::x() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectDefData.x)
  return _internal_x();
}
inline void AbilityEffectDefData::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void AbilityEffectDefData::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectDefData.x)
}

// float y = 11;
inline void AbilityEffectDefData::clear_y() {
  _impl_.y_ = 0;
}
inline float AbilityEffectDefData::_internal_y() const {
  return _impl_.y_;
}
inline float AbilityEffectDefData::y() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectDefData.y)
  return _internal_y();
}
inline void AbilityEffectDefData::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void AbilityEffectDefData::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectDefData.y)
}

// float z = 12;
inline void AbilityEffectDefData::clear_z() {
  _impl_.z_ = 0;
}
inline float AbilityEffectDefData::_internal_z() const {
  return _impl_.z_;
}
inline float AbilityEffectDefData::z() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectDefData.z)
  return _internal_z();
}
inline void AbilityEffectDefData::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void AbilityEffectDefData::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectDefData.z)
}

// float m = 13;
inline void AbilityEffectDefData::clear_m() {
  _impl_.m_ = 0;
}
inline float AbilityEffectDefData::_internal_m() const {
  return _impl_.m_;
}
inline float AbilityEffectDefData::m() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectDefData.m)
  return _internal_m();
}
inline void AbilityEffectDefData::_internal_set_m(float value) {
  
  _impl_.m_ = value;
}
inline void AbilityEffectDefData::set_m(float value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectDefData.m)
}

// float n = 14;
inline void AbilityEffectDefData::clear_n() {
  _impl_.n_ = 0;
}
inline float AbilityEffectDefData::_internal_n() const {
  return _impl_.n_;
}
inline float AbilityEffectDefData::n() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityEffectDefData.n)
  return _internal_n();
}
inline void AbilityEffectDefData::_internal_set_n(float value) {
  
  _impl_.n_ = value;
}
inline void AbilityEffectDefData::set_n(float value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityEffectDefData.n)
}

// -------------------------------------------------------------------

// AbilityData

// int32 id = 1;
inline void AbilityData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t AbilityData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t AbilityData::id() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.id)
  return _internal_id();
}
inline void AbilityData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void AbilityData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.id)
}

// int32 grade = 2;
inline void AbilityData::clear_grade() {
  _impl_.grade_ = 0;
}
inline int32_t AbilityData::_internal_grade() const {
  return _impl_.grade_;
}
inline int32_t AbilityData::grade() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.grade)
  return _internal_grade();
}
inline void AbilityData::_internal_set_grade(int32_t value) {
  
  _impl_.grade_ = value;
}
inline void AbilityData::set_grade(int32_t value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.grade)
}

// int64 activetime_utc = 3;
inline void AbilityData::clear_activetime_utc() {
  _impl_.activetime_utc_ = int64_t{0};
}
inline int64_t AbilityData::_internal_activetime_utc() const {
  return _impl_.activetime_utc_;
}
inline int64_t AbilityData::activetime_utc() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.activetime_utc)
  return _internal_activetime_utc();
}
inline void AbilityData::_internal_set_activetime_utc(int64_t value) {
  
  _impl_.activetime_utc_ = value;
}
inline void AbilityData::set_activetime_utc(int64_t value) {
  _internal_set_activetime_utc(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.activetime_utc)
}

// float activetime_world = 4;
inline void AbilityData::clear_activetime_world() {
  _impl_.activetime_world_ = 0;
}
inline float AbilityData::_internal_activetime_world() const {
  return _impl_.activetime_world_;
}
inline float AbilityData::activetime_world() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.activetime_world)
  return _internal_activetime_world();
}
inline void AbilityData::_internal_set_activetime_world(float value) {
  
  _impl_.activetime_world_ = value;
}
inline void AbilityData::set_activetime_world(float value) {
  _internal_set_activetime_world(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.activetime_world)
}

// int32 unique_id = 5;
inline void AbilityData::clear_unique_id() {
  _impl_.unique_id_ = 0;
}
inline int32_t AbilityData::_internal_unique_id() const {
  return _impl_.unique_id_;
}
inline int32_t AbilityData::unique_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.unique_id)
  return _internal_unique_id();
}
inline void AbilityData::_internal_set_unique_id(int32_t value) {
  
  _impl_.unique_id_ = value;
}
inline void AbilityData::set_unique_id(int32_t value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.unique_id)
}

// int32 study_grade = 6;
inline void AbilityData::clear_study_grade() {
  _impl_.study_grade_ = 0;
}
inline int32_t AbilityData::_internal_study_grade() const {
  return _impl_.study_grade_;
}
inline int32_t AbilityData::study_grade() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.study_grade)
  return _internal_study_grade();
}
inline void AbilityData::_internal_set_study_grade(int32_t value) {
  
  _impl_.study_grade_ = value;
}
inline void AbilityData::set_study_grade(int32_t value) {
  _internal_set_study_grade(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.study_grade)
}

// float cooldown = 100;
inline void AbilityData::clear_cooldown() {
  _impl_.cooldown_ = 0;
}
inline float AbilityData::_internal_cooldown() const {
  return _impl_.cooldown_;
}
inline float AbilityData::cooldown() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.cooldown)
  return _internal_cooldown();
}
inline void AbilityData::_internal_set_cooldown(float value) {
  
  _impl_.cooldown_ = value;
}
inline void AbilityData::set_cooldown(float value) {
  _internal_set_cooldown(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.cooldown)
}

// float target_num = 101;
inline void AbilityData::clear_target_num() {
  _impl_.target_num_ = 0;
}
inline float AbilityData::_internal_target_num() const {
  return _impl_.target_num_;
}
inline float AbilityData::target_num() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.target_num)
  return _internal_target_num();
}
inline void AbilityData::_internal_set_target_num(float value) {
  
  _impl_.target_num_ = value;
}
inline void AbilityData::set_target_num(float value) {
  _internal_set_target_num(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.target_num)
}

// float target_distance = 102;
inline void AbilityData::clear_target_distance() {
  _impl_.target_distance_ = 0;
}
inline float AbilityData::_internal_target_distance() const {
  return _impl_.target_distance_;
}
inline float AbilityData::target_distance() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.target_distance)
  return _internal_target_distance();
}
inline void AbilityData::_internal_set_target_distance(float value) {
  
  _impl_.target_distance_ = value;
}
inline void AbilityData::set_target_distance(float value) {
  _internal_set_target_distance(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.target_distance)
}

// float target_catchdistance = 103;
inline void AbilityData::clear_target_catchdistance() {
  _impl_.target_catchdistance_ = 0;
}
inline float AbilityData::_internal_target_catchdistance() const {
  return _impl_.target_catchdistance_;
}
inline float AbilityData::target_catchdistance() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.target_catchdistance)
  return _internal_target_catchdistance();
}
inline void AbilityData::_internal_set_target_catchdistance(float value) {
  
  _impl_.target_catchdistance_ = value;
}
inline void AbilityData::set_target_catchdistance(float value) {
  _internal_set_target_catchdistance(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.target_catchdistance)
}

// float attack_count = 104;
inline void AbilityData::clear_attack_count() {
  _impl_.attack_count_ = 0;
}
inline float AbilityData::_internal_attack_count() const {
  return _impl_.attack_count_;
}
inline float AbilityData::attack_count() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.attack_count)
  return _internal_attack_count();
}
inline void AbilityData::_internal_set_attack_count(float value) {
  
  _impl_.attack_count_ = value;
}
inline void AbilityData::set_attack_count(float value) {
  _internal_set_attack_count(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.attack_count)
}

// float phy_coefficient = 105;
inline void AbilityData::clear_phy_coefficient() {
  _impl_.phy_coefficient_ = 0;
}
inline float AbilityData::_internal_phy_coefficient() const {
  return _impl_.phy_coefficient_;
}
inline float AbilityData::phy_coefficient() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.phy_coefficient)
  return _internal_phy_coefficient();
}
inline void AbilityData::_internal_set_phy_coefficient(float value) {
  
  _impl_.phy_coefficient_ = value;
}
inline void AbilityData::set_phy_coefficient(float value) {
  _internal_set_phy_coefficient(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.phy_coefficient)
}

// float phy_damage = 106;
inline void AbilityData::clear_phy_damage() {
  _impl_.phy_damage_ = 0;
}
inline float AbilityData::_internal_phy_damage() const {
  return _impl_.phy_damage_;
}
inline float AbilityData::phy_damage() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.phy_damage)
  return _internal_phy_damage();
}
inline void AbilityData::_internal_set_phy_damage(float value) {
  
  _impl_.phy_damage_ = value;
}
inline void AbilityData::set_phy_damage(float value) {
  _internal_set_phy_damage(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.phy_damage)
}

// float mana_coefficient = 107;
inline void AbilityData::clear_mana_coefficient() {
  _impl_.mana_coefficient_ = 0;
}
inline float AbilityData::_internal_mana_coefficient() const {
  return _impl_.mana_coefficient_;
}
inline float AbilityData::mana_coefficient() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.mana_coefficient)
  return _internal_mana_coefficient();
}
inline void AbilityData::_internal_set_mana_coefficient(float value) {
  
  _impl_.mana_coefficient_ = value;
}
inline void AbilityData::set_mana_coefficient(float value) {
  _internal_set_mana_coefficient(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.mana_coefficient)
}

// float mana_damage = 108;
inline void AbilityData::clear_mana_damage() {
  _impl_.mana_damage_ = 0;
}
inline float AbilityData::_internal_mana_damage() const {
  return _impl_.mana_damage_;
}
inline float AbilityData::mana_damage() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.mana_damage)
  return _internal_mana_damage();
}
inline void AbilityData::_internal_set_mana_damage(float value) {
  
  _impl_.mana_damage_ = value;
}
inline void AbilityData::set_mana_damage(float value) {
  _internal_set_mana_damage(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.mana_damage)
}

// int64 item_id = 109;
inline void AbilityData::clear_item_id() {
  _impl_.item_id_ = int64_t{0};
}
inline int64_t AbilityData::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int64_t AbilityData::item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.item_id)
  return _internal_item_id();
}
inline void AbilityData::_internal_set_item_id(int64_t value) {
  
  _impl_.item_id_ = value;
}
inline void AbilityData::set_item_id(int64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.item_id)
}

// float item_maxdamage = 110;
inline void AbilityData::clear_item_maxdamage() {
  _impl_.item_maxdamage_ = 0;
}
inline float AbilityData::_internal_item_maxdamage() const {
  return _impl_.item_maxdamage_;
}
inline float AbilityData::item_maxdamage() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.item_maxdamage)
  return _internal_item_maxdamage();
}
inline void AbilityData::_internal_set_item_maxdamage(float value) {
  
  _impl_.item_maxdamage_ = value;
}
inline void AbilityData::set_item_maxdamage(float value) {
  _internal_set_item_maxdamage(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.item_maxdamage)
}

// int32 item_cfgid = 111;
inline void AbilityData::clear_item_cfgid() {
  _impl_.item_cfgid_ = 0;
}
inline int32_t AbilityData::_internal_item_cfgid() const {
  return _impl_.item_cfgid_;
}
inline int32_t AbilityData::item_cfgid() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.item_cfgid)
  return _internal_item_cfgid();
}
inline void AbilityData::_internal_set_item_cfgid(int32_t value) {
  
  _impl_.item_cfgid_ = value;
}
inline void AbilityData::set_item_cfgid(int32_t value) {
  _internal_set_item_cfgid(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityData.item_cfgid)
}

// repeated .idlepb.AbilityEffectDefData effect_defs = 200;
inline int AbilityData::_internal_effect_defs_size() const {
  return _impl_.effect_defs_.size();
}
inline int AbilityData::effect_defs_size() const {
  return _internal_effect_defs_size();
}
inline void AbilityData::clear_effect_defs() {
  _impl_.effect_defs_.Clear();
}
inline ::idlepb::AbilityEffectDefData* AbilityData::mutable_effect_defs(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.AbilityData.effect_defs)
  return _impl_.effect_defs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectDefData >*
AbilityData::mutable_effect_defs() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.AbilityData.effect_defs)
  return &_impl_.effect_defs_;
}
inline const ::idlepb::AbilityEffectDefData& AbilityData::_internal_effect_defs(int index) const {
  return _impl_.effect_defs_.Get(index);
}
inline const ::idlepb::AbilityEffectDefData& AbilityData::effect_defs(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityData.effect_defs)
  return _internal_effect_defs(index);
}
inline ::idlepb::AbilityEffectDefData* AbilityData::_internal_add_effect_defs() {
  return _impl_.effect_defs_.Add();
}
inline ::idlepb::AbilityEffectDefData* AbilityData::add_effect_defs() {
  ::idlepb::AbilityEffectDefData* _add = _internal_add_effect_defs();
  // @@protoc_insertion_point(field_add:idlepb.AbilityData.effect_defs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityEffectDefData >&
AbilityData::effect_defs() const {
  // @@protoc_insertion_point(field_list:idlepb.AbilityData.effect_defs)
  return _impl_.effect_defs_;
}

// -------------------------------------------------------------------

// PlayerAbilityData

// repeated .idlepb.AbilityData abilities = 1;
inline int PlayerAbilityData::_internal_abilities_size() const {
  return _impl_.abilities_.size();
}
inline int PlayerAbilityData::abilities_size() const {
  return _internal_abilities_size();
}
inline void PlayerAbilityData::clear_abilities() {
  _impl_.abilities_.Clear();
}
inline ::idlepb::AbilityData* PlayerAbilityData::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerAbilityData.abilities)
  return _impl_.abilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityData >*
PlayerAbilityData::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.PlayerAbilityData.abilities)
  return &_impl_.abilities_;
}
inline const ::idlepb::AbilityData& PlayerAbilityData::_internal_abilities(int index) const {
  return _impl_.abilities_.Get(index);
}
inline const ::idlepb::AbilityData& PlayerAbilityData::abilities(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerAbilityData.abilities)
  return _internal_abilities(index);
}
inline ::idlepb::AbilityData* PlayerAbilityData::_internal_add_abilities() {
  return _impl_.abilities_.Add();
}
inline ::idlepb::AbilityData* PlayerAbilityData::add_abilities() {
  ::idlepb::AbilityData* _add = _internal_add_abilities();
  // @@protoc_insertion_point(field_add:idlepb.PlayerAbilityData.abilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityData >&
PlayerAbilityData::abilities() const {
  // @@protoc_insertion_point(field_list:idlepb.PlayerAbilityData.abilities)
  return _impl_.abilities_;
}

// repeated .idlepb.MapValueInt32 slotted_abilites = 2;
inline int PlayerAbilityData::_internal_slotted_abilites_size() const {
  return _impl_.slotted_abilites_.size();
}
inline int PlayerAbilityData::slotted_abilites_size() const {
  return _internal_slotted_abilites_size();
}
inline void PlayerAbilityData::clear_slotted_abilites() {
  _impl_.slotted_abilites_.Clear();
}
inline ::idlepb::MapValueInt32* PlayerAbilityData::mutable_slotted_abilites(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerAbilityData.slotted_abilites)
  return _impl_.slotted_abilites_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >*
PlayerAbilityData::mutable_slotted_abilites() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.PlayerAbilityData.slotted_abilites)
  return &_impl_.slotted_abilites_;
}
inline const ::idlepb::MapValueInt32& PlayerAbilityData::_internal_slotted_abilites(int index) const {
  return _impl_.slotted_abilites_.Get(index);
}
inline const ::idlepb::MapValueInt32& PlayerAbilityData::slotted_abilites(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerAbilityData.slotted_abilites)
  return _internal_slotted_abilites(index);
}
inline ::idlepb::MapValueInt32* PlayerAbilityData::_internal_add_slotted_abilites() {
  return _impl_.slotted_abilites_.Add();
}
inline ::idlepb::MapValueInt32* PlayerAbilityData::add_slotted_abilites() {
  ::idlepb::MapValueInt32* _add = _internal_add_slotted_abilites();
  // @@protoc_insertion_point(field_add:idlepb.PlayerAbilityData.slotted_abilites)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >&
PlayerAbilityData::slotted_abilites() const {
  // @@protoc_insertion_point(field_list:idlepb.PlayerAbilityData.slotted_abilites)
  return _impl_.slotted_abilites_;
}

// repeated int32 active_queue = 3;
inline int PlayerAbilityData::_internal_active_queue_size() const {
  return _impl_.active_queue_.size();
}
inline int PlayerAbilityData::active_queue_size() const {
  return _internal_active_queue_size();
}
inline void PlayerAbilityData::clear_active_queue() {
  _impl_.active_queue_.Clear();
}
inline int32_t PlayerAbilityData::_internal_active_queue(int index) const {
  return _impl_.active_queue_.Get(index);
}
inline int32_t PlayerAbilityData::active_queue(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerAbilityData.active_queue)
  return _internal_active_queue(index);
}
inline void PlayerAbilityData::set_active_queue(int index, int32_t value) {
  _impl_.active_queue_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerAbilityData.active_queue)
}
inline void PlayerAbilityData::_internal_add_active_queue(int32_t value) {
  _impl_.active_queue_.Add(value);
}
inline void PlayerAbilityData::add_active_queue(int32_t value) {
  _internal_add_active_queue(value);
  // @@protoc_insertion_point(field_add:idlepb.PlayerAbilityData.active_queue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PlayerAbilityData::_internal_active_queue() const {
  return _impl_.active_queue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PlayerAbilityData::active_queue() const {
  // @@protoc_insertion_point(field_list:idlepb.PlayerAbilityData.active_queue)
  return _internal_active_queue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PlayerAbilityData::_internal_mutable_active_queue() {
  return &_impl_.active_queue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PlayerAbilityData::mutable_active_queue() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.PlayerAbilityData.active_queue)
  return _internal_mutable_active_queue();
}

// bool is_shiled_first = 4;
inline void PlayerAbilityData::clear_is_shiled_first() {
  _impl_.is_shiled_first_ = false;
}
inline bool PlayerAbilityData::_internal_is_shiled_first() const {
  return _impl_.is_shiled_first_;
}
inline bool PlayerAbilityData::is_shiled_first() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerAbilityData.is_shiled_first)
  return _internal_is_shiled_first();
}
inline void PlayerAbilityData::_internal_set_is_shiled_first(bool value) {
  
  _impl_.is_shiled_first_ = value;
}
inline void PlayerAbilityData::set_is_shiled_first(bool value) {
  _internal_set_is_shiled_first(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerAbilityData.is_shiled_first)
}

// int64 revert_all_skill_cooldown = 5;
inline void PlayerAbilityData::clear_revert_all_skill_cooldown() {
  _impl_.revert_all_skill_cooldown_ = int64_t{0};
}
inline int64_t PlayerAbilityData::_internal_revert_all_skill_cooldown() const {
  return _impl_.revert_all_skill_cooldown_;
}
inline int64_t PlayerAbilityData::revert_all_skill_cooldown() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerAbilityData.revert_all_skill_cooldown)
  return _internal_revert_all_skill_cooldown();
}
inline void PlayerAbilityData::_internal_set_revert_all_skill_cooldown(int64_t value) {
  
  _impl_.revert_all_skill_cooldown_ = value;
}
inline void PlayerAbilityData::set_revert_all_skill_cooldown(int64_t value) {
  _internal_set_revert_all_skill_cooldown(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerAbilityData.revert_all_skill_cooldown)
}

// -------------------------------------------------------------------

// RoleZasData

// int32 zas_version = 1;
inline void RoleZasData::clear_zas_version() {
  _impl_.zas_version_ = 0;
}
inline int32_t RoleZasData::_internal_zas_version() const {
  return _impl_.zas_version_;
}
inline int32_t RoleZasData::zas_version() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleZasData.zas_version)
  return _internal_zas_version();
}
inline void RoleZasData::_internal_set_zas_version(int32_t value) {
  
  _impl_.zas_version_ = value;
}
inline void RoleZasData::set_zas_version(int32_t value) {
  _internal_set_zas_version(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleZasData.zas_version)
}

// .idlepb.PlayerAbilityData zas_ability = 2;
inline bool RoleZasData::_internal_has_zas_ability() const {
  return this != internal_default_instance() && _impl_.zas_ability_ != nullptr;
}
inline bool RoleZasData::has_zas_ability() const {
  return _internal_has_zas_ability();
}
inline void RoleZasData::clear_zas_ability() {
  if (GetArenaForAllocation() == nullptr && _impl_.zas_ability_ != nullptr) {
    delete _impl_.zas_ability_;
  }
  _impl_.zas_ability_ = nullptr;
}
inline const ::idlepb::PlayerAbilityData& RoleZasData::_internal_zas_ability() const {
  const ::idlepb::PlayerAbilityData* p = _impl_.zas_ability_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerAbilityData&>(
      ::idlepb::_PlayerAbilityData_default_instance_);
}
inline const ::idlepb::PlayerAbilityData& RoleZasData::zas_ability() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleZasData.zas_ability)
  return _internal_zas_ability();
}
inline void RoleZasData::unsafe_arena_set_allocated_zas_ability(
    ::idlepb::PlayerAbilityData* zas_ability) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zas_ability_);
  }
  _impl_.zas_ability_ = zas_ability;
  if (zas_ability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleZasData.zas_ability)
}
inline ::idlepb::PlayerAbilityData* RoleZasData::release_zas_ability() {
  
  ::idlepb::PlayerAbilityData* temp = _impl_.zas_ability_;
  _impl_.zas_ability_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerAbilityData* RoleZasData::unsafe_arena_release_zas_ability() {
  // @@protoc_insertion_point(field_release:idlepb.RoleZasData.zas_ability)
  
  ::idlepb::PlayerAbilityData* temp = _impl_.zas_ability_;
  _impl_.zas_ability_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerAbilityData* RoleZasData::_internal_mutable_zas_ability() {
  
  if (_impl_.zas_ability_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerAbilityData>(GetArenaForAllocation());
    _impl_.zas_ability_ = p;
  }
  return _impl_.zas_ability_;
}
inline ::idlepb::PlayerAbilityData* RoleZasData::mutable_zas_ability() {
  ::idlepb::PlayerAbilityData* _msg = _internal_mutable_zas_ability();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleZasData.zas_ability)
  return _msg;
}
inline void RoleZasData::set_allocated_zas_ability(::idlepb::PlayerAbilityData* zas_ability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zas_ability_;
  }
  if (zas_ability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zas_ability);
    if (message_arena != submessage_arena) {
      zas_ability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zas_ability, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.zas_ability_ = zas_ability;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleZasData.zas_ability)
}

// int32 shentong_upgrade_point_use_num = 11;
inline void RoleZasData::clear_shentong_upgrade_point_use_num() {
  _impl_.shentong_upgrade_point_use_num_ = 0;
}
inline int32_t RoleZasData::_internal_shentong_upgrade_point_use_num() const {
  return _impl_.shentong_upgrade_point_use_num_;
}
inline int32_t RoleZasData::shentong_upgrade_point_use_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleZasData.shentong_upgrade_point_use_num)
  return _internal_shentong_upgrade_point_use_num();
}
inline void RoleZasData::_internal_set_shentong_upgrade_point_use_num(int32_t value) {
  
  _impl_.shentong_upgrade_point_use_num_ = value;
}
inline void RoleZasData::set_shentong_upgrade_point_use_num(int32_t value) {
  _internal_set_shentong_upgrade_point_use_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleZasData.shentong_upgrade_point_use_num)
}

// -------------------------------------------------------------------

// AbilityPKResult

// uint64 instigator = 1;
inline void AbilityPKResult::clear_instigator() {
  _impl_.instigator_ = uint64_t{0u};
}
inline uint64_t AbilityPKResult::_internal_instigator() const {
  return _impl_.instigator_;
}
inline uint64_t AbilityPKResult::instigator() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.instigator)
  return _internal_instigator();
}
inline void AbilityPKResult::_internal_set_instigator(uint64_t value) {
  
  _impl_.instigator_ = value;
}
inline void AbilityPKResult::set_instigator(uint64_t value) {
  _internal_set_instigator(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.instigator)
}

// uint64 target = 2;
inline void AbilityPKResult::clear_target() {
  _impl_.target_ = uint64_t{0u};
}
inline uint64_t AbilityPKResult::_internal_target() const {
  return _impl_.target_;
}
inline uint64_t AbilityPKResult::target() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.target)
  return _internal_target();
}
inline void AbilityPKResult::_internal_set_target(uint64_t value) {
  
  _impl_.target_ = value;
}
inline void AbilityPKResult::set_target(uint64_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.target)
}

// float damage = 10;
inline void AbilityPKResult::clear_damage() {
  _impl_.damage_ = 0;
}
inline float AbilityPKResult::_internal_damage() const {
  return _impl_.damage_;
}
inline float AbilityPKResult::damage() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.damage)
  return _internal_damage();
}
inline void AbilityPKResult::_internal_set_damage(float value) {
  
  _impl_.damage_ = value;
}
inline void AbilityPKResult::set_damage(float value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.damage)
}

// float additional_damage = 11;
inline void AbilityPKResult::clear_additional_damage() {
  _impl_.additional_damage_ = 0;
}
inline float AbilityPKResult::_internal_additional_damage() const {
  return _impl_.additional_damage_;
}
inline float AbilityPKResult::additional_damage() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.additional_damage)
  return _internal_additional_damage();
}
inline void AbilityPKResult::_internal_set_additional_damage(float value) {
  
  _impl_.additional_damage_ = value;
}
inline void AbilityPKResult::set_additional_damage(float value) {
  _internal_set_additional_damage(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.additional_damage)
}

// bool is_hit = 12;
inline void AbilityPKResult::clear_is_hit() {
  _impl_.is_hit_ = false;
}
inline bool AbilityPKResult::_internal_is_hit() const {
  return _impl_.is_hit_;
}
inline bool AbilityPKResult::is_hit() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.is_hit)
  return _internal_is_hit();
}
inline void AbilityPKResult::_internal_set_is_hit(bool value) {
  
  _impl_.is_hit_ = value;
}
inline void AbilityPKResult::set_is_hit(bool value) {
  _internal_set_is_hit(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.is_hit)
}

// bool is_critical = 13;
inline void AbilityPKResult::clear_is_critical() {
  _impl_.is_critical_ = false;
}
inline bool AbilityPKResult::_internal_is_critical() const {
  return _impl_.is_critical_;
}
inline bool AbilityPKResult::is_critical() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.is_critical)
  return _internal_is_critical();
}
inline void AbilityPKResult::_internal_set_is_critical(bool value) {
  
  _impl_.is_critical_ = value;
}
inline void AbilityPKResult::set_is_critical(bool value) {
  _internal_set_is_critical(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.is_critical)
}

// bool is_countered = 14;
inline void AbilityPKResult::clear_is_countered() {
  _impl_.is_countered_ = false;
}
inline bool AbilityPKResult::_internal_is_countered() const {
  return _impl_.is_countered_;
}
inline bool AbilityPKResult::is_countered() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.is_countered)
  return _internal_is_countered();
}
inline void AbilityPKResult::_internal_set_is_countered(bool value) {
  
  _impl_.is_countered_ = value;
}
inline void AbilityPKResult::set_is_countered(bool value) {
  _internal_set_is_countered(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.is_countered)
}

// bool is_extremedamage = 15;
inline void AbilityPKResult::clear_is_extremedamage() {
  _impl_.is_extremedamage_ = false;
}
inline bool AbilityPKResult::_internal_is_extremedamage() const {
  return _impl_.is_extremedamage_;
}
inline bool AbilityPKResult::is_extremedamage() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.is_extremedamage)
  return _internal_is_extremedamage();
}
inline void AbilityPKResult::_internal_set_is_extremedamage(bool value) {
  
  _impl_.is_extremedamage_ = value;
}
inline void AbilityPKResult::set_is_extremedamage(bool value) {
  _internal_set_is_extremedamage(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.is_extremedamage)
}

// float countereddamage = 16;
inline void AbilityPKResult::clear_countereddamage() {
  _impl_.countereddamage_ = 0;
}
inline float AbilityPKResult::_internal_countereddamage() const {
  return _impl_.countereddamage_;
}
inline float AbilityPKResult::countereddamage() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.countereddamage)
  return _internal_countereddamage();
}
inline void AbilityPKResult::_internal_set_countereddamage(float value) {
  
  _impl_.countereddamage_ = value;
}
inline void AbilityPKResult::set_countereddamage(float value) {
  _internal_set_countereddamage(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.countereddamage)
}

// int32 currentattackcount = 17;
inline void AbilityPKResult::clear_currentattackcount() {
  _impl_.currentattackcount_ = 0;
}
inline int32_t AbilityPKResult::_internal_currentattackcount() const {
  return _impl_.currentattackcount_;
}
inline int32_t AbilityPKResult::currentattackcount() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.currentattackcount)
  return _internal_currentattackcount();
}
inline void AbilityPKResult::_internal_set_currentattackcount(int32_t value) {
  
  _impl_.currentattackcount_ = value;
}
inline void AbilityPKResult::set_currentattackcount(int32_t value) {
  _internal_set_currentattackcount(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.currentattackcount)
}

// float shield_suckdamage = 18;
inline void AbilityPKResult::clear_shield_suckdamage() {
  _impl_.shield_suckdamage_ = 0;
}
inline float AbilityPKResult::_internal_shield_suckdamage() const {
  return _impl_.shield_suckdamage_;
}
inline float AbilityPKResult::shield_suckdamage() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.shield_suckdamage)
  return _internal_shield_suckdamage();
}
inline void AbilityPKResult::_internal_set_shield_suckdamage(float value) {
  
  _impl_.shield_suckdamage_ = value;
}
inline void AbilityPKResult::set_shield_suckdamage(float value) {
  _internal_set_shield_suckdamage(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.shield_suckdamage)
}

// bool is_countered_critical = 19;
inline void AbilityPKResult::clear_is_countered_critical() {
  _impl_.is_countered_critical_ = false;
}
inline bool AbilityPKResult::_internal_is_countered_critical() const {
  return _impl_.is_countered_critical_;
}
inline bool AbilityPKResult::is_countered_critical() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.is_countered_critical)
  return _internal_is_countered_critical();
}
inline void AbilityPKResult::_internal_set_is_countered_critical(bool value) {
  
  _impl_.is_countered_critical_ = value;
}
inline void AbilityPKResult::set_is_countered_critical(bool value) {
  _internal_set_is_countered_critical(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.is_countered_critical)
}

// float countered_shield_suckdamage = 20;
inline void AbilityPKResult::clear_countered_shield_suckdamage() {
  _impl_.countered_shield_suckdamage_ = 0;
}
inline float AbilityPKResult::_internal_countered_shield_suckdamage() const {
  return _impl_.countered_shield_suckdamage_;
}
inline float AbilityPKResult::countered_shield_suckdamage() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityPKResult.countered_shield_suckdamage)
  return _internal_countered_shield_suckdamage();
}
inline void AbilityPKResult::_internal_set_countered_shield_suckdamage(float value) {
  
  _impl_.countered_shield_suckdamage_ = value;
}
inline void AbilityPKResult::set_countered_shield_suckdamage(float value) {
  _internal_set_countered_shield_suckdamage(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityPKResult.countered_shield_suckdamage)
}

// -------------------------------------------------------------------

// AbilityActiveResult

// uint64 eid = 1;
inline void AbilityActiveResult::clear_eid() {
  _impl_.eid_ = uint64_t{0u};
}
inline uint64_t AbilityActiveResult::_internal_eid() const {
  return _impl_.eid_;
}
inline uint64_t AbilityActiveResult::eid() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityActiveResult.eid)
  return _internal_eid();
}
inline void AbilityActiveResult::_internal_set_eid(uint64_t value) {
  
  _impl_.eid_ = value;
}
inline void AbilityActiveResult::set_eid(uint64_t value) {
  _internal_set_eid(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityActiveResult.eid)
}

// int32 ability = 2;
inline void AbilityActiveResult::clear_ability() {
  _impl_.ability_ = 0;
}
inline int32_t AbilityActiveResult::_internal_ability() const {
  return _impl_.ability_;
}
inline int32_t AbilityActiveResult::ability() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityActiveResult.ability)
  return _internal_ability();
}
inline void AbilityActiveResult::_internal_set_ability(int32_t value) {
  
  _impl_.ability_ = value;
}
inline void AbilityActiveResult::set_ability(int32_t value) {
  _internal_set_ability(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityActiveResult.ability)
}

// int32 ability_unique_id = 3;
inline void AbilityActiveResult::clear_ability_unique_id() {
  _impl_.ability_unique_id_ = 0;
}
inline int32_t AbilityActiveResult::_internal_ability_unique_id() const {
  return _impl_.ability_unique_id_;
}
inline int32_t AbilityActiveResult::ability_unique_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityActiveResult.ability_unique_id)
  return _internal_ability_unique_id();
}
inline void AbilityActiveResult::_internal_set_ability_unique_id(int32_t value) {
  
  _impl_.ability_unique_id_ = value;
}
inline void AbilityActiveResult::set_ability_unique_id(int32_t value) {
  _internal_set_ability_unique_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityActiveResult.ability_unique_id)
}

// .idlepb.AbilityActiveErrorCode error = 4;
inline void AbilityActiveResult::clear_error() {
  _impl_.error_ = 0;
}
inline ::idlepb::AbilityActiveErrorCode AbilityActiveResult::_internal_error() const {
  return static_cast< ::idlepb::AbilityActiveErrorCode >(_impl_.error_);
}
inline ::idlepb::AbilityActiveErrorCode AbilityActiveResult::error() const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityActiveResult.error)
  return _internal_error();
}
inline void AbilityActiveResult::_internal_set_error(::idlepb::AbilityActiveErrorCode value) {
  
  _impl_.error_ = value;
}
inline void AbilityActiveResult::set_error(::idlepb::AbilityActiveErrorCode value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityActiveResult.error)
}

// repeated .idlepb.AbilityPKResult results = 5;
inline int AbilityActiveResult::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int AbilityActiveResult::results_size() const {
  return _internal_results_size();
}
inline void AbilityActiveResult::clear_results() {
  _impl_.results_.Clear();
}
inline ::idlepb::AbilityPKResult* AbilityActiveResult::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.AbilityActiveResult.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityPKResult >*
AbilityActiveResult::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.AbilityActiveResult.results)
  return &_impl_.results_;
}
inline const ::idlepb::AbilityPKResult& AbilityActiveResult::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::idlepb::AbilityPKResult& AbilityActiveResult::results(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityActiveResult.results)
  return _internal_results(index);
}
inline ::idlepb::AbilityPKResult* AbilityActiveResult::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::idlepb::AbilityPKResult* AbilityActiveResult::add_results() {
  ::idlepb::AbilityPKResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:idlepb.AbilityActiveResult.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AbilityPKResult >&
AbilityActiveResult::results() const {
  // @@protoc_insertion_point(field_list:idlepb.AbilityActiveResult.results)
  return _impl_.results_;
}

// repeated int32 effects = 6;
inline int AbilityActiveResult::_internal_effects_size() const {
  return _impl_.effects_.size();
}
inline int AbilityActiveResult::effects_size() const {
  return _internal_effects_size();
}
inline void AbilityActiveResult::clear_effects() {
  _impl_.effects_.Clear();
}
inline int32_t AbilityActiveResult::_internal_effects(int index) const {
  return _impl_.effects_.Get(index);
}
inline int32_t AbilityActiveResult::effects(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.AbilityActiveResult.effects)
  return _internal_effects(index);
}
inline void AbilityActiveResult::set_effects(int index, int32_t value) {
  _impl_.effects_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.AbilityActiveResult.effects)
}
inline void AbilityActiveResult::_internal_add_effects(int32_t value) {
  _impl_.effects_.Add(value);
}
inline void AbilityActiveResult::add_effects(int32_t value) {
  _internal_add_effects(value);
  // @@protoc_insertion_point(field_add:idlepb.AbilityActiveResult.effects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AbilityActiveResult::_internal_effects() const {
  return _impl_.effects_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AbilityActiveResult::effects() const {
  // @@protoc_insertion_point(field_list:idlepb.AbilityActiveResult.effects)
  return _internal_effects();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AbilityActiveResult::_internal_mutable_effects() {
  return &_impl_.effects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AbilityActiveResult::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.AbilityActiveResult.effects)
  return _internal_mutable_effects();
}

// -------------------------------------------------------------------

// ShanhetuItem

// int32 item_id = 1;
inline void ShanhetuItem::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t ShanhetuItem::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t ShanhetuItem::item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuItem.item_id)
  return _internal_item_id();
}
inline void ShanhetuItem::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void ShanhetuItem::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuItem.item_id)
}

// int32 num = 2;
inline void ShanhetuItem::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t ShanhetuItem::_internal_num() const {
  return _impl_.num_;
}
inline int32_t ShanhetuItem::num() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuItem.num)
  return _internal_num();
}
inline void ShanhetuItem::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void ShanhetuItem::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuItem.num)
}

// int32 weight = 3;
inline void ShanhetuItem::clear_weight() {
  _impl_.weight_ = 0;
}
inline int32_t ShanhetuItem::_internal_weight() const {
  return _impl_.weight_;
}
inline int32_t ShanhetuItem::weight() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuItem.weight)
  return _internal_weight();
}
inline void ShanhetuItem::_internal_set_weight(int32_t value) {
  
  _impl_.weight_ = value;
}
inline void ShanhetuItem::set_weight(int32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuItem.weight)
}

// int32 score = 4;
inline void ShanhetuItem::clear_score() {
  _impl_.score_ = 0;
}
inline int32_t ShanhetuItem::_internal_score() const {
  return _impl_.score_;
}
inline int32_t ShanhetuItem::score() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuItem.score)
  return _internal_score();
}
inline void ShanhetuItem::_internal_set_score(int32_t value) {
  
  _impl_.score_ = value;
}
inline void ShanhetuItem::set_score(int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuItem.score)
}

// -------------------------------------------------------------------

// ShanhetuRecord

// int64 uid = 1;
inline void ShanhetuRecord::clear_uid() {
  _impl_.uid_ = int64_t{0};
}
inline int64_t ShanhetuRecord::_internal_uid() const {
  return _impl_.uid_;
}
inline int64_t ShanhetuRecord::uid() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuRecord.uid)
  return _internal_uid();
}
inline void ShanhetuRecord::_internal_set_uid(int64_t value) {
  
  _impl_.uid_ = value;
}
inline void ShanhetuRecord::set_uid(int64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuRecord.uid)
}

// int32 item_id = 2;
inline void ShanhetuRecord::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t ShanhetuRecord::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t ShanhetuRecord::item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuRecord.item_id)
  return _internal_item_id();
}
inline void ShanhetuRecord::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void ShanhetuRecord::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuRecord.item_id)
}

// int32 scale_id = 3;
inline void ShanhetuRecord::clear_scale_id() {
  _impl_.scale_id_ = 0;
}
inline int32_t ShanhetuRecord::_internal_scale_id() const {
  return _impl_.scale_id_;
}
inline int32_t ShanhetuRecord::scale_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuRecord.scale_id)
  return _internal_scale_id();
}
inline void ShanhetuRecord::_internal_set_scale_id(int32_t value) {
  
  _impl_.scale_id_ = value;
}
inline void ShanhetuRecord::set_scale_id(int32_t value) {
  _internal_set_scale_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuRecord.scale_id)
}

// int32 score = 4;
inline void ShanhetuRecord::clear_score() {
  _impl_.score_ = 0;
}
inline int32_t ShanhetuRecord::_internal_score() const {
  return _impl_.score_;
}
inline int32_t ShanhetuRecord::score() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuRecord.score)
  return _internal_score();
}
inline void ShanhetuRecord::_internal_set_score(int32_t value) {
  
  _impl_.score_ = value;
}
inline void ShanhetuRecord::set_score(int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuRecord.score)
}

// repeated .idlepb.ShanhetuItem items = 5;
inline int ShanhetuRecord::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ShanhetuRecord::items_size() const {
  return _internal_items_size();
}
inline void ShanhetuRecord::clear_items() {
  _impl_.items_.Clear();
}
inline ::idlepb::ShanhetuItem* ShanhetuRecord::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.ShanhetuRecord.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuItem >*
ShanhetuRecord::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.ShanhetuRecord.items)
  return &_impl_.items_;
}
inline const ::idlepb::ShanhetuItem& ShanhetuRecord::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::idlepb::ShanhetuItem& ShanhetuRecord::items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuRecord.items)
  return _internal_items(index);
}
inline ::idlepb::ShanhetuItem* ShanhetuRecord::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::idlepb::ShanhetuItem* ShanhetuRecord::add_items() {
  ::idlepb::ShanhetuItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:idlepb.ShanhetuRecord.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuItem >&
ShanhetuRecord::items() const {
  // @@protoc_insertion_point(field_list:idlepb.ShanhetuRecord.items)
  return _impl_.items_;
}

// int64 use_time = 6;
inline void ShanhetuRecord::clear_use_time() {
  _impl_.use_time_ = int64_t{0};
}
inline int64_t ShanhetuRecord::_internal_use_time() const {
  return _impl_.use_time_;
}
inline int64_t ShanhetuRecord::use_time() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuRecord.use_time)
  return _internal_use_time();
}
inline void ShanhetuRecord::_internal_set_use_time(int64_t value) {
  
  _impl_.use_time_ = value;
}
inline void ShanhetuRecord::set_use_time(int64_t value) {
  _internal_set_use_time(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuRecord.use_time)
}

// -------------------------------------------------------------------

// ShanhetuBlock

// int32 type = 1;
inline void ShanhetuBlock::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t ShanhetuBlock::_internal_type() const {
  return _impl_.type_;
}
inline int32_t ShanhetuBlock::type() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuBlock.type)
  return _internal_type();
}
inline void ShanhetuBlock::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void ShanhetuBlock::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuBlock.type)
}

// int32 quality = 2;
inline void ShanhetuBlock::clear_quality() {
  _impl_.quality_ = 0;
}
inline int32_t ShanhetuBlock::_internal_quality() const {
  return _impl_.quality_;
}
inline int32_t ShanhetuBlock::quality() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuBlock.quality)
  return _internal_quality();
}
inline void ShanhetuBlock::_internal_set_quality(int32_t value) {
  
  _impl_.quality_ = value;
}
inline void ShanhetuBlock::set_quality(int32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuBlock.quality)
}

// .idlepb.ShanhetuItem item = 3;
inline bool ShanhetuBlock::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool ShanhetuBlock::has_item() const {
  return _internal_has_item();
}
inline void ShanhetuBlock::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
inline const ::idlepb::ShanhetuItem& ShanhetuBlock::_internal_item() const {
  const ::idlepb::ShanhetuItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ShanhetuItem&>(
      ::idlepb::_ShanhetuItem_default_instance_);
}
inline const ::idlepb::ShanhetuItem& ShanhetuBlock::item() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuBlock.item)
  return _internal_item();
}
inline void ShanhetuBlock::unsafe_arena_set_allocated_item(
    ::idlepb::ShanhetuItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.ShanhetuBlock.item)
}
inline ::idlepb::ShanhetuItem* ShanhetuBlock::release_item() {
  
  ::idlepb::ShanhetuItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ShanhetuItem* ShanhetuBlock::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:idlepb.ShanhetuBlock.item)
  
  ::idlepb::ShanhetuItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::idlepb::ShanhetuItem* ShanhetuBlock::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ShanhetuItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::idlepb::ShanhetuItem* ShanhetuBlock::mutable_item() {
  ::idlepb::ShanhetuItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:idlepb.ShanhetuBlock.item)
  return _msg;
}
inline void ShanhetuBlock::set_allocated_item(::idlepb::ShanhetuItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:idlepb.ShanhetuBlock.item)
}

// int32 event_cfg_id = 11;
inline void ShanhetuBlock::clear_event_cfg_id() {
  _impl_.event_cfg_id_ = 0;
}
inline int32_t ShanhetuBlock::_internal_event_cfg_id() const {
  return _impl_.event_cfg_id_;
}
inline int32_t ShanhetuBlock::event_cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuBlock.event_cfg_id)
  return _internal_event_cfg_id();
}
inline void ShanhetuBlock::_internal_set_event_cfg_id(int32_t value) {
  
  _impl_.event_cfg_id_ = value;
}
inline void ShanhetuBlock::set_event_cfg_id(int32_t value) {
  _internal_set_event_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuBlock.event_cfg_id)
}

// -------------------------------------------------------------------

// ShanhetuBlockRow

// repeated .idlepb.ShanhetuBlock blocks = 1;
inline int ShanhetuBlockRow::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int ShanhetuBlockRow::blocks_size() const {
  return _internal_blocks_size();
}
inline void ShanhetuBlockRow::clear_blocks() {
  _impl_.blocks_.Clear();
}
inline ::idlepb::ShanhetuBlock* ShanhetuBlockRow::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.ShanhetuBlockRow.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuBlock >*
ShanhetuBlockRow::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.ShanhetuBlockRow.blocks)
  return &_impl_.blocks_;
}
inline const ::idlepb::ShanhetuBlock& ShanhetuBlockRow::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const ::idlepb::ShanhetuBlock& ShanhetuBlockRow::blocks(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuBlockRow.blocks)
  return _internal_blocks(index);
}
inline ::idlepb::ShanhetuBlock* ShanhetuBlockRow::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline ::idlepb::ShanhetuBlock* ShanhetuBlockRow::add_blocks() {
  ::idlepb::ShanhetuBlock* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:idlepb.ShanhetuBlockRow.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuBlock >&
ShanhetuBlockRow::blocks() const {
  // @@protoc_insertion_point(field_list:idlepb.ShanhetuBlockRow.blocks)
  return _impl_.blocks_;
}

// -------------------------------------------------------------------

// ShanhetuMap

// bool done = 1;
inline void ShanhetuMap::clear_done() {
  _impl_.done_ = false;
}
inline bool ShanhetuMap::_internal_done() const {
  return _impl_.done_;
}
inline bool ShanhetuMap::done() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuMap.done)
  return _internal_done();
}
inline void ShanhetuMap::_internal_set_done(bool value) {
  
  _impl_.done_ = value;
}
inline void ShanhetuMap::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuMap.done)
}

// int32 current_row = 2;
inline void ShanhetuMap::clear_current_row() {
  _impl_.current_row_ = 0;
}
inline int32_t ShanhetuMap::_internal_current_row() const {
  return _impl_.current_row_;
}
inline int32_t ShanhetuMap::current_row() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuMap.current_row)
  return _internal_current_row();
}
inline void ShanhetuMap::_internal_set_current_row(int32_t value) {
  
  _impl_.current_row_ = value;
}
inline void ShanhetuMap::set_current_row(int32_t value) {
  _internal_set_current_row(value);
  // @@protoc_insertion_point(field_set:idlepb.ShanhetuMap.current_row)
}

// .idlepb.ShanhetuRecord record = 3;
inline bool ShanhetuMap::_internal_has_record() const {
  return this != internal_default_instance() && _impl_.record_ != nullptr;
}
inline bool ShanhetuMap::has_record() const {
  return _internal_has_record();
}
inline void ShanhetuMap::clear_record() {
  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
}
inline const ::idlepb::ShanhetuRecord& ShanhetuMap::_internal_record() const {
  const ::idlepb::ShanhetuRecord* p = _impl_.record_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ShanhetuRecord&>(
      ::idlepb::_ShanhetuRecord_default_instance_);
}
inline const ::idlepb::ShanhetuRecord& ShanhetuMap::record() const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuMap.record)
  return _internal_record();
}
inline void ShanhetuMap::unsafe_arena_set_allocated_record(
    ::idlepb::ShanhetuRecord* record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.record_);
  }
  _impl_.record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.ShanhetuMap.record)
}
inline ::idlepb::ShanhetuRecord* ShanhetuMap::release_record() {
  
  ::idlepb::ShanhetuRecord* temp = _impl_.record_;
  _impl_.record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ShanhetuRecord* ShanhetuMap::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:idlepb.ShanhetuMap.record)
  
  ::idlepb::ShanhetuRecord* temp = _impl_.record_;
  _impl_.record_ = nullptr;
  return temp;
}
inline ::idlepb::ShanhetuRecord* ShanhetuMap::_internal_mutable_record() {
  
  if (_impl_.record_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ShanhetuRecord>(GetArenaForAllocation());
    _impl_.record_ = p;
  }
  return _impl_.record_;
}
inline ::idlepb::ShanhetuRecord* ShanhetuMap::mutable_record() {
  ::idlepb::ShanhetuRecord* _msg = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:idlepb.ShanhetuMap.record)
  return _msg;
}
inline void ShanhetuMap::set_allocated_record(::idlepb::ShanhetuRecord* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.record_ = record;
  // @@protoc_insertion_point(field_set_allocated:idlepb.ShanhetuMap.record)
}

// repeated .idlepb.ShanhetuBlockRow map = 4;
inline int ShanhetuMap::_internal_map_size() const {
  return _impl_.map_.size();
}
inline int ShanhetuMap::map_size() const {
  return _internal_map_size();
}
inline void ShanhetuMap::clear_map() {
  _impl_.map_.Clear();
}
inline ::idlepb::ShanhetuBlockRow* ShanhetuMap::mutable_map(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.ShanhetuMap.map)
  return _impl_.map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuBlockRow >*
ShanhetuMap::mutable_map() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.ShanhetuMap.map)
  return &_impl_.map_;
}
inline const ::idlepb::ShanhetuBlockRow& ShanhetuMap::_internal_map(int index) const {
  return _impl_.map_.Get(index);
}
inline const ::idlepb::ShanhetuBlockRow& ShanhetuMap::map(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.ShanhetuMap.map)
  return _internal_map(index);
}
inline ::idlepb::ShanhetuBlockRow* ShanhetuMap::_internal_add_map() {
  return _impl_.map_.Add();
}
inline ::idlepb::ShanhetuBlockRow* ShanhetuMap::add_map() {
  ::idlepb::ShanhetuBlockRow* _add = _internal_add_map();
  // @@protoc_insertion_point(field_add:idlepb.ShanhetuMap.map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuBlockRow >&
ShanhetuMap::map() const {
  // @@protoc_insertion_point(field_list:idlepb.ShanhetuMap.map)
  return _impl_.map_;
}

// -------------------------------------------------------------------

// RoleShanhetuData

// bool auto_skip_green = 1;
inline void RoleShanhetuData::clear_auto_skip_green() {
  _impl_.auto_skip_green_ = false;
}
inline bool RoleShanhetuData::_internal_auto_skip_green() const {
  return _impl_.auto_skip_green_;
}
inline bool RoleShanhetuData::auto_skip_green() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShanhetuData.auto_skip_green)
  return _internal_auto_skip_green();
}
inline void RoleShanhetuData::_internal_set_auto_skip_green(bool value) {
  
  _impl_.auto_skip_green_ = value;
}
inline void RoleShanhetuData::set_auto_skip_green(bool value) {
  _internal_set_auto_skip_green(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShanhetuData.auto_skip_green)
}

// bool auto_skip_blue = 2;
inline void RoleShanhetuData::clear_auto_skip_blue() {
  _impl_.auto_skip_blue_ = false;
}
inline bool RoleShanhetuData::_internal_auto_skip_blue() const {
  return _impl_.auto_skip_blue_;
}
inline bool RoleShanhetuData::auto_skip_blue() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShanhetuData.auto_skip_blue)
  return _internal_auto_skip_blue();
}
inline void RoleShanhetuData::_internal_set_auto_skip_blue(bool value) {
  
  _impl_.auto_skip_blue_ = value;
}
inline void RoleShanhetuData::set_auto_skip_blue(bool value) {
  _internal_set_auto_skip_blue(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShanhetuData.auto_skip_blue)
}

// bool auto_skip_perpo = 3;
inline void RoleShanhetuData::clear_auto_skip_perpo() {
  _impl_.auto_skip_perpo_ = false;
}
inline bool RoleShanhetuData::_internal_auto_skip_perpo() const {
  return _impl_.auto_skip_perpo_;
}
inline bool RoleShanhetuData::auto_skip_perpo() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShanhetuData.auto_skip_perpo)
  return _internal_auto_skip_perpo();
}
inline void RoleShanhetuData::_internal_set_auto_skip_perpo(bool value) {
  
  _impl_.auto_skip_perpo_ = value;
}
inline void RoleShanhetuData::set_auto_skip_perpo(bool value) {
  _internal_set_auto_skip_perpo(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShanhetuData.auto_skip_perpo)
}

// bool auto_skip_gold = 4;
inline void RoleShanhetuData::clear_auto_skip_gold() {
  _impl_.auto_skip_gold_ = false;
}
inline bool RoleShanhetuData::_internal_auto_skip_gold() const {
  return _impl_.auto_skip_gold_;
}
inline bool RoleShanhetuData::auto_skip_gold() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShanhetuData.auto_skip_gold)
  return _internal_auto_skip_gold();
}
inline void RoleShanhetuData::_internal_set_auto_skip_gold(bool value) {
  
  _impl_.auto_skip_gold_ = value;
}
inline void RoleShanhetuData::set_auto_skip_gold(bool value) {
  _internal_set_auto_skip_gold(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShanhetuData.auto_skip_gold)
}

// bool auto_skip_red = 5;
inline void RoleShanhetuData::clear_auto_skip_red() {
  _impl_.auto_skip_red_ = false;
}
inline bool RoleShanhetuData::_internal_auto_skip_red() const {
  return _impl_.auto_skip_red_;
}
inline bool RoleShanhetuData::auto_skip_red() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShanhetuData.auto_skip_red)
  return _internal_auto_skip_red();
}
inline void RoleShanhetuData::_internal_set_auto_skip_red(bool value) {
  
  _impl_.auto_skip_red_ = value;
}
inline void RoleShanhetuData::set_auto_skip_red(bool value) {
  _internal_set_auto_skip_red(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShanhetuData.auto_skip_red)
}

// int32 auto_select = 6;
inline void RoleShanhetuData::clear_auto_select() {
  _impl_.auto_select_ = 0;
}
inline int32_t RoleShanhetuData::_internal_auto_select() const {
  return _impl_.auto_select_;
}
inline int32_t RoleShanhetuData::auto_select() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShanhetuData.auto_select)
  return _internal_auto_select();
}
inline void RoleShanhetuData::_internal_set_auto_select(int32_t value) {
  
  _impl_.auto_select_ = value;
}
inline void RoleShanhetuData::set_auto_select(int32_t value) {
  _internal_set_auto_select(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShanhetuData.auto_select)
}

// .idlepb.ShanhetuMap current_map = 7;
inline bool RoleShanhetuData::_internal_has_current_map() const {
  return this != internal_default_instance() && _impl_.current_map_ != nullptr;
}
inline bool RoleShanhetuData::has_current_map() const {
  return _internal_has_current_map();
}
inline void RoleShanhetuData::clear_current_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_map_ != nullptr) {
    delete _impl_.current_map_;
  }
  _impl_.current_map_ = nullptr;
}
inline const ::idlepb::ShanhetuMap& RoleShanhetuData::_internal_current_map() const {
  const ::idlepb::ShanhetuMap* p = _impl_.current_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ShanhetuMap&>(
      ::idlepb::_ShanhetuMap_default_instance_);
}
inline const ::idlepb::ShanhetuMap& RoleShanhetuData::current_map() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShanhetuData.current_map)
  return _internal_current_map();
}
inline void RoleShanhetuData::unsafe_arena_set_allocated_current_map(
    ::idlepb::ShanhetuMap* current_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_map_);
  }
  _impl_.current_map_ = current_map;
  if (current_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleShanhetuData.current_map)
}
inline ::idlepb::ShanhetuMap* RoleShanhetuData::release_current_map() {
  
  ::idlepb::ShanhetuMap* temp = _impl_.current_map_;
  _impl_.current_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ShanhetuMap* RoleShanhetuData::unsafe_arena_release_current_map() {
  // @@protoc_insertion_point(field_release:idlepb.RoleShanhetuData.current_map)
  
  ::idlepb::ShanhetuMap* temp = _impl_.current_map_;
  _impl_.current_map_ = nullptr;
  return temp;
}
inline ::idlepb::ShanhetuMap* RoleShanhetuData::_internal_mutable_current_map() {
  
  if (_impl_.current_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ShanhetuMap>(GetArenaForAllocation());
    _impl_.current_map_ = p;
  }
  return _impl_.current_map_;
}
inline ::idlepb::ShanhetuMap* RoleShanhetuData::mutable_current_map() {
  ::idlepb::ShanhetuMap* _msg = _internal_mutable_current_map();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleShanhetuData.current_map)
  return _msg;
}
inline void RoleShanhetuData::set_allocated_current_map(::idlepb::ShanhetuMap* current_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.current_map_;
  }
  if (current_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(current_map);
    if (message_arena != submessage_arena) {
      current_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_map, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.current_map_ = current_map;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleShanhetuData.current_map)
}

// int64 total_num = 8;
inline void RoleShanhetuData::clear_total_num() {
  _impl_.total_num_ = int64_t{0};
}
inline int64_t RoleShanhetuData::_internal_total_num() const {
  return _impl_.total_num_;
}
inline int64_t RoleShanhetuData::total_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShanhetuData.total_num)
  return _internal_total_num();
}
inline void RoleShanhetuData::_internal_set_total_num(int64_t value) {
  
  _impl_.total_num_ = value;
}
inline void RoleShanhetuData::set_total_num(int64_t value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShanhetuData.total_num)
}

// repeated .idlepb.ShanhetuRecord records = 9;
inline int RoleShanhetuData::_internal_records_size() const {
  return _impl_.records_.size();
}
inline int RoleShanhetuData::records_size() const {
  return _internal_records_size();
}
inline void RoleShanhetuData::clear_records() {
  _impl_.records_.Clear();
}
inline ::idlepb::ShanhetuRecord* RoleShanhetuData::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleShanhetuData.records)
  return _impl_.records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuRecord >*
RoleShanhetuData::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleShanhetuData.records)
  return &_impl_.records_;
}
inline const ::idlepb::ShanhetuRecord& RoleShanhetuData::_internal_records(int index) const {
  return _impl_.records_.Get(index);
}
inline const ::idlepb::ShanhetuRecord& RoleShanhetuData::records(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShanhetuData.records)
  return _internal_records(index);
}
inline ::idlepb::ShanhetuRecord* RoleShanhetuData::_internal_add_records() {
  return _impl_.records_.Add();
}
inline ::idlepb::ShanhetuRecord* RoleShanhetuData::add_records() {
  ::idlepb::ShanhetuRecord* _add = _internal_add_records();
  // @@protoc_insertion_point(field_add:idlepb.RoleShanhetuData.records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ShanhetuRecord >&
RoleShanhetuData::records() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleShanhetuData.records)
  return _impl_.records_;
}

// int64 last_update_date = 12;
inline void RoleShanhetuData::clear_last_update_date() {
  _impl_.last_update_date_ = int64_t{0};
}
inline int64_t RoleShanhetuData::_internal_last_update_date() const {
  return _impl_.last_update_date_;
}
inline int64_t RoleShanhetuData::last_update_date() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleShanhetuData.last_update_date)
  return _internal_last_update_date();
}
inline void RoleShanhetuData::_internal_set_last_update_date(int64_t value) {
  
  _impl_.last_update_date_ = value;
}
inline void RoleShanhetuData::set_last_update_date(int64_t value) {
  _internal_set_last_update_date(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleShanhetuData.last_update_date)
}

// -------------------------------------------------------------------

// RoleLeaderboardData

// int64 role_id = 1;
inline void RoleLeaderboardData::clear_role_id() {
  _impl_.role_id_ = int64_t{0};
}
inline int64_t RoleLeaderboardData::_internal_role_id() const {
  return _impl_.role_id_;
}
inline int64_t RoleLeaderboardData::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.role_id)
  return _internal_role_id();
}
inline void RoleLeaderboardData::_internal_set_role_id(int64_t value) {
  
  _impl_.role_id_ = value;
}
inline void RoleLeaderboardData::set_role_id(int64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleLeaderboardData.role_id)
}

// int32 blike_num = 2;
inline void RoleLeaderboardData::clear_blike_num() {
  _impl_.blike_num_ = 0;
}
inline int32_t RoleLeaderboardData::_internal_blike_num() const {
  return _impl_.blike_num_;
}
inline int32_t RoleLeaderboardData::blike_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.blike_num)
  return _internal_blike_num();
}
inline void RoleLeaderboardData::_internal_set_blike_num(int32_t value) {
  
  _impl_.blike_num_ = value;
}
inline void RoleLeaderboardData::set_blike_num(int32_t value) {
  _internal_set_blike_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleLeaderboardData.blike_num)
}

// int64 last_reset_time = 4;
inline void RoleLeaderboardData::clear_last_reset_time() {
  _impl_.last_reset_time_ = int64_t{0};
}
inline int64_t RoleLeaderboardData::_internal_last_reset_time() const {
  return _impl_.last_reset_time_;
}
inline int64_t RoleLeaderboardData::last_reset_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.last_reset_time)
  return _internal_last_reset_time();
}
inline void RoleLeaderboardData::_internal_set_last_reset_time(int64_t value) {
  
  _impl_.last_reset_time_ = value;
}
inline void RoleLeaderboardData::set_last_reset_time(int64_t value) {
  _internal_set_last_reset_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleLeaderboardData.last_reset_time)
}

// string rank_message = 5;
inline void RoleLeaderboardData::clear_rank_message() {
  _impl_.rank_message_.ClearToEmpty();
}
inline const std::string& RoleLeaderboardData::rank_message() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.rank_message)
  return _internal_rank_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLeaderboardData::set_rank_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rank_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.RoleLeaderboardData.rank_message)
}
inline std::string* RoleLeaderboardData::mutable_rank_message() {
  std::string* _s = _internal_mutable_rank_message();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleLeaderboardData.rank_message)
  return _s;
}
inline const std::string& RoleLeaderboardData::_internal_rank_message() const {
  return _impl_.rank_message_.Get();
}
inline void RoleLeaderboardData::_internal_set_rank_message(const std::string& value) {
  
  _impl_.rank_message_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleLeaderboardData::_internal_mutable_rank_message() {
  
  return _impl_.rank_message_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleLeaderboardData::release_rank_message() {
  // @@protoc_insertion_point(field_release:idlepb.RoleLeaderboardData.rank_message)
  return _impl_.rank_message_.Release();
}
inline void RoleLeaderboardData::set_allocated_rank_message(std::string* rank_message) {
  if (rank_message != nullptr) {
    
  } else {
    
  }
  _impl_.rank_message_.SetAllocated(rank_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rank_message_.IsDefault()) {
    _impl_.rank_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleLeaderboardData.rank_message)
}

// .idlepb.ItemData weapon = 6;
inline bool RoleLeaderboardData::_internal_has_weapon() const {
  return this != internal_default_instance() && _impl_.weapon_ != nullptr;
}
inline bool RoleLeaderboardData::has_weapon() const {
  return _internal_has_weapon();
}
inline void RoleLeaderboardData::clear_weapon() {
  if (GetArenaForAllocation() == nullptr && _impl_.weapon_ != nullptr) {
    delete _impl_.weapon_;
  }
  _impl_.weapon_ = nullptr;
}
inline const ::idlepb::ItemData& RoleLeaderboardData::_internal_weapon() const {
  const ::idlepb::ItemData* p = _impl_.weapon_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ItemData&>(
      ::idlepb::_ItemData_default_instance_);
}
inline const ::idlepb::ItemData& RoleLeaderboardData::weapon() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.weapon)
  return _internal_weapon();
}
inline void RoleLeaderboardData::unsafe_arena_set_allocated_weapon(
    ::idlepb::ItemData* weapon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weapon_);
  }
  _impl_.weapon_ = weapon;
  if (weapon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleLeaderboardData.weapon)
}
inline ::idlepb::ItemData* RoleLeaderboardData::release_weapon() {
  
  ::idlepb::ItemData* temp = _impl_.weapon_;
  _impl_.weapon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ItemData* RoleLeaderboardData::unsafe_arena_release_weapon() {
  // @@protoc_insertion_point(field_release:idlepb.RoleLeaderboardData.weapon)
  
  ::idlepb::ItemData* temp = _impl_.weapon_;
  _impl_.weapon_ = nullptr;
  return temp;
}
inline ::idlepb::ItemData* RoleLeaderboardData::_internal_mutable_weapon() {
  
  if (_impl_.weapon_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ItemData>(GetArenaForAllocation());
    _impl_.weapon_ = p;
  }
  return _impl_.weapon_;
}
inline ::idlepb::ItemData* RoleLeaderboardData::mutable_weapon() {
  ::idlepb::ItemData* _msg = _internal_mutable_weapon();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleLeaderboardData.weapon)
  return _msg;
}
inline void RoleLeaderboardData::set_allocated_weapon(::idlepb::ItemData* weapon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weapon_;
  }
  if (weapon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weapon);
    if (message_arena != submessage_arena) {
      weapon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weapon, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weapon_ = weapon;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleLeaderboardData.weapon)
}

// .idlepb.ItemData ammor = 7;
inline bool RoleLeaderboardData::_internal_has_ammor() const {
  return this != internal_default_instance() && _impl_.ammor_ != nullptr;
}
inline bool RoleLeaderboardData::has_ammor() const {
  return _internal_has_ammor();
}
inline void RoleLeaderboardData::clear_ammor() {
  if (GetArenaForAllocation() == nullptr && _impl_.ammor_ != nullptr) {
    delete _impl_.ammor_;
  }
  _impl_.ammor_ = nullptr;
}
inline const ::idlepb::ItemData& RoleLeaderboardData::_internal_ammor() const {
  const ::idlepb::ItemData* p = _impl_.ammor_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ItemData&>(
      ::idlepb::_ItemData_default_instance_);
}
inline const ::idlepb::ItemData& RoleLeaderboardData::ammor() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.ammor)
  return _internal_ammor();
}
inline void RoleLeaderboardData::unsafe_arena_set_allocated_ammor(
    ::idlepb::ItemData* ammor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ammor_);
  }
  _impl_.ammor_ = ammor;
  if (ammor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleLeaderboardData.ammor)
}
inline ::idlepb::ItemData* RoleLeaderboardData::release_ammor() {
  
  ::idlepb::ItemData* temp = _impl_.ammor_;
  _impl_.ammor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ItemData* RoleLeaderboardData::unsafe_arena_release_ammor() {
  // @@protoc_insertion_point(field_release:idlepb.RoleLeaderboardData.ammor)
  
  ::idlepb::ItemData* temp = _impl_.ammor_;
  _impl_.ammor_ = nullptr;
  return temp;
}
inline ::idlepb::ItemData* RoleLeaderboardData::_internal_mutable_ammor() {
  
  if (_impl_.ammor_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ItemData>(GetArenaForAllocation());
    _impl_.ammor_ = p;
  }
  return _impl_.ammor_;
}
inline ::idlepb::ItemData* RoleLeaderboardData::mutable_ammor() {
  ::idlepb::ItemData* _msg = _internal_mutable_ammor();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleLeaderboardData.ammor)
  return _msg;
}
inline void RoleLeaderboardData::set_allocated_ammor(::idlepb::ItemData* ammor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ammor_;
  }
  if (ammor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ammor);
    if (message_arena != submessage_arena) {
      ammor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ammor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ammor_ = ammor;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleLeaderboardData.ammor)
}

// .idlepb.ItemData jewlery = 8;
inline bool RoleLeaderboardData::_internal_has_jewlery() const {
  return this != internal_default_instance() && _impl_.jewlery_ != nullptr;
}
inline bool RoleLeaderboardData::has_jewlery() const {
  return _internal_has_jewlery();
}
inline void RoleLeaderboardData::clear_jewlery() {
  if (GetArenaForAllocation() == nullptr && _impl_.jewlery_ != nullptr) {
    delete _impl_.jewlery_;
  }
  _impl_.jewlery_ = nullptr;
}
inline const ::idlepb::ItemData& RoleLeaderboardData::_internal_jewlery() const {
  const ::idlepb::ItemData* p = _impl_.jewlery_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ItemData&>(
      ::idlepb::_ItemData_default_instance_);
}
inline const ::idlepb::ItemData& RoleLeaderboardData::jewlery() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.jewlery)
  return _internal_jewlery();
}
inline void RoleLeaderboardData::unsafe_arena_set_allocated_jewlery(
    ::idlepb::ItemData* jewlery) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jewlery_);
  }
  _impl_.jewlery_ = jewlery;
  if (jewlery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleLeaderboardData.jewlery)
}
inline ::idlepb::ItemData* RoleLeaderboardData::release_jewlery() {
  
  ::idlepb::ItemData* temp = _impl_.jewlery_;
  _impl_.jewlery_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ItemData* RoleLeaderboardData::unsafe_arena_release_jewlery() {
  // @@protoc_insertion_point(field_release:idlepb.RoleLeaderboardData.jewlery)
  
  ::idlepb::ItemData* temp = _impl_.jewlery_;
  _impl_.jewlery_ = nullptr;
  return temp;
}
inline ::idlepb::ItemData* RoleLeaderboardData::_internal_mutable_jewlery() {
  
  if (_impl_.jewlery_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ItemData>(GetArenaForAllocation());
    _impl_.jewlery_ = p;
  }
  return _impl_.jewlery_;
}
inline ::idlepb::ItemData* RoleLeaderboardData::mutable_jewlery() {
  ::idlepb::ItemData* _msg = _internal_mutable_jewlery();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleLeaderboardData.jewlery)
  return _msg;
}
inline void RoleLeaderboardData::set_allocated_jewlery(::idlepb::ItemData* jewlery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.jewlery_;
  }
  if (jewlery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(jewlery);
    if (message_arena != submessage_arena) {
      jewlery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jewlery, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.jewlery_ = jewlery;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleLeaderboardData.jewlery)
}

// .idlepb.ItemData skill_weapon = 9;
inline bool RoleLeaderboardData::_internal_has_skill_weapon() const {
  return this != internal_default_instance() && _impl_.skill_weapon_ != nullptr;
}
inline bool RoleLeaderboardData::has_skill_weapon() const {
  return _internal_has_skill_weapon();
}
inline void RoleLeaderboardData::clear_skill_weapon() {
  if (GetArenaForAllocation() == nullptr && _impl_.skill_weapon_ != nullptr) {
    delete _impl_.skill_weapon_;
  }
  _impl_.skill_weapon_ = nullptr;
}
inline const ::idlepb::ItemData& RoleLeaderboardData::_internal_skill_weapon() const {
  const ::idlepb::ItemData* p = _impl_.skill_weapon_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ItemData&>(
      ::idlepb::_ItemData_default_instance_);
}
inline const ::idlepb::ItemData& RoleLeaderboardData::skill_weapon() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.skill_weapon)
  return _internal_skill_weapon();
}
inline void RoleLeaderboardData::unsafe_arena_set_allocated_skill_weapon(
    ::idlepb::ItemData* skill_weapon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skill_weapon_);
  }
  _impl_.skill_weapon_ = skill_weapon;
  if (skill_weapon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleLeaderboardData.skill_weapon)
}
inline ::idlepb::ItemData* RoleLeaderboardData::release_skill_weapon() {
  
  ::idlepb::ItemData* temp = _impl_.skill_weapon_;
  _impl_.skill_weapon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ItemData* RoleLeaderboardData::unsafe_arena_release_skill_weapon() {
  // @@protoc_insertion_point(field_release:idlepb.RoleLeaderboardData.skill_weapon)
  
  ::idlepb::ItemData* temp = _impl_.skill_weapon_;
  _impl_.skill_weapon_ = nullptr;
  return temp;
}
inline ::idlepb::ItemData* RoleLeaderboardData::_internal_mutable_skill_weapon() {
  
  if (_impl_.skill_weapon_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ItemData>(GetArenaForAllocation());
    _impl_.skill_weapon_ = p;
  }
  return _impl_.skill_weapon_;
}
inline ::idlepb::ItemData* RoleLeaderboardData::mutable_skill_weapon() {
  ::idlepb::ItemData* _msg = _internal_mutable_skill_weapon();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleLeaderboardData.skill_weapon)
  return _msg;
}
inline void RoleLeaderboardData::set_allocated_skill_weapon(::idlepb::ItemData* skill_weapon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.skill_weapon_;
  }
  if (skill_weapon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(skill_weapon);
    if (message_arena != submessage_arena) {
      skill_weapon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skill_weapon, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.skill_weapon_ = skill_weapon;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleLeaderboardData.skill_weapon)
}

// .idlepb.ShanhetuRecord shanhetu_history = 10;
inline bool RoleLeaderboardData::_internal_has_shanhetu_history() const {
  return this != internal_default_instance() && _impl_.shanhetu_history_ != nullptr;
}
inline bool RoleLeaderboardData::has_shanhetu_history() const {
  return _internal_has_shanhetu_history();
}
inline void RoleLeaderboardData::clear_shanhetu_history() {
  if (GetArenaForAllocation() == nullptr && _impl_.shanhetu_history_ != nullptr) {
    delete _impl_.shanhetu_history_;
  }
  _impl_.shanhetu_history_ = nullptr;
}
inline const ::idlepb::ShanhetuRecord& RoleLeaderboardData::_internal_shanhetu_history() const {
  const ::idlepb::ShanhetuRecord* p = _impl_.shanhetu_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ShanhetuRecord&>(
      ::idlepb::_ShanhetuRecord_default_instance_);
}
inline const ::idlepb::ShanhetuRecord& RoleLeaderboardData::shanhetu_history() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.shanhetu_history)
  return _internal_shanhetu_history();
}
inline void RoleLeaderboardData::unsafe_arena_set_allocated_shanhetu_history(
    ::idlepb::ShanhetuRecord* shanhetu_history) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shanhetu_history_);
  }
  _impl_.shanhetu_history_ = shanhetu_history;
  if (shanhetu_history) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleLeaderboardData.shanhetu_history)
}
inline ::idlepb::ShanhetuRecord* RoleLeaderboardData::release_shanhetu_history() {
  
  ::idlepb::ShanhetuRecord* temp = _impl_.shanhetu_history_;
  _impl_.shanhetu_history_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ShanhetuRecord* RoleLeaderboardData::unsafe_arena_release_shanhetu_history() {
  // @@protoc_insertion_point(field_release:idlepb.RoleLeaderboardData.shanhetu_history)
  
  ::idlepb::ShanhetuRecord* temp = _impl_.shanhetu_history_;
  _impl_.shanhetu_history_ = nullptr;
  return temp;
}
inline ::idlepb::ShanhetuRecord* RoleLeaderboardData::_internal_mutable_shanhetu_history() {
  
  if (_impl_.shanhetu_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ShanhetuRecord>(GetArenaForAllocation());
    _impl_.shanhetu_history_ = p;
  }
  return _impl_.shanhetu_history_;
}
inline ::idlepb::ShanhetuRecord* RoleLeaderboardData::mutable_shanhetu_history() {
  ::idlepb::ShanhetuRecord* _msg = _internal_mutable_shanhetu_history();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleLeaderboardData.shanhetu_history)
  return _msg;
}
inline void RoleLeaderboardData::set_allocated_shanhetu_history(::idlepb::ShanhetuRecord* shanhetu_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shanhetu_history_;
  }
  if (shanhetu_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shanhetu_history);
    if (message_arena != submessage_arena) {
      shanhetu_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shanhetu_history, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shanhetu_history_ = shanhetu_history;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleLeaderboardData.shanhetu_history)
}

// .idlepb.ShanhetuRecord shanhetu_week = 11;
inline bool RoleLeaderboardData::_internal_has_shanhetu_week() const {
  return this != internal_default_instance() && _impl_.shanhetu_week_ != nullptr;
}
inline bool RoleLeaderboardData::has_shanhetu_week() const {
  return _internal_has_shanhetu_week();
}
inline void RoleLeaderboardData::clear_shanhetu_week() {
  if (GetArenaForAllocation() == nullptr && _impl_.shanhetu_week_ != nullptr) {
    delete _impl_.shanhetu_week_;
  }
  _impl_.shanhetu_week_ = nullptr;
}
inline const ::idlepb::ShanhetuRecord& RoleLeaderboardData::_internal_shanhetu_week() const {
  const ::idlepb::ShanhetuRecord* p = _impl_.shanhetu_week_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ShanhetuRecord&>(
      ::idlepb::_ShanhetuRecord_default_instance_);
}
inline const ::idlepb::ShanhetuRecord& RoleLeaderboardData::shanhetu_week() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.shanhetu_week)
  return _internal_shanhetu_week();
}
inline void RoleLeaderboardData::unsafe_arena_set_allocated_shanhetu_week(
    ::idlepb::ShanhetuRecord* shanhetu_week) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shanhetu_week_);
  }
  _impl_.shanhetu_week_ = shanhetu_week;
  if (shanhetu_week) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleLeaderboardData.shanhetu_week)
}
inline ::idlepb::ShanhetuRecord* RoleLeaderboardData::release_shanhetu_week() {
  
  ::idlepb::ShanhetuRecord* temp = _impl_.shanhetu_week_;
  _impl_.shanhetu_week_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ShanhetuRecord* RoleLeaderboardData::unsafe_arena_release_shanhetu_week() {
  // @@protoc_insertion_point(field_release:idlepb.RoleLeaderboardData.shanhetu_week)
  
  ::idlepb::ShanhetuRecord* temp = _impl_.shanhetu_week_;
  _impl_.shanhetu_week_ = nullptr;
  return temp;
}
inline ::idlepb::ShanhetuRecord* RoleLeaderboardData::_internal_mutable_shanhetu_week() {
  
  if (_impl_.shanhetu_week_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ShanhetuRecord>(GetArenaForAllocation());
    _impl_.shanhetu_week_ = p;
  }
  return _impl_.shanhetu_week_;
}
inline ::idlepb::ShanhetuRecord* RoleLeaderboardData::mutable_shanhetu_week() {
  ::idlepb::ShanhetuRecord* _msg = _internal_mutable_shanhetu_week();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleLeaderboardData.shanhetu_week)
  return _msg;
}
inline void RoleLeaderboardData::set_allocated_shanhetu_week(::idlepb::ShanhetuRecord* shanhetu_week) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shanhetu_week_;
  }
  if (shanhetu_week) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shanhetu_week);
    if (message_arena != submessage_arena) {
      shanhetu_week = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shanhetu_week, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shanhetu_week_ = shanhetu_week;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleLeaderboardData.shanhetu_week)
}

// int32 monster_tower_blike_num = 22;
inline void RoleLeaderboardData::clear_monster_tower_blike_num() {
  _impl_.monster_tower_blike_num_ = 0;
}
inline int32_t RoleLeaderboardData::_internal_monster_tower_blike_num() const {
  return _impl_.monster_tower_blike_num_;
}
inline int32_t RoleLeaderboardData::monster_tower_blike_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.monster_tower_blike_num)
  return _internal_monster_tower_blike_num();
}
inline void RoleLeaderboardData::_internal_set_monster_tower_blike_num(int32_t value) {
  
  _impl_.monster_tower_blike_num_ = value;
}
inline void RoleLeaderboardData::set_monster_tower_blike_num(int32_t value) {
  _internal_set_monster_tower_blike_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleLeaderboardData.monster_tower_blike_num)
}

// repeated int32 has_received_challange_reward = 23;
inline int RoleLeaderboardData::_internal_has_received_challange_reward_size() const {
  return _impl_.has_received_challange_reward_.size();
}
inline int RoleLeaderboardData::has_received_challange_reward_size() const {
  return _internal_has_received_challange_reward_size();
}
inline void RoleLeaderboardData::clear_has_received_challange_reward() {
  _impl_.has_received_challange_reward_.Clear();
}
inline int32_t RoleLeaderboardData::_internal_has_received_challange_reward(int index) const {
  return _impl_.has_received_challange_reward_.Get(index);
}
inline int32_t RoleLeaderboardData::has_received_challange_reward(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.has_received_challange_reward)
  return _internal_has_received_challange_reward(index);
}
inline void RoleLeaderboardData::set_has_received_challange_reward(int index, int32_t value) {
  _impl_.has_received_challange_reward_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleLeaderboardData.has_received_challange_reward)
}
inline void RoleLeaderboardData::_internal_add_has_received_challange_reward(int32_t value) {
  _impl_.has_received_challange_reward_.Add(value);
}
inline void RoleLeaderboardData::add_has_received_challange_reward(int32_t value) {
  _internal_add_has_received_challange_reward(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleLeaderboardData.has_received_challange_reward)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleLeaderboardData::_internal_has_received_challange_reward() const {
  return _impl_.has_received_challange_reward_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleLeaderboardData::has_received_challange_reward() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleLeaderboardData.has_received_challange_reward)
  return _internal_has_received_challange_reward();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleLeaderboardData::_internal_mutable_has_received_challange_reward() {
  return &_impl_.has_received_challange_reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleLeaderboardData::mutable_has_received_challange_reward() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleLeaderboardData.has_received_challange_reward)
  return _internal_mutable_has_received_challange_reward();
}

// int32 fuze_rank = 24;
inline void RoleLeaderboardData::clear_fuze_rank() {
  _impl_.fuze_rank_ = 0;
}
inline int32_t RoleLeaderboardData::_internal_fuze_rank() const {
  return _impl_.fuze_rank_;
}
inline int32_t RoleLeaderboardData::fuze_rank() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.fuze_rank)
  return _internal_fuze_rank();
}
inline void RoleLeaderboardData::_internal_set_fuze_rank(int32_t value) {
  
  _impl_.fuze_rank_ = value;
}
inline void RoleLeaderboardData::set_fuze_rank(int32_t value) {
  _internal_set_fuze_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleLeaderboardData.fuze_rank)
}

// int32 fuze_days = 25;
inline void RoleLeaderboardData::clear_fuze_days() {
  _impl_.fuze_days_ = 0;
}
inline int32_t RoleLeaderboardData::_internal_fuze_days() const {
  return _impl_.fuze_days_;
}
inline int32_t RoleLeaderboardData::fuze_days() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.fuze_days)
  return _internal_fuze_days();
}
inline void RoleLeaderboardData::_internal_set_fuze_days(int32_t value) {
  
  _impl_.fuze_days_ = value;
}
inline void RoleLeaderboardData::set_fuze_days(int32_t value) {
  _internal_set_fuze_days(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleLeaderboardData.fuze_days)
}

// int64 fuze_exp = 26;
inline void RoleLeaderboardData::clear_fuze_exp() {
  _impl_.fuze_exp_ = int64_t{0};
}
inline int64_t RoleLeaderboardData::_internal_fuze_exp() const {
  return _impl_.fuze_exp_;
}
inline int64_t RoleLeaderboardData::fuze_exp() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.fuze_exp)
  return _internal_fuze_exp();
}
inline void RoleLeaderboardData::_internal_set_fuze_exp(int64_t value) {
  
  _impl_.fuze_exp_ = value;
}
inline void RoleLeaderboardData::set_fuze_exp(int64_t value) {
  _internal_set_fuze_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleLeaderboardData.fuze_exp)
}

// int32 fuze_leaderboard_rank = 27;
inline void RoleLeaderboardData::clear_fuze_leaderboard_rank() {
  _impl_.fuze_leaderboard_rank_ = 0;
}
inline int32_t RoleLeaderboardData::_internal_fuze_leaderboard_rank() const {
  return _impl_.fuze_leaderboard_rank_;
}
inline int32_t RoleLeaderboardData::fuze_leaderboard_rank() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLeaderboardData.fuze_leaderboard_rank)
  return _internal_fuze_leaderboard_rank();
}
inline void RoleLeaderboardData::_internal_set_fuze_leaderboard_rank(int32_t value) {
  
  _impl_.fuze_leaderboard_rank_ = value;
}
inline void RoleLeaderboardData::set_fuze_leaderboard_rank(int32_t value) {
  _internal_set_fuze_leaderboard_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleLeaderboardData.fuze_leaderboard_rank)
}

// -------------------------------------------------------------------

// RoleMonsterTowerData

// int32 last_floor = 1;
inline void RoleMonsterTowerData::clear_last_floor() {
  _impl_.last_floor_ = 0;
}
inline int32_t RoleMonsterTowerData::_internal_last_floor() const {
  return _impl_.last_floor_;
}
inline int32_t RoleMonsterTowerData::last_floor() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleMonsterTowerData.last_floor)
  return _internal_last_floor();
}
inline void RoleMonsterTowerData::_internal_set_last_floor(int32_t value) {
  
  _impl_.last_floor_ = value;
}
inline void RoleMonsterTowerData::set_last_floor(int32_t value) {
  _internal_set_last_floor(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleMonsterTowerData.last_floor)
}

// int64 idle_during_ticks = 2;
inline void RoleMonsterTowerData::clear_idle_during_ticks() {
  _impl_.idle_during_ticks_ = int64_t{0};
}
inline int64_t RoleMonsterTowerData::_internal_idle_during_ticks() const {
  return _impl_.idle_during_ticks_;
}
inline int64_t RoleMonsterTowerData::idle_during_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleMonsterTowerData.idle_during_ticks)
  return _internal_idle_during_ticks();
}
inline void RoleMonsterTowerData::_internal_set_idle_during_ticks(int64_t value) {
  
  _impl_.idle_during_ticks_ = value;
}
inline void RoleMonsterTowerData::set_idle_during_ticks(int64_t value) {
  _internal_set_idle_during_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleMonsterTowerData.idle_during_ticks)
}

// -------------------------------------------------------------------

// RoleDungeonKillAllData

// repeated int32 done_uid = 1;
inline int RoleDungeonKillAllData::_internal_done_uid_size() const {
  return _impl_.done_uid_.size();
}
inline int RoleDungeonKillAllData::done_uid_size() const {
  return _internal_done_uid_size();
}
inline void RoleDungeonKillAllData::clear_done_uid() {
  _impl_.done_uid_.Clear();
}
inline int32_t RoleDungeonKillAllData::_internal_done_uid(int index) const {
  return _impl_.done_uid_.Get(index);
}
inline int32_t RoleDungeonKillAllData::done_uid(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleDungeonKillAllData.done_uid)
  return _internal_done_uid(index);
}
inline void RoleDungeonKillAllData::set_done_uid(int index, int32_t value) {
  _impl_.done_uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleDungeonKillAllData.done_uid)
}
inline void RoleDungeonKillAllData::_internal_add_done_uid(int32_t value) {
  _impl_.done_uid_.Add(value);
}
inline void RoleDungeonKillAllData::add_done_uid(int32_t value) {
  _internal_add_done_uid(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleDungeonKillAllData.done_uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleDungeonKillAllData::_internal_done_uid() const {
  return _impl_.done_uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleDungeonKillAllData::done_uid() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleDungeonKillAllData.done_uid)
  return _internal_done_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleDungeonKillAllData::_internal_mutable_done_uid() {
  return &_impl_.done_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleDungeonKillAllData::mutable_done_uid() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleDungeonKillAllData.done_uid)
  return _internal_mutable_done_uid();
}

// -------------------------------------------------------------------

// RoleDungeonSurviveData

// repeated int32 done_uid = 1;
inline int RoleDungeonSurviveData::_internal_done_uid_size() const {
  return _impl_.done_uid_.size();
}
inline int RoleDungeonSurviveData::done_uid_size() const {
  return _internal_done_uid_size();
}
inline void RoleDungeonSurviveData::clear_done_uid() {
  _impl_.done_uid_.Clear();
}
inline int32_t RoleDungeonSurviveData::_internal_done_uid(int index) const {
  return _impl_.done_uid_.Get(index);
}
inline int32_t RoleDungeonSurviveData::done_uid(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleDungeonSurviveData.done_uid)
  return _internal_done_uid(index);
}
inline void RoleDungeonSurviveData::set_done_uid(int index, int32_t value) {
  _impl_.done_uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleDungeonSurviveData.done_uid)
}
inline void RoleDungeonSurviveData::_internal_add_done_uid(int32_t value) {
  _impl_.done_uid_.Add(value);
}
inline void RoleDungeonSurviveData::add_done_uid(int32_t value) {
  _internal_add_done_uid(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleDungeonSurviveData.done_uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleDungeonSurviveData::_internal_done_uid() const {
  return _impl_.done_uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleDungeonSurviveData::done_uid() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleDungeonSurviveData.done_uid)
  return _internal_done_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleDungeonSurviveData::_internal_mutable_done_uid() {
  return &_impl_.done_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleDungeonSurviveData::mutable_done_uid() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleDungeonSurviveData.done_uid)
  return _internal_mutable_done_uid();
}

// -------------------------------------------------------------------

// BossInvasionRewardEntry

// int64 unique_id = 1;
inline void BossInvasionRewardEntry::clear_unique_id() {
  _impl_.unique_id_ = int64_t{0};
}
inline int64_t BossInvasionRewardEntry::_internal_unique_id() const {
  return _impl_.unique_id_;
}
inline int64_t BossInvasionRewardEntry::unique_id() const {
  // @@protoc_insertion_point(field_get:idlepb.BossInvasionRewardEntry.unique_id)
  return _internal_unique_id();
}
inline void BossInvasionRewardEntry::_internal_set_unique_id(int64_t value) {
  
  _impl_.unique_id_ = value;
}
inline void BossInvasionRewardEntry::set_unique_id(int64_t value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:idlepb.BossInvasionRewardEntry.unique_id)
}

// int32 arena_cfg_id = 2;
inline void BossInvasionRewardEntry::clear_arena_cfg_id() {
  _impl_.arena_cfg_id_ = 0;
}
inline int32_t BossInvasionRewardEntry::_internal_arena_cfg_id() const {
  return _impl_.arena_cfg_id_;
}
inline int32_t BossInvasionRewardEntry::arena_cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.BossInvasionRewardEntry.arena_cfg_id)
  return _internal_arena_cfg_id();
}
inline void BossInvasionRewardEntry::_internal_set_arena_cfg_id(int32_t value) {
  
  _impl_.arena_cfg_id_ = value;
}
inline void BossInvasionRewardEntry::set_arena_cfg_id(int32_t value) {
  _internal_set_arena_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.BossInvasionRewardEntry.arena_cfg_id)
}

// int32 rank = 3;
inline void BossInvasionRewardEntry::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t BossInvasionRewardEntry::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t BossInvasionRewardEntry::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.BossInvasionRewardEntry.rank)
  return _internal_rank();
}
inline void BossInvasionRewardEntry::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void BossInvasionRewardEntry::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.BossInvasionRewardEntry.rank)
}

// -------------------------------------------------------------------

// BossInvasionKillRewardData

// int64 start_ticks = 1;
inline void BossInvasionKillRewardData::clear_start_ticks() {
  _impl_.start_ticks_ = int64_t{0};
}
inline int64_t BossInvasionKillRewardData::_internal_start_ticks() const {
  return _impl_.start_ticks_;
}
inline int64_t BossInvasionKillRewardData::start_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.BossInvasionKillRewardData.start_ticks)
  return _internal_start_ticks();
}
inline void BossInvasionKillRewardData::_internal_set_start_ticks(int64_t value) {
  
  _impl_.start_ticks_ = value;
}
inline void BossInvasionKillRewardData::set_start_ticks(int64_t value) {
  _internal_set_start_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.BossInvasionKillRewardData.start_ticks)
}

// repeated .idlepb.BossInvasionRewardEntry rewards = 2;
inline int BossInvasionKillRewardData::_internal_rewards_size() const {
  return _impl_.rewards_.size();
}
inline int BossInvasionKillRewardData::rewards_size() const {
  return _internal_rewards_size();
}
inline void BossInvasionKillRewardData::clear_rewards() {
  _impl_.rewards_.Clear();
}
inline ::idlepb::BossInvasionRewardEntry* BossInvasionKillRewardData::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.BossInvasionKillRewardData.rewards)
  return _impl_.rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionRewardEntry >*
BossInvasionKillRewardData::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.BossInvasionKillRewardData.rewards)
  return &_impl_.rewards_;
}
inline const ::idlepb::BossInvasionRewardEntry& BossInvasionKillRewardData::_internal_rewards(int index) const {
  return _impl_.rewards_.Get(index);
}
inline const ::idlepb::BossInvasionRewardEntry& BossInvasionKillRewardData::rewards(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.BossInvasionKillRewardData.rewards)
  return _internal_rewards(index);
}
inline ::idlepb::BossInvasionRewardEntry* BossInvasionKillRewardData::_internal_add_rewards() {
  return _impl_.rewards_.Add();
}
inline ::idlepb::BossInvasionRewardEntry* BossInvasionKillRewardData::add_rewards() {
  ::idlepb::BossInvasionRewardEntry* _add = _internal_add_rewards();
  // @@protoc_insertion_point(field_add:idlepb.BossInvasionKillRewardData.rewards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionRewardEntry >&
BossInvasionKillRewardData::rewards() const {
  // @@protoc_insertion_point(field_list:idlepb.BossInvasionKillRewardData.rewards)
  return _impl_.rewards_;
}

// bool is_draw_done = 3;
inline void BossInvasionKillRewardData::clear_is_draw_done() {
  _impl_.is_draw_done_ = false;
}
inline bool BossInvasionKillRewardData::_internal_is_draw_done() const {
  return _impl_.is_draw_done_;
}
inline bool BossInvasionKillRewardData::is_draw_done() const {
  // @@protoc_insertion_point(field_get:idlepb.BossInvasionKillRewardData.is_draw_done)
  return _internal_is_draw_done();
}
inline void BossInvasionKillRewardData::_internal_set_is_draw_done(bool value) {
  
  _impl_.is_draw_done_ = value;
}
inline void BossInvasionKillRewardData::set_is_draw_done(bool value) {
  _internal_set_is_draw_done(value);
  // @@protoc_insertion_point(field_set:idlepb.BossInvasionKillRewardData.is_draw_done)
}

// int64 drawed_unique_id = 4;
inline void BossInvasionKillRewardData::clear_drawed_unique_id() {
  _impl_.drawed_unique_id_ = int64_t{0};
}
inline int64_t BossInvasionKillRewardData::_internal_drawed_unique_id() const {
  return _impl_.drawed_unique_id_;
}
inline int64_t BossInvasionKillRewardData::drawed_unique_id() const {
  // @@protoc_insertion_point(field_get:idlepb.BossInvasionKillRewardData.drawed_unique_id)
  return _internal_drawed_unique_id();
}
inline void BossInvasionKillRewardData::_internal_set_drawed_unique_id(int64_t value) {
  
  _impl_.drawed_unique_id_ = value;
}
inline void BossInvasionKillRewardData::set_drawed_unique_id(int64_t value) {
  _internal_set_drawed_unique_id(value);
  // @@protoc_insertion_point(field_set:idlepb.BossInvasionKillRewardData.drawed_unique_id)
}

// -------------------------------------------------------------------

// BossInvasionDamageRewardData

// int64 start_ticks = 1;
inline void BossInvasionDamageRewardData::clear_start_ticks() {
  _impl_.start_ticks_ = int64_t{0};
}
inline int64_t BossInvasionDamageRewardData::_internal_start_ticks() const {
  return _impl_.start_ticks_;
}
inline int64_t BossInvasionDamageRewardData::start_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.BossInvasionDamageRewardData.start_ticks)
  return _internal_start_ticks();
}
inline void BossInvasionDamageRewardData::_internal_set_start_ticks(int64_t value) {
  
  _impl_.start_ticks_ = value;
}
inline void BossInvasionDamageRewardData::set_start_ticks(int64_t value) {
  _internal_set_start_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.BossInvasionDamageRewardData.start_ticks)
}

// repeated .idlepb.BossInvasionRewardEntry rewards = 2;
inline int BossInvasionDamageRewardData::_internal_rewards_size() const {
  return _impl_.rewards_.size();
}
inline int BossInvasionDamageRewardData::rewards_size() const {
  return _internal_rewards_size();
}
inline void BossInvasionDamageRewardData::clear_rewards() {
  _impl_.rewards_.Clear();
}
inline ::idlepb::BossInvasionRewardEntry* BossInvasionDamageRewardData::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.BossInvasionDamageRewardData.rewards)
  return _impl_.rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionRewardEntry >*
BossInvasionDamageRewardData::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.BossInvasionDamageRewardData.rewards)
  return &_impl_.rewards_;
}
inline const ::idlepb::BossInvasionRewardEntry& BossInvasionDamageRewardData::_internal_rewards(int index) const {
  return _impl_.rewards_.Get(index);
}
inline const ::idlepb::BossInvasionRewardEntry& BossInvasionDamageRewardData::rewards(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.BossInvasionDamageRewardData.rewards)
  return _internal_rewards(index);
}
inline ::idlepb::BossInvasionRewardEntry* BossInvasionDamageRewardData::_internal_add_rewards() {
  return _impl_.rewards_.Add();
}
inline ::idlepb::BossInvasionRewardEntry* BossInvasionDamageRewardData::add_rewards() {
  ::idlepb::BossInvasionRewardEntry* _add = _internal_add_rewards();
  // @@protoc_insertion_point(field_add:idlepb.BossInvasionDamageRewardData.rewards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionRewardEntry >&
BossInvasionDamageRewardData::rewards() const {
  // @@protoc_insertion_point(field_list:idlepb.BossInvasionDamageRewardData.rewards)
  return _impl_.rewards_;
}

// -------------------------------------------------------------------

// RoleBossInvasionData

// int64 last_reset_ticks = 1;
inline void RoleBossInvasionData::clear_last_reset_ticks() {
  _impl_.last_reset_ticks_ = int64_t{0};
}
inline int64_t RoleBossInvasionData::_internal_last_reset_ticks() const {
  return _impl_.last_reset_ticks_;
}
inline int64_t RoleBossInvasionData::last_reset_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleBossInvasionData.last_reset_ticks)
  return _internal_last_reset_ticks();
}
inline void RoleBossInvasionData::_internal_set_last_reset_ticks(int64_t value) {
  
  _impl_.last_reset_ticks_ = value;
}
inline void RoleBossInvasionData::set_last_reset_ticks(int64_t value) {
  _internal_set_last_reset_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleBossInvasionData.last_reset_ticks)
}

// .idlepb.BossInvasionKillRewardData kill_reward = 10;
inline bool RoleBossInvasionData::_internal_has_kill_reward() const {
  return this != internal_default_instance() && _impl_.kill_reward_ != nullptr;
}
inline bool RoleBossInvasionData::has_kill_reward() const {
  return _internal_has_kill_reward();
}
inline void RoleBossInvasionData::clear_kill_reward() {
  if (GetArenaForAllocation() == nullptr && _impl_.kill_reward_ != nullptr) {
    delete _impl_.kill_reward_;
  }
  _impl_.kill_reward_ = nullptr;
}
inline const ::idlepb::BossInvasionKillRewardData& RoleBossInvasionData::_internal_kill_reward() const {
  const ::idlepb::BossInvasionKillRewardData* p = _impl_.kill_reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::BossInvasionKillRewardData&>(
      ::idlepb::_BossInvasionKillRewardData_default_instance_);
}
inline const ::idlepb::BossInvasionKillRewardData& RoleBossInvasionData::kill_reward() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleBossInvasionData.kill_reward)
  return _internal_kill_reward();
}
inline void RoleBossInvasionData::unsafe_arena_set_allocated_kill_reward(
    ::idlepb::BossInvasionKillRewardData* kill_reward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kill_reward_);
  }
  _impl_.kill_reward_ = kill_reward;
  if (kill_reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleBossInvasionData.kill_reward)
}
inline ::idlepb::BossInvasionKillRewardData* RoleBossInvasionData::release_kill_reward() {
  
  ::idlepb::BossInvasionKillRewardData* temp = _impl_.kill_reward_;
  _impl_.kill_reward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::BossInvasionKillRewardData* RoleBossInvasionData::unsafe_arena_release_kill_reward() {
  // @@protoc_insertion_point(field_release:idlepb.RoleBossInvasionData.kill_reward)
  
  ::idlepb::BossInvasionKillRewardData* temp = _impl_.kill_reward_;
  _impl_.kill_reward_ = nullptr;
  return temp;
}
inline ::idlepb::BossInvasionKillRewardData* RoleBossInvasionData::_internal_mutable_kill_reward() {
  
  if (_impl_.kill_reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::BossInvasionKillRewardData>(GetArenaForAllocation());
    _impl_.kill_reward_ = p;
  }
  return _impl_.kill_reward_;
}
inline ::idlepb::BossInvasionKillRewardData* RoleBossInvasionData::mutable_kill_reward() {
  ::idlepb::BossInvasionKillRewardData* _msg = _internal_mutable_kill_reward();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleBossInvasionData.kill_reward)
  return _msg;
}
inline void RoleBossInvasionData::set_allocated_kill_reward(::idlepb::BossInvasionKillRewardData* kill_reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kill_reward_;
  }
  if (kill_reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kill_reward);
    if (message_arena != submessage_arena) {
      kill_reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kill_reward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kill_reward_ = kill_reward;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleBossInvasionData.kill_reward)
}

// repeated .idlepb.BossInvasionDamageRewardData damage_reward = 12;
inline int RoleBossInvasionData::_internal_damage_reward_size() const {
  return _impl_.damage_reward_.size();
}
inline int RoleBossInvasionData::damage_reward_size() const {
  return _internal_damage_reward_size();
}
inline void RoleBossInvasionData::clear_damage_reward() {
  _impl_.damage_reward_.Clear();
}
inline ::idlepb::BossInvasionDamageRewardData* RoleBossInvasionData::mutable_damage_reward(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleBossInvasionData.damage_reward)
  return _impl_.damage_reward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionDamageRewardData >*
RoleBossInvasionData::mutable_damage_reward() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleBossInvasionData.damage_reward)
  return &_impl_.damage_reward_;
}
inline const ::idlepb::BossInvasionDamageRewardData& RoleBossInvasionData::_internal_damage_reward(int index) const {
  return _impl_.damage_reward_.Get(index);
}
inline const ::idlepb::BossInvasionDamageRewardData& RoleBossInvasionData::damage_reward(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleBossInvasionData.damage_reward)
  return _internal_damage_reward(index);
}
inline ::idlepb::BossInvasionDamageRewardData* RoleBossInvasionData::_internal_add_damage_reward() {
  return _impl_.damage_reward_.Add();
}
inline ::idlepb::BossInvasionDamageRewardData* RoleBossInvasionData::add_damage_reward() {
  ::idlepb::BossInvasionDamageRewardData* _add = _internal_add_damage_reward();
  // @@protoc_insertion_point(field_add:idlepb.RoleBossInvasionData.damage_reward)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BossInvasionDamageRewardData >&
RoleBossInvasionData::damage_reward() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleBossInvasionData.damage_reward)
  return _impl_.damage_reward_;
}

// int64 drawed_unique_id = 14;
inline void RoleBossInvasionData::clear_drawed_unique_id() {
  _impl_.drawed_unique_id_ = int64_t{0};
}
inline int64_t RoleBossInvasionData::_internal_drawed_unique_id() const {
  return _impl_.drawed_unique_id_;
}
inline int64_t RoleBossInvasionData::drawed_unique_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleBossInvasionData.drawed_unique_id)
  return _internal_drawed_unique_id();
}
inline void RoleBossInvasionData::_internal_set_drawed_unique_id(int64_t value) {
  
  _impl_.drawed_unique_id_ = value;
}
inline void RoleBossInvasionData::set_drawed_unique_id(int64_t value) {
  _internal_set_drawed_unique_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleBossInvasionData.drawed_unique_id)
}

// -------------------------------------------------------------------

// RoleMasiveData

// repeated .idlepb.StringKeyInt32ValueEntry user_vars = 1;
inline int RoleMasiveData::_internal_user_vars_size() const {
  return _impl_.user_vars_.size();
}
inline int RoleMasiveData::user_vars_size() const {
  return _internal_user_vars_size();
}
inline void RoleMasiveData::clear_user_vars() {
  _impl_.user_vars_.Clear();
}
inline ::idlepb::StringKeyInt32ValueEntry* RoleMasiveData::mutable_user_vars(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleMasiveData.user_vars)
  return _impl_.user_vars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::StringKeyInt32ValueEntry >*
RoleMasiveData::mutable_user_vars() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleMasiveData.user_vars)
  return &_impl_.user_vars_;
}
inline const ::idlepb::StringKeyInt32ValueEntry& RoleMasiveData::_internal_user_vars(int index) const {
  return _impl_.user_vars_.Get(index);
}
inline const ::idlepb::StringKeyInt32ValueEntry& RoleMasiveData::user_vars(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleMasiveData.user_vars)
  return _internal_user_vars(index);
}
inline ::idlepb::StringKeyInt32ValueEntry* RoleMasiveData::_internal_add_user_vars() {
  return _impl_.user_vars_.Add();
}
inline ::idlepb::StringKeyInt32ValueEntry* RoleMasiveData::add_user_vars() {
  ::idlepb::StringKeyInt32ValueEntry* _add = _internal_add_user_vars();
  // @@protoc_insertion_point(field_add:idlepb.RoleMasiveData.user_vars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::StringKeyInt32ValueEntry >&
RoleMasiveData::user_vars() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleMasiveData.user_vars)
  return _impl_.user_vars_;
}

// int64 next_self_unique_id = 2;
inline void RoleMasiveData::clear_next_self_unique_id() {
  _impl_.next_self_unique_id_ = int64_t{0};
}
inline int64_t RoleMasiveData::_internal_next_self_unique_id() const {
  return _impl_.next_self_unique_id_;
}
inline int64_t RoleMasiveData::next_self_unique_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleMasiveData.next_self_unique_id)
  return _internal_next_self_unique_id();
}
inline void RoleMasiveData::_internal_set_next_self_unique_id(int64_t value) {
  
  _impl_.next_self_unique_id_ = value;
}
inline void RoleMasiveData::set_next_self_unique_id(int64_t value) {
  _internal_set_next_self_unique_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleMasiveData.next_self_unique_id)
}

// -------------------------------------------------------------------

// CheckTask

// int32 task_id = 1;
inline void CheckTask::clear_task_id() {
  _impl_.task_id_ = 0;
}
inline int32_t CheckTask::_internal_task_id() const {
  return _impl_.task_id_;
}
inline int32_t CheckTask::task_id() const {
  // @@protoc_insertion_point(field_get:idlepb.CheckTask.task_id)
  return _internal_task_id();
}
inline void CheckTask::_internal_set_task_id(int32_t value) {
  
  _impl_.task_id_ = value;
}
inline void CheckTask::set_task_id(int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:idlepb.CheckTask.task_id)
}

// int32 type = 2;
inline void CheckTask::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t CheckTask::_internal_type() const {
  return _impl_.type_;
}
inline int32_t CheckTask::type() const {
  // @@protoc_insertion_point(field_get:idlepb.CheckTask.type)
  return _internal_type();
}
inline void CheckTask::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void CheckTask::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.CheckTask.type)
}

// int32 need_num = 3;
inline void CheckTask::clear_need_num() {
  _impl_.need_num_ = 0;
}
inline int32_t CheckTask::_internal_need_num() const {
  return _impl_.need_num_;
}
inline int32_t CheckTask::need_num() const {
  // @@protoc_insertion_point(field_get:idlepb.CheckTask.need_num)
  return _internal_need_num();
}
inline void CheckTask::_internal_set_need_num(int32_t value) {
  
  _impl_.need_num_ = value;
}
inline void CheckTask::set_need_num(int32_t value) {
  _internal_set_need_num(value);
  // @@protoc_insertion_point(field_set:idlepb.CheckTask.need_num)
}

// int32 point = 4;
inline void CheckTask::clear_point() {
  _impl_.point_ = 0;
}
inline int32_t CheckTask::_internal_point() const {
  return _impl_.point_;
}
inline int32_t CheckTask::point() const {
  // @@protoc_insertion_point(field_get:idlepb.CheckTask.point)
  return _internal_point();
}
inline void CheckTask::_internal_set_point(int32_t value) {
  
  _impl_.point_ = value;
}
inline void CheckTask::set_point(int32_t value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:idlepb.CheckTask.point)
}

// int32 progress = 5;
inline void CheckTask::clear_progress() {
  _impl_.progress_ = 0;
}
inline int32_t CheckTask::_internal_progress() const {
  return _impl_.progress_;
}
inline int32_t CheckTask::progress() const {
  // @@protoc_insertion_point(field_get:idlepb.CheckTask.progress)
  return _internal_progress();
}
inline void CheckTask::_internal_set_progress(int32_t value) {
  
  _impl_.progress_ = value;
}
inline void CheckTask::set_progress(int32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:idlepb.CheckTask.progress)
}

// bool is_submitted = 6;
inline void CheckTask::clear_is_submitted() {
  _impl_.is_submitted_ = false;
}
inline bool CheckTask::_internal_is_submitted() const {
  return _impl_.is_submitted_;
}
inline bool CheckTask::is_submitted() const {
  // @@protoc_insertion_point(field_get:idlepb.CheckTask.is_submitted)
  return _internal_is_submitted();
}
inline void CheckTask::_internal_set_is_submitted(bool value) {
  
  _impl_.is_submitted_ = value;
}
inline void CheckTask::set_is_submitted(bool value) {
  _internal_set_is_submitted(value);
  // @@protoc_insertion_point(field_set:idlepb.CheckTask.is_submitted)
}

// -------------------------------------------------------------------

// RoleChecklistData

// int32 day_point = 1;
inline void RoleChecklistData::clear_day_point() {
  _impl_.day_point_ = 0;
}
inline int32_t RoleChecklistData::_internal_day_point() const {
  return _impl_.day_point_;
}
inline int32_t RoleChecklistData::day_point() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleChecklistData.day_point)
  return _internal_day_point();
}
inline void RoleChecklistData::_internal_set_day_point(int32_t value) {
  
  _impl_.day_point_ = value;
}
inline void RoleChecklistData::set_day_point(int32_t value) {
  _internal_set_day_point(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleChecklistData.day_point)
}

// int32 week_point = 2;
inline void RoleChecklistData::clear_week_point() {
  _impl_.week_point_ = 0;
}
inline int32_t RoleChecklistData::_internal_week_point() const {
  return _impl_.week_point_;
}
inline int32_t RoleChecklistData::week_point() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleChecklistData.week_point)
  return _internal_week_point();
}
inline void RoleChecklistData::_internal_set_week_point(int32_t value) {
  
  _impl_.week_point_ = value;
}
inline void RoleChecklistData::set_week_point(int32_t value) {
  _internal_set_week_point(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleChecklistData.week_point)
}

// repeated .idlepb.CheckTask day_tasks = 3;
inline int RoleChecklistData::_internal_day_tasks_size() const {
  return _impl_.day_tasks_.size();
}
inline int RoleChecklistData::day_tasks_size() const {
  return _internal_day_tasks_size();
}
inline void RoleChecklistData::clear_day_tasks() {
  _impl_.day_tasks_.Clear();
}
inline ::idlepb::CheckTask* RoleChecklistData::mutable_day_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleChecklistData.day_tasks)
  return _impl_.day_tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CheckTask >*
RoleChecklistData::mutable_day_tasks() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleChecklistData.day_tasks)
  return &_impl_.day_tasks_;
}
inline const ::idlepb::CheckTask& RoleChecklistData::_internal_day_tasks(int index) const {
  return _impl_.day_tasks_.Get(index);
}
inline const ::idlepb::CheckTask& RoleChecklistData::day_tasks(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleChecklistData.day_tasks)
  return _internal_day_tasks(index);
}
inline ::idlepb::CheckTask* RoleChecklistData::_internal_add_day_tasks() {
  return _impl_.day_tasks_.Add();
}
inline ::idlepb::CheckTask* RoleChecklistData::add_day_tasks() {
  ::idlepb::CheckTask* _add = _internal_add_day_tasks();
  // @@protoc_insertion_point(field_add:idlepb.RoleChecklistData.day_tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CheckTask >&
RoleChecklistData::day_tasks() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleChecklistData.day_tasks)
  return _impl_.day_tasks_;
}

// repeated .idlepb.CheckTask week_tasks = 4;
inline int RoleChecklistData::_internal_week_tasks_size() const {
  return _impl_.week_tasks_.size();
}
inline int RoleChecklistData::week_tasks_size() const {
  return _internal_week_tasks_size();
}
inline void RoleChecklistData::clear_week_tasks() {
  _impl_.week_tasks_.Clear();
}
inline ::idlepb::CheckTask* RoleChecklistData::mutable_week_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleChecklistData.week_tasks)
  return _impl_.week_tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CheckTask >*
RoleChecklistData::mutable_week_tasks() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleChecklistData.week_tasks)
  return &_impl_.week_tasks_;
}
inline const ::idlepb::CheckTask& RoleChecklistData::_internal_week_tasks(int index) const {
  return _impl_.week_tasks_.Get(index);
}
inline const ::idlepb::CheckTask& RoleChecklistData::week_tasks(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleChecklistData.week_tasks)
  return _internal_week_tasks(index);
}
inline ::idlepb::CheckTask* RoleChecklistData::_internal_add_week_tasks() {
  return _impl_.week_tasks_.Add();
}
inline ::idlepb::CheckTask* RoleChecklistData::add_week_tasks() {
  ::idlepb::CheckTask* _add = _internal_add_week_tasks();
  // @@protoc_insertion_point(field_add:idlepb.RoleChecklistData.week_tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CheckTask >&
RoleChecklistData::week_tasks() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleChecklistData.week_tasks)
  return _impl_.week_tasks_;
}

// int32 day_received_time = 5;
inline void RoleChecklistData::clear_day_received_time() {
  _impl_.day_received_time_ = 0;
}
inline int32_t RoleChecklistData::_internal_day_received_time() const {
  return _impl_.day_received_time_;
}
inline int32_t RoleChecklistData::day_received_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleChecklistData.day_received_time)
  return _internal_day_received_time();
}
inline void RoleChecklistData::_internal_set_day_received_time(int32_t value) {
  
  _impl_.day_received_time_ = value;
}
inline void RoleChecklistData::set_day_received_time(int32_t value) {
  _internal_set_day_received_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleChecklistData.day_received_time)
}

// int32 week_received_time = 6;
inline void RoleChecklistData::clear_week_received_time() {
  _impl_.week_received_time_ = 0;
}
inline int32_t RoleChecklistData::_internal_week_received_time() const {
  return _impl_.week_received_time_;
}
inline int32_t RoleChecklistData::week_received_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleChecklistData.week_received_time)
  return _internal_week_received_time();
}
inline void RoleChecklistData::_internal_set_week_received_time(int32_t value) {
  
  _impl_.week_received_time_ = value;
}
inline void RoleChecklistData::set_week_received_time(int32_t value) {
  _internal_set_week_received_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleChecklistData.week_received_time)
}

// int64 last_reset_day_time = 7;
inline void RoleChecklistData::clear_last_reset_day_time() {
  _impl_.last_reset_day_time_ = int64_t{0};
}
inline int64_t RoleChecklistData::_internal_last_reset_day_time() const {
  return _impl_.last_reset_day_time_;
}
inline int64_t RoleChecklistData::last_reset_day_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleChecklistData.last_reset_day_time)
  return _internal_last_reset_day_time();
}
inline void RoleChecklistData::_internal_set_last_reset_day_time(int64_t value) {
  
  _impl_.last_reset_day_time_ = value;
}
inline void RoleChecklistData::set_last_reset_day_time(int64_t value) {
  _internal_set_last_reset_day_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleChecklistData.last_reset_day_time)
}

// int64 last_reset_week_time = 8;
inline void RoleChecklistData::clear_last_reset_week_time() {
  _impl_.last_reset_week_time_ = int64_t{0};
}
inline int64_t RoleChecklistData::_internal_last_reset_week_time() const {
  return _impl_.last_reset_week_time_;
}
inline int64_t RoleChecklistData::last_reset_week_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleChecklistData.last_reset_week_time)
  return _internal_last_reset_week_time();
}
inline void RoleChecklistData::_internal_set_last_reset_week_time(int64_t value) {
  
  _impl_.last_reset_week_time_ = value;
}
inline void RoleChecklistData::set_last_reset_week_time(int64_t value) {
  _internal_set_last_reset_week_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleChecklistData.last_reset_week_time)
}

// int64 boss_invasion_time = 9;
inline void RoleChecklistData::clear_boss_invasion_time() {
  _impl_.boss_invasion_time_ = int64_t{0};
}
inline int64_t RoleChecklistData::_internal_boss_invasion_time() const {
  return _impl_.boss_invasion_time_;
}
inline int64_t RoleChecklistData::boss_invasion_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleChecklistData.boss_invasion_time)
  return _internal_boss_invasion_time();
}
inline void RoleChecklistData::_internal_set_boss_invasion_time(int64_t value) {
  
  _impl_.boss_invasion_time_ = value;
}
inline void RoleChecklistData::set_boss_invasion_time(int64_t value) {
  _internal_set_boss_invasion_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleChecklistData.boss_invasion_time)
}

// int32 degree_locked_day = 10;
inline void RoleChecklistData::clear_degree_locked_day() {
  _impl_.degree_locked_day_ = 0;
}
inline int32_t RoleChecklistData::_internal_degree_locked_day() const {
  return _impl_.degree_locked_day_;
}
inline int32_t RoleChecklistData::degree_locked_day() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleChecklistData.degree_locked_day)
  return _internal_degree_locked_day();
}
inline void RoleChecklistData::_internal_set_degree_locked_day(int32_t value) {
  
  _impl_.degree_locked_day_ = value;
}
inline void RoleChecklistData::set_degree_locked_day(int32_t value) {
  _internal_set_degree_locked_day(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleChecklistData.degree_locked_day)
}

// int32 degree_locked_week = 11;
inline void RoleChecklistData::clear_degree_locked_week() {
  _impl_.degree_locked_week_ = 0;
}
inline int32_t RoleChecklistData::_internal_degree_locked_week() const {
  return _impl_.degree_locked_week_;
}
inline int32_t RoleChecklistData::degree_locked_week() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleChecklistData.degree_locked_week)
  return _internal_degree_locked_week();
}
inline void RoleChecklistData::_internal_set_degree_locked_week(int32_t value) {
  
  _impl_.degree_locked_week_ = value;
}
inline void RoleChecklistData::set_degree_locked_week(int32_t value) {
  _internal_set_degree_locked_week(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleChecklistData.degree_locked_week)
}

// -------------------------------------------------------------------

// RoleCommonItemExchangeData

// int64 last_reset_day = 2;
inline void RoleCommonItemExchangeData::clear_last_reset_day() {
  _impl_.last_reset_day_ = int64_t{0};
}
inline int64_t RoleCommonItemExchangeData::_internal_last_reset_day() const {
  return _impl_.last_reset_day_;
}
inline int64_t RoleCommonItemExchangeData::last_reset_day() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleCommonItemExchangeData.last_reset_day)
  return _internal_last_reset_day();
}
inline void RoleCommonItemExchangeData::_internal_set_last_reset_day(int64_t value) {
  
  _impl_.last_reset_day_ = value;
}
inline void RoleCommonItemExchangeData::set_last_reset_day(int64_t value) {
  _internal_set_last_reset_day(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleCommonItemExchangeData.last_reset_day)
}

// int64 last_reset_week = 3;
inline void RoleCommonItemExchangeData::clear_last_reset_week() {
  _impl_.last_reset_week_ = int64_t{0};
}
inline int64_t RoleCommonItemExchangeData::_internal_last_reset_week() const {
  return _impl_.last_reset_week_;
}
inline int64_t RoleCommonItemExchangeData::last_reset_week() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleCommonItemExchangeData.last_reset_week)
  return _internal_last_reset_week();
}
inline void RoleCommonItemExchangeData::_internal_set_last_reset_week(int64_t value) {
  
  _impl_.last_reset_week_ = value;
}
inline void RoleCommonItemExchangeData::set_last_reset_week(int64_t value) {
  _internal_set_last_reset_week(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleCommonItemExchangeData.last_reset_week)
}

// repeated .idlepb.MapValueInt32 item_exchange_day = 4;
inline int RoleCommonItemExchangeData::_internal_item_exchange_day_size() const {
  return _impl_.item_exchange_day_.size();
}
inline int RoleCommonItemExchangeData::item_exchange_day_size() const {
  return _internal_item_exchange_day_size();
}
inline void RoleCommonItemExchangeData::clear_item_exchange_day() {
  _impl_.item_exchange_day_.Clear();
}
inline ::idlepb::MapValueInt32* RoleCommonItemExchangeData::mutable_item_exchange_day(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleCommonItemExchangeData.item_exchange_day)
  return _impl_.item_exchange_day_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >*
RoleCommonItemExchangeData::mutable_item_exchange_day() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleCommonItemExchangeData.item_exchange_day)
  return &_impl_.item_exchange_day_;
}
inline const ::idlepb::MapValueInt32& RoleCommonItemExchangeData::_internal_item_exchange_day(int index) const {
  return _impl_.item_exchange_day_.Get(index);
}
inline const ::idlepb::MapValueInt32& RoleCommonItemExchangeData::item_exchange_day(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleCommonItemExchangeData.item_exchange_day)
  return _internal_item_exchange_day(index);
}
inline ::idlepb::MapValueInt32* RoleCommonItemExchangeData::_internal_add_item_exchange_day() {
  return _impl_.item_exchange_day_.Add();
}
inline ::idlepb::MapValueInt32* RoleCommonItemExchangeData::add_item_exchange_day() {
  ::idlepb::MapValueInt32* _add = _internal_add_item_exchange_day();
  // @@protoc_insertion_point(field_add:idlepb.RoleCommonItemExchangeData.item_exchange_day)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >&
RoleCommonItemExchangeData::item_exchange_day() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleCommonItemExchangeData.item_exchange_day)
  return _impl_.item_exchange_day_;
}

// repeated .idlepb.MapValueInt32 item_exchange_week = 5;
inline int RoleCommonItemExchangeData::_internal_item_exchange_week_size() const {
  return _impl_.item_exchange_week_.size();
}
inline int RoleCommonItemExchangeData::item_exchange_week_size() const {
  return _internal_item_exchange_week_size();
}
inline void RoleCommonItemExchangeData::clear_item_exchange_week() {
  _impl_.item_exchange_week_.Clear();
}
inline ::idlepb::MapValueInt32* RoleCommonItemExchangeData::mutable_item_exchange_week(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleCommonItemExchangeData.item_exchange_week)
  return _impl_.item_exchange_week_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >*
RoleCommonItemExchangeData::mutable_item_exchange_week() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleCommonItemExchangeData.item_exchange_week)
  return &_impl_.item_exchange_week_;
}
inline const ::idlepb::MapValueInt32& RoleCommonItemExchangeData::_internal_item_exchange_week(int index) const {
  return _impl_.item_exchange_week_.Get(index);
}
inline const ::idlepb::MapValueInt32& RoleCommonItemExchangeData::item_exchange_week(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleCommonItemExchangeData.item_exchange_week)
  return _internal_item_exchange_week(index);
}
inline ::idlepb::MapValueInt32* RoleCommonItemExchangeData::_internal_add_item_exchange_week() {
  return _impl_.item_exchange_week_.Add();
}
inline ::idlepb::MapValueInt32* RoleCommonItemExchangeData::add_item_exchange_week() {
  ::idlepb::MapValueInt32* _add = _internal_add_item_exchange_week();
  // @@protoc_insertion_point(field_add:idlepb.RoleCommonItemExchangeData.item_exchange_week)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::MapValueInt32 >&
RoleCommonItemExchangeData::item_exchange_week() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleCommonItemExchangeData.item_exchange_week)
  return _impl_.item_exchange_week_;
}

// -------------------------------------------------------------------

// RoleTreasuryChestData

// repeated int32 today_open_times = 1;
inline int RoleTreasuryChestData::_internal_today_open_times_size() const {
  return _impl_.today_open_times_.size();
}
inline int RoleTreasuryChestData::today_open_times_size() const {
  return _internal_today_open_times_size();
}
inline void RoleTreasuryChestData::clear_today_open_times() {
  _impl_.today_open_times_.Clear();
}
inline int32_t RoleTreasuryChestData::_internal_today_open_times(int index) const {
  return _impl_.today_open_times_.Get(index);
}
inline int32_t RoleTreasuryChestData::today_open_times(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasuryChestData.today_open_times)
  return _internal_today_open_times(index);
}
inline void RoleTreasuryChestData::set_today_open_times(int index, int32_t value) {
  _impl_.today_open_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleTreasuryChestData.today_open_times)
}
inline void RoleTreasuryChestData::_internal_add_today_open_times(int32_t value) {
  _impl_.today_open_times_.Add(value);
}
inline void RoleTreasuryChestData::add_today_open_times(int32_t value) {
  _internal_add_today_open_times(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleTreasuryChestData.today_open_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleTreasuryChestData::_internal_today_open_times() const {
  return _impl_.today_open_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleTreasuryChestData::today_open_times() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleTreasuryChestData.today_open_times)
  return _internal_today_open_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleTreasuryChestData::_internal_mutable_today_open_times() {
  return &_impl_.today_open_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleTreasuryChestData::mutable_today_open_times() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleTreasuryChestData.today_open_times)
  return _internal_mutable_today_open_times();
}

// repeated int32 guarantee_count = 2;
inline int RoleTreasuryChestData::_internal_guarantee_count_size() const {
  return _impl_.guarantee_count_.size();
}
inline int RoleTreasuryChestData::guarantee_count_size() const {
  return _internal_guarantee_count_size();
}
inline void RoleTreasuryChestData::clear_guarantee_count() {
  _impl_.guarantee_count_.Clear();
}
inline int32_t RoleTreasuryChestData::_internal_guarantee_count(int index) const {
  return _impl_.guarantee_count_.Get(index);
}
inline int32_t RoleTreasuryChestData::guarantee_count(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasuryChestData.guarantee_count)
  return _internal_guarantee_count(index);
}
inline void RoleTreasuryChestData::set_guarantee_count(int index, int32_t value) {
  _impl_.guarantee_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleTreasuryChestData.guarantee_count)
}
inline void RoleTreasuryChestData::_internal_add_guarantee_count(int32_t value) {
  _impl_.guarantee_count_.Add(value);
}
inline void RoleTreasuryChestData::add_guarantee_count(int32_t value) {
  _internal_add_guarantee_count(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleTreasuryChestData.guarantee_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleTreasuryChestData::_internal_guarantee_count() const {
  return _impl_.guarantee_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleTreasuryChestData::guarantee_count() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleTreasuryChestData.guarantee_count)
  return _internal_guarantee_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleTreasuryChestData::_internal_mutable_guarantee_count() {
  return &_impl_.guarantee_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleTreasuryChestData::mutable_guarantee_count() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleTreasuryChestData.guarantee_count)
  return _internal_mutable_guarantee_count();
}

// -------------------------------------------------------------------

// RoleTreasuryGachaData

// repeated int32 today_open_times = 1;
inline int RoleTreasuryGachaData::_internal_today_open_times_size() const {
  return _impl_.today_open_times_.size();
}
inline int RoleTreasuryGachaData::today_open_times_size() const {
  return _internal_today_open_times_size();
}
inline void RoleTreasuryGachaData::clear_today_open_times() {
  _impl_.today_open_times_.Clear();
}
inline int32_t RoleTreasuryGachaData::_internal_today_open_times(int index) const {
  return _impl_.today_open_times_.Get(index);
}
inline int32_t RoleTreasuryGachaData::today_open_times(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasuryGachaData.today_open_times)
  return _internal_today_open_times(index);
}
inline void RoleTreasuryGachaData::set_today_open_times(int index, int32_t value) {
  _impl_.today_open_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleTreasuryGachaData.today_open_times)
}
inline void RoleTreasuryGachaData::_internal_add_today_open_times(int32_t value) {
  _impl_.today_open_times_.Add(value);
}
inline void RoleTreasuryGachaData::add_today_open_times(int32_t value) {
  _internal_add_today_open_times(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleTreasuryGachaData.today_open_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleTreasuryGachaData::_internal_today_open_times() const {
  return _impl_.today_open_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleTreasuryGachaData::today_open_times() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleTreasuryGachaData.today_open_times)
  return _internal_today_open_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleTreasuryGachaData::_internal_mutable_today_open_times() {
  return &_impl_.today_open_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleTreasuryGachaData::mutable_today_open_times() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleTreasuryGachaData.today_open_times)
  return _internal_mutable_today_open_times();
}

// repeated int32 free_open_times = 2;
inline int RoleTreasuryGachaData::_internal_free_open_times_size() const {
  return _impl_.free_open_times_.size();
}
inline int RoleTreasuryGachaData::free_open_times_size() const {
  return _internal_free_open_times_size();
}
inline void RoleTreasuryGachaData::clear_free_open_times() {
  _impl_.free_open_times_.Clear();
}
inline int32_t RoleTreasuryGachaData::_internal_free_open_times(int index) const {
  return _impl_.free_open_times_.Get(index);
}
inline int32_t RoleTreasuryGachaData::free_open_times(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasuryGachaData.free_open_times)
  return _internal_free_open_times(index);
}
inline void RoleTreasuryGachaData::set_free_open_times(int index, int32_t value) {
  _impl_.free_open_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleTreasuryGachaData.free_open_times)
}
inline void RoleTreasuryGachaData::_internal_add_free_open_times(int32_t value) {
  _impl_.free_open_times_.Add(value);
}
inline void RoleTreasuryGachaData::add_free_open_times(int32_t value) {
  _internal_add_free_open_times(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleTreasuryGachaData.free_open_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleTreasuryGachaData::_internal_free_open_times() const {
  return _impl_.free_open_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleTreasuryGachaData::free_open_times() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleTreasuryGachaData.free_open_times)
  return _internal_free_open_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleTreasuryGachaData::_internal_mutable_free_open_times() {
  return &_impl_.free_open_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleTreasuryGachaData::mutable_free_open_times() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleTreasuryGachaData.free_open_times)
  return _internal_mutable_free_open_times();
}

// repeated int32 guarantee_count = 3;
inline int RoleTreasuryGachaData::_internal_guarantee_count_size() const {
  return _impl_.guarantee_count_.size();
}
inline int RoleTreasuryGachaData::guarantee_count_size() const {
  return _internal_guarantee_count_size();
}
inline void RoleTreasuryGachaData::clear_guarantee_count() {
  _impl_.guarantee_count_.Clear();
}
inline int32_t RoleTreasuryGachaData::_internal_guarantee_count(int index) const {
  return _impl_.guarantee_count_.Get(index);
}
inline int32_t RoleTreasuryGachaData::guarantee_count(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasuryGachaData.guarantee_count)
  return _internal_guarantee_count(index);
}
inline void RoleTreasuryGachaData::set_guarantee_count(int index, int32_t value) {
  _impl_.guarantee_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleTreasuryGachaData.guarantee_count)
}
inline void RoleTreasuryGachaData::_internal_add_guarantee_count(int32_t value) {
  _impl_.guarantee_count_.Add(value);
}
inline void RoleTreasuryGachaData::add_guarantee_count(int32_t value) {
  _internal_add_guarantee_count(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleTreasuryGachaData.guarantee_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleTreasuryGachaData::_internal_guarantee_count() const {
  return _impl_.guarantee_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleTreasuryGachaData::guarantee_count() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleTreasuryGachaData.guarantee_count)
  return _internal_guarantee_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleTreasuryGachaData::_internal_mutable_guarantee_count() {
  return &_impl_.guarantee_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleTreasuryGachaData::mutable_guarantee_count() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleTreasuryGachaData.guarantee_count)
  return _internal_mutable_guarantee_count();
}

// int32 total_open_time = 6;
inline void RoleTreasuryGachaData::clear_total_open_time() {
  _impl_.total_open_time_ = 0;
}
inline int32_t RoleTreasuryGachaData::_internal_total_open_time() const {
  return _impl_.total_open_time_;
}
inline int32_t RoleTreasuryGachaData::total_open_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasuryGachaData.total_open_time)
  return _internal_total_open_time();
}
inline void RoleTreasuryGachaData::_internal_set_total_open_time(int32_t value) {
  
  _impl_.total_open_time_ = value;
}
inline void RoleTreasuryGachaData::set_total_open_time(int32_t value) {
  _internal_set_total_open_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleTreasuryGachaData.total_open_time)
}

// -------------------------------------------------------------------

// TreasuryShopItem

// int32 index = 1;
inline void TreasuryShopItem::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t TreasuryShopItem::_internal_index() const {
  return _impl_.index_;
}
inline int32_t TreasuryShopItem::index() const {
  // @@protoc_insertion_point(field_get:idlepb.TreasuryShopItem.index)
  return _internal_index();
}
inline void TreasuryShopItem::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void TreasuryShopItem::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:idlepb.TreasuryShopItem.index)
}

// int32 item_id = 2;
inline void TreasuryShopItem::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t TreasuryShopItem::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t TreasuryShopItem::item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.TreasuryShopItem.item_id)
  return _internal_item_id();
}
inline void TreasuryShopItem::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void TreasuryShopItem::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.TreasuryShopItem.item_id)
}

// int32 num = 3;
inline void TreasuryShopItem::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t TreasuryShopItem::_internal_num() const {
  return _impl_.num_;
}
inline int32_t TreasuryShopItem::num() const {
  // @@protoc_insertion_point(field_get:idlepb.TreasuryShopItem.num)
  return _internal_num();
}
inline void TreasuryShopItem::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void TreasuryShopItem::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.TreasuryShopItem.num)
}

// int32 price = 4;
inline void TreasuryShopItem::clear_price() {
  _impl_.price_ = 0;
}
inline int32_t TreasuryShopItem::_internal_price() const {
  return _impl_.price_;
}
inline int32_t TreasuryShopItem::price() const {
  // @@protoc_insertion_point(field_get:idlepb.TreasuryShopItem.price)
  return _internal_price();
}
inline void TreasuryShopItem::_internal_set_price(int32_t value) {
  
  _impl_.price_ = value;
}
inline void TreasuryShopItem::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:idlepb.TreasuryShopItem.price)
}

// int32 count = 5;
inline void TreasuryShopItem::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t TreasuryShopItem::_internal_count() const {
  return _impl_.count_;
}
inline int32_t TreasuryShopItem::count() const {
  // @@protoc_insertion_point(field_get:idlepb.TreasuryShopItem.count)
  return _internal_count();
}
inline void TreasuryShopItem::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void TreasuryShopItem::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:idlepb.TreasuryShopItem.count)
}

// int32 bought_count = 6;
inline void TreasuryShopItem::clear_bought_count() {
  _impl_.bought_count_ = 0;
}
inline int32_t TreasuryShopItem::_internal_bought_count() const {
  return _impl_.bought_count_;
}
inline int32_t TreasuryShopItem::bought_count() const {
  // @@protoc_insertion_point(field_get:idlepb.TreasuryShopItem.bought_count)
  return _internal_bought_count();
}
inline void TreasuryShopItem::_internal_set_bought_count(int32_t value) {
  
  _impl_.bought_count_ = value;
}
inline void TreasuryShopItem::set_bought_count(int32_t value) {
  _internal_set_bought_count(value);
  // @@protoc_insertion_point(field_set:idlepb.TreasuryShopItem.bought_count)
}

// int32 cfg_id = 7;
inline void TreasuryShopItem::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t TreasuryShopItem::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t TreasuryShopItem::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.TreasuryShopItem.cfg_id)
  return _internal_cfg_id();
}
inline void TreasuryShopItem::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void TreasuryShopItem::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.TreasuryShopItem.cfg_id)
}

// -------------------------------------------------------------------

// RoleTreasuryShopData

// repeated .idlepb.TreasuryShopItem shop_items = 1;
inline int RoleTreasuryShopData::_internal_shop_items_size() const {
  return _impl_.shop_items_.size();
}
inline int RoleTreasuryShopData::shop_items_size() const {
  return _internal_shop_items_size();
}
inline void RoleTreasuryShopData::clear_shop_items() {
  _impl_.shop_items_.Clear();
}
inline ::idlepb::TreasuryShopItem* RoleTreasuryShopData::mutable_shop_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleTreasuryShopData.shop_items)
  return _impl_.shop_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::TreasuryShopItem >*
RoleTreasuryShopData::mutable_shop_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleTreasuryShopData.shop_items)
  return &_impl_.shop_items_;
}
inline const ::idlepb::TreasuryShopItem& RoleTreasuryShopData::_internal_shop_items(int index) const {
  return _impl_.shop_items_.Get(index);
}
inline const ::idlepb::TreasuryShopItem& RoleTreasuryShopData::shop_items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasuryShopData.shop_items)
  return _internal_shop_items(index);
}
inline ::idlepb::TreasuryShopItem* RoleTreasuryShopData::_internal_add_shop_items() {
  return _impl_.shop_items_.Add();
}
inline ::idlepb::TreasuryShopItem* RoleTreasuryShopData::add_shop_items() {
  ::idlepb::TreasuryShopItem* _add = _internal_add_shop_items();
  // @@protoc_insertion_point(field_add:idlepb.RoleTreasuryShopData.shop_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::TreasuryShopItem >&
RoleTreasuryShopData::shop_items() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleTreasuryShopData.shop_items)
  return _impl_.shop_items_;
}

// int32 today_refresh_time = 2;
inline void RoleTreasuryShopData::clear_today_refresh_time() {
  _impl_.today_refresh_time_ = 0;
}
inline int32_t RoleTreasuryShopData::_internal_today_refresh_time() const {
  return _impl_.today_refresh_time_;
}
inline int32_t RoleTreasuryShopData::today_refresh_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasuryShopData.today_refresh_time)
  return _internal_today_refresh_time();
}
inline void RoleTreasuryShopData::_internal_set_today_refresh_time(int32_t value) {
  
  _impl_.today_refresh_time_ = value;
}
inline void RoleTreasuryShopData::set_today_refresh_time(int32_t value) {
  _internal_set_today_refresh_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleTreasuryShopData.today_refresh_time)
}

// bool shop_refresh_flag = 3;
inline void RoleTreasuryShopData::clear_shop_refresh_flag() {
  _impl_.shop_refresh_flag_ = false;
}
inline bool RoleTreasuryShopData::_internal_shop_refresh_flag() const {
  return _impl_.shop_refresh_flag_;
}
inline bool RoleTreasuryShopData::shop_refresh_flag() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasuryShopData.shop_refresh_flag)
  return _internal_shop_refresh_flag();
}
inline void RoleTreasuryShopData::_internal_set_shop_refresh_flag(bool value) {
  
  _impl_.shop_refresh_flag_ = value;
}
inline void RoleTreasuryShopData::set_shop_refresh_flag(bool value) {
  _internal_set_shop_refresh_flag(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleTreasuryShopData.shop_refresh_flag)
}

// -------------------------------------------------------------------

// RoleTreasurySaveData

// .idlepb.RoleTreasuryChestData treasury_chest_data = 1;
inline bool RoleTreasurySaveData::_internal_has_treasury_chest_data() const {
  return this != internal_default_instance() && _impl_.treasury_chest_data_ != nullptr;
}
inline bool RoleTreasurySaveData::has_treasury_chest_data() const {
  return _internal_has_treasury_chest_data();
}
inline void RoleTreasurySaveData::clear_treasury_chest_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.treasury_chest_data_ != nullptr) {
    delete _impl_.treasury_chest_data_;
  }
  _impl_.treasury_chest_data_ = nullptr;
}
inline const ::idlepb::RoleTreasuryChestData& RoleTreasurySaveData::_internal_treasury_chest_data() const {
  const ::idlepb::RoleTreasuryChestData* p = _impl_.treasury_chest_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleTreasuryChestData&>(
      ::idlepb::_RoleTreasuryChestData_default_instance_);
}
inline const ::idlepb::RoleTreasuryChestData& RoleTreasurySaveData::treasury_chest_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasurySaveData.treasury_chest_data)
  return _internal_treasury_chest_data();
}
inline void RoleTreasurySaveData::unsafe_arena_set_allocated_treasury_chest_data(
    ::idlepb::RoleTreasuryChestData* treasury_chest_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.treasury_chest_data_);
  }
  _impl_.treasury_chest_data_ = treasury_chest_data;
  if (treasury_chest_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleTreasurySaveData.treasury_chest_data)
}
inline ::idlepb::RoleTreasuryChestData* RoleTreasurySaveData::release_treasury_chest_data() {
  
  ::idlepb::RoleTreasuryChestData* temp = _impl_.treasury_chest_data_;
  _impl_.treasury_chest_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleTreasuryChestData* RoleTreasurySaveData::unsafe_arena_release_treasury_chest_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleTreasurySaveData.treasury_chest_data)
  
  ::idlepb::RoleTreasuryChestData* temp = _impl_.treasury_chest_data_;
  _impl_.treasury_chest_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleTreasuryChestData* RoleTreasurySaveData::_internal_mutable_treasury_chest_data() {
  
  if (_impl_.treasury_chest_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleTreasuryChestData>(GetArenaForAllocation());
    _impl_.treasury_chest_data_ = p;
  }
  return _impl_.treasury_chest_data_;
}
inline ::idlepb::RoleTreasuryChestData* RoleTreasurySaveData::mutable_treasury_chest_data() {
  ::idlepb::RoleTreasuryChestData* _msg = _internal_mutable_treasury_chest_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleTreasurySaveData.treasury_chest_data)
  return _msg;
}
inline void RoleTreasurySaveData::set_allocated_treasury_chest_data(::idlepb::RoleTreasuryChestData* treasury_chest_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.treasury_chest_data_;
  }
  if (treasury_chest_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(treasury_chest_data);
    if (message_arena != submessage_arena) {
      treasury_chest_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, treasury_chest_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.treasury_chest_data_ = treasury_chest_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleTreasurySaveData.treasury_chest_data)
}

// .idlepb.RoleTreasuryGachaData treasury_gacha_data = 2;
inline bool RoleTreasurySaveData::_internal_has_treasury_gacha_data() const {
  return this != internal_default_instance() && _impl_.treasury_gacha_data_ != nullptr;
}
inline bool RoleTreasurySaveData::has_treasury_gacha_data() const {
  return _internal_has_treasury_gacha_data();
}
inline void RoleTreasurySaveData::clear_treasury_gacha_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.treasury_gacha_data_ != nullptr) {
    delete _impl_.treasury_gacha_data_;
  }
  _impl_.treasury_gacha_data_ = nullptr;
}
inline const ::idlepb::RoleTreasuryGachaData& RoleTreasurySaveData::_internal_treasury_gacha_data() const {
  const ::idlepb::RoleTreasuryGachaData* p = _impl_.treasury_gacha_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleTreasuryGachaData&>(
      ::idlepb::_RoleTreasuryGachaData_default_instance_);
}
inline const ::idlepb::RoleTreasuryGachaData& RoleTreasurySaveData::treasury_gacha_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasurySaveData.treasury_gacha_data)
  return _internal_treasury_gacha_data();
}
inline void RoleTreasurySaveData::unsafe_arena_set_allocated_treasury_gacha_data(
    ::idlepb::RoleTreasuryGachaData* treasury_gacha_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.treasury_gacha_data_);
  }
  _impl_.treasury_gacha_data_ = treasury_gacha_data;
  if (treasury_gacha_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleTreasurySaveData.treasury_gacha_data)
}
inline ::idlepb::RoleTreasuryGachaData* RoleTreasurySaveData::release_treasury_gacha_data() {
  
  ::idlepb::RoleTreasuryGachaData* temp = _impl_.treasury_gacha_data_;
  _impl_.treasury_gacha_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleTreasuryGachaData* RoleTreasurySaveData::unsafe_arena_release_treasury_gacha_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleTreasurySaveData.treasury_gacha_data)
  
  ::idlepb::RoleTreasuryGachaData* temp = _impl_.treasury_gacha_data_;
  _impl_.treasury_gacha_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleTreasuryGachaData* RoleTreasurySaveData::_internal_mutable_treasury_gacha_data() {
  
  if (_impl_.treasury_gacha_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleTreasuryGachaData>(GetArenaForAllocation());
    _impl_.treasury_gacha_data_ = p;
  }
  return _impl_.treasury_gacha_data_;
}
inline ::idlepb::RoleTreasuryGachaData* RoleTreasurySaveData::mutable_treasury_gacha_data() {
  ::idlepb::RoleTreasuryGachaData* _msg = _internal_mutable_treasury_gacha_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleTreasurySaveData.treasury_gacha_data)
  return _msg;
}
inline void RoleTreasurySaveData::set_allocated_treasury_gacha_data(::idlepb::RoleTreasuryGachaData* treasury_gacha_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.treasury_gacha_data_;
  }
  if (treasury_gacha_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(treasury_gacha_data);
    if (message_arena != submessage_arena) {
      treasury_gacha_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, treasury_gacha_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.treasury_gacha_data_ = treasury_gacha_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleTreasurySaveData.treasury_gacha_data)
}

// .idlepb.RoleTreasuryShopData treasury_shop_data = 3;
inline bool RoleTreasurySaveData::_internal_has_treasury_shop_data() const {
  return this != internal_default_instance() && _impl_.treasury_shop_data_ != nullptr;
}
inline bool RoleTreasurySaveData::has_treasury_shop_data() const {
  return _internal_has_treasury_shop_data();
}
inline void RoleTreasurySaveData::clear_treasury_shop_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.treasury_shop_data_ != nullptr) {
    delete _impl_.treasury_shop_data_;
  }
  _impl_.treasury_shop_data_ = nullptr;
}
inline const ::idlepb::RoleTreasuryShopData& RoleTreasurySaveData::_internal_treasury_shop_data() const {
  const ::idlepb::RoleTreasuryShopData* p = _impl_.treasury_shop_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleTreasuryShopData&>(
      ::idlepb::_RoleTreasuryShopData_default_instance_);
}
inline const ::idlepb::RoleTreasuryShopData& RoleTreasurySaveData::treasury_shop_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasurySaveData.treasury_shop_data)
  return _internal_treasury_shop_data();
}
inline void RoleTreasurySaveData::unsafe_arena_set_allocated_treasury_shop_data(
    ::idlepb::RoleTreasuryShopData* treasury_shop_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.treasury_shop_data_);
  }
  _impl_.treasury_shop_data_ = treasury_shop_data;
  if (treasury_shop_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleTreasurySaveData.treasury_shop_data)
}
inline ::idlepb::RoleTreasuryShopData* RoleTreasurySaveData::release_treasury_shop_data() {
  
  ::idlepb::RoleTreasuryShopData* temp = _impl_.treasury_shop_data_;
  _impl_.treasury_shop_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleTreasuryShopData* RoleTreasurySaveData::unsafe_arena_release_treasury_shop_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleTreasurySaveData.treasury_shop_data)
  
  ::idlepb::RoleTreasuryShopData* temp = _impl_.treasury_shop_data_;
  _impl_.treasury_shop_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleTreasuryShopData* RoleTreasurySaveData::_internal_mutable_treasury_shop_data() {
  
  if (_impl_.treasury_shop_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleTreasuryShopData>(GetArenaForAllocation());
    _impl_.treasury_shop_data_ = p;
  }
  return _impl_.treasury_shop_data_;
}
inline ::idlepb::RoleTreasuryShopData* RoleTreasurySaveData::mutable_treasury_shop_data() {
  ::idlepb::RoleTreasuryShopData* _msg = _internal_mutable_treasury_shop_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleTreasurySaveData.treasury_shop_data)
  return _msg;
}
inline void RoleTreasurySaveData::set_allocated_treasury_shop_data(::idlepb::RoleTreasuryShopData* treasury_shop_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.treasury_shop_data_;
  }
  if (treasury_shop_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(treasury_shop_data);
    if (message_arena != submessage_arena) {
      treasury_shop_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, treasury_shop_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.treasury_shop_data_ = treasury_shop_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleTreasurySaveData.treasury_shop_data)
}

// int64 last_reset_time = 6;
inline void RoleTreasurySaveData::clear_last_reset_time() {
  _impl_.last_reset_time_ = int64_t{0};
}
inline int64_t RoleTreasurySaveData::_internal_last_reset_time() const {
  return _impl_.last_reset_time_;
}
inline int64_t RoleTreasurySaveData::last_reset_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleTreasurySaveData.last_reset_time)
  return _internal_last_reset_time();
}
inline void RoleTreasurySaveData::_internal_set_last_reset_time(int64_t value) {
  
  _impl_.last_reset_time_ = value;
}
inline void RoleTreasurySaveData::set_last_reset_time(int64_t value) {
  _internal_set_last_reset_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleTreasurySaveData.last_reset_time)
}

// -------------------------------------------------------------------

// ArenaCheckListData

// int32 checklist_id = 1;
inline void ArenaCheckListData::clear_checklist_id() {
  _impl_.checklist_id_ = 0;
}
inline int32_t ArenaCheckListData::_internal_checklist_id() const {
  return _impl_.checklist_id_;
}
inline int32_t ArenaCheckListData::checklist_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ArenaCheckListData.checklist_id)
  return _internal_checklist_id();
}
inline void ArenaCheckListData::_internal_set_checklist_id(int32_t value) {
  
  _impl_.checklist_id_ = value;
}
inline void ArenaCheckListData::set_checklist_id(int32_t value) {
  _internal_set_checklist_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ArenaCheckListData.checklist_id)
}

// int32 checklist_num = 2;
inline void ArenaCheckListData::clear_checklist_num() {
  _impl_.checklist_num_ = 0;
}
inline int32_t ArenaCheckListData::_internal_checklist_num() const {
  return _impl_.checklist_num_;
}
inline int32_t ArenaCheckListData::checklist_num() const {
  // @@protoc_insertion_point(field_get:idlepb.ArenaCheckListData.checklist_num)
  return _internal_checklist_num();
}
inline void ArenaCheckListData::_internal_set_checklist_num(int32_t value) {
  
  _impl_.checklist_num_ = value;
}
inline void ArenaCheckListData::set_checklist_num(int32_t value) {
  _internal_set_checklist_num(value);
  // @@protoc_insertion_point(field_set:idlepb.ArenaCheckListData.checklist_num)
}

// .idlepb.ArenaCheckListState checklist_state = 3;
inline void ArenaCheckListData::clear_checklist_state() {
  _impl_.checklist_state_ = 0;
}
inline ::idlepb::ArenaCheckListState ArenaCheckListData::_internal_checklist_state() const {
  return static_cast< ::idlepb::ArenaCheckListState >(_impl_.checklist_state_);
}
inline ::idlepb::ArenaCheckListState ArenaCheckListData::checklist_state() const {
  // @@protoc_insertion_point(field_get:idlepb.ArenaCheckListData.checklist_state)
  return _internal_checklist_state();
}
inline void ArenaCheckListData::_internal_set_checklist_state(::idlepb::ArenaCheckListState value) {
  
  _impl_.checklist_state_ = value;
}
inline void ArenaCheckListData::set_checklist_state(::idlepb::ArenaCheckListState value) {
  _internal_set_checklist_state(value);
  // @@protoc_insertion_point(field_set:idlepb.ArenaCheckListData.checklist_state)
}

// -------------------------------------------------------------------

// ArenaCheckListRewardData

// int32 reward_id = 1;
inline void ArenaCheckListRewardData::clear_reward_id() {
  _impl_.reward_id_ = 0;
}
inline int32_t ArenaCheckListRewardData::_internal_reward_id() const {
  return _impl_.reward_id_;
}
inline int32_t ArenaCheckListRewardData::reward_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ArenaCheckListRewardData.reward_id)
  return _internal_reward_id();
}
inline void ArenaCheckListRewardData::_internal_set_reward_id(int32_t value) {
  
  _impl_.reward_id_ = value;
}
inline void ArenaCheckListRewardData::set_reward_id(int32_t value) {
  _internal_set_reward_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ArenaCheckListRewardData.reward_id)
}

// .idlepb.ArenaCheckListRewardState reward_state = 2;
inline void ArenaCheckListRewardData::clear_reward_state() {
  _impl_.reward_state_ = 0;
}
inline ::idlepb::ArenaCheckListRewardState ArenaCheckListRewardData::_internal_reward_state() const {
  return static_cast< ::idlepb::ArenaCheckListRewardState >(_impl_.reward_state_);
}
inline ::idlepb::ArenaCheckListRewardState ArenaCheckListRewardData::reward_state() const {
  // @@protoc_insertion_point(field_get:idlepb.ArenaCheckListRewardData.reward_state)
  return _internal_reward_state();
}
inline void ArenaCheckListRewardData::_internal_set_reward_state(::idlepb::ArenaCheckListRewardState value) {
  
  _impl_.reward_state_ = value;
}
inline void ArenaCheckListRewardData::set_reward_state(::idlepb::ArenaCheckListRewardState value) {
  _internal_set_reward_state(value);
  // @@protoc_insertion_point(field_set:idlepb.ArenaCheckListRewardData.reward_state)
}

// -------------------------------------------------------------------

// RoleArenaCheckListData

// repeated .idlepb.ArenaCheckListData arena_check_data = 1;
inline int RoleArenaCheckListData::_internal_arena_check_data_size() const {
  return _impl_.arena_check_data_.size();
}
inline int RoleArenaCheckListData::arena_check_data_size() const {
  return _internal_arena_check_data_size();
}
inline void RoleArenaCheckListData::clear_arena_check_data() {
  _impl_.arena_check_data_.Clear();
}
inline ::idlepb::ArenaCheckListData* RoleArenaCheckListData::mutable_arena_check_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleArenaCheckListData.arena_check_data)
  return _impl_.arena_check_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaCheckListData >*
RoleArenaCheckListData::mutable_arena_check_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleArenaCheckListData.arena_check_data)
  return &_impl_.arena_check_data_;
}
inline const ::idlepb::ArenaCheckListData& RoleArenaCheckListData::_internal_arena_check_data(int index) const {
  return _impl_.arena_check_data_.Get(index);
}
inline const ::idlepb::ArenaCheckListData& RoleArenaCheckListData::arena_check_data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleArenaCheckListData.arena_check_data)
  return _internal_arena_check_data(index);
}
inline ::idlepb::ArenaCheckListData* RoleArenaCheckListData::_internal_add_arena_check_data() {
  return _impl_.arena_check_data_.Add();
}
inline ::idlepb::ArenaCheckListData* RoleArenaCheckListData::add_arena_check_data() {
  ::idlepb::ArenaCheckListData* _add = _internal_add_arena_check_data();
  // @@protoc_insertion_point(field_add:idlepb.RoleArenaCheckListData.arena_check_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaCheckListData >&
RoleArenaCheckListData::arena_check_data() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleArenaCheckListData.arena_check_data)
  return _impl_.arena_check_data_;
}

// repeated .idlepb.ArenaCheckListRewardData check_reward_data = 2;
inline int RoleArenaCheckListData::_internal_check_reward_data_size() const {
  return _impl_.check_reward_data_.size();
}
inline int RoleArenaCheckListData::check_reward_data_size() const {
  return _internal_check_reward_data_size();
}
inline void RoleArenaCheckListData::clear_check_reward_data() {
  _impl_.check_reward_data_.Clear();
}
inline ::idlepb::ArenaCheckListRewardData* RoleArenaCheckListData::mutable_check_reward_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleArenaCheckListData.check_reward_data)
  return _impl_.check_reward_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaCheckListRewardData >*
RoleArenaCheckListData::mutable_check_reward_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleArenaCheckListData.check_reward_data)
  return &_impl_.check_reward_data_;
}
inline const ::idlepb::ArenaCheckListRewardData& RoleArenaCheckListData::_internal_check_reward_data(int index) const {
  return _impl_.check_reward_data_.Get(index);
}
inline const ::idlepb::ArenaCheckListRewardData& RoleArenaCheckListData::check_reward_data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleArenaCheckListData.check_reward_data)
  return _internal_check_reward_data(index);
}
inline ::idlepb::ArenaCheckListRewardData* RoleArenaCheckListData::_internal_add_check_reward_data() {
  return _impl_.check_reward_data_.Add();
}
inline ::idlepb::ArenaCheckListRewardData* RoleArenaCheckListData::add_check_reward_data() {
  ::idlepb::ArenaCheckListRewardData* _add = _internal_add_check_reward_data();
  // @@protoc_insertion_point(field_add:idlepb.RoleArenaCheckListData.check_reward_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ArenaCheckListRewardData >&
RoleArenaCheckListData::check_reward_data() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleArenaCheckListData.check_reward_data)
  return _impl_.check_reward_data_;
}

// -------------------------------------------------------------------

// RoleSeptInviteEntry

// .idlepb.SeptPosition position = 1;
inline void RoleSeptInviteEntry::clear_position() {
  _impl_.position_ = 0;
}
inline ::idlepb::SeptPosition RoleSeptInviteEntry::_internal_position() const {
  return static_cast< ::idlepb::SeptPosition >(_impl_.position_);
}
inline ::idlepb::SeptPosition RoleSeptInviteEntry::position() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptInviteEntry.position)
  return _internal_position();
}
inline void RoleSeptInviteEntry::_internal_set_position(::idlepb::SeptPosition value) {
  
  _impl_.position_ = value;
}
inline void RoleSeptInviteEntry::set_position(::idlepb::SeptPosition value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptInviteEntry.position)
}

// int32 num = 2;
inline void RoleSeptInviteEntry::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t RoleSeptInviteEntry::_internal_num() const {
  return _impl_.num_;
}
inline int32_t RoleSeptInviteEntry::num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptInviteEntry.num)
  return _internal_num();
}
inline void RoleSeptInviteEntry::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void RoleSeptInviteEntry::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptInviteEntry.num)
}

// -------------------------------------------------------------------

// SeptQuest

// int32 uid = 4;
inline void SeptQuest::clear_uid() {
  _impl_.uid_ = 0;
}
inline int32_t SeptQuest::_internal_uid() const {
  return _impl_.uid_;
}
inline int32_t SeptQuest::uid() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptQuest.uid)
  return _internal_uid();
}
inline void SeptQuest::_internal_set_uid(int32_t value) {
  
  _impl_.uid_ = value;
}
inline void SeptQuest::set_uid(int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptQuest.uid)
}

// int32 quest_id = 1;
inline void SeptQuest::clear_quest_id() {
  _impl_.quest_id_ = 0;
}
inline int32_t SeptQuest::_internal_quest_id() const {
  return _impl_.quest_id_;
}
inline int32_t SeptQuest::quest_id() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptQuest.quest_id)
  return _internal_quest_id();
}
inline void SeptQuest::_internal_set_quest_id(int32_t value) {
  
  _impl_.quest_id_ = value;
}
inline void SeptQuest::set_quest_id(int32_t value) {
  _internal_set_quest_id(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptQuest.quest_id)
}

// int64 begin_time = 2;
inline void SeptQuest::clear_begin_time() {
  _impl_.begin_time_ = int64_t{0};
}
inline int64_t SeptQuest::_internal_begin_time() const {
  return _impl_.begin_time_;
}
inline int64_t SeptQuest::begin_time() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptQuest.begin_time)
  return _internal_begin_time();
}
inline void SeptQuest::_internal_set_begin_time(int64_t value) {
  
  _impl_.begin_time_ = value;
}
inline void SeptQuest::set_begin_time(int64_t value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptQuest.begin_time)
}

// bool received = 3;
inline void SeptQuest::clear_received() {
  _impl_.received_ = false;
}
inline bool SeptQuest::_internal_received() const {
  return _impl_.received_;
}
inline bool SeptQuest::received() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptQuest.received)
  return _internal_received();
}
inline void SeptQuest::_internal_set_received(bool value) {
  
  _impl_.received_ = value;
}
inline void SeptQuest::set_received(bool value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptQuest.received)
}

// int32 level = 11;
inline void SeptQuest::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t SeptQuest::_internal_level() const {
  return _impl_.level_;
}
inline int32_t SeptQuest::level() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptQuest.level)
  return _internal_level();
}
inline void SeptQuest::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void SeptQuest::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptQuest.level)
}

// int32 money_num = 12;
inline void SeptQuest::clear_money_num() {
  _impl_.money_num_ = 0;
}
inline int32_t SeptQuest::_internal_money_num() const {
  return _impl_.money_num_;
}
inline int32_t SeptQuest::money_num() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptQuest.money_num)
  return _internal_money_num();
}
inline void SeptQuest::_internal_set_money_num(int32_t value) {
  
  _impl_.money_num_ = value;
}
inline void SeptQuest::set_money_num(int32_t value) {
  _internal_set_money_num(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptQuest.money_num)
}

// -------------------------------------------------------------------

// RoleSeptQuestData

// repeated .idlepb.SeptQuest quests = 1;
inline int RoleSeptQuestData::_internal_quests_size() const {
  return _impl_.quests_.size();
}
inline int RoleSeptQuestData::quests_size() const {
  return _internal_quests_size();
}
inline void RoleSeptQuestData::clear_quests() {
  _impl_.quests_.Clear();
}
inline ::idlepb::SeptQuest* RoleSeptQuestData::mutable_quests(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSeptQuestData.quests)
  return _impl_.quests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptQuest >*
RoleSeptQuestData::mutable_quests() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleSeptQuestData.quests)
  return &_impl_.quests_;
}
inline const ::idlepb::SeptQuest& RoleSeptQuestData::_internal_quests(int index) const {
  return _impl_.quests_.Get(index);
}
inline const ::idlepb::SeptQuest& RoleSeptQuestData::quests(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptQuestData.quests)
  return _internal_quests(index);
}
inline ::idlepb::SeptQuest* RoleSeptQuestData::_internal_add_quests() {
  return _impl_.quests_.Add();
}
inline ::idlepb::SeptQuest* RoleSeptQuestData::add_quests() {
  ::idlepb::SeptQuest* _add = _internal_add_quests();
  // @@protoc_insertion_point(field_add:idlepb.RoleSeptQuestData.quests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptQuest >&
RoleSeptQuestData::quests() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleSeptQuestData.quests)
  return _impl_.quests_;
}

// int32 today_manual_refresh_num = 2;
inline void RoleSeptQuestData::clear_today_manual_refresh_num() {
  _impl_.today_manual_refresh_num_ = 0;
}
inline int32_t RoleSeptQuestData::_internal_today_manual_refresh_num() const {
  return _impl_.today_manual_refresh_num_;
}
inline int32_t RoleSeptQuestData::today_manual_refresh_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptQuestData.today_manual_refresh_num)
  return _internal_today_manual_refresh_num();
}
inline void RoleSeptQuestData::_internal_set_today_manual_refresh_num(int32_t value) {
  
  _impl_.today_manual_refresh_num_ = value;
}
inline void RoleSeptQuestData::set_today_manual_refresh_num(int32_t value) {
  _internal_set_today_manual_refresh_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptQuestData.today_manual_refresh_num)
}

// int32 level = 3;
inline void RoleSeptQuestData::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t RoleSeptQuestData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t RoleSeptQuestData::level() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptQuestData.level)
  return _internal_level();
}
inline void RoleSeptQuestData::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void RoleSeptQuestData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptQuestData.level)
}

// int32 current_exp = 4;
inline void RoleSeptQuestData::clear_current_exp() {
  _impl_.current_exp_ = 0;
}
inline int32_t RoleSeptQuestData::_internal_current_exp() const {
  return _impl_.current_exp_;
}
inline int32_t RoleSeptQuestData::current_exp() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptQuestData.current_exp)
  return _internal_current_exp();
}
inline void RoleSeptQuestData::_internal_set_current_exp(int32_t value) {
  
  _impl_.current_exp_ = value;
}
inline void RoleSeptQuestData::set_current_exp(int32_t value) {
  _internal_set_current_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptQuestData.current_exp)
}

// int32 total_num = 5;
inline void RoleSeptQuestData::clear_total_num() {
  _impl_.total_num_ = 0;
}
inline int32_t RoleSeptQuestData::_internal_total_num() const {
  return _impl_.total_num_;
}
inline int32_t RoleSeptQuestData::total_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptQuestData.total_num)
  return _internal_total_num();
}
inline void RoleSeptQuestData::_internal_set_total_num(int32_t value) {
  
  _impl_.total_num_ = value;
}
inline void RoleSeptQuestData::set_total_num(int32_t value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptQuestData.total_num)
}

// -------------------------------------------------------------------

// RoleSeptShopData

// int64 last_reset_time_sept_shop = 1;
inline void RoleSeptShopData::clear_last_reset_time_sept_shop() {
  _impl_.last_reset_time_sept_shop_ = int64_t{0};
}
inline int64_t RoleSeptShopData::_internal_last_reset_time_sept_shop() const {
  return _impl_.last_reset_time_sept_shop_;
}
inline int64_t RoleSeptShopData::last_reset_time_sept_shop() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptShopData.last_reset_time_sept_shop)
  return _internal_last_reset_time_sept_shop();
}
inline void RoleSeptShopData::_internal_set_last_reset_time_sept_shop(int64_t value) {
  
  _impl_.last_reset_time_sept_shop_ = value;
}
inline void RoleSeptShopData::set_last_reset_time_sept_shop(int64_t value) {
  _internal_set_last_reset_time_sept_shop(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptShopData.last_reset_time_sept_shop)
}

// repeated .idlepb.SimpleItemData exchange_history = 2;
inline int RoleSeptShopData::_internal_exchange_history_size() const {
  return _impl_.exchange_history_.size();
}
inline int RoleSeptShopData::exchange_history_size() const {
  return _internal_exchange_history_size();
}
inline void RoleSeptShopData::clear_exchange_history() {
  _impl_.exchange_history_.Clear();
}
inline ::idlepb::SimpleItemData* RoleSeptShopData::mutable_exchange_history(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSeptShopData.exchange_history)
  return _impl_.exchange_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >*
RoleSeptShopData::mutable_exchange_history() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleSeptShopData.exchange_history)
  return &_impl_.exchange_history_;
}
inline const ::idlepb::SimpleItemData& RoleSeptShopData::_internal_exchange_history(int index) const {
  return _impl_.exchange_history_.Get(index);
}
inline const ::idlepb::SimpleItemData& RoleSeptShopData::exchange_history(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptShopData.exchange_history)
  return _internal_exchange_history(index);
}
inline ::idlepb::SimpleItemData* RoleSeptShopData::_internal_add_exchange_history() {
  return _impl_.exchange_history_.Add();
}
inline ::idlepb::SimpleItemData* RoleSeptShopData::add_exchange_history() {
  ::idlepb::SimpleItemData* _add = _internal_add_exchange_history();
  // @@protoc_insertion_point(field_add:idlepb.RoleSeptShopData.exchange_history)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >&
RoleSeptShopData::exchange_history() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleSeptShopData.exchange_history)
  return _impl_.exchange_history_;
}

// -------------------------------------------------------------------

// RoleSeptData

// int64 next_join_ticks = 1;
inline void RoleSeptData::clear_next_join_ticks() {
  _impl_.next_join_ticks_ = int64_t{0};
}
inline int64_t RoleSeptData::_internal_next_join_ticks() const {
  return _impl_.next_join_ticks_;
}
inline int64_t RoleSeptData::next_join_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptData.next_join_ticks)
  return _internal_next_join_ticks();
}
inline void RoleSeptData::_internal_set_next_join_ticks(int64_t value) {
  
  _impl_.next_join_ticks_ = value;
}
inline void RoleSeptData::set_next_join_ticks(int64_t value) {
  _internal_set_next_join_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptData.next_join_ticks)
}

// repeated .idlepb.RoleSeptInviteEntry daily_invite_entries = 2;
inline int RoleSeptData::_internal_daily_invite_entries_size() const {
  return _impl_.daily_invite_entries_.size();
}
inline int RoleSeptData::daily_invite_entries_size() const {
  return _internal_daily_invite_entries_size();
}
inline void RoleSeptData::clear_daily_invite_entries() {
  _impl_.daily_invite_entries_.Clear();
}
inline ::idlepb::RoleSeptInviteEntry* RoleSeptData::mutable_daily_invite_entries(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSeptData.daily_invite_entries)
  return _impl_.daily_invite_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleSeptInviteEntry >*
RoleSeptData::mutable_daily_invite_entries() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleSeptData.daily_invite_entries)
  return &_impl_.daily_invite_entries_;
}
inline const ::idlepb::RoleSeptInviteEntry& RoleSeptData::_internal_daily_invite_entries(int index) const {
  return _impl_.daily_invite_entries_.Get(index);
}
inline const ::idlepb::RoleSeptInviteEntry& RoleSeptData::daily_invite_entries(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptData.daily_invite_entries)
  return _internal_daily_invite_entries(index);
}
inline ::idlepb::RoleSeptInviteEntry* RoleSeptData::_internal_add_daily_invite_entries() {
  return _impl_.daily_invite_entries_.Add();
}
inline ::idlepb::RoleSeptInviteEntry* RoleSeptData::add_daily_invite_entries() {
  ::idlepb::RoleSeptInviteEntry* _add = _internal_add_daily_invite_entries();
  // @@protoc_insertion_point(field_add:idlepb.RoleSeptData.daily_invite_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleSeptInviteEntry >&
RoleSeptData::daily_invite_entries() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleSeptData.daily_invite_entries)
  return _impl_.daily_invite_entries_;
}

// .idlepb.RoleSeptShopData sept_shop_data = 6;
inline bool RoleSeptData::_internal_has_sept_shop_data() const {
  return this != internal_default_instance() && _impl_.sept_shop_data_ != nullptr;
}
inline bool RoleSeptData::has_sept_shop_data() const {
  return _internal_has_sept_shop_data();
}
inline void RoleSeptData::clear_sept_shop_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.sept_shop_data_ != nullptr) {
    delete _impl_.sept_shop_data_;
  }
  _impl_.sept_shop_data_ = nullptr;
}
inline const ::idlepb::RoleSeptShopData& RoleSeptData::_internal_sept_shop_data() const {
  const ::idlepb::RoleSeptShopData* p = _impl_.sept_shop_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleSeptShopData&>(
      ::idlepb::_RoleSeptShopData_default_instance_);
}
inline const ::idlepb::RoleSeptShopData& RoleSeptData::sept_shop_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptData.sept_shop_data)
  return _internal_sept_shop_data();
}
inline void RoleSeptData::unsafe_arena_set_allocated_sept_shop_data(
    ::idlepb::RoleSeptShopData* sept_shop_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sept_shop_data_);
  }
  _impl_.sept_shop_data_ = sept_shop_data;
  if (sept_shop_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSeptData.sept_shop_data)
}
inline ::idlepb::RoleSeptShopData* RoleSeptData::release_sept_shop_data() {
  
  ::idlepb::RoleSeptShopData* temp = _impl_.sept_shop_data_;
  _impl_.sept_shop_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleSeptShopData* RoleSeptData::unsafe_arena_release_sept_shop_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSeptData.sept_shop_data)
  
  ::idlepb::RoleSeptShopData* temp = _impl_.sept_shop_data_;
  _impl_.sept_shop_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleSeptShopData* RoleSeptData::_internal_mutable_sept_shop_data() {
  
  if (_impl_.sept_shop_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleSeptShopData>(GetArenaForAllocation());
    _impl_.sept_shop_data_ = p;
  }
  return _impl_.sept_shop_data_;
}
inline ::idlepb::RoleSeptShopData* RoleSeptData::mutable_sept_shop_data() {
  ::idlepb::RoleSeptShopData* _msg = _internal_mutable_sept_shop_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSeptData.sept_shop_data)
  return _msg;
}
inline void RoleSeptData::set_allocated_sept_shop_data(::idlepb::RoleSeptShopData* sept_shop_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sept_shop_data_;
  }
  if (sept_shop_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sept_shop_data);
    if (message_arena != submessage_arena) {
      sept_shop_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sept_shop_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sept_shop_data_ = sept_shop_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSeptData.sept_shop_data)
}

// .idlepb.RoleSeptQuestData sept_quest_data = 11;
inline bool RoleSeptData::_internal_has_sept_quest_data() const {
  return this != internal_default_instance() && _impl_.sept_quest_data_ != nullptr;
}
inline bool RoleSeptData::has_sept_quest_data() const {
  return _internal_has_sept_quest_data();
}
inline void RoleSeptData::clear_sept_quest_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.sept_quest_data_ != nullptr) {
    delete _impl_.sept_quest_data_;
  }
  _impl_.sept_quest_data_ = nullptr;
}
inline const ::idlepb::RoleSeptQuestData& RoleSeptData::_internal_sept_quest_data() const {
  const ::idlepb::RoleSeptQuestData* p = _impl_.sept_quest_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleSeptQuestData&>(
      ::idlepb::_RoleSeptQuestData_default_instance_);
}
inline const ::idlepb::RoleSeptQuestData& RoleSeptData::sept_quest_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptData.sept_quest_data)
  return _internal_sept_quest_data();
}
inline void RoleSeptData::unsafe_arena_set_allocated_sept_quest_data(
    ::idlepb::RoleSeptQuestData* sept_quest_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sept_quest_data_);
  }
  _impl_.sept_quest_data_ = sept_quest_data;
  if (sept_quest_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSeptData.sept_quest_data)
}
inline ::idlepb::RoleSeptQuestData* RoleSeptData::release_sept_quest_data() {
  
  ::idlepb::RoleSeptQuestData* temp = _impl_.sept_quest_data_;
  _impl_.sept_quest_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleSeptQuestData* RoleSeptData::unsafe_arena_release_sept_quest_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSeptData.sept_quest_data)
  
  ::idlepb::RoleSeptQuestData* temp = _impl_.sept_quest_data_;
  _impl_.sept_quest_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleSeptQuestData* RoleSeptData::_internal_mutable_sept_quest_data() {
  
  if (_impl_.sept_quest_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleSeptQuestData>(GetArenaForAllocation());
    _impl_.sept_quest_data_ = p;
  }
  return _impl_.sept_quest_data_;
}
inline ::idlepb::RoleSeptQuestData* RoleSeptData::mutable_sept_quest_data() {
  ::idlepb::RoleSeptQuestData* _msg = _internal_mutable_sept_quest_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSeptData.sept_quest_data)
  return _msg;
}
inline void RoleSeptData::set_allocated_sept_quest_data(::idlepb::RoleSeptQuestData* sept_quest_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sept_quest_data_;
  }
  if (sept_quest_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sept_quest_data);
    if (message_arena != submessage_arena) {
      sept_quest_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sept_quest_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sept_quest_data_ = sept_quest_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSeptData.sept_quest_data)
}

// int32 sept_demon_cumulative_time = 12;
inline void RoleSeptData::clear_sept_demon_cumulative_time() {
  _impl_.sept_demon_cumulative_time_ = 0;
}
inline int32_t RoleSeptData::_internal_sept_demon_cumulative_time() const {
  return _impl_.sept_demon_cumulative_time_;
}
inline int32_t RoleSeptData::sept_demon_cumulative_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptData.sept_demon_cumulative_time)
  return _internal_sept_demon_cumulative_time();
}
inline void RoleSeptData::_internal_set_sept_demon_cumulative_time(int32_t value) {
  
  _impl_.sept_demon_cumulative_time_ = value;
}
inline void RoleSeptData::set_sept_demon_cumulative_time(int32_t value) {
  _internal_set_sept_demon_cumulative_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptData.sept_demon_cumulative_time)
}

// int32 sept_demon_stage_reward_num = 13;
inline void RoleSeptData::clear_sept_demon_stage_reward_num() {
  _impl_.sept_demon_stage_reward_num_ = 0;
}
inline int32_t RoleSeptData::_internal_sept_demon_stage_reward_num() const {
  return _impl_.sept_demon_stage_reward_num_;
}
inline int32_t RoleSeptData::sept_demon_stage_reward_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptData.sept_demon_stage_reward_num)
  return _internal_sept_demon_stage_reward_num();
}
inline void RoleSeptData::_internal_set_sept_demon_stage_reward_num(int32_t value) {
  
  _impl_.sept_demon_stage_reward_num_ = value;
}
inline void RoleSeptData::set_sept_demon_stage_reward_num(int32_t value) {
  _internal_set_sept_demon_stage_reward_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptData.sept_demon_stage_reward_num)
}

// int32 sept_demon_stage_reward_use_num = 14;
inline void RoleSeptData::clear_sept_demon_stage_reward_use_num() {
  _impl_.sept_demon_stage_reward_use_num_ = 0;
}
inline int32_t RoleSeptData::_internal_sept_demon_stage_reward_use_num() const {
  return _impl_.sept_demon_stage_reward_use_num_;
}
inline int32_t RoleSeptData::sept_demon_stage_reward_use_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptData.sept_demon_stage_reward_use_num)
  return _internal_sept_demon_stage_reward_use_num();
}
inline void RoleSeptData::_internal_set_sept_demon_stage_reward_use_num(int32_t value) {
  
  _impl_.sept_demon_stage_reward_use_num_ = value;
}
inline void RoleSeptData::set_sept_demon_stage_reward_use_num(int32_t value) {
  _internal_set_sept_demon_stage_reward_use_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptData.sept_demon_stage_reward_use_num)
}

// repeated int32 sept_demon_damage_reward_received = 15;
inline int RoleSeptData::_internal_sept_demon_damage_reward_received_size() const {
  return _impl_.sept_demon_damage_reward_received_.size();
}
inline int RoleSeptData::sept_demon_damage_reward_received_size() const {
  return _internal_sept_demon_damage_reward_received_size();
}
inline void RoleSeptData::clear_sept_demon_damage_reward_received() {
  _impl_.sept_demon_damage_reward_received_.Clear();
}
inline int32_t RoleSeptData::_internal_sept_demon_damage_reward_received(int index) const {
  return _impl_.sept_demon_damage_reward_received_.Get(index);
}
inline int32_t RoleSeptData::sept_demon_damage_reward_received(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptData.sept_demon_damage_reward_received)
  return _internal_sept_demon_damage_reward_received(index);
}
inline void RoleSeptData::set_sept_demon_damage_reward_received(int index, int32_t value) {
  _impl_.sept_demon_damage_reward_received_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptData.sept_demon_damage_reward_received)
}
inline void RoleSeptData::_internal_add_sept_demon_damage_reward_received(int32_t value) {
  _impl_.sept_demon_damage_reward_received_.Add(value);
}
inline void RoleSeptData::add_sept_demon_damage_reward_received(int32_t value) {
  _internal_add_sept_demon_damage_reward_received(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleSeptData.sept_demon_damage_reward_received)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleSeptData::_internal_sept_demon_damage_reward_received() const {
  return _impl_.sept_demon_damage_reward_received_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleSeptData::sept_demon_damage_reward_received() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleSeptData.sept_demon_damage_reward_received)
  return _internal_sept_demon_damage_reward_received();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleSeptData::_internal_mutable_sept_demon_damage_reward_received() {
  return &_impl_.sept_demon_damage_reward_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleSeptData::mutable_sept_demon_damage_reward_received() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleSeptData.sept_demon_damage_reward_received)
  return _internal_mutable_sept_demon_damage_reward_received();
}

// repeated int32 sept_demon_damage_reward_finished = 16;
inline int RoleSeptData::_internal_sept_demon_damage_reward_finished_size() const {
  return _impl_.sept_demon_damage_reward_finished_.size();
}
inline int RoleSeptData::sept_demon_damage_reward_finished_size() const {
  return _internal_sept_demon_damage_reward_finished_size();
}
inline void RoleSeptData::clear_sept_demon_damage_reward_finished() {
  _impl_.sept_demon_damage_reward_finished_.Clear();
}
inline int32_t RoleSeptData::_internal_sept_demon_damage_reward_finished(int index) const {
  return _impl_.sept_demon_damage_reward_finished_.Get(index);
}
inline int32_t RoleSeptData::sept_demon_damage_reward_finished(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSeptData.sept_demon_damage_reward_finished)
  return _internal_sept_demon_damage_reward_finished(index);
}
inline void RoleSeptData::set_sept_demon_damage_reward_finished(int index, int32_t value) {
  _impl_.sept_demon_damage_reward_finished_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSeptData.sept_demon_damage_reward_finished)
}
inline void RoleSeptData::_internal_add_sept_demon_damage_reward_finished(int32_t value) {
  _impl_.sept_demon_damage_reward_finished_.Add(value);
}
inline void RoleSeptData::add_sept_demon_damage_reward_finished(int32_t value) {
  _internal_add_sept_demon_damage_reward_finished(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleSeptData.sept_demon_damage_reward_finished)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleSeptData::_internal_sept_demon_damage_reward_finished() const {
  return _impl_.sept_demon_damage_reward_finished_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleSeptData::sept_demon_damage_reward_finished() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleSeptData.sept_demon_damage_reward_finished)
  return _internal_sept_demon_damage_reward_finished();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleSeptData::_internal_mutable_sept_demon_damage_reward_finished() {
  return &_impl_.sept_demon_damage_reward_finished_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleSeptData::mutable_sept_demon_damage_reward_finished() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleSeptData.sept_demon_damage_reward_finished)
  return _internal_mutable_sept_demon_damage_reward_finished();
}

// -------------------------------------------------------------------

// SeptDemonWorldData

// bool is_started = 1;
inline void SeptDemonWorldData::clear_is_started() {
  _impl_.is_started_ = false;
}
inline bool SeptDemonWorldData::_internal_is_started() const {
  return _impl_.is_started_;
}
inline bool SeptDemonWorldData::is_started() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonWorldData.is_started)
  return _internal_is_started();
}
inline void SeptDemonWorldData::_internal_set_is_started(bool value) {
  
  _impl_.is_started_ = value;
}
inline void SeptDemonWorldData::set_is_started(bool value) {
  _internal_set_is_started(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonWorldData.is_started)
}

// int64 cur_end_ticks = 2;
inline void SeptDemonWorldData::clear_cur_end_ticks() {
  _impl_.cur_end_ticks_ = int64_t{0};
}
inline int64_t SeptDemonWorldData::_internal_cur_end_ticks() const {
  return _impl_.cur_end_ticks_;
}
inline int64_t SeptDemonWorldData::cur_end_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonWorldData.cur_end_ticks)
  return _internal_cur_end_ticks();
}
inline void SeptDemonWorldData::_internal_set_cur_end_ticks(int64_t value) {
  
  _impl_.cur_end_ticks_ = value;
}
inline void SeptDemonWorldData::set_cur_end_ticks(int64_t value) {
  _internal_set_cur_end_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonWorldData.cur_end_ticks)
}

// int64 next_open_ticks = 3;
inline void SeptDemonWorldData::clear_next_open_ticks() {
  _impl_.next_open_ticks_ = int64_t{0};
}
inline int64_t SeptDemonWorldData::_internal_next_open_ticks() const {
  return _impl_.next_open_ticks_;
}
inline int64_t SeptDemonWorldData::next_open_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonWorldData.next_open_ticks)
  return _internal_next_open_ticks();
}
inline void SeptDemonWorldData::_internal_set_next_open_ticks(int64_t value) {
  
  _impl_.next_open_ticks_ = value;
}
inline void SeptDemonWorldData::set_next_open_ticks(int64_t value) {
  _internal_set_next_open_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonWorldData.next_open_ticks)
}

// int32 cur_stage = 4;
inline void SeptDemonWorldData::clear_cur_stage() {
  _impl_.cur_stage_ = 0;
}
inline int32_t SeptDemonWorldData::_internal_cur_stage() const {
  return _impl_.cur_stage_;
}
inline int32_t SeptDemonWorldData::cur_stage() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonWorldData.cur_stage)
  return _internal_cur_stage();
}
inline void SeptDemonWorldData::_internal_set_cur_stage(int32_t value) {
  
  _impl_.cur_stage_ = value;
}
inline void SeptDemonWorldData::set_cur_stage(int32_t value) {
  _internal_set_cur_stage(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonWorldData.cur_stage)
}

// float cur_stage_hp = 5;
inline void SeptDemonWorldData::clear_cur_stage_hp() {
  _impl_.cur_stage_hp_ = 0;
}
inline float SeptDemonWorldData::_internal_cur_stage_hp() const {
  return _impl_.cur_stage_hp_;
}
inline float SeptDemonWorldData::cur_stage_hp() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonWorldData.cur_stage_hp)
  return _internal_cur_stage_hp();
}
inline void SeptDemonWorldData::_internal_set_cur_stage_hp(float value) {
  
  _impl_.cur_stage_hp_ = value;
}
inline void SeptDemonWorldData::set_cur_stage_hp(float value) {
  _internal_set_cur_stage_hp(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonWorldData.cur_stage_hp)
}

// float cur_stage_maxhp = 6;
inline void SeptDemonWorldData::clear_cur_stage_maxhp() {
  _impl_.cur_stage_maxhp_ = 0;
}
inline float SeptDemonWorldData::_internal_cur_stage_maxhp() const {
  return _impl_.cur_stage_maxhp_;
}
inline float SeptDemonWorldData::cur_stage_maxhp() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonWorldData.cur_stage_maxhp)
  return _internal_cur_stage_maxhp();
}
inline void SeptDemonWorldData::_internal_set_cur_stage_maxhp(float value) {
  
  _impl_.cur_stage_maxhp_ = value;
}
inline void SeptDemonWorldData::set_cur_stage_maxhp(float value) {
  _internal_set_cur_stage_maxhp(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonWorldData.cur_stage_maxhp)
}

// int32 last_stage = 7;
inline void SeptDemonWorldData::clear_last_stage() {
  _impl_.last_stage_ = 0;
}
inline int32_t SeptDemonWorldData::_internal_last_stage() const {
  return _impl_.last_stage_;
}
inline int32_t SeptDemonWorldData::last_stage() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonWorldData.last_stage)
  return _internal_last_stage();
}
inline void SeptDemonWorldData::_internal_set_last_stage(int32_t value) {
  
  _impl_.last_stage_ = value;
}
inline void SeptDemonWorldData::set_last_stage(int32_t value) {
  _internal_set_last_stage(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonWorldData.last_stage)
}

// repeated int64 player_ids = 8;
inline int SeptDemonWorldData::_internal_player_ids_size() const {
  return _impl_.player_ids_.size();
}
inline int SeptDemonWorldData::player_ids_size() const {
  return _internal_player_ids_size();
}
inline void SeptDemonWorldData::clear_player_ids() {
  _impl_.player_ids_.Clear();
}
inline int64_t SeptDemonWorldData::_internal_player_ids(int index) const {
  return _impl_.player_ids_.Get(index);
}
inline int64_t SeptDemonWorldData::player_ids(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonWorldData.player_ids)
  return _internal_player_ids(index);
}
inline void SeptDemonWorldData::set_player_ids(int index, int64_t value) {
  _impl_.player_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonWorldData.player_ids)
}
inline void SeptDemonWorldData::_internal_add_player_ids(int64_t value) {
  _impl_.player_ids_.Add(value);
}
inline void SeptDemonWorldData::add_player_ids(int64_t value) {
  _internal_add_player_ids(value);
  // @@protoc_insertion_point(field_add:idlepb.SeptDemonWorldData.player_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SeptDemonWorldData::_internal_player_ids() const {
  return _impl_.player_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SeptDemonWorldData::player_ids() const {
  // @@protoc_insertion_point(field_list:idlepb.SeptDemonWorldData.player_ids)
  return _internal_player_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SeptDemonWorldData::_internal_mutable_player_ids() {
  return &_impl_.player_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SeptDemonWorldData::mutable_player_ids() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.SeptDemonWorldData.player_ids)
  return _internal_mutable_player_ids();
}

// -------------------------------------------------------------------

// SimpleCounter

// int32 id = 1;
inline void SimpleCounter::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SimpleCounter::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SimpleCounter::id() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleCounter.id)
  return _internal_id();
}
inline void SimpleCounter::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SimpleCounter::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleCounter.id)
}

// int64 num = 2;
inline void SimpleCounter::clear_num() {
  _impl_.num_ = int64_t{0};
}
inline int64_t SimpleCounter::_internal_num() const {
  return _impl_.num_;
}
inline int64_t SimpleCounter::num() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleCounter.num)
  return _internal_num();
}
inline void SimpleCounter::_internal_set_num(int64_t value) {
  
  _impl_.num_ = value;
}
inline void SimpleCounter::set_num(int64_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleCounter.num)
}

// -------------------------------------------------------------------

// FunctionCounter

// int32 function_type = 1;
inline void FunctionCounter::clear_function_type() {
  _impl_.function_type_ = 0;
}
inline int32_t FunctionCounter::_internal_function_type() const {
  return _impl_.function_type_;
}
inline int32_t FunctionCounter::function_type() const {
  // @@protoc_insertion_point(field_get:idlepb.FunctionCounter.function_type)
  return _internal_function_type();
}
inline void FunctionCounter::_internal_set_function_type(int32_t value) {
  
  _impl_.function_type_ = value;
}
inline void FunctionCounter::set_function_type(int32_t value) {
  _internal_set_function_type(value);
  // @@protoc_insertion_point(field_set:idlepb.FunctionCounter.function_type)
}

// repeated .idlepb.SimpleCounter counters = 2;
inline int FunctionCounter::_internal_counters_size() const {
  return _impl_.counters_.size();
}
inline int FunctionCounter::counters_size() const {
  return _internal_counters_size();
}
inline void FunctionCounter::clear_counters() {
  _impl_.counters_.Clear();
}
inline ::idlepb::SimpleCounter* FunctionCounter::mutable_counters(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.FunctionCounter.counters)
  return _impl_.counters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleCounter >*
FunctionCounter::mutable_counters() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.FunctionCounter.counters)
  return &_impl_.counters_;
}
inline const ::idlepb::SimpleCounter& FunctionCounter::_internal_counters(int index) const {
  return _impl_.counters_.Get(index);
}
inline const ::idlepb::SimpleCounter& FunctionCounter::counters(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.FunctionCounter.counters)
  return _internal_counters(index);
}
inline ::idlepb::SimpleCounter* FunctionCounter::_internal_add_counters() {
  return _impl_.counters_.Add();
}
inline ::idlepb::SimpleCounter* FunctionCounter::add_counters() {
  ::idlepb::SimpleCounter* _add = _internal_add_counters();
  // @@protoc_insertion_point(field_add:idlepb.FunctionCounter.counters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleCounter >&
FunctionCounter::counters() const {
  // @@protoc_insertion_point(field_list:idlepb.FunctionCounter.counters)
  return _impl_.counters_;
}

// -------------------------------------------------------------------

// RoleLifeCounterData

// repeated .idlepb.FunctionCounter function_counter = 2;
inline int RoleLifeCounterData::_internal_function_counter_size() const {
  return _impl_.function_counter_.size();
}
inline int RoleLifeCounterData::function_counter_size() const {
  return _internal_function_counter_size();
}
inline void RoleLifeCounterData::clear_function_counter() {
  _impl_.function_counter_.Clear();
}
inline ::idlepb::FunctionCounter* RoleLifeCounterData::mutable_function_counter(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleLifeCounterData.function_counter)
  return _impl_.function_counter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FunctionCounter >*
RoleLifeCounterData::mutable_function_counter() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleLifeCounterData.function_counter)
  return &_impl_.function_counter_;
}
inline const ::idlepb::FunctionCounter& RoleLifeCounterData::_internal_function_counter(int index) const {
  return _impl_.function_counter_.Get(index);
}
inline const ::idlepb::FunctionCounter& RoleLifeCounterData::function_counter(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleLifeCounterData.function_counter)
  return _internal_function_counter(index);
}
inline ::idlepb::FunctionCounter* RoleLifeCounterData::_internal_add_function_counter() {
  return _impl_.function_counter_.Add();
}
inline ::idlepb::FunctionCounter* RoleLifeCounterData::add_function_counter() {
  ::idlepb::FunctionCounter* _add = _internal_add_function_counter();
  // @@protoc_insertion_point(field_add:idlepb.RoleLifeCounterData.function_counter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FunctionCounter >&
RoleLifeCounterData::function_counter() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleLifeCounterData.function_counter)
  return _impl_.function_counter_;
}

// -------------------------------------------------------------------

// FarmlandManagementInfo

// int32 plant_uid = 1;
inline void FarmlandManagementInfo::clear_plant_uid() {
  _impl_.plant_uid_ = 0;
}
inline int32_t FarmlandManagementInfo::_internal_plant_uid() const {
  return _impl_.plant_uid_;
}
inline int32_t FarmlandManagementInfo::plant_uid() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandManagementInfo.plant_uid)
  return _internal_plant_uid();
}
inline void FarmlandManagementInfo::_internal_set_plant_uid(int32_t value) {
  
  _impl_.plant_uid_ = value;
}
inline void FarmlandManagementInfo::set_plant_uid(int32_t value) {
  _internal_set_plant_uid(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandManagementInfo.plant_uid)
}

// int32 target_stage = 2;
inline void FarmlandManagementInfo::clear_target_stage() {
  _impl_.target_stage_ = 0;
}
inline int32_t FarmlandManagementInfo::_internal_target_stage() const {
  return _impl_.target_stage_;
}
inline int32_t FarmlandManagementInfo::target_stage() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandManagementInfo.target_stage)
  return _internal_target_stage();
}
inline void FarmlandManagementInfo::_internal_set_target_stage(int32_t value) {
  
  _impl_.target_stage_ = value;
}
inline void FarmlandManagementInfo::set_target_stage(int32_t value) {
  _internal_set_target_stage(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandManagementInfo.target_stage)
}

// bool auto_seed = 3;
inline void FarmlandManagementInfo::clear_auto_seed() {
  _impl_.auto_seed_ = false;
}
inline bool FarmlandManagementInfo::_internal_auto_seed() const {
  return _impl_.auto_seed_;
}
inline bool FarmlandManagementInfo::auto_seed() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandManagementInfo.auto_seed)
  return _internal_auto_seed();
}
inline void FarmlandManagementInfo::_internal_set_auto_seed(bool value) {
  
  _impl_.auto_seed_ = value;
}
inline void FarmlandManagementInfo::set_auto_seed(bool value) {
  _internal_set_auto_seed(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandManagementInfo.auto_seed)
}

// bool auto_harvest = 4;
inline void FarmlandManagementInfo::clear_auto_harvest() {
  _impl_.auto_harvest_ = false;
}
inline bool FarmlandManagementInfo::_internal_auto_harvest() const {
  return _impl_.auto_harvest_;
}
inline bool FarmlandManagementInfo::auto_harvest() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandManagementInfo.auto_harvest)
  return _internal_auto_harvest();
}
inline void FarmlandManagementInfo::_internal_set_auto_harvest(bool value) {
  
  _impl_.auto_harvest_ = value;
}
inline void FarmlandManagementInfo::set_auto_harvest(bool value) {
  _internal_set_auto_harvest(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandManagementInfo.auto_harvest)
}

// -------------------------------------------------------------------

// FarmlandPlantData

// int32 plant_uid = 1;
inline void FarmlandPlantData::clear_plant_uid() {
  _impl_.plant_uid_ = 0;
}
inline int32_t FarmlandPlantData::_internal_plant_uid() const {
  return _impl_.plant_uid_;
}
inline int32_t FarmlandPlantData::plant_uid() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandPlantData.plant_uid)
  return _internal_plant_uid();
}
inline void FarmlandPlantData::_internal_set_plant_uid(int32_t value) {
  
  _impl_.plant_uid_ = value;
}
inline void FarmlandPlantData::set_plant_uid(int32_t value) {
  _internal_set_plant_uid(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandPlantData.plant_uid)
}

// int32 x = 2;
inline void FarmlandPlantData::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t FarmlandPlantData::_internal_x() const {
  return _impl_.x_;
}
inline int32_t FarmlandPlantData::x() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandPlantData.x)
  return _internal_x();
}
inline void FarmlandPlantData::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void FarmlandPlantData::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandPlantData.x)
}

// int32 y = 3;
inline void FarmlandPlantData::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t FarmlandPlantData::_internal_y() const {
  return _impl_.y_;
}
inline int32_t FarmlandPlantData::y() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandPlantData.y)
  return _internal_y();
}
inline void FarmlandPlantData::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void FarmlandPlantData::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandPlantData.y)
}

// int32 rotation = 4;
inline void FarmlandPlantData::clear_rotation() {
  _impl_.rotation_ = 0;
}
inline int32_t FarmlandPlantData::_internal_rotation() const {
  return _impl_.rotation_;
}
inline int32_t FarmlandPlantData::rotation() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandPlantData.rotation)
  return _internal_rotation();
}
inline void FarmlandPlantData::_internal_set_rotation(int32_t value) {
  
  _impl_.rotation_ = value;
}
inline void FarmlandPlantData::set_rotation(int32_t value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandPlantData.rotation)
}

// int32 config_id = 5;
inline void FarmlandPlantData::clear_config_id() {
  _impl_.config_id_ = 0;
}
inline int32_t FarmlandPlantData::_internal_config_id() const {
  return _impl_.config_id_;
}
inline int32_t FarmlandPlantData::config_id() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandPlantData.config_id)
  return _internal_config_id();
}
inline void FarmlandPlantData::_internal_set_config_id(int32_t value) {
  
  _impl_.config_id_ = value;
}
inline void FarmlandPlantData::set_config_id(int32_t value) {
  _internal_set_config_id(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandPlantData.config_id)
}

// int32 shenling = 6;
inline void FarmlandPlantData::clear_shenling() {
  _impl_.shenling_ = 0;
}
inline int32_t FarmlandPlantData::_internal_shenling() const {
  return _impl_.shenling_;
}
inline int32_t FarmlandPlantData::shenling() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandPlantData.shenling)
  return _internal_shenling();
}
inline void FarmlandPlantData::_internal_set_shenling(int32_t value) {
  
  _impl_.shenling_ = value;
}
inline void FarmlandPlantData::set_shenling(int32_t value) {
  _internal_set_shenling(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandPlantData.shenling)
}

// int64 begin_date = 7;
inline void FarmlandPlantData::clear_begin_date() {
  _impl_.begin_date_ = int64_t{0};
}
inline int64_t FarmlandPlantData::_internal_begin_date() const {
  return _impl_.begin_date_;
}
inline int64_t FarmlandPlantData::begin_date() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandPlantData.begin_date)
  return _internal_begin_date();
}
inline void FarmlandPlantData::_internal_set_begin_date(int64_t value) {
  
  _impl_.begin_date_ = value;
}
inline void FarmlandPlantData::set_begin_date(int64_t value) {
  _internal_set_begin_date(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandPlantData.begin_date)
}

// int32 speed_up = 8;
inline void FarmlandPlantData::clear_speed_up() {
  _impl_.speed_up_ = 0;
}
inline int32_t FarmlandPlantData::_internal_speed_up() const {
  return _impl_.speed_up_;
}
inline int32_t FarmlandPlantData::speed_up() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmlandPlantData.speed_up)
  return _internal_speed_up();
}
inline void FarmlandPlantData::_internal_set_speed_up(int32_t value) {
  
  _impl_.speed_up_ = value;
}
inline void FarmlandPlantData::set_speed_up(int32_t value) {
  _internal_set_speed_up(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmlandPlantData.speed_up)
}

// -------------------------------------------------------------------

// RoleFarmlandData

// repeated .idlepb.FarmlandPlantData current_plants = 1;
inline int RoleFarmlandData::_internal_current_plants_size() const {
  return _impl_.current_plants_.size();
}
inline int RoleFarmlandData::current_plants_size() const {
  return _internal_current_plants_size();
}
inline void RoleFarmlandData::clear_current_plants() {
  _impl_.current_plants_.Clear();
}
inline ::idlepb::FarmlandPlantData* RoleFarmlandData::mutable_current_plants(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleFarmlandData.current_plants)
  return _impl_.current_plants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FarmlandPlantData >*
RoleFarmlandData::mutable_current_plants() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleFarmlandData.current_plants)
  return &_impl_.current_plants_;
}
inline const ::idlepb::FarmlandPlantData& RoleFarmlandData::_internal_current_plants(int index) const {
  return _impl_.current_plants_.Get(index);
}
inline const ::idlepb::FarmlandPlantData& RoleFarmlandData::current_plants(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFarmlandData.current_plants)
  return _internal_current_plants(index);
}
inline ::idlepb::FarmlandPlantData* RoleFarmlandData::_internal_add_current_plants() {
  return _impl_.current_plants_.Add();
}
inline ::idlepb::FarmlandPlantData* RoleFarmlandData::add_current_plants() {
  ::idlepb::FarmlandPlantData* _add = _internal_add_current_plants();
  // @@protoc_insertion_point(field_add:idlepb.RoleFarmlandData.current_plants)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FarmlandPlantData >&
RoleFarmlandData::current_plants() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleFarmlandData.current_plants)
  return _impl_.current_plants_;
}

// repeated .idlepb.FarmlandManagementInfo managment_plan = 2;
inline int RoleFarmlandData::_internal_managment_plan_size() const {
  return _impl_.managment_plan_.size();
}
inline int RoleFarmlandData::managment_plan_size() const {
  return _internal_managment_plan_size();
}
inline void RoleFarmlandData::clear_managment_plan() {
  _impl_.managment_plan_.Clear();
}
inline ::idlepb::FarmlandManagementInfo* RoleFarmlandData::mutable_managment_plan(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleFarmlandData.managment_plan)
  return _impl_.managment_plan_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FarmlandManagementInfo >*
RoleFarmlandData::mutable_managment_plan() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleFarmlandData.managment_plan)
  return &_impl_.managment_plan_;
}
inline const ::idlepb::FarmlandManagementInfo& RoleFarmlandData::_internal_managment_plan(int index) const {
  return _impl_.managment_plan_.Get(index);
}
inline const ::idlepb::FarmlandManagementInfo& RoleFarmlandData::managment_plan(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFarmlandData.managment_plan)
  return _internal_managment_plan(index);
}
inline ::idlepb::FarmlandManagementInfo* RoleFarmlandData::_internal_add_managment_plan() {
  return _impl_.managment_plan_.Add();
}
inline ::idlepb::FarmlandManagementInfo* RoleFarmlandData::add_managment_plan() {
  ::idlepb::FarmlandManagementInfo* _add = _internal_add_managment_plan();
  // @@protoc_insertion_point(field_add:idlepb.RoleFarmlandData.managment_plan)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FarmlandManagementInfo >&
RoleFarmlandData::managment_plan() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleFarmlandData.managment_plan)
  return _impl_.managment_plan_;
}

// repeated .idlepb.Vector2 unlock_blocks = 3;
inline int RoleFarmlandData::_internal_unlock_blocks_size() const {
  return _impl_.unlock_blocks_.size();
}
inline int RoleFarmlandData::unlock_blocks_size() const {
  return _internal_unlock_blocks_size();
}
inline void RoleFarmlandData::clear_unlock_blocks() {
  _impl_.unlock_blocks_.Clear();
}
inline ::idlepb::Vector2* RoleFarmlandData::mutable_unlock_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleFarmlandData.unlock_blocks)
  return _impl_.unlock_blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Vector2 >*
RoleFarmlandData::mutable_unlock_blocks() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleFarmlandData.unlock_blocks)
  return &_impl_.unlock_blocks_;
}
inline const ::idlepb::Vector2& RoleFarmlandData::_internal_unlock_blocks(int index) const {
  return _impl_.unlock_blocks_.Get(index);
}
inline const ::idlepb::Vector2& RoleFarmlandData::unlock_blocks(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFarmlandData.unlock_blocks)
  return _internal_unlock_blocks(index);
}
inline ::idlepb::Vector2* RoleFarmlandData::_internal_add_unlock_blocks() {
  return _impl_.unlock_blocks_.Add();
}
inline ::idlepb::Vector2* RoleFarmlandData::add_unlock_blocks() {
  ::idlepb::Vector2* _add = _internal_add_unlock_blocks();
  // @@protoc_insertion_point(field_add:idlepb.RoleFarmlandData.unlock_blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Vector2 >&
RoleFarmlandData::unlock_blocks() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleFarmlandData.unlock_blocks)
  return _impl_.unlock_blocks_;
}

// int32 farmer_grade = 4;
inline void RoleFarmlandData::clear_farmer_grade() {
  _impl_.farmer_grade_ = 0;
}
inline int32_t RoleFarmlandData::_internal_farmer_grade() const {
  return _impl_.farmer_grade_;
}
inline int32_t RoleFarmlandData::farmer_grade() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFarmlandData.farmer_grade)
  return _internal_farmer_grade();
}
inline void RoleFarmlandData::_internal_set_farmer_grade(int32_t value) {
  
  _impl_.farmer_grade_ = value;
}
inline void RoleFarmlandData::set_farmer_grade(int32_t value) {
  _internal_set_farmer_grade(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleFarmlandData.farmer_grade)
}

// int32 farmer_friendship_exp = 5;
inline void RoleFarmlandData::clear_farmer_friendship_exp() {
  _impl_.farmer_friendship_exp_ = 0;
}
inline int32_t RoleFarmlandData::_internal_farmer_friendship_exp() const {
  return _impl_.farmer_friendship_exp_;
}
inline int32_t RoleFarmlandData::farmer_friendship_exp() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFarmlandData.farmer_friendship_exp)
  return _internal_farmer_friendship_exp();
}
inline void RoleFarmlandData::_internal_set_farmer_friendship_exp(int32_t value) {
  
  _impl_.farmer_friendship_exp_ = value;
}
inline void RoleFarmlandData::set_farmer_friendship_exp(int32_t value) {
  _internal_set_farmer_friendship_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleFarmlandData.farmer_friendship_exp)
}

// repeated .idlepb.SimpleItemData ripe_items = 6;
inline int RoleFarmlandData::_internal_ripe_items_size() const {
  return _impl_.ripe_items_.size();
}
inline int RoleFarmlandData::ripe_items_size() const {
  return _internal_ripe_items_size();
}
inline void RoleFarmlandData::clear_ripe_items() {
  _impl_.ripe_items_.Clear();
}
inline ::idlepb::SimpleItemData* RoleFarmlandData::mutable_ripe_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleFarmlandData.ripe_items)
  return _impl_.ripe_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >*
RoleFarmlandData::mutable_ripe_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleFarmlandData.ripe_items)
  return &_impl_.ripe_items_;
}
inline const ::idlepb::SimpleItemData& RoleFarmlandData::_internal_ripe_items(int index) const {
  return _impl_.ripe_items_.Get(index);
}
inline const ::idlepb::SimpleItemData& RoleFarmlandData::ripe_items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFarmlandData.ripe_items)
  return _internal_ripe_items(index);
}
inline ::idlepb::SimpleItemData* RoleFarmlandData::_internal_add_ripe_items() {
  return _impl_.ripe_items_.Add();
}
inline ::idlepb::SimpleItemData* RoleFarmlandData::add_ripe_items() {
  ::idlepb::SimpleItemData* _add = _internal_add_ripe_items();
  // @@protoc_insertion_point(field_add:idlepb.RoleFarmlandData.ripe_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >&
RoleFarmlandData::ripe_items() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleFarmlandData.ripe_items)
  return _impl_.ripe_items_;
}

// -------------------------------------------------------------------

// RoleAvatarData

// int32 rank = 1;
inline void RoleAvatarData::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t RoleAvatarData::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t RoleAvatarData::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAvatarData.rank)
  return _internal_rank();
}
inline void RoleAvatarData::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void RoleAvatarData::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAvatarData.rank)
}

// int32 current_world_index = 2;
inline void RoleAvatarData::clear_current_world_index() {
  _impl_.current_world_index_ = 0;
}
inline int32_t RoleAvatarData::_internal_current_world_index() const {
  return _impl_.current_world_index_;
}
inline int32_t RoleAvatarData::current_world_index() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAvatarData.current_world_index)
  return _internal_current_world_index();
}
inline void RoleAvatarData::_internal_set_current_world_index(int32_t value) {
  
  _impl_.current_world_index_ = value;
}
inline void RoleAvatarData::set_current_world_index(int32_t value) {
  _internal_set_current_world_index(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAvatarData.current_world_index)
}

// int64 begin_time = 3;
inline void RoleAvatarData::clear_begin_time() {
  _impl_.begin_time_ = int64_t{0};
}
inline int64_t RoleAvatarData::_internal_begin_time() const {
  return _impl_.begin_time_;
}
inline int64_t RoleAvatarData::begin_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAvatarData.begin_time)
  return _internal_begin_time();
}
inline void RoleAvatarData::_internal_set_begin_time(int64_t value) {
  
  _impl_.begin_time_ = value;
}
inline void RoleAvatarData::set_begin_time(int64_t value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAvatarData.begin_time)
}

// int64 last_draw_time = 4;
inline void RoleAvatarData::clear_last_draw_time() {
  _impl_.last_draw_time_ = int64_t{0};
}
inline int64_t RoleAvatarData::_internal_last_draw_time() const {
  return _impl_.last_draw_time_;
}
inline int64_t RoleAvatarData::last_draw_time() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAvatarData.last_draw_time)
  return _internal_last_draw_time();
}
inline void RoleAvatarData::_internal_set_last_draw_time(int64_t value) {
  
  _impl_.last_draw_time_ = value;
}
inline void RoleAvatarData::set_last_draw_time(int64_t value) {
  _internal_set_last_draw_time(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAvatarData.last_draw_time)
}

// repeated .idlepb.SimpleItemData temp_package = 5;
inline int RoleAvatarData::_internal_temp_package_size() const {
  return _impl_.temp_package_.size();
}
inline int RoleAvatarData::temp_package_size() const {
  return _internal_temp_package_size();
}
inline void RoleAvatarData::clear_temp_package() {
  _impl_.temp_package_.Clear();
}
inline ::idlepb::SimpleItemData* RoleAvatarData::mutable_temp_package(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleAvatarData.temp_package)
  return _impl_.temp_package_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >*
RoleAvatarData::mutable_temp_package() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleAvatarData.temp_package)
  return &_impl_.temp_package_;
}
inline const ::idlepb::SimpleItemData& RoleAvatarData::_internal_temp_package(int index) const {
  return _impl_.temp_package_.Get(index);
}
inline const ::idlepb::SimpleItemData& RoleAvatarData::temp_package(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAvatarData.temp_package)
  return _internal_temp_package(index);
}
inline ::idlepb::SimpleItemData* RoleAvatarData::_internal_add_temp_package() {
  return _impl_.temp_package_.Add();
}
inline ::idlepb::SimpleItemData* RoleAvatarData::add_temp_package() {
  ::idlepb::SimpleItemData* _add = _internal_add_temp_package();
  // @@protoc_insertion_point(field_add:idlepb.RoleAvatarData.temp_package)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >&
RoleAvatarData::temp_package() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleAvatarData.temp_package)
  return _impl_.temp_package_;
}

// int32 last_wrold_index = 6;
inline void RoleAvatarData::clear_last_wrold_index() {
  _impl_.last_wrold_index_ = 0;
}
inline int32_t RoleAvatarData::_internal_last_wrold_index() const {
  return _impl_.last_wrold_index_;
}
inline int32_t RoleAvatarData::last_wrold_index() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleAvatarData.last_wrold_index)
  return _internal_last_wrold_index();
}
inline void RoleAvatarData::_internal_set_last_wrold_index(int32_t value) {
  
  _impl_.last_wrold_index_ = value;
}
inline void RoleAvatarData::set_last_wrold_index(int32_t value) {
  _internal_set_last_wrold_index(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleAvatarData.last_wrold_index)
}

// -------------------------------------------------------------------

// BiographyRoleLog

// int32 dao_year = 1;
inline void BiographyRoleLog::clear_dao_year() {
  _impl_.dao_year_ = 0;
}
inline int32_t BiographyRoleLog::_internal_dao_year() const {
  return _impl_.dao_year_;
}
inline int32_t BiographyRoleLog::dao_year() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyRoleLog.dao_year)
  return _internal_dao_year();
}
inline void BiographyRoleLog::_internal_set_dao_year(int32_t value) {
  
  _impl_.dao_year_ = value;
}
inline void BiographyRoleLog::set_dao_year(int32_t value) {
  _internal_set_dao_year(value);
  // @@protoc_insertion_point(field_set:idlepb.BiographyRoleLog.dao_year)
}

// int32 log_type = 2;
inline void BiographyRoleLog::clear_log_type() {
  _impl_.log_type_ = 0;
}
inline int32_t BiographyRoleLog::_internal_log_type() const {
  return _impl_.log_type_;
}
inline int32_t BiographyRoleLog::log_type() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyRoleLog.log_type)
  return _internal_log_type();
}
inline void BiographyRoleLog::_internal_set_log_type(int32_t value) {
  
  _impl_.log_type_ = value;
}
inline void BiographyRoleLog::set_log_type(int32_t value) {
  _internal_set_log_type(value);
  // @@protoc_insertion_point(field_set:idlepb.BiographyRoleLog.log_type)
}

// int32 poem_seed = 3;
inline void BiographyRoleLog::clear_poem_seed() {
  _impl_.poem_seed_ = 0;
}
inline int32_t BiographyRoleLog::_internal_poem_seed() const {
  return _impl_.poem_seed_;
}
inline int32_t BiographyRoleLog::poem_seed() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyRoleLog.poem_seed)
  return _internal_poem_seed();
}
inline void BiographyRoleLog::_internal_set_poem_seed(int32_t value) {
  
  _impl_.poem_seed_ = value;
}
inline void BiographyRoleLog::set_poem_seed(int32_t value) {
  _internal_set_poem_seed(value);
  // @@protoc_insertion_point(field_set:idlepb.BiographyRoleLog.poem_seed)
}

// string zone_name = 4;
inline void BiographyRoleLog::clear_zone_name() {
  _impl_.zone_name_.ClearToEmpty();
}
inline const std::string& BiographyRoleLog::zone_name() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyRoleLog.zone_name)
  return _internal_zone_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiographyRoleLog::set_zone_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.zone_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.BiographyRoleLog.zone_name)
}
inline std::string* BiographyRoleLog::mutable_zone_name() {
  std::string* _s = _internal_mutable_zone_name();
  // @@protoc_insertion_point(field_mutable:idlepb.BiographyRoleLog.zone_name)
  return _s;
}
inline const std::string& BiographyRoleLog::_internal_zone_name() const {
  return _impl_.zone_name_.Get();
}
inline void BiographyRoleLog::_internal_set_zone_name(const std::string& value) {
  
  _impl_.zone_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BiographyRoleLog::_internal_mutable_zone_name() {
  
  return _impl_.zone_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BiographyRoleLog::release_zone_name() {
  // @@protoc_insertion_point(field_release:idlepb.BiographyRoleLog.zone_name)
  return _impl_.zone_name_.Release();
}
inline void BiographyRoleLog::set_allocated_zone_name(std::string* zone_name) {
  if (zone_name != nullptr) {
    
  } else {
    
  }
  _impl_.zone_name_.SetAllocated(zone_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_name_.IsDefault()) {
    _impl_.zone_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.BiographyRoleLog.zone_name)
}

// string role_name = 5;
inline void BiographyRoleLog::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& BiographyRoleLog::role_name() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyRoleLog.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiographyRoleLog::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.BiographyRoleLog.role_name)
}
inline std::string* BiographyRoleLog::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:idlepb.BiographyRoleLog.role_name)
  return _s;
}
inline const std::string& BiographyRoleLog::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void BiographyRoleLog::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BiographyRoleLog::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BiographyRoleLog::release_role_name() {
  // @@protoc_insertion_point(field_release:idlepb.BiographyRoleLog.role_name)
  return _impl_.role_name_.Release();
}
inline void BiographyRoleLog::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.BiographyRoleLog.role_name)
}

// string content = 6;
inline void BiographyRoleLog::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& BiographyRoleLog::content() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyRoleLog.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiographyRoleLog::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.BiographyRoleLog.content)
}
inline std::string* BiographyRoleLog::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:idlepb.BiographyRoleLog.content)
  return _s;
}
inline const std::string& BiographyRoleLog::_internal_content() const {
  return _impl_.content_.Get();
}
inline void BiographyRoleLog::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* BiographyRoleLog::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* BiographyRoleLog::release_content() {
  // @@protoc_insertion_point(field_release:idlepb.BiographyRoleLog.content)
  return _impl_.content_.Release();
}
inline void BiographyRoleLog::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.BiographyRoleLog.content)
}

// -------------------------------------------------------------------

// RoleBiographyData

// repeated int32 received_cfg_ids = 1;
inline int RoleBiographyData::_internal_received_cfg_ids_size() const {
  return _impl_.received_cfg_ids_.size();
}
inline int RoleBiographyData::received_cfg_ids_size() const {
  return _internal_received_cfg_ids_size();
}
inline void RoleBiographyData::clear_received_cfg_ids() {
  _impl_.received_cfg_ids_.Clear();
}
inline int32_t RoleBiographyData::_internal_received_cfg_ids(int index) const {
  return _impl_.received_cfg_ids_.Get(index);
}
inline int32_t RoleBiographyData::received_cfg_ids(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleBiographyData.received_cfg_ids)
  return _internal_received_cfg_ids(index);
}
inline void RoleBiographyData::set_received_cfg_ids(int index, int32_t value) {
  _impl_.received_cfg_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleBiographyData.received_cfg_ids)
}
inline void RoleBiographyData::_internal_add_received_cfg_ids(int32_t value) {
  _impl_.received_cfg_ids_.Add(value);
}
inline void RoleBiographyData::add_received_cfg_ids(int32_t value) {
  _internal_add_received_cfg_ids(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleBiographyData.received_cfg_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleBiographyData::_internal_received_cfg_ids() const {
  return _impl_.received_cfg_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleBiographyData::received_cfg_ids() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleBiographyData.received_cfg_ids)
  return _internal_received_cfg_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleBiographyData::_internal_mutable_received_cfg_ids() {
  return &_impl_.received_cfg_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleBiographyData::mutable_received_cfg_ids() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleBiographyData.received_cfg_ids)
  return _internal_mutable_received_cfg_ids();
}

// repeated int32 received_event_cfg_ids = 2;
inline int RoleBiographyData::_internal_received_event_cfg_ids_size() const {
  return _impl_.received_event_cfg_ids_.size();
}
inline int RoleBiographyData::received_event_cfg_ids_size() const {
  return _internal_received_event_cfg_ids_size();
}
inline void RoleBiographyData::clear_received_event_cfg_ids() {
  _impl_.received_event_cfg_ids_.Clear();
}
inline int32_t RoleBiographyData::_internal_received_event_cfg_ids(int index) const {
  return _impl_.received_event_cfg_ids_.Get(index);
}
inline int32_t RoleBiographyData::received_event_cfg_ids(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleBiographyData.received_event_cfg_ids)
  return _internal_received_event_cfg_ids(index);
}
inline void RoleBiographyData::set_received_event_cfg_ids(int index, int32_t value) {
  _impl_.received_event_cfg_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleBiographyData.received_event_cfg_ids)
}
inline void RoleBiographyData::_internal_add_received_event_cfg_ids(int32_t value) {
  _impl_.received_event_cfg_ids_.Add(value);
}
inline void RoleBiographyData::add_received_event_cfg_ids(int32_t value) {
  _internal_add_received_event_cfg_ids(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleBiographyData.received_event_cfg_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleBiographyData::_internal_received_event_cfg_ids() const {
  return _impl_.received_event_cfg_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoleBiographyData::received_event_cfg_ids() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleBiographyData.received_event_cfg_ids)
  return _internal_received_event_cfg_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleBiographyData::_internal_mutable_received_event_cfg_ids() {
  return &_impl_.received_event_cfg_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoleBiographyData::mutable_received_event_cfg_ids() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleBiographyData.received_event_cfg_ids)
  return _internal_mutable_received_event_cfg_ids();
}

// repeated .idlepb.BiographyRoleLog role_logs = 3;
inline int RoleBiographyData::_internal_role_logs_size() const {
  return _impl_.role_logs_.size();
}
inline int RoleBiographyData::role_logs_size() const {
  return _internal_role_logs_size();
}
inline void RoleBiographyData::clear_role_logs() {
  _impl_.role_logs_.Clear();
}
inline ::idlepb::BiographyRoleLog* RoleBiographyData::mutable_role_logs(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleBiographyData.role_logs)
  return _impl_.role_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyRoleLog >*
RoleBiographyData::mutable_role_logs() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleBiographyData.role_logs)
  return &_impl_.role_logs_;
}
inline const ::idlepb::BiographyRoleLog& RoleBiographyData::_internal_role_logs(int index) const {
  return _impl_.role_logs_.Get(index);
}
inline const ::idlepb::BiographyRoleLog& RoleBiographyData::role_logs(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleBiographyData.role_logs)
  return _internal_role_logs(index);
}
inline ::idlepb::BiographyRoleLog* RoleBiographyData::_internal_add_role_logs() {
  return _impl_.role_logs_.Add();
}
inline ::idlepb::BiographyRoleLog* RoleBiographyData::add_role_logs() {
  ::idlepb::BiographyRoleLog* _add = _internal_add_role_logs();
  // @@protoc_insertion_point(field_add:idlepb.RoleBiographyData.role_logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyRoleLog >&
RoleBiographyData::role_logs() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleBiographyData.role_logs)
  return _impl_.role_logs_;
}

// -------------------------------------------------------------------

// SimpleRoleInfo

// uint64 role_id = 1;
inline void SimpleRoleInfo::clear_role_id() {
  _impl_.role_id_ = uint64_t{0u};
}
inline uint64_t SimpleRoleInfo::_internal_role_id() const {
  return _impl_.role_id_;
}
inline uint64_t SimpleRoleInfo::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleRoleInfo.role_id)
  return _internal_role_id();
}
inline void SimpleRoleInfo::_internal_set_role_id(uint64_t value) {
  
  _impl_.role_id_ = value;
}
inline void SimpleRoleInfo::set_role_id(uint64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleRoleInfo.role_id)
}

// string role_name = 2;
inline void SimpleRoleInfo::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& SimpleRoleInfo::role_name() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleRoleInfo.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleRoleInfo::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.SimpleRoleInfo.role_name)
}
inline std::string* SimpleRoleInfo::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:idlepb.SimpleRoleInfo.role_name)
  return _s;
}
inline const std::string& SimpleRoleInfo::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void SimpleRoleInfo::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleRoleInfo::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleRoleInfo::release_role_name() {
  // @@protoc_insertion_point(field_release:idlepb.SimpleRoleInfo.role_name)
  return _impl_.role_name_.Release();
}
inline void SimpleRoleInfo::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.SimpleRoleInfo.role_name)
}

// .idlepb.CharacterModelConfig model_config = 3;
inline bool SimpleRoleInfo::_internal_has_model_config() const {
  return this != internal_default_instance() && _impl_.model_config_ != nullptr;
}
inline bool SimpleRoleInfo::has_model_config() const {
  return _internal_has_model_config();
}
inline void SimpleRoleInfo::clear_model_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_config_ != nullptr) {
    delete _impl_.model_config_;
  }
  _impl_.model_config_ = nullptr;
}
inline const ::idlepb::CharacterModelConfig& SimpleRoleInfo::_internal_model_config() const {
  const ::idlepb::CharacterModelConfig* p = _impl_.model_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CharacterModelConfig&>(
      ::idlepb::_CharacterModelConfig_default_instance_);
}
inline const ::idlepb::CharacterModelConfig& SimpleRoleInfo::model_config() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleRoleInfo.model_config)
  return _internal_model_config();
}
inline void SimpleRoleInfo::unsafe_arena_set_allocated_model_config(
    ::idlepb::CharacterModelConfig* model_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_config_);
  }
  _impl_.model_config_ = model_config;
  if (model_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.SimpleRoleInfo.model_config)
}
inline ::idlepb::CharacterModelConfig* SimpleRoleInfo::release_model_config() {
  
  ::idlepb::CharacterModelConfig* temp = _impl_.model_config_;
  _impl_.model_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CharacterModelConfig* SimpleRoleInfo::unsafe_arena_release_model_config() {
  // @@protoc_insertion_point(field_release:idlepb.SimpleRoleInfo.model_config)
  
  ::idlepb::CharacterModelConfig* temp = _impl_.model_config_;
  _impl_.model_config_ = nullptr;
  return temp;
}
inline ::idlepb::CharacterModelConfig* SimpleRoleInfo::_internal_mutable_model_config() {
  
  if (_impl_.model_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CharacterModelConfig>(GetArenaForAllocation());
    _impl_.model_config_ = p;
  }
  return _impl_.model_config_;
}
inline ::idlepb::CharacterModelConfig* SimpleRoleInfo::mutable_model_config() {
  ::idlepb::CharacterModelConfig* _msg = _internal_mutable_model_config();
  // @@protoc_insertion_point(field_mutable:idlepb.SimpleRoleInfo.model_config)
  return _msg;
}
inline void SimpleRoleInfo::set_allocated_model_config(::idlepb::CharacterModelConfig* model_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.model_config_;
  }
  if (model_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(model_config);
    if (message_arena != submessage_arena) {
      model_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.model_config_ = model_config;
  // @@protoc_insertion_point(field_set_allocated:idlepb.SimpleRoleInfo.model_config)
}

// int32 rank = 4;
inline void SimpleRoleInfo::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t SimpleRoleInfo::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t SimpleRoleInfo::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleRoleInfo.rank)
  return _internal_rank();
}
inline void SimpleRoleInfo::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void SimpleRoleInfo::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleRoleInfo.rank)
}

// .idlepb.CultivationDirection role_cultivation_direction = 5;
inline void SimpleRoleInfo::clear_role_cultivation_direction() {
  _impl_.role_cultivation_direction_ = 0;
}
inline ::idlepb::CultivationDirection SimpleRoleInfo::_internal_role_cultivation_direction() const {
  return static_cast< ::idlepb::CultivationDirection >(_impl_.role_cultivation_direction_);
}
inline ::idlepb::CultivationDirection SimpleRoleInfo::role_cultivation_direction() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleRoleInfo.role_cultivation_direction)
  return _internal_role_cultivation_direction();
}
inline void SimpleRoleInfo::_internal_set_role_cultivation_direction(::idlepb::CultivationDirection value) {
  
  _impl_.role_cultivation_direction_ = value;
}
inline void SimpleRoleInfo::set_role_cultivation_direction(::idlepb::CultivationDirection value) {
  _internal_set_role_cultivation_direction(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleRoleInfo.role_cultivation_direction)
}

// string sept_name = 6;
inline void SimpleRoleInfo::clear_sept_name() {
  _impl_.sept_name_.ClearToEmpty();
}
inline const std::string& SimpleRoleInfo::sept_name() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleRoleInfo.sept_name)
  return _internal_sept_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleRoleInfo::set_sept_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sept_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.SimpleRoleInfo.sept_name)
}
inline std::string* SimpleRoleInfo::mutable_sept_name() {
  std::string* _s = _internal_mutable_sept_name();
  // @@protoc_insertion_point(field_mutable:idlepb.SimpleRoleInfo.sept_name)
  return _s;
}
inline const std::string& SimpleRoleInfo::_internal_sept_name() const {
  return _impl_.sept_name_.Get();
}
inline void SimpleRoleInfo::_internal_set_sept_name(const std::string& value) {
  
  _impl_.sept_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleRoleInfo::_internal_mutable_sept_name() {
  
  return _impl_.sept_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleRoleInfo::release_sept_name() {
  // @@protoc_insertion_point(field_release:idlepb.SimpleRoleInfo.sept_name)
  return _impl_.sept_name_.Release();
}
inline void SimpleRoleInfo::set_allocated_sept_name(std::string* sept_name) {
  if (sept_name != nullptr) {
    
  } else {
    
  }
  _impl_.sept_name_.SetAllocated(sept_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sept_name_.IsDefault()) {
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.SimpleRoleInfo.sept_name)
}

// .idlepb.SeptPosition sept_position = 7;
inline void SimpleRoleInfo::clear_sept_position() {
  _impl_.sept_position_ = 0;
}
inline ::idlepb::SeptPosition SimpleRoleInfo::_internal_sept_position() const {
  return static_cast< ::idlepb::SeptPosition >(_impl_.sept_position_);
}
inline ::idlepb::SeptPosition SimpleRoleInfo::sept_position() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleRoleInfo.sept_position)
  return _internal_sept_position();
}
inline void SimpleRoleInfo::_internal_set_sept_position(::idlepb::SeptPosition value) {
  
  _impl_.sept_position_ = value;
}
inline void SimpleRoleInfo::set_sept_position(::idlepb::SeptPosition value) {
  _internal_set_sept_position(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleRoleInfo.sept_position)
}

// int64 last_online_timespan = 21;
inline void SimpleRoleInfo::clear_last_online_timespan() {
  _impl_.last_online_timespan_ = int64_t{0};
}
inline int64_t SimpleRoleInfo::_internal_last_online_timespan() const {
  return _impl_.last_online_timespan_;
}
inline int64_t SimpleRoleInfo::last_online_timespan() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleRoleInfo.last_online_timespan)
  return _internal_last_online_timespan();
}
inline void SimpleRoleInfo::_internal_set_last_online_timespan(int64_t value) {
  
  _impl_.last_online_timespan_ = value;
}
inline void SimpleRoleInfo::set_last_online_timespan(int64_t value) {
  _internal_set_last_online_timespan(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleRoleInfo.last_online_timespan)
}

// int64 server_id = 22;
inline void SimpleRoleInfo::clear_server_id() {
  _impl_.server_id_ = int64_t{0};
}
inline int64_t SimpleRoleInfo::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int64_t SimpleRoleInfo::server_id() const {
  // @@protoc_insertion_point(field_get:idlepb.SimpleRoleInfo.server_id)
  return _internal_server_id();
}
inline void SimpleRoleInfo::_internal_set_server_id(int64_t value) {
  
  _impl_.server_id_ = value;
}
inline void SimpleRoleInfo::set_server_id(int64_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:idlepb.SimpleRoleInfo.server_id)
}

// -------------------------------------------------------------------

// ChatMessage

// uint64 role_id = 1;
inline void ChatMessage::clear_role_id() {
  _impl_.role_id_ = uint64_t{0u};
}
inline uint64_t ChatMessage::_internal_role_id() const {
  return _impl_.role_id_;
}
inline uint64_t ChatMessage::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.ChatMessage.role_id)
  return _internal_role_id();
}
inline void ChatMessage::_internal_set_role_id(uint64_t value) {
  
  _impl_.role_id_ = value;
}
inline void ChatMessage::set_role_id(uint64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.ChatMessage.role_id)
}

// string text = 2;
inline void ChatMessage::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& ChatMessage::text() const {
  // @@protoc_insertion_point(field_get:idlepb.ChatMessage.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.ChatMessage.text)
}
inline std::string* ChatMessage::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:idlepb.ChatMessage.text)
  return _s;
}
inline const std::string& ChatMessage::_internal_text() const {
  return _impl_.text_.Get();
}
inline void ChatMessage::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_text() {
  // @@protoc_insertion_point(field_release:idlepb.ChatMessage.text)
  return _impl_.text_.Release();
}
inline void ChatMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.ChatMessage.text)
}

// .idlepb.SimpleRoleInfo role_info = 3;
inline bool ChatMessage::_internal_has_role_info() const {
  return this != internal_default_instance() && _impl_.role_info_ != nullptr;
}
inline bool ChatMessage::has_role_info() const {
  return _internal_has_role_info();
}
inline void ChatMessage::clear_role_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.role_info_ != nullptr) {
    delete _impl_.role_info_;
  }
  _impl_.role_info_ = nullptr;
}
inline const ::idlepb::SimpleRoleInfo& ChatMessage::_internal_role_info() const {
  const ::idlepb::SimpleRoleInfo* p = _impl_.role_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::SimpleRoleInfo&>(
      ::idlepb::_SimpleRoleInfo_default_instance_);
}
inline const ::idlepb::SimpleRoleInfo& ChatMessage::role_info() const {
  // @@protoc_insertion_point(field_get:idlepb.ChatMessage.role_info)
  return _internal_role_info();
}
inline void ChatMessage::unsafe_arena_set_allocated_role_info(
    ::idlepb::SimpleRoleInfo* role_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.role_info_);
  }
  _impl_.role_info_ = role_info;
  if (role_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.ChatMessage.role_info)
}
inline ::idlepb::SimpleRoleInfo* ChatMessage::release_role_info() {
  
  ::idlepb::SimpleRoleInfo* temp = _impl_.role_info_;
  _impl_.role_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::SimpleRoleInfo* ChatMessage::unsafe_arena_release_role_info() {
  // @@protoc_insertion_point(field_release:idlepb.ChatMessage.role_info)
  
  ::idlepb::SimpleRoleInfo* temp = _impl_.role_info_;
  _impl_.role_info_ = nullptr;
  return temp;
}
inline ::idlepb::SimpleRoleInfo* ChatMessage::_internal_mutable_role_info() {
  
  if (_impl_.role_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::SimpleRoleInfo>(GetArenaForAllocation());
    _impl_.role_info_ = p;
  }
  return _impl_.role_info_;
}
inline ::idlepb::SimpleRoleInfo* ChatMessage::mutable_role_info() {
  ::idlepb::SimpleRoleInfo* _msg = _internal_mutable_role_info();
  // @@protoc_insertion_point(field_mutable:idlepb.ChatMessage.role_info)
  return _msg;
}
inline void ChatMessage::set_allocated_role_info(::idlepb::SimpleRoleInfo* role_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.role_info_;
  }
  if (role_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(role_info);
    if (message_arena != submessage_arena) {
      role_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.role_info_ = role_info;
  // @@protoc_insertion_point(field_set_allocated:idlepb.ChatMessage.role_info)
}

// .idlepb.ChatMessageType type = 4;
inline void ChatMessage::clear_type() {
  _impl_.type_ = 0;
}
inline ::idlepb::ChatMessageType ChatMessage::_internal_type() const {
  return static_cast< ::idlepb::ChatMessageType >(_impl_.type_);
}
inline ::idlepb::ChatMessageType ChatMessage::type() const {
  // @@protoc_insertion_point(field_get:idlepb.ChatMessage.type)
  return _internal_type();
}
inline void ChatMessage::_internal_set_type(::idlepb::ChatMessageType value) {
  
  _impl_.type_ = value;
}
inline void ChatMessage::set_type(::idlepb::ChatMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.ChatMessage.type)
}

// int64 time = 5;
inline void ChatMessage::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t ChatMessage::_internal_time() const {
  return _impl_.time_;
}
inline int64_t ChatMessage::time() const {
  // @@protoc_insertion_point(field_get:idlepb.ChatMessage.time)
  return _internal_time();
}
inline void ChatMessage::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void ChatMessage::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:idlepb.ChatMessage.time)
}

// -------------------------------------------------------------------

// PrivateChatRecord

// uint64 role_id = 1;
inline void PrivateChatRecord::clear_role_id() {
  _impl_.role_id_ = uint64_t{0u};
}
inline uint64_t PrivateChatRecord::_internal_role_id() const {
  return _impl_.role_id_;
}
inline uint64_t PrivateChatRecord::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.PrivateChatRecord.role_id)
  return _internal_role_id();
}
inline void PrivateChatRecord::_internal_set_role_id(uint64_t value) {
  
  _impl_.role_id_ = value;
}
inline void PrivateChatRecord::set_role_id(uint64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.PrivateChatRecord.role_id)
}

// repeated .idlepb.ChatMessage chat_record = 2;
inline int PrivateChatRecord::_internal_chat_record_size() const {
  return _impl_.chat_record_.size();
}
inline int PrivateChatRecord::chat_record_size() const {
  return _internal_chat_record_size();
}
inline void PrivateChatRecord::clear_chat_record() {
  _impl_.chat_record_.Clear();
}
inline ::idlepb::ChatMessage* PrivateChatRecord::mutable_chat_record(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.PrivateChatRecord.chat_record)
  return _impl_.chat_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >*
PrivateChatRecord::mutable_chat_record() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.PrivateChatRecord.chat_record)
  return &_impl_.chat_record_;
}
inline const ::idlepb::ChatMessage& PrivateChatRecord::_internal_chat_record(int index) const {
  return _impl_.chat_record_.Get(index);
}
inline const ::idlepb::ChatMessage& PrivateChatRecord::chat_record(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.PrivateChatRecord.chat_record)
  return _internal_chat_record(index);
}
inline ::idlepb::ChatMessage* PrivateChatRecord::_internal_add_chat_record() {
  return _impl_.chat_record_.Add();
}
inline ::idlepb::ChatMessage* PrivateChatRecord::add_chat_record() {
  ::idlepb::ChatMessage* _add = _internal_add_chat_record();
  // @@protoc_insertion_point(field_add:idlepb.PrivateChatRecord.chat_record)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >&
PrivateChatRecord::chat_record() const {
  // @@protoc_insertion_point(field_list:idlepb.PrivateChatRecord.chat_record)
  return _impl_.chat_record_;
}

// int32 unread_num = 3;
inline void PrivateChatRecord::clear_unread_num() {
  _impl_.unread_num_ = 0;
}
inline int32_t PrivateChatRecord::_internal_unread_num() const {
  return _impl_.unread_num_;
}
inline int32_t PrivateChatRecord::unread_num() const {
  // @@protoc_insertion_point(field_get:idlepb.PrivateChatRecord.unread_num)
  return _internal_unread_num();
}
inline void PrivateChatRecord::_internal_set_unread_num(int32_t value) {
  
  _impl_.unread_num_ = value;
}
inline void PrivateChatRecord::set_unread_num(int32_t value) {
  _internal_set_unread_num(value);
  // @@protoc_insertion_point(field_set:idlepb.PrivateChatRecord.unread_num)
}

// -------------------------------------------------------------------

// RolePrivateChatRecord

// uint64 role_id = 1;
inline void RolePrivateChatRecord::clear_role_id() {
  _impl_.role_id_ = uint64_t{0u};
}
inline uint64_t RolePrivateChatRecord::_internal_role_id() const {
  return _impl_.role_id_;
}
inline uint64_t RolePrivateChatRecord::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RolePrivateChatRecord.role_id)
  return _internal_role_id();
}
inline void RolePrivateChatRecord::_internal_set_role_id(uint64_t value) {
  
  _impl_.role_id_ = value;
}
inline void RolePrivateChatRecord::set_role_id(uint64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RolePrivateChatRecord.role_id)
}

// repeated .idlepb.PrivateChatRecord data = 2;
inline int RolePrivateChatRecord::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int RolePrivateChatRecord::data_size() const {
  return _internal_data_size();
}
inline void RolePrivateChatRecord::clear_data() {
  _impl_.data_.Clear();
}
inline ::idlepb::PrivateChatRecord* RolePrivateChatRecord::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RolePrivateChatRecord.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PrivateChatRecord >*
RolePrivateChatRecord::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RolePrivateChatRecord.data)
  return &_impl_.data_;
}
inline const ::idlepb::PrivateChatRecord& RolePrivateChatRecord::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::idlepb::PrivateChatRecord& RolePrivateChatRecord::data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RolePrivateChatRecord.data)
  return _internal_data(index);
}
inline ::idlepb::PrivateChatRecord* RolePrivateChatRecord::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::idlepb::PrivateChatRecord* RolePrivateChatRecord::add_data() {
  ::idlepb::PrivateChatRecord* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:idlepb.RolePrivateChatRecord.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PrivateChatRecord >&
RolePrivateChatRecord::data() const {
  // @@protoc_insertion_point(field_list:idlepb.RolePrivateChatRecord.data)
  return _impl_.data_;
}

// -------------------------------------------------------------------

// ChatData

// repeated .idlepb.ChatMessage colony_servers = 1;
inline int ChatData::_internal_colony_servers_size() const {
  return _impl_.colony_servers_.size();
}
inline int ChatData::colony_servers_size() const {
  return _internal_colony_servers_size();
}
inline void ChatData::clear_colony_servers() {
  _impl_.colony_servers_.Clear();
}
inline ::idlepb::ChatMessage* ChatData::mutable_colony_servers(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.ChatData.colony_servers)
  return _impl_.colony_servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >*
ChatData::mutable_colony_servers() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.ChatData.colony_servers)
  return &_impl_.colony_servers_;
}
inline const ::idlepb::ChatMessage& ChatData::_internal_colony_servers(int index) const {
  return _impl_.colony_servers_.Get(index);
}
inline const ::idlepb::ChatMessage& ChatData::colony_servers(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.ChatData.colony_servers)
  return _internal_colony_servers(index);
}
inline ::idlepb::ChatMessage* ChatData::_internal_add_colony_servers() {
  return _impl_.colony_servers_.Add();
}
inline ::idlepb::ChatMessage* ChatData::add_colony_servers() {
  ::idlepb::ChatMessage* _add = _internal_add_colony_servers();
  // @@protoc_insertion_point(field_add:idlepb.ChatData.colony_servers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >&
ChatData::colony_servers() const {
  // @@protoc_insertion_point(field_list:idlepb.ChatData.colony_servers)
  return _impl_.colony_servers_;
}

// repeated .idlepb.ChatMessage quad_servers = 2;
inline int ChatData::_internal_quad_servers_size() const {
  return _impl_.quad_servers_.size();
}
inline int ChatData::quad_servers_size() const {
  return _internal_quad_servers_size();
}
inline void ChatData::clear_quad_servers() {
  _impl_.quad_servers_.Clear();
}
inline ::idlepb::ChatMessage* ChatData::mutable_quad_servers(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.ChatData.quad_servers)
  return _impl_.quad_servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >*
ChatData::mutable_quad_servers() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.ChatData.quad_servers)
  return &_impl_.quad_servers_;
}
inline const ::idlepb::ChatMessage& ChatData::_internal_quad_servers(int index) const {
  return _impl_.quad_servers_.Get(index);
}
inline const ::idlepb::ChatMessage& ChatData::quad_servers(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.ChatData.quad_servers)
  return _internal_quad_servers(index);
}
inline ::idlepb::ChatMessage* ChatData::_internal_add_quad_servers() {
  return _impl_.quad_servers_.Add();
}
inline ::idlepb::ChatMessage* ChatData::add_quad_servers() {
  ::idlepb::ChatMessage* _add = _internal_add_quad_servers();
  // @@protoc_insertion_point(field_add:idlepb.ChatData.quad_servers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >&
ChatData::quad_servers() const {
  // @@protoc_insertion_point(field_list:idlepb.ChatData.quad_servers)
  return _impl_.quad_servers_;
}

// repeated .idlepb.ChatMessage local_server = 3;
inline int ChatData::_internal_local_server_size() const {
  return _impl_.local_server_.size();
}
inline int ChatData::local_server_size() const {
  return _internal_local_server_size();
}
inline void ChatData::clear_local_server() {
  _impl_.local_server_.Clear();
}
inline ::idlepb::ChatMessage* ChatData::mutable_local_server(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.ChatData.local_server)
  return _impl_.local_server_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >*
ChatData::mutable_local_server() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.ChatData.local_server)
  return &_impl_.local_server_;
}
inline const ::idlepb::ChatMessage& ChatData::_internal_local_server(int index) const {
  return _impl_.local_server_.Get(index);
}
inline const ::idlepb::ChatMessage& ChatData::local_server(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.ChatData.local_server)
  return _internal_local_server(index);
}
inline ::idlepb::ChatMessage* ChatData::_internal_add_local_server() {
  return _impl_.local_server_.Add();
}
inline ::idlepb::ChatMessage* ChatData::add_local_server() {
  ::idlepb::ChatMessage* _add = _internal_add_local_server();
  // @@protoc_insertion_point(field_add:idlepb.ChatData.local_server)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::ChatMessage >&
ChatData::local_server() const {
  // @@protoc_insertion_point(field_list:idlepb.ChatData.local_server)
  return _impl_.local_server_;
}

// -------------------------------------------------------------------

// FriendListItem

// int64 role_id = 1;
inline void FriendListItem::clear_role_id() {
  _impl_.role_id_ = int64_t{0};
}
inline int64_t FriendListItem::_internal_role_id() const {
  return _impl_.role_id_;
}
inline int64_t FriendListItem::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.FriendListItem.role_id)
  return _internal_role_id();
}
inline void FriendListItem::_internal_set_role_id(int64_t value) {
  
  _impl_.role_id_ = value;
}
inline void FriendListItem::set_role_id(int64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.FriendListItem.role_id)
}

// int32 relationship = 2;
inline void FriendListItem::clear_relationship() {
  _impl_.relationship_ = 0;
}
inline int32_t FriendListItem::_internal_relationship() const {
  return _impl_.relationship_;
}
inline int32_t FriendListItem::relationship() const {
  // @@protoc_insertion_point(field_get:idlepb.FriendListItem.relationship)
  return _internal_relationship();
}
inline void FriendListItem::_internal_set_relationship(int32_t value) {
  
  _impl_.relationship_ = value;
}
inline void FriendListItem::set_relationship(int32_t value) {
  _internal_set_relationship(value);
  // @@protoc_insertion_point(field_set:idlepb.FriendListItem.relationship)
}

// .idlepb.FriendRelationshipType type = 3;
inline void FriendListItem::clear_type() {
  _impl_.type_ = 0;
}
inline ::idlepb::FriendRelationshipType FriendListItem::_internal_type() const {
  return static_cast< ::idlepb::FriendRelationshipType >(_impl_.type_);
}
inline ::idlepb::FriendRelationshipType FriendListItem::type() const {
  // @@protoc_insertion_point(field_get:idlepb.FriendListItem.type)
  return _internal_type();
}
inline void FriendListItem::_internal_set_type(::idlepb::FriendRelationshipType value) {
  
  _impl_.type_ = value;
}
inline void FriendListItem::set_type(::idlepb::FriendRelationshipType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.FriendListItem.type)
}

// -------------------------------------------------------------------

// RoleFriendData

// repeated .idlepb.FriendListItem friend_list = 1;
inline int RoleFriendData::_internal_friend_list_size() const {
  return _impl_.friend_list_.size();
}
inline int RoleFriendData::friend_list_size() const {
  return _internal_friend_list_size();
}
inline void RoleFriendData::clear_friend_list() {
  _impl_.friend_list_.Clear();
}
inline ::idlepb::FriendListItem* RoleFriendData::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleFriendData.friend_list)
  return _impl_.friend_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FriendListItem >*
RoleFriendData::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleFriendData.friend_list)
  return &_impl_.friend_list_;
}
inline const ::idlepb::FriendListItem& RoleFriendData::_internal_friend_list(int index) const {
  return _impl_.friend_list_.Get(index);
}
inline const ::idlepb::FriendListItem& RoleFriendData::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFriendData.friend_list)
  return _internal_friend_list(index);
}
inline ::idlepb::FriendListItem* RoleFriendData::_internal_add_friend_list() {
  return _impl_.friend_list_.Add();
}
inline ::idlepb::FriendListItem* RoleFriendData::add_friend_list() {
  ::idlepb::FriendListItem* _add = _internal_add_friend_list();
  // @@protoc_insertion_point(field_add:idlepb.RoleFriendData.friend_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FriendListItem >&
RoleFriendData::friend_list() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleFriendData.friend_list)
  return _impl_.friend_list_;
}

// repeated int64 request_list = 2;
inline int RoleFriendData::_internal_request_list_size() const {
  return _impl_.request_list_.size();
}
inline int RoleFriendData::request_list_size() const {
  return _internal_request_list_size();
}
inline void RoleFriendData::clear_request_list() {
  _impl_.request_list_.Clear();
}
inline int64_t RoleFriendData::_internal_request_list(int index) const {
  return _impl_.request_list_.Get(index);
}
inline int64_t RoleFriendData::request_list(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFriendData.request_list)
  return _internal_request_list(index);
}
inline void RoleFriendData::set_request_list(int index, int64_t value) {
  _impl_.request_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleFriendData.request_list)
}
inline void RoleFriendData::_internal_add_request_list(int64_t value) {
  _impl_.request_list_.Add(value);
}
inline void RoleFriendData::add_request_list(int64_t value) {
  _internal_add_request_list(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleFriendData.request_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RoleFriendData::_internal_request_list() const {
  return _impl_.request_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RoleFriendData::request_list() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleFriendData.request_list)
  return _internal_request_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RoleFriendData::_internal_mutable_request_list() {
  return &_impl_.request_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RoleFriendData::mutable_request_list() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleFriendData.request_list)
  return _internal_mutable_request_list();
}

// repeated int64 block_list = 3;
inline int RoleFriendData::_internal_block_list_size() const {
  return _impl_.block_list_.size();
}
inline int RoleFriendData::block_list_size() const {
  return _internal_block_list_size();
}
inline void RoleFriendData::clear_block_list() {
  _impl_.block_list_.Clear();
}
inline int64_t RoleFriendData::_internal_block_list(int index) const {
  return _impl_.block_list_.Get(index);
}
inline int64_t RoleFriendData::block_list(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFriendData.block_list)
  return _internal_block_list(index);
}
inline void RoleFriendData::set_block_list(int index, int64_t value) {
  _impl_.block_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleFriendData.block_list)
}
inline void RoleFriendData::_internal_add_block_list(int64_t value) {
  _impl_.block_list_.Add(value);
}
inline void RoleFriendData::add_block_list(int64_t value) {
  _internal_add_block_list(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleFriendData.block_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RoleFriendData::_internal_block_list() const {
  return _impl_.block_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RoleFriendData::block_list() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleFriendData.block_list)
  return _internal_block_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RoleFriendData::_internal_mutable_block_list() {
  return &_impl_.block_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RoleFriendData::mutable_block_list() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleFriendData.block_list)
  return _internal_mutable_block_list();
}

// repeated int64 my_request = 4;
inline int RoleFriendData::_internal_my_request_size() const {
  return _impl_.my_request_.size();
}
inline int RoleFriendData::my_request_size() const {
  return _internal_my_request_size();
}
inline void RoleFriendData::clear_my_request() {
  _impl_.my_request_.Clear();
}
inline int64_t RoleFriendData::_internal_my_request(int index) const {
  return _impl_.my_request_.Get(index);
}
inline int64_t RoleFriendData::my_request(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFriendData.my_request)
  return _internal_my_request(index);
}
inline void RoleFriendData::set_my_request(int index, int64_t value) {
  _impl_.my_request_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.RoleFriendData.my_request)
}
inline void RoleFriendData::_internal_add_my_request(int64_t value) {
  _impl_.my_request_.Add(value);
}
inline void RoleFriendData::add_my_request(int64_t value) {
  _internal_add_my_request(value);
  // @@protoc_insertion_point(field_add:idlepb.RoleFriendData.my_request)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RoleFriendData::_internal_my_request() const {
  return _impl_.my_request_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RoleFriendData::my_request() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleFriendData.my_request)
  return _internal_my_request();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RoleFriendData::_internal_mutable_my_request() {
  return &_impl_.my_request_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RoleFriendData::mutable_my_request() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleFriendData.my_request)
  return _internal_mutable_my_request();
}

// repeated .idlepb.FriendListItem history_list = 5;
inline int RoleFriendData::_internal_history_list_size() const {
  return _impl_.history_list_.size();
}
inline int RoleFriendData::history_list_size() const {
  return _internal_history_list_size();
}
inline void RoleFriendData::clear_history_list() {
  _impl_.history_list_.Clear();
}
inline ::idlepb::FriendListItem* RoleFriendData::mutable_history_list(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleFriendData.history_list)
  return _impl_.history_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FriendListItem >*
RoleFriendData::mutable_history_list() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleFriendData.history_list)
  return &_impl_.history_list_;
}
inline const ::idlepb::FriendListItem& RoleFriendData::_internal_history_list(int index) const {
  return _impl_.history_list_.Get(index);
}
inline const ::idlepb::FriendListItem& RoleFriendData::history_list(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleFriendData.history_list)
  return _internal_history_list(index);
}
inline ::idlepb::FriendListItem* RoleFriendData::_internal_add_history_list() {
  return _impl_.history_list_.Add();
}
inline ::idlepb::FriendListItem* RoleFriendData::add_history_list() {
  ::idlepb::FriendListItem* _add = _internal_add_history_list();
  // @@protoc_insertion_point(field_add:idlepb.RoleFriendData.history_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FriendListItem >&
RoleFriendData::history_list() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleFriendData.history_list)
  return _impl_.history_list_;
}

// -------------------------------------------------------------------

// RoleOfflineFunctionData

// int64 role_id = 1;
inline void RoleOfflineFunctionData::clear_role_id() {
  _impl_.role_id_ = int64_t{0};
}
inline int64_t RoleOfflineFunctionData::_internal_role_id() const {
  return _impl_.role_id_;
}
inline int64_t RoleOfflineFunctionData::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineFunctionData.role_id)
  return _internal_role_id();
}
inline void RoleOfflineFunctionData::_internal_set_role_id(int64_t value) {
  
  _impl_.role_id_ = value;
}
inline void RoleOfflineFunctionData::set_role_id(int64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleOfflineFunctionData.role_id)
}

// repeated .idlepb.Mail mails = 2;
inline int RoleOfflineFunctionData::_internal_mails_size() const {
  return _impl_.mails_.size();
}
inline int RoleOfflineFunctionData::mails_size() const {
  return _internal_mails_size();
}
inline void RoleOfflineFunctionData::clear_mails() {
  _impl_.mails_.Clear();
}
inline ::idlepb::Mail* RoleOfflineFunctionData::mutable_mails(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleOfflineFunctionData.mails)
  return _impl_.mails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Mail >*
RoleOfflineFunctionData::mutable_mails() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleOfflineFunctionData.mails)
  return &_impl_.mails_;
}
inline const ::idlepb::Mail& RoleOfflineFunctionData::_internal_mails(int index) const {
  return _impl_.mails_.Get(index);
}
inline const ::idlepb::Mail& RoleOfflineFunctionData::mails(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineFunctionData.mails)
  return _internal_mails(index);
}
inline ::idlepb::Mail* RoleOfflineFunctionData::_internal_add_mails() {
  return _impl_.mails_.Add();
}
inline ::idlepb::Mail* RoleOfflineFunctionData::add_mails() {
  ::idlepb::Mail* _add = _internal_add_mails();
  // @@protoc_insertion_point(field_add:idlepb.RoleOfflineFunctionData.mails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::Mail >&
RoleOfflineFunctionData::mails() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleOfflineFunctionData.mails)
  return _impl_.mails_;
}

// .idlepb.RoleFriendData friend_data = 3;
inline bool RoleOfflineFunctionData::_internal_has_friend_data() const {
  return this != internal_default_instance() && _impl_.friend_data_ != nullptr;
}
inline bool RoleOfflineFunctionData::has_friend_data() const {
  return _internal_has_friend_data();
}
inline void RoleOfflineFunctionData::clear_friend_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.friend_data_ != nullptr) {
    delete _impl_.friend_data_;
  }
  _impl_.friend_data_ = nullptr;
}
inline const ::idlepb::RoleFriendData& RoleOfflineFunctionData::_internal_friend_data() const {
  const ::idlepb::RoleFriendData* p = _impl_.friend_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleFriendData&>(
      ::idlepb::_RoleFriendData_default_instance_);
}
inline const ::idlepb::RoleFriendData& RoleOfflineFunctionData::friend_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineFunctionData.friend_data)
  return _internal_friend_data();
}
inline void RoleOfflineFunctionData::unsafe_arena_set_allocated_friend_data(
    ::idlepb::RoleFriendData* friend_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.friend_data_);
  }
  _impl_.friend_data_ = friend_data;
  if (friend_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleOfflineFunctionData.friend_data)
}
inline ::idlepb::RoleFriendData* RoleOfflineFunctionData::release_friend_data() {
  
  ::idlepb::RoleFriendData* temp = _impl_.friend_data_;
  _impl_.friend_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleFriendData* RoleOfflineFunctionData::unsafe_arena_release_friend_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleOfflineFunctionData.friend_data)
  
  ::idlepb::RoleFriendData* temp = _impl_.friend_data_;
  _impl_.friend_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleFriendData* RoleOfflineFunctionData::_internal_mutable_friend_data() {
  
  if (_impl_.friend_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleFriendData>(GetArenaForAllocation());
    _impl_.friend_data_ = p;
  }
  return _impl_.friend_data_;
}
inline ::idlepb::RoleFriendData* RoleOfflineFunctionData::mutable_friend_data() {
  ::idlepb::RoleFriendData* _msg = _internal_mutable_friend_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleOfflineFunctionData.friend_data)
  return _msg;
}
inline void RoleOfflineFunctionData::set_allocated_friend_data(::idlepb::RoleFriendData* friend_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.friend_data_;
  }
  if (friend_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friend_data);
    if (message_arena != submessage_arena) {
      friend_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.friend_data_ = friend_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleOfflineFunctionData.friend_data)
}

// repeated .idlepb.PrivateChatRecord private_chat_data = 4;
inline int RoleOfflineFunctionData::_internal_private_chat_data_size() const {
  return _impl_.private_chat_data_.size();
}
inline int RoleOfflineFunctionData::private_chat_data_size() const {
  return _internal_private_chat_data_size();
}
inline void RoleOfflineFunctionData::clear_private_chat_data() {
  _impl_.private_chat_data_.Clear();
}
inline ::idlepb::PrivateChatRecord* RoleOfflineFunctionData::mutable_private_chat_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleOfflineFunctionData.private_chat_data)
  return _impl_.private_chat_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PrivateChatRecord >*
RoleOfflineFunctionData::mutable_private_chat_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleOfflineFunctionData.private_chat_data)
  return &_impl_.private_chat_data_;
}
inline const ::idlepb::PrivateChatRecord& RoleOfflineFunctionData::_internal_private_chat_data(int index) const {
  return _impl_.private_chat_data_.Get(index);
}
inline const ::idlepb::PrivateChatRecord& RoleOfflineFunctionData::private_chat_data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineFunctionData.private_chat_data)
  return _internal_private_chat_data(index);
}
inline ::idlepb::PrivateChatRecord* RoleOfflineFunctionData::_internal_add_private_chat_data() {
  return _impl_.private_chat_data_.Add();
}
inline ::idlepb::PrivateChatRecord* RoleOfflineFunctionData::add_private_chat_data() {
  ::idlepb::PrivateChatRecord* _add = _internal_add_private_chat_data();
  // @@protoc_insertion_point(field_add:idlepb.RoleOfflineFunctionData.private_chat_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PrivateChatRecord >&
RoleOfflineFunctionData::private_chat_data() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleOfflineFunctionData.private_chat_data)
  return _impl_.private_chat_data_;
}

// repeated .idlepb.BiographyRoleLog role_logs = 5;
inline int RoleOfflineFunctionData::_internal_role_logs_size() const {
  return _impl_.role_logs_.size();
}
inline int RoleOfflineFunctionData::role_logs_size() const {
  return _internal_role_logs_size();
}
inline void RoleOfflineFunctionData::clear_role_logs() {
  _impl_.role_logs_.Clear();
}
inline ::idlepb::BiographyRoleLog* RoleOfflineFunctionData::mutable_role_logs(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleOfflineFunctionData.role_logs)
  return _impl_.role_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyRoleLog >*
RoleOfflineFunctionData::mutable_role_logs() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleOfflineFunctionData.role_logs)
  return &_impl_.role_logs_;
}
inline const ::idlepb::BiographyRoleLog& RoleOfflineFunctionData::_internal_role_logs(int index) const {
  return _impl_.role_logs_.Get(index);
}
inline const ::idlepb::BiographyRoleLog& RoleOfflineFunctionData::role_logs(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineFunctionData.role_logs)
  return _internal_role_logs(index);
}
inline ::idlepb::BiographyRoleLog* RoleOfflineFunctionData::_internal_add_role_logs() {
  return _impl_.role_logs_.Add();
}
inline ::idlepb::BiographyRoleLog* RoleOfflineFunctionData::add_role_logs() {
  ::idlepb::BiographyRoleLog* _add = _internal_add_role_logs();
  // @@protoc_insertion_point(field_add:idlepb.RoleOfflineFunctionData.role_logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyRoleLog >&
RoleOfflineFunctionData::role_logs() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleOfflineFunctionData.role_logs)
  return _impl_.role_logs_;
}

// .idlepb.RoleLeaderboardData leaderboard_data = 6;
inline bool RoleOfflineFunctionData::_internal_has_leaderboard_data() const {
  return this != internal_default_instance() && _impl_.leaderboard_data_ != nullptr;
}
inline bool RoleOfflineFunctionData::has_leaderboard_data() const {
  return _internal_has_leaderboard_data();
}
inline void RoleOfflineFunctionData::clear_leaderboard_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.leaderboard_data_ != nullptr) {
    delete _impl_.leaderboard_data_;
  }
  _impl_.leaderboard_data_ = nullptr;
}
inline const ::idlepb::RoleLeaderboardData& RoleOfflineFunctionData::_internal_leaderboard_data() const {
  const ::idlepb::RoleLeaderboardData* p = _impl_.leaderboard_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleLeaderboardData&>(
      ::idlepb::_RoleLeaderboardData_default_instance_);
}
inline const ::idlepb::RoleLeaderboardData& RoleOfflineFunctionData::leaderboard_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineFunctionData.leaderboard_data)
  return _internal_leaderboard_data();
}
inline void RoleOfflineFunctionData::unsafe_arena_set_allocated_leaderboard_data(
    ::idlepb::RoleLeaderboardData* leaderboard_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leaderboard_data_);
  }
  _impl_.leaderboard_data_ = leaderboard_data;
  if (leaderboard_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleOfflineFunctionData.leaderboard_data)
}
inline ::idlepb::RoleLeaderboardData* RoleOfflineFunctionData::release_leaderboard_data() {
  
  ::idlepb::RoleLeaderboardData* temp = _impl_.leaderboard_data_;
  _impl_.leaderboard_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleLeaderboardData* RoleOfflineFunctionData::unsafe_arena_release_leaderboard_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleOfflineFunctionData.leaderboard_data)
  
  ::idlepb::RoleLeaderboardData* temp = _impl_.leaderboard_data_;
  _impl_.leaderboard_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleLeaderboardData* RoleOfflineFunctionData::_internal_mutable_leaderboard_data() {
  
  if (_impl_.leaderboard_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleLeaderboardData>(GetArenaForAllocation());
    _impl_.leaderboard_data_ = p;
  }
  return _impl_.leaderboard_data_;
}
inline ::idlepb::RoleLeaderboardData* RoleOfflineFunctionData::mutable_leaderboard_data() {
  ::idlepb::RoleLeaderboardData* _msg = _internal_mutable_leaderboard_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleOfflineFunctionData.leaderboard_data)
  return _msg;
}
inline void RoleOfflineFunctionData::set_allocated_leaderboard_data(::idlepb::RoleLeaderboardData* leaderboard_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.leaderboard_data_;
  }
  if (leaderboard_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leaderboard_data);
    if (message_arena != submessage_arena) {
      leaderboard_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaderboard_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.leaderboard_data_ = leaderboard_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleOfflineFunctionData.leaderboard_data)
}

// string role_name = 11;
inline void RoleOfflineFunctionData::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& RoleOfflineFunctionData::role_name() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineFunctionData.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleOfflineFunctionData::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.RoleOfflineFunctionData.role_name)
}
inline std::string* RoleOfflineFunctionData::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleOfflineFunctionData.role_name)
  return _s;
}
inline const std::string& RoleOfflineFunctionData::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void RoleOfflineFunctionData::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleOfflineFunctionData::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleOfflineFunctionData::release_role_name() {
  // @@protoc_insertion_point(field_release:idlepb.RoleOfflineFunctionData.role_name)
  return _impl_.role_name_.Release();
}
inline void RoleOfflineFunctionData::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleOfflineFunctionData.role_name)
}

// int32 rank = 12;
inline void RoleOfflineFunctionData::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t RoleOfflineFunctionData::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t RoleOfflineFunctionData::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineFunctionData.rank)
  return _internal_rank();
}
inline void RoleOfflineFunctionData::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void RoleOfflineFunctionData::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleOfflineFunctionData.rank)
}

// int32 degree = 13;
inline void RoleOfflineFunctionData::clear_degree() {
  _impl_.degree_ = 0;
}
inline int32_t RoleOfflineFunctionData::_internal_degree() const {
  return _impl_.degree_;
}
inline int32_t RoleOfflineFunctionData::degree() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineFunctionData.degree)
  return _internal_degree();
}
inline void RoleOfflineFunctionData::_internal_set_degree(int32_t value) {
  
  _impl_.degree_ = value;
}
inline void RoleOfflineFunctionData::set_degree(int32_t value) {
  _internal_set_degree(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleOfflineFunctionData.degree)
}

// int64 total_exp = 14;
inline void RoleOfflineFunctionData::clear_total_exp() {
  _impl_.total_exp_ = int64_t{0};
}
inline int64_t RoleOfflineFunctionData::_internal_total_exp() const {
  return _impl_.total_exp_;
}
inline int64_t RoleOfflineFunctionData::total_exp() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleOfflineFunctionData.total_exp)
  return _internal_total_exp();
}
inline void RoleOfflineFunctionData::_internal_set_total_exp(int64_t value) {
  
  _impl_.total_exp_ = value;
}
inline void RoleOfflineFunctionData::set_total_exp(int64_t value) {
  _internal_set_total_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleOfflineFunctionData.total_exp)
}

// -------------------------------------------------------------------

// ServerCounterData

// repeated .idlepb.FunctionCounter function_counter = 1;
inline int ServerCounterData::_internal_function_counter_size() const {
  return _impl_.function_counter_.size();
}
inline int ServerCounterData::function_counter_size() const {
  return _internal_function_counter_size();
}
inline void ServerCounterData::clear_function_counter() {
  _impl_.function_counter_.Clear();
}
inline ::idlepb::FunctionCounter* ServerCounterData::mutable_function_counter(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.ServerCounterData.function_counter)
  return _impl_.function_counter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FunctionCounter >*
ServerCounterData::mutable_function_counter() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.ServerCounterData.function_counter)
  return &_impl_.function_counter_;
}
inline const ::idlepb::FunctionCounter& ServerCounterData::_internal_function_counter(int index) const {
  return _impl_.function_counter_.Get(index);
}
inline const ::idlepb::FunctionCounter& ServerCounterData::function_counter(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.ServerCounterData.function_counter)
  return _internal_function_counter(index);
}
inline ::idlepb::FunctionCounter* ServerCounterData::_internal_add_function_counter() {
  return _impl_.function_counter_.Add();
}
inline ::idlepb::FunctionCounter* ServerCounterData::add_function_counter() {
  ::idlepb::FunctionCounter* _add = _internal_add_function_counter();
  // @@protoc_insertion_point(field_add:idlepb.ServerCounterData.function_counter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FunctionCounter >&
ServerCounterData::function_counter() const {
  // @@protoc_insertion_point(field_list:idlepb.ServerCounterData.function_counter)
  return _impl_.function_counter_;
}

// -------------------------------------------------------------------

// SocialFunctionCommonSaveData

// repeated .idlepb.RoleOfflineFunctionData offline_role_datas = 1;
inline int SocialFunctionCommonSaveData::_internal_offline_role_datas_size() const {
  return _impl_.offline_role_datas_.size();
}
inline int SocialFunctionCommonSaveData::offline_role_datas_size() const {
  return _internal_offline_role_datas_size();
}
inline void SocialFunctionCommonSaveData::clear_offline_role_datas() {
  _impl_.offline_role_datas_.Clear();
}
inline ::idlepb::RoleOfflineFunctionData* SocialFunctionCommonSaveData::mutable_offline_role_datas(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.SocialFunctionCommonSaveData.offline_role_datas)
  return _impl_.offline_role_datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleOfflineFunctionData >*
SocialFunctionCommonSaveData::mutable_offline_role_datas() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.SocialFunctionCommonSaveData.offline_role_datas)
  return &_impl_.offline_role_datas_;
}
inline const ::idlepb::RoleOfflineFunctionData& SocialFunctionCommonSaveData::_internal_offline_role_datas(int index) const {
  return _impl_.offline_role_datas_.Get(index);
}
inline const ::idlepb::RoleOfflineFunctionData& SocialFunctionCommonSaveData::offline_role_datas(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.SocialFunctionCommonSaveData.offline_role_datas)
  return _internal_offline_role_datas(index);
}
inline ::idlepb::RoleOfflineFunctionData* SocialFunctionCommonSaveData::_internal_add_offline_role_datas() {
  return _impl_.offline_role_datas_.Add();
}
inline ::idlepb::RoleOfflineFunctionData* SocialFunctionCommonSaveData::add_offline_role_datas() {
  ::idlepb::RoleOfflineFunctionData* _add = _internal_add_offline_role_datas();
  // @@protoc_insertion_point(field_add:idlepb.SocialFunctionCommonSaveData.offline_role_datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleOfflineFunctionData >&
SocialFunctionCommonSaveData::offline_role_datas() const {
  // @@protoc_insertion_point(field_list:idlepb.SocialFunctionCommonSaveData.offline_role_datas)
  return _impl_.offline_role_datas_;
}

// .idlepb.ServerCounterData server_counter_data = 2;
inline bool SocialFunctionCommonSaveData::_internal_has_server_counter_data() const {
  return this != internal_default_instance() && _impl_.server_counter_data_ != nullptr;
}
inline bool SocialFunctionCommonSaveData::has_server_counter_data() const {
  return _internal_has_server_counter_data();
}
inline void SocialFunctionCommonSaveData::clear_server_counter_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_counter_data_ != nullptr) {
    delete _impl_.server_counter_data_;
  }
  _impl_.server_counter_data_ = nullptr;
}
inline const ::idlepb::ServerCounterData& SocialFunctionCommonSaveData::_internal_server_counter_data() const {
  const ::idlepb::ServerCounterData* p = _impl_.server_counter_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::ServerCounterData&>(
      ::idlepb::_ServerCounterData_default_instance_);
}
inline const ::idlepb::ServerCounterData& SocialFunctionCommonSaveData::server_counter_data() const {
  // @@protoc_insertion_point(field_get:idlepb.SocialFunctionCommonSaveData.server_counter_data)
  return _internal_server_counter_data();
}
inline void SocialFunctionCommonSaveData::unsafe_arena_set_allocated_server_counter_data(
    ::idlepb::ServerCounterData* server_counter_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_counter_data_);
  }
  _impl_.server_counter_data_ = server_counter_data;
  if (server_counter_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.SocialFunctionCommonSaveData.server_counter_data)
}
inline ::idlepb::ServerCounterData* SocialFunctionCommonSaveData::release_server_counter_data() {
  
  ::idlepb::ServerCounterData* temp = _impl_.server_counter_data_;
  _impl_.server_counter_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::ServerCounterData* SocialFunctionCommonSaveData::unsafe_arena_release_server_counter_data() {
  // @@protoc_insertion_point(field_release:idlepb.SocialFunctionCommonSaveData.server_counter_data)
  
  ::idlepb::ServerCounterData* temp = _impl_.server_counter_data_;
  _impl_.server_counter_data_ = nullptr;
  return temp;
}
inline ::idlepb::ServerCounterData* SocialFunctionCommonSaveData::_internal_mutable_server_counter_data() {
  
  if (_impl_.server_counter_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::ServerCounterData>(GetArenaForAllocation());
    _impl_.server_counter_data_ = p;
  }
  return _impl_.server_counter_data_;
}
inline ::idlepb::ServerCounterData* SocialFunctionCommonSaveData::mutable_server_counter_data() {
  ::idlepb::ServerCounterData* _msg = _internal_mutable_server_counter_data();
  // @@protoc_insertion_point(field_mutable:idlepb.SocialFunctionCommonSaveData.server_counter_data)
  return _msg;
}
inline void SocialFunctionCommonSaveData::set_allocated_server_counter_data(::idlepb::ServerCounterData* server_counter_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.server_counter_data_;
  }
  if (server_counter_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(server_counter_data);
    if (message_arena != submessage_arena) {
      server_counter_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_counter_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.server_counter_data_ = server_counter_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.SocialFunctionCommonSaveData.server_counter_data)
}

// repeated .idlepb.StringInt64Pair role_list = 3;
inline int SocialFunctionCommonSaveData::_internal_role_list_size() const {
  return _impl_.role_list_.size();
}
inline int SocialFunctionCommonSaveData::role_list_size() const {
  return _internal_role_list_size();
}
inline void SocialFunctionCommonSaveData::clear_role_list() {
  _impl_.role_list_.Clear();
}
inline ::idlepb::StringInt64Pair* SocialFunctionCommonSaveData::mutable_role_list(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.SocialFunctionCommonSaveData.role_list)
  return _impl_.role_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::StringInt64Pair >*
SocialFunctionCommonSaveData::mutable_role_list() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.SocialFunctionCommonSaveData.role_list)
  return &_impl_.role_list_;
}
inline const ::idlepb::StringInt64Pair& SocialFunctionCommonSaveData::_internal_role_list(int index) const {
  return _impl_.role_list_.Get(index);
}
inline const ::idlepb::StringInt64Pair& SocialFunctionCommonSaveData::role_list(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.SocialFunctionCommonSaveData.role_list)
  return _internal_role_list(index);
}
inline ::idlepb::StringInt64Pair* SocialFunctionCommonSaveData::_internal_add_role_list() {
  return _impl_.role_list_.Add();
}
inline ::idlepb::StringInt64Pair* SocialFunctionCommonSaveData::add_role_list() {
  ::idlepb::StringInt64Pair* _add = _internal_add_role_list();
  // @@protoc_insertion_point(field_add:idlepb.SocialFunctionCommonSaveData.role_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::StringInt64Pair >&
SocialFunctionCommonSaveData::role_list() const {
  // @@protoc_insertion_point(field_list:idlepb.SocialFunctionCommonSaveData.role_list)
  return _impl_.role_list_;
}

// -------------------------------------------------------------------

// RoleSaveData

// .idlepb.RoleData role_data = 1;
inline bool RoleSaveData::_internal_has_role_data() const {
  return this != internal_default_instance() && _impl_.role_data_ != nullptr;
}
inline bool RoleSaveData::has_role_data() const {
  return _internal_has_role_data();
}
inline void RoleSaveData::clear_role_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.role_data_ != nullptr) {
    delete _impl_.role_data_;
  }
  _impl_.role_data_ = nullptr;
}
inline const ::idlepb::RoleData& RoleSaveData::_internal_role_data() const {
  const ::idlepb::RoleData* p = _impl_.role_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleData&>(
      ::idlepb::_RoleData_default_instance_);
}
inline const ::idlepb::RoleData& RoleSaveData::role_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.role_data)
  return _internal_role_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_role_data(
    ::idlepb::RoleData* role_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.role_data_);
  }
  _impl_.role_data_ = role_data;
  if (role_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.role_data)
}
inline ::idlepb::RoleData* RoleSaveData::release_role_data() {
  
  ::idlepb::RoleData* temp = _impl_.role_data_;
  _impl_.role_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleData* RoleSaveData::unsafe_arena_release_role_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.role_data)
  
  ::idlepb::RoleData* temp = _impl_.role_data_;
  _impl_.role_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleData* RoleSaveData::_internal_mutable_role_data() {
  
  if (_impl_.role_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleData>(GetArenaForAllocation());
    _impl_.role_data_ = p;
  }
  return _impl_.role_data_;
}
inline ::idlepb::RoleData* RoleSaveData::mutable_role_data() {
  ::idlepb::RoleData* _msg = _internal_mutable_role_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.role_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_role_data(::idlepb::RoleData* role_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.role_data_;
  }
  if (role_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(role_data);
    if (message_arena != submessage_arena) {
      role_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.role_data_ = role_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.role_data)
}

// .idlepb.GameStatsAllModuleData all_stats_data = 2;
inline bool RoleSaveData::_internal_has_all_stats_data() const {
  return this != internal_default_instance() && _impl_.all_stats_data_ != nullptr;
}
inline bool RoleSaveData::has_all_stats_data() const {
  return _internal_has_all_stats_data();
}
inline void RoleSaveData::clear_all_stats_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.all_stats_data_ != nullptr) {
    delete _impl_.all_stats_data_;
  }
  _impl_.all_stats_data_ = nullptr;
}
inline const ::idlepb::GameStatsAllModuleData& RoleSaveData::_internal_all_stats_data() const {
  const ::idlepb::GameStatsAllModuleData* p = _impl_.all_stats_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::GameStatsAllModuleData&>(
      ::idlepb::_GameStatsAllModuleData_default_instance_);
}
inline const ::idlepb::GameStatsAllModuleData& RoleSaveData::all_stats_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.all_stats_data)
  return _internal_all_stats_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_all_stats_data(
    ::idlepb::GameStatsAllModuleData* all_stats_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.all_stats_data_);
  }
  _impl_.all_stats_data_ = all_stats_data;
  if (all_stats_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.all_stats_data)
}
inline ::idlepb::GameStatsAllModuleData* RoleSaveData::release_all_stats_data() {
  
  ::idlepb::GameStatsAllModuleData* temp = _impl_.all_stats_data_;
  _impl_.all_stats_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::GameStatsAllModuleData* RoleSaveData::unsafe_arena_release_all_stats_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.all_stats_data)
  
  ::idlepb::GameStatsAllModuleData* temp = _impl_.all_stats_data_;
  _impl_.all_stats_data_ = nullptr;
  return temp;
}
inline ::idlepb::GameStatsAllModuleData* RoleSaveData::_internal_mutable_all_stats_data() {
  
  if (_impl_.all_stats_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::GameStatsAllModuleData>(GetArenaForAllocation());
    _impl_.all_stats_data_ = p;
  }
  return _impl_.all_stats_data_;
}
inline ::idlepb::GameStatsAllModuleData* RoleSaveData::mutable_all_stats_data() {
  ::idlepb::GameStatsAllModuleData* _msg = _internal_mutable_all_stats_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.all_stats_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_all_stats_data(::idlepb::GameStatsAllModuleData* all_stats_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.all_stats_data_;
  }
  if (all_stats_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(all_stats_data);
    if (message_arena != submessage_arena) {
      all_stats_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_stats_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.all_stats_data_ = all_stats_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.all_stats_data)
}

// float hp = 3;
inline void RoleSaveData::clear_hp() {
  _impl_.hp_ = 0;
}
inline float RoleSaveData::_internal_hp() const {
  return _impl_.hp_;
}
inline float RoleSaveData::hp() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.hp)
  return _internal_hp();
}
inline void RoleSaveData::_internal_set_hp(float value) {
  
  _impl_.hp_ = value;
}
inline void RoleSaveData::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSaveData.hp)
}

// float mp = 4;
inline void RoleSaveData::clear_mp() {
  _impl_.mp_ = 0;
}
inline float RoleSaveData::_internal_mp() const {
  return _impl_.mp_;
}
inline float RoleSaveData::mp() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.mp)
  return _internal_mp();
}
inline void RoleSaveData::_internal_set_mp(float value) {
  
  _impl_.mp_ = value;
}
inline void RoleSaveData::set_mp(float value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleSaveData.mp)
}

// .idlepb.RoleQuestData quest = 5;
inline bool RoleSaveData::_internal_has_quest() const {
  return this != internal_default_instance() && _impl_.quest_ != nullptr;
}
inline bool RoleSaveData::has_quest() const {
  return _internal_has_quest();
}
inline void RoleSaveData::clear_quest() {
  if (GetArenaForAllocation() == nullptr && _impl_.quest_ != nullptr) {
    delete _impl_.quest_;
  }
  _impl_.quest_ = nullptr;
}
inline const ::idlepb::RoleQuestData& RoleSaveData::_internal_quest() const {
  const ::idlepb::RoleQuestData* p = _impl_.quest_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleQuestData&>(
      ::idlepb::_RoleQuestData_default_instance_);
}
inline const ::idlepb::RoleQuestData& RoleSaveData::quest() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.quest)
  return _internal_quest();
}
inline void RoleSaveData::unsafe_arena_set_allocated_quest(
    ::idlepb::RoleQuestData* quest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quest_);
  }
  _impl_.quest_ = quest;
  if (quest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.quest)
}
inline ::idlepb::RoleQuestData* RoleSaveData::release_quest() {
  
  ::idlepb::RoleQuestData* temp = _impl_.quest_;
  _impl_.quest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleQuestData* RoleSaveData::unsafe_arena_release_quest() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.quest)
  
  ::idlepb::RoleQuestData* temp = _impl_.quest_;
  _impl_.quest_ = nullptr;
  return temp;
}
inline ::idlepb::RoleQuestData* RoleSaveData::_internal_mutable_quest() {
  
  if (_impl_.quest_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleQuestData>(GetArenaForAllocation());
    _impl_.quest_ = p;
  }
  return _impl_.quest_;
}
inline ::idlepb::RoleQuestData* RoleSaveData::mutable_quest() {
  ::idlepb::RoleQuestData* _msg = _internal_mutable_quest();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.quest)
  return _msg;
}
inline void RoleSaveData::set_allocated_quest(::idlepb::RoleQuestData* quest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.quest_;
  }
  if (quest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quest);
    if (message_arena != submessage_arena) {
      quest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.quest_ = quest;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.quest)
}

// .idlepb.RoleShopData shop = 6;
inline bool RoleSaveData::_internal_has_shop() const {
  return this != internal_default_instance() && _impl_.shop_ != nullptr;
}
inline bool RoleSaveData::has_shop() const {
  return _internal_has_shop();
}
inline void RoleSaveData::clear_shop() {
  if (GetArenaForAllocation() == nullptr && _impl_.shop_ != nullptr) {
    delete _impl_.shop_;
  }
  _impl_.shop_ = nullptr;
}
inline const ::idlepb::RoleShopData& RoleSaveData::_internal_shop() const {
  const ::idlepb::RoleShopData* p = _impl_.shop_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleShopData&>(
      ::idlepb::_RoleShopData_default_instance_);
}
inline const ::idlepb::RoleShopData& RoleSaveData::shop() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.shop)
  return _internal_shop();
}
inline void RoleSaveData::unsafe_arena_set_allocated_shop(
    ::idlepb::RoleShopData* shop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shop_);
  }
  _impl_.shop_ = shop;
  if (shop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.shop)
}
inline ::idlepb::RoleShopData* RoleSaveData::release_shop() {
  
  ::idlepb::RoleShopData* temp = _impl_.shop_;
  _impl_.shop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleShopData* RoleSaveData::unsafe_arena_release_shop() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.shop)
  
  ::idlepb::RoleShopData* temp = _impl_.shop_;
  _impl_.shop_ = nullptr;
  return temp;
}
inline ::idlepb::RoleShopData* RoleSaveData::_internal_mutable_shop() {
  
  if (_impl_.shop_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleShopData>(GetArenaForAllocation());
    _impl_.shop_ = p;
  }
  return _impl_.shop_;
}
inline ::idlepb::RoleShopData* RoleSaveData::mutable_shop() {
  ::idlepb::RoleShopData* _msg = _internal_mutable_shop();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.shop)
  return _msg;
}
inline void RoleSaveData::set_allocated_shop(::idlepb::RoleShopData* shop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shop_;
  }
  if (shop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shop);
    if (message_arena != submessage_arena) {
      shop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shop_ = shop;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.shop)
}

// .idlepb.RoleTemporaryPackageData temporary_package = 7;
inline bool RoleSaveData::_internal_has_temporary_package() const {
  return this != internal_default_instance() && _impl_.temporary_package_ != nullptr;
}
inline bool RoleSaveData::has_temporary_package() const {
  return _internal_has_temporary_package();
}
inline void RoleSaveData::clear_temporary_package() {
  if (GetArenaForAllocation() == nullptr && _impl_.temporary_package_ != nullptr) {
    delete _impl_.temporary_package_;
  }
  _impl_.temporary_package_ = nullptr;
}
inline const ::idlepb::RoleTemporaryPackageData& RoleSaveData::_internal_temporary_package() const {
  const ::idlepb::RoleTemporaryPackageData* p = _impl_.temporary_package_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleTemporaryPackageData&>(
      ::idlepb::_RoleTemporaryPackageData_default_instance_);
}
inline const ::idlepb::RoleTemporaryPackageData& RoleSaveData::temporary_package() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.temporary_package)
  return _internal_temporary_package();
}
inline void RoleSaveData::unsafe_arena_set_allocated_temporary_package(
    ::idlepb::RoleTemporaryPackageData* temporary_package) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.temporary_package_);
  }
  _impl_.temporary_package_ = temporary_package;
  if (temporary_package) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.temporary_package)
}
inline ::idlepb::RoleTemporaryPackageData* RoleSaveData::release_temporary_package() {
  
  ::idlepb::RoleTemporaryPackageData* temp = _impl_.temporary_package_;
  _impl_.temporary_package_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleTemporaryPackageData* RoleSaveData::unsafe_arena_release_temporary_package() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.temporary_package)
  
  ::idlepb::RoleTemporaryPackageData* temp = _impl_.temporary_package_;
  _impl_.temporary_package_ = nullptr;
  return temp;
}
inline ::idlepb::RoleTemporaryPackageData* RoleSaveData::_internal_mutable_temporary_package() {
  
  if (_impl_.temporary_package_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleTemporaryPackageData>(GetArenaForAllocation());
    _impl_.temporary_package_ = p;
  }
  return _impl_.temporary_package_;
}
inline ::idlepb::RoleTemporaryPackageData* RoleSaveData::mutable_temporary_package() {
  ::idlepb::RoleTemporaryPackageData* _msg = _internal_mutable_temporary_package();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.temporary_package)
  return _msg;
}
inline void RoleSaveData::set_allocated_temporary_package(::idlepb::RoleTemporaryPackageData* temporary_package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.temporary_package_;
  }
  if (temporary_package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(temporary_package);
    if (message_arena != submessage_arena) {
      temporary_package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, temporary_package, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.temporary_package_ = temporary_package;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.temporary_package)
}

// .idlepb.RoleInventoryData inventory = 8;
inline bool RoleSaveData::_internal_has_inventory() const {
  return this != internal_default_instance() && _impl_.inventory_ != nullptr;
}
inline bool RoleSaveData::has_inventory() const {
  return _internal_has_inventory();
}
inline void RoleSaveData::clear_inventory() {
  if (GetArenaForAllocation() == nullptr && _impl_.inventory_ != nullptr) {
    delete _impl_.inventory_;
  }
  _impl_.inventory_ = nullptr;
}
inline const ::idlepb::RoleInventoryData& RoleSaveData::_internal_inventory() const {
  const ::idlepb::RoleInventoryData* p = _impl_.inventory_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleInventoryData&>(
      ::idlepb::_RoleInventoryData_default_instance_);
}
inline const ::idlepb::RoleInventoryData& RoleSaveData::inventory() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.inventory)
  return _internal_inventory();
}
inline void RoleSaveData::unsafe_arena_set_allocated_inventory(
    ::idlepb::RoleInventoryData* inventory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inventory_);
  }
  _impl_.inventory_ = inventory;
  if (inventory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.inventory)
}
inline ::idlepb::RoleInventoryData* RoleSaveData::release_inventory() {
  
  ::idlepb::RoleInventoryData* temp = _impl_.inventory_;
  _impl_.inventory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleInventoryData* RoleSaveData::unsafe_arena_release_inventory() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.inventory)
  
  ::idlepb::RoleInventoryData* temp = _impl_.inventory_;
  _impl_.inventory_ = nullptr;
  return temp;
}
inline ::idlepb::RoleInventoryData* RoleSaveData::_internal_mutable_inventory() {
  
  if (_impl_.inventory_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleInventoryData>(GetArenaForAllocation());
    _impl_.inventory_ = p;
  }
  return _impl_.inventory_;
}
inline ::idlepb::RoleInventoryData* RoleSaveData::mutable_inventory() {
  ::idlepb::RoleInventoryData* _msg = _internal_mutable_inventory();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.inventory)
  return _msg;
}
inline void RoleSaveData::set_allocated_inventory(::idlepb::RoleInventoryData* inventory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inventory_;
  }
  if (inventory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inventory);
    if (message_arena != submessage_arena) {
      inventory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inventory, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inventory_ = inventory;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.inventory)
}

// .idlepb.RoleOfflineData offline_data = 16;
inline bool RoleSaveData::_internal_has_offline_data() const {
  return this != internal_default_instance() && _impl_.offline_data_ != nullptr;
}
inline bool RoleSaveData::has_offline_data() const {
  return _internal_has_offline_data();
}
inline void RoleSaveData::clear_offline_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.offline_data_ != nullptr) {
    delete _impl_.offline_data_;
  }
  _impl_.offline_data_ = nullptr;
}
inline const ::idlepb::RoleOfflineData& RoleSaveData::_internal_offline_data() const {
  const ::idlepb::RoleOfflineData* p = _impl_.offline_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleOfflineData&>(
      ::idlepb::_RoleOfflineData_default_instance_);
}
inline const ::idlepb::RoleOfflineData& RoleSaveData::offline_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.offline_data)
  return _internal_offline_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_offline_data(
    ::idlepb::RoleOfflineData* offline_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offline_data_);
  }
  _impl_.offline_data_ = offline_data;
  if (offline_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.offline_data)
}
inline ::idlepb::RoleOfflineData* RoleSaveData::release_offline_data() {
  
  ::idlepb::RoleOfflineData* temp = _impl_.offline_data_;
  _impl_.offline_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleOfflineData* RoleSaveData::unsafe_arena_release_offline_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.offline_data)
  
  ::idlepb::RoleOfflineData* temp = _impl_.offline_data_;
  _impl_.offline_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleOfflineData* RoleSaveData::_internal_mutable_offline_data() {
  
  if (_impl_.offline_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleOfflineData>(GetArenaForAllocation());
    _impl_.offline_data_ = p;
  }
  return _impl_.offline_data_;
}
inline ::idlepb::RoleOfflineData* RoleSaveData::mutable_offline_data() {
  ::idlepb::RoleOfflineData* _msg = _internal_mutable_offline_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.offline_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_offline_data(::idlepb::RoleOfflineData* offline_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.offline_data_;
  }
  if (offline_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offline_data);
    if (message_arena != submessage_arena) {
      offline_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offline_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offline_data_ = offline_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.offline_data)
}

// .idlepb.RoleAlchemyData alchemy_data = 17;
inline bool RoleSaveData::_internal_has_alchemy_data() const {
  return this != internal_default_instance() && _impl_.alchemy_data_ != nullptr;
}
inline bool RoleSaveData::has_alchemy_data() const {
  return _internal_has_alchemy_data();
}
inline void RoleSaveData::clear_alchemy_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.alchemy_data_ != nullptr) {
    delete _impl_.alchemy_data_;
  }
  _impl_.alchemy_data_ = nullptr;
}
inline const ::idlepb::RoleAlchemyData& RoleSaveData::_internal_alchemy_data() const {
  const ::idlepb::RoleAlchemyData* p = _impl_.alchemy_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleAlchemyData&>(
      ::idlepb::_RoleAlchemyData_default_instance_);
}
inline const ::idlepb::RoleAlchemyData& RoleSaveData::alchemy_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.alchemy_data)
  return _internal_alchemy_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_alchemy_data(
    ::idlepb::RoleAlchemyData* alchemy_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alchemy_data_);
  }
  _impl_.alchemy_data_ = alchemy_data;
  if (alchemy_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.alchemy_data)
}
inline ::idlepb::RoleAlchemyData* RoleSaveData::release_alchemy_data() {
  
  ::idlepb::RoleAlchemyData* temp = _impl_.alchemy_data_;
  _impl_.alchemy_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleAlchemyData* RoleSaveData::unsafe_arena_release_alchemy_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.alchemy_data)
  
  ::idlepb::RoleAlchemyData* temp = _impl_.alchemy_data_;
  _impl_.alchemy_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleAlchemyData* RoleSaveData::_internal_mutable_alchemy_data() {
  
  if (_impl_.alchemy_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleAlchemyData>(GetArenaForAllocation());
    _impl_.alchemy_data_ = p;
  }
  return _impl_.alchemy_data_;
}
inline ::idlepb::RoleAlchemyData* RoleSaveData::mutable_alchemy_data() {
  ::idlepb::RoleAlchemyData* _msg = _internal_mutable_alchemy_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.alchemy_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_alchemy_data(::idlepb::RoleAlchemyData* alchemy_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.alchemy_data_;
  }
  if (alchemy_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alchemy_data);
    if (message_arena != submessage_arena) {
      alchemy_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alchemy_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.alchemy_data_ = alchemy_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.alchemy_data)
}

// .idlepb.RoleDeluxeShopData deluxe_shop = 18;
inline bool RoleSaveData::_internal_has_deluxe_shop() const {
  return this != internal_default_instance() && _impl_.deluxe_shop_ != nullptr;
}
inline bool RoleSaveData::has_deluxe_shop() const {
  return _internal_has_deluxe_shop();
}
inline void RoleSaveData::clear_deluxe_shop() {
  if (GetArenaForAllocation() == nullptr && _impl_.deluxe_shop_ != nullptr) {
    delete _impl_.deluxe_shop_;
  }
  _impl_.deluxe_shop_ = nullptr;
}
inline const ::idlepb::RoleDeluxeShopData& RoleSaveData::_internal_deluxe_shop() const {
  const ::idlepb::RoleDeluxeShopData* p = _impl_.deluxe_shop_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleDeluxeShopData&>(
      ::idlepb::_RoleDeluxeShopData_default_instance_);
}
inline const ::idlepb::RoleDeluxeShopData& RoleSaveData::deluxe_shop() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.deluxe_shop)
  return _internal_deluxe_shop();
}
inline void RoleSaveData::unsafe_arena_set_allocated_deluxe_shop(
    ::idlepb::RoleDeluxeShopData* deluxe_shop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deluxe_shop_);
  }
  _impl_.deluxe_shop_ = deluxe_shop;
  if (deluxe_shop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.deluxe_shop)
}
inline ::idlepb::RoleDeluxeShopData* RoleSaveData::release_deluxe_shop() {
  
  ::idlepb::RoleDeluxeShopData* temp = _impl_.deluxe_shop_;
  _impl_.deluxe_shop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleDeluxeShopData* RoleSaveData::unsafe_arena_release_deluxe_shop() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.deluxe_shop)
  
  ::idlepb::RoleDeluxeShopData* temp = _impl_.deluxe_shop_;
  _impl_.deluxe_shop_ = nullptr;
  return temp;
}
inline ::idlepb::RoleDeluxeShopData* RoleSaveData::_internal_mutable_deluxe_shop() {
  
  if (_impl_.deluxe_shop_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleDeluxeShopData>(GetArenaForAllocation());
    _impl_.deluxe_shop_ = p;
  }
  return _impl_.deluxe_shop_;
}
inline ::idlepb::RoleDeluxeShopData* RoleSaveData::mutable_deluxe_shop() {
  ::idlepb::RoleDeluxeShopData* _msg = _internal_mutable_deluxe_shop();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.deluxe_shop)
  return _msg;
}
inline void RoleSaveData::set_allocated_deluxe_shop(::idlepb::RoleDeluxeShopData* deluxe_shop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.deluxe_shop_;
  }
  if (deluxe_shop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(deluxe_shop);
    if (message_arena != submessage_arena) {
      deluxe_shop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deluxe_shop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.deluxe_shop_ = deluxe_shop;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.deluxe_shop)
}

// .idlepb.RoleLeaderboardData leaderboard_data = 19;
inline bool RoleSaveData::_internal_has_leaderboard_data() const {
  return this != internal_default_instance() && _impl_.leaderboard_data_ != nullptr;
}
inline bool RoleSaveData::has_leaderboard_data() const {
  return _internal_has_leaderboard_data();
}
inline void RoleSaveData::clear_leaderboard_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.leaderboard_data_ != nullptr) {
    delete _impl_.leaderboard_data_;
  }
  _impl_.leaderboard_data_ = nullptr;
}
inline const ::idlepb::RoleLeaderboardData& RoleSaveData::_internal_leaderboard_data() const {
  const ::idlepb::RoleLeaderboardData* p = _impl_.leaderboard_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleLeaderboardData&>(
      ::idlepb::_RoleLeaderboardData_default_instance_);
}
inline const ::idlepb::RoleLeaderboardData& RoleSaveData::leaderboard_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.leaderboard_data)
  return _internal_leaderboard_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_leaderboard_data(
    ::idlepb::RoleLeaderboardData* leaderboard_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leaderboard_data_);
  }
  _impl_.leaderboard_data_ = leaderboard_data;
  if (leaderboard_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.leaderboard_data)
}
inline ::idlepb::RoleLeaderboardData* RoleSaveData::release_leaderboard_data() {
  
  ::idlepb::RoleLeaderboardData* temp = _impl_.leaderboard_data_;
  _impl_.leaderboard_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleLeaderboardData* RoleSaveData::unsafe_arena_release_leaderboard_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.leaderboard_data)
  
  ::idlepb::RoleLeaderboardData* temp = _impl_.leaderboard_data_;
  _impl_.leaderboard_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleLeaderboardData* RoleSaveData::_internal_mutable_leaderboard_data() {
  
  if (_impl_.leaderboard_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleLeaderboardData>(GetArenaForAllocation());
    _impl_.leaderboard_data_ = p;
  }
  return _impl_.leaderboard_data_;
}
inline ::idlepb::RoleLeaderboardData* RoleSaveData::mutable_leaderboard_data() {
  ::idlepb::RoleLeaderboardData* _msg = _internal_mutable_leaderboard_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.leaderboard_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_leaderboard_data(::idlepb::RoleLeaderboardData* leaderboard_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.leaderboard_data_;
  }
  if (leaderboard_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leaderboard_data);
    if (message_arena != submessage_arena) {
      leaderboard_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaderboard_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.leaderboard_data_ = leaderboard_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.leaderboard_data)
}

// .idlepb.RoleMailData mail_data = 20;
inline bool RoleSaveData::_internal_has_mail_data() const {
  return this != internal_default_instance() && _impl_.mail_data_ != nullptr;
}
inline bool RoleSaveData::has_mail_data() const {
  return _internal_has_mail_data();
}
inline void RoleSaveData::clear_mail_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.mail_data_ != nullptr) {
    delete _impl_.mail_data_;
  }
  _impl_.mail_data_ = nullptr;
}
inline const ::idlepb::RoleMailData& RoleSaveData::_internal_mail_data() const {
  const ::idlepb::RoleMailData* p = _impl_.mail_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleMailData&>(
      ::idlepb::_RoleMailData_default_instance_);
}
inline const ::idlepb::RoleMailData& RoleSaveData::mail_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.mail_data)
  return _internal_mail_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_mail_data(
    ::idlepb::RoleMailData* mail_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mail_data_);
  }
  _impl_.mail_data_ = mail_data;
  if (mail_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.mail_data)
}
inline ::idlepb::RoleMailData* RoleSaveData::release_mail_data() {
  
  ::idlepb::RoleMailData* temp = _impl_.mail_data_;
  _impl_.mail_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleMailData* RoleSaveData::unsafe_arena_release_mail_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.mail_data)
  
  ::idlepb::RoleMailData* temp = _impl_.mail_data_;
  _impl_.mail_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleMailData* RoleSaveData::_internal_mutable_mail_data() {
  
  if (_impl_.mail_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleMailData>(GetArenaForAllocation());
    _impl_.mail_data_ = p;
  }
  return _impl_.mail_data_;
}
inline ::idlepb::RoleMailData* RoleSaveData::mutable_mail_data() {
  ::idlepb::RoleMailData* _msg = _internal_mutable_mail_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.mail_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_mail_data(::idlepb::RoleMailData* mail_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mail_data_;
  }
  if (mail_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mail_data);
    if (message_arena != submessage_arena) {
      mail_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mail_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mail_data_ = mail_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.mail_data)
}

// .idlepb.RoleForgeData forge_data = 21;
inline bool RoleSaveData::_internal_has_forge_data() const {
  return this != internal_default_instance() && _impl_.forge_data_ != nullptr;
}
inline bool RoleSaveData::has_forge_data() const {
  return _internal_has_forge_data();
}
inline void RoleSaveData::clear_forge_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.forge_data_ != nullptr) {
    delete _impl_.forge_data_;
  }
  _impl_.forge_data_ = nullptr;
}
inline const ::idlepb::RoleForgeData& RoleSaveData::_internal_forge_data() const {
  const ::idlepb::RoleForgeData* p = _impl_.forge_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleForgeData&>(
      ::idlepb::_RoleForgeData_default_instance_);
}
inline const ::idlepb::RoleForgeData& RoleSaveData::forge_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.forge_data)
  return _internal_forge_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_forge_data(
    ::idlepb::RoleForgeData* forge_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forge_data_);
  }
  _impl_.forge_data_ = forge_data;
  if (forge_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.forge_data)
}
inline ::idlepb::RoleForgeData* RoleSaveData::release_forge_data() {
  
  ::idlepb::RoleForgeData* temp = _impl_.forge_data_;
  _impl_.forge_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleForgeData* RoleSaveData::unsafe_arena_release_forge_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.forge_data)
  
  ::idlepb::RoleForgeData* temp = _impl_.forge_data_;
  _impl_.forge_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleForgeData* RoleSaveData::_internal_mutable_forge_data() {
  
  if (_impl_.forge_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleForgeData>(GetArenaForAllocation());
    _impl_.forge_data_ = p;
  }
  return _impl_.forge_data_;
}
inline ::idlepb::RoleForgeData* RoleSaveData::mutable_forge_data() {
  ::idlepb::RoleForgeData* _msg = _internal_mutable_forge_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.forge_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_forge_data(::idlepb::RoleForgeData* forge_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.forge_data_;
  }
  if (forge_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(forge_data);
    if (message_arena != submessage_arena) {
      forge_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forge_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.forge_data_ = forge_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.forge_data)
}

// .idlepb.RolePillElixirData pillelixir_data = 22;
inline bool RoleSaveData::_internal_has_pillelixir_data() const {
  return this != internal_default_instance() && _impl_.pillelixir_data_ != nullptr;
}
inline bool RoleSaveData::has_pillelixir_data() const {
  return _internal_has_pillelixir_data();
}
inline void RoleSaveData::clear_pillelixir_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.pillelixir_data_ != nullptr) {
    delete _impl_.pillelixir_data_;
  }
  _impl_.pillelixir_data_ = nullptr;
}
inline const ::idlepb::RolePillElixirData& RoleSaveData::_internal_pillelixir_data() const {
  const ::idlepb::RolePillElixirData* p = _impl_.pillelixir_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RolePillElixirData&>(
      ::idlepb::_RolePillElixirData_default_instance_);
}
inline const ::idlepb::RolePillElixirData& RoleSaveData::pillelixir_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.pillelixir_data)
  return _internal_pillelixir_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_pillelixir_data(
    ::idlepb::RolePillElixirData* pillelixir_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pillelixir_data_);
  }
  _impl_.pillelixir_data_ = pillelixir_data;
  if (pillelixir_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.pillelixir_data)
}
inline ::idlepb::RolePillElixirData* RoleSaveData::release_pillelixir_data() {
  
  ::idlepb::RolePillElixirData* temp = _impl_.pillelixir_data_;
  _impl_.pillelixir_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RolePillElixirData* RoleSaveData::unsafe_arena_release_pillelixir_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.pillelixir_data)
  
  ::idlepb::RolePillElixirData* temp = _impl_.pillelixir_data_;
  _impl_.pillelixir_data_ = nullptr;
  return temp;
}
inline ::idlepb::RolePillElixirData* RoleSaveData::_internal_mutable_pillelixir_data() {
  
  if (_impl_.pillelixir_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RolePillElixirData>(GetArenaForAllocation());
    _impl_.pillelixir_data_ = p;
  }
  return _impl_.pillelixir_data_;
}
inline ::idlepb::RolePillElixirData* RoleSaveData::mutable_pillelixir_data() {
  ::idlepb::RolePillElixirData* _msg = _internal_mutable_pillelixir_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.pillelixir_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_pillelixir_data(::idlepb::RolePillElixirData* pillelixir_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pillelixir_data_;
  }
  if (pillelixir_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pillelixir_data);
    if (message_arena != submessage_arena) {
      pillelixir_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pillelixir_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pillelixir_data_ = pillelixir_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.pillelixir_data)
}

// .idlepb.CommonCultivationData common_cultivation_data = 23;
inline bool RoleSaveData::_internal_has_common_cultivation_data() const {
  return this != internal_default_instance() && _impl_.common_cultivation_data_ != nullptr;
}
inline bool RoleSaveData::has_common_cultivation_data() const {
  return _internal_has_common_cultivation_data();
}
inline void RoleSaveData::clear_common_cultivation_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_cultivation_data_ != nullptr) {
    delete _impl_.common_cultivation_data_;
  }
  _impl_.common_cultivation_data_ = nullptr;
}
inline const ::idlepb::CommonCultivationData& RoleSaveData::_internal_common_cultivation_data() const {
  const ::idlepb::CommonCultivationData* p = _impl_.common_cultivation_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CommonCultivationData&>(
      ::idlepb::_CommonCultivationData_default_instance_);
}
inline const ::idlepb::CommonCultivationData& RoleSaveData::common_cultivation_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.common_cultivation_data)
  return _internal_common_cultivation_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_common_cultivation_data(
    ::idlepb::CommonCultivationData* common_cultivation_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_cultivation_data_);
  }
  _impl_.common_cultivation_data_ = common_cultivation_data;
  if (common_cultivation_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.common_cultivation_data)
}
inline ::idlepb::CommonCultivationData* RoleSaveData::release_common_cultivation_data() {
  
  ::idlepb::CommonCultivationData* temp = _impl_.common_cultivation_data_;
  _impl_.common_cultivation_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CommonCultivationData* RoleSaveData::unsafe_arena_release_common_cultivation_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.common_cultivation_data)
  
  ::idlepb::CommonCultivationData* temp = _impl_.common_cultivation_data_;
  _impl_.common_cultivation_data_ = nullptr;
  return temp;
}
inline ::idlepb::CommonCultivationData* RoleSaveData::_internal_mutable_common_cultivation_data() {
  
  if (_impl_.common_cultivation_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CommonCultivationData>(GetArenaForAllocation());
    _impl_.common_cultivation_data_ = p;
  }
  return _impl_.common_cultivation_data_;
}
inline ::idlepb::CommonCultivationData* RoleSaveData::mutable_common_cultivation_data() {
  ::idlepb::CommonCultivationData* _msg = _internal_mutable_common_cultivation_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.common_cultivation_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_common_cultivation_data(::idlepb::CommonCultivationData* common_cultivation_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_cultivation_data_;
  }
  if (common_cultivation_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_cultivation_data);
    if (message_arena != submessage_arena) {
      common_cultivation_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_cultivation_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_cultivation_data_ = common_cultivation_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.common_cultivation_data)
}

// .idlepb.RoleZasData zas_data = 24;
inline bool RoleSaveData::_internal_has_zas_data() const {
  return this != internal_default_instance() && _impl_.zas_data_ != nullptr;
}
inline bool RoleSaveData::has_zas_data() const {
  return _internal_has_zas_data();
}
inline void RoleSaveData::clear_zas_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.zas_data_ != nullptr) {
    delete _impl_.zas_data_;
  }
  _impl_.zas_data_ = nullptr;
}
inline const ::idlepb::RoleZasData& RoleSaveData::_internal_zas_data() const {
  const ::idlepb::RoleZasData* p = _impl_.zas_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleZasData&>(
      ::idlepb::_RoleZasData_default_instance_);
}
inline const ::idlepb::RoleZasData& RoleSaveData::zas_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.zas_data)
  return _internal_zas_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_zas_data(
    ::idlepb::RoleZasData* zas_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zas_data_);
  }
  _impl_.zas_data_ = zas_data;
  if (zas_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.zas_data)
}
inline ::idlepb::RoleZasData* RoleSaveData::release_zas_data() {
  
  ::idlepb::RoleZasData* temp = _impl_.zas_data_;
  _impl_.zas_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleZasData* RoleSaveData::unsafe_arena_release_zas_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.zas_data)
  
  ::idlepb::RoleZasData* temp = _impl_.zas_data_;
  _impl_.zas_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleZasData* RoleSaveData::_internal_mutable_zas_data() {
  
  if (_impl_.zas_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleZasData>(GetArenaForAllocation());
    _impl_.zas_data_ = p;
  }
  return _impl_.zas_data_;
}
inline ::idlepb::RoleZasData* RoleSaveData::mutable_zas_data() {
  ::idlepb::RoleZasData* _msg = _internal_mutable_zas_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.zas_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_zas_data(::idlepb::RoleZasData* zas_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zas_data_;
  }
  if (zas_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zas_data);
    if (message_arena != submessage_arena) {
      zas_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zas_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.zas_data_ = zas_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.zas_data)
}

// .idlepb.RoleMonsterTowerData monster_tower_data = 25;
inline bool RoleSaveData::_internal_has_monster_tower_data() const {
  return this != internal_default_instance() && _impl_.monster_tower_data_ != nullptr;
}
inline bool RoleSaveData::has_monster_tower_data() const {
  return _internal_has_monster_tower_data();
}
inline void RoleSaveData::clear_monster_tower_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.monster_tower_data_ != nullptr) {
    delete _impl_.monster_tower_data_;
  }
  _impl_.monster_tower_data_ = nullptr;
}
inline const ::idlepb::RoleMonsterTowerData& RoleSaveData::_internal_monster_tower_data() const {
  const ::idlepb::RoleMonsterTowerData* p = _impl_.monster_tower_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleMonsterTowerData&>(
      ::idlepb::_RoleMonsterTowerData_default_instance_);
}
inline const ::idlepb::RoleMonsterTowerData& RoleSaveData::monster_tower_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.monster_tower_data)
  return _internal_monster_tower_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_monster_tower_data(
    ::idlepb::RoleMonsterTowerData* monster_tower_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.monster_tower_data_);
  }
  _impl_.monster_tower_data_ = monster_tower_data;
  if (monster_tower_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.monster_tower_data)
}
inline ::idlepb::RoleMonsterTowerData* RoleSaveData::release_monster_tower_data() {
  
  ::idlepb::RoleMonsterTowerData* temp = _impl_.monster_tower_data_;
  _impl_.monster_tower_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleMonsterTowerData* RoleSaveData::unsafe_arena_release_monster_tower_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.monster_tower_data)
  
  ::idlepb::RoleMonsterTowerData* temp = _impl_.monster_tower_data_;
  _impl_.monster_tower_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleMonsterTowerData* RoleSaveData::_internal_mutable_monster_tower_data() {
  
  if (_impl_.monster_tower_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleMonsterTowerData>(GetArenaForAllocation());
    _impl_.monster_tower_data_ = p;
  }
  return _impl_.monster_tower_data_;
}
inline ::idlepb::RoleMonsterTowerData* RoleSaveData::mutable_monster_tower_data() {
  ::idlepb::RoleMonsterTowerData* _msg = _internal_mutable_monster_tower_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.monster_tower_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_monster_tower_data(::idlepb::RoleMonsterTowerData* monster_tower_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.monster_tower_data_;
  }
  if (monster_tower_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(monster_tower_data);
    if (message_arena != submessage_arena) {
      monster_tower_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monster_tower_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.monster_tower_data_ = monster_tower_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.monster_tower_data)
}

// .idlepb.RoleShanhetuData shanhetu_data = 26;
inline bool RoleSaveData::_internal_has_shanhetu_data() const {
  return this != internal_default_instance() && _impl_.shanhetu_data_ != nullptr;
}
inline bool RoleSaveData::has_shanhetu_data() const {
  return _internal_has_shanhetu_data();
}
inline void RoleSaveData::clear_shanhetu_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.shanhetu_data_ != nullptr) {
    delete _impl_.shanhetu_data_;
  }
  _impl_.shanhetu_data_ = nullptr;
}
inline const ::idlepb::RoleShanhetuData& RoleSaveData::_internal_shanhetu_data() const {
  const ::idlepb::RoleShanhetuData* p = _impl_.shanhetu_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleShanhetuData&>(
      ::idlepb::_RoleShanhetuData_default_instance_);
}
inline const ::idlepb::RoleShanhetuData& RoleSaveData::shanhetu_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.shanhetu_data)
  return _internal_shanhetu_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_shanhetu_data(
    ::idlepb::RoleShanhetuData* shanhetu_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shanhetu_data_);
  }
  _impl_.shanhetu_data_ = shanhetu_data;
  if (shanhetu_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.shanhetu_data)
}
inline ::idlepb::RoleShanhetuData* RoleSaveData::release_shanhetu_data() {
  
  ::idlepb::RoleShanhetuData* temp = _impl_.shanhetu_data_;
  _impl_.shanhetu_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleShanhetuData* RoleSaveData::unsafe_arena_release_shanhetu_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.shanhetu_data)
  
  ::idlepb::RoleShanhetuData* temp = _impl_.shanhetu_data_;
  _impl_.shanhetu_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleShanhetuData* RoleSaveData::_internal_mutable_shanhetu_data() {
  
  if (_impl_.shanhetu_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleShanhetuData>(GetArenaForAllocation());
    _impl_.shanhetu_data_ = p;
  }
  return _impl_.shanhetu_data_;
}
inline ::idlepb::RoleShanhetuData* RoleSaveData::mutable_shanhetu_data() {
  ::idlepb::RoleShanhetuData* _msg = _internal_mutable_shanhetu_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.shanhetu_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_shanhetu_data(::idlepb::RoleShanhetuData* shanhetu_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shanhetu_data_;
  }
  if (shanhetu_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shanhetu_data);
    if (message_arena != submessage_arena) {
      shanhetu_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shanhetu_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shanhetu_data_ = shanhetu_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.shanhetu_data)
}

// .idlepb.RoleBossInvasionData boss_invasion_data = 27;
inline bool RoleSaveData::_internal_has_boss_invasion_data() const {
  return this != internal_default_instance() && _impl_.boss_invasion_data_ != nullptr;
}
inline bool RoleSaveData::has_boss_invasion_data() const {
  return _internal_has_boss_invasion_data();
}
inline void RoleSaveData::clear_boss_invasion_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.boss_invasion_data_ != nullptr) {
    delete _impl_.boss_invasion_data_;
  }
  _impl_.boss_invasion_data_ = nullptr;
}
inline const ::idlepb::RoleBossInvasionData& RoleSaveData::_internal_boss_invasion_data() const {
  const ::idlepb::RoleBossInvasionData* p = _impl_.boss_invasion_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleBossInvasionData&>(
      ::idlepb::_RoleBossInvasionData_default_instance_);
}
inline const ::idlepb::RoleBossInvasionData& RoleSaveData::boss_invasion_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.boss_invasion_data)
  return _internal_boss_invasion_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_boss_invasion_data(
    ::idlepb::RoleBossInvasionData* boss_invasion_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boss_invasion_data_);
  }
  _impl_.boss_invasion_data_ = boss_invasion_data;
  if (boss_invasion_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.boss_invasion_data)
}
inline ::idlepb::RoleBossInvasionData* RoleSaveData::release_boss_invasion_data() {
  
  ::idlepb::RoleBossInvasionData* temp = _impl_.boss_invasion_data_;
  _impl_.boss_invasion_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleBossInvasionData* RoleSaveData::unsafe_arena_release_boss_invasion_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.boss_invasion_data)
  
  ::idlepb::RoleBossInvasionData* temp = _impl_.boss_invasion_data_;
  _impl_.boss_invasion_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleBossInvasionData* RoleSaveData::_internal_mutable_boss_invasion_data() {
  
  if (_impl_.boss_invasion_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleBossInvasionData>(GetArenaForAllocation());
    _impl_.boss_invasion_data_ = p;
  }
  return _impl_.boss_invasion_data_;
}
inline ::idlepb::RoleBossInvasionData* RoleSaveData::mutable_boss_invasion_data() {
  ::idlepb::RoleBossInvasionData* _msg = _internal_mutable_boss_invasion_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.boss_invasion_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_boss_invasion_data(::idlepb::RoleBossInvasionData* boss_invasion_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.boss_invasion_data_;
  }
  if (boss_invasion_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boss_invasion_data);
    if (message_arena != submessage_arena) {
      boss_invasion_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boss_invasion_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.boss_invasion_data_ = boss_invasion_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.boss_invasion_data)
}

// .idlepb.RoleMasiveData massive_data = 28;
inline bool RoleSaveData::_internal_has_massive_data() const {
  return this != internal_default_instance() && _impl_.massive_data_ != nullptr;
}
inline bool RoleSaveData::has_massive_data() const {
  return _internal_has_massive_data();
}
inline void RoleSaveData::clear_massive_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.massive_data_ != nullptr) {
    delete _impl_.massive_data_;
  }
  _impl_.massive_data_ = nullptr;
}
inline const ::idlepb::RoleMasiveData& RoleSaveData::_internal_massive_data() const {
  const ::idlepb::RoleMasiveData* p = _impl_.massive_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleMasiveData&>(
      ::idlepb::_RoleMasiveData_default_instance_);
}
inline const ::idlepb::RoleMasiveData& RoleSaveData::massive_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.massive_data)
  return _internal_massive_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_massive_data(
    ::idlepb::RoleMasiveData* massive_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.massive_data_);
  }
  _impl_.massive_data_ = massive_data;
  if (massive_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.massive_data)
}
inline ::idlepb::RoleMasiveData* RoleSaveData::release_massive_data() {
  
  ::idlepb::RoleMasiveData* temp = _impl_.massive_data_;
  _impl_.massive_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleMasiveData* RoleSaveData::unsafe_arena_release_massive_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.massive_data)
  
  ::idlepb::RoleMasiveData* temp = _impl_.massive_data_;
  _impl_.massive_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleMasiveData* RoleSaveData::_internal_mutable_massive_data() {
  
  if (_impl_.massive_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleMasiveData>(GetArenaForAllocation());
    _impl_.massive_data_ = p;
  }
  return _impl_.massive_data_;
}
inline ::idlepb::RoleMasiveData* RoleSaveData::mutable_massive_data() {
  ::idlepb::RoleMasiveData* _msg = _internal_mutable_massive_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.massive_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_massive_data(::idlepb::RoleMasiveData* massive_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.massive_data_;
  }
  if (massive_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(massive_data);
    if (message_arena != submessage_arena) {
      massive_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, massive_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.massive_data_ = massive_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.massive_data)
}

// .idlepb.RoleChecklistData checklist_data = 29;
inline bool RoleSaveData::_internal_has_checklist_data() const {
  return this != internal_default_instance() && _impl_.checklist_data_ != nullptr;
}
inline bool RoleSaveData::has_checklist_data() const {
  return _internal_has_checklist_data();
}
inline void RoleSaveData::clear_checklist_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.checklist_data_ != nullptr) {
    delete _impl_.checklist_data_;
  }
  _impl_.checklist_data_ = nullptr;
}
inline const ::idlepb::RoleChecklistData& RoleSaveData::_internal_checklist_data() const {
  const ::idlepb::RoleChecklistData* p = _impl_.checklist_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleChecklistData&>(
      ::idlepb::_RoleChecklistData_default_instance_);
}
inline const ::idlepb::RoleChecklistData& RoleSaveData::checklist_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.checklist_data)
  return _internal_checklist_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_checklist_data(
    ::idlepb::RoleChecklistData* checklist_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.checklist_data_);
  }
  _impl_.checklist_data_ = checklist_data;
  if (checklist_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.checklist_data)
}
inline ::idlepb::RoleChecklistData* RoleSaveData::release_checklist_data() {
  
  ::idlepb::RoleChecklistData* temp = _impl_.checklist_data_;
  _impl_.checklist_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleChecklistData* RoleSaveData::unsafe_arena_release_checklist_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.checklist_data)
  
  ::idlepb::RoleChecklistData* temp = _impl_.checklist_data_;
  _impl_.checklist_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleChecklistData* RoleSaveData::_internal_mutable_checklist_data() {
  
  if (_impl_.checklist_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleChecklistData>(GetArenaForAllocation());
    _impl_.checklist_data_ = p;
  }
  return _impl_.checklist_data_;
}
inline ::idlepb::RoleChecklistData* RoleSaveData::mutable_checklist_data() {
  ::idlepb::RoleChecklistData* _msg = _internal_mutable_checklist_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.checklist_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_checklist_data(::idlepb::RoleChecklistData* checklist_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.checklist_data_;
  }
  if (checklist_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(checklist_data);
    if (message_arena != submessage_arena) {
      checklist_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checklist_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.checklist_data_ = checklist_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.checklist_data)
}

// .idlepb.RoleCommonItemExchangeData common_item_exchange_data = 30;
inline bool RoleSaveData::_internal_has_common_item_exchange_data() const {
  return this != internal_default_instance() && _impl_.common_item_exchange_data_ != nullptr;
}
inline bool RoleSaveData::has_common_item_exchange_data() const {
  return _internal_has_common_item_exchange_data();
}
inline void RoleSaveData::clear_common_item_exchange_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.common_item_exchange_data_ != nullptr) {
    delete _impl_.common_item_exchange_data_;
  }
  _impl_.common_item_exchange_data_ = nullptr;
}
inline const ::idlepb::RoleCommonItemExchangeData& RoleSaveData::_internal_common_item_exchange_data() const {
  const ::idlepb::RoleCommonItemExchangeData* p = _impl_.common_item_exchange_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleCommonItemExchangeData&>(
      ::idlepb::_RoleCommonItemExchangeData_default_instance_);
}
inline const ::idlepb::RoleCommonItemExchangeData& RoleSaveData::common_item_exchange_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.common_item_exchange_data)
  return _internal_common_item_exchange_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_common_item_exchange_data(
    ::idlepb::RoleCommonItemExchangeData* common_item_exchange_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_item_exchange_data_);
  }
  _impl_.common_item_exchange_data_ = common_item_exchange_data;
  if (common_item_exchange_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.common_item_exchange_data)
}
inline ::idlepb::RoleCommonItemExchangeData* RoleSaveData::release_common_item_exchange_data() {
  
  ::idlepb::RoleCommonItemExchangeData* temp = _impl_.common_item_exchange_data_;
  _impl_.common_item_exchange_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleCommonItemExchangeData* RoleSaveData::unsafe_arena_release_common_item_exchange_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.common_item_exchange_data)
  
  ::idlepb::RoleCommonItemExchangeData* temp = _impl_.common_item_exchange_data_;
  _impl_.common_item_exchange_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleCommonItemExchangeData* RoleSaveData::_internal_mutable_common_item_exchange_data() {
  
  if (_impl_.common_item_exchange_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleCommonItemExchangeData>(GetArenaForAllocation());
    _impl_.common_item_exchange_data_ = p;
  }
  return _impl_.common_item_exchange_data_;
}
inline ::idlepb::RoleCommonItemExchangeData* RoleSaveData::mutable_common_item_exchange_data() {
  ::idlepb::RoleCommonItemExchangeData* _msg = _internal_mutable_common_item_exchange_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.common_item_exchange_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_common_item_exchange_data(::idlepb::RoleCommonItemExchangeData* common_item_exchange_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_item_exchange_data_;
  }
  if (common_item_exchange_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_item_exchange_data);
    if (message_arena != submessage_arena) {
      common_item_exchange_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_item_exchange_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.common_item_exchange_data_ = common_item_exchange_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.common_item_exchange_data)
}

// .idlepb.RoleSeptData sept_data = 31;
inline bool RoleSaveData::_internal_has_sept_data() const {
  return this != internal_default_instance() && _impl_.sept_data_ != nullptr;
}
inline bool RoleSaveData::has_sept_data() const {
  return _internal_has_sept_data();
}
inline void RoleSaveData::clear_sept_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.sept_data_ != nullptr) {
    delete _impl_.sept_data_;
  }
  _impl_.sept_data_ = nullptr;
}
inline const ::idlepb::RoleSeptData& RoleSaveData::_internal_sept_data() const {
  const ::idlepb::RoleSeptData* p = _impl_.sept_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleSeptData&>(
      ::idlepb::_RoleSeptData_default_instance_);
}
inline const ::idlepb::RoleSeptData& RoleSaveData::sept_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.sept_data)
  return _internal_sept_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_sept_data(
    ::idlepb::RoleSeptData* sept_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sept_data_);
  }
  _impl_.sept_data_ = sept_data;
  if (sept_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.sept_data)
}
inline ::idlepb::RoleSeptData* RoleSaveData::release_sept_data() {
  
  ::idlepb::RoleSeptData* temp = _impl_.sept_data_;
  _impl_.sept_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleSeptData* RoleSaveData::unsafe_arena_release_sept_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.sept_data)
  
  ::idlepb::RoleSeptData* temp = _impl_.sept_data_;
  _impl_.sept_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleSeptData* RoleSaveData::_internal_mutable_sept_data() {
  
  if (_impl_.sept_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleSeptData>(GetArenaForAllocation());
    _impl_.sept_data_ = p;
  }
  return _impl_.sept_data_;
}
inline ::idlepb::RoleSeptData* RoleSaveData::mutable_sept_data() {
  ::idlepb::RoleSeptData* _msg = _internal_mutable_sept_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.sept_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_sept_data(::idlepb::RoleSeptData* sept_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sept_data_;
  }
  if (sept_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sept_data);
    if (message_arena != submessage_arena) {
      sept_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sept_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sept_data_ = sept_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.sept_data)
}

// .idlepb.RoleTreasurySaveData treasury_chest_data = 33;
inline bool RoleSaveData::_internal_has_treasury_chest_data() const {
  return this != internal_default_instance() && _impl_.treasury_chest_data_ != nullptr;
}
inline bool RoleSaveData::has_treasury_chest_data() const {
  return _internal_has_treasury_chest_data();
}
inline void RoleSaveData::clear_treasury_chest_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.treasury_chest_data_ != nullptr) {
    delete _impl_.treasury_chest_data_;
  }
  _impl_.treasury_chest_data_ = nullptr;
}
inline const ::idlepb::RoleTreasurySaveData& RoleSaveData::_internal_treasury_chest_data() const {
  const ::idlepb::RoleTreasurySaveData* p = _impl_.treasury_chest_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleTreasurySaveData&>(
      ::idlepb::_RoleTreasurySaveData_default_instance_);
}
inline const ::idlepb::RoleTreasurySaveData& RoleSaveData::treasury_chest_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.treasury_chest_data)
  return _internal_treasury_chest_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_treasury_chest_data(
    ::idlepb::RoleTreasurySaveData* treasury_chest_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.treasury_chest_data_);
  }
  _impl_.treasury_chest_data_ = treasury_chest_data;
  if (treasury_chest_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.treasury_chest_data)
}
inline ::idlepb::RoleTreasurySaveData* RoleSaveData::release_treasury_chest_data() {
  
  ::idlepb::RoleTreasurySaveData* temp = _impl_.treasury_chest_data_;
  _impl_.treasury_chest_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleTreasurySaveData* RoleSaveData::unsafe_arena_release_treasury_chest_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.treasury_chest_data)
  
  ::idlepb::RoleTreasurySaveData* temp = _impl_.treasury_chest_data_;
  _impl_.treasury_chest_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleTreasurySaveData* RoleSaveData::_internal_mutable_treasury_chest_data() {
  
  if (_impl_.treasury_chest_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleTreasurySaveData>(GetArenaForAllocation());
    _impl_.treasury_chest_data_ = p;
  }
  return _impl_.treasury_chest_data_;
}
inline ::idlepb::RoleTreasurySaveData* RoleSaveData::mutable_treasury_chest_data() {
  ::idlepb::RoleTreasurySaveData* _msg = _internal_mutable_treasury_chest_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.treasury_chest_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_treasury_chest_data(::idlepb::RoleTreasurySaveData* treasury_chest_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.treasury_chest_data_;
  }
  if (treasury_chest_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(treasury_chest_data);
    if (message_arena != submessage_arena) {
      treasury_chest_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, treasury_chest_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.treasury_chest_data_ = treasury_chest_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.treasury_chest_data)
}

// .idlepb.RoleGongFaData gongfa_data = 34;
inline bool RoleSaveData::_internal_has_gongfa_data() const {
  return this != internal_default_instance() && _impl_.gongfa_data_ != nullptr;
}
inline bool RoleSaveData::has_gongfa_data() const {
  return _internal_has_gongfa_data();
}
inline void RoleSaveData::clear_gongfa_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.gongfa_data_ != nullptr) {
    delete _impl_.gongfa_data_;
  }
  _impl_.gongfa_data_ = nullptr;
}
inline const ::idlepb::RoleGongFaData& RoleSaveData::_internal_gongfa_data() const {
  const ::idlepb::RoleGongFaData* p = _impl_.gongfa_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleGongFaData&>(
      ::idlepb::_RoleGongFaData_default_instance_);
}
inline const ::idlepb::RoleGongFaData& RoleSaveData::gongfa_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.gongfa_data)
  return _internal_gongfa_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_gongfa_data(
    ::idlepb::RoleGongFaData* gongfa_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gongfa_data_);
  }
  _impl_.gongfa_data_ = gongfa_data;
  if (gongfa_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.gongfa_data)
}
inline ::idlepb::RoleGongFaData* RoleSaveData::release_gongfa_data() {
  
  ::idlepb::RoleGongFaData* temp = _impl_.gongfa_data_;
  _impl_.gongfa_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleGongFaData* RoleSaveData::unsafe_arena_release_gongfa_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.gongfa_data)
  
  ::idlepb::RoleGongFaData* temp = _impl_.gongfa_data_;
  _impl_.gongfa_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleGongFaData* RoleSaveData::_internal_mutable_gongfa_data() {
  
  if (_impl_.gongfa_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleGongFaData>(GetArenaForAllocation());
    _impl_.gongfa_data_ = p;
  }
  return _impl_.gongfa_data_;
}
inline ::idlepb::RoleGongFaData* RoleSaveData::mutable_gongfa_data() {
  ::idlepb::RoleGongFaData* _msg = _internal_mutable_gongfa_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.gongfa_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_gongfa_data(::idlepb::RoleGongFaData* gongfa_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gongfa_data_;
  }
  if (gongfa_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gongfa_data);
    if (message_arena != submessage_arena) {
      gongfa_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gongfa_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gongfa_data_ = gongfa_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.gongfa_data)
}

// .idlepb.RoleFuZengData fuzeng_data = 35;
inline bool RoleSaveData::_internal_has_fuzeng_data() const {
  return this != internal_default_instance() && _impl_.fuzeng_data_ != nullptr;
}
inline bool RoleSaveData::has_fuzeng_data() const {
  return _internal_has_fuzeng_data();
}
inline void RoleSaveData::clear_fuzeng_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.fuzeng_data_ != nullptr) {
    delete _impl_.fuzeng_data_;
  }
  _impl_.fuzeng_data_ = nullptr;
}
inline const ::idlepb::RoleFuZengData& RoleSaveData::_internal_fuzeng_data() const {
  const ::idlepb::RoleFuZengData* p = _impl_.fuzeng_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleFuZengData&>(
      ::idlepb::_RoleFuZengData_default_instance_);
}
inline const ::idlepb::RoleFuZengData& RoleSaveData::fuzeng_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.fuzeng_data)
  return _internal_fuzeng_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_fuzeng_data(
    ::idlepb::RoleFuZengData* fuzeng_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fuzeng_data_);
  }
  _impl_.fuzeng_data_ = fuzeng_data;
  if (fuzeng_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.fuzeng_data)
}
inline ::idlepb::RoleFuZengData* RoleSaveData::release_fuzeng_data() {
  
  ::idlepb::RoleFuZengData* temp = _impl_.fuzeng_data_;
  _impl_.fuzeng_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleFuZengData* RoleSaveData::unsafe_arena_release_fuzeng_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.fuzeng_data)
  
  ::idlepb::RoleFuZengData* temp = _impl_.fuzeng_data_;
  _impl_.fuzeng_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleFuZengData* RoleSaveData::_internal_mutable_fuzeng_data() {
  
  if (_impl_.fuzeng_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleFuZengData>(GetArenaForAllocation());
    _impl_.fuzeng_data_ = p;
  }
  return _impl_.fuzeng_data_;
}
inline ::idlepb::RoleFuZengData* RoleSaveData::mutable_fuzeng_data() {
  ::idlepb::RoleFuZengData* _msg = _internal_mutable_fuzeng_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.fuzeng_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_fuzeng_data(::idlepb::RoleFuZengData* fuzeng_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fuzeng_data_;
  }
  if (fuzeng_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fuzeng_data);
    if (message_arena != submessage_arena) {
      fuzeng_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fuzeng_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fuzeng_data_ = fuzeng_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.fuzeng_data)
}

// .idlepb.RoleCollectionSaveData collection_data = 36;
inline bool RoleSaveData::_internal_has_collection_data() const {
  return this != internal_default_instance() && _impl_.collection_data_ != nullptr;
}
inline bool RoleSaveData::has_collection_data() const {
  return _internal_has_collection_data();
}
inline void RoleSaveData::clear_collection_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.collection_data_ != nullptr) {
    delete _impl_.collection_data_;
  }
  _impl_.collection_data_ = nullptr;
}
inline const ::idlepb::RoleCollectionSaveData& RoleSaveData::_internal_collection_data() const {
  const ::idlepb::RoleCollectionSaveData* p = _impl_.collection_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleCollectionSaveData&>(
      ::idlepb::_RoleCollectionSaveData_default_instance_);
}
inline const ::idlepb::RoleCollectionSaveData& RoleSaveData::collection_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.collection_data)
  return _internal_collection_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_collection_data(
    ::idlepb::RoleCollectionSaveData* collection_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collection_data_);
  }
  _impl_.collection_data_ = collection_data;
  if (collection_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.collection_data)
}
inline ::idlepb::RoleCollectionSaveData* RoleSaveData::release_collection_data() {
  
  ::idlepb::RoleCollectionSaveData* temp = _impl_.collection_data_;
  _impl_.collection_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleCollectionSaveData* RoleSaveData::unsafe_arena_release_collection_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.collection_data)
  
  ::idlepb::RoleCollectionSaveData* temp = _impl_.collection_data_;
  _impl_.collection_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleCollectionSaveData* RoleSaveData::_internal_mutable_collection_data() {
  
  if (_impl_.collection_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleCollectionSaveData>(GetArenaForAllocation());
    _impl_.collection_data_ = p;
  }
  return _impl_.collection_data_;
}
inline ::idlepb::RoleCollectionSaveData* RoleSaveData::mutable_collection_data() {
  ::idlepb::RoleCollectionSaveData* _msg = _internal_mutable_collection_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.collection_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_collection_data(::idlepb::RoleCollectionSaveData* collection_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.collection_data_;
  }
  if (collection_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(collection_data);
    if (message_arena != submessage_arena) {
      collection_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collection_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.collection_data_ = collection_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.collection_data)
}

// .idlepb.RoleLifeCounterData life_counter_data = 37;
inline bool RoleSaveData::_internal_has_life_counter_data() const {
  return this != internal_default_instance() && _impl_.life_counter_data_ != nullptr;
}
inline bool RoleSaveData::has_life_counter_data() const {
  return _internal_has_life_counter_data();
}
inline void RoleSaveData::clear_life_counter_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.life_counter_data_ != nullptr) {
    delete _impl_.life_counter_data_;
  }
  _impl_.life_counter_data_ = nullptr;
}
inline const ::idlepb::RoleLifeCounterData& RoleSaveData::_internal_life_counter_data() const {
  const ::idlepb::RoleLifeCounterData* p = _impl_.life_counter_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleLifeCounterData&>(
      ::idlepb::_RoleLifeCounterData_default_instance_);
}
inline const ::idlepb::RoleLifeCounterData& RoleSaveData::life_counter_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.life_counter_data)
  return _internal_life_counter_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_life_counter_data(
    ::idlepb::RoleLifeCounterData* life_counter_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.life_counter_data_);
  }
  _impl_.life_counter_data_ = life_counter_data;
  if (life_counter_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.life_counter_data)
}
inline ::idlepb::RoleLifeCounterData* RoleSaveData::release_life_counter_data() {
  
  ::idlepb::RoleLifeCounterData* temp = _impl_.life_counter_data_;
  _impl_.life_counter_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleLifeCounterData* RoleSaveData::unsafe_arena_release_life_counter_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.life_counter_data)
  
  ::idlepb::RoleLifeCounterData* temp = _impl_.life_counter_data_;
  _impl_.life_counter_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleLifeCounterData* RoleSaveData::_internal_mutable_life_counter_data() {
  
  if (_impl_.life_counter_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleLifeCounterData>(GetArenaForAllocation());
    _impl_.life_counter_data_ = p;
  }
  return _impl_.life_counter_data_;
}
inline ::idlepb::RoleLifeCounterData* RoleSaveData::mutable_life_counter_data() {
  ::idlepb::RoleLifeCounterData* _msg = _internal_mutable_life_counter_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.life_counter_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_life_counter_data(::idlepb::RoleLifeCounterData* life_counter_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.life_counter_data_;
  }
  if (life_counter_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(life_counter_data);
    if (message_arena != submessage_arena) {
      life_counter_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, life_counter_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.life_counter_data_ = life_counter_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.life_counter_data)
}

// .idlepb.RoleAppearanceData appearance_data = 38;
inline bool RoleSaveData::_internal_has_appearance_data() const {
  return this != internal_default_instance() && _impl_.appearance_data_ != nullptr;
}
inline bool RoleSaveData::has_appearance_data() const {
  return _internal_has_appearance_data();
}
inline void RoleSaveData::clear_appearance_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.appearance_data_ != nullptr) {
    delete _impl_.appearance_data_;
  }
  _impl_.appearance_data_ = nullptr;
}
inline const ::idlepb::RoleAppearanceData& RoleSaveData::_internal_appearance_data() const {
  const ::idlepb::RoleAppearanceData* p = _impl_.appearance_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleAppearanceData&>(
      ::idlepb::_RoleAppearanceData_default_instance_);
}
inline const ::idlepb::RoleAppearanceData& RoleSaveData::appearance_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.appearance_data)
  return _internal_appearance_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_appearance_data(
    ::idlepb::RoleAppearanceData* appearance_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.appearance_data_);
  }
  _impl_.appearance_data_ = appearance_data;
  if (appearance_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.appearance_data)
}
inline ::idlepb::RoleAppearanceData* RoleSaveData::release_appearance_data() {
  
  ::idlepb::RoleAppearanceData* temp = _impl_.appearance_data_;
  _impl_.appearance_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleAppearanceData* RoleSaveData::unsafe_arena_release_appearance_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.appearance_data)
  
  ::idlepb::RoleAppearanceData* temp = _impl_.appearance_data_;
  _impl_.appearance_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleAppearanceData* RoleSaveData::_internal_mutable_appearance_data() {
  
  if (_impl_.appearance_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleAppearanceData>(GetArenaForAllocation());
    _impl_.appearance_data_ = p;
  }
  return _impl_.appearance_data_;
}
inline ::idlepb::RoleAppearanceData* RoleSaveData::mutable_appearance_data() {
  ::idlepb::RoleAppearanceData* _msg = _internal_mutable_appearance_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.appearance_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_appearance_data(::idlepb::RoleAppearanceData* appearance_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.appearance_data_;
  }
  if (appearance_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(appearance_data);
    if (message_arena != submessage_arena) {
      appearance_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appearance_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.appearance_data_ = appearance_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.appearance_data)
}

// .idlepb.RoleArenaCheckListData arena_check_list_data = 39;
inline bool RoleSaveData::_internal_has_arena_check_list_data() const {
  return this != internal_default_instance() && _impl_.arena_check_list_data_ != nullptr;
}
inline bool RoleSaveData::has_arena_check_list_data() const {
  return _internal_has_arena_check_list_data();
}
inline void RoleSaveData::clear_arena_check_list_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.arena_check_list_data_ != nullptr) {
    delete _impl_.arena_check_list_data_;
  }
  _impl_.arena_check_list_data_ = nullptr;
}
inline const ::idlepb::RoleArenaCheckListData& RoleSaveData::_internal_arena_check_list_data() const {
  const ::idlepb::RoleArenaCheckListData* p = _impl_.arena_check_list_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleArenaCheckListData&>(
      ::idlepb::_RoleArenaCheckListData_default_instance_);
}
inline const ::idlepb::RoleArenaCheckListData& RoleSaveData::arena_check_list_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.arena_check_list_data)
  return _internal_arena_check_list_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_arena_check_list_data(
    ::idlepb::RoleArenaCheckListData* arena_check_list_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arena_check_list_data_);
  }
  _impl_.arena_check_list_data_ = arena_check_list_data;
  if (arena_check_list_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.arena_check_list_data)
}
inline ::idlepb::RoleArenaCheckListData* RoleSaveData::release_arena_check_list_data() {
  
  ::idlepb::RoleArenaCheckListData* temp = _impl_.arena_check_list_data_;
  _impl_.arena_check_list_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleArenaCheckListData* RoleSaveData::unsafe_arena_release_arena_check_list_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.arena_check_list_data)
  
  ::idlepb::RoleArenaCheckListData* temp = _impl_.arena_check_list_data_;
  _impl_.arena_check_list_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleArenaCheckListData* RoleSaveData::_internal_mutable_arena_check_list_data() {
  
  if (_impl_.arena_check_list_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleArenaCheckListData>(GetArenaForAllocation());
    _impl_.arena_check_list_data_ = p;
  }
  return _impl_.arena_check_list_data_;
}
inline ::idlepb::RoleArenaCheckListData* RoleSaveData::mutable_arena_check_list_data() {
  ::idlepb::RoleArenaCheckListData* _msg = _internal_mutable_arena_check_list_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.arena_check_list_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_arena_check_list_data(::idlepb::RoleArenaCheckListData* arena_check_list_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.arena_check_list_data_;
  }
  if (arena_check_list_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(arena_check_list_data);
    if (message_arena != submessage_arena) {
      arena_check_list_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arena_check_list_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arena_check_list_data_ = arena_check_list_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.arena_check_list_data)
}

// .idlepb.RoleDungeonKillAllData dungeon_kill_all_data = 40;
inline bool RoleSaveData::_internal_has_dungeon_kill_all_data() const {
  return this != internal_default_instance() && _impl_.dungeon_kill_all_data_ != nullptr;
}
inline bool RoleSaveData::has_dungeon_kill_all_data() const {
  return _internal_has_dungeon_kill_all_data();
}
inline void RoleSaveData::clear_dungeon_kill_all_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.dungeon_kill_all_data_ != nullptr) {
    delete _impl_.dungeon_kill_all_data_;
  }
  _impl_.dungeon_kill_all_data_ = nullptr;
}
inline const ::idlepb::RoleDungeonKillAllData& RoleSaveData::_internal_dungeon_kill_all_data() const {
  const ::idlepb::RoleDungeonKillAllData* p = _impl_.dungeon_kill_all_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleDungeonKillAllData&>(
      ::idlepb::_RoleDungeonKillAllData_default_instance_);
}
inline const ::idlepb::RoleDungeonKillAllData& RoleSaveData::dungeon_kill_all_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.dungeon_kill_all_data)
  return _internal_dungeon_kill_all_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_dungeon_kill_all_data(
    ::idlepb::RoleDungeonKillAllData* dungeon_kill_all_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dungeon_kill_all_data_);
  }
  _impl_.dungeon_kill_all_data_ = dungeon_kill_all_data;
  if (dungeon_kill_all_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.dungeon_kill_all_data)
}
inline ::idlepb::RoleDungeonKillAllData* RoleSaveData::release_dungeon_kill_all_data() {
  
  ::idlepb::RoleDungeonKillAllData* temp = _impl_.dungeon_kill_all_data_;
  _impl_.dungeon_kill_all_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleDungeonKillAllData* RoleSaveData::unsafe_arena_release_dungeon_kill_all_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.dungeon_kill_all_data)
  
  ::idlepb::RoleDungeonKillAllData* temp = _impl_.dungeon_kill_all_data_;
  _impl_.dungeon_kill_all_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleDungeonKillAllData* RoleSaveData::_internal_mutable_dungeon_kill_all_data() {
  
  if (_impl_.dungeon_kill_all_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleDungeonKillAllData>(GetArenaForAllocation());
    _impl_.dungeon_kill_all_data_ = p;
  }
  return _impl_.dungeon_kill_all_data_;
}
inline ::idlepb::RoleDungeonKillAllData* RoleSaveData::mutable_dungeon_kill_all_data() {
  ::idlepb::RoleDungeonKillAllData* _msg = _internal_mutable_dungeon_kill_all_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.dungeon_kill_all_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_dungeon_kill_all_data(::idlepb::RoleDungeonKillAllData* dungeon_kill_all_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dungeon_kill_all_data_;
  }
  if (dungeon_kill_all_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dungeon_kill_all_data);
    if (message_arena != submessage_arena) {
      dungeon_kill_all_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dungeon_kill_all_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dungeon_kill_all_data_ = dungeon_kill_all_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.dungeon_kill_all_data)
}

// .idlepb.RoleFarmlandData farmland_data = 41;
inline bool RoleSaveData::_internal_has_farmland_data() const {
  return this != internal_default_instance() && _impl_.farmland_data_ != nullptr;
}
inline bool RoleSaveData::has_farmland_data() const {
  return _internal_has_farmland_data();
}
inline void RoleSaveData::clear_farmland_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.farmland_data_ != nullptr) {
    delete _impl_.farmland_data_;
  }
  _impl_.farmland_data_ = nullptr;
}
inline const ::idlepb::RoleFarmlandData& RoleSaveData::_internal_farmland_data() const {
  const ::idlepb::RoleFarmlandData* p = _impl_.farmland_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleFarmlandData&>(
      ::idlepb::_RoleFarmlandData_default_instance_);
}
inline const ::idlepb::RoleFarmlandData& RoleSaveData::farmland_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.farmland_data)
  return _internal_farmland_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_farmland_data(
    ::idlepb::RoleFarmlandData* farmland_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.farmland_data_);
  }
  _impl_.farmland_data_ = farmland_data;
  if (farmland_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.farmland_data)
}
inline ::idlepb::RoleFarmlandData* RoleSaveData::release_farmland_data() {
  
  ::idlepb::RoleFarmlandData* temp = _impl_.farmland_data_;
  _impl_.farmland_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleFarmlandData* RoleSaveData::unsafe_arena_release_farmland_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.farmland_data)
  
  ::idlepb::RoleFarmlandData* temp = _impl_.farmland_data_;
  _impl_.farmland_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleFarmlandData* RoleSaveData::_internal_mutable_farmland_data() {
  
  if (_impl_.farmland_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleFarmlandData>(GetArenaForAllocation());
    _impl_.farmland_data_ = p;
  }
  return _impl_.farmland_data_;
}
inline ::idlepb::RoleFarmlandData* RoleSaveData::mutable_farmland_data() {
  ::idlepb::RoleFarmlandData* _msg = _internal_mutable_farmland_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.farmland_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_farmland_data(::idlepb::RoleFarmlandData* farmland_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.farmland_data_;
  }
  if (farmland_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(farmland_data);
    if (message_arena != submessage_arena) {
      farmland_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, farmland_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.farmland_data_ = farmland_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.farmland_data)
}

// .idlepb.RoleDungeonSurviveData dungeon_survive_data = 42;
inline bool RoleSaveData::_internal_has_dungeon_survive_data() const {
  return this != internal_default_instance() && _impl_.dungeon_survive_data_ != nullptr;
}
inline bool RoleSaveData::has_dungeon_survive_data() const {
  return _internal_has_dungeon_survive_data();
}
inline void RoleSaveData::clear_dungeon_survive_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.dungeon_survive_data_ != nullptr) {
    delete _impl_.dungeon_survive_data_;
  }
  _impl_.dungeon_survive_data_ = nullptr;
}
inline const ::idlepb::RoleDungeonSurviveData& RoleSaveData::_internal_dungeon_survive_data() const {
  const ::idlepb::RoleDungeonSurviveData* p = _impl_.dungeon_survive_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleDungeonSurviveData&>(
      ::idlepb::_RoleDungeonSurviveData_default_instance_);
}
inline const ::idlepb::RoleDungeonSurviveData& RoleSaveData::dungeon_survive_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.dungeon_survive_data)
  return _internal_dungeon_survive_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_dungeon_survive_data(
    ::idlepb::RoleDungeonSurviveData* dungeon_survive_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dungeon_survive_data_);
  }
  _impl_.dungeon_survive_data_ = dungeon_survive_data;
  if (dungeon_survive_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.dungeon_survive_data)
}
inline ::idlepb::RoleDungeonSurviveData* RoleSaveData::release_dungeon_survive_data() {
  
  ::idlepb::RoleDungeonSurviveData* temp = _impl_.dungeon_survive_data_;
  _impl_.dungeon_survive_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleDungeonSurviveData* RoleSaveData::unsafe_arena_release_dungeon_survive_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.dungeon_survive_data)
  
  ::idlepb::RoleDungeonSurviveData* temp = _impl_.dungeon_survive_data_;
  _impl_.dungeon_survive_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleDungeonSurviveData* RoleSaveData::_internal_mutable_dungeon_survive_data() {
  
  if (_impl_.dungeon_survive_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleDungeonSurviveData>(GetArenaForAllocation());
    _impl_.dungeon_survive_data_ = p;
  }
  return _impl_.dungeon_survive_data_;
}
inline ::idlepb::RoleDungeonSurviveData* RoleSaveData::mutable_dungeon_survive_data() {
  ::idlepb::RoleDungeonSurviveData* _msg = _internal_mutable_dungeon_survive_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.dungeon_survive_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_dungeon_survive_data(::idlepb::RoleDungeonSurviveData* dungeon_survive_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dungeon_survive_data_;
  }
  if (dungeon_survive_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dungeon_survive_data);
    if (message_arena != submessage_arena) {
      dungeon_survive_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dungeon_survive_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dungeon_survive_data_ = dungeon_survive_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.dungeon_survive_data)
}

// .idlepb.RoleFriendData friend_data = 43;
inline bool RoleSaveData::_internal_has_friend_data() const {
  return this != internal_default_instance() && _impl_.friend_data_ != nullptr;
}
inline bool RoleSaveData::has_friend_data() const {
  return _internal_has_friend_data();
}
inline void RoleSaveData::clear_friend_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.friend_data_ != nullptr) {
    delete _impl_.friend_data_;
  }
  _impl_.friend_data_ = nullptr;
}
inline const ::idlepb::RoleFriendData& RoleSaveData::_internal_friend_data() const {
  const ::idlepb::RoleFriendData* p = _impl_.friend_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleFriendData&>(
      ::idlepb::_RoleFriendData_default_instance_);
}
inline const ::idlepb::RoleFriendData& RoleSaveData::friend_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.friend_data)
  return _internal_friend_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_friend_data(
    ::idlepb::RoleFriendData* friend_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.friend_data_);
  }
  _impl_.friend_data_ = friend_data;
  if (friend_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.friend_data)
}
inline ::idlepb::RoleFriendData* RoleSaveData::release_friend_data() {
  
  ::idlepb::RoleFriendData* temp = _impl_.friend_data_;
  _impl_.friend_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleFriendData* RoleSaveData::unsafe_arena_release_friend_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.friend_data)
  
  ::idlepb::RoleFriendData* temp = _impl_.friend_data_;
  _impl_.friend_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleFriendData* RoleSaveData::_internal_mutable_friend_data() {
  
  if (_impl_.friend_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleFriendData>(GetArenaForAllocation());
    _impl_.friend_data_ = p;
  }
  return _impl_.friend_data_;
}
inline ::idlepb::RoleFriendData* RoleSaveData::mutable_friend_data() {
  ::idlepb::RoleFriendData* _msg = _internal_mutable_friend_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.friend_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_friend_data(::idlepb::RoleFriendData* friend_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.friend_data_;
  }
  if (friend_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friend_data);
    if (message_arena != submessage_arena) {
      friend_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.friend_data_ = friend_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.friend_data)
}

// .idlepb.RoleAvatarData avatar_data = 44;
inline bool RoleSaveData::_internal_has_avatar_data() const {
  return this != internal_default_instance() && _impl_.avatar_data_ != nullptr;
}
inline bool RoleSaveData::has_avatar_data() const {
  return _internal_has_avatar_data();
}
inline void RoleSaveData::clear_avatar_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.avatar_data_ != nullptr) {
    delete _impl_.avatar_data_;
  }
  _impl_.avatar_data_ = nullptr;
}
inline const ::idlepb::RoleAvatarData& RoleSaveData::_internal_avatar_data() const {
  const ::idlepb::RoleAvatarData* p = _impl_.avatar_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleAvatarData&>(
      ::idlepb::_RoleAvatarData_default_instance_);
}
inline const ::idlepb::RoleAvatarData& RoleSaveData::avatar_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.avatar_data)
  return _internal_avatar_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_avatar_data(
    ::idlepb::RoleAvatarData* avatar_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.avatar_data_);
  }
  _impl_.avatar_data_ = avatar_data;
  if (avatar_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.avatar_data)
}
inline ::idlepb::RoleAvatarData* RoleSaveData::release_avatar_data() {
  
  ::idlepb::RoleAvatarData* temp = _impl_.avatar_data_;
  _impl_.avatar_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleAvatarData* RoleSaveData::unsafe_arena_release_avatar_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.avatar_data)
  
  ::idlepb::RoleAvatarData* temp = _impl_.avatar_data_;
  _impl_.avatar_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleAvatarData* RoleSaveData::_internal_mutable_avatar_data() {
  
  if (_impl_.avatar_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleAvatarData>(GetArenaForAllocation());
    _impl_.avatar_data_ = p;
  }
  return _impl_.avatar_data_;
}
inline ::idlepb::RoleAvatarData* RoleSaveData::mutable_avatar_data() {
  ::idlepb::RoleAvatarData* _msg = _internal_mutable_avatar_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.avatar_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_avatar_data(::idlepb::RoleAvatarData* avatar_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.avatar_data_;
  }
  if (avatar_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(avatar_data);
    if (message_arena != submessage_arena) {
      avatar_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.avatar_data_ = avatar_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.avatar_data)
}

// .idlepb.RoleArenaExplorationStatisticalData arena_statistical_data = 45;
inline bool RoleSaveData::_internal_has_arena_statistical_data() const {
  return this != internal_default_instance() && _impl_.arena_statistical_data_ != nullptr;
}
inline bool RoleSaveData::has_arena_statistical_data() const {
  return _internal_has_arena_statistical_data();
}
inline void RoleSaveData::clear_arena_statistical_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.arena_statistical_data_ != nullptr) {
    delete _impl_.arena_statistical_data_;
  }
  _impl_.arena_statistical_data_ = nullptr;
}
inline const ::idlepb::RoleArenaExplorationStatisticalData& RoleSaveData::_internal_arena_statistical_data() const {
  const ::idlepb::RoleArenaExplorationStatisticalData* p = _impl_.arena_statistical_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleArenaExplorationStatisticalData&>(
      ::idlepb::_RoleArenaExplorationStatisticalData_default_instance_);
}
inline const ::idlepb::RoleArenaExplorationStatisticalData& RoleSaveData::arena_statistical_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.arena_statistical_data)
  return _internal_arena_statistical_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_arena_statistical_data(
    ::idlepb::RoleArenaExplorationStatisticalData* arena_statistical_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arena_statistical_data_);
  }
  _impl_.arena_statistical_data_ = arena_statistical_data;
  if (arena_statistical_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.arena_statistical_data)
}
inline ::idlepb::RoleArenaExplorationStatisticalData* RoleSaveData::release_arena_statistical_data() {
  
  ::idlepb::RoleArenaExplorationStatisticalData* temp = _impl_.arena_statistical_data_;
  _impl_.arena_statistical_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleArenaExplorationStatisticalData* RoleSaveData::unsafe_arena_release_arena_statistical_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.arena_statistical_data)
  
  ::idlepb::RoleArenaExplorationStatisticalData* temp = _impl_.arena_statistical_data_;
  _impl_.arena_statistical_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleArenaExplorationStatisticalData* RoleSaveData::_internal_mutable_arena_statistical_data() {
  
  if (_impl_.arena_statistical_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleArenaExplorationStatisticalData>(GetArenaForAllocation());
    _impl_.arena_statistical_data_ = p;
  }
  return _impl_.arena_statistical_data_;
}
inline ::idlepb::RoleArenaExplorationStatisticalData* RoleSaveData::mutable_arena_statistical_data() {
  ::idlepb::RoleArenaExplorationStatisticalData* _msg = _internal_mutable_arena_statistical_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.arena_statistical_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_arena_statistical_data(::idlepb::RoleArenaExplorationStatisticalData* arena_statistical_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.arena_statistical_data_;
  }
  if (arena_statistical_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(arena_statistical_data);
    if (message_arena != submessage_arena) {
      arena_statistical_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arena_statistical_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arena_statistical_data_ = arena_statistical_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.arena_statistical_data)
}

// .idlepb.RoleBiographyData biography_data = 46;
inline bool RoleSaveData::_internal_has_biography_data() const {
  return this != internal_default_instance() && _impl_.biography_data_ != nullptr;
}
inline bool RoleSaveData::has_biography_data() const {
  return _internal_has_biography_data();
}
inline void RoleSaveData::clear_biography_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.biography_data_ != nullptr) {
    delete _impl_.biography_data_;
  }
  _impl_.biography_data_ = nullptr;
}
inline const ::idlepb::RoleBiographyData& RoleSaveData::_internal_biography_data() const {
  const ::idlepb::RoleBiographyData* p = _impl_.biography_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleBiographyData&>(
      ::idlepb::_RoleBiographyData_default_instance_);
}
inline const ::idlepb::RoleBiographyData& RoleSaveData::biography_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.biography_data)
  return _internal_biography_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_biography_data(
    ::idlepb::RoleBiographyData* biography_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.biography_data_);
  }
  _impl_.biography_data_ = biography_data;
  if (biography_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.biography_data)
}
inline ::idlepb::RoleBiographyData* RoleSaveData::release_biography_data() {
  
  ::idlepb::RoleBiographyData* temp = _impl_.biography_data_;
  _impl_.biography_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleBiographyData* RoleSaveData::unsafe_arena_release_biography_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.biography_data)
  
  ::idlepb::RoleBiographyData* temp = _impl_.biography_data_;
  _impl_.biography_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleBiographyData* RoleSaveData::_internal_mutable_biography_data() {
  
  if (_impl_.biography_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleBiographyData>(GetArenaForAllocation());
    _impl_.biography_data_ = p;
  }
  return _impl_.biography_data_;
}
inline ::idlepb::RoleBiographyData* RoleSaveData::mutable_biography_data() {
  ::idlepb::RoleBiographyData* _msg = _internal_mutable_biography_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.biography_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_biography_data(::idlepb::RoleBiographyData* biography_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.biography_data_;
  }
  if (biography_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(biography_data);
    if (message_arena != submessage_arena) {
      biography_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, biography_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.biography_data_ = biography_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.biography_data)
}

// .idlepb.RoleVipShopData vip_shop_data = 47;
inline bool RoleSaveData::_internal_has_vip_shop_data() const {
  return this != internal_default_instance() && _impl_.vip_shop_data_ != nullptr;
}
inline bool RoleSaveData::has_vip_shop_data() const {
  return _internal_has_vip_shop_data();
}
inline void RoleSaveData::clear_vip_shop_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.vip_shop_data_ != nullptr) {
    delete _impl_.vip_shop_data_;
  }
  _impl_.vip_shop_data_ = nullptr;
}
inline const ::idlepb::RoleVipShopData& RoleSaveData::_internal_vip_shop_data() const {
  const ::idlepb::RoleVipShopData* p = _impl_.vip_shop_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleVipShopData&>(
      ::idlepb::_RoleVipShopData_default_instance_);
}
inline const ::idlepb::RoleVipShopData& RoleSaveData::vip_shop_data() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleSaveData.vip_shop_data)
  return _internal_vip_shop_data();
}
inline void RoleSaveData::unsafe_arena_set_allocated_vip_shop_data(
    ::idlepb::RoleVipShopData* vip_shop_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vip_shop_data_);
  }
  _impl_.vip_shop_data_ = vip_shop_data;
  if (vip_shop_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleSaveData.vip_shop_data)
}
inline ::idlepb::RoleVipShopData* RoleSaveData::release_vip_shop_data() {
  
  ::idlepb::RoleVipShopData* temp = _impl_.vip_shop_data_;
  _impl_.vip_shop_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleVipShopData* RoleSaveData::unsafe_arena_release_vip_shop_data() {
  // @@protoc_insertion_point(field_release:idlepb.RoleSaveData.vip_shop_data)
  
  ::idlepb::RoleVipShopData* temp = _impl_.vip_shop_data_;
  _impl_.vip_shop_data_ = nullptr;
  return temp;
}
inline ::idlepb::RoleVipShopData* RoleSaveData::_internal_mutable_vip_shop_data() {
  
  if (_impl_.vip_shop_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleVipShopData>(GetArenaForAllocation());
    _impl_.vip_shop_data_ = p;
  }
  return _impl_.vip_shop_data_;
}
inline ::idlepb::RoleVipShopData* RoleSaveData::mutable_vip_shop_data() {
  ::idlepb::RoleVipShopData* _msg = _internal_mutable_vip_shop_data();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleSaveData.vip_shop_data)
  return _msg;
}
inline void RoleSaveData::set_allocated_vip_shop_data(::idlepb::RoleVipShopData* vip_shop_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vip_shop_data_;
  }
  if (vip_shop_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vip_shop_data);
    if (message_arena != submessage_arena) {
      vip_shop_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vip_shop_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vip_shop_data_ = vip_shop_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleSaveData.vip_shop_data)
}

// -------------------------------------------------------------------

// BattleHistoryRecord

// int32 index = 1;
inline void BattleHistoryRecord::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t BattleHistoryRecord::_internal_index() const {
  return _impl_.index_;
}
inline int32_t BattleHistoryRecord::index() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleHistoryRecord.index)
  return _internal_index();
}
inline void BattleHistoryRecord::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void BattleHistoryRecord::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleHistoryRecord.index)
}

// float world_seconds = 2;
inline void BattleHistoryRecord::clear_world_seconds() {
  _impl_.world_seconds_ = 0;
}
inline float BattleHistoryRecord::_internal_world_seconds() const {
  return _impl_.world_seconds_;
}
inline float BattleHistoryRecord::world_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleHistoryRecord.world_seconds)
  return _internal_world_seconds();
}
inline void BattleHistoryRecord::_internal_set_world_seconds(float value) {
  
  _impl_.world_seconds_ = value;
}
inline void BattleHistoryRecord::set_world_seconds(float value) {
  _internal_set_world_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleHistoryRecord.world_seconds)
}

// uint64 source_entity_id = 3;
inline void BattleHistoryRecord::clear_source_entity_id() {
  _impl_.source_entity_id_ = uint64_t{0u};
}
inline uint64_t BattleHistoryRecord::_internal_source_entity_id() const {
  return _impl_.source_entity_id_;
}
inline uint64_t BattleHistoryRecord::source_entity_id() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleHistoryRecord.source_entity_id)
  return _internal_source_entity_id();
}
inline void BattleHistoryRecord::_internal_set_source_entity_id(uint64_t value) {
  
  _impl_.source_entity_id_ = value;
}
inline void BattleHistoryRecord::set_source_entity_id(uint64_t value) {
  _internal_set_source_entity_id(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleHistoryRecord.source_entity_id)
}

// uint64 target_entity_id = 4;
inline void BattleHistoryRecord::clear_target_entity_id() {
  _impl_.target_entity_id_ = uint64_t{0u};
}
inline uint64_t BattleHistoryRecord::_internal_target_entity_id() const {
  return _impl_.target_entity_id_;
}
inline uint64_t BattleHistoryRecord::target_entity_id() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleHistoryRecord.target_entity_id)
  return _internal_target_entity_id();
}
inline void BattleHistoryRecord::_internal_set_target_entity_id(uint64_t value) {
  
  _impl_.target_entity_id_ = value;
}
inline void BattleHistoryRecord::set_target_entity_id(uint64_t value) {
  _internal_set_target_entity_id(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleHistoryRecord.target_entity_id)
}

// uint64 message_type_id = 5;
inline void BattleHistoryRecord::clear_message_type_id() {
  _impl_.message_type_id_ = uint64_t{0u};
}
inline uint64_t BattleHistoryRecord::_internal_message_type_id() const {
  return _impl_.message_type_id_;
}
inline uint64_t BattleHistoryRecord::message_type_id() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleHistoryRecord.message_type_id)
  return _internal_message_type_id();
}
inline void BattleHistoryRecord::_internal_set_message_type_id(uint64_t value) {
  
  _impl_.message_type_id_ = value;
}
inline void BattleHistoryRecord::set_message_type_id(uint64_t value) {
  _internal_set_message_type_id(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleHistoryRecord.message_type_id)
}

// bytes message_body = 6;
inline void BattleHistoryRecord::clear_message_body() {
  _impl_.message_body_.ClearToEmpty();
}
inline const std::string& BattleHistoryRecord::message_body() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleHistoryRecord.message_body)
  return _internal_message_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BattleHistoryRecord::set_message_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.BattleHistoryRecord.message_body)
}
inline std::string* BattleHistoryRecord::mutable_message_body() {
  std::string* _s = _internal_mutable_message_body();
  // @@protoc_insertion_point(field_mutable:idlepb.BattleHistoryRecord.message_body)
  return _s;
}
inline const std::string& BattleHistoryRecord::_internal_message_body() const {
  return _impl_.message_body_.Get();
}
inline void BattleHistoryRecord::_internal_set_message_body(const std::string& value) {
  
  _impl_.message_body_.Set(value, GetArenaForAllocation());
}
inline std::string* BattleHistoryRecord::_internal_mutable_message_body() {
  
  return _impl_.message_body_.Mutable(GetArenaForAllocation());
}
inline std::string* BattleHistoryRecord::release_message_body() {
  // @@protoc_insertion_point(field_release:idlepb.BattleHistoryRecord.message_body)
  return _impl_.message_body_.Release();
}
inline void BattleHistoryRecord::set_allocated_message_body(std::string* message_body) {
  if (message_body != nullptr) {
    
  } else {
    
  }
  _impl_.message_body_.SetAllocated(message_body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_body_.IsDefault()) {
    _impl_.message_body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.BattleHistoryRecord.message_body)
}

// -------------------------------------------------------------------

// BattleRoleInfo

// int64 role_id = 1;
inline void BattleRoleInfo::clear_role_id() {
  _impl_.role_id_ = int64_t{0};
}
inline int64_t BattleRoleInfo::_internal_role_id() const {
  return _impl_.role_id_;
}
inline int64_t BattleRoleInfo::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.role_id)
  return _internal_role_id();
}
inline void BattleRoleInfo::_internal_set_role_id(int64_t value) {
  
  _impl_.role_id_ = value;
}
inline void BattleRoleInfo::set_role_id(int64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleRoleInfo.role_id)
}

// string role_name = 2;
inline void BattleRoleInfo::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& BattleRoleInfo::role_name() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BattleRoleInfo::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.BattleRoleInfo.role_name)
}
inline std::string* BattleRoleInfo::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:idlepb.BattleRoleInfo.role_name)
  return _s;
}
inline const std::string& BattleRoleInfo::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void BattleRoleInfo::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BattleRoleInfo::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BattleRoleInfo::release_role_name() {
  // @@protoc_insertion_point(field_release:idlepb.BattleRoleInfo.role_name)
  return _impl_.role_name_.Release();
}
inline void BattleRoleInfo::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.BattleRoleInfo.role_name)
}

// int32 zone_id = 3;
inline void BattleRoleInfo::clear_zone_id() {
  _impl_.zone_id_ = 0;
}
inline int32_t BattleRoleInfo::_internal_zone_id() const {
  return _impl_.zone_id_;
}
inline int32_t BattleRoleInfo::zone_id() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.zone_id)
  return _internal_zone_id();
}
inline void BattleRoleInfo::_internal_set_zone_id(int32_t value) {
  
  _impl_.zone_id_ = value;
}
inline void BattleRoleInfo::set_zone_id(int32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleRoleInfo.zone_id)
}

// int32 score_delta = 8;
inline void BattleRoleInfo::clear_score_delta() {
  _impl_.score_delta_ = 0;
}
inline int32_t BattleRoleInfo::_internal_score_delta() const {
  return _impl_.score_delta_;
}
inline int32_t BattleRoleInfo::score_delta() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.score_delta)
  return _internal_score_delta();
}
inline void BattleRoleInfo::_internal_set_score_delta(int32_t value) {
  
  _impl_.score_delta_ = value;
}
inline void BattleRoleInfo::set_score_delta(int32_t value) {
  _internal_set_score_delta(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleRoleInfo.score_delta)
}

// int32 score = 9;
inline void BattleRoleInfo::clear_score() {
  _impl_.score_ = 0;
}
inline int32_t BattleRoleInfo::_internal_score() const {
  return _impl_.score_;
}
inline int32_t BattleRoleInfo::score() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.score)
  return _internal_score();
}
inline void BattleRoleInfo::_internal_set_score(int32_t value) {
  
  _impl_.score_ = value;
}
inline void BattleRoleInfo::set_score(int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleRoleInfo.score)
}

// int32 rank_delta = 10;
inline void BattleRoleInfo::clear_rank_delta() {
  _impl_.rank_delta_ = 0;
}
inline int32_t BattleRoleInfo::_internal_rank_delta() const {
  return _impl_.rank_delta_;
}
inline int32_t BattleRoleInfo::rank_delta() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.rank_delta)
  return _internal_rank_delta();
}
inline void BattleRoleInfo::_internal_set_rank_delta(int32_t value) {
  
  _impl_.rank_delta_ = value;
}
inline void BattleRoleInfo::set_rank_delta(int32_t value) {
  _internal_set_rank_delta(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleRoleInfo.rank_delta)
}

// int32 rank = 11;
inline void BattleRoleInfo::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t BattleRoleInfo::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t BattleRoleInfo::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.rank)
  return _internal_rank();
}
inline void BattleRoleInfo::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void BattleRoleInfo::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleRoleInfo.rank)
}

// int64 combat_power = 12;
inline void BattleRoleInfo::clear_combat_power() {
  _impl_.combat_power_ = int64_t{0};
}
inline int64_t BattleRoleInfo::_internal_combat_power() const {
  return _impl_.combat_power_;
}
inline int64_t BattleRoleInfo::combat_power() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.combat_power)
  return _internal_combat_power();
}
inline void BattleRoleInfo::_internal_set_combat_power(int64_t value) {
  
  _impl_.combat_power_ = value;
}
inline void BattleRoleInfo::set_combat_power(int64_t value) {
  _internal_set_combat_power(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleRoleInfo.combat_power)
}

// .idlepb.CharacterModelConfig model_config = 13;
inline bool BattleRoleInfo::_internal_has_model_config() const {
  return this != internal_default_instance() && _impl_.model_config_ != nullptr;
}
inline bool BattleRoleInfo::has_model_config() const {
  return _internal_has_model_config();
}
inline void BattleRoleInfo::clear_model_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_config_ != nullptr) {
    delete _impl_.model_config_;
  }
  _impl_.model_config_ = nullptr;
}
inline const ::idlepb::CharacterModelConfig& BattleRoleInfo::_internal_model_config() const {
  const ::idlepb::CharacterModelConfig* p = _impl_.model_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CharacterModelConfig&>(
      ::idlepb::_CharacterModelConfig_default_instance_);
}
inline const ::idlepb::CharacterModelConfig& BattleRoleInfo::model_config() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.model_config)
  return _internal_model_config();
}
inline void BattleRoleInfo::unsafe_arena_set_allocated_model_config(
    ::idlepb::CharacterModelConfig* model_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_config_);
  }
  _impl_.model_config_ = model_config;
  if (model_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.BattleRoleInfo.model_config)
}
inline ::idlepb::CharacterModelConfig* BattleRoleInfo::release_model_config() {
  
  ::idlepb::CharacterModelConfig* temp = _impl_.model_config_;
  _impl_.model_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CharacterModelConfig* BattleRoleInfo::unsafe_arena_release_model_config() {
  // @@protoc_insertion_point(field_release:idlepb.BattleRoleInfo.model_config)
  
  ::idlepb::CharacterModelConfig* temp = _impl_.model_config_;
  _impl_.model_config_ = nullptr;
  return temp;
}
inline ::idlepb::CharacterModelConfig* BattleRoleInfo::_internal_mutable_model_config() {
  
  if (_impl_.model_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CharacterModelConfig>(GetArenaForAllocation());
    _impl_.model_config_ = p;
  }
  return _impl_.model_config_;
}
inline ::idlepb::CharacterModelConfig* BattleRoleInfo::mutable_model_config() {
  ::idlepb::CharacterModelConfig* _msg = _internal_mutable_model_config();
  // @@protoc_insertion_point(field_mutable:idlepb.BattleRoleInfo.model_config)
  return _msg;
}
inline void BattleRoleInfo::set_allocated_model_config(::idlepb::CharacterModelConfig* model_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.model_config_;
  }
  if (model_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(model_config);
    if (message_arena != submessage_arena) {
      model_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.model_config_ = model_config;
  // @@protoc_insertion_point(field_set_allocated:idlepb.BattleRoleInfo.model_config)
}

// .idlepb.CultivationDirection cultivation_main_dir = 14;
inline void BattleRoleInfo::clear_cultivation_main_dir() {
  _impl_.cultivation_main_dir_ = 0;
}
inline ::idlepb::CultivationDirection BattleRoleInfo::_internal_cultivation_main_dir() const {
  return static_cast< ::idlepb::CultivationDirection >(_impl_.cultivation_main_dir_);
}
inline ::idlepb::CultivationDirection BattleRoleInfo::cultivation_main_dir() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.cultivation_main_dir)
  return _internal_cultivation_main_dir();
}
inline void BattleRoleInfo::_internal_set_cultivation_main_dir(::idlepb::CultivationDirection value) {
  
  _impl_.cultivation_main_dir_ = value;
}
inline void BattleRoleInfo::set_cultivation_main_dir(::idlepb::CultivationDirection value) {
  _internal_set_cultivation_main_dir(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleRoleInfo.cultivation_main_dir)
}

// int32 cultivation_main_rank = 15;
inline void BattleRoleInfo::clear_cultivation_main_rank() {
  _impl_.cultivation_main_rank_ = 0;
}
inline int32_t BattleRoleInfo::_internal_cultivation_main_rank() const {
  return _impl_.cultivation_main_rank_;
}
inline int32_t BattleRoleInfo::cultivation_main_rank() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.cultivation_main_rank)
  return _internal_cultivation_main_rank();
}
inline void BattleRoleInfo::_internal_set_cultivation_main_rank(int32_t value) {
  
  _impl_.cultivation_main_rank_ = value;
}
inline void BattleRoleInfo::set_cultivation_main_rank(int32_t value) {
  _internal_set_cultivation_main_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleRoleInfo.cultivation_main_rank)
}

// int32 npc_cfg_id = 16;
inline void BattleRoleInfo::clear_npc_cfg_id() {
  _impl_.npc_cfg_id_ = 0;
}
inline int32_t BattleRoleInfo::_internal_npc_cfg_id() const {
  return _impl_.npc_cfg_id_;
}
inline int32_t BattleRoleInfo::npc_cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleRoleInfo.npc_cfg_id)
  return _internal_npc_cfg_id();
}
inline void BattleRoleInfo::_internal_set_npc_cfg_id(int32_t value) {
  
  _impl_.npc_cfg_id_ = value;
}
inline void BattleRoleInfo::set_npc_cfg_id(int32_t value) {
  _internal_set_npc_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleRoleInfo.npc_cfg_id)
}

// -------------------------------------------------------------------

// BattleInfo

// int64 world_id = 1;
inline void BattleInfo::clear_world_id() {
  _impl_.world_id_ = int64_t{0};
}
inline int64_t BattleInfo::_internal_world_id() const {
  return _impl_.world_id_;
}
inline int64_t BattleInfo::world_id() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleInfo.world_id)
  return _internal_world_id();
}
inline void BattleInfo::_internal_set_world_id(int64_t value) {
  
  _impl_.world_id_ = value;
}
inline void BattleInfo::set_world_id(int64_t value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleInfo.world_id)
}

// bool attacker_win = 2;
inline void BattleInfo::clear_attacker_win() {
  _impl_.attacker_win_ = false;
}
inline bool BattleInfo::_internal_attacker_win() const {
  return _impl_.attacker_win_;
}
inline bool BattleInfo::attacker_win() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleInfo.attacker_win)
  return _internal_attacker_win();
}
inline void BattleInfo::_internal_set_attacker_win(bool value) {
  
  _impl_.attacker_win_ = value;
}
inline void BattleInfo::set_attacker_win(bool value) {
  _internal_set_attacker_win(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleInfo.attacker_win)
}

// .idlepb.BattleRoleInfo attacker = 10;
inline bool BattleInfo::_internal_has_attacker() const {
  return this != internal_default_instance() && _impl_.attacker_ != nullptr;
}
inline bool BattleInfo::has_attacker() const {
  return _internal_has_attacker();
}
inline void BattleInfo::clear_attacker() {
  if (GetArenaForAllocation() == nullptr && _impl_.attacker_ != nullptr) {
    delete _impl_.attacker_;
  }
  _impl_.attacker_ = nullptr;
}
inline const ::idlepb::BattleRoleInfo& BattleInfo::_internal_attacker() const {
  const ::idlepb::BattleRoleInfo* p = _impl_.attacker_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::BattleRoleInfo&>(
      ::idlepb::_BattleRoleInfo_default_instance_);
}
inline const ::idlepb::BattleRoleInfo& BattleInfo::attacker() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleInfo.attacker)
  return _internal_attacker();
}
inline void BattleInfo::unsafe_arena_set_allocated_attacker(
    ::idlepb::BattleRoleInfo* attacker) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attacker_);
  }
  _impl_.attacker_ = attacker;
  if (attacker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.BattleInfo.attacker)
}
inline ::idlepb::BattleRoleInfo* BattleInfo::release_attacker() {
  
  ::idlepb::BattleRoleInfo* temp = _impl_.attacker_;
  _impl_.attacker_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::BattleRoleInfo* BattleInfo::unsafe_arena_release_attacker() {
  // @@protoc_insertion_point(field_release:idlepb.BattleInfo.attacker)
  
  ::idlepb::BattleRoleInfo* temp = _impl_.attacker_;
  _impl_.attacker_ = nullptr;
  return temp;
}
inline ::idlepb::BattleRoleInfo* BattleInfo::_internal_mutable_attacker() {
  
  if (_impl_.attacker_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::BattleRoleInfo>(GetArenaForAllocation());
    _impl_.attacker_ = p;
  }
  return _impl_.attacker_;
}
inline ::idlepb::BattleRoleInfo* BattleInfo::mutable_attacker() {
  ::idlepb::BattleRoleInfo* _msg = _internal_mutable_attacker();
  // @@protoc_insertion_point(field_mutable:idlepb.BattleInfo.attacker)
  return _msg;
}
inline void BattleInfo::set_allocated_attacker(::idlepb::BattleRoleInfo* attacker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attacker_;
  }
  if (attacker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attacker);
    if (message_arena != submessage_arena) {
      attacker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attacker_ = attacker;
  // @@protoc_insertion_point(field_set_allocated:idlepb.BattleInfo.attacker)
}

// .idlepb.BattleRoleInfo defender = 11;
inline bool BattleInfo::_internal_has_defender() const {
  return this != internal_default_instance() && _impl_.defender_ != nullptr;
}
inline bool BattleInfo::has_defender() const {
  return _internal_has_defender();
}
inline void BattleInfo::clear_defender() {
  if (GetArenaForAllocation() == nullptr && _impl_.defender_ != nullptr) {
    delete _impl_.defender_;
  }
  _impl_.defender_ = nullptr;
}
inline const ::idlepb::BattleRoleInfo& BattleInfo::_internal_defender() const {
  const ::idlepb::BattleRoleInfo* p = _impl_.defender_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::BattleRoleInfo&>(
      ::idlepb::_BattleRoleInfo_default_instance_);
}
inline const ::idlepb::BattleRoleInfo& BattleInfo::defender() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleInfo.defender)
  return _internal_defender();
}
inline void BattleInfo::unsafe_arena_set_allocated_defender(
    ::idlepb::BattleRoleInfo* defender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.defender_);
  }
  _impl_.defender_ = defender;
  if (defender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.BattleInfo.defender)
}
inline ::idlepb::BattleRoleInfo* BattleInfo::release_defender() {
  
  ::idlepb::BattleRoleInfo* temp = _impl_.defender_;
  _impl_.defender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::BattleRoleInfo* BattleInfo::unsafe_arena_release_defender() {
  // @@protoc_insertion_point(field_release:idlepb.BattleInfo.defender)
  
  ::idlepb::BattleRoleInfo* temp = _impl_.defender_;
  _impl_.defender_ = nullptr;
  return temp;
}
inline ::idlepb::BattleRoleInfo* BattleInfo::_internal_mutable_defender() {
  
  if (_impl_.defender_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::BattleRoleInfo>(GetArenaForAllocation());
    _impl_.defender_ = p;
  }
  return _impl_.defender_;
}
inline ::idlepb::BattleRoleInfo* BattleInfo::mutable_defender() {
  ::idlepb::BattleRoleInfo* _msg = _internal_mutable_defender();
  // @@protoc_insertion_point(field_mutable:idlepb.BattleInfo.defender)
  return _msg;
}
inline void BattleInfo::set_allocated_defender(::idlepb::BattleRoleInfo* defender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.defender_;
  }
  if (defender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(defender);
    if (message_arena != submessage_arena) {
      defender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.defender_ = defender;
  // @@protoc_insertion_point(field_set_allocated:idlepb.BattleInfo.defender)
}

// int64 begin_ticks = 12;
inline void BattleInfo::clear_begin_ticks() {
  _impl_.begin_ticks_ = int64_t{0};
}
inline int64_t BattleInfo::_internal_begin_ticks() const {
  return _impl_.begin_ticks_;
}
inline int64_t BattleInfo::begin_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleInfo.begin_ticks)
  return _internal_begin_ticks();
}
inline void BattleInfo::_internal_set_begin_ticks(int64_t value) {
  
  _impl_.begin_ticks_ = value;
}
inline void BattleInfo::set_begin_ticks(int64_t value) {
  _internal_set_begin_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleInfo.begin_ticks)
}

// int64 end_ticks = 13;
inline void BattleInfo::clear_end_ticks() {
  _impl_.end_ticks_ = int64_t{0};
}
inline int64_t BattleInfo::_internal_end_ticks() const {
  return _impl_.end_ticks_;
}
inline int64_t BattleInfo::end_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleInfo.end_ticks)
  return _internal_end_ticks();
}
inline void BattleInfo::_internal_set_end_ticks(int64_t value) {
  
  _impl_.end_ticks_ = value;
}
inline void BattleInfo::set_end_ticks(int64_t value) {
  _internal_set_end_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleInfo.end_ticks)
}

// .idlepb.SoloType solo_type = 14;
inline void BattleInfo::clear_solo_type() {
  _impl_.solo_type_ = 0;
}
inline ::idlepb::SoloType BattleInfo::_internal_solo_type() const {
  return static_cast< ::idlepb::SoloType >(_impl_.solo_type_);
}
inline ::idlepb::SoloType BattleInfo::solo_type() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleInfo.solo_type)
  return _internal_solo_type();
}
inline void BattleInfo::_internal_set_solo_type(::idlepb::SoloType value) {
  
  _impl_.solo_type_ = value;
}
inline void BattleInfo::set_solo_type(::idlepb::SoloType value) {
  _internal_set_solo_type(value);
  // @@protoc_insertion_point(field_set:idlepb.BattleInfo.solo_type)
}

// -------------------------------------------------------------------

// BattleHistory

// .idlepb.BattleInfo info = 1;
inline bool BattleHistory::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool BattleHistory::has_info() const {
  return _internal_has_info();
}
inline void BattleHistory::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::idlepb::BattleInfo& BattleHistory::_internal_info() const {
  const ::idlepb::BattleInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::BattleInfo&>(
      ::idlepb::_BattleInfo_default_instance_);
}
inline const ::idlepb::BattleInfo& BattleHistory::info() const {
  // @@protoc_insertion_point(field_get:idlepb.BattleHistory.info)
  return _internal_info();
}
inline void BattleHistory::unsafe_arena_set_allocated_info(
    ::idlepb::BattleInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.BattleHistory.info)
}
inline ::idlepb::BattleInfo* BattleHistory::release_info() {
  
  ::idlepb::BattleInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::BattleInfo* BattleHistory::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:idlepb.BattleHistory.info)
  
  ::idlepb::BattleInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::idlepb::BattleInfo* BattleHistory::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::BattleInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::idlepb::BattleInfo* BattleHistory::mutable_info() {
  ::idlepb::BattleInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:idlepb.BattleHistory.info)
  return _msg;
}
inline void BattleHistory::set_allocated_info(::idlepb::BattleInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:idlepb.BattleHistory.info)
}

// repeated .idlepb.BattleHistoryRecord records = 4;
inline int BattleHistory::_internal_records_size() const {
  return _impl_.records_.size();
}
inline int BattleHistory::records_size() const {
  return _internal_records_size();
}
inline void BattleHistory::clear_records() {
  _impl_.records_.Clear();
}
inline ::idlepb::BattleHistoryRecord* BattleHistory::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.BattleHistory.records)
  return _impl_.records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BattleHistoryRecord >*
BattleHistory::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.BattleHistory.records)
  return &_impl_.records_;
}
inline const ::idlepb::BattleHistoryRecord& BattleHistory::_internal_records(int index) const {
  return _impl_.records_.Get(index);
}
inline const ::idlepb::BattleHistoryRecord& BattleHistory::records(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.BattleHistory.records)
  return _internal_records(index);
}
inline ::idlepb::BattleHistoryRecord* BattleHistory::_internal_add_records() {
  return _impl_.records_.Add();
}
inline ::idlepb::BattleHistoryRecord* BattleHistory::add_records() {
  ::idlepb::BattleHistoryRecord* _add = _internal_add_records();
  // @@protoc_insertion_point(field_add:idlepb.BattleHistory.records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BattleHistoryRecord >&
BattleHistory::records() const {
  // @@protoc_insertion_point(field_list:idlepb.BattleHistory.records)
  return _impl_.records_;
}

// -------------------------------------------------------------------

// RoleBattleInfo

// .idlepb.BattleInfo base = 1;
inline bool RoleBattleInfo::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool RoleBattleInfo::has_base() const {
  return _internal_has_base();
}
inline void RoleBattleInfo::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::idlepb::BattleInfo& RoleBattleInfo::_internal_base() const {
  const ::idlepb::BattleInfo* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::BattleInfo&>(
      ::idlepb::_BattleInfo_default_instance_);
}
inline const ::idlepb::BattleInfo& RoleBattleInfo::base() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleBattleInfo.base)
  return _internal_base();
}
inline void RoleBattleInfo::unsafe_arena_set_allocated_base(
    ::idlepb::BattleInfo* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.RoleBattleInfo.base)
}
inline ::idlepb::BattleInfo* RoleBattleInfo::release_base() {
  
  ::idlepb::BattleInfo* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::BattleInfo* RoleBattleInfo::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:idlepb.RoleBattleInfo.base)
  
  ::idlepb::BattleInfo* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::idlepb::BattleInfo* RoleBattleInfo::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::BattleInfo>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::idlepb::BattleInfo* RoleBattleInfo::mutable_base() {
  ::idlepb::BattleInfo* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:idlepb.RoleBattleInfo.base)
  return _msg;
}
inline void RoleBattleInfo::set_allocated_base(::idlepb::BattleInfo* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:idlepb.RoleBattleInfo.base)
}

// bool can_revenge = 2;
inline void RoleBattleInfo::clear_can_revenge() {
  _impl_.can_revenge_ = false;
}
inline bool RoleBattleInfo::_internal_can_revenge() const {
  return _impl_.can_revenge_;
}
inline bool RoleBattleInfo::can_revenge() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleBattleInfo.can_revenge)
  return _internal_can_revenge();
}
inline void RoleBattleInfo::_internal_set_can_revenge(bool value) {
  
  _impl_.can_revenge_ = value;
}
inline void RoleBattleInfo::set_can_revenge(bool value) {
  _internal_set_can_revenge(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleBattleInfo.can_revenge)
}

// int32 round_num = 3;
inline void RoleBattleInfo::clear_round_num() {
  _impl_.round_num_ = 0;
}
inline int32_t RoleBattleInfo::_internal_round_num() const {
  return _impl_.round_num_;
}
inline int32_t RoleBattleInfo::round_num() const {
  // @@protoc_insertion_point(field_get:idlepb.RoleBattleInfo.round_num)
  return _internal_round_num();
}
inline void RoleBattleInfo::_internal_set_round_num(int32_t value) {
  
  _impl_.round_num_ = value;
}
inline void RoleBattleInfo::set_round_num(int32_t value) {
  _internal_set_round_num(value);
  // @@protoc_insertion_point(field_set:idlepb.RoleBattleInfo.round_num)
}

// -------------------------------------------------------------------

// RoleBattleHistorySaveData

// repeated .idlepb.RoleBattleInfo histories = 5;
inline int RoleBattleHistorySaveData::_internal_histories_size() const {
  return _impl_.histories_.size();
}
inline int RoleBattleHistorySaveData::histories_size() const {
  return _internal_histories_size();
}
inline void RoleBattleHistorySaveData::clear_histories() {
  _impl_.histories_.Clear();
}
inline ::idlepb::RoleBattleInfo* RoleBattleHistorySaveData::mutable_histories(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.RoleBattleHistorySaveData.histories)
  return _impl_.histories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleBattleInfo >*
RoleBattleHistorySaveData::mutable_histories() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.RoleBattleHistorySaveData.histories)
  return &_impl_.histories_;
}
inline const ::idlepb::RoleBattleInfo& RoleBattleHistorySaveData::_internal_histories(int index) const {
  return _impl_.histories_.Get(index);
}
inline const ::idlepb::RoleBattleInfo& RoleBattleHistorySaveData::histories(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.RoleBattleHistorySaveData.histories)
  return _internal_histories(index);
}
inline ::idlepb::RoleBattleInfo* RoleBattleHistorySaveData::_internal_add_histories() {
  return _impl_.histories_.Add();
}
inline ::idlepb::RoleBattleInfo* RoleBattleHistorySaveData::add_histories() {
  ::idlepb::RoleBattleInfo* _add = _internal_add_histories();
  // @@protoc_insertion_point(field_add:idlepb.RoleBattleHistorySaveData.histories)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::RoleBattleInfo >&
RoleBattleHistorySaveData::histories() const {
  // @@protoc_insertion_point(field_list:idlepb.RoleBattleHistorySaveData.histories)
  return _impl_.histories_;
}

// -------------------------------------------------------------------

// CompressedData

// int32 original_size = 1;
inline void CompressedData::clear_original_size() {
  _impl_.original_size_ = 0;
}
inline int32_t CompressedData::_internal_original_size() const {
  return _impl_.original_size_;
}
inline int32_t CompressedData::original_size() const {
  // @@protoc_insertion_point(field_get:idlepb.CompressedData.original_size)
  return _internal_original_size();
}
inline void CompressedData::_internal_set_original_size(int32_t value) {
  
  _impl_.original_size_ = value;
}
inline void CompressedData::set_original_size(int32_t value) {
  _internal_set_original_size(value);
  // @@protoc_insertion_point(field_set:idlepb.CompressedData.original_size)
}

// bytes compressed_data = 2;
inline void CompressedData::clear_compressed_data() {
  _impl_.compressed_data_.ClearToEmpty();
}
inline const std::string& CompressedData::compressed_data() const {
  // @@protoc_insertion_point(field_get:idlepb.CompressedData.compressed_data)
  return _internal_compressed_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompressedData::set_compressed_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.compressed_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.CompressedData.compressed_data)
}
inline std::string* CompressedData::mutable_compressed_data() {
  std::string* _s = _internal_mutable_compressed_data();
  // @@protoc_insertion_point(field_mutable:idlepb.CompressedData.compressed_data)
  return _s;
}
inline const std::string& CompressedData::_internal_compressed_data() const {
  return _impl_.compressed_data_.Get();
}
inline void CompressedData::_internal_set_compressed_data(const std::string& value) {
  
  _impl_.compressed_data_.Set(value, GetArenaForAllocation());
}
inline std::string* CompressedData::_internal_mutable_compressed_data() {
  
  return _impl_.compressed_data_.Mutable(GetArenaForAllocation());
}
inline std::string* CompressedData::release_compressed_data() {
  // @@protoc_insertion_point(field_release:idlepb.CompressedData.compressed_data)
  return _impl_.compressed_data_.Release();
}
inline void CompressedData::set_allocated_compressed_data(std::string* compressed_data) {
  if (compressed_data != nullptr) {
    
  } else {
    
  }
  _impl_.compressed_data_.SetAllocated(compressed_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compressed_data_.IsDefault()) {
    _impl_.compressed_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.CompressedData.compressed_data)
}

// -------------------------------------------------------------------

// DoBreathingExerciseResult

// bool ok = 1;
inline void DoBreathingExerciseResult::clear_ok() {
  _impl_.ok_ = false;
}
inline bool DoBreathingExerciseResult::_internal_ok() const {
  return _impl_.ok_;
}
inline bool DoBreathingExerciseResult::ok() const {
  // @@protoc_insertion_point(field_get:idlepb.DoBreathingExerciseResult.ok)
  return _internal_ok();
}
inline void DoBreathingExerciseResult::_internal_set_ok(bool value) {
  
  _impl_.ok_ = value;
}
inline void DoBreathingExerciseResult::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:idlepb.DoBreathingExerciseResult.ok)
}

// bool perfect = 2;
inline void DoBreathingExerciseResult::clear_perfect() {
  _impl_.perfect_ = false;
}
inline bool DoBreathingExerciseResult::_internal_perfect() const {
  return _impl_.perfect_;
}
inline bool DoBreathingExerciseResult::perfect() const {
  // @@protoc_insertion_point(field_get:idlepb.DoBreathingExerciseResult.perfect)
  return _internal_perfect();
}
inline void DoBreathingExerciseResult::_internal_set_perfect(bool value) {
  
  _impl_.perfect_ = value;
}
inline void DoBreathingExerciseResult::set_perfect(bool value) {
  _internal_set_perfect(value);
  // @@protoc_insertion_point(field_set:idlepb.DoBreathingExerciseResult.perfect)
}

// float exp = 3;
inline void DoBreathingExerciseResult::clear_exp() {
  _impl_.exp_ = 0;
}
inline float DoBreathingExerciseResult::_internal_exp() const {
  return _impl_.exp_;
}
inline float DoBreathingExerciseResult::exp() const {
  // @@protoc_insertion_point(field_get:idlepb.DoBreathingExerciseResult.exp)
  return _internal_exp();
}
inline void DoBreathingExerciseResult::_internal_set_exp(float value) {
  
  _impl_.exp_ = value;
}
inline void DoBreathingExerciseResult::set_exp(float value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.DoBreathingExerciseResult.exp)
}

// int32 rate = 4;
inline void DoBreathingExerciseResult::clear_rate() {
  _impl_.rate_ = 0;
}
inline int32_t DoBreathingExerciseResult::_internal_rate() const {
  return _impl_.rate_;
}
inline int32_t DoBreathingExerciseResult::rate() const {
  // @@protoc_insertion_point(field_get:idlepb.DoBreathingExerciseResult.rate)
  return _internal_rate();
}
inline void DoBreathingExerciseResult::_internal_set_rate(int32_t value) {
  
  _impl_.rate_ = value;
}
inline void DoBreathingExerciseResult::set_rate(int32_t value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:idlepb.DoBreathingExerciseResult.rate)
}

// -------------------------------------------------------------------

// SystemNoticeParams

// string s1 = 1;
inline void SystemNoticeParams::clear_s1() {
  _impl_.s1_.ClearToEmpty();
}
inline const std::string& SystemNoticeParams::s1() const {
  // @@protoc_insertion_point(field_get:idlepb.SystemNoticeParams.s1)
  return _internal_s1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemNoticeParams::set_s1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.SystemNoticeParams.s1)
}
inline std::string* SystemNoticeParams::mutable_s1() {
  std::string* _s = _internal_mutable_s1();
  // @@protoc_insertion_point(field_mutable:idlepb.SystemNoticeParams.s1)
  return _s;
}
inline const std::string& SystemNoticeParams::_internal_s1() const {
  return _impl_.s1_.Get();
}
inline void SystemNoticeParams::_internal_set_s1(const std::string& value) {
  
  _impl_.s1_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemNoticeParams::_internal_mutable_s1() {
  
  return _impl_.s1_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemNoticeParams::release_s1() {
  // @@protoc_insertion_point(field_release:idlepb.SystemNoticeParams.s1)
  return _impl_.s1_.Release();
}
inline void SystemNoticeParams::set_allocated_s1(std::string* s1) {
  if (s1 != nullptr) {
    
  } else {
    
  }
  _impl_.s1_.SetAllocated(s1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s1_.IsDefault()) {
    _impl_.s1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.SystemNoticeParams.s1)
}

// string s2 = 2;
inline void SystemNoticeParams::clear_s2() {
  _impl_.s2_.ClearToEmpty();
}
inline const std::string& SystemNoticeParams::s2() const {
  // @@protoc_insertion_point(field_get:idlepb.SystemNoticeParams.s2)
  return _internal_s2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemNoticeParams::set_s2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.SystemNoticeParams.s2)
}
inline std::string* SystemNoticeParams::mutable_s2() {
  std::string* _s = _internal_mutable_s2();
  // @@protoc_insertion_point(field_mutable:idlepb.SystemNoticeParams.s2)
  return _s;
}
inline const std::string& SystemNoticeParams::_internal_s2() const {
  return _impl_.s2_.Get();
}
inline void SystemNoticeParams::_internal_set_s2(const std::string& value) {
  
  _impl_.s2_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemNoticeParams::_internal_mutable_s2() {
  
  return _impl_.s2_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemNoticeParams::release_s2() {
  // @@protoc_insertion_point(field_release:idlepb.SystemNoticeParams.s2)
  return _impl_.s2_.Release();
}
inline void SystemNoticeParams::set_allocated_s2(std::string* s2) {
  if (s2 != nullptr) {
    
  } else {
    
  }
  _impl_.s2_.SetAllocated(s2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s2_.IsDefault()) {
    _impl_.s2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.SystemNoticeParams.s2)
}

// string s3 = 3;
inline void SystemNoticeParams::clear_s3() {
  _impl_.s3_.ClearToEmpty();
}
inline const std::string& SystemNoticeParams::s3() const {
  // @@protoc_insertion_point(field_get:idlepb.SystemNoticeParams.s3)
  return _internal_s3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemNoticeParams::set_s3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.SystemNoticeParams.s3)
}
inline std::string* SystemNoticeParams::mutable_s3() {
  std::string* _s = _internal_mutable_s3();
  // @@protoc_insertion_point(field_mutable:idlepb.SystemNoticeParams.s3)
  return _s;
}
inline const std::string& SystemNoticeParams::_internal_s3() const {
  return _impl_.s3_.Get();
}
inline void SystemNoticeParams::_internal_set_s3(const std::string& value) {
  
  _impl_.s3_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemNoticeParams::_internal_mutable_s3() {
  
  return _impl_.s3_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemNoticeParams::release_s3() {
  // @@protoc_insertion_point(field_release:idlepb.SystemNoticeParams.s3)
  return _impl_.s3_.Release();
}
inline void SystemNoticeParams::set_allocated_s3(std::string* s3) {
  if (s3 != nullptr) {
    
  } else {
    
  }
  _impl_.s3_.SetAllocated(s3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s3_.IsDefault()) {
    _impl_.s3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.SystemNoticeParams.s3)
}

// string s4 = 4;
inline void SystemNoticeParams::clear_s4() {
  _impl_.s4_.ClearToEmpty();
}
inline const std::string& SystemNoticeParams::s4() const {
  // @@protoc_insertion_point(field_get:idlepb.SystemNoticeParams.s4)
  return _internal_s4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemNoticeParams::set_s4(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.SystemNoticeParams.s4)
}
inline std::string* SystemNoticeParams::mutable_s4() {
  std::string* _s = _internal_mutable_s4();
  // @@protoc_insertion_point(field_mutable:idlepb.SystemNoticeParams.s4)
  return _s;
}
inline const std::string& SystemNoticeParams::_internal_s4() const {
  return _impl_.s4_.Get();
}
inline void SystemNoticeParams::_internal_set_s4(const std::string& value) {
  
  _impl_.s4_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemNoticeParams::_internal_mutable_s4() {
  
  return _impl_.s4_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemNoticeParams::release_s4() {
  // @@protoc_insertion_point(field_release:idlepb.SystemNoticeParams.s4)
  return _impl_.s4_.Release();
}
inline void SystemNoticeParams::set_allocated_s4(std::string* s4) {
  if (s4 != nullptr) {
    
  } else {
    
  }
  _impl_.s4_.SetAllocated(s4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s4_.IsDefault()) {
    _impl_.s4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.SystemNoticeParams.s4)
}

// int64 n1 = 5;
inline void SystemNoticeParams::clear_n1() {
  _impl_.n1_ = int64_t{0};
}
inline int64_t SystemNoticeParams::_internal_n1() const {
  return _impl_.n1_;
}
inline int64_t SystemNoticeParams::n1() const {
  // @@protoc_insertion_point(field_get:idlepb.SystemNoticeParams.n1)
  return _internal_n1();
}
inline void SystemNoticeParams::_internal_set_n1(int64_t value) {
  
  _impl_.n1_ = value;
}
inline void SystemNoticeParams::set_n1(int64_t value) {
  _internal_set_n1(value);
  // @@protoc_insertion_point(field_set:idlepb.SystemNoticeParams.n1)
}

// int64 n2 = 6;
inline void SystemNoticeParams::clear_n2() {
  _impl_.n2_ = int64_t{0};
}
inline int64_t SystemNoticeParams::_internal_n2() const {
  return _impl_.n2_;
}
inline int64_t SystemNoticeParams::n2() const {
  // @@protoc_insertion_point(field_get:idlepb.SystemNoticeParams.n2)
  return _internal_n2();
}
inline void SystemNoticeParams::_internal_set_n2(int64_t value) {
  
  _impl_.n2_ = value;
}
inline void SystemNoticeParams::set_n2(int64_t value) {
  _internal_set_n2(value);
  // @@protoc_insertion_point(field_set:idlepb.SystemNoticeParams.n2)
}

// int64 n3 = 7;
inline void SystemNoticeParams::clear_n3() {
  _impl_.n3_ = int64_t{0};
}
inline int64_t SystemNoticeParams::_internal_n3() const {
  return _impl_.n3_;
}
inline int64_t SystemNoticeParams::n3() const {
  // @@protoc_insertion_point(field_get:idlepb.SystemNoticeParams.n3)
  return _internal_n3();
}
inline void SystemNoticeParams::_internal_set_n3(int64_t value) {
  
  _impl_.n3_ = value;
}
inline void SystemNoticeParams::set_n3(int64_t value) {
  _internal_set_n3(value);
  // @@protoc_insertion_point(field_set:idlepb.SystemNoticeParams.n3)
}

// int64 n4 = 8;
inline void SystemNoticeParams::clear_n4() {
  _impl_.n4_ = int64_t{0};
}
inline int64_t SystemNoticeParams::_internal_n4() const {
  return _impl_.n4_;
}
inline int64_t SystemNoticeParams::n4() const {
  // @@protoc_insertion_point(field_get:idlepb.SystemNoticeParams.n4)
  return _internal_n4();
}
inline void SystemNoticeParams::_internal_set_n4(int64_t value) {
  
  _impl_.n4_ = value;
}
inline void SystemNoticeParams::set_n4(int64_t value) {
  _internal_set_n4(value);
  // @@protoc_insertion_point(field_set:idlepb.SystemNoticeParams.n4)
}

// -------------------------------------------------------------------

// DropItem

// int32 item_id = 1;
inline void DropItem::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t DropItem::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t DropItem::item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.DropItem.item_id)
  return _internal_item_id();
}
inline void DropItem::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void DropItem::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.DropItem.item_id)
}

// int32 item_num = 2;
inline void DropItem::clear_item_num() {
  _impl_.item_num_ = 0;
}
inline int32_t DropItem::_internal_item_num() const {
  return _impl_.item_num_;
}
inline int32_t DropItem::item_num() const {
  // @@protoc_insertion_point(field_get:idlepb.DropItem.item_num)
  return _internal_item_num();
}
inline void DropItem::_internal_set_item_num(int32_t value) {
  
  _impl_.item_num_ = value;
}
inline void DropItem::set_item_num(int32_t value) {
  _internal_set_item_num(value);
  // @@protoc_insertion_point(field_set:idlepb.DropItem.item_num)
}

// -------------------------------------------------------------------

// BiographyEventLeaderboardItem

// int64 uid = 1;
inline void BiographyEventLeaderboardItem::clear_uid() {
  _impl_.uid_ = int64_t{0};
}
inline int64_t BiographyEventLeaderboardItem::_internal_uid() const {
  return _impl_.uid_;
}
inline int64_t BiographyEventLeaderboardItem::uid() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyEventLeaderboardItem.uid)
  return _internal_uid();
}
inline void BiographyEventLeaderboardItem::_internal_set_uid(int64_t value) {
  
  _impl_.uid_ = value;
}
inline void BiographyEventLeaderboardItem::set_uid(int64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:idlepb.BiographyEventLeaderboardItem.uid)
}

// string name = 2;
inline void BiographyEventLeaderboardItem::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BiographyEventLeaderboardItem::name() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyEventLeaderboardItem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiographyEventLeaderboardItem::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.BiographyEventLeaderboardItem.name)
}
inline std::string* BiographyEventLeaderboardItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:idlepb.BiographyEventLeaderboardItem.name)
  return _s;
}
inline const std::string& BiographyEventLeaderboardItem::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BiographyEventLeaderboardItem::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BiographyEventLeaderboardItem::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BiographyEventLeaderboardItem::release_name() {
  // @@protoc_insertion_point(field_release:idlepb.BiographyEventLeaderboardItem.name)
  return _impl_.name_.Release();
}
inline void BiographyEventLeaderboardItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.BiographyEventLeaderboardItem.name)
}

// int32 param_d1 = 6;
inline void BiographyEventLeaderboardItem::clear_param_d1() {
  _impl_.param_d1_ = 0;
}
inline int32_t BiographyEventLeaderboardItem::_internal_param_d1() const {
  return _impl_.param_d1_;
}
inline int32_t BiographyEventLeaderboardItem::param_d1() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyEventLeaderboardItem.param_d1)
  return _internal_param_d1();
}
inline void BiographyEventLeaderboardItem::_internal_set_param_d1(int32_t value) {
  
  _impl_.param_d1_ = value;
}
inline void BiographyEventLeaderboardItem::set_param_d1(int32_t value) {
  _internal_set_param_d1(value);
  // @@protoc_insertion_point(field_set:idlepb.BiographyEventLeaderboardItem.param_d1)
}

// int64 param_n1 = 7;
inline void BiographyEventLeaderboardItem::clear_param_n1() {
  _impl_.param_n1_ = int64_t{0};
}
inline int64_t BiographyEventLeaderboardItem::_internal_param_n1() const {
  return _impl_.param_n1_;
}
inline int64_t BiographyEventLeaderboardItem::param_n1() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyEventLeaderboardItem.param_n1)
  return _internal_param_n1();
}
inline void BiographyEventLeaderboardItem::_internal_set_param_n1(int64_t value) {
  
  _impl_.param_n1_ = value;
}
inline void BiographyEventLeaderboardItem::set_param_n1(int64_t value) {
  _internal_set_param_n1(value);
  // @@protoc_insertion_point(field_set:idlepb.BiographyEventLeaderboardItem.param_n1)
}

// repeated int64 params_n1 = 8;
inline int BiographyEventLeaderboardItem::_internal_params_n1_size() const {
  return _impl_.params_n1_.size();
}
inline int BiographyEventLeaderboardItem::params_n1_size() const {
  return _internal_params_n1_size();
}
inline void BiographyEventLeaderboardItem::clear_params_n1() {
  _impl_.params_n1_.Clear();
}
inline int64_t BiographyEventLeaderboardItem::_internal_params_n1(int index) const {
  return _impl_.params_n1_.Get(index);
}
inline int64_t BiographyEventLeaderboardItem::params_n1(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyEventLeaderboardItem.params_n1)
  return _internal_params_n1(index);
}
inline void BiographyEventLeaderboardItem::set_params_n1(int index, int64_t value) {
  _impl_.params_n1_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.BiographyEventLeaderboardItem.params_n1)
}
inline void BiographyEventLeaderboardItem::_internal_add_params_n1(int64_t value) {
  _impl_.params_n1_.Add(value);
}
inline void BiographyEventLeaderboardItem::add_params_n1(int64_t value) {
  _internal_add_params_n1(value);
  // @@protoc_insertion_point(field_add:idlepb.BiographyEventLeaderboardItem.params_n1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
BiographyEventLeaderboardItem::_internal_params_n1() const {
  return _impl_.params_n1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
BiographyEventLeaderboardItem::params_n1() const {
  // @@protoc_insertion_point(field_list:idlepb.BiographyEventLeaderboardItem.params_n1)
  return _internal_params_n1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
BiographyEventLeaderboardItem::_internal_mutable_params_n1() {
  return &_impl_.params_n1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
BiographyEventLeaderboardItem::mutable_params_n1() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.BiographyEventLeaderboardItem.params_n1)
  return _internal_mutable_params_n1();
}

// repeated int32 params_d1 = 9;
inline int BiographyEventLeaderboardItem::_internal_params_d1_size() const {
  return _impl_.params_d1_.size();
}
inline int BiographyEventLeaderboardItem::params_d1_size() const {
  return _internal_params_d1_size();
}
inline void BiographyEventLeaderboardItem::clear_params_d1() {
  _impl_.params_d1_.Clear();
}
inline int32_t BiographyEventLeaderboardItem::_internal_params_d1(int index) const {
  return _impl_.params_d1_.Get(index);
}
inline int32_t BiographyEventLeaderboardItem::params_d1(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyEventLeaderboardItem.params_d1)
  return _internal_params_d1(index);
}
inline void BiographyEventLeaderboardItem::set_params_d1(int index, int32_t value) {
  _impl_.params_d1_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.BiographyEventLeaderboardItem.params_d1)
}
inline void BiographyEventLeaderboardItem::_internal_add_params_d1(int32_t value) {
  _impl_.params_d1_.Add(value);
}
inline void BiographyEventLeaderboardItem::add_params_d1(int32_t value) {
  _internal_add_params_d1(value);
  // @@protoc_insertion_point(field_add:idlepb.BiographyEventLeaderboardItem.params_d1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BiographyEventLeaderboardItem::_internal_params_d1() const {
  return _impl_.params_d1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BiographyEventLeaderboardItem::params_d1() const {
  // @@protoc_insertion_point(field_list:idlepb.BiographyEventLeaderboardItem.params_d1)
  return _internal_params_d1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BiographyEventLeaderboardItem::_internal_mutable_params_d1() {
  return &_impl_.params_d1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BiographyEventLeaderboardItem::mutable_params_d1() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.BiographyEventLeaderboardItem.params_d1)
  return _internal_mutable_params_d1();
}

// -------------------------------------------------------------------

// BiographyEventLeaderboardList

// repeated .idlepb.BiographyEventLeaderboardItem list_data = 1;
inline int BiographyEventLeaderboardList::_internal_list_data_size() const {
  return _impl_.list_data_.size();
}
inline int BiographyEventLeaderboardList::list_data_size() const {
  return _internal_list_data_size();
}
inline void BiographyEventLeaderboardList::clear_list_data() {
  _impl_.list_data_.Clear();
}
inline ::idlepb::BiographyEventLeaderboardItem* BiographyEventLeaderboardList::mutable_list_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.BiographyEventLeaderboardList.list_data)
  return _impl_.list_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyEventLeaderboardItem >*
BiographyEventLeaderboardList::mutable_list_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.BiographyEventLeaderboardList.list_data)
  return &_impl_.list_data_;
}
inline const ::idlepb::BiographyEventLeaderboardItem& BiographyEventLeaderboardList::_internal_list_data(int index) const {
  return _impl_.list_data_.Get(index);
}
inline const ::idlepb::BiographyEventLeaderboardItem& BiographyEventLeaderboardList::list_data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyEventLeaderboardList.list_data)
  return _internal_list_data(index);
}
inline ::idlepb::BiographyEventLeaderboardItem* BiographyEventLeaderboardList::_internal_add_list_data() {
  return _impl_.list_data_.Add();
}
inline ::idlepb::BiographyEventLeaderboardItem* BiographyEventLeaderboardList::add_list_data() {
  ::idlepb::BiographyEventLeaderboardItem* _add = _internal_add_list_data();
  // @@protoc_insertion_point(field_add:idlepb.BiographyEventLeaderboardList.list_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyEventLeaderboardItem >&
BiographyEventLeaderboardList::list_data() const {
  // @@protoc_insertion_point(field_list:idlepb.BiographyEventLeaderboardList.list_data)
  return _impl_.list_data_;
}

// int32 cfg_id = 2;
inline void BiographyEventLeaderboardList::clear_cfg_id() {
  _impl_.cfg_id_ = 0;
}
inline int32_t BiographyEventLeaderboardList::_internal_cfg_id() const {
  return _impl_.cfg_id_;
}
inline int32_t BiographyEventLeaderboardList::cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyEventLeaderboardList.cfg_id)
  return _internal_cfg_id();
}
inline void BiographyEventLeaderboardList::_internal_set_cfg_id(int32_t value) {
  
  _impl_.cfg_id_ = value;
}
inline void BiographyEventLeaderboardList::set_cfg_id(int32_t value) {
  _internal_set_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.BiographyEventLeaderboardList.cfg_id)
}

// int64 begin_date = 3;
inline void BiographyEventLeaderboardList::clear_begin_date() {
  _impl_.begin_date_ = int64_t{0};
}
inline int64_t BiographyEventLeaderboardList::_internal_begin_date() const {
  return _impl_.begin_date_;
}
inline int64_t BiographyEventLeaderboardList::begin_date() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyEventLeaderboardList.begin_date)
  return _internal_begin_date();
}
inline void BiographyEventLeaderboardList::_internal_set_begin_date(int64_t value) {
  
  _impl_.begin_date_ = value;
}
inline void BiographyEventLeaderboardList::set_begin_date(int64_t value) {
  _internal_set_begin_date(value);
  // @@protoc_insertion_point(field_set:idlepb.BiographyEventLeaderboardList.begin_date)
}

// bool finished = 4;
inline void BiographyEventLeaderboardList::clear_finished() {
  _impl_.finished_ = false;
}
inline bool BiographyEventLeaderboardList::_internal_finished() const {
  return _impl_.finished_;
}
inline bool BiographyEventLeaderboardList::finished() const {
  // @@protoc_insertion_point(field_get:idlepb.BiographyEventLeaderboardList.finished)
  return _internal_finished();
}
inline void BiographyEventLeaderboardList::_internal_set_finished(bool value) {
  
  _impl_.finished_ = value;
}
inline void BiographyEventLeaderboardList::set_finished(bool value) {
  _internal_set_finished(value);
  // @@protoc_insertion_point(field_set:idlepb.BiographyEventLeaderboardList.finished)
}

// -------------------------------------------------------------------

// LeaderboardListItem

// int64 role_id = 1;
inline void LeaderboardListItem::clear_role_id() {
  _impl_.role_id_ = int64_t{0};
}
inline int64_t LeaderboardListItem::_internal_role_id() const {
  return _impl_.role_id_;
}
inline int64_t LeaderboardListItem::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardListItem.role_id)
  return _internal_role_id();
}
inline void LeaderboardListItem::_internal_set_role_id(int64_t value) {
  
  _impl_.role_id_ = value;
}
inline void LeaderboardListItem::set_role_id(int64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.LeaderboardListItem.role_id)
}

// string user_name = 2;
inline void LeaderboardListItem::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& LeaderboardListItem::user_name() const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardListItem.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LeaderboardListItem::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.LeaderboardListItem.user_name)
}
inline std::string* LeaderboardListItem::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:idlepb.LeaderboardListItem.user_name)
  return _s;
}
inline const std::string& LeaderboardListItem::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void LeaderboardListItem::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LeaderboardListItem::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LeaderboardListItem::release_user_name() {
  // @@protoc_insertion_point(field_release:idlepb.LeaderboardListItem.user_name)
  return _impl_.user_name_.Release();
}
inline void LeaderboardListItem::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.LeaderboardListItem.user_name)
}

// int64 property_num = 3;
inline void LeaderboardListItem::clear_property_num() {
  _impl_.property_num_ = int64_t{0};
}
inline int64_t LeaderboardListItem::_internal_property_num() const {
  return _impl_.property_num_;
}
inline int64_t LeaderboardListItem::property_num() const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardListItem.property_num)
  return _internal_property_num();
}
inline void LeaderboardListItem::_internal_set_property_num(int64_t value) {
  
  _impl_.property_num_ = value;
}
inline void LeaderboardListItem::set_property_num(int64_t value) {
  _internal_set_property_num(value);
  // @@protoc_insertion_point(field_set:idlepb.LeaderboardListItem.property_num)
}

// int64 time = 4;
inline void LeaderboardListItem::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t LeaderboardListItem::_internal_time() const {
  return _impl_.time_;
}
inline int64_t LeaderboardListItem::time() const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardListItem.time)
  return _internal_time();
}
inline void LeaderboardListItem::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void LeaderboardListItem::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:idlepb.LeaderboardListItem.time)
}

// int32 d1 = 5;
inline void LeaderboardListItem::clear_d1() {
  _impl_.d1_ = 0;
}
inline int32_t LeaderboardListItem::_internal_d1() const {
  return _impl_.d1_;
}
inline int32_t LeaderboardListItem::d1() const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardListItem.d1)
  return _internal_d1();
}
inline void LeaderboardListItem::_internal_set_d1(int32_t value) {
  
  _impl_.d1_ = value;
}
inline void LeaderboardListItem::set_d1(int32_t value) {
  _internal_set_d1(value);
  // @@protoc_insertion_point(field_set:idlepb.LeaderboardListItem.d1)
}

// -------------------------------------------------------------------

// SeptDataOnLeaderboard

// int64 sept_id = 1;
inline void SeptDataOnLeaderboard::clear_sept_id() {
  _impl_.sept_id_ = int64_t{0};
}
inline int64_t SeptDataOnLeaderboard::_internal_sept_id() const {
  return _impl_.sept_id_;
}
inline int64_t SeptDataOnLeaderboard::sept_id() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDataOnLeaderboard.sept_id)
  return _internal_sept_id();
}
inline void SeptDataOnLeaderboard::_internal_set_sept_id(int64_t value) {
  
  _impl_.sept_id_ = value;
}
inline void SeptDataOnLeaderboard::set_sept_id(int64_t value) {
  _internal_set_sept_id(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDataOnLeaderboard.sept_id)
}

// string sept_name = 2;
inline void SeptDataOnLeaderboard::clear_sept_name() {
  _impl_.sept_name_.ClearToEmpty();
}
inline const std::string& SeptDataOnLeaderboard::sept_name() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDataOnLeaderboard.sept_name)
  return _internal_sept_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeptDataOnLeaderboard::set_sept_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sept_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.SeptDataOnLeaderboard.sept_name)
}
inline std::string* SeptDataOnLeaderboard::mutable_sept_name() {
  std::string* _s = _internal_mutable_sept_name();
  // @@protoc_insertion_point(field_mutable:idlepb.SeptDataOnLeaderboard.sept_name)
  return _s;
}
inline const std::string& SeptDataOnLeaderboard::_internal_sept_name() const {
  return _impl_.sept_name_.Get();
}
inline void SeptDataOnLeaderboard::_internal_set_sept_name(const std::string& value) {
  
  _impl_.sept_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SeptDataOnLeaderboard::_internal_mutable_sept_name() {
  
  return _impl_.sept_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SeptDataOnLeaderboard::release_sept_name() {
  // @@protoc_insertion_point(field_release:idlepb.SeptDataOnLeaderboard.sept_name)
  return _impl_.sept_name_.Release();
}
inline void SeptDataOnLeaderboard::set_allocated_sept_name(std::string* sept_name) {
  if (sept_name != nullptr) {
    
  } else {
    
  }
  _impl_.sept_name_.SetAllocated(sept_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sept_name_.IsDefault()) {
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.SeptDataOnLeaderboard.sept_name)
}

// int32 logo_index = 3;
inline void SeptDataOnLeaderboard::clear_logo_index() {
  _impl_.logo_index_ = 0;
}
inline int32_t SeptDataOnLeaderboard::_internal_logo_index() const {
  return _impl_.logo_index_;
}
inline int32_t SeptDataOnLeaderboard::logo_index() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDataOnLeaderboard.logo_index)
  return _internal_logo_index();
}
inline void SeptDataOnLeaderboard::_internal_set_logo_index(int32_t value) {
  
  _impl_.logo_index_ = value;
}
inline void SeptDataOnLeaderboard::set_logo_index(int32_t value) {
  _internal_set_logo_index(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDataOnLeaderboard.logo_index)
}

// int64 property_num = 4;
inline void SeptDataOnLeaderboard::clear_property_num() {
  _impl_.property_num_ = int64_t{0};
}
inline int64_t SeptDataOnLeaderboard::_internal_property_num() const {
  return _impl_.property_num_;
}
inline int64_t SeptDataOnLeaderboard::property_num() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDataOnLeaderboard.property_num)
  return _internal_property_num();
}
inline void SeptDataOnLeaderboard::_internal_set_property_num(int64_t value) {
  
  _impl_.property_num_ = value;
}
inline void SeptDataOnLeaderboard::set_property_num(int64_t value) {
  _internal_set_property_num(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDataOnLeaderboard.property_num)
}

// -------------------------------------------------------------------

// LeaderboardList

// repeated .idlepb.LeaderboardListItem list_data = 1;
inline int LeaderboardList::_internal_list_data_size() const {
  return _impl_.list_data_.size();
}
inline int LeaderboardList::list_data_size() const {
  return _internal_list_data_size();
}
inline void LeaderboardList::clear_list_data() {
  _impl_.list_data_.Clear();
}
inline ::idlepb::LeaderboardListItem* LeaderboardList::mutable_list_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.LeaderboardList.list_data)
  return _impl_.list_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardListItem >*
LeaderboardList::mutable_list_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.LeaderboardList.list_data)
  return &_impl_.list_data_;
}
inline const ::idlepb::LeaderboardListItem& LeaderboardList::_internal_list_data(int index) const {
  return _impl_.list_data_.Get(index);
}
inline const ::idlepb::LeaderboardListItem& LeaderboardList::list_data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardList.list_data)
  return _internal_list_data(index);
}
inline ::idlepb::LeaderboardListItem* LeaderboardList::_internal_add_list_data() {
  return _impl_.list_data_.Add();
}
inline ::idlepb::LeaderboardListItem* LeaderboardList::add_list_data() {
  ::idlepb::LeaderboardListItem* _add = _internal_add_list_data();
  // @@protoc_insertion_point(field_add:idlepb.LeaderboardList.list_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardListItem >&
LeaderboardList::list_data() const {
  // @@protoc_insertion_point(field_list:idlepb.LeaderboardList.list_data)
  return _impl_.list_data_;
}

// int32 type_id = 2;
inline void LeaderboardList::clear_type_id() {
  _impl_.type_id_ = 0;
}
inline int32_t LeaderboardList::_internal_type_id() const {
  return _impl_.type_id_;
}
inline int32_t LeaderboardList::type_id() const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardList.type_id)
  return _internal_type_id();
}
inline void LeaderboardList::_internal_set_type_id(int32_t value) {
  
  _impl_.type_id_ = value;
}
inline void LeaderboardList::set_type_id(int32_t value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:idlepb.LeaderboardList.type_id)
}

// -------------------------------------------------------------------

// LeaderboardSaveData

// repeated .idlepb.LeaderboardList lists_data = 1;
inline int LeaderboardSaveData::_internal_lists_data_size() const {
  return _impl_.lists_data_.size();
}
inline int LeaderboardSaveData::lists_data_size() const {
  return _internal_lists_data_size();
}
inline void LeaderboardSaveData::clear_lists_data() {
  _impl_.lists_data_.Clear();
}
inline ::idlepb::LeaderboardList* LeaderboardSaveData::mutable_lists_data(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.LeaderboardSaveData.lists_data)
  return _impl_.lists_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardList >*
LeaderboardSaveData::mutable_lists_data() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.LeaderboardSaveData.lists_data)
  return &_impl_.lists_data_;
}
inline const ::idlepb::LeaderboardList& LeaderboardSaveData::_internal_lists_data(int index) const {
  return _impl_.lists_data_.Get(index);
}
inline const ::idlepb::LeaderboardList& LeaderboardSaveData::lists_data(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardSaveData.lists_data)
  return _internal_lists_data(index);
}
inline ::idlepb::LeaderboardList* LeaderboardSaveData::_internal_add_lists_data() {
  return _impl_.lists_data_.Add();
}
inline ::idlepb::LeaderboardList* LeaderboardSaveData::add_lists_data() {
  ::idlepb::LeaderboardList* _add = _internal_add_lists_data();
  // @@protoc_insertion_point(field_add:idlepb.LeaderboardSaveData.lists_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardList >&
LeaderboardSaveData::lists_data() const {
  // @@protoc_insertion_point(field_list:idlepb.LeaderboardSaveData.lists_data)
  return _impl_.lists_data_;
}

// repeated .idlepb.SeptDataOnLeaderboard sept_list = 3;
inline int LeaderboardSaveData::_internal_sept_list_size() const {
  return _impl_.sept_list_.size();
}
inline int LeaderboardSaveData::sept_list_size() const {
  return _internal_sept_list_size();
}
inline void LeaderboardSaveData::clear_sept_list() {
  _impl_.sept_list_.Clear();
}
inline ::idlepb::SeptDataOnLeaderboard* LeaderboardSaveData::mutable_sept_list(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.LeaderboardSaveData.sept_list)
  return _impl_.sept_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptDataOnLeaderboard >*
LeaderboardSaveData::mutable_sept_list() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.LeaderboardSaveData.sept_list)
  return &_impl_.sept_list_;
}
inline const ::idlepb::SeptDataOnLeaderboard& LeaderboardSaveData::_internal_sept_list(int index) const {
  return _impl_.sept_list_.Get(index);
}
inline const ::idlepb::SeptDataOnLeaderboard& LeaderboardSaveData::sept_list(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardSaveData.sept_list)
  return _internal_sept_list(index);
}
inline ::idlepb::SeptDataOnLeaderboard* LeaderboardSaveData::_internal_add_sept_list() {
  return _impl_.sept_list_.Add();
}
inline ::idlepb::SeptDataOnLeaderboard* LeaderboardSaveData::add_sept_list() {
  ::idlepb::SeptDataOnLeaderboard* _add = _internal_add_sept_list();
  // @@protoc_insertion_point(field_add:idlepb.LeaderboardSaveData.sept_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptDataOnLeaderboard >&
LeaderboardSaveData::sept_list() const {
  // @@protoc_insertion_point(field_list:idlepb.LeaderboardSaveData.sept_list)
  return _impl_.sept_list_;
}

// repeated .idlepb.LeaderboardList monster_tower_challange = 11;
inline int LeaderboardSaveData::_internal_monster_tower_challange_size() const {
  return _impl_.monster_tower_challange_.size();
}
inline int LeaderboardSaveData::monster_tower_challange_size() const {
  return _internal_monster_tower_challange_size();
}
inline void LeaderboardSaveData::clear_monster_tower_challange() {
  _impl_.monster_tower_challange_.Clear();
}
inline ::idlepb::LeaderboardList* LeaderboardSaveData::mutable_monster_tower_challange(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.LeaderboardSaveData.monster_tower_challange)
  return _impl_.monster_tower_challange_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardList >*
LeaderboardSaveData::mutable_monster_tower_challange() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.LeaderboardSaveData.monster_tower_challange)
  return &_impl_.monster_tower_challange_;
}
inline const ::idlepb::LeaderboardList& LeaderboardSaveData::_internal_monster_tower_challange(int index) const {
  return _impl_.monster_tower_challange_.Get(index);
}
inline const ::idlepb::LeaderboardList& LeaderboardSaveData::monster_tower_challange(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardSaveData.monster_tower_challange)
  return _internal_monster_tower_challange(index);
}
inline ::idlepb::LeaderboardList* LeaderboardSaveData::_internal_add_monster_tower_challange() {
  return _impl_.monster_tower_challange_.Add();
}
inline ::idlepb::LeaderboardList* LeaderboardSaveData::add_monster_tower_challange() {
  ::idlepb::LeaderboardList* _add = _internal_add_monster_tower_challange();
  // @@protoc_insertion_point(field_add:idlepb.LeaderboardSaveData.monster_tower_challange)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::LeaderboardList >&
LeaderboardSaveData::monster_tower_challange() const {
  // @@protoc_insertion_point(field_list:idlepb.LeaderboardSaveData.monster_tower_challange)
  return _impl_.monster_tower_challange_;
}

// int64 last_reset_week_time = 21;
inline void LeaderboardSaveData::clear_last_reset_week_time() {
  _impl_.last_reset_week_time_ = int64_t{0};
}
inline int64_t LeaderboardSaveData::_internal_last_reset_week_time() const {
  return _impl_.last_reset_week_time_;
}
inline int64_t LeaderboardSaveData::last_reset_week_time() const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardSaveData.last_reset_week_time)
  return _internal_last_reset_week_time();
}
inline void LeaderboardSaveData::_internal_set_last_reset_week_time(int64_t value) {
  
  _impl_.last_reset_week_time_ = value;
}
inline void LeaderboardSaveData::set_last_reset_week_time(int64_t value) {
  _internal_set_last_reset_week_time(value);
  // @@protoc_insertion_point(field_set:idlepb.LeaderboardSaveData.last_reset_week_time)
}

// int64 last_reset_day_time = 22;
inline void LeaderboardSaveData::clear_last_reset_day_time() {
  _impl_.last_reset_day_time_ = int64_t{0};
}
inline int64_t LeaderboardSaveData::_internal_last_reset_day_time() const {
  return _impl_.last_reset_day_time_;
}
inline int64_t LeaderboardSaveData::last_reset_day_time() const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardSaveData.last_reset_day_time)
  return _internal_last_reset_day_time();
}
inline void LeaderboardSaveData::_internal_set_last_reset_day_time(int64_t value) {
  
  _impl_.last_reset_day_time_ = value;
}
inline void LeaderboardSaveData::set_last_reset_day_time(int64_t value) {
  _internal_set_last_reset_day_time(value);
  // @@protoc_insertion_point(field_set:idlepb.LeaderboardSaveData.last_reset_day_time)
}

// repeated .idlepb.BiographyEventLeaderboardList biography_lists = 31;
inline int LeaderboardSaveData::_internal_biography_lists_size() const {
  return _impl_.biography_lists_.size();
}
inline int LeaderboardSaveData::biography_lists_size() const {
  return _internal_biography_lists_size();
}
inline void LeaderboardSaveData::clear_biography_lists() {
  _impl_.biography_lists_.Clear();
}
inline ::idlepb::BiographyEventLeaderboardList* LeaderboardSaveData::mutable_biography_lists(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.LeaderboardSaveData.biography_lists)
  return _impl_.biography_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyEventLeaderboardList >*
LeaderboardSaveData::mutable_biography_lists() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.LeaderboardSaveData.biography_lists)
  return &_impl_.biography_lists_;
}
inline const ::idlepb::BiographyEventLeaderboardList& LeaderboardSaveData::_internal_biography_lists(int index) const {
  return _impl_.biography_lists_.Get(index);
}
inline const ::idlepb::BiographyEventLeaderboardList& LeaderboardSaveData::biography_lists(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardSaveData.biography_lists)
  return _internal_biography_lists(index);
}
inline ::idlepb::BiographyEventLeaderboardList* LeaderboardSaveData::_internal_add_biography_lists() {
  return _impl_.biography_lists_.Add();
}
inline ::idlepb::BiographyEventLeaderboardList* LeaderboardSaveData::add_biography_lists() {
  ::idlepb::BiographyEventLeaderboardList* _add = _internal_add_biography_lists();
  // @@protoc_insertion_point(field_add:idlepb.LeaderboardSaveData.biography_lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::BiographyEventLeaderboardList >&
LeaderboardSaveData::biography_lists() const {
  // @@protoc_insertion_point(field_list:idlepb.LeaderboardSaveData.biography_lists)
  return _impl_.biography_lists_;
}

// int64 fuze_exp = 32;
inline void LeaderboardSaveData::clear_fuze_exp() {
  _impl_.fuze_exp_ = int64_t{0};
}
inline int64_t LeaderboardSaveData::_internal_fuze_exp() const {
  return _impl_.fuze_exp_;
}
inline int64_t LeaderboardSaveData::fuze_exp() const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardSaveData.fuze_exp)
  return _internal_fuze_exp();
}
inline void LeaderboardSaveData::_internal_set_fuze_exp(int64_t value) {
  
  _impl_.fuze_exp_ = value;
}
inline void LeaderboardSaveData::set_fuze_exp(int64_t value) {
  _internal_set_fuze_exp(value);
  // @@protoc_insertion_point(field_set:idlepb.LeaderboardSaveData.fuze_exp)
}

// repeated int64 fuze_mail_list = 33;
inline int LeaderboardSaveData::_internal_fuze_mail_list_size() const {
  return _impl_.fuze_mail_list_.size();
}
inline int LeaderboardSaveData::fuze_mail_list_size() const {
  return _internal_fuze_mail_list_size();
}
inline void LeaderboardSaveData::clear_fuze_mail_list() {
  _impl_.fuze_mail_list_.Clear();
}
inline int64_t LeaderboardSaveData::_internal_fuze_mail_list(int index) const {
  return _impl_.fuze_mail_list_.Get(index);
}
inline int64_t LeaderboardSaveData::fuze_mail_list(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.LeaderboardSaveData.fuze_mail_list)
  return _internal_fuze_mail_list(index);
}
inline void LeaderboardSaveData::set_fuze_mail_list(int index, int64_t value) {
  _impl_.fuze_mail_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.LeaderboardSaveData.fuze_mail_list)
}
inline void LeaderboardSaveData::_internal_add_fuze_mail_list(int64_t value) {
  _impl_.fuze_mail_list_.Add(value);
}
inline void LeaderboardSaveData::add_fuze_mail_list(int64_t value) {
  _internal_add_fuze_mail_list(value);
  // @@protoc_insertion_point(field_add:idlepb.LeaderboardSaveData.fuze_mail_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
LeaderboardSaveData::_internal_fuze_mail_list() const {
  return _impl_.fuze_mail_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
LeaderboardSaveData::fuze_mail_list() const {
  // @@protoc_insertion_point(field_list:idlepb.LeaderboardSaveData.fuze_mail_list)
  return _internal_fuze_mail_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
LeaderboardSaveData::_internal_mutable_fuze_mail_list() {
  return &_impl_.fuze_mail_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
LeaderboardSaveData::mutable_fuze_mail_list() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.LeaderboardSaveData.fuze_mail_list)
  return _internal_mutable_fuze_mail_list();
}

// -------------------------------------------------------------------

// SeptDemonDamageHistoryEntry

// int64 role_id = 1;
inline void SeptDemonDamageHistoryEntry::clear_role_id() {
  _impl_.role_id_ = int64_t{0};
}
inline int64_t SeptDemonDamageHistoryEntry::_internal_role_id() const {
  return _impl_.role_id_;
}
inline int64_t SeptDemonDamageHistoryEntry::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonDamageHistoryEntry.role_id)
  return _internal_role_id();
}
inline void SeptDemonDamageHistoryEntry::_internal_set_role_id(int64_t value) {
  
  _impl_.role_id_ = value;
}
inline void SeptDemonDamageHistoryEntry::set_role_id(int64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonDamageHistoryEntry.role_id)
}

// string role_name = 2;
inline void SeptDemonDamageHistoryEntry::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& SeptDemonDamageHistoryEntry::role_name() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonDamageHistoryEntry.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeptDemonDamageHistoryEntry::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonDamageHistoryEntry.role_name)
}
inline std::string* SeptDemonDamageHistoryEntry::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:idlepb.SeptDemonDamageHistoryEntry.role_name)
  return _s;
}
inline const std::string& SeptDemonDamageHistoryEntry::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void SeptDemonDamageHistoryEntry::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SeptDemonDamageHistoryEntry::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SeptDemonDamageHistoryEntry::release_role_name() {
  // @@protoc_insertion_point(field_release:idlepb.SeptDemonDamageHistoryEntry.role_name)
  return _impl_.role_name_.Release();
}
inline void SeptDemonDamageHistoryEntry::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.SeptDemonDamageHistoryEntry.role_name)
}

// float total_damage = 3;
inline void SeptDemonDamageHistoryEntry::clear_total_damage() {
  _impl_.total_damage_ = 0;
}
inline float SeptDemonDamageHistoryEntry::_internal_total_damage() const {
  return _impl_.total_damage_;
}
inline float SeptDemonDamageHistoryEntry::total_damage() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonDamageHistoryEntry.total_damage)
  return _internal_total_damage();
}
inline void SeptDemonDamageHistoryEntry::_internal_set_total_damage(float value) {
  
  _impl_.total_damage_ = value;
}
inline void SeptDemonDamageHistoryEntry::set_total_damage(float value) {
  _internal_set_total_damage(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonDamageHistoryEntry.total_damage)
}

// int32 rank = 4;
inline void SeptDemonDamageHistoryEntry::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t SeptDemonDamageHistoryEntry::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t SeptDemonDamageHistoryEntry::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonDamageHistoryEntry.rank)
  return _internal_rank();
}
inline void SeptDemonDamageHistoryEntry::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void SeptDemonDamageHistoryEntry::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.SeptDemonDamageHistoryEntry.rank)
}

// .idlepb.CharacterModelConfig role_model = 5;
inline bool SeptDemonDamageHistoryEntry::_internal_has_role_model() const {
  return this != internal_default_instance() && _impl_.role_model_ != nullptr;
}
inline bool SeptDemonDamageHistoryEntry::has_role_model() const {
  return _internal_has_role_model();
}
inline void SeptDemonDamageHistoryEntry::clear_role_model() {
  if (GetArenaForAllocation() == nullptr && _impl_.role_model_ != nullptr) {
    delete _impl_.role_model_;
  }
  _impl_.role_model_ = nullptr;
}
inline const ::idlepb::CharacterModelConfig& SeptDemonDamageHistoryEntry::_internal_role_model() const {
  const ::idlepb::CharacterModelConfig* p = _impl_.role_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CharacterModelConfig&>(
      ::idlepb::_CharacterModelConfig_default_instance_);
}
inline const ::idlepb::CharacterModelConfig& SeptDemonDamageHistoryEntry::role_model() const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonDamageHistoryEntry.role_model)
  return _internal_role_model();
}
inline void SeptDemonDamageHistoryEntry::unsafe_arena_set_allocated_role_model(
    ::idlepb::CharacterModelConfig* role_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.role_model_);
  }
  _impl_.role_model_ = role_model;
  if (role_model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.SeptDemonDamageHistoryEntry.role_model)
}
inline ::idlepb::CharacterModelConfig* SeptDemonDamageHistoryEntry::release_role_model() {
  
  ::idlepb::CharacterModelConfig* temp = _impl_.role_model_;
  _impl_.role_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CharacterModelConfig* SeptDemonDamageHistoryEntry::unsafe_arena_release_role_model() {
  // @@protoc_insertion_point(field_release:idlepb.SeptDemonDamageHistoryEntry.role_model)
  
  ::idlepb::CharacterModelConfig* temp = _impl_.role_model_;
  _impl_.role_model_ = nullptr;
  return temp;
}
inline ::idlepb::CharacterModelConfig* SeptDemonDamageHistoryEntry::_internal_mutable_role_model() {
  
  if (_impl_.role_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CharacterModelConfig>(GetArenaForAllocation());
    _impl_.role_model_ = p;
  }
  return _impl_.role_model_;
}
inline ::idlepb::CharacterModelConfig* SeptDemonDamageHistoryEntry::mutable_role_model() {
  ::idlepb::CharacterModelConfig* _msg = _internal_mutable_role_model();
  // @@protoc_insertion_point(field_mutable:idlepb.SeptDemonDamageHistoryEntry.role_model)
  return _msg;
}
inline void SeptDemonDamageHistoryEntry::set_allocated_role_model(::idlepb::CharacterModelConfig* role_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.role_model_;
  }
  if (role_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(role_model);
    if (message_arena != submessage_arena) {
      role_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_model, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.role_model_ = role_model;
  // @@protoc_insertion_point(field_set_allocated:idlepb.SeptDemonDamageHistoryEntry.role_model)
}

// -------------------------------------------------------------------

// SeptDemonDamageHistoryData

// repeated .idlepb.SeptDemonDamageHistoryEntry all_entries = 4;
inline int SeptDemonDamageHistoryData::_internal_all_entries_size() const {
  return _impl_.all_entries_.size();
}
inline int SeptDemonDamageHistoryData::all_entries_size() const {
  return _internal_all_entries_size();
}
inline void SeptDemonDamageHistoryData::clear_all_entries() {
  _impl_.all_entries_.Clear();
}
inline ::idlepb::SeptDemonDamageHistoryEntry* SeptDemonDamageHistoryData::mutable_all_entries(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.SeptDemonDamageHistoryData.all_entries)
  return _impl_.all_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptDemonDamageHistoryEntry >*
SeptDemonDamageHistoryData::mutable_all_entries() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.SeptDemonDamageHistoryData.all_entries)
  return &_impl_.all_entries_;
}
inline const ::idlepb::SeptDemonDamageHistoryEntry& SeptDemonDamageHistoryData::_internal_all_entries(int index) const {
  return _impl_.all_entries_.Get(index);
}
inline const ::idlepb::SeptDemonDamageHistoryEntry& SeptDemonDamageHistoryData::all_entries(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.SeptDemonDamageHistoryData.all_entries)
  return _internal_all_entries(index);
}
inline ::idlepb::SeptDemonDamageHistoryEntry* SeptDemonDamageHistoryData::_internal_add_all_entries() {
  return _impl_.all_entries_.Add();
}
inline ::idlepb::SeptDemonDamageHistoryEntry* SeptDemonDamageHistoryData::add_all_entries() {
  ::idlepb::SeptDemonDamageHistoryEntry* _add = _internal_add_all_entries();
  // @@protoc_insertion_point(field_add:idlepb.SeptDemonDamageHistoryData.all_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SeptDemonDamageHistoryEntry >&
SeptDemonDamageHistoryData::all_entries() const {
  // @@protoc_insertion_point(field_list:idlepb.SeptDemonDamageHistoryData.all_entries)
  return _impl_.all_entries_;
}

// -------------------------------------------------------------------

// SelfSeptInfo

// int64 sept_id = 1;
inline void SelfSeptInfo::clear_sept_id() {
  _impl_.sept_id_ = int64_t{0};
}
inline int64_t SelfSeptInfo::_internal_sept_id() const {
  return _impl_.sept_id_;
}
inline int64_t SelfSeptInfo::sept_id() const {
  // @@protoc_insertion_point(field_get:idlepb.SelfSeptInfo.sept_id)
  return _internal_sept_id();
}
inline void SelfSeptInfo::_internal_set_sept_id(int64_t value) {
  
  _impl_.sept_id_ = value;
}
inline void SelfSeptInfo::set_sept_id(int64_t value) {
  _internal_set_sept_id(value);
  // @@protoc_insertion_point(field_set:idlepb.SelfSeptInfo.sept_id)
}

// string sept_name = 2;
inline void SelfSeptInfo::clear_sept_name() {
  _impl_.sept_name_.ClearToEmpty();
}
inline const std::string& SelfSeptInfo::sept_name() const {
  // @@protoc_insertion_point(field_get:idlepb.SelfSeptInfo.sept_name)
  return _internal_sept_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelfSeptInfo::set_sept_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sept_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.SelfSeptInfo.sept_name)
}
inline std::string* SelfSeptInfo::mutable_sept_name() {
  std::string* _s = _internal_mutable_sept_name();
  // @@protoc_insertion_point(field_mutable:idlepb.SelfSeptInfo.sept_name)
  return _s;
}
inline const std::string& SelfSeptInfo::_internal_sept_name() const {
  return _impl_.sept_name_.Get();
}
inline void SelfSeptInfo::_internal_set_sept_name(const std::string& value) {
  
  _impl_.sept_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SelfSeptInfo::_internal_mutable_sept_name() {
  
  return _impl_.sept_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SelfSeptInfo::release_sept_name() {
  // @@protoc_insertion_point(field_release:idlepb.SelfSeptInfo.sept_name)
  return _impl_.sept_name_.Release();
}
inline void SelfSeptInfo::set_allocated_sept_name(std::string* sept_name) {
  if (sept_name != nullptr) {
    
  } else {
    
  }
  _impl_.sept_name_.SetAllocated(sept_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sept_name_.IsDefault()) {
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.SelfSeptInfo.sept_name)
}

// .idlepb.SeptPosition sept_position = 3;
inline void SelfSeptInfo::clear_sept_position() {
  _impl_.sept_position_ = 0;
}
inline ::idlepb::SeptPosition SelfSeptInfo::_internal_sept_position() const {
  return static_cast< ::idlepb::SeptPosition >(_impl_.sept_position_);
}
inline ::idlepb::SeptPosition SelfSeptInfo::sept_position() const {
  // @@protoc_insertion_point(field_get:idlepb.SelfSeptInfo.sept_position)
  return _internal_sept_position();
}
inline void SelfSeptInfo::_internal_set_sept_position(::idlepb::SeptPosition value) {
  
  _impl_.sept_position_ = value;
}
inline void SelfSeptInfo::set_sept_position(::idlepb::SeptPosition value) {
  _internal_set_sept_position(value);
  // @@protoc_insertion_point(field_set:idlepb.SelfSeptInfo.sept_position)
}

// int64 next_join_ticks = 4;
inline void SelfSeptInfo::clear_next_join_ticks() {
  _impl_.next_join_ticks_ = int64_t{0};
}
inline int64_t SelfSeptInfo::_internal_next_join_ticks() const {
  return _impl_.next_join_ticks_;
}
inline int64_t SelfSeptInfo::next_join_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.SelfSeptInfo.next_join_ticks)
  return _internal_next_join_ticks();
}
inline void SelfSeptInfo::_internal_set_next_join_ticks(int64_t value) {
  
  _impl_.next_join_ticks_ = value;
}
inline void SelfSeptInfo::set_next_join_ticks(int64_t value) {
  _internal_set_next_join_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.SelfSeptInfo.next_join_ticks)
}

// bool land_fighting = 5;
inline void SelfSeptInfo::clear_land_fighting() {
  _impl_.land_fighting_ = false;
}
inline bool SelfSeptInfo::_internal_land_fighting() const {
  return _impl_.land_fighting_;
}
inline bool SelfSeptInfo::land_fighting() const {
  // @@protoc_insertion_point(field_get:idlepb.SelfSeptInfo.land_fighting)
  return _internal_land_fighting();
}
inline void SelfSeptInfo::_internal_set_land_fighting(bool value) {
  
  _impl_.land_fighting_ = value;
}
inline void SelfSeptInfo::set_land_fighting(bool value) {
  _internal_set_land_fighting(value);
  // @@protoc_insertion_point(field_set:idlepb.SelfSeptInfo.land_fighting)
}

// -------------------------------------------------------------------

// CreatePlayerParams

// int64 role_id = 1;
inline void CreatePlayerParams::clear_role_id() {
  _impl_.role_id_ = int64_t{0};
}
inline int64_t CreatePlayerParams::_internal_role_id() const {
  return _impl_.role_id_;
}
inline int64_t CreatePlayerParams::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.role_id)
  return _internal_role_id();
}
inline void CreatePlayerParams::_internal_set_role_id(int64_t value) {
  
  _impl_.role_id_ = value;
}
inline void CreatePlayerParams::set_role_id(int64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.CreatePlayerParams.role_id)
}

// string role_name = 2;
inline void CreatePlayerParams::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& CreatePlayerParams::role_name() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePlayerParams::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.CreatePlayerParams.role_name)
}
inline std::string* CreatePlayerParams::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:idlepb.CreatePlayerParams.role_name)
  return _s;
}
inline const std::string& CreatePlayerParams::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void CreatePlayerParams::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePlayerParams::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePlayerParams::release_role_name() {
  // @@protoc_insertion_point(field_release:idlepb.CreatePlayerParams.role_name)
  return _impl_.role_name_.Release();
}
inline void CreatePlayerParams::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.CreatePlayerParams.role_name)
}

// .idlepb.RankData physics_rank_data = 3;
inline bool CreatePlayerParams::_internal_has_physics_rank_data() const {
  return this != internal_default_instance() && _impl_.physics_rank_data_ != nullptr;
}
inline bool CreatePlayerParams::has_physics_rank_data() const {
  return _internal_has_physics_rank_data();
}
inline void CreatePlayerParams::clear_physics_rank_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.physics_rank_data_ != nullptr) {
    delete _impl_.physics_rank_data_;
  }
  _impl_.physics_rank_data_ = nullptr;
}
inline const ::idlepb::RankData& CreatePlayerParams::_internal_physics_rank_data() const {
  const ::idlepb::RankData* p = _impl_.physics_rank_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RankData&>(
      ::idlepb::_RankData_default_instance_);
}
inline const ::idlepb::RankData& CreatePlayerParams::physics_rank_data() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.physics_rank_data)
  return _internal_physics_rank_data();
}
inline void CreatePlayerParams::unsafe_arena_set_allocated_physics_rank_data(
    ::idlepb::RankData* physics_rank_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physics_rank_data_);
  }
  _impl_.physics_rank_data_ = physics_rank_data;
  if (physics_rank_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.CreatePlayerParams.physics_rank_data)
}
inline ::idlepb::RankData* CreatePlayerParams::release_physics_rank_data() {
  
  ::idlepb::RankData* temp = _impl_.physics_rank_data_;
  _impl_.physics_rank_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RankData* CreatePlayerParams::unsafe_arena_release_physics_rank_data() {
  // @@protoc_insertion_point(field_release:idlepb.CreatePlayerParams.physics_rank_data)
  
  ::idlepb::RankData* temp = _impl_.physics_rank_data_;
  _impl_.physics_rank_data_ = nullptr;
  return temp;
}
inline ::idlepb::RankData* CreatePlayerParams::_internal_mutable_physics_rank_data() {
  
  if (_impl_.physics_rank_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RankData>(GetArenaForAllocation());
    _impl_.physics_rank_data_ = p;
  }
  return _impl_.physics_rank_data_;
}
inline ::idlepb::RankData* CreatePlayerParams::mutable_physics_rank_data() {
  ::idlepb::RankData* _msg = _internal_mutable_physics_rank_data();
  // @@protoc_insertion_point(field_mutable:idlepb.CreatePlayerParams.physics_rank_data)
  return _msg;
}
inline void CreatePlayerParams::set_allocated_physics_rank_data(::idlepb::RankData* physics_rank_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.physics_rank_data_;
  }
  if (physics_rank_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physics_rank_data);
    if (message_arena != submessage_arena) {
      physics_rank_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physics_rank_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physics_rank_data_ = physics_rank_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.CreatePlayerParams.physics_rank_data)
}

// .idlepb.RankData magic_rank_data = 4;
inline bool CreatePlayerParams::_internal_has_magic_rank_data() const {
  return this != internal_default_instance() && _impl_.magic_rank_data_ != nullptr;
}
inline bool CreatePlayerParams::has_magic_rank_data() const {
  return _internal_has_magic_rank_data();
}
inline void CreatePlayerParams::clear_magic_rank_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.magic_rank_data_ != nullptr) {
    delete _impl_.magic_rank_data_;
  }
  _impl_.magic_rank_data_ = nullptr;
}
inline const ::idlepb::RankData& CreatePlayerParams::_internal_magic_rank_data() const {
  const ::idlepb::RankData* p = _impl_.magic_rank_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RankData&>(
      ::idlepb::_RankData_default_instance_);
}
inline const ::idlepb::RankData& CreatePlayerParams::magic_rank_data() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.magic_rank_data)
  return _internal_magic_rank_data();
}
inline void CreatePlayerParams::unsafe_arena_set_allocated_magic_rank_data(
    ::idlepb::RankData* magic_rank_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.magic_rank_data_);
  }
  _impl_.magic_rank_data_ = magic_rank_data;
  if (magic_rank_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.CreatePlayerParams.magic_rank_data)
}
inline ::idlepb::RankData* CreatePlayerParams::release_magic_rank_data() {
  
  ::idlepb::RankData* temp = _impl_.magic_rank_data_;
  _impl_.magic_rank_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RankData* CreatePlayerParams::unsafe_arena_release_magic_rank_data() {
  // @@protoc_insertion_point(field_release:idlepb.CreatePlayerParams.magic_rank_data)
  
  ::idlepb::RankData* temp = _impl_.magic_rank_data_;
  _impl_.magic_rank_data_ = nullptr;
  return temp;
}
inline ::idlepb::RankData* CreatePlayerParams::_internal_mutable_magic_rank_data() {
  
  if (_impl_.magic_rank_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RankData>(GetArenaForAllocation());
    _impl_.magic_rank_data_ = p;
  }
  return _impl_.magic_rank_data_;
}
inline ::idlepb::RankData* CreatePlayerParams::mutable_magic_rank_data() {
  ::idlepb::RankData* _msg = _internal_mutable_magic_rank_data();
  // @@protoc_insertion_point(field_mutable:idlepb.CreatePlayerParams.magic_rank_data)
  return _msg;
}
inline void CreatePlayerParams::set_allocated_magic_rank_data(::idlepb::RankData* magic_rank_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.magic_rank_data_;
  }
  if (magic_rank_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(magic_rank_data);
    if (message_arena != submessage_arena) {
      magic_rank_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, magic_rank_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.magic_rank_data_ = magic_rank_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.CreatePlayerParams.magic_rank_data)
}

// .idlepb.CharacterModelConfig model_config = 5;
inline bool CreatePlayerParams::_internal_has_model_config() const {
  return this != internal_default_instance() && _impl_.model_config_ != nullptr;
}
inline bool CreatePlayerParams::has_model_config() const {
  return _internal_has_model_config();
}
inline void CreatePlayerParams::clear_model_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_config_ != nullptr) {
    delete _impl_.model_config_;
  }
  _impl_.model_config_ = nullptr;
}
inline const ::idlepb::CharacterModelConfig& CreatePlayerParams::_internal_model_config() const {
  const ::idlepb::CharacterModelConfig* p = _impl_.model_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CharacterModelConfig&>(
      ::idlepb::_CharacterModelConfig_default_instance_);
}
inline const ::idlepb::CharacterModelConfig& CreatePlayerParams::model_config() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.model_config)
  return _internal_model_config();
}
inline void CreatePlayerParams::unsafe_arena_set_allocated_model_config(
    ::idlepb::CharacterModelConfig* model_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_config_);
  }
  _impl_.model_config_ = model_config;
  if (model_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.CreatePlayerParams.model_config)
}
inline ::idlepb::CharacterModelConfig* CreatePlayerParams::release_model_config() {
  
  ::idlepb::CharacterModelConfig* temp = _impl_.model_config_;
  _impl_.model_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CharacterModelConfig* CreatePlayerParams::unsafe_arena_release_model_config() {
  // @@protoc_insertion_point(field_release:idlepb.CreatePlayerParams.model_config)
  
  ::idlepb::CharacterModelConfig* temp = _impl_.model_config_;
  _impl_.model_config_ = nullptr;
  return temp;
}
inline ::idlepb::CharacterModelConfig* CreatePlayerParams::_internal_mutable_model_config() {
  
  if (_impl_.model_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CharacterModelConfig>(GetArenaForAllocation());
    _impl_.model_config_ = p;
  }
  return _impl_.model_config_;
}
inline ::idlepb::CharacterModelConfig* CreatePlayerParams::mutable_model_config() {
  ::idlepb::CharacterModelConfig* _msg = _internal_mutable_model_config();
  // @@protoc_insertion_point(field_mutable:idlepb.CreatePlayerParams.model_config)
  return _msg;
}
inline void CreatePlayerParams::set_allocated_model_config(::idlepb::CharacterModelConfig* model_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.model_config_;
  }
  if (model_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(model_config);
    if (message_arena != submessage_arena) {
      model_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.model_config_ = model_config;
  // @@protoc_insertion_point(field_set_allocated:idlepb.CreatePlayerParams.model_config)
}

// .idlepb.PlayerAbilityData ability_data = 12;
inline bool CreatePlayerParams::_internal_has_ability_data() const {
  return this != internal_default_instance() && _impl_.ability_data_ != nullptr;
}
inline bool CreatePlayerParams::has_ability_data() const {
  return _internal_has_ability_data();
}
inline void CreatePlayerParams::clear_ability_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.ability_data_ != nullptr) {
    delete _impl_.ability_data_;
  }
  _impl_.ability_data_ = nullptr;
}
inline const ::idlepb::PlayerAbilityData& CreatePlayerParams::_internal_ability_data() const {
  const ::idlepb::PlayerAbilityData* p = _impl_.ability_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerAbilityData&>(
      ::idlepb::_PlayerAbilityData_default_instance_);
}
inline const ::idlepb::PlayerAbilityData& CreatePlayerParams::ability_data() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.ability_data)
  return _internal_ability_data();
}
inline void CreatePlayerParams::unsafe_arena_set_allocated_ability_data(
    ::idlepb::PlayerAbilityData* ability_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ability_data_);
  }
  _impl_.ability_data_ = ability_data;
  if (ability_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.CreatePlayerParams.ability_data)
}
inline ::idlepb::PlayerAbilityData* CreatePlayerParams::release_ability_data() {
  
  ::idlepb::PlayerAbilityData* temp = _impl_.ability_data_;
  _impl_.ability_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerAbilityData* CreatePlayerParams::unsafe_arena_release_ability_data() {
  // @@protoc_insertion_point(field_release:idlepb.CreatePlayerParams.ability_data)
  
  ::idlepb::PlayerAbilityData* temp = _impl_.ability_data_;
  _impl_.ability_data_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerAbilityData* CreatePlayerParams::_internal_mutable_ability_data() {
  
  if (_impl_.ability_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerAbilityData>(GetArenaForAllocation());
    _impl_.ability_data_ = p;
  }
  return _impl_.ability_data_;
}
inline ::idlepb::PlayerAbilityData* CreatePlayerParams::mutable_ability_data() {
  ::idlepb::PlayerAbilityData* _msg = _internal_mutable_ability_data();
  // @@protoc_insertion_point(field_mutable:idlepb.CreatePlayerParams.ability_data)
  return _msg;
}
inline void CreatePlayerParams::set_allocated_ability_data(::idlepb::PlayerAbilityData* ability_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ability_data_;
  }
  if (ability_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ability_data);
    if (message_arena != submessage_arena) {
      ability_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ability_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ability_data_ = ability_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.CreatePlayerParams.ability_data)
}

// .idlepb.FightMode fight_mode = 13;
inline void CreatePlayerParams::clear_fight_mode() {
  _impl_.fight_mode_ = 0;
}
inline ::idlepb::FightMode CreatePlayerParams::_internal_fight_mode() const {
  return static_cast< ::idlepb::FightMode >(_impl_.fight_mode_);
}
inline ::idlepb::FightMode CreatePlayerParams::fight_mode() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.fight_mode)
  return _internal_fight_mode();
}
inline void CreatePlayerParams::_internal_set_fight_mode(::idlepb::FightMode value) {
  
  _impl_.fight_mode_ = value;
}
inline void CreatePlayerParams::set_fight_mode(::idlepb::FightMode value) {
  _internal_set_fight_mode(value);
  // @@protoc_insertion_point(field_set:idlepb.CreatePlayerParams.fight_mode)
}

// bool is_dummy = 14;
inline void CreatePlayerParams::clear_is_dummy() {
  _impl_.is_dummy_ = false;
}
inline bool CreatePlayerParams::_internal_is_dummy() const {
  return _impl_.is_dummy_;
}
inline bool CreatePlayerParams::is_dummy() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.is_dummy)
  return _internal_is_dummy();
}
inline void CreatePlayerParams::_internal_set_is_dummy(bool value) {
  
  _impl_.is_dummy_ = value;
}
inline void CreatePlayerParams::set_is_dummy(bool value) {
  _internal_set_is_dummy(value);
  // @@protoc_insertion_point(field_set:idlepb.CreatePlayerParams.is_dummy)
}

// .idlepb.RoleNormalSettings normal_settings = 15;
inline bool CreatePlayerParams::_internal_has_normal_settings() const {
  return this != internal_default_instance() && _impl_.normal_settings_ != nullptr;
}
inline bool CreatePlayerParams::has_normal_settings() const {
  return _internal_has_normal_settings();
}
inline void CreatePlayerParams::clear_normal_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.normal_settings_ != nullptr) {
    delete _impl_.normal_settings_;
  }
  _impl_.normal_settings_ = nullptr;
}
inline const ::idlepb::RoleNormalSettings& CreatePlayerParams::_internal_normal_settings() const {
  const ::idlepb::RoleNormalSettings* p = _impl_.normal_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::RoleNormalSettings&>(
      ::idlepb::_RoleNormalSettings_default_instance_);
}
inline const ::idlepb::RoleNormalSettings& CreatePlayerParams::normal_settings() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.normal_settings)
  return _internal_normal_settings();
}
inline void CreatePlayerParams::unsafe_arena_set_allocated_normal_settings(
    ::idlepb::RoleNormalSettings* normal_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normal_settings_);
  }
  _impl_.normal_settings_ = normal_settings;
  if (normal_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.CreatePlayerParams.normal_settings)
}
inline ::idlepb::RoleNormalSettings* CreatePlayerParams::release_normal_settings() {
  
  ::idlepb::RoleNormalSettings* temp = _impl_.normal_settings_;
  _impl_.normal_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::RoleNormalSettings* CreatePlayerParams::unsafe_arena_release_normal_settings() {
  // @@protoc_insertion_point(field_release:idlepb.CreatePlayerParams.normal_settings)
  
  ::idlepb::RoleNormalSettings* temp = _impl_.normal_settings_;
  _impl_.normal_settings_ = nullptr;
  return temp;
}
inline ::idlepb::RoleNormalSettings* CreatePlayerParams::_internal_mutable_normal_settings() {
  
  if (_impl_.normal_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::RoleNormalSettings>(GetArenaForAllocation());
    _impl_.normal_settings_ = p;
  }
  return _impl_.normal_settings_;
}
inline ::idlepb::RoleNormalSettings* CreatePlayerParams::mutable_normal_settings() {
  ::idlepb::RoleNormalSettings* _msg = _internal_mutable_normal_settings();
  // @@protoc_insertion_point(field_mutable:idlepb.CreatePlayerParams.normal_settings)
  return _msg;
}
inline void CreatePlayerParams::set_allocated_normal_settings(::idlepb::RoleNormalSettings* normal_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.normal_settings_;
  }
  if (normal_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(normal_settings);
    if (message_arena != submessage_arena) {
      normal_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.normal_settings_ = normal_settings;
  // @@protoc_insertion_point(field_set_allocated:idlepb.CreatePlayerParams.normal_settings)
}

// .idlepb.SelfSeptInfo self_sept_info = 16;
inline bool CreatePlayerParams::_internal_has_self_sept_info() const {
  return this != internal_default_instance() && _impl_.self_sept_info_ != nullptr;
}
inline bool CreatePlayerParams::has_self_sept_info() const {
  return _internal_has_self_sept_info();
}
inline void CreatePlayerParams::clear_self_sept_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.self_sept_info_ != nullptr) {
    delete _impl_.self_sept_info_;
  }
  _impl_.self_sept_info_ = nullptr;
}
inline const ::idlepb::SelfSeptInfo& CreatePlayerParams::_internal_self_sept_info() const {
  const ::idlepb::SelfSeptInfo* p = _impl_.self_sept_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::SelfSeptInfo&>(
      ::idlepb::_SelfSeptInfo_default_instance_);
}
inline const ::idlepb::SelfSeptInfo& CreatePlayerParams::self_sept_info() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.self_sept_info)
  return _internal_self_sept_info();
}
inline void CreatePlayerParams::unsafe_arena_set_allocated_self_sept_info(
    ::idlepb::SelfSeptInfo* self_sept_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.self_sept_info_);
  }
  _impl_.self_sept_info_ = self_sept_info;
  if (self_sept_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.CreatePlayerParams.self_sept_info)
}
inline ::idlepb::SelfSeptInfo* CreatePlayerParams::release_self_sept_info() {
  
  ::idlepb::SelfSeptInfo* temp = _impl_.self_sept_info_;
  _impl_.self_sept_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::SelfSeptInfo* CreatePlayerParams::unsafe_arena_release_self_sept_info() {
  // @@protoc_insertion_point(field_release:idlepb.CreatePlayerParams.self_sept_info)
  
  ::idlepb::SelfSeptInfo* temp = _impl_.self_sept_info_;
  _impl_.self_sept_info_ = nullptr;
  return temp;
}
inline ::idlepb::SelfSeptInfo* CreatePlayerParams::_internal_mutable_self_sept_info() {
  
  if (_impl_.self_sept_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::SelfSeptInfo>(GetArenaForAllocation());
    _impl_.self_sept_info_ = p;
  }
  return _impl_.self_sept_info_;
}
inline ::idlepb::SelfSeptInfo* CreatePlayerParams::mutable_self_sept_info() {
  ::idlepb::SelfSeptInfo* _msg = _internal_mutable_self_sept_info();
  // @@protoc_insertion_point(field_mutable:idlepb.CreatePlayerParams.self_sept_info)
  return _msg;
}
inline void CreatePlayerParams::set_allocated_self_sept_info(::idlepb::SelfSeptInfo* self_sept_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.self_sept_info_;
  }
  if (self_sept_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(self_sept_info);
    if (message_arena != submessage_arena) {
      self_sept_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self_sept_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.self_sept_info_ = self_sept_info;
  // @@protoc_insertion_point(field_set_allocated:idlepb.CreatePlayerParams.self_sept_info)
}

// int64 combat_power = 17;
inline void CreatePlayerParams::clear_combat_power() {
  _impl_.combat_power_ = int64_t{0};
}
inline int64_t CreatePlayerParams::_internal_combat_power() const {
  return _impl_.combat_power_;
}
inline int64_t CreatePlayerParams::combat_power() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.combat_power)
  return _internal_combat_power();
}
inline void CreatePlayerParams::_internal_set_combat_power(int64_t value) {
  
  _impl_.combat_power_ = value;
}
inline void CreatePlayerParams::set_combat_power(int64_t value) {
  _internal_set_combat_power(value);
  // @@protoc_insertion_point(field_set:idlepb.CreatePlayerParams.combat_power)
}

// .idlepb.GameStatsAllModuleData all_stats_data = 20;
inline bool CreatePlayerParams::_internal_has_all_stats_data() const {
  return this != internal_default_instance() && _impl_.all_stats_data_ != nullptr;
}
inline bool CreatePlayerParams::has_all_stats_data() const {
  return _internal_has_all_stats_data();
}
inline void CreatePlayerParams::clear_all_stats_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.all_stats_data_ != nullptr) {
    delete _impl_.all_stats_data_;
  }
  _impl_.all_stats_data_ = nullptr;
}
inline const ::idlepb::GameStatsAllModuleData& CreatePlayerParams::_internal_all_stats_data() const {
  const ::idlepb::GameStatsAllModuleData* p = _impl_.all_stats_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::GameStatsAllModuleData&>(
      ::idlepb::_GameStatsAllModuleData_default_instance_);
}
inline const ::idlepb::GameStatsAllModuleData& CreatePlayerParams::all_stats_data() const {
  // @@protoc_insertion_point(field_get:idlepb.CreatePlayerParams.all_stats_data)
  return _internal_all_stats_data();
}
inline void CreatePlayerParams::unsafe_arena_set_allocated_all_stats_data(
    ::idlepb::GameStatsAllModuleData* all_stats_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.all_stats_data_);
  }
  _impl_.all_stats_data_ = all_stats_data;
  if (all_stats_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.CreatePlayerParams.all_stats_data)
}
inline ::idlepb::GameStatsAllModuleData* CreatePlayerParams::release_all_stats_data() {
  
  ::idlepb::GameStatsAllModuleData* temp = _impl_.all_stats_data_;
  _impl_.all_stats_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::GameStatsAllModuleData* CreatePlayerParams::unsafe_arena_release_all_stats_data() {
  // @@protoc_insertion_point(field_release:idlepb.CreatePlayerParams.all_stats_data)
  
  ::idlepb::GameStatsAllModuleData* temp = _impl_.all_stats_data_;
  _impl_.all_stats_data_ = nullptr;
  return temp;
}
inline ::idlepb::GameStatsAllModuleData* CreatePlayerParams::_internal_mutable_all_stats_data() {
  
  if (_impl_.all_stats_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::GameStatsAllModuleData>(GetArenaForAllocation());
    _impl_.all_stats_data_ = p;
  }
  return _impl_.all_stats_data_;
}
inline ::idlepb::GameStatsAllModuleData* CreatePlayerParams::mutable_all_stats_data() {
  ::idlepb::GameStatsAllModuleData* _msg = _internal_mutable_all_stats_data();
  // @@protoc_insertion_point(field_mutable:idlepb.CreatePlayerParams.all_stats_data)
  return _msg;
}
inline void CreatePlayerParams::set_allocated_all_stats_data(::idlepb::GameStatsAllModuleData* all_stats_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.all_stats_data_;
  }
  if (all_stats_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(all_stats_data);
    if (message_arena != submessage_arena) {
      all_stats_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_stats_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.all_stats_data_ = all_stats_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.CreatePlayerParams.all_stats_data)
}

// -------------------------------------------------------------------

// WorldRuntimeData

// uint64 world_id = 1;
inline void WorldRuntimeData::clear_world_id() {
  _impl_.world_id_ = uint64_t{0u};
}
inline uint64_t WorldRuntimeData::_internal_world_id() const {
  return _impl_.world_id_;
}
inline uint64_t WorldRuntimeData::world_id() const {
  // @@protoc_insertion_point(field_get:idlepb.WorldRuntimeData.world_id)
  return _internal_world_id();
}
inline void WorldRuntimeData::_internal_set_world_id(uint64_t value) {
  
  _impl_.world_id_ = value;
}
inline void WorldRuntimeData::set_world_id(uint64_t value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:idlepb.WorldRuntimeData.world_id)
}

// float world_seconds = 2;
inline void WorldRuntimeData::clear_world_seconds() {
  _impl_.world_seconds_ = 0;
}
inline float WorldRuntimeData::_internal_world_seconds() const {
  return _impl_.world_seconds_;
}
inline float WorldRuntimeData::world_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.WorldRuntimeData.world_seconds)
  return _internal_world_seconds();
}
inline void WorldRuntimeData::_internal_set_world_seconds(float value) {
  
  _impl_.world_seconds_ = value;
}
inline void WorldRuntimeData::set_world_seconds(float value) {
  _internal_set_world_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.WorldRuntimeData.world_seconds)
}

// float time_dilation = 3;
inline void WorldRuntimeData::clear_time_dilation() {
  _impl_.time_dilation_ = 0;
}
inline float WorldRuntimeData::_internal_time_dilation() const {
  return _impl_.time_dilation_;
}
inline float WorldRuntimeData::time_dilation() const {
  // @@protoc_insertion_point(field_get:idlepb.WorldRuntimeData.time_dilation)
  return _internal_time_dilation();
}
inline void WorldRuntimeData::_internal_set_time_dilation(float value) {
  
  _impl_.time_dilation_ = value;
}
inline void WorldRuntimeData::set_time_dilation(float value) {
  _internal_set_time_dilation(value);
  // @@protoc_insertion_point(field_set:idlepb.WorldRuntimeData.time_dilation)
}

// -------------------------------------------------------------------

// NotifyGiftPackageResult

// repeated .idlepb.SimpleItemData items = 1;
inline int NotifyGiftPackageResult::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int NotifyGiftPackageResult::items_size() const {
  return _internal_items_size();
}
inline void NotifyGiftPackageResult::clear_items() {
  _impl_.items_.Clear();
}
inline ::idlepb::SimpleItemData* NotifyGiftPackageResult::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.NotifyGiftPackageResult.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >*
NotifyGiftPackageResult::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.NotifyGiftPackageResult.items)
  return &_impl_.items_;
}
inline const ::idlepb::SimpleItemData& NotifyGiftPackageResult::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::idlepb::SimpleItemData& NotifyGiftPackageResult::items(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.NotifyGiftPackageResult.items)
  return _internal_items(index);
}
inline ::idlepb::SimpleItemData* NotifyGiftPackageResult::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::idlepb::SimpleItemData* NotifyGiftPackageResult::add_items() {
  ::idlepb::SimpleItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:idlepb.NotifyGiftPackageResult.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SimpleItemData >&
NotifyGiftPackageResult::items() const {
  // @@protoc_insertion_point(field_list:idlepb.NotifyGiftPackageResult.items)
  return _impl_.items_;
}

// int32 gift_item_id = 2;
inline void NotifyGiftPackageResult::clear_gift_item_id() {
  _impl_.gift_item_id_ = 0;
}
inline int32_t NotifyGiftPackageResult::_internal_gift_item_id() const {
  return _impl_.gift_item_id_;
}
inline int32_t NotifyGiftPackageResult::gift_item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.NotifyGiftPackageResult.gift_item_id)
  return _internal_gift_item_id();
}
inline void NotifyGiftPackageResult::_internal_set_gift_item_id(int32_t value) {
  
  _impl_.gift_item_id_ = value;
}
inline void NotifyGiftPackageResult::set_gift_item_id(int32_t value) {
  _internal_set_gift_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.NotifyGiftPackageResult.gift_item_id)
}

// repeated int32 config_id = 6;
inline int NotifyGiftPackageResult::_internal_config_id_size() const {
  return _impl_.config_id_.size();
}
inline int NotifyGiftPackageResult::config_id_size() const {
  return _internal_config_id_size();
}
inline void NotifyGiftPackageResult::clear_config_id() {
  _impl_.config_id_.Clear();
}
inline int32_t NotifyGiftPackageResult::_internal_config_id(int index) const {
  return _impl_.config_id_.Get(index);
}
inline int32_t NotifyGiftPackageResult::config_id(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.NotifyGiftPackageResult.config_id)
  return _internal_config_id(index);
}
inline void NotifyGiftPackageResult::set_config_id(int index, int32_t value) {
  _impl_.config_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.NotifyGiftPackageResult.config_id)
}
inline void NotifyGiftPackageResult::_internal_add_config_id(int32_t value) {
  _impl_.config_id_.Add(value);
}
inline void NotifyGiftPackageResult::add_config_id(int32_t value) {
  _internal_add_config_id(value);
  // @@protoc_insertion_point(field_add:idlepb.NotifyGiftPackageResult.config_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NotifyGiftPackageResult::_internal_config_id() const {
  return _impl_.config_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NotifyGiftPackageResult::config_id() const {
  // @@protoc_insertion_point(field_list:idlepb.NotifyGiftPackageResult.config_id)
  return _internal_config_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NotifyGiftPackageResult::_internal_mutable_config_id() {
  return &_impl_.config_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NotifyGiftPackageResult::mutable_config_id() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.NotifyGiftPackageResult.config_id)
  return _internal_mutable_config_id();
}

// -------------------------------------------------------------------

// NotifyUsePillProperty

// int32 item_id = 1;
inline void NotifyUsePillProperty::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t NotifyUsePillProperty::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t NotifyUsePillProperty::item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.NotifyUsePillProperty.item_id)
  return _internal_item_id();
}
inline void NotifyUsePillProperty::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void NotifyUsePillProperty::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.NotifyUsePillProperty.item_id)
}

// int32 num = 2;
inline void NotifyUsePillProperty::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t NotifyUsePillProperty::_internal_num() const {
  return _impl_.num_;
}
inline int32_t NotifyUsePillProperty::num() const {
  // @@protoc_insertion_point(field_get:idlepb.NotifyUsePillProperty.num)
  return _internal_num();
}
inline void NotifyUsePillProperty::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void NotifyUsePillProperty::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.NotifyUsePillProperty.num)
}

// int32 property_type = 3;
inline void NotifyUsePillProperty::clear_property_type() {
  _impl_.property_type_ = 0;
}
inline int32_t NotifyUsePillProperty::_internal_property_type() const {
  return _impl_.property_type_;
}
inline int32_t NotifyUsePillProperty::property_type() const {
  // @@protoc_insertion_point(field_get:idlepb.NotifyUsePillProperty.property_type)
  return _internal_property_type();
}
inline void NotifyUsePillProperty::_internal_set_property_type(int32_t value) {
  
  _impl_.property_type_ = value;
}
inline void NotifyUsePillProperty::set_property_type(int32_t value) {
  _internal_set_property_type(value);
  // @@protoc_insertion_point(field_set:idlepb.NotifyUsePillProperty.property_type)
}

// float property_num = 4;
inline void NotifyUsePillProperty::clear_property_num() {
  _impl_.property_num_ = 0;
}
inline float NotifyUsePillProperty::_internal_property_num() const {
  return _impl_.property_num_;
}
inline float NotifyUsePillProperty::property_num() const {
  // @@protoc_insertion_point(field_get:idlepb.NotifyUsePillProperty.property_num)
  return _internal_property_num();
}
inline void NotifyUsePillProperty::_internal_set_property_num(float value) {
  
  _impl_.property_num_ = value;
}
inline void NotifyUsePillProperty::set_property_num(float value) {
  _internal_set_property_num(value);
  // @@protoc_insertion_point(field_set:idlepb.NotifyUsePillProperty.property_num)
}

// -------------------------------------------------------------------

// EntityCultivationDirData

// .idlepb.CultivationDirection dir = 1;
inline void EntityCultivationDirData::clear_dir() {
  _impl_.dir_ = 0;
}
inline ::idlepb::CultivationDirection EntityCultivationDirData::_internal_dir() const {
  return static_cast< ::idlepb::CultivationDirection >(_impl_.dir_);
}
inline ::idlepb::CultivationDirection EntityCultivationDirData::dir() const {
  // @@protoc_insertion_point(field_get:idlepb.EntityCultivationDirData.dir)
  return _internal_dir();
}
inline void EntityCultivationDirData::_internal_set_dir(::idlepb::CultivationDirection value) {
  
  _impl_.dir_ = value;
}
inline void EntityCultivationDirData::set_dir(::idlepb::CultivationDirection value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:idlepb.EntityCultivationDirData.dir)
}

// int32 rank = 2;
inline void EntityCultivationDirData::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t EntityCultivationDirData::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t EntityCultivationDirData::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.EntityCultivationDirData.rank)
  return _internal_rank();
}
inline void EntityCultivationDirData::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void EntityCultivationDirData::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.EntityCultivationDirData.rank)
}

// int32 layer = 3;
inline void EntityCultivationDirData::clear_layer() {
  _impl_.layer_ = 0;
}
inline int32_t EntityCultivationDirData::_internal_layer() const {
  return _impl_.layer_;
}
inline int32_t EntityCultivationDirData::layer() const {
  // @@protoc_insertion_point(field_get:idlepb.EntityCultivationDirData.layer)
  return _internal_layer();
}
inline void EntityCultivationDirData::_internal_set_layer(int32_t value) {
  
  _impl_.layer_ = value;
}
inline void EntityCultivationDirData::set_layer(int32_t value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:idlepb.EntityCultivationDirData.layer)
}

// int32 stage = 4;
inline void EntityCultivationDirData::clear_stage() {
  _impl_.stage_ = 0;
}
inline int32_t EntityCultivationDirData::_internal_stage() const {
  return _impl_.stage_;
}
inline int32_t EntityCultivationDirData::stage() const {
  // @@protoc_insertion_point(field_get:idlepb.EntityCultivationDirData.stage)
  return _internal_stage();
}
inline void EntityCultivationDirData::_internal_set_stage(int32_t value) {
  
  _impl_.stage_ = value;
}
inline void EntityCultivationDirData::set_stage(int32_t value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:idlepb.EntityCultivationDirData.stage)
}

// int32 degree = 5;
inline void EntityCultivationDirData::clear_degree() {
  _impl_.degree_ = 0;
}
inline int32_t EntityCultivationDirData::_internal_degree() const {
  return _impl_.degree_;
}
inline int32_t EntityCultivationDirData::degree() const {
  // @@protoc_insertion_point(field_get:idlepb.EntityCultivationDirData.degree)
  return _internal_degree();
}
inline void EntityCultivationDirData::_internal_set_degree(int32_t value) {
  
  _impl_.degree_ = value;
}
inline void EntityCultivationDirData::set_degree(int32_t value) {
  _internal_set_degree(value);
  // @@protoc_insertion_point(field_set:idlepb.EntityCultivationDirData.degree)
}

// -------------------------------------------------------------------

// EntityCultivationData

// .idlepb.EntityCultivationDirData major = 1;
inline bool EntityCultivationData::_internal_has_major() const {
  return this != internal_default_instance() && _impl_.major_ != nullptr;
}
inline bool EntityCultivationData::has_major() const {
  return _internal_has_major();
}
inline void EntityCultivationData::clear_major() {
  if (GetArenaForAllocation() == nullptr && _impl_.major_ != nullptr) {
    delete _impl_.major_;
  }
  _impl_.major_ = nullptr;
}
inline const ::idlepb::EntityCultivationDirData& EntityCultivationData::_internal_major() const {
  const ::idlepb::EntityCultivationDirData* p = _impl_.major_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::EntityCultivationDirData&>(
      ::idlepb::_EntityCultivationDirData_default_instance_);
}
inline const ::idlepb::EntityCultivationDirData& EntityCultivationData::major() const {
  // @@protoc_insertion_point(field_get:idlepb.EntityCultivationData.major)
  return _internal_major();
}
inline void EntityCultivationData::unsafe_arena_set_allocated_major(
    ::idlepb::EntityCultivationDirData* major) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.major_);
  }
  _impl_.major_ = major;
  if (major) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.EntityCultivationData.major)
}
inline ::idlepb::EntityCultivationDirData* EntityCultivationData::release_major() {
  
  ::idlepb::EntityCultivationDirData* temp = _impl_.major_;
  _impl_.major_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::EntityCultivationDirData* EntityCultivationData::unsafe_arena_release_major() {
  // @@protoc_insertion_point(field_release:idlepb.EntityCultivationData.major)
  
  ::idlepb::EntityCultivationDirData* temp = _impl_.major_;
  _impl_.major_ = nullptr;
  return temp;
}
inline ::idlepb::EntityCultivationDirData* EntityCultivationData::_internal_mutable_major() {
  
  if (_impl_.major_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::EntityCultivationDirData>(GetArenaForAllocation());
    _impl_.major_ = p;
  }
  return _impl_.major_;
}
inline ::idlepb::EntityCultivationDirData* EntityCultivationData::mutable_major() {
  ::idlepb::EntityCultivationDirData* _msg = _internal_mutable_major();
  // @@protoc_insertion_point(field_mutable:idlepb.EntityCultivationData.major)
  return _msg;
}
inline void EntityCultivationData::set_allocated_major(::idlepb::EntityCultivationDirData* major) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.major_;
  }
  if (major) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(major);
    if (message_arena != submessage_arena) {
      major = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, major, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.major_ = major;
  // @@protoc_insertion_point(field_set_allocated:idlepb.EntityCultivationData.major)
}

// .idlepb.EntityCultivationDirData minor = 2;
inline bool EntityCultivationData::_internal_has_minor() const {
  return this != internal_default_instance() && _impl_.minor_ != nullptr;
}
inline bool EntityCultivationData::has_minor() const {
  return _internal_has_minor();
}
inline void EntityCultivationData::clear_minor() {
  if (GetArenaForAllocation() == nullptr && _impl_.minor_ != nullptr) {
    delete _impl_.minor_;
  }
  _impl_.minor_ = nullptr;
}
inline const ::idlepb::EntityCultivationDirData& EntityCultivationData::_internal_minor() const {
  const ::idlepb::EntityCultivationDirData* p = _impl_.minor_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::EntityCultivationDirData&>(
      ::idlepb::_EntityCultivationDirData_default_instance_);
}
inline const ::idlepb::EntityCultivationDirData& EntityCultivationData::minor() const {
  // @@protoc_insertion_point(field_get:idlepb.EntityCultivationData.minor)
  return _internal_minor();
}
inline void EntityCultivationData::unsafe_arena_set_allocated_minor(
    ::idlepb::EntityCultivationDirData* minor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.minor_);
  }
  _impl_.minor_ = minor;
  if (minor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.EntityCultivationData.minor)
}
inline ::idlepb::EntityCultivationDirData* EntityCultivationData::release_minor() {
  
  ::idlepb::EntityCultivationDirData* temp = _impl_.minor_;
  _impl_.minor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::EntityCultivationDirData* EntityCultivationData::unsafe_arena_release_minor() {
  // @@protoc_insertion_point(field_release:idlepb.EntityCultivationData.minor)
  
  ::idlepb::EntityCultivationDirData* temp = _impl_.minor_;
  _impl_.minor_ = nullptr;
  return temp;
}
inline ::idlepb::EntityCultivationDirData* EntityCultivationData::_internal_mutable_minor() {
  
  if (_impl_.minor_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::EntityCultivationDirData>(GetArenaForAllocation());
    _impl_.minor_ = p;
  }
  return _impl_.minor_;
}
inline ::idlepb::EntityCultivationDirData* EntityCultivationData::mutable_minor() {
  ::idlepb::EntityCultivationDirData* _msg = _internal_mutable_minor();
  // @@protoc_insertion_point(field_mutable:idlepb.EntityCultivationData.minor)
  return _msg;
}
inline void EntityCultivationData::set_allocated_minor(::idlepb::EntityCultivationDirData* minor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.minor_;
  }
  if (minor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(minor);
    if (message_arena != submessage_arena) {
      minor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.minor_ = minor;
  // @@protoc_insertion_point(field_set_allocated:idlepb.EntityCultivationData.minor)
}

// -------------------------------------------------------------------

// SwordPkTopListEntry

// int64 role_id = 1;
inline void SwordPkTopListEntry::clear_role_id() {
  _impl_.role_id_ = int64_t{0};
}
inline int64_t SwordPkTopListEntry::_internal_role_id() const {
  return _impl_.role_id_;
}
inline int64_t SwordPkTopListEntry::role_id() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkTopListEntry.role_id)
  return _internal_role_id();
}
inline void SwordPkTopListEntry::_internal_set_role_id(int64_t value) {
  
  _impl_.role_id_ = value;
}
inline void SwordPkTopListEntry::set_role_id(int64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:idlepb.SwordPkTopListEntry.role_id)
}

// string role_name = 2;
inline void SwordPkTopListEntry::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& SwordPkTopListEntry::role_name() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkTopListEntry.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwordPkTopListEntry::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.SwordPkTopListEntry.role_name)
}
inline std::string* SwordPkTopListEntry::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:idlepb.SwordPkTopListEntry.role_name)
  return _s;
}
inline const std::string& SwordPkTopListEntry::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void SwordPkTopListEntry::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SwordPkTopListEntry::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SwordPkTopListEntry::release_role_name() {
  // @@protoc_insertion_point(field_release:idlepb.SwordPkTopListEntry.role_name)
  return _impl_.role_name_.Release();
}
inline void SwordPkTopListEntry::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.SwordPkTopListEntry.role_name)
}

// .idlepb.CharacterModelConfig role_model = 3;
inline bool SwordPkTopListEntry::_internal_has_role_model() const {
  return this != internal_default_instance() && _impl_.role_model_ != nullptr;
}
inline bool SwordPkTopListEntry::has_role_model() const {
  return _internal_has_role_model();
}
inline void SwordPkTopListEntry::clear_role_model() {
  if (GetArenaForAllocation() == nullptr && _impl_.role_model_ != nullptr) {
    delete _impl_.role_model_;
  }
  _impl_.role_model_ = nullptr;
}
inline const ::idlepb::CharacterModelConfig& SwordPkTopListEntry::_internal_role_model() const {
  const ::idlepb::CharacterModelConfig* p = _impl_.role_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CharacterModelConfig&>(
      ::idlepb::_CharacterModelConfig_default_instance_);
}
inline const ::idlepb::CharacterModelConfig& SwordPkTopListEntry::role_model() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkTopListEntry.role_model)
  return _internal_role_model();
}
inline void SwordPkTopListEntry::unsafe_arena_set_allocated_role_model(
    ::idlepb::CharacterModelConfig* role_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.role_model_);
  }
  _impl_.role_model_ = role_model;
  if (role_model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.SwordPkTopListEntry.role_model)
}
inline ::idlepb::CharacterModelConfig* SwordPkTopListEntry::release_role_model() {
  
  ::idlepb::CharacterModelConfig* temp = _impl_.role_model_;
  _impl_.role_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CharacterModelConfig* SwordPkTopListEntry::unsafe_arena_release_role_model() {
  // @@protoc_insertion_point(field_release:idlepb.SwordPkTopListEntry.role_model)
  
  ::idlepb::CharacterModelConfig* temp = _impl_.role_model_;
  _impl_.role_model_ = nullptr;
  return temp;
}
inline ::idlepb::CharacterModelConfig* SwordPkTopListEntry::_internal_mutable_role_model() {
  
  if (_impl_.role_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CharacterModelConfig>(GetArenaForAllocation());
    _impl_.role_model_ = p;
  }
  return _impl_.role_model_;
}
inline ::idlepb::CharacterModelConfig* SwordPkTopListEntry::mutable_role_model() {
  ::idlepb::CharacterModelConfig* _msg = _internal_mutable_role_model();
  // @@protoc_insertion_point(field_mutable:idlepb.SwordPkTopListEntry.role_model)
  return _msg;
}
inline void SwordPkTopListEntry::set_allocated_role_model(::idlepb::CharacterModelConfig* role_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.role_model_;
  }
  if (role_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(role_model);
    if (message_arena != submessage_arena) {
      role_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_model, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.role_model_ = role_model;
  // @@protoc_insertion_point(field_set_allocated:idlepb.SwordPkTopListEntry.role_model)
}

// int32 score = 4;
inline void SwordPkTopListEntry::clear_score() {
  _impl_.score_ = 0;
}
inline int32_t SwordPkTopListEntry::_internal_score() const {
  return _impl_.score_;
}
inline int32_t SwordPkTopListEntry::score() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkTopListEntry.score)
  return _internal_score();
}
inline void SwordPkTopListEntry::_internal_set_score(int32_t value) {
  
  _impl_.score_ = value;
}
inline void SwordPkTopListEntry::set_score(int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:idlepb.SwordPkTopListEntry.score)
}

// int64 score_update_ticks = 5;
inline void SwordPkTopListEntry::clear_score_update_ticks() {
  _impl_.score_update_ticks_ = int64_t{0};
}
inline int64_t SwordPkTopListEntry::_internal_score_update_ticks() const {
  return _impl_.score_update_ticks_;
}
inline int64_t SwordPkTopListEntry::score_update_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkTopListEntry.score_update_ticks)
  return _internal_score_update_ticks();
}
inline void SwordPkTopListEntry::_internal_set_score_update_ticks(int64_t value) {
  
  _impl_.score_update_ticks_ = value;
}
inline void SwordPkTopListEntry::set_score_update_ticks(int64_t value) {
  _internal_set_score_update_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.SwordPkTopListEntry.score_update_ticks)
}

// int32 rank = 6;
inline void SwordPkTopListEntry::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t SwordPkTopListEntry::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t SwordPkTopListEntry::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkTopListEntry.rank)
  return _internal_rank();
}
inline void SwordPkTopListEntry::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void SwordPkTopListEntry::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.SwordPkTopListEntry.rank)
}

// int64 combat_power = 7;
inline void SwordPkTopListEntry::clear_combat_power() {
  _impl_.combat_power_ = int64_t{0};
}
inline int64_t SwordPkTopListEntry::_internal_combat_power() const {
  return _impl_.combat_power_;
}
inline int64_t SwordPkTopListEntry::combat_power() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkTopListEntry.combat_power)
  return _internal_combat_power();
}
inline void SwordPkTopListEntry::_internal_set_combat_power(int64_t value) {
  
  _impl_.combat_power_ = value;
}
inline void SwordPkTopListEntry::set_combat_power(int64_t value) {
  _internal_set_combat_power(value);
  // @@protoc_insertion_point(field_set:idlepb.SwordPkTopListEntry.combat_power)
}

// -------------------------------------------------------------------

// SwordPkGlobalSaveData

// int32 round_num = 1;
inline void SwordPkGlobalSaveData::clear_round_num() {
  _impl_.round_num_ = 0;
}
inline int32_t SwordPkGlobalSaveData::_internal_round_num() const {
  return _impl_.round_num_;
}
inline int32_t SwordPkGlobalSaveData::round_num() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkGlobalSaveData.round_num)
  return _internal_round_num();
}
inline void SwordPkGlobalSaveData::_internal_set_round_num(int32_t value) {
  
  _impl_.round_num_ = value;
}
inline void SwordPkGlobalSaveData::set_round_num(int32_t value) {
  _internal_set_round_num(value);
  // @@protoc_insertion_point(field_set:idlepb.SwordPkGlobalSaveData.round_num)
}

// int64 begin_local_ticks = 2;
inline void SwordPkGlobalSaveData::clear_begin_local_ticks() {
  _impl_.begin_local_ticks_ = int64_t{0};
}
inline int64_t SwordPkGlobalSaveData::_internal_begin_local_ticks() const {
  return _impl_.begin_local_ticks_;
}
inline int64_t SwordPkGlobalSaveData::begin_local_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkGlobalSaveData.begin_local_ticks)
  return _internal_begin_local_ticks();
}
inline void SwordPkGlobalSaveData::_internal_set_begin_local_ticks(int64_t value) {
  
  _impl_.begin_local_ticks_ = value;
}
inline void SwordPkGlobalSaveData::set_begin_local_ticks(int64_t value) {
  _internal_set_begin_local_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.SwordPkGlobalSaveData.begin_local_ticks)
}

// int64 end_local_ticks = 3;
inline void SwordPkGlobalSaveData::clear_end_local_ticks() {
  _impl_.end_local_ticks_ = int64_t{0};
}
inline int64_t SwordPkGlobalSaveData::_internal_end_local_ticks() const {
  return _impl_.end_local_ticks_;
}
inline int64_t SwordPkGlobalSaveData::end_local_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkGlobalSaveData.end_local_ticks)
  return _internal_end_local_ticks();
}
inline void SwordPkGlobalSaveData::_internal_set_end_local_ticks(int64_t value) {
  
  _impl_.end_local_ticks_ = value;
}
inline void SwordPkGlobalSaveData::set_end_local_ticks(int64_t value) {
  _internal_set_end_local_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.SwordPkGlobalSaveData.end_local_ticks)
}

// bool is_over = 4;
inline void SwordPkGlobalSaveData::clear_is_over() {
  _impl_.is_over_ = false;
}
inline bool SwordPkGlobalSaveData::_internal_is_over() const {
  return _impl_.is_over_;
}
inline bool SwordPkGlobalSaveData::is_over() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkGlobalSaveData.is_over)
  return _internal_is_over();
}
inline void SwordPkGlobalSaveData::_internal_set_is_over(bool value) {
  
  _impl_.is_over_ = value;
}
inline void SwordPkGlobalSaveData::set_is_over(bool value) {
  _internal_set_is_over(value);
  // @@protoc_insertion_point(field_set:idlepb.SwordPkGlobalSaveData.is_over)
}

// int64 next_daily_reward_local_ticks = 5;
inline void SwordPkGlobalSaveData::clear_next_daily_reward_local_ticks() {
  _impl_.next_daily_reward_local_ticks_ = int64_t{0};
}
inline int64_t SwordPkGlobalSaveData::_internal_next_daily_reward_local_ticks() const {
  return _impl_.next_daily_reward_local_ticks_;
}
inline int64_t SwordPkGlobalSaveData::next_daily_reward_local_ticks() const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkGlobalSaveData.next_daily_reward_local_ticks)
  return _internal_next_daily_reward_local_ticks();
}
inline void SwordPkGlobalSaveData::_internal_set_next_daily_reward_local_ticks(int64_t value) {
  
  _impl_.next_daily_reward_local_ticks_ = value;
}
inline void SwordPkGlobalSaveData::set_next_daily_reward_local_ticks(int64_t value) {
  _internal_set_next_daily_reward_local_ticks(value);
  // @@protoc_insertion_point(field_set:idlepb.SwordPkGlobalSaveData.next_daily_reward_local_ticks)
}

// repeated .idlepb.SwordPkTopListEntry top_list = 6;
inline int SwordPkGlobalSaveData::_internal_top_list_size() const {
  return _impl_.top_list_.size();
}
inline int SwordPkGlobalSaveData::top_list_size() const {
  return _internal_top_list_size();
}
inline void SwordPkGlobalSaveData::clear_top_list() {
  _impl_.top_list_.Clear();
}
inline ::idlepb::SwordPkTopListEntry* SwordPkGlobalSaveData::mutable_top_list(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.SwordPkGlobalSaveData.top_list)
  return _impl_.top_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SwordPkTopListEntry >*
SwordPkGlobalSaveData::mutable_top_list() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.SwordPkGlobalSaveData.top_list)
  return &_impl_.top_list_;
}
inline const ::idlepb::SwordPkTopListEntry& SwordPkGlobalSaveData::_internal_top_list(int index) const {
  return _impl_.top_list_.Get(index);
}
inline const ::idlepb::SwordPkTopListEntry& SwordPkGlobalSaveData::top_list(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.SwordPkGlobalSaveData.top_list)
  return _internal_top_list(index);
}
inline ::idlepb::SwordPkTopListEntry* SwordPkGlobalSaveData::_internal_add_top_list() {
  return _impl_.top_list_.Add();
}
inline ::idlepb::SwordPkTopListEntry* SwordPkGlobalSaveData::add_top_list() {
  ::idlepb::SwordPkTopListEntry* _add = _internal_add_top_list();
  // @@protoc_insertion_point(field_add:idlepb.SwordPkGlobalSaveData.top_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::SwordPkTopListEntry >&
SwordPkGlobalSaveData::top_list() const {
  // @@protoc_insertion_point(field_list:idlepb.SwordPkGlobalSaveData.top_list)
  return _impl_.top_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idlepb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::idlepb::ReplicationTargetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::ReplicationTargetType>() {
  return ::idlepb::ReplicationTargetType_descriptor();
}
template <> struct is_proto_enum< ::idlepb::SystemNoticeStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::SystemNoticeStyle>() {
  return ::idlepb::SystemNoticeStyle_descriptor();
}
template <> struct is_proto_enum< ::idlepb::SystemNoticeId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::SystemNoticeId>() {
  return ::idlepb::SystemNoticeId_descriptor();
}
template <> struct is_proto_enum< ::idlepb::RoleDailyCounterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::RoleDailyCounterType>() {
  return ::idlepb::RoleDailyCounterType_descriptor();
}
template <> struct is_proto_enum< ::idlepb::RoleWeeklyCounterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::RoleWeeklyCounterType>() {
  return ::idlepb::RoleWeeklyCounterType_descriptor();
}
template <> struct is_proto_enum< ::idlepb::AbilityActiveErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::AbilityActiveErrorCode>() {
  return ::idlepb::AbilityActiveErrorCode_descriptor();
}
template <> struct is_proto_enum< ::idlepb::FriendRelationshipType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::FriendRelationshipType>() {
  return ::idlepb::FriendRelationshipType_descriptor();
}
template <> struct is_proto_enum< ::idlepb::LoginGameRetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::LoginGameRetCode>() {
  return ::idlepb::LoginGameRetCode_descriptor();
}
template <> struct is_proto_enum< ::idlepb::GotoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::GotoType>() {
  return ::idlepb::GotoType_descriptor();
}
template <> struct is_proto_enum< ::idlepb::TravelWorldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::TravelWorldType>() {
  return ::idlepb::TravelWorldType_descriptor();
}
template <> struct is_proto_enum< ::idlepb::BiographyEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::BiographyEventType>() {
  return ::idlepb::BiographyEventType_descriptor();
}
template <> struct is_proto_enum< ::idlepb::RoleDirtyFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::RoleDirtyFlag>() {
  return ::idlepb::RoleDirtyFlag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
