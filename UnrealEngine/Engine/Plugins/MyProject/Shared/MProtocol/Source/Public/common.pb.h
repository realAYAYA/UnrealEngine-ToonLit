// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "defines.pb.h"
#include "net.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto MPROTOCOL_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct MPROTOCOL_API TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
MPROTOCOL_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace idlepb {
class Int32Int64Pair;
struct Int32Int64PairDefaultTypeInternal;
MPROTOCOL_API extern Int32Int64PairDefaultTypeInternal _Int32Int64Pair_default_instance_;
class Int32Pair;
struct Int32PairDefaultTypeInternal;
MPROTOCOL_API extern Int32PairDefaultTypeInternal _Int32Pair_default_instance_;
class Int64Pair;
struct Int64PairDefaultTypeInternal;
MPROTOCOL_API extern Int64PairDefaultTypeInternal _Int64Pair_default_instance_;
class PlayerData;
struct PlayerDataDefaultTypeInternal;
MPROTOCOL_API extern PlayerDataDefaultTypeInternal _PlayerData_default_instance_;
class PlayerSaveData;
struct PlayerSaveDataDefaultTypeInternal;
MPROTOCOL_API extern PlayerSaveDataDefaultTypeInternal _PlayerSaveData_default_instance_;
class StringInt32Pair;
struct StringInt32PairDefaultTypeInternal;
MPROTOCOL_API extern StringInt32PairDefaultTypeInternal _StringInt32Pair_default_instance_;
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
template<> MPROTOCOL_API ::idlepb::Int32Int64Pair* Arena::CreateMaybeMessage<::idlepb::Int32Int64Pair>(Arena*);
template<> MPROTOCOL_API ::idlepb::Int32Pair* Arena::CreateMaybeMessage<::idlepb::Int32Pair>(Arena*);
template<> MPROTOCOL_API ::idlepb::Int64Pair* Arena::CreateMaybeMessage<::idlepb::Int64Pair>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerData* Arena::CreateMaybeMessage<::idlepb::PlayerData>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerSaveData* Arena::CreateMaybeMessage<::idlepb::PlayerSaveData>(Arena*);
template<> MPROTOCOL_API ::idlepb::StringInt32Pair* Arena::CreateMaybeMessage<::idlepb::StringInt32Pair>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace idlepb {

enum ReplicatedLevelType : int {
  RLT_Local = 0,
  RLT_Offical = 1,
  RLT_Private = 2,
  ReplicatedLevelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ReplicatedLevelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool ReplicatedLevelType_IsValid(int value);
constexpr ReplicatedLevelType ReplicatedLevelType_MIN = RLT_Local;
constexpr ReplicatedLevelType ReplicatedLevelType_MAX = RLT_Private;
constexpr int ReplicatedLevelType_ARRAYSIZE = ReplicatedLevelType_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReplicatedLevelType_descriptor();
template<typename T>
inline const std::string& ReplicatedLevelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReplicatedLevelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReplicatedLevelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReplicatedLevelType_descriptor(), enum_t_value);
}
inline bool ReplicatedLevelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReplicatedLevelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReplicatedLevelType>(
    ReplicatedLevelType_descriptor(), name, value);
}
enum SystemNoticeStyle : int {
  SystemNoticeStyle_None = 0,
  SystemNoticeStyle_Dialog = 1,
  SystemNoticeStyle_ScreenCenter = 2,
  SystemNoticeStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SystemNoticeStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool SystemNoticeStyle_IsValid(int value);
constexpr SystemNoticeStyle SystemNoticeStyle_MIN = SystemNoticeStyle_None;
constexpr SystemNoticeStyle SystemNoticeStyle_MAX = SystemNoticeStyle_ScreenCenter;
constexpr int SystemNoticeStyle_ARRAYSIZE = SystemNoticeStyle_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemNoticeStyle_descriptor();
template<typename T>
inline const std::string& SystemNoticeStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemNoticeStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemNoticeStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemNoticeStyle_descriptor(), enum_t_value);
}
inline bool SystemNoticeStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SystemNoticeStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemNoticeStyle>(
    SystemNoticeStyle_descriptor(), name, value);
}
enum SystemNoticeType : int {
  SNT = 0,
  SNT_AddItem = 7,
  SystemNoticeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SystemNoticeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool SystemNoticeType_IsValid(int value);
constexpr SystemNoticeType SystemNoticeType_MIN = SNT;
constexpr SystemNoticeType SystemNoticeType_MAX = SNT_AddItem;
constexpr int SystemNoticeType_ARRAYSIZE = SystemNoticeType_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemNoticeType_descriptor();
template<typename T>
inline const std::string& SystemNoticeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemNoticeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemNoticeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemNoticeType_descriptor(), enum_t_value);
}
inline bool SystemNoticeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SystemNoticeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemNoticeType>(
    SystemNoticeType_descriptor(), name, value);
}
// ===================================================================

class MPROTOCOL_API Int64Pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.Int64Pair) */ {
 public:
  inline Int64Pair() : Int64Pair(nullptr) {}
  ~Int64Pair() override;
  explicit PROTOBUF_CONSTEXPR Int64Pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Pair(const Int64Pair& from);
  Int64Pair(Int64Pair&& from) noexcept
    : Int64Pair() {
    *this = ::std::move(from);
  }

  inline Int64Pair& operator=(const Int64Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Pair& operator=(Int64Pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64Pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Pair* internal_default_instance() {
    return reinterpret_cast<const Int64Pair*>(
               &_Int64Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Int64Pair& a, Int64Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int64Pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Int64Pair& from) {
    Int64Pair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64Pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.Int64Pair";
  }
  protected:
  explicit Int64Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV1FieldNumber = 1,
    kV2FieldNumber = 2,
  };
  // int64 v1 = 1;
  void clear_v1();
  int64_t v1() const;
  void set_v1(int64_t value);
  private:
  int64_t _internal_v1() const;
  void _internal_set_v1(int64_t value);
  public:

  // int64 v2 = 2;
  void clear_v2();
  int64_t v2() const;
  void set_v2(int64_t value);
  private:
  int64_t _internal_v2() const;
  void _internal_set_v2(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.Int64Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t v1_;
    int64_t v2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API Int32Pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.Int32Pair) */ {
 public:
  inline Int32Pair() : Int32Pair(nullptr) {}
  ~Int32Pair() override;
  explicit PROTOBUF_CONSTEXPR Int32Pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int32Pair(const Int32Pair& from);
  Int32Pair(Int32Pair&& from) noexcept
    : Int32Pair() {
    *this = ::std::move(from);
  }

  inline Int32Pair& operator=(const Int32Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Pair& operator=(Int32Pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int32Pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int32Pair* internal_default_instance() {
    return reinterpret_cast<const Int32Pair*>(
               &_Int32Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Int32Pair& a, Int32Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int32Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int32Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int32Pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int32Pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Int32Pair& from) {
    Int32Pair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int32Pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.Int32Pair";
  }
  protected:
  explicit Int32Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV1FieldNumber = 1,
    kV2FieldNumber = 2,
  };
  // int64 v1 = 1;
  void clear_v1();
  int64_t v1() const;
  void set_v1(int64_t value);
  private:
  int64_t _internal_v1() const;
  void _internal_set_v1(int64_t value);
  public:

  // int64 v2 = 2;
  void clear_v2();
  int64_t v2() const;
  void set_v2(int64_t value);
  private:
  int64_t _internal_v2() const;
  void _internal_set_v2(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.Int32Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t v1_;
    int64_t v2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API StringInt32Pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.StringInt32Pair) */ {
 public:
  inline StringInt32Pair() : StringInt32Pair(nullptr) {}
  ~StringInt32Pair() override;
  explicit PROTOBUF_CONSTEXPR StringInt32Pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringInt32Pair(const StringInt32Pair& from);
  StringInt32Pair(StringInt32Pair&& from) noexcept
    : StringInt32Pair() {
    *this = ::std::move(from);
  }

  inline StringInt32Pair& operator=(const StringInt32Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringInt32Pair& operator=(StringInt32Pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringInt32Pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringInt32Pair* internal_default_instance() {
    return reinterpret_cast<const StringInt32Pair*>(
               &_StringInt32Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StringInt32Pair& a, StringInt32Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(StringInt32Pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringInt32Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringInt32Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringInt32Pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringInt32Pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringInt32Pair& from) {
    StringInt32Pair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringInt32Pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.StringInt32Pair";
  }
  protected:
  explicit StringInt32Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string str = 1;
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.StringInt32Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API Int32Int64Pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.Int32Int64Pair) */ {
 public:
  inline Int32Int64Pair() : Int32Int64Pair(nullptr) {}
  ~Int32Int64Pair() override;
  explicit PROTOBUF_CONSTEXPR Int32Int64Pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int32Int64Pair(const Int32Int64Pair& from);
  Int32Int64Pair(Int32Int64Pair&& from) noexcept
    : Int32Int64Pair() {
    *this = ::std::move(from);
  }

  inline Int32Int64Pair& operator=(const Int32Int64Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Int64Pair& operator=(Int32Int64Pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int32Int64Pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int32Int64Pair* internal_default_instance() {
    return reinterpret_cast<const Int32Int64Pair*>(
               &_Int32Int64Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Int32Int64Pair& a, Int32Int64Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Int64Pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int32Int64Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int32Int64Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int32Int64Pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int32Int64Pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Int32Int64Pair& from) {
    Int32Int64Pair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int32Int64Pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.Int32Int64Pair";
  }
  protected:
  explicit Int32Int64Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV64FieldNumber = 2,
    kV32FieldNumber = 1,
  };
  // int64 v64 = 2;
  void clear_v64();
  int64_t v64() const;
  void set_v64(int64_t value);
  private:
  int64_t _internal_v64() const;
  void _internal_set_v64(int64_t value);
  public:

  // int32 v32 = 1;
  void clear_v32();
  int32_t v32() const;
  void set_v32(int32_t value);
  private:
  int32_t _internal_v32() const;
  void _internal_set_v32(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.Int32Int64Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t v64_;
    int32_t v32_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerData) */ {
 public:
  inline PlayerData() : PlayerData(nullptr) {}
  ~PlayerData() override;
  explicit PROTOBUF_CONSTEXPR PlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerData(const PlayerData& from);
  PlayerData(PlayerData&& from) noexcept
    : PlayerData() {
    *this = ::std::move(from);
  }

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerData& operator=(PlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerData* internal_default_instance() {
    return reinterpret_cast<const PlayerData*>(
               &_PlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerData& a, PlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerData& from) {
    PlayerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerData";
  }
  protected:
  explicit PlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kLastOnlineDateFieldNumber = 4,
    kCreateDateFieldNumber = 5,
  };
  // string player_name = 3;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // int64 player_id = 1;
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // int64 last_online_date = 4;
  void clear_last_online_date();
  int64_t last_online_date() const;
  void set_last_online_date(int64_t value);
  private:
  int64_t _internal_last_online_date() const;
  void _internal_set_last_online_date(int64_t value);
  public:

  // int64 create_date = 5;
  void clear_create_date();
  int64_t create_date() const;
  void set_create_date(int64_t value);
  private:
  int64_t _internal_create_date() const;
  void _internal_set_create_date(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    int64_t player_id_;
    int64_t last_online_date_;
    int64_t create_date_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerSaveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerSaveData) */ {
 public:
  inline PlayerSaveData() : PlayerSaveData(nullptr) {}
  ~PlayerSaveData() override;
  explicit PROTOBUF_CONSTEXPR PlayerSaveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerSaveData(const PlayerSaveData& from);
  PlayerSaveData(PlayerSaveData&& from) noexcept
    : PlayerSaveData() {
    *this = ::std::move(from);
  }

  inline PlayerSaveData& operator=(const PlayerSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSaveData& operator=(PlayerSaveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerSaveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerSaveData* internal_default_instance() {
    return reinterpret_cast<const PlayerSaveData*>(
               &_PlayerSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerSaveData& a, PlayerSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSaveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerSaveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerSaveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerSaveData& from) {
    PlayerSaveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSaveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerSaveData";
  }
  protected:
  explicit PlayerSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 1,
  };
  // .idlepb.PlayerData player_data = 1;
  bool has_player_data() const;
  private:
  bool _internal_has_player_data() const;
  public:
  void clear_player_data();
  const ::idlepb::PlayerData& player_data() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerData* release_player_data();
  ::idlepb::PlayerData* mutable_player_data();
  void set_allocated_player_data(::idlepb::PlayerData* player_data);
  private:
  const ::idlepb::PlayerData& _internal_player_data() const;
  ::idlepb::PlayerData* _internal_mutable_player_data();
  public:
  void unsafe_arena_set_allocated_player_data(
      ::idlepb::PlayerData* player_data);
  ::idlepb::PlayerData* unsafe_arena_release_player_data();

  // @@protoc_insertion_point(class_scope:idlepb.PlayerSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::PlayerData* player_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Int64Pair

// int64 v1 = 1;
inline void Int64Pair::clear_v1() {
  _impl_.v1_ = int64_t{0};
}
inline int64_t Int64Pair::_internal_v1() const {
  return _impl_.v1_;
}
inline int64_t Int64Pair::v1() const {
  // @@protoc_insertion_point(field_get:idlepb.Int64Pair.v1)
  return _internal_v1();
}
inline void Int64Pair::_internal_set_v1(int64_t value) {
  
  _impl_.v1_ = value;
}
inline void Int64Pair::set_v1(int64_t value) {
  _internal_set_v1(value);
  // @@protoc_insertion_point(field_set:idlepb.Int64Pair.v1)
}

// int64 v2 = 2;
inline void Int64Pair::clear_v2() {
  _impl_.v2_ = int64_t{0};
}
inline int64_t Int64Pair::_internal_v2() const {
  return _impl_.v2_;
}
inline int64_t Int64Pair::v2() const {
  // @@protoc_insertion_point(field_get:idlepb.Int64Pair.v2)
  return _internal_v2();
}
inline void Int64Pair::_internal_set_v2(int64_t value) {
  
  _impl_.v2_ = value;
}
inline void Int64Pair::set_v2(int64_t value) {
  _internal_set_v2(value);
  // @@protoc_insertion_point(field_set:idlepb.Int64Pair.v2)
}

// -------------------------------------------------------------------

// Int32Pair

// int64 v1 = 1;
inline void Int32Pair::clear_v1() {
  _impl_.v1_ = int64_t{0};
}
inline int64_t Int32Pair::_internal_v1() const {
  return _impl_.v1_;
}
inline int64_t Int32Pair::v1() const {
  // @@protoc_insertion_point(field_get:idlepb.Int32Pair.v1)
  return _internal_v1();
}
inline void Int32Pair::_internal_set_v1(int64_t value) {
  
  _impl_.v1_ = value;
}
inline void Int32Pair::set_v1(int64_t value) {
  _internal_set_v1(value);
  // @@protoc_insertion_point(field_set:idlepb.Int32Pair.v1)
}

// int64 v2 = 2;
inline void Int32Pair::clear_v2() {
  _impl_.v2_ = int64_t{0};
}
inline int64_t Int32Pair::_internal_v2() const {
  return _impl_.v2_;
}
inline int64_t Int32Pair::v2() const {
  // @@protoc_insertion_point(field_get:idlepb.Int32Pair.v2)
  return _internal_v2();
}
inline void Int32Pair::_internal_set_v2(int64_t value) {
  
  _impl_.v2_ = value;
}
inline void Int32Pair::set_v2(int64_t value) {
  _internal_set_v2(value);
  // @@protoc_insertion_point(field_set:idlepb.Int32Pair.v2)
}

// -------------------------------------------------------------------

// StringInt32Pair

// string str = 1;
inline void StringInt32Pair::clear_str() {
  _impl_.str_.ClearToEmpty();
}
inline const std::string& StringInt32Pair::str() const {
  // @@protoc_insertion_point(field_get:idlepb.StringInt32Pair.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringInt32Pair::set_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.StringInt32Pair.str)
}
inline std::string* StringInt32Pair::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:idlepb.StringInt32Pair.str)
  return _s;
}
inline const std::string& StringInt32Pair::_internal_str() const {
  return _impl_.str_.Get();
}
inline void StringInt32Pair::_internal_set_str(const std::string& value) {
  
  _impl_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* StringInt32Pair::_internal_mutable_str() {
  
  return _impl_.str_.Mutable(GetArenaForAllocation());
}
inline std::string* StringInt32Pair::release_str() {
  // @@protoc_insertion_point(field_release:idlepb.StringInt32Pair.str)
  return _impl_.str_.Release();
}
inline void StringInt32Pair::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  _impl_.str_.SetAllocated(str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_.IsDefault()) {
    _impl_.str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.StringInt32Pair.str)
}

// int32 value = 2;
inline void StringInt32Pair::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t StringInt32Pair::_internal_value() const {
  return _impl_.value_;
}
inline int32_t StringInt32Pair::value() const {
  // @@protoc_insertion_point(field_get:idlepb.StringInt32Pair.value)
  return _internal_value();
}
inline void StringInt32Pair::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void StringInt32Pair::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idlepb.StringInt32Pair.value)
}

// -------------------------------------------------------------------

// Int32Int64Pair

// int32 v32 = 1;
inline void Int32Int64Pair::clear_v32() {
  _impl_.v32_ = 0;
}
inline int32_t Int32Int64Pair::_internal_v32() const {
  return _impl_.v32_;
}
inline int32_t Int32Int64Pair::v32() const {
  // @@protoc_insertion_point(field_get:idlepb.Int32Int64Pair.v32)
  return _internal_v32();
}
inline void Int32Int64Pair::_internal_set_v32(int32_t value) {
  
  _impl_.v32_ = value;
}
inline void Int32Int64Pair::set_v32(int32_t value) {
  _internal_set_v32(value);
  // @@protoc_insertion_point(field_set:idlepb.Int32Int64Pair.v32)
}

// int64 v64 = 2;
inline void Int32Int64Pair::clear_v64() {
  _impl_.v64_ = int64_t{0};
}
inline int64_t Int32Int64Pair::_internal_v64() const {
  return _impl_.v64_;
}
inline int64_t Int32Int64Pair::v64() const {
  // @@protoc_insertion_point(field_get:idlepb.Int32Int64Pair.v64)
  return _internal_v64();
}
inline void Int32Int64Pair::_internal_set_v64(int64_t value) {
  
  _impl_.v64_ = value;
}
inline void Int32Int64Pair::set_v64(int64_t value) {
  _internal_set_v64(value);
  // @@protoc_insertion_point(field_set:idlepb.Int32Int64Pair.v64)
}

// -------------------------------------------------------------------

// PlayerData

// int64 player_id = 1;
inline void PlayerData::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
}
inline int64_t PlayerData::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t PlayerData::player_id() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerData.player_id)
  return _internal_player_id();
}
inline void PlayerData::_internal_set_player_id(int64_t value) {
  
  _impl_.player_id_ = value;
}
inline void PlayerData::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerData.player_id)
}

// string player_name = 3;
inline void PlayerData::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& PlayerData::player_name() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerData.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerData::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.PlayerData.player_name)
}
inline std::string* PlayerData::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerData.player_name)
  return _s;
}
inline const std::string& PlayerData::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void PlayerData::_internal_set_player_name(const std::string& value) {
  
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerData::_internal_mutable_player_name() {
  
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerData::release_player_name() {
  // @@protoc_insertion_point(field_release:idlepb.PlayerData.player_name)
  return _impl_.player_name_.Release();
}
inline void PlayerData::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.PlayerData.player_name)
}

// int64 last_online_date = 4;
inline void PlayerData::clear_last_online_date() {
  _impl_.last_online_date_ = int64_t{0};
}
inline int64_t PlayerData::_internal_last_online_date() const {
  return _impl_.last_online_date_;
}
inline int64_t PlayerData::last_online_date() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerData.last_online_date)
  return _internal_last_online_date();
}
inline void PlayerData::_internal_set_last_online_date(int64_t value) {
  
  _impl_.last_online_date_ = value;
}
inline void PlayerData::set_last_online_date(int64_t value) {
  _internal_set_last_online_date(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerData.last_online_date)
}

// int64 create_date = 5;
inline void PlayerData::clear_create_date() {
  _impl_.create_date_ = int64_t{0};
}
inline int64_t PlayerData::_internal_create_date() const {
  return _impl_.create_date_;
}
inline int64_t PlayerData::create_date() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerData.create_date)
  return _internal_create_date();
}
inline void PlayerData::_internal_set_create_date(int64_t value) {
  
  _impl_.create_date_ = value;
}
inline void PlayerData::set_create_date(int64_t value) {
  _internal_set_create_date(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerData.create_date)
}

// -------------------------------------------------------------------

// PlayerSaveData

// .idlepb.PlayerData player_data = 1;
inline bool PlayerSaveData::_internal_has_player_data() const {
  return this != internal_default_instance() && _impl_.player_data_ != nullptr;
}
inline bool PlayerSaveData::has_player_data() const {
  return _internal_has_player_data();
}
inline void PlayerSaveData::clear_player_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_data_ != nullptr) {
    delete _impl_.player_data_;
  }
  _impl_.player_data_ = nullptr;
}
inline const ::idlepb::PlayerData& PlayerSaveData::_internal_player_data() const {
  const ::idlepb::PlayerData* p = _impl_.player_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerData&>(
      ::idlepb::_PlayerData_default_instance_);
}
inline const ::idlepb::PlayerData& PlayerSaveData::player_data() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerSaveData.player_data)
  return _internal_player_data();
}
inline void PlayerSaveData::unsafe_arena_set_allocated_player_data(
    ::idlepb::PlayerData* player_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_data_);
  }
  _impl_.player_data_ = player_data;
  if (player_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.PlayerSaveData.player_data)
}
inline ::idlepb::PlayerData* PlayerSaveData::release_player_data() {
  
  ::idlepb::PlayerData* temp = _impl_.player_data_;
  _impl_.player_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerData* PlayerSaveData::unsafe_arena_release_player_data() {
  // @@protoc_insertion_point(field_release:idlepb.PlayerSaveData.player_data)
  
  ::idlepb::PlayerData* temp = _impl_.player_data_;
  _impl_.player_data_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerData* PlayerSaveData::_internal_mutable_player_data() {
  
  if (_impl_.player_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerData>(GetArenaForAllocation());
    _impl_.player_data_ = p;
  }
  return _impl_.player_data_;
}
inline ::idlepb::PlayerData* PlayerSaveData::mutable_player_data() {
  ::idlepb::PlayerData* _msg = _internal_mutable_player_data();
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerSaveData.player_data)
  return _msg;
}
inline void PlayerSaveData::set_allocated_player_data(::idlepb::PlayerData* player_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_data_;
  }
  if (player_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_data);
    if (message_arena != submessage_arena) {
      player_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_data_ = player_data;
  // @@protoc_insertion_point(field_set_allocated:idlepb.PlayerSaveData.player_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idlepb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::idlepb::ReplicatedLevelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::ReplicatedLevelType>() {
  return ::idlepb::ReplicatedLevelType_descriptor();
}
template <> struct is_proto_enum< ::idlepb::SystemNoticeStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::SystemNoticeStyle>() {
  return ::idlepb::SystemNoticeStyle_descriptor();
}
template <> struct is_proto_enum< ::idlepb::SystemNoticeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::SystemNoticeType>() {
  return ::idlepb::SystemNoticeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
