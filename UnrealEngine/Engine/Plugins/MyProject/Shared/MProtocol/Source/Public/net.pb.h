// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_net_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_net_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_net_2eproto MPROTOCOL_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct MPROTOCOL_API TableStruct_net_2eproto {
  static const uint32_t offsets[];
};
MPROTOCOL_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_2eproto;
namespace idlepb {
class PbRpcMessage;
struct PbRpcMessageDefaultTypeInternal;
MPROTOCOL_API extern PbRpcMessageDefaultTypeInternal _PbRpcMessage_default_instance_;
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
template<> MPROTOCOL_API ::idlepb::PbRpcMessage* Arena::CreateMaybeMessage<::idlepb::PbRpcMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace idlepb {

enum RpcMessageOp : int {
  RpcMessageOp_Notify = 0,
  RpcMessageOp_Request = 1,
  RpcMessageOp_Response = 2,
  RpcMessageOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RpcMessageOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool RpcMessageOp_IsValid(int value);
constexpr RpcMessageOp RpcMessageOp_MIN = RpcMessageOp_Notify;
constexpr RpcMessageOp RpcMessageOp_MAX = RpcMessageOp_Response;
constexpr int RpcMessageOp_ARRAYSIZE = RpcMessageOp_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcMessageOp_descriptor();
template<typename T>
inline const std::string& RpcMessageOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcMessageOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcMessageOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcMessageOp_descriptor(), enum_t_value);
}
inline bool RpcMessageOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RpcMessageOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcMessageOp>(
    RpcMessageOp_descriptor(), name, value);
}
enum RpcErrorCode : int {
  RpcErrorCode_Ok = 0,
  RpcErrorCode_Unknown = 1,
  RpcErrorCode_Unimplemented = 2,
  RpcErrorCode_Timeout = 3,
  RpcErrorCode_ReqDataError = 4,
  RpcErrorCode_RspDataError = 5,
  RpcErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RpcErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
MPROTOCOL_API bool RpcErrorCode_IsValid(int value);
constexpr RpcErrorCode RpcErrorCode_MIN = RpcErrorCode_Ok;
constexpr RpcErrorCode RpcErrorCode_MAX = RpcErrorCode_RspDataError;
constexpr int RpcErrorCode_ARRAYSIZE = RpcErrorCode_MAX + 1;

MPROTOCOL_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcErrorCode_descriptor();
template<typename T>
inline const std::string& RpcErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcErrorCode_descriptor(), enum_t_value);
}
inline bool RpcErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RpcErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcErrorCode>(
    RpcErrorCode_descriptor(), name, value);
}
// ===================================================================

class MPROTOCOL_API PbRpcMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PbRpcMessage) */ {
 public:
  inline PbRpcMessage() : PbRpcMessage(nullptr) {}
  ~PbRpcMessage() override;
  explicit PROTOBUF_CONSTEXPR PbRpcMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbRpcMessage(const PbRpcMessage& from);
  PbRpcMessage(PbRpcMessage&& from) noexcept
    : PbRpcMessage() {
    *this = ::std::move(from);
  }

  inline PbRpcMessage& operator=(const PbRpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbRpcMessage& operator=(PbRpcMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbRpcMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbRpcMessage* internal_default_instance() {
    return reinterpret_cast<const PbRpcMessage*>(
               &_PbRpcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PbRpcMessage& a, PbRpcMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PbRpcMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbRpcMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PbRpcMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PbRpcMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbRpcMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PbRpcMessage& from) {
    PbRpcMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbRpcMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PbRpcMessage";
  }
  protected:
  explicit PbRpcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyDataFieldNumber = 6,
    kSnFieldNumber = 2,
    kOpFieldNumber = 1,
    kErrorCodeFieldNumber = 3,
    kRpcIdFieldNumber = 4,
    kBodyTypeIdFieldNumber = 5,
  };
  // bytes body_data = 6;
  void clear_body_data();
  const std::string& body_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body_data();
  PROTOBUF_NODISCARD std::string* release_body_data();
  void set_allocated_body_data(std::string* body_data);
  private:
  const std::string& _internal_body_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body_data(const std::string& value);
  std::string* _internal_mutable_body_data();
  public:

  // int64 sn = 2;
  void clear_sn();
  int64_t sn() const;
  void set_sn(int64_t value);
  private:
  int64_t _internal_sn() const;
  void _internal_set_sn(int64_t value);
  public:

  // .idlepb.RpcMessageOp op = 1;
  void clear_op();
  ::idlepb::RpcMessageOp op() const;
  void set_op(::idlepb::RpcMessageOp value);
  private:
  ::idlepb::RpcMessageOp _internal_op() const;
  void _internal_set_op(::idlepb::RpcMessageOp value);
  public:

  // .idlepb.RpcErrorCode error_code = 3;
  void clear_error_code();
  ::idlepb::RpcErrorCode error_code() const;
  void set_error_code(::idlepb::RpcErrorCode value);
  private:
  ::idlepb::RpcErrorCode _internal_error_code() const;
  void _internal_set_error_code(::idlepb::RpcErrorCode value);
  public:

  // uint64 rpc_id = 4;
  void clear_rpc_id();
  uint64_t rpc_id() const;
  void set_rpc_id(uint64_t value);
  private:
  uint64_t _internal_rpc_id() const;
  void _internal_set_rpc_id(uint64_t value);
  public:

  // uint64 body_type_id = 5;
  void clear_body_type_id();
  uint64_t body_type_id() const;
  void set_body_type_id(uint64_t value);
  private:
  uint64_t _internal_body_type_id() const;
  void _internal_set_body_type_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PbRpcMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_data_;
    int64_t sn_;
    int op_;
    int error_code_;
    uint64_t rpc_id_;
    uint64_t body_type_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PbRpcMessage

// .idlepb.RpcMessageOp op = 1;
inline void PbRpcMessage::clear_op() {
  _impl_.op_ = 0;
}
inline ::idlepb::RpcMessageOp PbRpcMessage::_internal_op() const {
  return static_cast< ::idlepb::RpcMessageOp >(_impl_.op_);
}
inline ::idlepb::RpcMessageOp PbRpcMessage::op() const {
  // @@protoc_insertion_point(field_get:idlepb.PbRpcMessage.op)
  return _internal_op();
}
inline void PbRpcMessage::_internal_set_op(::idlepb::RpcMessageOp value) {
  
  _impl_.op_ = value;
}
inline void PbRpcMessage::set_op(::idlepb::RpcMessageOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:idlepb.PbRpcMessage.op)
}

// int64 sn = 2;
inline void PbRpcMessage::clear_sn() {
  _impl_.sn_ = int64_t{0};
}
inline int64_t PbRpcMessage::_internal_sn() const {
  return _impl_.sn_;
}
inline int64_t PbRpcMessage::sn() const {
  // @@protoc_insertion_point(field_get:idlepb.PbRpcMessage.sn)
  return _internal_sn();
}
inline void PbRpcMessage::_internal_set_sn(int64_t value) {
  
  _impl_.sn_ = value;
}
inline void PbRpcMessage::set_sn(int64_t value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:idlepb.PbRpcMessage.sn)
}

// .idlepb.RpcErrorCode error_code = 3;
inline void PbRpcMessage::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline ::idlepb::RpcErrorCode PbRpcMessage::_internal_error_code() const {
  return static_cast< ::idlepb::RpcErrorCode >(_impl_.error_code_);
}
inline ::idlepb::RpcErrorCode PbRpcMessage::error_code() const {
  // @@protoc_insertion_point(field_get:idlepb.PbRpcMessage.error_code)
  return _internal_error_code();
}
inline void PbRpcMessage::_internal_set_error_code(::idlepb::RpcErrorCode value) {
  
  _impl_.error_code_ = value;
}
inline void PbRpcMessage::set_error_code(::idlepb::RpcErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:idlepb.PbRpcMessage.error_code)
}

// uint64 rpc_id = 4;
inline void PbRpcMessage::clear_rpc_id() {
  _impl_.rpc_id_ = uint64_t{0u};
}
inline uint64_t PbRpcMessage::_internal_rpc_id() const {
  return _impl_.rpc_id_;
}
inline uint64_t PbRpcMessage::rpc_id() const {
  // @@protoc_insertion_point(field_get:idlepb.PbRpcMessage.rpc_id)
  return _internal_rpc_id();
}
inline void PbRpcMessage::_internal_set_rpc_id(uint64_t value) {
  
  _impl_.rpc_id_ = value;
}
inline void PbRpcMessage::set_rpc_id(uint64_t value) {
  _internal_set_rpc_id(value);
  // @@protoc_insertion_point(field_set:idlepb.PbRpcMessage.rpc_id)
}

// uint64 body_type_id = 5;
inline void PbRpcMessage::clear_body_type_id() {
  _impl_.body_type_id_ = uint64_t{0u};
}
inline uint64_t PbRpcMessage::_internal_body_type_id() const {
  return _impl_.body_type_id_;
}
inline uint64_t PbRpcMessage::body_type_id() const {
  // @@protoc_insertion_point(field_get:idlepb.PbRpcMessage.body_type_id)
  return _internal_body_type_id();
}
inline void PbRpcMessage::_internal_set_body_type_id(uint64_t value) {
  
  _impl_.body_type_id_ = value;
}
inline void PbRpcMessage::set_body_type_id(uint64_t value) {
  _internal_set_body_type_id(value);
  // @@protoc_insertion_point(field_set:idlepb.PbRpcMessage.body_type_id)
}

// bytes body_data = 6;
inline void PbRpcMessage::clear_body_data() {
  _impl_.body_data_.ClearToEmpty();
}
inline const std::string& PbRpcMessage::body_data() const {
  // @@protoc_insertion_point(field_get:idlepb.PbRpcMessage.body_data)
  return _internal_body_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbRpcMessage::set_body_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.PbRpcMessage.body_data)
}
inline std::string* PbRpcMessage::mutable_body_data() {
  std::string* _s = _internal_mutable_body_data();
  // @@protoc_insertion_point(field_mutable:idlepb.PbRpcMessage.body_data)
  return _s;
}
inline const std::string& PbRpcMessage::_internal_body_data() const {
  return _impl_.body_data_.Get();
}
inline void PbRpcMessage::_internal_set_body_data(const std::string& value) {
  
  _impl_.body_data_.Set(value, GetArenaForAllocation());
}
inline std::string* PbRpcMessage::_internal_mutable_body_data() {
  
  return _impl_.body_data_.Mutable(GetArenaForAllocation());
}
inline std::string* PbRpcMessage::release_body_data() {
  // @@protoc_insertion_point(field_release:idlepb.PbRpcMessage.body_data)
  return _impl_.body_data_.Release();
}
inline void PbRpcMessage::set_allocated_body_data(std::string* body_data) {
  if (body_data != nullptr) {
    
  } else {
    
  }
  _impl_.body_data_.SetAllocated(body_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_data_.IsDefault()) {
    _impl_.body_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.PbRpcMessage.body_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace idlepb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::idlepb::RpcMessageOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::RpcMessageOp>() {
  return ::idlepb::RpcMessageOp_descriptor();
}
template <> struct is_proto_enum< ::idlepb::RpcErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idlepb::RpcErrorCode>() {
  return ::idlepb::RpcErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_net_2eproto
