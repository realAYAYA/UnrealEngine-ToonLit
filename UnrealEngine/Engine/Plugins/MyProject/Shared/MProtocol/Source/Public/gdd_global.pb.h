// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdd_global.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gdd_5fglobal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gdd_5fglobal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "defines.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gdd_5fglobal_2eproto MPROTOCOL_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct MPROTOCOL_API TableStruct_gdd_5fglobal_2eproto {
  static const uint32_t offsets[];
};
MPROTOCOL_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gdd_5fglobal_2eproto;
namespace idlepb {
class AnotherMeGlobalConfig;
struct AnotherMeGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern AnotherMeGlobalConfigDefaultTypeInternal _AnotherMeGlobalConfig_default_instance_;
class AppearanceGlobalConfig;
struct AppearanceGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern AppearanceGlobalConfigDefaultTypeInternal _AppearanceGlobalConfig_default_instance_;
class AppearanceGlobalConfigModelTypeInfo;
struct AppearanceGlobalConfigModelTypeInfoDefaultTypeInternal;
MPROTOCOL_API extern AppearanceGlobalConfigModelTypeInfoDefaultTypeInternal _AppearanceGlobalConfigModelTypeInfo_default_instance_;
class AppearanceGlobalConfigShopRefreshRule;
struct AppearanceGlobalConfigShopRefreshRuleDefaultTypeInternal;
MPROTOCOL_API extern AppearanceGlobalConfigShopRefreshRuleDefaultTypeInternal _AppearanceGlobalConfigShopRefreshRule_default_instance_;
class AvatarStageCountDiff;
struct AvatarStageCountDiffDefaultTypeInternal;
MPROTOCOL_API extern AvatarStageCountDiffDefaultTypeInternal _AvatarStageCountDiff_default_instance_;
class CollectionGlobalConfig;
struct CollectionGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern CollectionGlobalConfigDefaultTypeInternal _CollectionGlobalConfig_default_instance_;
class CollectionGlobalConfigLevelUpEntry;
struct CollectionGlobalConfigLevelUpEntryDefaultTypeInternal;
MPROTOCOL_API extern CollectionGlobalConfigLevelUpEntryDefaultTypeInternal _CollectionGlobalConfigLevelUpEntry_default_instance_;
class CollectionGlobalConfigReset;
struct CollectionGlobalConfigResetDefaultTypeInternal;
MPROTOCOL_API extern CollectionGlobalConfigResetDefaultTypeInternal _CollectionGlobalConfigReset_default_instance_;
class CollectionGlobalConfigUpgradeStar;
struct CollectionGlobalConfigUpgradeStarDefaultTypeInternal;
MPROTOCOL_API extern CollectionGlobalConfigUpgradeStarDefaultTypeInternal _CollectionGlobalConfigUpgradeStar_default_instance_;
class CollectionGlobalConfigUpgradeStarCostEntry;
struct CollectionGlobalConfigUpgradeStarCostEntryDefaultTypeInternal;
MPROTOCOL_API extern CollectionGlobalConfigUpgradeStarCostEntryDefaultTypeInternal _CollectionGlobalConfigUpgradeStarCostEntry_default_instance_;
class CollectionGlobalConfigUpgradeStarCostRequestEntry;
struct CollectionGlobalConfigUpgradeStarCostRequestEntryDefaultTypeInternal;
MPROTOCOL_API extern CollectionGlobalConfigUpgradeStarCostRequestEntryDefaultTypeInternal _CollectionGlobalConfigUpgradeStarCostRequestEntry_default_instance_;
class CommonGlobalConfig;
struct CommonGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern CommonGlobalConfigDefaultTypeInternal _CommonGlobalConfig_default_instance_;
class CurrencyGlobalConfig;
struct CurrencyGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern CurrencyGlobalConfigDefaultTypeInternal _CurrencyGlobalConfig_default_instance_;
class CurrencyGlobalConfigItem2Currency;
struct CurrencyGlobalConfigItem2CurrencyDefaultTypeInternal;
MPROTOCOL_API extern CurrencyGlobalConfigItem2CurrencyDefaultTypeInternal _CurrencyGlobalConfigItem2Currency_default_instance_;
class FarmGlobalConfig;
struct FarmGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern FarmGlobalConfigDefaultTypeInternal _FarmGlobalConfig_default_instance_;
class FriendsGlobalConfig;
struct FriendsGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern FriendsGlobalConfigDefaultTypeInternal _FriendsGlobalConfig_default_instance_;
class FuZeGlobalConfig;
struct FuZeGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern FuZeGlobalConfigDefaultTypeInternal _FuZeGlobalConfig_default_instance_;
class FuZeRewardItemId;
struct FuZeRewardItemIdDefaultTypeInternal;
MPROTOCOL_API extern FuZeRewardItemIdDefaultTypeInternal _FuZeRewardItemId_default_instance_;
class FuZeRewardNum;
struct FuZeRewardNumDefaultTypeInternal;
MPROTOCOL_API extern FuZeRewardNumDefaultTypeInternal _FuZeRewardNum_default_instance_;
class NpcGlobalConfig;
struct NpcGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern NpcGlobalConfigDefaultTypeInternal _NpcGlobalConfig_default_instance_;
class NpcGlobalConfigConstants;
struct NpcGlobalConfigConstantsDefaultTypeInternal;
MPROTOCOL_API extern NpcGlobalConfigConstantsDefaultTypeInternal _NpcGlobalConfigConstants_default_instance_;
class PlayerGlobalConfig;
struct PlayerGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigDefaultTypeInternal _PlayerGlobalConfig_default_instance_;
class PlayerGlobalConfigAbility;
struct PlayerGlobalConfigAbilityDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigAbilityDefaultTypeInternal _PlayerGlobalConfigAbility_default_instance_;
class PlayerGlobalConfigAlchemy;
struct PlayerGlobalConfigAlchemyDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigAlchemyDefaultTypeInternal _PlayerGlobalConfigAlchemy_default_instance_;
class PlayerGlobalConfigBreathingExercise;
struct PlayerGlobalConfigBreathingExerciseDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigBreathingExerciseDefaultTypeInternal _PlayerGlobalConfigBreathingExercise_default_instance_;
class PlayerGlobalConfigConstants;
struct PlayerGlobalConfigConstantsDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigConstantsDefaultTypeInternal _PlayerGlobalConfigConstants_default_instance_;
class PlayerGlobalConfigFightMode;
struct PlayerGlobalConfigFightModeDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigFightModeDefaultTypeInternal _PlayerGlobalConfigFightMode_default_instance_;
class PlayerGlobalConfigForge;
struct PlayerGlobalConfigForgeDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigForgeDefaultTypeInternal _PlayerGlobalConfigForge_default_instance_;
class PlayerGlobalConfigForgeDestroyBackItemConfig;
struct PlayerGlobalConfigForgeDestroyBackItemConfigDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigForgeDestroyBackItemConfigDefaultTypeInternal _PlayerGlobalConfigForgeDestroyBackItemConfig_default_instance_;
class PlayerGlobalConfigInventory;
struct PlayerGlobalConfigInventoryDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigInventoryDefaultTypeInternal _PlayerGlobalConfigInventory_default_instance_;
class PlayerGlobalConfigRoleInitAttributes;
struct PlayerGlobalConfigRoleInitAttributesDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigRoleInitAttributesDefaultTypeInternal _PlayerGlobalConfigRoleInitAttributes_default_instance_;
class PlayerGlobalConfigThunderTest;
struct PlayerGlobalConfigThunderTestDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigThunderTestDefaultTypeInternal _PlayerGlobalConfigThunderTest_default_instance_;
class PlayerGlobalConfigThunderTestDegreeConfig;
struct PlayerGlobalConfigThunderTestDegreeConfigDefaultTypeInternal;
MPROTOCOL_API extern PlayerGlobalConfigThunderTestDegreeConfigDefaultTypeInternal _PlayerGlobalConfigThunderTestDegreeConfig_default_instance_;
class WorldGlobalConfig;
struct WorldGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern WorldGlobalConfigDefaultTypeInternal _WorldGlobalConfig_default_instance_;
class WorldGlobalConfigDungeonCommon;
struct WorldGlobalConfigDungeonCommonDefaultTypeInternal;
MPROTOCOL_API extern WorldGlobalConfigDungeonCommonDefaultTypeInternal _WorldGlobalConfigDungeonCommon_default_instance_;
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
template<> MPROTOCOL_API ::idlepb::AnotherMeGlobalConfig* Arena::CreateMaybeMessage<::idlepb::AnotherMeGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::AppearanceGlobalConfig* Arena::CreateMaybeMessage<::idlepb::AppearanceGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::AppearanceGlobalConfigModelTypeInfo* Arena::CreateMaybeMessage<::idlepb::AppearanceGlobalConfigModelTypeInfo>(Arena*);
template<> MPROTOCOL_API ::idlepb::AppearanceGlobalConfigShopRefreshRule* Arena::CreateMaybeMessage<::idlepb::AppearanceGlobalConfigShopRefreshRule>(Arena*);
template<> MPROTOCOL_API ::idlepb::AvatarStageCountDiff* Arena::CreateMaybeMessage<::idlepb::AvatarStageCountDiff>(Arena*);
template<> MPROTOCOL_API ::idlepb::CollectionGlobalConfig* Arena::CreateMaybeMessage<::idlepb::CollectionGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::CollectionGlobalConfigLevelUpEntry* Arena::CreateMaybeMessage<::idlepb::CollectionGlobalConfigLevelUpEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::CollectionGlobalConfigReset* Arena::CreateMaybeMessage<::idlepb::CollectionGlobalConfigReset>(Arena*);
template<> MPROTOCOL_API ::idlepb::CollectionGlobalConfigUpgradeStar* Arena::CreateMaybeMessage<::idlepb::CollectionGlobalConfigUpgradeStar>(Arena*);
template<> MPROTOCOL_API ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* Arena::CreateMaybeMessage<::idlepb::CollectionGlobalConfigUpgradeStarCostEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry* Arena::CreateMaybeMessage<::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry>(Arena*);
template<> MPROTOCOL_API ::idlepb::CommonGlobalConfig* Arena::CreateMaybeMessage<::idlepb::CommonGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::CurrencyGlobalConfig* Arena::CreateMaybeMessage<::idlepb::CurrencyGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::CurrencyGlobalConfigItem2Currency* Arena::CreateMaybeMessage<::idlepb::CurrencyGlobalConfigItem2Currency>(Arena*);
template<> MPROTOCOL_API ::idlepb::FarmGlobalConfig* Arena::CreateMaybeMessage<::idlepb::FarmGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::FriendsGlobalConfig* Arena::CreateMaybeMessage<::idlepb::FriendsGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::FuZeGlobalConfig* Arena::CreateMaybeMessage<::idlepb::FuZeGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::FuZeRewardItemId* Arena::CreateMaybeMessage<::idlepb::FuZeRewardItemId>(Arena*);
template<> MPROTOCOL_API ::idlepb::FuZeRewardNum* Arena::CreateMaybeMessage<::idlepb::FuZeRewardNum>(Arena*);
template<> MPROTOCOL_API ::idlepb::NpcGlobalConfig* Arena::CreateMaybeMessage<::idlepb::NpcGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::NpcGlobalConfigConstants* Arena::CreateMaybeMessage<::idlepb::NpcGlobalConfigConstants>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfig* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfigAbility* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfigAbility>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfigAlchemy* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfigAlchemy>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfigBreathingExercise* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfigBreathingExercise>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfigConstants* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfigConstants>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfigFightMode* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfigFightMode>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfigForge* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfigForge>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfigInventory* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfigInventory>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfigRoleInitAttributes* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfigRoleInitAttributes>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfigThunderTest* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfigThunderTest>(Arena*);
template<> MPROTOCOL_API ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig* Arena::CreateMaybeMessage<::idlepb::PlayerGlobalConfigThunderTestDegreeConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::WorldGlobalConfig* Arena::CreateMaybeMessage<::idlepb::WorldGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::WorldGlobalConfigDungeonCommon* Arena::CreateMaybeMessage<::idlepb::WorldGlobalConfigDungeonCommon>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace idlepb {

// ===================================================================

class MPROTOCOL_API CommonGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CommonGlobalConfig) */ {
 public:
  inline CommonGlobalConfig() : CommonGlobalConfig(nullptr) {}
  ~CommonGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR CommonGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonGlobalConfig(const CommonGlobalConfig& from);
  CommonGlobalConfig(CommonGlobalConfig&& from) noexcept
    : CommonGlobalConfig() {
    *this = ::std::move(from);
  }

  inline CommonGlobalConfig& operator=(const CommonGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonGlobalConfig& operator=(CommonGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const CommonGlobalConfig*>(
               &_CommonGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonGlobalConfig& a, CommonGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonGlobalConfig& from) {
    CommonGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CommonGlobalConfig";
  }
  protected:
  explicit CommonGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsRpcMaxSecondsFieldNumber = 1,
  };
  // float ts_rpc_max_seconds = 1;
  void clear_ts_rpc_max_seconds();
  float ts_rpc_max_seconds() const;
  void set_ts_rpc_max_seconds(float value);
  private:
  float _internal_ts_rpc_max_seconds() const;
  void _internal_set_ts_rpc_max_seconds(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CommonGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float ts_rpc_max_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CollectionGlobalConfigLevelUpEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CollectionGlobalConfigLevelUpEntry) */ {
 public:
  inline CollectionGlobalConfigLevelUpEntry() : CollectionGlobalConfigLevelUpEntry(nullptr) {}
  ~CollectionGlobalConfigLevelUpEntry() override;
  explicit PROTOBUF_CONSTEXPR CollectionGlobalConfigLevelUpEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionGlobalConfigLevelUpEntry(const CollectionGlobalConfigLevelUpEntry& from);
  CollectionGlobalConfigLevelUpEntry(CollectionGlobalConfigLevelUpEntry&& from) noexcept
    : CollectionGlobalConfigLevelUpEntry() {
    *this = ::std::move(from);
  }

  inline CollectionGlobalConfigLevelUpEntry& operator=(const CollectionGlobalConfigLevelUpEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionGlobalConfigLevelUpEntry& operator=(CollectionGlobalConfigLevelUpEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionGlobalConfigLevelUpEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionGlobalConfigLevelUpEntry* internal_default_instance() {
    return reinterpret_cast<const CollectionGlobalConfigLevelUpEntry*>(
               &_CollectionGlobalConfigLevelUpEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CollectionGlobalConfigLevelUpEntry& a, CollectionGlobalConfigLevelUpEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionGlobalConfigLevelUpEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionGlobalConfigLevelUpEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionGlobalConfigLevelUpEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionGlobalConfigLevelUpEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionGlobalConfigLevelUpEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionGlobalConfigLevelUpEntry& from) {
    CollectionGlobalConfigLevelUpEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionGlobalConfigLevelUpEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CollectionGlobalConfigLevelUpEntry";
  }
  protected:
  explicit CollectionGlobalConfigLevelUpEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDegreeLimitFieldNumber = 1,
    kStageLimitFieldNumber = 2,
    kCostItemIdFieldNumber = 3,
    kCostItemNumFieldNumber = 4,
    kCostMoneyFieldNumber = 5,
  };
  // int32 degree_limit = 1;
  void clear_degree_limit();
  int32_t degree_limit() const;
  void set_degree_limit(int32_t value);
  private:
  int32_t _internal_degree_limit() const;
  void _internal_set_degree_limit(int32_t value);
  public:

  // int32 stage_limit = 2;
  void clear_stage_limit();
  int32_t stage_limit() const;
  void set_stage_limit(int32_t value);
  private:
  int32_t _internal_stage_limit() const;
  void _internal_set_stage_limit(int32_t value);
  public:

  // int32 cost_item_id = 3;
  void clear_cost_item_id();
  int32_t cost_item_id() const;
  void set_cost_item_id(int32_t value);
  private:
  int32_t _internal_cost_item_id() const;
  void _internal_set_cost_item_id(int32_t value);
  public:

  // int32 cost_item_num = 4;
  void clear_cost_item_num();
  int32_t cost_item_num() const;
  void set_cost_item_num(int32_t value);
  private:
  int32_t _internal_cost_item_num() const;
  void _internal_set_cost_item_num(int32_t value);
  public:

  // int32 cost_money = 5;
  void clear_cost_money();
  int32_t cost_money() const;
  void set_cost_money(int32_t value);
  private:
  int32_t _internal_cost_money() const;
  void _internal_set_cost_money(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CollectionGlobalConfigLevelUpEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t degree_limit_;
    int32_t stage_limit_;
    int32_t cost_item_id_;
    int32_t cost_item_num_;
    int32_t cost_money_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CollectionGlobalConfigUpgradeStarCostRequestEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry) */ {
 public:
  inline CollectionGlobalConfigUpgradeStarCostRequestEntry() : CollectionGlobalConfigUpgradeStarCostRequestEntry(nullptr) {}
  ~CollectionGlobalConfigUpgradeStarCostRequestEntry() override;
  explicit PROTOBUF_CONSTEXPR CollectionGlobalConfigUpgradeStarCostRequestEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionGlobalConfigUpgradeStarCostRequestEntry(const CollectionGlobalConfigUpgradeStarCostRequestEntry& from);
  CollectionGlobalConfigUpgradeStarCostRequestEntry(CollectionGlobalConfigUpgradeStarCostRequestEntry&& from) noexcept
    : CollectionGlobalConfigUpgradeStarCostRequestEntry() {
    *this = ::std::move(from);
  }

  inline CollectionGlobalConfigUpgradeStarCostRequestEntry& operator=(const CollectionGlobalConfigUpgradeStarCostRequestEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionGlobalConfigUpgradeStarCostRequestEntry& operator=(CollectionGlobalConfigUpgradeStarCostRequestEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionGlobalConfigUpgradeStarCostRequestEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionGlobalConfigUpgradeStarCostRequestEntry* internal_default_instance() {
    return reinterpret_cast<const CollectionGlobalConfigUpgradeStarCostRequestEntry*>(
               &_CollectionGlobalConfigUpgradeStarCostRequestEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CollectionGlobalConfigUpgradeStarCostRequestEntry& a, CollectionGlobalConfigUpgradeStarCostRequestEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionGlobalConfigUpgradeStarCostRequestEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionGlobalConfigUpgradeStarCostRequestEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionGlobalConfigUpgradeStarCostRequestEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionGlobalConfigUpgradeStarCostRequestEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionGlobalConfigUpgradeStarCostRequestEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionGlobalConfigUpgradeStarCostRequestEntry& from) {
    CollectionGlobalConfigUpgradeStarCostRequestEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionGlobalConfigUpgradeStarCostRequestEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry";
  }
  protected:
  explicit CollectionGlobalConfigUpgradeStarCostRequestEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostCommonPieceNumFieldNumber = 3,
    kCostItemNumFieldNumber = 1,
    kCostSelfPieceNumFieldNumber = 2,
  };
  // repeated int32 cost_common_piece_num = 3;
  int cost_common_piece_num_size() const;
  private:
  int _internal_cost_common_piece_num_size() const;
  public:
  void clear_cost_common_piece_num();
  private:
  int32_t _internal_cost_common_piece_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_cost_common_piece_num() const;
  void _internal_add_cost_common_piece_num(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_cost_common_piece_num();
  public:
  int32_t cost_common_piece_num(int index) const;
  void set_cost_common_piece_num(int index, int32_t value);
  void add_cost_common_piece_num(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      cost_common_piece_num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_cost_common_piece_num();

  // int32 cost_item_num = 1;
  void clear_cost_item_num();
  int32_t cost_item_num() const;
  void set_cost_item_num(int32_t value);
  private:
  int32_t _internal_cost_item_num() const;
  void _internal_set_cost_item_num(int32_t value);
  public:

  // int32 cost_self_piece_num = 2;
  void clear_cost_self_piece_num();
  int32_t cost_self_piece_num() const;
  void set_cost_self_piece_num(int32_t value);
  private:
  int32_t _internal_cost_self_piece_num() const;
  void _internal_set_cost_self_piece_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > cost_common_piece_num_;
    mutable std::atomic<int> _cost_common_piece_num_cached_byte_size_;
    int32_t cost_item_num_;
    int32_t cost_self_piece_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CollectionGlobalConfigUpgradeStarCostEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CollectionGlobalConfigUpgradeStarCostEntry) */ {
 public:
  inline CollectionGlobalConfigUpgradeStarCostEntry() : CollectionGlobalConfigUpgradeStarCostEntry(nullptr) {}
  ~CollectionGlobalConfigUpgradeStarCostEntry() override;
  explicit PROTOBUF_CONSTEXPR CollectionGlobalConfigUpgradeStarCostEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionGlobalConfigUpgradeStarCostEntry(const CollectionGlobalConfigUpgradeStarCostEntry& from);
  CollectionGlobalConfigUpgradeStarCostEntry(CollectionGlobalConfigUpgradeStarCostEntry&& from) noexcept
    : CollectionGlobalConfigUpgradeStarCostEntry() {
    *this = ::std::move(from);
  }

  inline CollectionGlobalConfigUpgradeStarCostEntry& operator=(const CollectionGlobalConfigUpgradeStarCostEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionGlobalConfigUpgradeStarCostEntry& operator=(CollectionGlobalConfigUpgradeStarCostEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionGlobalConfigUpgradeStarCostEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionGlobalConfigUpgradeStarCostEntry* internal_default_instance() {
    return reinterpret_cast<const CollectionGlobalConfigUpgradeStarCostEntry*>(
               &_CollectionGlobalConfigUpgradeStarCostEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CollectionGlobalConfigUpgradeStarCostEntry& a, CollectionGlobalConfigUpgradeStarCostEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionGlobalConfigUpgradeStarCostEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionGlobalConfigUpgradeStarCostEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionGlobalConfigUpgradeStarCostEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionGlobalConfigUpgradeStarCostEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionGlobalConfigUpgradeStarCostEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionGlobalConfigUpgradeStarCostEntry& from) {
    CollectionGlobalConfigUpgradeStarCostEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionGlobalConfigUpgradeStarCostEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CollectionGlobalConfigUpgradeStarCostEntry";
  }
  protected:
  explicit CollectionGlobalConfigUpgradeStarCostEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry request = 1;
  int request_size() const;
  private:
  int _internal_request_size() const;
  public:
  void clear_request();
  ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry* mutable_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry >*
      mutable_request();
  private:
  const ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry& _internal_request(int index) const;
  ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry* _internal_add_request();
  public:
  const ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry& request(int index) const;
  ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry* add_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry >&
      request() const;

  // @@protoc_insertion_point(class_scope:idlepb.CollectionGlobalConfigUpgradeStarCostEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry > request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CollectionGlobalConfigUpgradeStar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CollectionGlobalConfigUpgradeStar) */ {
 public:
  inline CollectionGlobalConfigUpgradeStar() : CollectionGlobalConfigUpgradeStar(nullptr) {}
  ~CollectionGlobalConfigUpgradeStar() override;
  explicit PROTOBUF_CONSTEXPR CollectionGlobalConfigUpgradeStar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionGlobalConfigUpgradeStar(const CollectionGlobalConfigUpgradeStar& from);
  CollectionGlobalConfigUpgradeStar(CollectionGlobalConfigUpgradeStar&& from) noexcept
    : CollectionGlobalConfigUpgradeStar() {
    *this = ::std::move(from);
  }

  inline CollectionGlobalConfigUpgradeStar& operator=(const CollectionGlobalConfigUpgradeStar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionGlobalConfigUpgradeStar& operator=(CollectionGlobalConfigUpgradeStar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionGlobalConfigUpgradeStar& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionGlobalConfigUpgradeStar* internal_default_instance() {
    return reinterpret_cast<const CollectionGlobalConfigUpgradeStar*>(
               &_CollectionGlobalConfigUpgradeStar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CollectionGlobalConfigUpgradeStar& a, CollectionGlobalConfigUpgradeStar& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionGlobalConfigUpgradeStar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionGlobalConfigUpgradeStar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionGlobalConfigUpgradeStar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionGlobalConfigUpgradeStar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionGlobalConfigUpgradeStar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionGlobalConfigUpgradeStar& from) {
    CollectionGlobalConfigUpgradeStar::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionGlobalConfigUpgradeStar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CollectionGlobalConfigUpgradeStar";
  }
  protected:
  explicit CollectionGlobalConfigUpgradeStar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonPieceByQualityFieldNumber = 2,
    kCostByQualityFieldNumber = 3,
    kCostByQualitySkillFieldNumber = 4,
    kCostItemIdFieldNumber = 1,
  };
  // repeated int32 common_piece_by_quality = 2;
  int common_piece_by_quality_size() const;
  private:
  int _internal_common_piece_by_quality_size() const;
  public:
  void clear_common_piece_by_quality();
  private:
  int32_t _internal_common_piece_by_quality(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_common_piece_by_quality() const;
  void _internal_add_common_piece_by_quality(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_common_piece_by_quality();
  public:
  int32_t common_piece_by_quality(int index) const;
  void set_common_piece_by_quality(int index, int32_t value);
  void add_common_piece_by_quality(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      common_piece_by_quality() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_common_piece_by_quality();

  // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostEntry cost_by_quality = 3;
  int cost_by_quality_size() const;
  private:
  int _internal_cost_by_quality_size() const;
  public:
  void clear_cost_by_quality();
  ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* mutable_cost_by_quality(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry >*
      mutable_cost_by_quality();
  private:
  const ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry& _internal_cost_by_quality(int index) const;
  ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* _internal_add_cost_by_quality();
  public:
  const ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry& cost_by_quality(int index) const;
  ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* add_cost_by_quality();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry >&
      cost_by_quality() const;

  // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostEntry cost_by_quality_skill = 4;
  int cost_by_quality_skill_size() const;
  private:
  int _internal_cost_by_quality_skill_size() const;
  public:
  void clear_cost_by_quality_skill();
  ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* mutable_cost_by_quality_skill(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry >*
      mutable_cost_by_quality_skill();
  private:
  const ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry& _internal_cost_by_quality_skill(int index) const;
  ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* _internal_add_cost_by_quality_skill();
  public:
  const ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry& cost_by_quality_skill(int index) const;
  ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* add_cost_by_quality_skill();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry >&
      cost_by_quality_skill() const;

  // int32 cost_item_id = 1;
  void clear_cost_item_id();
  int32_t cost_item_id() const;
  void set_cost_item_id(int32_t value);
  private:
  int32_t _internal_cost_item_id() const;
  void _internal_set_cost_item_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CollectionGlobalConfigUpgradeStar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > common_piece_by_quality_;
    mutable std::atomic<int> _common_piece_by_quality_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry > cost_by_quality_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry > cost_by_quality_skill_;
    int32_t cost_item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CollectionGlobalConfigReset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CollectionGlobalConfigReset) */ {
 public:
  inline CollectionGlobalConfigReset() : CollectionGlobalConfigReset(nullptr) {}
  ~CollectionGlobalConfigReset() override;
  explicit PROTOBUF_CONSTEXPR CollectionGlobalConfigReset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionGlobalConfigReset(const CollectionGlobalConfigReset& from);
  CollectionGlobalConfigReset(CollectionGlobalConfigReset&& from) noexcept
    : CollectionGlobalConfigReset() {
    *this = ::std::move(from);
  }

  inline CollectionGlobalConfigReset& operator=(const CollectionGlobalConfigReset& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionGlobalConfigReset& operator=(CollectionGlobalConfigReset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionGlobalConfigReset& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionGlobalConfigReset* internal_default_instance() {
    return reinterpret_cast<const CollectionGlobalConfigReset*>(
               &_CollectionGlobalConfigReset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CollectionGlobalConfigReset& a, CollectionGlobalConfigReset& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionGlobalConfigReset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionGlobalConfigReset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionGlobalConfigReset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionGlobalConfigReset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionGlobalConfigReset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionGlobalConfigReset& from) {
    CollectionGlobalConfigReset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionGlobalConfigReset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CollectionGlobalConfigReset";
  }
  protected:
  explicit CollectionGlobalConfigReset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostJiYuanFieldNumber = 1,
    kColdTimeSecondsFieldNumber = 2,
  };
  // int32 cost_ji_yuan = 1;
  void clear_cost_ji_yuan();
  int32_t cost_ji_yuan() const;
  void set_cost_ji_yuan(int32_t value);
  private:
  int32_t _internal_cost_ji_yuan() const;
  void _internal_set_cost_ji_yuan(int32_t value);
  public:

  // int32 cold_time_seconds = 2;
  void clear_cold_time_seconds();
  int32_t cold_time_seconds() const;
  void set_cold_time_seconds(int32_t value);
  private:
  int32_t _internal_cold_time_seconds() const;
  void _internal_set_cold_time_seconds(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CollectionGlobalConfigReset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t cost_ji_yuan_;
    int32_t cold_time_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CollectionGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CollectionGlobalConfig) */ {
 public:
  inline CollectionGlobalConfig() : CollectionGlobalConfig(nullptr) {}
  ~CollectionGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR CollectionGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionGlobalConfig(const CollectionGlobalConfig& from);
  CollectionGlobalConfig(CollectionGlobalConfig&& from) noexcept
    : CollectionGlobalConfig() {
    *this = ::std::move(from);
  }

  inline CollectionGlobalConfig& operator=(const CollectionGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionGlobalConfig& operator=(CollectionGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const CollectionGlobalConfig*>(
               &_CollectionGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CollectionGlobalConfig& a, CollectionGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionGlobalConfig& from) {
    CollectionGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CollectionGlobalConfig";
  }
  protected:
  explicit CollectionGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveByQualityFieldNumber = 1,
    kLevelupFieldNumber = 2,
    kUpgradeStarFieldNumber = 3,
    kResetFieldNumber = 4,
  };
  // repeated int32 active_by_quality = 1;
  int active_by_quality_size() const;
  private:
  int _internal_active_by_quality_size() const;
  public:
  void clear_active_by_quality();
  private:
  int32_t _internal_active_by_quality(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_active_by_quality() const;
  void _internal_add_active_by_quality(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_active_by_quality();
  public:
  int32_t active_by_quality(int index) const;
  void set_active_by_quality(int index, int32_t value);
  void add_active_by_quality(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      active_by_quality() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_active_by_quality();

  // repeated .idlepb.CollectionGlobalConfigLevelUpEntry levelup = 2;
  int levelup_size() const;
  private:
  int _internal_levelup_size() const;
  public:
  void clear_levelup();
  ::idlepb::CollectionGlobalConfigLevelUpEntry* mutable_levelup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigLevelUpEntry >*
      mutable_levelup();
  private:
  const ::idlepb::CollectionGlobalConfigLevelUpEntry& _internal_levelup(int index) const;
  ::idlepb::CollectionGlobalConfigLevelUpEntry* _internal_add_levelup();
  public:
  const ::idlepb::CollectionGlobalConfigLevelUpEntry& levelup(int index) const;
  ::idlepb::CollectionGlobalConfigLevelUpEntry* add_levelup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigLevelUpEntry >&
      levelup() const;

  // .idlepb.CollectionGlobalConfigUpgradeStar upgrade_star = 3;
  bool has_upgrade_star() const;
  private:
  bool _internal_has_upgrade_star() const;
  public:
  void clear_upgrade_star();
  const ::idlepb::CollectionGlobalConfigUpgradeStar& upgrade_star() const;
  PROTOBUF_NODISCARD ::idlepb::CollectionGlobalConfigUpgradeStar* release_upgrade_star();
  ::idlepb::CollectionGlobalConfigUpgradeStar* mutable_upgrade_star();
  void set_allocated_upgrade_star(::idlepb::CollectionGlobalConfigUpgradeStar* upgrade_star);
  private:
  const ::idlepb::CollectionGlobalConfigUpgradeStar& _internal_upgrade_star() const;
  ::idlepb::CollectionGlobalConfigUpgradeStar* _internal_mutable_upgrade_star();
  public:
  void unsafe_arena_set_allocated_upgrade_star(
      ::idlepb::CollectionGlobalConfigUpgradeStar* upgrade_star);
  ::idlepb::CollectionGlobalConfigUpgradeStar* unsafe_arena_release_upgrade_star();

  // .idlepb.CollectionGlobalConfigReset reset = 4;
  bool has_reset() const;
  private:
  bool _internal_has_reset() const;
  public:
  void clear_reset();
  const ::idlepb::CollectionGlobalConfigReset& reset() const;
  PROTOBUF_NODISCARD ::idlepb::CollectionGlobalConfigReset* release_reset();
  ::idlepb::CollectionGlobalConfigReset* mutable_reset();
  void set_allocated_reset(::idlepb::CollectionGlobalConfigReset* reset);
  private:
  const ::idlepb::CollectionGlobalConfigReset& _internal_reset() const;
  ::idlepb::CollectionGlobalConfigReset* _internal_mutable_reset();
  public:
  void unsafe_arena_set_allocated_reset(
      ::idlepb::CollectionGlobalConfigReset* reset);
  ::idlepb::CollectionGlobalConfigReset* unsafe_arena_release_reset();

  // @@protoc_insertion_point(class_scope:idlepb.CollectionGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > active_by_quality_;
    mutable std::atomic<int> _active_by_quality_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigLevelUpEntry > levelup_;
    ::idlepb::CollectionGlobalConfigUpgradeStar* upgrade_star_;
    ::idlepb::CollectionGlobalConfigReset* reset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CurrencyGlobalConfigItem2Currency final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CurrencyGlobalConfigItem2Currency) */ {
 public:
  inline CurrencyGlobalConfigItem2Currency() : CurrencyGlobalConfigItem2Currency(nullptr) {}
  ~CurrencyGlobalConfigItem2Currency() override;
  explicit PROTOBUF_CONSTEXPR CurrencyGlobalConfigItem2Currency(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrencyGlobalConfigItem2Currency(const CurrencyGlobalConfigItem2Currency& from);
  CurrencyGlobalConfigItem2Currency(CurrencyGlobalConfigItem2Currency&& from) noexcept
    : CurrencyGlobalConfigItem2Currency() {
    *this = ::std::move(from);
  }

  inline CurrencyGlobalConfigItem2Currency& operator=(const CurrencyGlobalConfigItem2Currency& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrencyGlobalConfigItem2Currency& operator=(CurrencyGlobalConfigItem2Currency&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrencyGlobalConfigItem2Currency& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrencyGlobalConfigItem2Currency* internal_default_instance() {
    return reinterpret_cast<const CurrencyGlobalConfigItem2Currency*>(
               &_CurrencyGlobalConfigItem2Currency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CurrencyGlobalConfigItem2Currency& a, CurrencyGlobalConfigItem2Currency& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrencyGlobalConfigItem2Currency* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrencyGlobalConfigItem2Currency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrencyGlobalConfigItem2Currency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrencyGlobalConfigItem2Currency>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrencyGlobalConfigItem2Currency& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CurrencyGlobalConfigItem2Currency& from) {
    CurrencyGlobalConfigItem2Currency::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrencyGlobalConfigItem2Currency* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CurrencyGlobalConfigItem2Currency";
  }
  protected:
  explicit CurrencyGlobalConfigItem2Currency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemCfgIdFieldNumber = 1,
    kCurrencyTypeFieldNumber = 2,
  };
  // int32 item_cfg_id = 1;
  void clear_item_cfg_id();
  int32_t item_cfg_id() const;
  void set_item_cfg_id(int32_t value);
  private:
  int32_t _internal_item_cfg_id() const;
  void _internal_set_item_cfg_id(int32_t value);
  public:

  // .idlepb.CurrencyType currency_type = 2;
  void clear_currency_type();
  ::idlepb::CurrencyType currency_type() const;
  void set_currency_type(::idlepb::CurrencyType value);
  private:
  ::idlepb::CurrencyType _internal_currency_type() const;
  void _internal_set_currency_type(::idlepb::CurrencyType value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CurrencyGlobalConfigItem2Currency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t item_cfg_id_;
    int currency_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API CurrencyGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CurrencyGlobalConfig) */ {
 public:
  inline CurrencyGlobalConfig() : CurrencyGlobalConfig(nullptr) {}
  ~CurrencyGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR CurrencyGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrencyGlobalConfig(const CurrencyGlobalConfig& from);
  CurrencyGlobalConfig(CurrencyGlobalConfig&& from) noexcept
    : CurrencyGlobalConfig() {
    *this = ::std::move(from);
  }

  inline CurrencyGlobalConfig& operator=(const CurrencyGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrencyGlobalConfig& operator=(CurrencyGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrencyGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrencyGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const CurrencyGlobalConfig*>(
               &_CurrencyGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CurrencyGlobalConfig& a, CurrencyGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrencyGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrencyGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrencyGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrencyGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrencyGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CurrencyGlobalConfig& from) {
    CurrencyGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrencyGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CurrencyGlobalConfig";
  }
  protected:
  explicit CurrencyGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItem2CurrencyFieldNumber = 1,
  };
  // repeated .idlepb.CurrencyGlobalConfigItem2Currency item2currency = 1;
  int item2currency_size() const;
  private:
  int _internal_item2currency_size() const;
  public:
  void clear_item2currency();
  ::idlepb::CurrencyGlobalConfigItem2Currency* mutable_item2currency(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CurrencyGlobalConfigItem2Currency >*
      mutable_item2currency();
  private:
  const ::idlepb::CurrencyGlobalConfigItem2Currency& _internal_item2currency(int index) const;
  ::idlepb::CurrencyGlobalConfigItem2Currency* _internal_add_item2currency();
  public:
  const ::idlepb::CurrencyGlobalConfigItem2Currency& item2currency(int index) const;
  ::idlepb::CurrencyGlobalConfigItem2Currency* add_item2currency();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CurrencyGlobalConfigItem2Currency >&
      item2currency() const;

  // @@protoc_insertion_point(class_scope:idlepb.CurrencyGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CurrencyGlobalConfigItem2Currency > item2currency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfigRoleInitAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfigRoleInitAttributes) */ {
 public:
  inline PlayerGlobalConfigRoleInitAttributes() : PlayerGlobalConfigRoleInitAttributes(nullptr) {}
  ~PlayerGlobalConfigRoleInitAttributes() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfigRoleInitAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfigRoleInitAttributes(const PlayerGlobalConfigRoleInitAttributes& from);
  PlayerGlobalConfigRoleInitAttributes(PlayerGlobalConfigRoleInitAttributes&& from) noexcept
    : PlayerGlobalConfigRoleInitAttributes() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfigRoleInitAttributes& operator=(const PlayerGlobalConfigRoleInitAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfigRoleInitAttributes& operator=(PlayerGlobalConfigRoleInitAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfigRoleInitAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfigRoleInitAttributes* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfigRoleInitAttributes*>(
               &_PlayerGlobalConfigRoleInitAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PlayerGlobalConfigRoleInitAttributes& a, PlayerGlobalConfigRoleInitAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfigRoleInitAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfigRoleInitAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfigRoleInitAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfigRoleInitAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfigRoleInitAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfigRoleInitAttributes& from) {
    PlayerGlobalConfigRoleInitAttributes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfigRoleInitAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfigRoleInitAttributes";
  }
  protected:
  explicit PlayerGlobalConfigRoleInitAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHpFieldNumber = 1,
    kMpFieldNumber = 2,
    kPhyAttFieldNumber = 3,
    kPhyDefFieldNumber = 4,
    kMagAttFieldNumber = 5,
    kMagDefFieldNumber = 6,
    kHpRecoverPercentFieldNumber = 7,
    kMpRecoverPercentFieldNumber = 8,
    kCritCoefFieldNumber = 9,
    kCritBlockFieldNumber = 10,
    kMindFieldNumber = 11,
  };
  // float hp = 1;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // float mp = 2;
  void clear_mp();
  float mp() const;
  void set_mp(float value);
  private:
  float _internal_mp() const;
  void _internal_set_mp(float value);
  public:

  // float phy_att = 3;
  void clear_phy_att();
  float phy_att() const;
  void set_phy_att(float value);
  private:
  float _internal_phy_att() const;
  void _internal_set_phy_att(float value);
  public:

  // float phy_def = 4;
  void clear_phy_def();
  float phy_def() const;
  void set_phy_def(float value);
  private:
  float _internal_phy_def() const;
  void _internal_set_phy_def(float value);
  public:

  // float mag_att = 5;
  void clear_mag_att();
  float mag_att() const;
  void set_mag_att(float value);
  private:
  float _internal_mag_att() const;
  void _internal_set_mag_att(float value);
  public:

  // float mag_def = 6;
  void clear_mag_def();
  float mag_def() const;
  void set_mag_def(float value);
  private:
  float _internal_mag_def() const;
  void _internal_set_mag_def(float value);
  public:

  // float hp_recover_percent = 7;
  void clear_hp_recover_percent();
  float hp_recover_percent() const;
  void set_hp_recover_percent(float value);
  private:
  float _internal_hp_recover_percent() const;
  void _internal_set_hp_recover_percent(float value);
  public:

  // float mp_recover_percent = 8;
  void clear_mp_recover_percent();
  float mp_recover_percent() const;
  void set_mp_recover_percent(float value);
  private:
  float _internal_mp_recover_percent() const;
  void _internal_set_mp_recover_percent(float value);
  public:

  // float crit_coef = 9;
  void clear_crit_coef();
  float crit_coef() const;
  void set_crit_coef(float value);
  private:
  float _internal_crit_coef() const;
  void _internal_set_crit_coef(float value);
  public:

  // float crit_block = 10;
  void clear_crit_block();
  float crit_block() const;
  void set_crit_block(float value);
  private:
  float _internal_crit_block() const;
  void _internal_set_crit_block(float value);
  public:

  // float mind = 11;
  void clear_mind();
  float mind() const;
  void set_mind(float value);
  private:
  float _internal_mind() const;
  void _internal_set_mind(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfigRoleInitAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float hp_;
    float mp_;
    float phy_att_;
    float phy_def_;
    float mag_att_;
    float mag_def_;
    float hp_recover_percent_;
    float mp_recover_percent_;
    float crit_coef_;
    float crit_block_;
    float mind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfigConstants final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfigConstants) */ {
 public:
  inline PlayerGlobalConfigConstants() : PlayerGlobalConfigConstants(nullptr) {}
  ~PlayerGlobalConfigConstants() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfigConstants(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfigConstants(const PlayerGlobalConfigConstants& from);
  PlayerGlobalConfigConstants(PlayerGlobalConfigConstants&& from) noexcept
    : PlayerGlobalConfigConstants() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfigConstants& operator=(const PlayerGlobalConfigConstants& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfigConstants& operator=(PlayerGlobalConfigConstants&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfigConstants& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfigConstants* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfigConstants*>(
               &_PlayerGlobalConfigConstants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PlayerGlobalConfigConstants& a, PlayerGlobalConfigConstants& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfigConstants* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfigConstants* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfigConstants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfigConstants>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfigConstants& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfigConstants& from) {
    PlayerGlobalConfigConstants::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfigConstants* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfigConstants";
  }
  protected:
  explicit PlayerGlobalConfigConstants(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitRadiusFieldNumber = 1,
    kAutoMoveStopTimeFieldNumber = 2,
    kAutoMoveWalkTimeFieldNumber = 3,
    kMoveSpeedFieldNumber = 4,
    kAttackIntervalTimeFieldNumber = 5,
    kAutoHealTriggerRatioHpFieldNumber = 6,
    kAutoHealTriggerRatioMpFieldNumber = 7,
    kPlayerLockDistanceHandFieldNumber = 8,
    kPlayerLockDistanceAutoFieldNumber = 9,
    kPlayerLockDistanceMaxFieldNumber = 10,
    kPlayerLockDistanceNearFieldNumber = 11,
    kPlayerLockDistanceScreenFieldNumber = 12,
    kEnterScaleSizeDistance2DFieldNumber = 13,
    kPlayerRebornTimeFieldNumber = 14,
    kPlayerReduceTimeFieldNumber = 15,
    kPlayerReduceNumMaxFieldNumber = 16,
    kPlayerEscapeTimeFieldNumber = 17,
    kBattleStatusSecondsFieldNumber = 18,
    kMaxExploreTimeFieldNumber = 19,
    kPlayerTeleportCooldownFieldNumber = 20,
    kSwitchCultivationDirectionMinRankFieldNumber = 21,
    kServerTakeControlIdleSecondsFieldNumber = 22,
    kPlayerLocationCorrectionDistanceNearFieldNumber = 23,
    kPlayerLocationCorrectionDistanceFarFieldNumber = 24,
    kPlayerCorrectionCostSpeedFieldNumber = 25,
    kMiniMapWorldWidthFieldNumber = 26,
    kMiniMapWorldHeightFieldNumber = 27,
    kActivateEntitiesDistanceFieldNumber = 28,
    kSelectBoxAutoDisappearTimeFieldNumber = 29,
    kInterveneToAutoSecondsFieldNumber = 30,
    kSetPauseMoveFunctionTimeFieldNumber = 31,
  };
  // float init_radius = 1;
  void clear_init_radius();
  float init_radius() const;
  void set_init_radius(float value);
  private:
  float _internal_init_radius() const;
  void _internal_set_init_radius(float value);
  public:

  // float auto_move_stop_time = 2;
  void clear_auto_move_stop_time();
  float auto_move_stop_time() const;
  void set_auto_move_stop_time(float value);
  private:
  float _internal_auto_move_stop_time() const;
  void _internal_set_auto_move_stop_time(float value);
  public:

  // float auto_move_walk_time = 3;
  void clear_auto_move_walk_time();
  float auto_move_walk_time() const;
  void set_auto_move_walk_time(float value);
  private:
  float _internal_auto_move_walk_time() const;
  void _internal_set_auto_move_walk_time(float value);
  public:

  // int32 move_speed = 4;
  void clear_move_speed();
  int32_t move_speed() const;
  void set_move_speed(int32_t value);
  private:
  int32_t _internal_move_speed() const;
  void _internal_set_move_speed(int32_t value);
  public:

  // float attack_interval_time = 5;
  void clear_attack_interval_time();
  float attack_interval_time() const;
  void set_attack_interval_time(float value);
  private:
  float _internal_attack_interval_time() const;
  void _internal_set_attack_interval_time(float value);
  public:

  // float auto_heal_trigger_ratio_hp = 6;
  void clear_auto_heal_trigger_ratio_hp();
  float auto_heal_trigger_ratio_hp() const;
  void set_auto_heal_trigger_ratio_hp(float value);
  private:
  float _internal_auto_heal_trigger_ratio_hp() const;
  void _internal_set_auto_heal_trigger_ratio_hp(float value);
  public:

  // float auto_heal_trigger_ratio_mp = 7;
  void clear_auto_heal_trigger_ratio_mp();
  float auto_heal_trigger_ratio_mp() const;
  void set_auto_heal_trigger_ratio_mp(float value);
  private:
  float _internal_auto_heal_trigger_ratio_mp() const;
  void _internal_set_auto_heal_trigger_ratio_mp(float value);
  public:

  // float player_lock_distance_hand = 8;
  void clear_player_lock_distance_hand();
  float player_lock_distance_hand() const;
  void set_player_lock_distance_hand(float value);
  private:
  float _internal_player_lock_distance_hand() const;
  void _internal_set_player_lock_distance_hand(float value);
  public:

  // float player_lock_distance_auto = 9;
  void clear_player_lock_distance_auto();
  float player_lock_distance_auto() const;
  void set_player_lock_distance_auto(float value);
  private:
  float _internal_player_lock_distance_auto() const;
  void _internal_set_player_lock_distance_auto(float value);
  public:

  // float player_lock_distance_max = 10;
  void clear_player_lock_distance_max();
  float player_lock_distance_max() const;
  void set_player_lock_distance_max(float value);
  private:
  float _internal_player_lock_distance_max() const;
  void _internal_set_player_lock_distance_max(float value);
  public:

  // float player_lock_distance_near = 11;
  void clear_player_lock_distance_near();
  float player_lock_distance_near() const;
  void set_player_lock_distance_near(float value);
  private:
  float _internal_player_lock_distance_near() const;
  void _internal_set_player_lock_distance_near(float value);
  public:

  // float player_lock_distance_screen = 12;
  void clear_player_lock_distance_screen();
  float player_lock_distance_screen() const;
  void set_player_lock_distance_screen(float value);
  private:
  float _internal_player_lock_distance_screen() const;
  void _internal_set_player_lock_distance_screen(float value);
  public:

  // float enter_scale_size_distance_2d = 13;
  void clear_enter_scale_size_distance_2d();
  float enter_scale_size_distance_2d() const;
  void set_enter_scale_size_distance_2d(float value);
  private:
  float _internal_enter_scale_size_distance_2d() const;
  void _internal_set_enter_scale_size_distance_2d(float value);
  public:

  // float player_reborn_time = 14;
  void clear_player_reborn_time();
  float player_reborn_time() const;
  void set_player_reborn_time(float value);
  private:
  float _internal_player_reborn_time() const;
  void _internal_set_player_reborn_time(float value);
  public:

  // float player_reduce_time = 15;
  void clear_player_reduce_time();
  float player_reduce_time() const;
  void set_player_reduce_time(float value);
  private:
  float _internal_player_reduce_time() const;
  void _internal_set_player_reduce_time(float value);
  public:

  // float player_reduce_num_max = 16;
  void clear_player_reduce_num_max();
  float player_reduce_num_max() const;
  void set_player_reduce_num_max(float value);
  private:
  float _internal_player_reduce_num_max() const;
  void _internal_set_player_reduce_num_max(float value);
  public:

  // float player_escape_time = 17;
  void clear_player_escape_time();
  float player_escape_time() const;
  void set_player_escape_time(float value);
  private:
  float _internal_player_escape_time() const;
  void _internal_set_player_escape_time(float value);
  public:

  // float battle_status_seconds = 18;
  void clear_battle_status_seconds();
  float battle_status_seconds() const;
  void set_battle_status_seconds(float value);
  private:
  float _internal_battle_status_seconds() const;
  void _internal_set_battle_status_seconds(float value);
  public:

  // int32 max_explore_time = 19;
  void clear_max_explore_time();
  int32_t max_explore_time() const;
  void set_max_explore_time(int32_t value);
  private:
  int32_t _internal_max_explore_time() const;
  void _internal_set_max_explore_time(int32_t value);
  public:

  // float player_teleport_cooldown = 20;
  void clear_player_teleport_cooldown();
  float player_teleport_cooldown() const;
  void set_player_teleport_cooldown(float value);
  private:
  float _internal_player_teleport_cooldown() const;
  void _internal_set_player_teleport_cooldown(float value);
  public:

  // int32 switch_cultivation_direction_min_rank = 21;
  void clear_switch_cultivation_direction_min_rank();
  int32_t switch_cultivation_direction_min_rank() const;
  void set_switch_cultivation_direction_min_rank(int32_t value);
  private:
  int32_t _internal_switch_cultivation_direction_min_rank() const;
  void _internal_set_switch_cultivation_direction_min_rank(int32_t value);
  public:

  // float server_take_control_idle_seconds = 22;
  void clear_server_take_control_idle_seconds();
  float server_take_control_idle_seconds() const;
  void set_server_take_control_idle_seconds(float value);
  private:
  float _internal_server_take_control_idle_seconds() const;
  void _internal_set_server_take_control_idle_seconds(float value);
  public:

  // float player_location_correction_distance_near = 23;
  void clear_player_location_correction_distance_near();
  float player_location_correction_distance_near() const;
  void set_player_location_correction_distance_near(float value);
  private:
  float _internal_player_location_correction_distance_near() const;
  void _internal_set_player_location_correction_distance_near(float value);
  public:

  // float player_location_correction_distance_far = 24;
  void clear_player_location_correction_distance_far();
  float player_location_correction_distance_far() const;
  void set_player_location_correction_distance_far(float value);
  private:
  float _internal_player_location_correction_distance_far() const;
  void _internal_set_player_location_correction_distance_far(float value);
  public:

  // float player_correction_cost_speed = 25;
  void clear_player_correction_cost_speed();
  float player_correction_cost_speed() const;
  void set_player_correction_cost_speed(float value);
  private:
  float _internal_player_correction_cost_speed() const;
  void _internal_set_player_correction_cost_speed(float value);
  public:

  // float mini_map_world_width = 26;
  void clear_mini_map_world_width();
  float mini_map_world_width() const;
  void set_mini_map_world_width(float value);
  private:
  float _internal_mini_map_world_width() const;
  void _internal_set_mini_map_world_width(float value);
  public:

  // float mini_map_world_height = 27;
  void clear_mini_map_world_height();
  float mini_map_world_height() const;
  void set_mini_map_world_height(float value);
  private:
  float _internal_mini_map_world_height() const;
  void _internal_set_mini_map_world_height(float value);
  public:

  // float activate_entities_distance = 28;
  void clear_activate_entities_distance();
  float activate_entities_distance() const;
  void set_activate_entities_distance(float value);
  private:
  float _internal_activate_entities_distance() const;
  void _internal_set_activate_entities_distance(float value);
  public:

  // float select_box_auto_disappear_time = 29;
  void clear_select_box_auto_disappear_time();
  float select_box_auto_disappear_time() const;
  void set_select_box_auto_disappear_time(float value);
  private:
  float _internal_select_box_auto_disappear_time() const;
  void _internal_set_select_box_auto_disappear_time(float value);
  public:

  // float intervene_to_auto_seconds = 30;
  void clear_intervene_to_auto_seconds();
  float intervene_to_auto_seconds() const;
  void set_intervene_to_auto_seconds(float value);
  private:
  float _internal_intervene_to_auto_seconds() const;
  void _internal_set_intervene_to_auto_seconds(float value);
  public:

  // float set_pause_move_function_time = 31;
  void clear_set_pause_move_function_time();
  float set_pause_move_function_time() const;
  void set_set_pause_move_function_time(float value);
  private:
  float _internal_set_pause_move_function_time() const;
  void _internal_set_set_pause_move_function_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfigConstants)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float init_radius_;
    float auto_move_stop_time_;
    float auto_move_walk_time_;
    int32_t move_speed_;
    float attack_interval_time_;
    float auto_heal_trigger_ratio_hp_;
    float auto_heal_trigger_ratio_mp_;
    float player_lock_distance_hand_;
    float player_lock_distance_auto_;
    float player_lock_distance_max_;
    float player_lock_distance_near_;
    float player_lock_distance_screen_;
    float enter_scale_size_distance_2d_;
    float player_reborn_time_;
    float player_reduce_time_;
    float player_reduce_num_max_;
    float player_escape_time_;
    float battle_status_seconds_;
    int32_t max_explore_time_;
    float player_teleport_cooldown_;
    int32_t switch_cultivation_direction_min_rank_;
    float server_take_control_idle_seconds_;
    float player_location_correction_distance_near_;
    float player_location_correction_distance_far_;
    float player_correction_cost_speed_;
    float mini_map_world_width_;
    float mini_map_world_height_;
    float activate_entities_distance_;
    float select_box_auto_disappear_time_;
    float intervene_to_auto_seconds_;
    float set_pause_move_function_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfigAbility final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfigAbility) */ {
 public:
  inline PlayerGlobalConfigAbility() : PlayerGlobalConfigAbility(nullptr) {}
  ~PlayerGlobalConfigAbility() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfigAbility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfigAbility(const PlayerGlobalConfigAbility& from);
  PlayerGlobalConfigAbility(PlayerGlobalConfigAbility&& from) noexcept
    : PlayerGlobalConfigAbility() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfigAbility& operator=(const PlayerGlobalConfigAbility& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfigAbility& operator=(PlayerGlobalConfigAbility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfigAbility& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfigAbility* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfigAbility*>(
               &_PlayerGlobalConfigAbility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PlayerGlobalConfigAbility& a, PlayerGlobalConfigAbility& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfigAbility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfigAbility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfigAbility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfigAbility>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfigAbility& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfigAbility& from) {
    PlayerGlobalConfigAbility::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfigAbility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfigAbility";
  }
  protected:
  explicit PlayerGlobalConfigAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsUnlockRankFieldNumber = 3,
    kOpenRankFieldNumber = 1,
    kOpenSecondaryRankFieldNumber = 2,
  };
  // repeated int32 slots_unlock_rank = 3;
  int slots_unlock_rank_size() const;
  private:
  int _internal_slots_unlock_rank_size() const;
  public:
  void clear_slots_unlock_rank();
  private:
  int32_t _internal_slots_unlock_rank(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_slots_unlock_rank() const;
  void _internal_add_slots_unlock_rank(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_slots_unlock_rank();
  public:
  int32_t slots_unlock_rank(int index) const;
  void set_slots_unlock_rank(int index, int32_t value);
  void add_slots_unlock_rank(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      slots_unlock_rank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_slots_unlock_rank();

  // int32 open_rank = 1;
  void clear_open_rank();
  int32_t open_rank() const;
  void set_open_rank(int32_t value);
  private:
  int32_t _internal_open_rank() const;
  void _internal_set_open_rank(int32_t value);
  public:

  // int32 open_secondary_rank = 2;
  void clear_open_secondary_rank();
  int32_t open_secondary_rank() const;
  void set_open_secondary_rank(int32_t value);
  private:
  int32_t _internal_open_secondary_rank() const;
  void _internal_set_open_secondary_rank(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfigAbility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > slots_unlock_rank_;
    mutable std::atomic<int> _slots_unlock_rank_cached_byte_size_;
    int32_t open_rank_;
    int32_t open_secondary_rank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfigBreathingExercise final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfigBreathingExercise) */ {
 public:
  inline PlayerGlobalConfigBreathingExercise() : PlayerGlobalConfigBreathingExercise(nullptr) {}
  ~PlayerGlobalConfigBreathingExercise() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfigBreathingExercise(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfigBreathingExercise(const PlayerGlobalConfigBreathingExercise& from);
  PlayerGlobalConfigBreathingExercise(PlayerGlobalConfigBreathingExercise&& from) noexcept
    : PlayerGlobalConfigBreathingExercise() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfigBreathingExercise& operator=(const PlayerGlobalConfigBreathingExercise& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfigBreathingExercise& operator=(PlayerGlobalConfigBreathingExercise&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfigBreathingExercise& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfigBreathingExercise* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfigBreathingExercise*>(
               &_PlayerGlobalConfigBreathingExercise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PlayerGlobalConfigBreathingExercise& a, PlayerGlobalConfigBreathingExercise& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfigBreathingExercise* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfigBreathingExercise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfigBreathingExercise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfigBreathingExercise>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfigBreathingExercise& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfigBreathingExercise& from) {
    PlayerGlobalConfigBreathingExercise::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfigBreathingExercise* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfigBreathingExercise";
  }
  protected:
  explicit PlayerGlobalConfigBreathingExercise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 1,
    kCancelPctFieldNumber = 2,
    kHighMinPctFieldNumber = 3,
    kPerfectMinPctFieldNumber = 4,
    kPerfectMaxPctFieldNumber = 5,
    kRate2FieldNumber = 6,
    kRate5FieldNumber = 7,
    kRate10FieldNumber = 8,
    kBasicLingQiFieldNumber = 9,
  };
  // float speed = 1;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float cancel_pct = 2;
  void clear_cancel_pct();
  float cancel_pct() const;
  void set_cancel_pct(float value);
  private:
  float _internal_cancel_pct() const;
  void _internal_set_cancel_pct(float value);
  public:

  // float high_min_pct = 3;
  void clear_high_min_pct();
  float high_min_pct() const;
  void set_high_min_pct(float value);
  private:
  float _internal_high_min_pct() const;
  void _internal_set_high_min_pct(float value);
  public:

  // float perfect_min_pct = 4;
  void clear_perfect_min_pct();
  float perfect_min_pct() const;
  void set_perfect_min_pct(float value);
  private:
  float _internal_perfect_min_pct() const;
  void _internal_set_perfect_min_pct(float value);
  public:

  // float perfect_max_pct = 5;
  void clear_perfect_max_pct();
  float perfect_max_pct() const;
  void set_perfect_max_pct(float value);
  private:
  float _internal_perfect_max_pct() const;
  void _internal_set_perfect_max_pct(float value);
  public:

  // int32 rate2 = 6;
  void clear_rate2();
  int32_t rate2() const;
  void set_rate2(int32_t value);
  private:
  int32_t _internal_rate2() const;
  void _internal_set_rate2(int32_t value);
  public:

  // int32 rate5 = 7;
  void clear_rate5();
  int32_t rate5() const;
  void set_rate5(int32_t value);
  private:
  int32_t _internal_rate5() const;
  void _internal_set_rate5(int32_t value);
  public:

  // int32 rate10 = 8;
  void clear_rate10();
  int32_t rate10() const;
  void set_rate10(int32_t value);
  private:
  int32_t _internal_rate10() const;
  void _internal_set_rate10(int32_t value);
  public:

  // float basic_ling_qi = 9;
  void clear_basic_ling_qi();
  float basic_ling_qi() const;
  void set_basic_ling_qi(float value);
  private:
  float _internal_basic_ling_qi() const;
  void _internal_set_basic_ling_qi(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfigBreathingExercise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float speed_;
    float cancel_pct_;
    float high_min_pct_;
    float perfect_min_pct_;
    float perfect_max_pct_;
    int32_t rate2_;
    int32_t rate5_;
    int32_t rate10_;
    float basic_ling_qi_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfigThunderTestDegreeConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfigThunderTestDegreeConfig) */ {
 public:
  inline PlayerGlobalConfigThunderTestDegreeConfig() : PlayerGlobalConfigThunderTestDegreeConfig(nullptr) {}
  ~PlayerGlobalConfigThunderTestDegreeConfig() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfigThunderTestDegreeConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfigThunderTestDegreeConfig(const PlayerGlobalConfigThunderTestDegreeConfig& from);
  PlayerGlobalConfigThunderTestDegreeConfig(PlayerGlobalConfigThunderTestDegreeConfig&& from) noexcept
    : PlayerGlobalConfigThunderTestDegreeConfig() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfigThunderTestDegreeConfig& operator=(const PlayerGlobalConfigThunderTestDegreeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfigThunderTestDegreeConfig& operator=(PlayerGlobalConfigThunderTestDegreeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfigThunderTestDegreeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfigThunderTestDegreeConfig* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfigThunderTestDegreeConfig*>(
               &_PlayerGlobalConfigThunderTestDegreeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PlayerGlobalConfigThunderTestDegreeConfig& a, PlayerGlobalConfigThunderTestDegreeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfigThunderTestDegreeConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfigThunderTestDegreeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfigThunderTestDegreeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfigThunderTestDegreeConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfigThunderTestDegreeConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfigThunderTestDegreeConfig& from) {
    PlayerGlobalConfigThunderTestDegreeConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfigThunderTestDegreeConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfigThunderTestDegreeConfig";
  }
  protected:
  explicit PlayerGlobalConfigThunderTestDegreeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDegreeFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // int32 degree = 1;
  void clear_degree();
  int32_t degree() const;
  void set_degree(int32_t value);
  private:
  int32_t _internal_degree() const;
  void _internal_set_degree(int32_t value);
  public:

  // float val = 2;
  void clear_val();
  float val() const;
  void set_val(float value);
  private:
  float _internal_val() const;
  void _internal_set_val(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfigThunderTestDegreeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t degree_;
    float val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfigThunderTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfigThunderTest) */ {
 public:
  inline PlayerGlobalConfigThunderTest() : PlayerGlobalConfigThunderTest(nullptr) {}
  ~PlayerGlobalConfigThunderTest() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfigThunderTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfigThunderTest(const PlayerGlobalConfigThunderTest& from);
  PlayerGlobalConfigThunderTest(PlayerGlobalConfigThunderTest&& from) noexcept
    : PlayerGlobalConfigThunderTest() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfigThunderTest& operator=(const PlayerGlobalConfigThunderTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfigThunderTest& operator=(PlayerGlobalConfigThunderTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfigThunderTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfigThunderTest* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfigThunderTest*>(
               &_PlayerGlobalConfigThunderTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PlayerGlobalConfigThunderTest& a, PlayerGlobalConfigThunderTest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfigThunderTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfigThunderTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfigThunderTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfigThunderTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfigThunderTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfigThunderTest& from) {
    PlayerGlobalConfigThunderTest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfigThunderTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfigThunderTest";
  }
  protected:
  explicit PlayerGlobalConfigThunderTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDamageCoefFieldNumber = 1,
    kDamageBaseFieldNumber = 2,
  };
  // repeated float damage_coef = 1;
  int damage_coef_size() const;
  private:
  int _internal_damage_coef_size() const;
  public:
  void clear_damage_coef();
  private:
  float _internal_damage_coef(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_damage_coef() const;
  void _internal_add_damage_coef(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_damage_coef();
  public:
  float damage_coef(int index) const;
  void set_damage_coef(int index, float value);
  void add_damage_coef(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      damage_coef() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_damage_coef();

  // repeated .idlepb.PlayerGlobalConfigThunderTestDegreeConfig damage_base = 2;
  int damage_base_size() const;
  private:
  int _internal_damage_base_size() const;
  public:
  void clear_damage_base();
  ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig* mutable_damage_base(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig >*
      mutable_damage_base();
  private:
  const ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig& _internal_damage_base(int index) const;
  ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig* _internal_add_damage_base();
  public:
  const ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig& damage_base(int index) const;
  ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig* add_damage_base();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig >&
      damage_base() const;

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfigThunderTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > damage_coef_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig > damage_base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfigAlchemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfigAlchemy) */ {
 public:
  inline PlayerGlobalConfigAlchemy() : PlayerGlobalConfigAlchemy(nullptr) {}
  ~PlayerGlobalConfigAlchemy() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfigAlchemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfigAlchemy(const PlayerGlobalConfigAlchemy& from);
  PlayerGlobalConfigAlchemy(PlayerGlobalConfigAlchemy&& from) noexcept
    : PlayerGlobalConfigAlchemy() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfigAlchemy& operator=(const PlayerGlobalConfigAlchemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfigAlchemy& operator=(PlayerGlobalConfigAlchemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfigAlchemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfigAlchemy* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfigAlchemy*>(
               &_PlayerGlobalConfigAlchemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PlayerGlobalConfigAlchemy& a, PlayerGlobalConfigAlchemy& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfigAlchemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfigAlchemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfigAlchemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfigAlchemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfigAlchemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfigAlchemy& from) {
    PlayerGlobalConfigAlchemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfigAlchemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfigAlchemy";
  }
  protected:
  explicit PlayerGlobalConfigAlchemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEachRefiningSecondsFieldNumber = 1,
    kBigChanceValueFieldNumber = 2,
    kSmallChanceValueFieldNumber = 3,
    kMaxDailyCountFieldNumber = 4,
  };
  // float each_refining_seconds = 1;
  void clear_each_refining_seconds();
  float each_refining_seconds() const;
  void set_each_refining_seconds(float value);
  private:
  float _internal_each_refining_seconds() const;
  void _internal_set_each_refining_seconds(float value);
  public:

  // int32 big_chance_value = 2;
  void clear_big_chance_value();
  int32_t big_chance_value() const;
  void set_big_chance_value(int32_t value);
  private:
  int32_t _internal_big_chance_value() const;
  void _internal_set_big_chance_value(int32_t value);
  public:

  // int32 small_chance_value = 3;
  void clear_small_chance_value();
  int32_t small_chance_value() const;
  void set_small_chance_value(int32_t value);
  private:
  int32_t _internal_small_chance_value() const;
  void _internal_set_small_chance_value(int32_t value);
  public:

  // int32 max_daily_count = 4;
  void clear_max_daily_count();
  int32_t max_daily_count() const;
  void set_max_daily_count(int32_t value);
  private:
  int32_t _internal_max_daily_count() const;
  void _internal_set_max_daily_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfigAlchemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float each_refining_seconds_;
    int32_t big_chance_value_;
    int32_t small_chance_value_;
    int32_t max_daily_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfigForgeDestroyBackItemConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig) */ {
 public:
  inline PlayerGlobalConfigForgeDestroyBackItemConfig() : PlayerGlobalConfigForgeDestroyBackItemConfig(nullptr) {}
  ~PlayerGlobalConfigForgeDestroyBackItemConfig() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfigForgeDestroyBackItemConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfigForgeDestroyBackItemConfig(const PlayerGlobalConfigForgeDestroyBackItemConfig& from);
  PlayerGlobalConfigForgeDestroyBackItemConfig(PlayerGlobalConfigForgeDestroyBackItemConfig&& from) noexcept
    : PlayerGlobalConfigForgeDestroyBackItemConfig() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfigForgeDestroyBackItemConfig& operator=(const PlayerGlobalConfigForgeDestroyBackItemConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfigForgeDestroyBackItemConfig& operator=(PlayerGlobalConfigForgeDestroyBackItemConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfigForgeDestroyBackItemConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfigForgeDestroyBackItemConfig* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfigForgeDestroyBackItemConfig*>(
               &_PlayerGlobalConfigForgeDestroyBackItemConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PlayerGlobalConfigForgeDestroyBackItemConfig& a, PlayerGlobalConfigForgeDestroyBackItemConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfigForgeDestroyBackItemConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfigForgeDestroyBackItemConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfigForgeDestroyBackItemConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfigForgeDestroyBackItemConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfigForgeDestroyBackItemConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfigForgeDestroyBackItemConfig& from) {
    PlayerGlobalConfigForgeDestroyBackItemConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfigForgeDestroyBackItemConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig";
  }
  protected:
  explicit PlayerGlobalConfigForgeDestroyBackItemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDegreeFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kItemNumFieldNumber = 3,
  };
  // int32 degree = 1;
  void clear_degree();
  int32_t degree() const;
  void set_degree(int32_t value);
  private:
  int32_t _internal_degree() const;
  void _internal_set_degree(int32_t value);
  public:

  // int32 item_id = 2;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 item_num = 3;
  void clear_item_num();
  int32_t item_num() const;
  void set_item_num(int32_t value);
  private:
  int32_t _internal_item_num() const;
  void _internal_set_item_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t degree_;
    int32_t item_id_;
    int32_t item_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfigForge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfigForge) */ {
 public:
  inline PlayerGlobalConfigForge() : PlayerGlobalConfigForge(nullptr) {}
  ~PlayerGlobalConfigForge() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfigForge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfigForge(const PlayerGlobalConfigForge& from);
  PlayerGlobalConfigForge(PlayerGlobalConfigForge&& from) noexcept
    : PlayerGlobalConfigForge() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfigForge& operator=(const PlayerGlobalConfigForge& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfigForge& operator=(PlayerGlobalConfigForge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfigForge& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfigForge* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfigForge*>(
               &_PlayerGlobalConfigForge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PlayerGlobalConfigForge& a, PlayerGlobalConfigForge& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfigForge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfigForge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfigForge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfigForge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfigForge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfigForge& from) {
    PlayerGlobalConfigForge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfigForge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfigForge";
  }
  protected:
  explicit PlayerGlobalConfigForge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestroyGetItemNumFieldNumber = 8,
    kEachRefiningSecondsFieldNumber = 1,
    kBigChanceValueFieldNumber = 2,
    kSmallChanceValueFieldNumber = 3,
    kMaxDailyCountFieldNumber = 4,
    kMaxDailyExtraMaterialsUseCountFieldNumber = 5,
    kRevertCostGoldFieldNumber = 6,
    kDestroyCostGoldFieldNumber = 7,
    kFoundCostGoldFieldNumber = 9,
    kFoundTimeFieldNumber = 10,
  };
  // repeated .idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig destroy_get_item_num = 8;
  int destroy_get_item_num_size() const;
  private:
  int _internal_destroy_get_item_num_size() const;
  public:
  void clear_destroy_get_item_num();
  ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig* mutable_destroy_get_item_num(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig >*
      mutable_destroy_get_item_num();
  private:
  const ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig& _internal_destroy_get_item_num(int index) const;
  ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig* _internal_add_destroy_get_item_num();
  public:
  const ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig& destroy_get_item_num(int index) const;
  ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig* add_destroy_get_item_num();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig >&
      destroy_get_item_num() const;

  // float each_refining_seconds = 1;
  void clear_each_refining_seconds();
  float each_refining_seconds() const;
  void set_each_refining_seconds(float value);
  private:
  float _internal_each_refining_seconds() const;
  void _internal_set_each_refining_seconds(float value);
  public:

  // int32 big_chance_value = 2;
  void clear_big_chance_value();
  int32_t big_chance_value() const;
  void set_big_chance_value(int32_t value);
  private:
  int32_t _internal_big_chance_value() const;
  void _internal_set_big_chance_value(int32_t value);
  public:

  // int32 small_chance_value = 3;
  void clear_small_chance_value();
  int32_t small_chance_value() const;
  void set_small_chance_value(int32_t value);
  private:
  int32_t _internal_small_chance_value() const;
  void _internal_set_small_chance_value(int32_t value);
  public:

  // int32 max_daily_count = 4;
  void clear_max_daily_count();
  int32_t max_daily_count() const;
  void set_max_daily_count(int32_t value);
  private:
  int32_t _internal_max_daily_count() const;
  void _internal_set_max_daily_count(int32_t value);
  public:

  // int32 max_daily_extra_materials_use_count = 5;
  void clear_max_daily_extra_materials_use_count();
  int32_t max_daily_extra_materials_use_count() const;
  void set_max_daily_extra_materials_use_count(int32_t value);
  private:
  int32_t _internal_max_daily_extra_materials_use_count() const;
  void _internal_set_max_daily_extra_materials_use_count(int32_t value);
  public:

  // int32 revert_cost_gold = 6;
  void clear_revert_cost_gold();
  int32_t revert_cost_gold() const;
  void set_revert_cost_gold(int32_t value);
  private:
  int32_t _internal_revert_cost_gold() const;
  void _internal_set_revert_cost_gold(int32_t value);
  public:

  // int32 destroy_cost_gold = 7;
  void clear_destroy_cost_gold();
  int32_t destroy_cost_gold() const;
  void set_destroy_cost_gold(int32_t value);
  private:
  int32_t _internal_destroy_cost_gold() const;
  void _internal_set_destroy_cost_gold(int32_t value);
  public:

  // int32 found_cost_gold = 9;
  void clear_found_cost_gold();
  int32_t found_cost_gold() const;
  void set_found_cost_gold(int32_t value);
  private:
  int32_t _internal_found_cost_gold() const;
  void _internal_set_found_cost_gold(int32_t value);
  public:

  // int32 found_time = 10;
  void clear_found_time();
  int32_t found_time() const;
  void set_found_time(int32_t value);
  private:
  int32_t _internal_found_time() const;
  void _internal_set_found_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfigForge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig > destroy_get_item_num_;
    float each_refining_seconds_;
    int32_t big_chance_value_;
    int32_t small_chance_value_;
    int32_t max_daily_count_;
    int32_t max_daily_extra_materials_use_count_;
    int32_t revert_cost_gold_;
    int32_t destroy_cost_gold_;
    int32_t found_cost_gold_;
    int32_t found_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfigFightMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfigFightMode) */ {
 public:
  inline PlayerGlobalConfigFightMode() : PlayerGlobalConfigFightMode(nullptr) {}
  ~PlayerGlobalConfigFightMode() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfigFightMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfigFightMode(const PlayerGlobalConfigFightMode& from);
  PlayerGlobalConfigFightMode(PlayerGlobalConfigFightMode&& from) noexcept
    : PlayerGlobalConfigFightMode() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfigFightMode& operator=(const PlayerGlobalConfigFightMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfigFightMode& operator=(PlayerGlobalConfigFightMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfigFightMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfigFightMode* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfigFightMode*>(
               &_PlayerGlobalConfigFightMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PlayerGlobalConfigFightMode& a, PlayerGlobalConfigFightMode& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfigFightMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfigFightMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfigFightMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfigFightMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfigFightMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfigFightMode& from) {
    PlayerGlobalConfigFightMode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfigFightMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfigFightMode";
  }
  protected:
  explicit PlayerGlobalConfigFightMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllModeRequireRankFieldNumber = 1,
    kAllModeToPeaceModeNeedSecondsFieldNumber = 2,
    kModeChangeNeedSecondsFieldNumber = 3,
    kHateSustainSecondsFieldNumber = 4,
    kWorldSpeedUnlockRankFieldNumber = 5,
  };
  // int32 all_mode_require_rank = 1;
  void clear_all_mode_require_rank();
  int32_t all_mode_require_rank() const;
  void set_all_mode_require_rank(int32_t value);
  private:
  int32_t _internal_all_mode_require_rank() const;
  void _internal_set_all_mode_require_rank(int32_t value);
  public:

  // float all_mode_to_peace_mode_need_seconds = 2;
  void clear_all_mode_to_peace_mode_need_seconds();
  float all_mode_to_peace_mode_need_seconds() const;
  void set_all_mode_to_peace_mode_need_seconds(float value);
  private:
  float _internal_all_mode_to_peace_mode_need_seconds() const;
  void _internal_set_all_mode_to_peace_mode_need_seconds(float value);
  public:

  // float mode_change_need_seconds = 3;
  void clear_mode_change_need_seconds();
  float mode_change_need_seconds() const;
  void set_mode_change_need_seconds(float value);
  private:
  float _internal_mode_change_need_seconds() const;
  void _internal_set_mode_change_need_seconds(float value);
  public:

  // float hate_sustain_seconds = 4;
  void clear_hate_sustain_seconds();
  float hate_sustain_seconds() const;
  void set_hate_sustain_seconds(float value);
  private:
  float _internal_hate_sustain_seconds() const;
  void _internal_set_hate_sustain_seconds(float value);
  public:

  // int32 world_speed_unlock_rank = 5;
  void clear_world_speed_unlock_rank();
  int32_t world_speed_unlock_rank() const;
  void set_world_speed_unlock_rank(int32_t value);
  private:
  int32_t _internal_world_speed_unlock_rank() const;
  void _internal_set_world_speed_unlock_rank(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfigFightMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t all_mode_require_rank_;
    float all_mode_to_peace_mode_need_seconds_;
    float mode_change_need_seconds_;
    float hate_sustain_seconds_;
    int32_t world_speed_unlock_rank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfigInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfigInventory) */ {
 public:
  inline PlayerGlobalConfigInventory() : PlayerGlobalConfigInventory(nullptr) {}
  ~PlayerGlobalConfigInventory() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfigInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfigInventory(const PlayerGlobalConfigInventory& from);
  PlayerGlobalConfigInventory(PlayerGlobalConfigInventory&& from) noexcept
    : PlayerGlobalConfigInventory() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfigInventory& operator=(const PlayerGlobalConfigInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfigInventory& operator=(PlayerGlobalConfigInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfigInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfigInventory* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfigInventory*>(
               &_PlayerGlobalConfigInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PlayerGlobalConfigInventory& a, PlayerGlobalConfigInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfigInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfigInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfigInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfigInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfigInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfigInventory& from) {
    PlayerGlobalConfigInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfigInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfigInventory";
  }
  protected:
  explicit PlayerGlobalConfigInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitSpaceFieldNumber = 1,
    kStageUpAddSpaceFieldNumber = 2,
    kFullMailIdFieldNumber = 3,
  };
  // int32 init_space = 1;
  void clear_init_space();
  int32_t init_space() const;
  void set_init_space(int32_t value);
  private:
  int32_t _internal_init_space() const;
  void _internal_set_init_space(int32_t value);
  public:

  // int32 stage_up_add_space = 2;
  void clear_stage_up_add_space();
  int32_t stage_up_add_space() const;
  void set_stage_up_add_space(int32_t value);
  private:
  int32_t _internal_stage_up_add_space() const;
  void _internal_set_stage_up_add_space(int32_t value);
  public:

  // int32 full_mail_id = 3;
  void clear_full_mail_id();
  int32_t full_mail_id() const;
  void set_full_mail_id(int32_t value);
  private:
  int32_t _internal_full_mail_id() const;
  void _internal_set_full_mail_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfigInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t init_space_;
    int32_t stage_up_add_space_;
    int32_t full_mail_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API PlayerGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.PlayerGlobalConfig) */ {
 public:
  inline PlayerGlobalConfig() : PlayerGlobalConfig(nullptr) {}
  ~PlayerGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR PlayerGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGlobalConfig(const PlayerGlobalConfig& from);
  PlayerGlobalConfig(PlayerGlobalConfig&& from) noexcept
    : PlayerGlobalConfig() {
    *this = ::std::move(from);
  }

  inline PlayerGlobalConfig& operator=(const PlayerGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGlobalConfig& operator=(PlayerGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const PlayerGlobalConfig*>(
               &_PlayerGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PlayerGlobalConfig& a, PlayerGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGlobalConfig& from) {
    PlayerGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.PlayerGlobalConfig";
  }
  protected:
  explicit PlayerGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantsFieldNumber = 1,
    kNewRoleInitAttrsFieldNumber = 2,
    kAbilityFieldNumber = 3,
    kBreathingExerciseFieldNumber = 4,
    kThunderTestFieldNumber = 5,
    kAlchemyFieldNumber = 6,
    kForgeFieldNumber = 7,
    kFightModeFieldNumber = 8,
    kInventoryFieldNumber = 9,
  };
  // .idlepb.PlayerGlobalConfigConstants constants = 1;
  bool has_constants() const;
  private:
  bool _internal_has_constants() const;
  public:
  void clear_constants();
  const ::idlepb::PlayerGlobalConfigConstants& constants() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerGlobalConfigConstants* release_constants();
  ::idlepb::PlayerGlobalConfigConstants* mutable_constants();
  void set_allocated_constants(::idlepb::PlayerGlobalConfigConstants* constants);
  private:
  const ::idlepb::PlayerGlobalConfigConstants& _internal_constants() const;
  ::idlepb::PlayerGlobalConfigConstants* _internal_mutable_constants();
  public:
  void unsafe_arena_set_allocated_constants(
      ::idlepb::PlayerGlobalConfigConstants* constants);
  ::idlepb::PlayerGlobalConfigConstants* unsafe_arena_release_constants();

  // .idlepb.PlayerGlobalConfigRoleInitAttributes new_role_init_attrs = 2;
  bool has_new_role_init_attrs() const;
  private:
  bool _internal_has_new_role_init_attrs() const;
  public:
  void clear_new_role_init_attrs();
  const ::idlepb::PlayerGlobalConfigRoleInitAttributes& new_role_init_attrs() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerGlobalConfigRoleInitAttributes* release_new_role_init_attrs();
  ::idlepb::PlayerGlobalConfigRoleInitAttributes* mutable_new_role_init_attrs();
  void set_allocated_new_role_init_attrs(::idlepb::PlayerGlobalConfigRoleInitAttributes* new_role_init_attrs);
  private:
  const ::idlepb::PlayerGlobalConfigRoleInitAttributes& _internal_new_role_init_attrs() const;
  ::idlepb::PlayerGlobalConfigRoleInitAttributes* _internal_mutable_new_role_init_attrs();
  public:
  void unsafe_arena_set_allocated_new_role_init_attrs(
      ::idlepb::PlayerGlobalConfigRoleInitAttributes* new_role_init_attrs);
  ::idlepb::PlayerGlobalConfigRoleInitAttributes* unsafe_arena_release_new_role_init_attrs();

  // .idlepb.PlayerGlobalConfigAbility ability = 3;
  bool has_ability() const;
  private:
  bool _internal_has_ability() const;
  public:
  void clear_ability();
  const ::idlepb::PlayerGlobalConfigAbility& ability() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerGlobalConfigAbility* release_ability();
  ::idlepb::PlayerGlobalConfigAbility* mutable_ability();
  void set_allocated_ability(::idlepb::PlayerGlobalConfigAbility* ability);
  private:
  const ::idlepb::PlayerGlobalConfigAbility& _internal_ability() const;
  ::idlepb::PlayerGlobalConfigAbility* _internal_mutable_ability();
  public:
  void unsafe_arena_set_allocated_ability(
      ::idlepb::PlayerGlobalConfigAbility* ability);
  ::idlepb::PlayerGlobalConfigAbility* unsafe_arena_release_ability();

  // .idlepb.PlayerGlobalConfigBreathingExercise breathing_exercise = 4;
  bool has_breathing_exercise() const;
  private:
  bool _internal_has_breathing_exercise() const;
  public:
  void clear_breathing_exercise();
  const ::idlepb::PlayerGlobalConfigBreathingExercise& breathing_exercise() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerGlobalConfigBreathingExercise* release_breathing_exercise();
  ::idlepb::PlayerGlobalConfigBreathingExercise* mutable_breathing_exercise();
  void set_allocated_breathing_exercise(::idlepb::PlayerGlobalConfigBreathingExercise* breathing_exercise);
  private:
  const ::idlepb::PlayerGlobalConfigBreathingExercise& _internal_breathing_exercise() const;
  ::idlepb::PlayerGlobalConfigBreathingExercise* _internal_mutable_breathing_exercise();
  public:
  void unsafe_arena_set_allocated_breathing_exercise(
      ::idlepb::PlayerGlobalConfigBreathingExercise* breathing_exercise);
  ::idlepb::PlayerGlobalConfigBreathingExercise* unsafe_arena_release_breathing_exercise();

  // .idlepb.PlayerGlobalConfigThunderTest thunder_test = 5;
  bool has_thunder_test() const;
  private:
  bool _internal_has_thunder_test() const;
  public:
  void clear_thunder_test();
  const ::idlepb::PlayerGlobalConfigThunderTest& thunder_test() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerGlobalConfigThunderTest* release_thunder_test();
  ::idlepb::PlayerGlobalConfigThunderTest* mutable_thunder_test();
  void set_allocated_thunder_test(::idlepb::PlayerGlobalConfigThunderTest* thunder_test);
  private:
  const ::idlepb::PlayerGlobalConfigThunderTest& _internal_thunder_test() const;
  ::idlepb::PlayerGlobalConfigThunderTest* _internal_mutable_thunder_test();
  public:
  void unsafe_arena_set_allocated_thunder_test(
      ::idlepb::PlayerGlobalConfigThunderTest* thunder_test);
  ::idlepb::PlayerGlobalConfigThunderTest* unsafe_arena_release_thunder_test();

  // .idlepb.PlayerGlobalConfigAlchemy alchemy = 6;
  bool has_alchemy() const;
  private:
  bool _internal_has_alchemy() const;
  public:
  void clear_alchemy();
  const ::idlepb::PlayerGlobalConfigAlchemy& alchemy() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerGlobalConfigAlchemy* release_alchemy();
  ::idlepb::PlayerGlobalConfigAlchemy* mutable_alchemy();
  void set_allocated_alchemy(::idlepb::PlayerGlobalConfigAlchemy* alchemy);
  private:
  const ::idlepb::PlayerGlobalConfigAlchemy& _internal_alchemy() const;
  ::idlepb::PlayerGlobalConfigAlchemy* _internal_mutable_alchemy();
  public:
  void unsafe_arena_set_allocated_alchemy(
      ::idlepb::PlayerGlobalConfigAlchemy* alchemy);
  ::idlepb::PlayerGlobalConfigAlchemy* unsafe_arena_release_alchemy();

  // .idlepb.PlayerGlobalConfigForge forge = 7;
  bool has_forge() const;
  private:
  bool _internal_has_forge() const;
  public:
  void clear_forge();
  const ::idlepb::PlayerGlobalConfigForge& forge() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerGlobalConfigForge* release_forge();
  ::idlepb::PlayerGlobalConfigForge* mutable_forge();
  void set_allocated_forge(::idlepb::PlayerGlobalConfigForge* forge);
  private:
  const ::idlepb::PlayerGlobalConfigForge& _internal_forge() const;
  ::idlepb::PlayerGlobalConfigForge* _internal_mutable_forge();
  public:
  void unsafe_arena_set_allocated_forge(
      ::idlepb::PlayerGlobalConfigForge* forge);
  ::idlepb::PlayerGlobalConfigForge* unsafe_arena_release_forge();

  // .idlepb.PlayerGlobalConfigFightMode fight_mode = 8;
  bool has_fight_mode() const;
  private:
  bool _internal_has_fight_mode() const;
  public:
  void clear_fight_mode();
  const ::idlepb::PlayerGlobalConfigFightMode& fight_mode() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerGlobalConfigFightMode* release_fight_mode();
  ::idlepb::PlayerGlobalConfigFightMode* mutable_fight_mode();
  void set_allocated_fight_mode(::idlepb::PlayerGlobalConfigFightMode* fight_mode);
  private:
  const ::idlepb::PlayerGlobalConfigFightMode& _internal_fight_mode() const;
  ::idlepb::PlayerGlobalConfigFightMode* _internal_mutable_fight_mode();
  public:
  void unsafe_arena_set_allocated_fight_mode(
      ::idlepb::PlayerGlobalConfigFightMode* fight_mode);
  ::idlepb::PlayerGlobalConfigFightMode* unsafe_arena_release_fight_mode();

  // .idlepb.PlayerGlobalConfigInventory inventory = 9;
  bool has_inventory() const;
  private:
  bool _internal_has_inventory() const;
  public:
  void clear_inventory();
  const ::idlepb::PlayerGlobalConfigInventory& inventory() const;
  PROTOBUF_NODISCARD ::idlepb::PlayerGlobalConfigInventory* release_inventory();
  ::idlepb::PlayerGlobalConfigInventory* mutable_inventory();
  void set_allocated_inventory(::idlepb::PlayerGlobalConfigInventory* inventory);
  private:
  const ::idlepb::PlayerGlobalConfigInventory& _internal_inventory() const;
  ::idlepb::PlayerGlobalConfigInventory* _internal_mutable_inventory();
  public:
  void unsafe_arena_set_allocated_inventory(
      ::idlepb::PlayerGlobalConfigInventory* inventory);
  ::idlepb::PlayerGlobalConfigInventory* unsafe_arena_release_inventory();

  // @@protoc_insertion_point(class_scope:idlepb.PlayerGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::PlayerGlobalConfigConstants* constants_;
    ::idlepb::PlayerGlobalConfigRoleInitAttributes* new_role_init_attrs_;
    ::idlepb::PlayerGlobalConfigAbility* ability_;
    ::idlepb::PlayerGlobalConfigBreathingExercise* breathing_exercise_;
    ::idlepb::PlayerGlobalConfigThunderTest* thunder_test_;
    ::idlepb::PlayerGlobalConfigAlchemy* alchemy_;
    ::idlepb::PlayerGlobalConfigForge* forge_;
    ::idlepb::PlayerGlobalConfigFightMode* fight_mode_;
    ::idlepb::PlayerGlobalConfigInventory* inventory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API NpcGlobalConfigConstants final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.NpcGlobalConfigConstants) */ {
 public:
  inline NpcGlobalConfigConstants() : NpcGlobalConfigConstants(nullptr) {}
  ~NpcGlobalConfigConstants() override;
  explicit PROTOBUF_CONSTEXPR NpcGlobalConfigConstants(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NpcGlobalConfigConstants(const NpcGlobalConfigConstants& from);
  NpcGlobalConfigConstants(NpcGlobalConfigConstants&& from) noexcept
    : NpcGlobalConfigConstants() {
    *this = ::std::move(from);
  }

  inline NpcGlobalConfigConstants& operator=(const NpcGlobalConfigConstants& from) {
    CopyFrom(from);
    return *this;
  }
  inline NpcGlobalConfigConstants& operator=(NpcGlobalConfigConstants&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NpcGlobalConfigConstants& default_instance() {
    return *internal_default_instance();
  }
  static inline const NpcGlobalConfigConstants* internal_default_instance() {
    return reinterpret_cast<const NpcGlobalConfigConstants*>(
               &_NpcGlobalConfigConstants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(NpcGlobalConfigConstants& a, NpcGlobalConfigConstants& b) {
    a.Swap(&b);
  }
  inline void Swap(NpcGlobalConfigConstants* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NpcGlobalConfigConstants* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NpcGlobalConfigConstants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NpcGlobalConfigConstants>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NpcGlobalConfigConstants& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NpcGlobalConfigConstants& from) {
    NpcGlobalConfigConstants::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NpcGlobalConfigConstants* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.NpcGlobalConfigConstants";
  }
  protected:
  explicit NpcGlobalConfigConstants(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoMoveStopTimeFieldNumber = 1,
    kAutoMoveWalkTimeFieldNumber = 2,
    kWalkSpeedFieldNumber = 3,
    kAttackIntervalTimeFieldNumber = 4,
    kNpcLockDistanceAutoFieldNumber = 5,
    kNpcLockDistanceMaxFieldNumber = 6,
    kMonsterLocationCorrectionDistanceNearFieldNumber = 7,
    kMonsterLocationCorrectionDistanceFarFieldNumber = 8,
    kMonsterCorrectionCostSpeedFieldNumber = 9,
    kPhyDefaultAbilityFullidFieldNumber = 10,
    kMagDefaultAbilityFullidFieldNumber = 11,
    kDefaultAbilityWeightFieldNumber = 12,
  };
  // float auto_move_stop_time = 1;
  void clear_auto_move_stop_time();
  float auto_move_stop_time() const;
  void set_auto_move_stop_time(float value);
  private:
  float _internal_auto_move_stop_time() const;
  void _internal_set_auto_move_stop_time(float value);
  public:

  // float auto_move_walk_time = 2;
  void clear_auto_move_walk_time();
  float auto_move_walk_time() const;
  void set_auto_move_walk_time(float value);
  private:
  float _internal_auto_move_walk_time() const;
  void _internal_set_auto_move_walk_time(float value);
  public:

  // int32 walk_speed = 3;
  void clear_walk_speed();
  int32_t walk_speed() const;
  void set_walk_speed(int32_t value);
  private:
  int32_t _internal_walk_speed() const;
  void _internal_set_walk_speed(int32_t value);
  public:

  // float attack_interval_time = 4;
  void clear_attack_interval_time();
  float attack_interval_time() const;
  void set_attack_interval_time(float value);
  private:
  float _internal_attack_interval_time() const;
  void _internal_set_attack_interval_time(float value);
  public:

  // float npc_lock_distance_auto = 5;
  void clear_npc_lock_distance_auto();
  float npc_lock_distance_auto() const;
  void set_npc_lock_distance_auto(float value);
  private:
  float _internal_npc_lock_distance_auto() const;
  void _internal_set_npc_lock_distance_auto(float value);
  public:

  // float npc_lock_distance_max = 6;
  void clear_npc_lock_distance_max();
  float npc_lock_distance_max() const;
  void set_npc_lock_distance_max(float value);
  private:
  float _internal_npc_lock_distance_max() const;
  void _internal_set_npc_lock_distance_max(float value);
  public:

  // float monster_location_correction_distance_near = 7;
  void clear_monster_location_correction_distance_near();
  float monster_location_correction_distance_near() const;
  void set_monster_location_correction_distance_near(float value);
  private:
  float _internal_monster_location_correction_distance_near() const;
  void _internal_set_monster_location_correction_distance_near(float value);
  public:

  // float monster_location_correction_distance_far = 8;
  void clear_monster_location_correction_distance_far();
  float monster_location_correction_distance_far() const;
  void set_monster_location_correction_distance_far(float value);
  private:
  float _internal_monster_location_correction_distance_far() const;
  void _internal_set_monster_location_correction_distance_far(float value);
  public:

  // float monster_correction_cost_speed = 9;
  void clear_monster_correction_cost_speed();
  float monster_correction_cost_speed() const;
  void set_monster_correction_cost_speed(float value);
  private:
  float _internal_monster_correction_cost_speed() const;
  void _internal_set_monster_correction_cost_speed(float value);
  public:

  // float phy_default_ability_fullid = 10;
  void clear_phy_default_ability_fullid();
  float phy_default_ability_fullid() const;
  void set_phy_default_ability_fullid(float value);
  private:
  float _internal_phy_default_ability_fullid() const;
  void _internal_set_phy_default_ability_fullid(float value);
  public:

  // float mag_default_ability_fullid = 11;
  void clear_mag_default_ability_fullid();
  float mag_default_ability_fullid() const;
  void set_mag_default_ability_fullid(float value);
  private:
  float _internal_mag_default_ability_fullid() const;
  void _internal_set_mag_default_ability_fullid(float value);
  public:

  // int32 default_ability_weight = 12;
  void clear_default_ability_weight();
  int32_t default_ability_weight() const;
  void set_default_ability_weight(int32_t value);
  private:
  int32_t _internal_default_ability_weight() const;
  void _internal_set_default_ability_weight(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.NpcGlobalConfigConstants)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float auto_move_stop_time_;
    float auto_move_walk_time_;
    int32_t walk_speed_;
    float attack_interval_time_;
    float npc_lock_distance_auto_;
    float npc_lock_distance_max_;
    float monster_location_correction_distance_near_;
    float monster_location_correction_distance_far_;
    float monster_correction_cost_speed_;
    float phy_default_ability_fullid_;
    float mag_default_ability_fullid_;
    int32_t default_ability_weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API NpcGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.NpcGlobalConfig) */ {
 public:
  inline NpcGlobalConfig() : NpcGlobalConfig(nullptr) {}
  ~NpcGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR NpcGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NpcGlobalConfig(const NpcGlobalConfig& from);
  NpcGlobalConfig(NpcGlobalConfig&& from) noexcept
    : NpcGlobalConfig() {
    *this = ::std::move(from);
  }

  inline NpcGlobalConfig& operator=(const NpcGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NpcGlobalConfig& operator=(NpcGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NpcGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NpcGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const NpcGlobalConfig*>(
               &_NpcGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(NpcGlobalConfig& a, NpcGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NpcGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NpcGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NpcGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NpcGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NpcGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NpcGlobalConfig& from) {
    NpcGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NpcGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.NpcGlobalConfig";
  }
  protected:
  explicit NpcGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantsFieldNumber = 1,
  };
  // .idlepb.NpcGlobalConfigConstants constants = 1;
  bool has_constants() const;
  private:
  bool _internal_has_constants() const;
  public:
  void clear_constants();
  const ::idlepb::NpcGlobalConfigConstants& constants() const;
  PROTOBUF_NODISCARD ::idlepb::NpcGlobalConfigConstants* release_constants();
  ::idlepb::NpcGlobalConfigConstants* mutable_constants();
  void set_allocated_constants(::idlepb::NpcGlobalConfigConstants* constants);
  private:
  const ::idlepb::NpcGlobalConfigConstants& _internal_constants() const;
  ::idlepb::NpcGlobalConfigConstants* _internal_mutable_constants();
  public:
  void unsafe_arena_set_allocated_constants(
      ::idlepb::NpcGlobalConfigConstants* constants);
  ::idlepb::NpcGlobalConfigConstants* unsafe_arena_release_constants();

  // @@protoc_insertion_point(class_scope:idlepb.NpcGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::NpcGlobalConfigConstants* constants_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API WorldGlobalConfigDungeonCommon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.WorldGlobalConfigDungeonCommon) */ {
 public:
  inline WorldGlobalConfigDungeonCommon() : WorldGlobalConfigDungeonCommon(nullptr) {}
  ~WorldGlobalConfigDungeonCommon() override;
  explicit PROTOBUF_CONSTEXPR WorldGlobalConfigDungeonCommon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldGlobalConfigDungeonCommon(const WorldGlobalConfigDungeonCommon& from);
  WorldGlobalConfigDungeonCommon(WorldGlobalConfigDungeonCommon&& from) noexcept
    : WorldGlobalConfigDungeonCommon() {
    *this = ::std::move(from);
  }

  inline WorldGlobalConfigDungeonCommon& operator=(const WorldGlobalConfigDungeonCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldGlobalConfigDungeonCommon& operator=(WorldGlobalConfigDungeonCommon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldGlobalConfigDungeonCommon& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldGlobalConfigDungeonCommon* internal_default_instance() {
    return reinterpret_cast<const WorldGlobalConfigDungeonCommon*>(
               &_WorldGlobalConfigDungeonCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WorldGlobalConfigDungeonCommon& a, WorldGlobalConfigDungeonCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldGlobalConfigDungeonCommon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldGlobalConfigDungeonCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldGlobalConfigDungeonCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldGlobalConfigDungeonCommon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldGlobalConfigDungeonCommon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorldGlobalConfigDungeonCommon& from) {
    WorldGlobalConfigDungeonCommon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldGlobalConfigDungeonCommon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.WorldGlobalConfigDungeonCommon";
  }
  protected:
  explicit WorldGlobalConfigDungeonCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginDelaySecondsFieldNumber = 1,
    kEndDelaySecondsFieldNumber = 2,
  };
  // float begin_delay_seconds = 1;
  void clear_begin_delay_seconds();
  float begin_delay_seconds() const;
  void set_begin_delay_seconds(float value);
  private:
  float _internal_begin_delay_seconds() const;
  void _internal_set_begin_delay_seconds(float value);
  public:

  // float end_delay_seconds = 2;
  void clear_end_delay_seconds();
  float end_delay_seconds() const;
  void set_end_delay_seconds(float value);
  private:
  float _internal_end_delay_seconds() const;
  void _internal_set_end_delay_seconds(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.WorldGlobalConfigDungeonCommon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float begin_delay_seconds_;
    float end_delay_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API WorldGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.WorldGlobalConfig) */ {
 public:
  inline WorldGlobalConfig() : WorldGlobalConfig(nullptr) {}
  ~WorldGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR WorldGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldGlobalConfig(const WorldGlobalConfig& from);
  WorldGlobalConfig(WorldGlobalConfig&& from) noexcept
    : WorldGlobalConfig() {
    *this = ::std::move(from);
  }

  inline WorldGlobalConfig& operator=(const WorldGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldGlobalConfig& operator=(WorldGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const WorldGlobalConfig*>(
               &_WorldGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(WorldGlobalConfig& a, WorldGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorldGlobalConfig& from) {
    WorldGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.WorldGlobalConfig";
  }
  protected:
  explicit WorldGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDungeonCommonFieldNumber = 1,
  };
  // .idlepb.WorldGlobalConfigDungeonCommon dungeon_common = 1;
  bool has_dungeon_common() const;
  private:
  bool _internal_has_dungeon_common() const;
  public:
  void clear_dungeon_common();
  const ::idlepb::WorldGlobalConfigDungeonCommon& dungeon_common() const;
  PROTOBUF_NODISCARD ::idlepb::WorldGlobalConfigDungeonCommon* release_dungeon_common();
  ::idlepb::WorldGlobalConfigDungeonCommon* mutable_dungeon_common();
  void set_allocated_dungeon_common(::idlepb::WorldGlobalConfigDungeonCommon* dungeon_common);
  private:
  const ::idlepb::WorldGlobalConfigDungeonCommon& _internal_dungeon_common() const;
  ::idlepb::WorldGlobalConfigDungeonCommon* _internal_mutable_dungeon_common();
  public:
  void unsafe_arena_set_allocated_dungeon_common(
      ::idlepb::WorldGlobalConfigDungeonCommon* dungeon_common);
  ::idlepb::WorldGlobalConfigDungeonCommon* unsafe_arena_release_dungeon_common();

  // @@protoc_insertion_point(class_scope:idlepb.WorldGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::idlepb::WorldGlobalConfigDungeonCommon* dungeon_common_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AppearanceGlobalConfigShopRefreshRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AppearanceGlobalConfigShopRefreshRule) */ {
 public:
  inline AppearanceGlobalConfigShopRefreshRule() : AppearanceGlobalConfigShopRefreshRule(nullptr) {}
  ~AppearanceGlobalConfigShopRefreshRule() override;
  explicit PROTOBUF_CONSTEXPR AppearanceGlobalConfigShopRefreshRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppearanceGlobalConfigShopRefreshRule(const AppearanceGlobalConfigShopRefreshRule& from);
  AppearanceGlobalConfigShopRefreshRule(AppearanceGlobalConfigShopRefreshRule&& from) noexcept
    : AppearanceGlobalConfigShopRefreshRule() {
    *this = ::std::move(from);
  }

  inline AppearanceGlobalConfigShopRefreshRule& operator=(const AppearanceGlobalConfigShopRefreshRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppearanceGlobalConfigShopRefreshRule& operator=(AppearanceGlobalConfigShopRefreshRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppearanceGlobalConfigShopRefreshRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppearanceGlobalConfigShopRefreshRule* internal_default_instance() {
    return reinterpret_cast<const AppearanceGlobalConfigShopRefreshRule*>(
               &_AppearanceGlobalConfigShopRefreshRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(AppearanceGlobalConfigShopRefreshRule& a, AppearanceGlobalConfigShopRefreshRule& b) {
    a.Swap(&b);
  }
  inline void Swap(AppearanceGlobalConfigShopRefreshRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppearanceGlobalConfigShopRefreshRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppearanceGlobalConfigShopRefreshRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppearanceGlobalConfigShopRefreshRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppearanceGlobalConfigShopRefreshRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppearanceGlobalConfigShopRefreshRule& from) {
    AppearanceGlobalConfigShopRefreshRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppearanceGlobalConfigShopRefreshRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AppearanceGlobalConfigShopRefreshRule";
  }
  protected:
  explicit AppearanceGlobalConfigShopRefreshRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 2,
    kWeightFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated int32 num = 2;
  int num_size() const;
  private:
  int _internal_num_size() const;
  public:
  void clear_num();
  private:
  int32_t _internal_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_num() const;
  void _internal_add_num(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_num();
  public:
  int32_t num(int index) const;
  void set_num(int index, int32_t value);
  void add_num(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_num();

  // repeated int32 weight = 3;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  private:
  int32_t _internal_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_weight() const;
  void _internal_add_weight(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_weight();
  public:
  int32_t weight(int index) const;
  void set_weight(int index, int32_t value);
  void add_weight(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_weight();

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AppearanceGlobalConfigShopRefreshRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > num_;
    mutable std::atomic<int> _num_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > weight_;
    mutable std::atomic<int> _weight_cached_byte_size_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AppearanceGlobalConfigModelTypeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AppearanceGlobalConfigModelTypeInfo) */ {
 public:
  inline AppearanceGlobalConfigModelTypeInfo() : AppearanceGlobalConfigModelTypeInfo(nullptr) {}
  ~AppearanceGlobalConfigModelTypeInfo() override;
  explicit PROTOBUF_CONSTEXPR AppearanceGlobalConfigModelTypeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppearanceGlobalConfigModelTypeInfo(const AppearanceGlobalConfigModelTypeInfo& from);
  AppearanceGlobalConfigModelTypeInfo(AppearanceGlobalConfigModelTypeInfo&& from) noexcept
    : AppearanceGlobalConfigModelTypeInfo() {
    *this = ::std::move(from);
  }

  inline AppearanceGlobalConfigModelTypeInfo& operator=(const AppearanceGlobalConfigModelTypeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppearanceGlobalConfigModelTypeInfo& operator=(AppearanceGlobalConfigModelTypeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppearanceGlobalConfigModelTypeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppearanceGlobalConfigModelTypeInfo* internal_default_instance() {
    return reinterpret_cast<const AppearanceGlobalConfigModelTypeInfo*>(
               &_AppearanceGlobalConfigModelTypeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(AppearanceGlobalConfigModelTypeInfo& a, AppearanceGlobalConfigModelTypeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppearanceGlobalConfigModelTypeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppearanceGlobalConfigModelTypeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppearanceGlobalConfigModelTypeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppearanceGlobalConfigModelTypeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppearanceGlobalConfigModelTypeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppearanceGlobalConfigModelTypeInfo& from) {
    AppearanceGlobalConfigModelTypeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppearanceGlobalConfigModelTypeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AppearanceGlobalConfigModelTypeInfo";
  }
  protected:
  explicit AppearanceGlobalConfigModelTypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameEnglishFieldNumber = 2,
    kNameChineseFieldNumber = 3,
    kModelTypeFieldNumber = 1,
  };
  // string name_english = 2;
  void clear_name_english();
  const std::string& name_english() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_english(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_english();
  PROTOBUF_NODISCARD std::string* release_name_english();
  void set_allocated_name_english(std::string* name_english);
  private:
  const std::string& _internal_name_english() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_english(const std::string& value);
  std::string* _internal_mutable_name_english();
  public:

  // string name_chinese = 3;
  void clear_name_chinese();
  const std::string& name_chinese() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_chinese(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_chinese();
  PROTOBUF_NODISCARD std::string* release_name_chinese();
  void set_allocated_name_chinese(std::string* name_chinese);
  private:
  const std::string& _internal_name_chinese() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_chinese(const std::string& value);
  std::string* _internal_mutable_name_chinese();
  public:

  // int32 model_type = 1;
  void clear_model_type();
  int32_t model_type() const;
  void set_model_type(int32_t value);
  private:
  int32_t _internal_model_type() const;
  void _internal_set_model_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AppearanceGlobalConfigModelTypeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_english_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_chinese_;
    int32_t model_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AppearanceGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AppearanceGlobalConfig) */ {
 public:
  inline AppearanceGlobalConfig() : AppearanceGlobalConfig(nullptr) {}
  ~AppearanceGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR AppearanceGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppearanceGlobalConfig(const AppearanceGlobalConfig& from);
  AppearanceGlobalConfig(AppearanceGlobalConfig&& from) noexcept
    : AppearanceGlobalConfig() {
    *this = ::std::move(from);
  }

  inline AppearanceGlobalConfig& operator=(const AppearanceGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppearanceGlobalConfig& operator=(AppearanceGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppearanceGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppearanceGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const AppearanceGlobalConfig*>(
               &_AppearanceGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(AppearanceGlobalConfig& a, AppearanceGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AppearanceGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppearanceGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppearanceGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppearanceGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppearanceGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppearanceGlobalConfig& from) {
    AppearanceGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppearanceGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AppearanceGlobalConfig";
  }
  protected:
  explicit AppearanceGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopRefreshRuleFieldNumber = 6,
    kModelTypeInfoFieldNumber = 7,
    kRefundItemIdFieldNumber = 1,
    kShopItemIdFieldNumber = 2,
    kShopRefreshTimeFieldNumber = 3,
    kSkTypeChangeCdFieldNumber = 4,
    kSkTypeChangeItemIdFieldNumber = 5,
  };
  // repeated .idlepb.AppearanceGlobalConfigShopRefreshRule shop_refresh_rule = 6;
  int shop_refresh_rule_size() const;
  private:
  int _internal_shop_refresh_rule_size() const;
  public:
  void clear_shop_refresh_rule();
  ::idlepb::AppearanceGlobalConfigShopRefreshRule* mutable_shop_refresh_rule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceGlobalConfigShopRefreshRule >*
      mutable_shop_refresh_rule();
  private:
  const ::idlepb::AppearanceGlobalConfigShopRefreshRule& _internal_shop_refresh_rule(int index) const;
  ::idlepb::AppearanceGlobalConfigShopRefreshRule* _internal_add_shop_refresh_rule();
  public:
  const ::idlepb::AppearanceGlobalConfigShopRefreshRule& shop_refresh_rule(int index) const;
  ::idlepb::AppearanceGlobalConfigShopRefreshRule* add_shop_refresh_rule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceGlobalConfigShopRefreshRule >&
      shop_refresh_rule() const;

  // repeated .idlepb.AppearanceGlobalConfigModelTypeInfo model_type_info = 7;
  int model_type_info_size() const;
  private:
  int _internal_model_type_info_size() const;
  public:
  void clear_model_type_info();
  ::idlepb::AppearanceGlobalConfigModelTypeInfo* mutable_model_type_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceGlobalConfigModelTypeInfo >*
      mutable_model_type_info();
  private:
  const ::idlepb::AppearanceGlobalConfigModelTypeInfo& _internal_model_type_info(int index) const;
  ::idlepb::AppearanceGlobalConfigModelTypeInfo* _internal_add_model_type_info();
  public:
  const ::idlepb::AppearanceGlobalConfigModelTypeInfo& model_type_info(int index) const;
  ::idlepb::AppearanceGlobalConfigModelTypeInfo* add_model_type_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceGlobalConfigModelTypeInfo >&
      model_type_info() const;

  // int32 refund_item_id = 1;
  void clear_refund_item_id();
  int32_t refund_item_id() const;
  void set_refund_item_id(int32_t value);
  private:
  int32_t _internal_refund_item_id() const;
  void _internal_set_refund_item_id(int32_t value);
  public:

  // int32 shop_item_id = 2;
  void clear_shop_item_id();
  int32_t shop_item_id() const;
  void set_shop_item_id(int32_t value);
  private:
  int32_t _internal_shop_item_id() const;
  void _internal_set_shop_item_id(int32_t value);
  public:

  // int32 shop_refresh_time = 3;
  void clear_shop_refresh_time();
  int32_t shop_refresh_time() const;
  void set_shop_refresh_time(int32_t value);
  private:
  int32_t _internal_shop_refresh_time() const;
  void _internal_set_shop_refresh_time(int32_t value);
  public:

  // int32 sk_type_change_cd = 4;
  void clear_sk_type_change_cd();
  int32_t sk_type_change_cd() const;
  void set_sk_type_change_cd(int32_t value);
  private:
  int32_t _internal_sk_type_change_cd() const;
  void _internal_set_sk_type_change_cd(int32_t value);
  public:

  // int32 sk_type_change_item_id = 5;
  void clear_sk_type_change_item_id();
  int32_t sk_type_change_item_id() const;
  void set_sk_type_change_item_id(int32_t value);
  private:
  int32_t _internal_sk_type_change_item_id() const;
  void _internal_set_sk_type_change_item_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AppearanceGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceGlobalConfigShopRefreshRule > shop_refresh_rule_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceGlobalConfigModelTypeInfo > model_type_info_;
    int32_t refund_item_id_;
    int32_t shop_item_id_;
    int32_t shop_refresh_time_;
    int32_t sk_type_change_cd_;
    int32_t sk_type_change_item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API FarmGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.FarmGlobalConfig) */ {
 public:
  inline FarmGlobalConfig() : FarmGlobalConfig(nullptr) {}
  ~FarmGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR FarmGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FarmGlobalConfig(const FarmGlobalConfig& from);
  FarmGlobalConfig(FarmGlobalConfig&& from) noexcept
    : FarmGlobalConfig() {
    *this = ::std::move(from);
  }

  inline FarmGlobalConfig& operator=(const FarmGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FarmGlobalConfig& operator=(FarmGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FarmGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FarmGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const FarmGlobalConfig*>(
               &_FarmGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FarmGlobalConfig& a, FarmGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FarmGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FarmGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FarmGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FarmGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FarmGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FarmGlobalConfig& from) {
    FarmGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FarmGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.FarmGlobalConfig";
  }
  protected:
  explicit FarmGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultUnlockFarmlandIndexFieldNumber = 2,
    kUnlockFarmlandCostItemNumFieldNumber = 4,
    kCostPerWateringFieldNumber = 7,
    kFarmlandShapeFieldNumber = 1,
    kFarmlandSeedShapeFieldNumber = 5,
    kAddSpeedFromItemFieldNumber = 9,
    kUnlockFarmlandCostItemIdFieldNumber = 3,
    kWateringTimesPerDayFieldNumber = 6,
    kAddSpeedPerWateringFieldNumber = 8,
    kMinSeedPlantTimePercentFieldNumber = 10,
  };
  // repeated int32 default_unlock_farmland_index = 2;
  int default_unlock_farmland_index_size() const;
  private:
  int _internal_default_unlock_farmland_index_size() const;
  public:
  void clear_default_unlock_farmland_index();
  private:
  int32_t _internal_default_unlock_farmland_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_default_unlock_farmland_index() const;
  void _internal_add_default_unlock_farmland_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_default_unlock_farmland_index();
  public:
  int32_t default_unlock_farmland_index(int index) const;
  void set_default_unlock_farmland_index(int index, int32_t value);
  void add_default_unlock_farmland_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      default_unlock_farmland_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_default_unlock_farmland_index();

  // repeated int32 unlock_farmland_cost_item_num = 4;
  int unlock_farmland_cost_item_num_size() const;
  private:
  int _internal_unlock_farmland_cost_item_num_size() const;
  public:
  void clear_unlock_farmland_cost_item_num();
  private:
  int32_t _internal_unlock_farmland_cost_item_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_unlock_farmland_cost_item_num() const;
  void _internal_add_unlock_farmland_cost_item_num(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_unlock_farmland_cost_item_num();
  public:
  int32_t unlock_farmland_cost_item_num(int index) const;
  void set_unlock_farmland_cost_item_num(int index, int32_t value);
  void add_unlock_farmland_cost_item_num(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      unlock_farmland_cost_item_num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_unlock_farmland_cost_item_num();

  // repeated int32 cost_per_watering = 7;
  int cost_per_watering_size() const;
  private:
  int _internal_cost_per_watering_size() const;
  public:
  void clear_cost_per_watering();
  private:
  int32_t _internal_cost_per_watering(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_cost_per_watering() const;
  void _internal_add_cost_per_watering(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_cost_per_watering();
  public:
  int32_t cost_per_watering(int index) const;
  void set_cost_per_watering(int index, int32_t value);
  void add_cost_per_watering(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      cost_per_watering() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_cost_per_watering();

  // string farmland_shape = 1;
  void clear_farmland_shape();
  const std::string& farmland_shape() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_farmland_shape(ArgT0&& arg0, ArgT... args);
  std::string* mutable_farmland_shape();
  PROTOBUF_NODISCARD std::string* release_farmland_shape();
  void set_allocated_farmland_shape(std::string* farmland_shape);
  private:
  const std::string& _internal_farmland_shape() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_farmland_shape(const std::string& value);
  std::string* _internal_mutable_farmland_shape();
  public:

  // string farmland_seed_shape = 5;
  void clear_farmland_seed_shape();
  const std::string& farmland_seed_shape() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_farmland_seed_shape(ArgT0&& arg0, ArgT... args);
  std::string* mutable_farmland_seed_shape();
  PROTOBUF_NODISCARD std::string* release_farmland_seed_shape();
  void set_allocated_farmland_seed_shape(std::string* farmland_seed_shape);
  private:
  const std::string& _internal_farmland_seed_shape() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_farmland_seed_shape(const std::string& value);
  std::string* _internal_mutable_farmland_seed_shape();
  public:

  // string add_speed_from_item = 9;
  void clear_add_speed_from_item();
  const std::string& add_speed_from_item() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_add_speed_from_item(ArgT0&& arg0, ArgT... args);
  std::string* mutable_add_speed_from_item();
  PROTOBUF_NODISCARD std::string* release_add_speed_from_item();
  void set_allocated_add_speed_from_item(std::string* add_speed_from_item);
  private:
  const std::string& _internal_add_speed_from_item() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_add_speed_from_item(const std::string& value);
  std::string* _internal_mutable_add_speed_from_item();
  public:

  // int32 unlock_farmland_cost_item_id = 3;
  void clear_unlock_farmland_cost_item_id();
  int32_t unlock_farmland_cost_item_id() const;
  void set_unlock_farmland_cost_item_id(int32_t value);
  private:
  int32_t _internal_unlock_farmland_cost_item_id() const;
  void _internal_set_unlock_farmland_cost_item_id(int32_t value);
  public:

  // int32 watering_times_per_day = 6;
  void clear_watering_times_per_day();
  int32_t watering_times_per_day() const;
  void set_watering_times_per_day(int32_t value);
  private:
  int32_t _internal_watering_times_per_day() const;
  void _internal_set_watering_times_per_day(int32_t value);
  public:

  // int32 add_speed_per_watering = 8;
  void clear_add_speed_per_watering();
  int32_t add_speed_per_watering() const;
  void set_add_speed_per_watering(int32_t value);
  private:
  int32_t _internal_add_speed_per_watering() const;
  void _internal_set_add_speed_per_watering(int32_t value);
  public:

  // float min_seed_plant_time_percent = 10;
  void clear_min_seed_plant_time_percent();
  float min_seed_plant_time_percent() const;
  void set_min_seed_plant_time_percent(float value);
  private:
  float _internal_min_seed_plant_time_percent() const;
  void _internal_set_min_seed_plant_time_percent(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.FarmGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > default_unlock_farmland_index_;
    mutable std::atomic<int> _default_unlock_farmland_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > unlock_farmland_cost_item_num_;
    mutable std::atomic<int> _unlock_farmland_cost_item_num_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > cost_per_watering_;
    mutable std::atomic<int> _cost_per_watering_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr farmland_shape_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr farmland_seed_shape_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_speed_from_item_;
    int32_t unlock_farmland_cost_item_id_;
    int32_t watering_times_per_day_;
    int32_t add_speed_per_watering_;
    float min_seed_plant_time_percent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API FriendsGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.FriendsGlobalConfig) */ {
 public:
  inline FriendsGlobalConfig() : FriendsGlobalConfig(nullptr) {}
  ~FriendsGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR FriendsGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendsGlobalConfig(const FriendsGlobalConfig& from);
  FriendsGlobalConfig(FriendsGlobalConfig&& from) noexcept
    : FriendsGlobalConfig() {
    *this = ::std::move(from);
  }

  inline FriendsGlobalConfig& operator=(const FriendsGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendsGlobalConfig& operator=(FriendsGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendsGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendsGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const FriendsGlobalConfig*>(
               &_FriendsGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FriendsGlobalConfig& a, FriendsGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendsGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendsGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendsGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendsGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendsGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendsGlobalConfig& from) {
    FriendsGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendsGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.FriendsGlobalConfig";
  }
  protected:
  explicit FriendsGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxFriendNumFieldNumber = 1,
    kDailySearchCountFieldNumber = 2,
    kMaxApplyCountFieldNumber = 3,
    kMaxBlockListFieldNumber = 4,
  };
  // int32 max_friend_num = 1;
  void clear_max_friend_num();
  int32_t max_friend_num() const;
  void set_max_friend_num(int32_t value);
  private:
  int32_t _internal_max_friend_num() const;
  void _internal_set_max_friend_num(int32_t value);
  public:

  // int32 daily_search_count = 2;
  void clear_daily_search_count();
  int32_t daily_search_count() const;
  void set_daily_search_count(int32_t value);
  private:
  int32_t _internal_daily_search_count() const;
  void _internal_set_daily_search_count(int32_t value);
  public:

  // int32 max_apply_count = 3;
  void clear_max_apply_count();
  int32_t max_apply_count() const;
  void set_max_apply_count(int32_t value);
  private:
  int32_t _internal_max_apply_count() const;
  void _internal_set_max_apply_count(int32_t value);
  public:

  // int32 max_block_list = 4;
  void clear_max_block_list();
  int32_t max_block_list() const;
  void set_max_block_list(int32_t value);
  private:
  int32_t _internal_max_block_list() const;
  void _internal_set_max_block_list(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.FriendsGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t max_friend_num_;
    int32_t daily_search_count_;
    int32_t max_apply_count_;
    int32_t max_block_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AvatarStageCountDiff final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AvatarStageCountDiff) */ {
 public:
  inline AvatarStageCountDiff() : AvatarStageCountDiff(nullptr) {}
  ~AvatarStageCountDiff() override;
  explicit PROTOBUF_CONSTEXPR AvatarStageCountDiff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AvatarStageCountDiff(const AvatarStageCountDiff& from);
  AvatarStageCountDiff(AvatarStageCountDiff&& from) noexcept
    : AvatarStageCountDiff() {
    *this = ::std::move(from);
  }

  inline AvatarStageCountDiff& operator=(const AvatarStageCountDiff& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvatarStageCountDiff& operator=(AvatarStageCountDiff&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AvatarStageCountDiff& default_instance() {
    return *internal_default_instance();
  }
  static inline const AvatarStageCountDiff* internal_default_instance() {
    return reinterpret_cast<const AvatarStageCountDiff*>(
               &_AvatarStageCountDiff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(AvatarStageCountDiff& a, AvatarStageCountDiff& b) {
    a.Swap(&b);
  }
  inline void Swap(AvatarStageCountDiff* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvatarStageCountDiff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AvatarStageCountDiff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AvatarStageCountDiff>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AvatarStageCountDiff& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AvatarStageCountDiff& from) {
    AvatarStageCountDiff::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvatarStageCountDiff* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AvatarStageCountDiff";
  }
  protected:
  explicit AvatarStageCountDiff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiffNumFieldNumber = 1,
    kCoefFieldNumber = 2,
  };
  // int32 diff_num = 1;
  void clear_diff_num();
  int32_t diff_num() const;
  void set_diff_num(int32_t value);
  private:
  int32_t _internal_diff_num() const;
  void _internal_set_diff_num(int32_t value);
  public:

  // float coef = 2;
  void clear_coef();
  float coef() const;
  void set_coef(float value);
  private:
  float _internal_coef() const;
  void _internal_set_coef(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AvatarStageCountDiff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t diff_num_;
    float coef_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API AnotherMeGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.AnotherMeGlobalConfig) */ {
 public:
  inline AnotherMeGlobalConfig() : AnotherMeGlobalConfig(nullptr) {}
  ~AnotherMeGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR AnotherMeGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnotherMeGlobalConfig(const AnotherMeGlobalConfig& from);
  AnotherMeGlobalConfig(AnotherMeGlobalConfig&& from) noexcept
    : AnotherMeGlobalConfig() {
    *this = ::std::move(from);
  }

  inline AnotherMeGlobalConfig& operator=(const AnotherMeGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnotherMeGlobalConfig& operator=(AnotherMeGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnotherMeGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnotherMeGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const AnotherMeGlobalConfig*>(
               &_AnotherMeGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(AnotherMeGlobalConfig& a, AnotherMeGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AnotherMeGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnotherMeGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnotherMeGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnotherMeGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnotherMeGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnotherMeGlobalConfig& from) {
    AnotherMeGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnotherMeGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.AnotherMeGlobalConfig";
  }
  protected:
  explicit AnotherMeGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageCountDiffFieldNumber = 5,
    kTempPackageMaxFieldNumber = 1,
    kIdleTimeMaxFieldNumber = 2,
    kIdleTimeDurationFieldNumber = 3,
    kDefaultDrawTimeFieldNumber = 4,
  };
  // repeated .idlepb.AvatarStageCountDiff stage_count_diff = 5;
  int stage_count_diff_size() const;
  private:
  int _internal_stage_count_diff_size() const;
  public:
  void clear_stage_count_diff();
  ::idlepb::AvatarStageCountDiff* mutable_stage_count_diff(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AvatarStageCountDiff >*
      mutable_stage_count_diff();
  private:
  const ::idlepb::AvatarStageCountDiff& _internal_stage_count_diff(int index) const;
  ::idlepb::AvatarStageCountDiff* _internal_add_stage_count_diff();
  public:
  const ::idlepb::AvatarStageCountDiff& stage_count_diff(int index) const;
  ::idlepb::AvatarStageCountDiff* add_stage_count_diff();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AvatarStageCountDiff >&
      stage_count_diff() const;

  // int32 temp_package_max = 1;
  void clear_temp_package_max();
  int32_t temp_package_max() const;
  void set_temp_package_max(int32_t value);
  private:
  int32_t _internal_temp_package_max() const;
  void _internal_set_temp_package_max(int32_t value);
  public:

  // int32 idle_time_max = 2;
  void clear_idle_time_max();
  int32_t idle_time_max() const;
  void set_idle_time_max(int32_t value);
  private:
  int32_t _internal_idle_time_max() const;
  void _internal_set_idle_time_max(int32_t value);
  public:

  // int32 idle_time_duration = 3;
  void clear_idle_time_duration();
  int32_t idle_time_duration() const;
  void set_idle_time_duration(int32_t value);
  private:
  int32_t _internal_idle_time_duration() const;
  void _internal_set_idle_time_duration(int32_t value);
  public:

  // int32 default_draw_time = 4;
  void clear_default_draw_time();
  int32_t default_draw_time() const;
  void set_default_draw_time(int32_t value);
  private:
  int32_t _internal_default_draw_time() const;
  void _internal_set_default_draw_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.AnotherMeGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AvatarStageCountDiff > stage_count_diff_;
    int32_t temp_package_max_;
    int32_t idle_time_max_;
    int32_t idle_time_duration_;
    int32_t default_draw_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API FuZeRewardNum final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.FuZeRewardNum) */ {
 public:
  inline FuZeRewardNum() : FuZeRewardNum(nullptr) {}
  ~FuZeRewardNum() override;
  explicit PROTOBUF_CONSTEXPR FuZeRewardNum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FuZeRewardNum(const FuZeRewardNum& from);
  FuZeRewardNum(FuZeRewardNum&& from) noexcept
    : FuZeRewardNum() {
    *this = ::std::move(from);
  }

  inline FuZeRewardNum& operator=(const FuZeRewardNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuZeRewardNum& operator=(FuZeRewardNum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FuZeRewardNum& default_instance() {
    return *internal_default_instance();
  }
  static inline const FuZeRewardNum* internal_default_instance() {
    return reinterpret_cast<const FuZeRewardNum*>(
               &_FuZeRewardNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FuZeRewardNum& a, FuZeRewardNum& b) {
    a.Swap(&b);
  }
  inline void Swap(FuZeRewardNum* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuZeRewardNum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FuZeRewardNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FuZeRewardNum>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FuZeRewardNum& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FuZeRewardNum& from) {
    FuZeRewardNum::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuZeRewardNum* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.FuZeRewardNum";
  }
  protected:
  explicit FuZeRewardNum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 rank = 1;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // int32 num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.FuZeRewardNum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t rank_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API FuZeRewardItemId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.FuZeRewardItemId) */ {
 public:
  inline FuZeRewardItemId() : FuZeRewardItemId(nullptr) {}
  ~FuZeRewardItemId() override;
  explicit PROTOBUF_CONSTEXPR FuZeRewardItemId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FuZeRewardItemId(const FuZeRewardItemId& from);
  FuZeRewardItemId(FuZeRewardItemId&& from) noexcept
    : FuZeRewardItemId() {
    *this = ::std::move(from);
  }

  inline FuZeRewardItemId& operator=(const FuZeRewardItemId& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuZeRewardItemId& operator=(FuZeRewardItemId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FuZeRewardItemId& default_instance() {
    return *internal_default_instance();
  }
  static inline const FuZeRewardItemId* internal_default_instance() {
    return reinterpret_cast<const FuZeRewardItemId*>(
               &_FuZeRewardItemId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(FuZeRewardItemId& a, FuZeRewardItemId& b) {
    a.Swap(&b);
  }
  inline void Swap(FuZeRewardItemId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuZeRewardItemId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FuZeRewardItemId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FuZeRewardItemId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FuZeRewardItemId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FuZeRewardItemId& from) {
    FuZeRewardItemId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuZeRewardItemId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.FuZeRewardItemId";
  }
  protected:
  explicit FuZeRewardItemId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDegreeFieldNumber = 1,
    kItemIdFieldNumber = 2,
  };
  // int32 degree = 1;
  void clear_degree();
  int32_t degree() const;
  void set_degree(int32_t value);
  private:
  int32_t _internal_degree() const;
  void _internal_set_degree(int32_t value);
  public:

  // int32 item_id = 2;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.FuZeRewardItemId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t degree_;
    int32_t item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API FuZeGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.FuZeGlobalConfig) */ {
 public:
  inline FuZeGlobalConfig() : FuZeGlobalConfig(nullptr) {}
  ~FuZeGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR FuZeGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FuZeGlobalConfig(const FuZeGlobalConfig& from);
  FuZeGlobalConfig(FuZeGlobalConfig&& from) noexcept
    : FuZeGlobalConfig() {
    *this = ::std::move(from);
  }

  inline FuZeGlobalConfig& operator=(const FuZeGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuZeGlobalConfig& operator=(FuZeGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FuZeGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FuZeGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const FuZeGlobalConfig*>(
               &_FuZeGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FuZeGlobalConfig& a, FuZeGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FuZeGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuZeGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FuZeGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FuZeGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FuZeGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FuZeGlobalConfig& from) {
    FuZeGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuZeGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.FuZeGlobalConfig";
  }
  protected:
  explicit FuZeGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardNumFieldNumber = 1,
    kRewardIdFieldNumber = 2,
    kFuzeRankNumFieldNumber = 3,
    kFuzeRankRatioFieldNumber = 4,
    kFenqiExpRatioFieldNumber = 5,
    kFuzeRankMinFieldNumber = 6,
  };
  // repeated .idlepb.FuZeRewardNum reward_num = 1;
  int reward_num_size() const;
  private:
  int _internal_reward_num_size() const;
  public:
  void clear_reward_num();
  ::idlepb::FuZeRewardNum* mutable_reward_num(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZeRewardNum >*
      mutable_reward_num();
  private:
  const ::idlepb::FuZeRewardNum& _internal_reward_num(int index) const;
  ::idlepb::FuZeRewardNum* _internal_add_reward_num();
  public:
  const ::idlepb::FuZeRewardNum& reward_num(int index) const;
  ::idlepb::FuZeRewardNum* add_reward_num();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZeRewardNum >&
      reward_num() const;

  // repeated .idlepb.FuZeRewardItemId reward_id = 2;
  int reward_id_size() const;
  private:
  int _internal_reward_id_size() const;
  public:
  void clear_reward_id();
  ::idlepb::FuZeRewardItemId* mutable_reward_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZeRewardItemId >*
      mutable_reward_id();
  private:
  const ::idlepb::FuZeRewardItemId& _internal_reward_id(int index) const;
  ::idlepb::FuZeRewardItemId* _internal_add_reward_id();
  public:
  const ::idlepb::FuZeRewardItemId& reward_id(int index) const;
  ::idlepb::FuZeRewardItemId* add_reward_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZeRewardItemId >&
      reward_id() const;

  // int32 fuze_rank_num = 3;
  void clear_fuze_rank_num();
  int32_t fuze_rank_num() const;
  void set_fuze_rank_num(int32_t value);
  private:
  int32_t _internal_fuze_rank_num() const;
  void _internal_set_fuze_rank_num(int32_t value);
  public:

  // float fuze_rank_ratio = 4;
  void clear_fuze_rank_ratio();
  float fuze_rank_ratio() const;
  void set_fuze_rank_ratio(float value);
  private:
  float _internal_fuze_rank_ratio() const;
  void _internal_set_fuze_rank_ratio(float value);
  public:

  // float fenqi_exp_ratio = 5;
  void clear_fenqi_exp_ratio();
  float fenqi_exp_ratio() const;
  void set_fenqi_exp_ratio(float value);
  private:
  float _internal_fenqi_exp_ratio() const;
  void _internal_set_fenqi_exp_ratio(float value);
  public:

  // int32 fuze_rank_min = 6;
  void clear_fuze_rank_min();
  int32_t fuze_rank_min() const;
  void set_fuze_rank_min(int32_t value);
  private:
  int32_t _internal_fuze_rank_min() const;
  void _internal_set_fuze_rank_min(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.FuZeGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZeRewardNum > reward_num_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZeRewardItemId > reward_id_;
    int32_t fuze_rank_num_;
    float fuze_rank_ratio_;
    float fenqi_exp_ratio_;
    int32_t fuze_rank_min_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonGlobalConfig

// float ts_rpc_max_seconds = 1;
inline void CommonGlobalConfig::clear_ts_rpc_max_seconds() {
  _impl_.ts_rpc_max_seconds_ = 0;
}
inline float CommonGlobalConfig::_internal_ts_rpc_max_seconds() const {
  return _impl_.ts_rpc_max_seconds_;
}
inline float CommonGlobalConfig::ts_rpc_max_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.CommonGlobalConfig.ts_rpc_max_seconds)
  return _internal_ts_rpc_max_seconds();
}
inline void CommonGlobalConfig::_internal_set_ts_rpc_max_seconds(float value) {
  
  _impl_.ts_rpc_max_seconds_ = value;
}
inline void CommonGlobalConfig::set_ts_rpc_max_seconds(float value) {
  _internal_set_ts_rpc_max_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.CommonGlobalConfig.ts_rpc_max_seconds)
}

// -------------------------------------------------------------------

// CollectionGlobalConfigLevelUpEntry

// int32 degree_limit = 1;
inline void CollectionGlobalConfigLevelUpEntry::clear_degree_limit() {
  _impl_.degree_limit_ = 0;
}
inline int32_t CollectionGlobalConfigLevelUpEntry::_internal_degree_limit() const {
  return _impl_.degree_limit_;
}
inline int32_t CollectionGlobalConfigLevelUpEntry::degree_limit() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigLevelUpEntry.degree_limit)
  return _internal_degree_limit();
}
inline void CollectionGlobalConfigLevelUpEntry::_internal_set_degree_limit(int32_t value) {
  
  _impl_.degree_limit_ = value;
}
inline void CollectionGlobalConfigLevelUpEntry::set_degree_limit(int32_t value) {
  _internal_set_degree_limit(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigLevelUpEntry.degree_limit)
}

// int32 stage_limit = 2;
inline void CollectionGlobalConfigLevelUpEntry::clear_stage_limit() {
  _impl_.stage_limit_ = 0;
}
inline int32_t CollectionGlobalConfigLevelUpEntry::_internal_stage_limit() const {
  return _impl_.stage_limit_;
}
inline int32_t CollectionGlobalConfigLevelUpEntry::stage_limit() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigLevelUpEntry.stage_limit)
  return _internal_stage_limit();
}
inline void CollectionGlobalConfigLevelUpEntry::_internal_set_stage_limit(int32_t value) {
  
  _impl_.stage_limit_ = value;
}
inline void CollectionGlobalConfigLevelUpEntry::set_stage_limit(int32_t value) {
  _internal_set_stage_limit(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigLevelUpEntry.stage_limit)
}

// int32 cost_item_id = 3;
inline void CollectionGlobalConfigLevelUpEntry::clear_cost_item_id() {
  _impl_.cost_item_id_ = 0;
}
inline int32_t CollectionGlobalConfigLevelUpEntry::_internal_cost_item_id() const {
  return _impl_.cost_item_id_;
}
inline int32_t CollectionGlobalConfigLevelUpEntry::cost_item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigLevelUpEntry.cost_item_id)
  return _internal_cost_item_id();
}
inline void CollectionGlobalConfigLevelUpEntry::_internal_set_cost_item_id(int32_t value) {
  
  _impl_.cost_item_id_ = value;
}
inline void CollectionGlobalConfigLevelUpEntry::set_cost_item_id(int32_t value) {
  _internal_set_cost_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigLevelUpEntry.cost_item_id)
}

// int32 cost_item_num = 4;
inline void CollectionGlobalConfigLevelUpEntry::clear_cost_item_num() {
  _impl_.cost_item_num_ = 0;
}
inline int32_t CollectionGlobalConfigLevelUpEntry::_internal_cost_item_num() const {
  return _impl_.cost_item_num_;
}
inline int32_t CollectionGlobalConfigLevelUpEntry::cost_item_num() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigLevelUpEntry.cost_item_num)
  return _internal_cost_item_num();
}
inline void CollectionGlobalConfigLevelUpEntry::_internal_set_cost_item_num(int32_t value) {
  
  _impl_.cost_item_num_ = value;
}
inline void CollectionGlobalConfigLevelUpEntry::set_cost_item_num(int32_t value) {
  _internal_set_cost_item_num(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigLevelUpEntry.cost_item_num)
}

// int32 cost_money = 5;
inline void CollectionGlobalConfigLevelUpEntry::clear_cost_money() {
  _impl_.cost_money_ = 0;
}
inline int32_t CollectionGlobalConfigLevelUpEntry::_internal_cost_money() const {
  return _impl_.cost_money_;
}
inline int32_t CollectionGlobalConfigLevelUpEntry::cost_money() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigLevelUpEntry.cost_money)
  return _internal_cost_money();
}
inline void CollectionGlobalConfigLevelUpEntry::_internal_set_cost_money(int32_t value) {
  
  _impl_.cost_money_ = value;
}
inline void CollectionGlobalConfigLevelUpEntry::set_cost_money(int32_t value) {
  _internal_set_cost_money(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigLevelUpEntry.cost_money)
}

// -------------------------------------------------------------------

// CollectionGlobalConfigUpgradeStarCostRequestEntry

// int32 cost_item_num = 1;
inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::clear_cost_item_num() {
  _impl_.cost_item_num_ = 0;
}
inline int32_t CollectionGlobalConfigUpgradeStarCostRequestEntry::_internal_cost_item_num() const {
  return _impl_.cost_item_num_;
}
inline int32_t CollectionGlobalConfigUpgradeStarCostRequestEntry::cost_item_num() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry.cost_item_num)
  return _internal_cost_item_num();
}
inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::_internal_set_cost_item_num(int32_t value) {
  
  _impl_.cost_item_num_ = value;
}
inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::set_cost_item_num(int32_t value) {
  _internal_set_cost_item_num(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry.cost_item_num)
}

// int32 cost_self_piece_num = 2;
inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::clear_cost_self_piece_num() {
  _impl_.cost_self_piece_num_ = 0;
}
inline int32_t CollectionGlobalConfigUpgradeStarCostRequestEntry::_internal_cost_self_piece_num() const {
  return _impl_.cost_self_piece_num_;
}
inline int32_t CollectionGlobalConfigUpgradeStarCostRequestEntry::cost_self_piece_num() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry.cost_self_piece_num)
  return _internal_cost_self_piece_num();
}
inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::_internal_set_cost_self_piece_num(int32_t value) {
  
  _impl_.cost_self_piece_num_ = value;
}
inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::set_cost_self_piece_num(int32_t value) {
  _internal_set_cost_self_piece_num(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry.cost_self_piece_num)
}

// repeated int32 cost_common_piece_num = 3;
inline int CollectionGlobalConfigUpgradeStarCostRequestEntry::_internal_cost_common_piece_num_size() const {
  return _impl_.cost_common_piece_num_.size();
}
inline int CollectionGlobalConfigUpgradeStarCostRequestEntry::cost_common_piece_num_size() const {
  return _internal_cost_common_piece_num_size();
}
inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::clear_cost_common_piece_num() {
  _impl_.cost_common_piece_num_.Clear();
}
inline int32_t CollectionGlobalConfigUpgradeStarCostRequestEntry::_internal_cost_common_piece_num(int index) const {
  return _impl_.cost_common_piece_num_.Get(index);
}
inline int32_t CollectionGlobalConfigUpgradeStarCostRequestEntry::cost_common_piece_num(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry.cost_common_piece_num)
  return _internal_cost_common_piece_num(index);
}
inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::set_cost_common_piece_num(int index, int32_t value) {
  _impl_.cost_common_piece_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry.cost_common_piece_num)
}
inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::_internal_add_cost_common_piece_num(int32_t value) {
  _impl_.cost_common_piece_num_.Add(value);
}
inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::add_cost_common_piece_num(int32_t value) {
  _internal_add_cost_common_piece_num(value);
  // @@protoc_insertion_point(field_add:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry.cost_common_piece_num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CollectionGlobalConfigUpgradeStarCostRequestEntry::_internal_cost_common_piece_num() const {
  return _impl_.cost_common_piece_num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CollectionGlobalConfigUpgradeStarCostRequestEntry::cost_common_piece_num() const {
  // @@protoc_insertion_point(field_list:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry.cost_common_piece_num)
  return _internal_cost_common_piece_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CollectionGlobalConfigUpgradeStarCostRequestEntry::_internal_mutable_cost_common_piece_num() {
  return &_impl_.cost_common_piece_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CollectionGlobalConfigUpgradeStarCostRequestEntry::mutable_cost_common_piece_num() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry.cost_common_piece_num)
  return _internal_mutable_cost_common_piece_num();
}

// -------------------------------------------------------------------

// CollectionGlobalConfigUpgradeStarCostEntry

// repeated .idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry request = 1;
inline int CollectionGlobalConfigUpgradeStarCostEntry::_internal_request_size() const {
  return _impl_.request_.size();
}
inline int CollectionGlobalConfigUpgradeStarCostEntry::request_size() const {
  return _internal_request_size();
}
inline void CollectionGlobalConfigUpgradeStarCostEntry::clear_request() {
  _impl_.request_.Clear();
}
inline ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry* CollectionGlobalConfigUpgradeStarCostEntry::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.CollectionGlobalConfigUpgradeStarCostEntry.request)
  return _impl_.request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry >*
CollectionGlobalConfigUpgradeStarCostEntry::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.CollectionGlobalConfigUpgradeStarCostEntry.request)
  return &_impl_.request_;
}
inline const ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry& CollectionGlobalConfigUpgradeStarCostEntry::_internal_request(int index) const {
  return _impl_.request_.Get(index);
}
inline const ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry& CollectionGlobalConfigUpgradeStarCostEntry::request(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigUpgradeStarCostEntry.request)
  return _internal_request(index);
}
inline ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry* CollectionGlobalConfigUpgradeStarCostEntry::_internal_add_request() {
  return _impl_.request_.Add();
}
inline ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry* CollectionGlobalConfigUpgradeStarCostEntry::add_request() {
  ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry* _add = _internal_add_request();
  // @@protoc_insertion_point(field_add:idlepb.CollectionGlobalConfigUpgradeStarCostEntry.request)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry >&
CollectionGlobalConfigUpgradeStarCostEntry::request() const {
  // @@protoc_insertion_point(field_list:idlepb.CollectionGlobalConfigUpgradeStarCostEntry.request)
  return _impl_.request_;
}

// -------------------------------------------------------------------

// CollectionGlobalConfigUpgradeStar

// int32 cost_item_id = 1;
inline void CollectionGlobalConfigUpgradeStar::clear_cost_item_id() {
  _impl_.cost_item_id_ = 0;
}
inline int32_t CollectionGlobalConfigUpgradeStar::_internal_cost_item_id() const {
  return _impl_.cost_item_id_;
}
inline int32_t CollectionGlobalConfigUpgradeStar::cost_item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigUpgradeStar.cost_item_id)
  return _internal_cost_item_id();
}
inline void CollectionGlobalConfigUpgradeStar::_internal_set_cost_item_id(int32_t value) {
  
  _impl_.cost_item_id_ = value;
}
inline void CollectionGlobalConfigUpgradeStar::set_cost_item_id(int32_t value) {
  _internal_set_cost_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigUpgradeStar.cost_item_id)
}

// repeated int32 common_piece_by_quality = 2;
inline int CollectionGlobalConfigUpgradeStar::_internal_common_piece_by_quality_size() const {
  return _impl_.common_piece_by_quality_.size();
}
inline int CollectionGlobalConfigUpgradeStar::common_piece_by_quality_size() const {
  return _internal_common_piece_by_quality_size();
}
inline void CollectionGlobalConfigUpgradeStar::clear_common_piece_by_quality() {
  _impl_.common_piece_by_quality_.Clear();
}
inline int32_t CollectionGlobalConfigUpgradeStar::_internal_common_piece_by_quality(int index) const {
  return _impl_.common_piece_by_quality_.Get(index);
}
inline int32_t CollectionGlobalConfigUpgradeStar::common_piece_by_quality(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigUpgradeStar.common_piece_by_quality)
  return _internal_common_piece_by_quality(index);
}
inline void CollectionGlobalConfigUpgradeStar::set_common_piece_by_quality(int index, int32_t value) {
  _impl_.common_piece_by_quality_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigUpgradeStar.common_piece_by_quality)
}
inline void CollectionGlobalConfigUpgradeStar::_internal_add_common_piece_by_quality(int32_t value) {
  _impl_.common_piece_by_quality_.Add(value);
}
inline void CollectionGlobalConfigUpgradeStar::add_common_piece_by_quality(int32_t value) {
  _internal_add_common_piece_by_quality(value);
  // @@protoc_insertion_point(field_add:idlepb.CollectionGlobalConfigUpgradeStar.common_piece_by_quality)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CollectionGlobalConfigUpgradeStar::_internal_common_piece_by_quality() const {
  return _impl_.common_piece_by_quality_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CollectionGlobalConfigUpgradeStar::common_piece_by_quality() const {
  // @@protoc_insertion_point(field_list:idlepb.CollectionGlobalConfigUpgradeStar.common_piece_by_quality)
  return _internal_common_piece_by_quality();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CollectionGlobalConfigUpgradeStar::_internal_mutable_common_piece_by_quality() {
  return &_impl_.common_piece_by_quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CollectionGlobalConfigUpgradeStar::mutable_common_piece_by_quality() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.CollectionGlobalConfigUpgradeStar.common_piece_by_quality)
  return _internal_mutable_common_piece_by_quality();
}

// repeated .idlepb.CollectionGlobalConfigUpgradeStarCostEntry cost_by_quality = 3;
inline int CollectionGlobalConfigUpgradeStar::_internal_cost_by_quality_size() const {
  return _impl_.cost_by_quality_.size();
}
inline int CollectionGlobalConfigUpgradeStar::cost_by_quality_size() const {
  return _internal_cost_by_quality_size();
}
inline void CollectionGlobalConfigUpgradeStar::clear_cost_by_quality() {
  _impl_.cost_by_quality_.Clear();
}
inline ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* CollectionGlobalConfigUpgradeStar::mutable_cost_by_quality(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.CollectionGlobalConfigUpgradeStar.cost_by_quality)
  return _impl_.cost_by_quality_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry >*
CollectionGlobalConfigUpgradeStar::mutable_cost_by_quality() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.CollectionGlobalConfigUpgradeStar.cost_by_quality)
  return &_impl_.cost_by_quality_;
}
inline const ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry& CollectionGlobalConfigUpgradeStar::_internal_cost_by_quality(int index) const {
  return _impl_.cost_by_quality_.Get(index);
}
inline const ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry& CollectionGlobalConfigUpgradeStar::cost_by_quality(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigUpgradeStar.cost_by_quality)
  return _internal_cost_by_quality(index);
}
inline ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* CollectionGlobalConfigUpgradeStar::_internal_add_cost_by_quality() {
  return _impl_.cost_by_quality_.Add();
}
inline ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* CollectionGlobalConfigUpgradeStar::add_cost_by_quality() {
  ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* _add = _internal_add_cost_by_quality();
  // @@protoc_insertion_point(field_add:idlepb.CollectionGlobalConfigUpgradeStar.cost_by_quality)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry >&
CollectionGlobalConfigUpgradeStar::cost_by_quality() const {
  // @@protoc_insertion_point(field_list:idlepb.CollectionGlobalConfigUpgradeStar.cost_by_quality)
  return _impl_.cost_by_quality_;
}

// repeated .idlepb.CollectionGlobalConfigUpgradeStarCostEntry cost_by_quality_skill = 4;
inline int CollectionGlobalConfigUpgradeStar::_internal_cost_by_quality_skill_size() const {
  return _impl_.cost_by_quality_skill_.size();
}
inline int CollectionGlobalConfigUpgradeStar::cost_by_quality_skill_size() const {
  return _internal_cost_by_quality_skill_size();
}
inline void CollectionGlobalConfigUpgradeStar::clear_cost_by_quality_skill() {
  _impl_.cost_by_quality_skill_.Clear();
}
inline ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* CollectionGlobalConfigUpgradeStar::mutable_cost_by_quality_skill(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.CollectionGlobalConfigUpgradeStar.cost_by_quality_skill)
  return _impl_.cost_by_quality_skill_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry >*
CollectionGlobalConfigUpgradeStar::mutable_cost_by_quality_skill() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.CollectionGlobalConfigUpgradeStar.cost_by_quality_skill)
  return &_impl_.cost_by_quality_skill_;
}
inline const ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry& CollectionGlobalConfigUpgradeStar::_internal_cost_by_quality_skill(int index) const {
  return _impl_.cost_by_quality_skill_.Get(index);
}
inline const ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry& CollectionGlobalConfigUpgradeStar::cost_by_quality_skill(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigUpgradeStar.cost_by_quality_skill)
  return _internal_cost_by_quality_skill(index);
}
inline ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* CollectionGlobalConfigUpgradeStar::_internal_add_cost_by_quality_skill() {
  return _impl_.cost_by_quality_skill_.Add();
}
inline ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* CollectionGlobalConfigUpgradeStar::add_cost_by_quality_skill() {
  ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry* _add = _internal_add_cost_by_quality_skill();
  // @@protoc_insertion_point(field_add:idlepb.CollectionGlobalConfigUpgradeStar.cost_by_quality_skill)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry >&
CollectionGlobalConfigUpgradeStar::cost_by_quality_skill() const {
  // @@protoc_insertion_point(field_list:idlepb.CollectionGlobalConfigUpgradeStar.cost_by_quality_skill)
  return _impl_.cost_by_quality_skill_;
}

// -------------------------------------------------------------------

// CollectionGlobalConfigReset

// int32 cost_ji_yuan = 1;
inline void CollectionGlobalConfigReset::clear_cost_ji_yuan() {
  _impl_.cost_ji_yuan_ = 0;
}
inline int32_t CollectionGlobalConfigReset::_internal_cost_ji_yuan() const {
  return _impl_.cost_ji_yuan_;
}
inline int32_t CollectionGlobalConfigReset::cost_ji_yuan() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigReset.cost_ji_yuan)
  return _internal_cost_ji_yuan();
}
inline void CollectionGlobalConfigReset::_internal_set_cost_ji_yuan(int32_t value) {
  
  _impl_.cost_ji_yuan_ = value;
}
inline void CollectionGlobalConfigReset::set_cost_ji_yuan(int32_t value) {
  _internal_set_cost_ji_yuan(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigReset.cost_ji_yuan)
}

// int32 cold_time_seconds = 2;
inline void CollectionGlobalConfigReset::clear_cold_time_seconds() {
  _impl_.cold_time_seconds_ = 0;
}
inline int32_t CollectionGlobalConfigReset::_internal_cold_time_seconds() const {
  return _impl_.cold_time_seconds_;
}
inline int32_t CollectionGlobalConfigReset::cold_time_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfigReset.cold_time_seconds)
  return _internal_cold_time_seconds();
}
inline void CollectionGlobalConfigReset::_internal_set_cold_time_seconds(int32_t value) {
  
  _impl_.cold_time_seconds_ = value;
}
inline void CollectionGlobalConfigReset::set_cold_time_seconds(int32_t value) {
  _internal_set_cold_time_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfigReset.cold_time_seconds)
}

// -------------------------------------------------------------------

// CollectionGlobalConfig

// repeated int32 active_by_quality = 1;
inline int CollectionGlobalConfig::_internal_active_by_quality_size() const {
  return _impl_.active_by_quality_.size();
}
inline int CollectionGlobalConfig::active_by_quality_size() const {
  return _internal_active_by_quality_size();
}
inline void CollectionGlobalConfig::clear_active_by_quality() {
  _impl_.active_by_quality_.Clear();
}
inline int32_t CollectionGlobalConfig::_internal_active_by_quality(int index) const {
  return _impl_.active_by_quality_.Get(index);
}
inline int32_t CollectionGlobalConfig::active_by_quality(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfig.active_by_quality)
  return _internal_active_by_quality(index);
}
inline void CollectionGlobalConfig::set_active_by_quality(int index, int32_t value) {
  _impl_.active_by_quality_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.CollectionGlobalConfig.active_by_quality)
}
inline void CollectionGlobalConfig::_internal_add_active_by_quality(int32_t value) {
  _impl_.active_by_quality_.Add(value);
}
inline void CollectionGlobalConfig::add_active_by_quality(int32_t value) {
  _internal_add_active_by_quality(value);
  // @@protoc_insertion_point(field_add:idlepb.CollectionGlobalConfig.active_by_quality)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CollectionGlobalConfig::_internal_active_by_quality() const {
  return _impl_.active_by_quality_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CollectionGlobalConfig::active_by_quality() const {
  // @@protoc_insertion_point(field_list:idlepb.CollectionGlobalConfig.active_by_quality)
  return _internal_active_by_quality();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CollectionGlobalConfig::_internal_mutable_active_by_quality() {
  return &_impl_.active_by_quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CollectionGlobalConfig::mutable_active_by_quality() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.CollectionGlobalConfig.active_by_quality)
  return _internal_mutable_active_by_quality();
}

// repeated .idlepb.CollectionGlobalConfigLevelUpEntry levelup = 2;
inline int CollectionGlobalConfig::_internal_levelup_size() const {
  return _impl_.levelup_.size();
}
inline int CollectionGlobalConfig::levelup_size() const {
  return _internal_levelup_size();
}
inline void CollectionGlobalConfig::clear_levelup() {
  _impl_.levelup_.Clear();
}
inline ::idlepb::CollectionGlobalConfigLevelUpEntry* CollectionGlobalConfig::mutable_levelup(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.CollectionGlobalConfig.levelup)
  return _impl_.levelup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigLevelUpEntry >*
CollectionGlobalConfig::mutable_levelup() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.CollectionGlobalConfig.levelup)
  return &_impl_.levelup_;
}
inline const ::idlepb::CollectionGlobalConfigLevelUpEntry& CollectionGlobalConfig::_internal_levelup(int index) const {
  return _impl_.levelup_.Get(index);
}
inline const ::idlepb::CollectionGlobalConfigLevelUpEntry& CollectionGlobalConfig::levelup(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfig.levelup)
  return _internal_levelup(index);
}
inline ::idlepb::CollectionGlobalConfigLevelUpEntry* CollectionGlobalConfig::_internal_add_levelup() {
  return _impl_.levelup_.Add();
}
inline ::idlepb::CollectionGlobalConfigLevelUpEntry* CollectionGlobalConfig::add_levelup() {
  ::idlepb::CollectionGlobalConfigLevelUpEntry* _add = _internal_add_levelup();
  // @@protoc_insertion_point(field_add:idlepb.CollectionGlobalConfig.levelup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CollectionGlobalConfigLevelUpEntry >&
CollectionGlobalConfig::levelup() const {
  // @@protoc_insertion_point(field_list:idlepb.CollectionGlobalConfig.levelup)
  return _impl_.levelup_;
}

// .idlepb.CollectionGlobalConfigUpgradeStar upgrade_star = 3;
inline bool CollectionGlobalConfig::_internal_has_upgrade_star() const {
  return this != internal_default_instance() && _impl_.upgrade_star_ != nullptr;
}
inline bool CollectionGlobalConfig::has_upgrade_star() const {
  return _internal_has_upgrade_star();
}
inline void CollectionGlobalConfig::clear_upgrade_star() {
  if (GetArenaForAllocation() == nullptr && _impl_.upgrade_star_ != nullptr) {
    delete _impl_.upgrade_star_;
  }
  _impl_.upgrade_star_ = nullptr;
}
inline const ::idlepb::CollectionGlobalConfigUpgradeStar& CollectionGlobalConfig::_internal_upgrade_star() const {
  const ::idlepb::CollectionGlobalConfigUpgradeStar* p = _impl_.upgrade_star_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CollectionGlobalConfigUpgradeStar&>(
      ::idlepb::_CollectionGlobalConfigUpgradeStar_default_instance_);
}
inline const ::idlepb::CollectionGlobalConfigUpgradeStar& CollectionGlobalConfig::upgrade_star() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfig.upgrade_star)
  return _internal_upgrade_star();
}
inline void CollectionGlobalConfig::unsafe_arena_set_allocated_upgrade_star(
    ::idlepb::CollectionGlobalConfigUpgradeStar* upgrade_star) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgrade_star_);
  }
  _impl_.upgrade_star_ = upgrade_star;
  if (upgrade_star) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.CollectionGlobalConfig.upgrade_star)
}
inline ::idlepb::CollectionGlobalConfigUpgradeStar* CollectionGlobalConfig::release_upgrade_star() {
  
  ::idlepb::CollectionGlobalConfigUpgradeStar* temp = _impl_.upgrade_star_;
  _impl_.upgrade_star_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CollectionGlobalConfigUpgradeStar* CollectionGlobalConfig::unsafe_arena_release_upgrade_star() {
  // @@protoc_insertion_point(field_release:idlepb.CollectionGlobalConfig.upgrade_star)
  
  ::idlepb::CollectionGlobalConfigUpgradeStar* temp = _impl_.upgrade_star_;
  _impl_.upgrade_star_ = nullptr;
  return temp;
}
inline ::idlepb::CollectionGlobalConfigUpgradeStar* CollectionGlobalConfig::_internal_mutable_upgrade_star() {
  
  if (_impl_.upgrade_star_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CollectionGlobalConfigUpgradeStar>(GetArenaForAllocation());
    _impl_.upgrade_star_ = p;
  }
  return _impl_.upgrade_star_;
}
inline ::idlepb::CollectionGlobalConfigUpgradeStar* CollectionGlobalConfig::mutable_upgrade_star() {
  ::idlepb::CollectionGlobalConfigUpgradeStar* _msg = _internal_mutable_upgrade_star();
  // @@protoc_insertion_point(field_mutable:idlepb.CollectionGlobalConfig.upgrade_star)
  return _msg;
}
inline void CollectionGlobalConfig::set_allocated_upgrade_star(::idlepb::CollectionGlobalConfigUpgradeStar* upgrade_star) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.upgrade_star_;
  }
  if (upgrade_star) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(upgrade_star);
    if (message_arena != submessage_arena) {
      upgrade_star = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgrade_star, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.upgrade_star_ = upgrade_star;
  // @@protoc_insertion_point(field_set_allocated:idlepb.CollectionGlobalConfig.upgrade_star)
}

// .idlepb.CollectionGlobalConfigReset reset = 4;
inline bool CollectionGlobalConfig::_internal_has_reset() const {
  return this != internal_default_instance() && _impl_.reset_ != nullptr;
}
inline bool CollectionGlobalConfig::has_reset() const {
  return _internal_has_reset();
}
inline void CollectionGlobalConfig::clear_reset() {
  if (GetArenaForAllocation() == nullptr && _impl_.reset_ != nullptr) {
    delete _impl_.reset_;
  }
  _impl_.reset_ = nullptr;
}
inline const ::idlepb::CollectionGlobalConfigReset& CollectionGlobalConfig::_internal_reset() const {
  const ::idlepb::CollectionGlobalConfigReset* p = _impl_.reset_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::CollectionGlobalConfigReset&>(
      ::idlepb::_CollectionGlobalConfigReset_default_instance_);
}
inline const ::idlepb::CollectionGlobalConfigReset& CollectionGlobalConfig::reset() const {
  // @@protoc_insertion_point(field_get:idlepb.CollectionGlobalConfig.reset)
  return _internal_reset();
}
inline void CollectionGlobalConfig::unsafe_arena_set_allocated_reset(
    ::idlepb::CollectionGlobalConfigReset* reset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reset_);
  }
  _impl_.reset_ = reset;
  if (reset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.CollectionGlobalConfig.reset)
}
inline ::idlepb::CollectionGlobalConfigReset* CollectionGlobalConfig::release_reset() {
  
  ::idlepb::CollectionGlobalConfigReset* temp = _impl_.reset_;
  _impl_.reset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::CollectionGlobalConfigReset* CollectionGlobalConfig::unsafe_arena_release_reset() {
  // @@protoc_insertion_point(field_release:idlepb.CollectionGlobalConfig.reset)
  
  ::idlepb::CollectionGlobalConfigReset* temp = _impl_.reset_;
  _impl_.reset_ = nullptr;
  return temp;
}
inline ::idlepb::CollectionGlobalConfigReset* CollectionGlobalConfig::_internal_mutable_reset() {
  
  if (_impl_.reset_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::CollectionGlobalConfigReset>(GetArenaForAllocation());
    _impl_.reset_ = p;
  }
  return _impl_.reset_;
}
inline ::idlepb::CollectionGlobalConfigReset* CollectionGlobalConfig::mutable_reset() {
  ::idlepb::CollectionGlobalConfigReset* _msg = _internal_mutable_reset();
  // @@protoc_insertion_point(field_mutable:idlepb.CollectionGlobalConfig.reset)
  return _msg;
}
inline void CollectionGlobalConfig::set_allocated_reset(::idlepb::CollectionGlobalConfigReset* reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reset_;
  }
  if (reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reset);
    if (message_arena != submessage_arena) {
      reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reset_ = reset;
  // @@protoc_insertion_point(field_set_allocated:idlepb.CollectionGlobalConfig.reset)
}

// -------------------------------------------------------------------

// CurrencyGlobalConfigItem2Currency

// int32 item_cfg_id = 1;
inline void CurrencyGlobalConfigItem2Currency::clear_item_cfg_id() {
  _impl_.item_cfg_id_ = 0;
}
inline int32_t CurrencyGlobalConfigItem2Currency::_internal_item_cfg_id() const {
  return _impl_.item_cfg_id_;
}
inline int32_t CurrencyGlobalConfigItem2Currency::item_cfg_id() const {
  // @@protoc_insertion_point(field_get:idlepb.CurrencyGlobalConfigItem2Currency.item_cfg_id)
  return _internal_item_cfg_id();
}
inline void CurrencyGlobalConfigItem2Currency::_internal_set_item_cfg_id(int32_t value) {
  
  _impl_.item_cfg_id_ = value;
}
inline void CurrencyGlobalConfigItem2Currency::set_item_cfg_id(int32_t value) {
  _internal_set_item_cfg_id(value);
  // @@protoc_insertion_point(field_set:idlepb.CurrencyGlobalConfigItem2Currency.item_cfg_id)
}

// .idlepb.CurrencyType currency_type = 2;
inline void CurrencyGlobalConfigItem2Currency::clear_currency_type() {
  _impl_.currency_type_ = 0;
}
inline ::idlepb::CurrencyType CurrencyGlobalConfigItem2Currency::_internal_currency_type() const {
  return static_cast< ::idlepb::CurrencyType >(_impl_.currency_type_);
}
inline ::idlepb::CurrencyType CurrencyGlobalConfigItem2Currency::currency_type() const {
  // @@protoc_insertion_point(field_get:idlepb.CurrencyGlobalConfigItem2Currency.currency_type)
  return _internal_currency_type();
}
inline void CurrencyGlobalConfigItem2Currency::_internal_set_currency_type(::idlepb::CurrencyType value) {
  
  _impl_.currency_type_ = value;
}
inline void CurrencyGlobalConfigItem2Currency::set_currency_type(::idlepb::CurrencyType value) {
  _internal_set_currency_type(value);
  // @@protoc_insertion_point(field_set:idlepb.CurrencyGlobalConfigItem2Currency.currency_type)
}

// -------------------------------------------------------------------

// CurrencyGlobalConfig

// repeated .idlepb.CurrencyGlobalConfigItem2Currency item2currency = 1;
inline int CurrencyGlobalConfig::_internal_item2currency_size() const {
  return _impl_.item2currency_.size();
}
inline int CurrencyGlobalConfig::item2currency_size() const {
  return _internal_item2currency_size();
}
inline void CurrencyGlobalConfig::clear_item2currency() {
  _impl_.item2currency_.Clear();
}
inline ::idlepb::CurrencyGlobalConfigItem2Currency* CurrencyGlobalConfig::mutable_item2currency(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.CurrencyGlobalConfig.item2currency)
  return _impl_.item2currency_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CurrencyGlobalConfigItem2Currency >*
CurrencyGlobalConfig::mutable_item2currency() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.CurrencyGlobalConfig.item2currency)
  return &_impl_.item2currency_;
}
inline const ::idlepb::CurrencyGlobalConfigItem2Currency& CurrencyGlobalConfig::_internal_item2currency(int index) const {
  return _impl_.item2currency_.Get(index);
}
inline const ::idlepb::CurrencyGlobalConfigItem2Currency& CurrencyGlobalConfig::item2currency(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.CurrencyGlobalConfig.item2currency)
  return _internal_item2currency(index);
}
inline ::idlepb::CurrencyGlobalConfigItem2Currency* CurrencyGlobalConfig::_internal_add_item2currency() {
  return _impl_.item2currency_.Add();
}
inline ::idlepb::CurrencyGlobalConfigItem2Currency* CurrencyGlobalConfig::add_item2currency() {
  ::idlepb::CurrencyGlobalConfigItem2Currency* _add = _internal_add_item2currency();
  // @@protoc_insertion_point(field_add:idlepb.CurrencyGlobalConfig.item2currency)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::CurrencyGlobalConfigItem2Currency >&
CurrencyGlobalConfig::item2currency() const {
  // @@protoc_insertion_point(field_list:idlepb.CurrencyGlobalConfig.item2currency)
  return _impl_.item2currency_;
}

// -------------------------------------------------------------------

// PlayerGlobalConfigRoleInitAttributes

// float hp = 1;
inline void PlayerGlobalConfigRoleInitAttributes::clear_hp() {
  _impl_.hp_ = 0;
}
inline float PlayerGlobalConfigRoleInitAttributes::_internal_hp() const {
  return _impl_.hp_;
}
inline float PlayerGlobalConfigRoleInitAttributes::hp() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigRoleInitAttributes.hp)
  return _internal_hp();
}
inline void PlayerGlobalConfigRoleInitAttributes::_internal_set_hp(float value) {
  
  _impl_.hp_ = value;
}
inline void PlayerGlobalConfigRoleInitAttributes::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigRoleInitAttributes.hp)
}

// float mp = 2;
inline void PlayerGlobalConfigRoleInitAttributes::clear_mp() {
  _impl_.mp_ = 0;
}
inline float PlayerGlobalConfigRoleInitAttributes::_internal_mp() const {
  return _impl_.mp_;
}
inline float PlayerGlobalConfigRoleInitAttributes::mp() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigRoleInitAttributes.mp)
  return _internal_mp();
}
inline void PlayerGlobalConfigRoleInitAttributes::_internal_set_mp(float value) {
  
  _impl_.mp_ = value;
}
inline void PlayerGlobalConfigRoleInitAttributes::set_mp(float value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigRoleInitAttributes.mp)
}

// float phy_att = 3;
inline void PlayerGlobalConfigRoleInitAttributes::clear_phy_att() {
  _impl_.phy_att_ = 0;
}
inline float PlayerGlobalConfigRoleInitAttributes::_internal_phy_att() const {
  return _impl_.phy_att_;
}
inline float PlayerGlobalConfigRoleInitAttributes::phy_att() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigRoleInitAttributes.phy_att)
  return _internal_phy_att();
}
inline void PlayerGlobalConfigRoleInitAttributes::_internal_set_phy_att(float value) {
  
  _impl_.phy_att_ = value;
}
inline void PlayerGlobalConfigRoleInitAttributes::set_phy_att(float value) {
  _internal_set_phy_att(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigRoleInitAttributes.phy_att)
}

// float phy_def = 4;
inline void PlayerGlobalConfigRoleInitAttributes::clear_phy_def() {
  _impl_.phy_def_ = 0;
}
inline float PlayerGlobalConfigRoleInitAttributes::_internal_phy_def() const {
  return _impl_.phy_def_;
}
inline float PlayerGlobalConfigRoleInitAttributes::phy_def() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigRoleInitAttributes.phy_def)
  return _internal_phy_def();
}
inline void PlayerGlobalConfigRoleInitAttributes::_internal_set_phy_def(float value) {
  
  _impl_.phy_def_ = value;
}
inline void PlayerGlobalConfigRoleInitAttributes::set_phy_def(float value) {
  _internal_set_phy_def(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigRoleInitAttributes.phy_def)
}

// float mag_att = 5;
inline void PlayerGlobalConfigRoleInitAttributes::clear_mag_att() {
  _impl_.mag_att_ = 0;
}
inline float PlayerGlobalConfigRoleInitAttributes::_internal_mag_att() const {
  return _impl_.mag_att_;
}
inline float PlayerGlobalConfigRoleInitAttributes::mag_att() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigRoleInitAttributes.mag_att)
  return _internal_mag_att();
}
inline void PlayerGlobalConfigRoleInitAttributes::_internal_set_mag_att(float value) {
  
  _impl_.mag_att_ = value;
}
inline void PlayerGlobalConfigRoleInitAttributes::set_mag_att(float value) {
  _internal_set_mag_att(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigRoleInitAttributes.mag_att)
}

// float mag_def = 6;
inline void PlayerGlobalConfigRoleInitAttributes::clear_mag_def() {
  _impl_.mag_def_ = 0;
}
inline float PlayerGlobalConfigRoleInitAttributes::_internal_mag_def() const {
  return _impl_.mag_def_;
}
inline float PlayerGlobalConfigRoleInitAttributes::mag_def() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigRoleInitAttributes.mag_def)
  return _internal_mag_def();
}
inline void PlayerGlobalConfigRoleInitAttributes::_internal_set_mag_def(float value) {
  
  _impl_.mag_def_ = value;
}
inline void PlayerGlobalConfigRoleInitAttributes::set_mag_def(float value) {
  _internal_set_mag_def(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigRoleInitAttributes.mag_def)
}

// float hp_recover_percent = 7;
inline void PlayerGlobalConfigRoleInitAttributes::clear_hp_recover_percent() {
  _impl_.hp_recover_percent_ = 0;
}
inline float PlayerGlobalConfigRoleInitAttributes::_internal_hp_recover_percent() const {
  return _impl_.hp_recover_percent_;
}
inline float PlayerGlobalConfigRoleInitAttributes::hp_recover_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigRoleInitAttributes.hp_recover_percent)
  return _internal_hp_recover_percent();
}
inline void PlayerGlobalConfigRoleInitAttributes::_internal_set_hp_recover_percent(float value) {
  
  _impl_.hp_recover_percent_ = value;
}
inline void PlayerGlobalConfigRoleInitAttributes::set_hp_recover_percent(float value) {
  _internal_set_hp_recover_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigRoleInitAttributes.hp_recover_percent)
}

// float mp_recover_percent = 8;
inline void PlayerGlobalConfigRoleInitAttributes::clear_mp_recover_percent() {
  _impl_.mp_recover_percent_ = 0;
}
inline float PlayerGlobalConfigRoleInitAttributes::_internal_mp_recover_percent() const {
  return _impl_.mp_recover_percent_;
}
inline float PlayerGlobalConfigRoleInitAttributes::mp_recover_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigRoleInitAttributes.mp_recover_percent)
  return _internal_mp_recover_percent();
}
inline void PlayerGlobalConfigRoleInitAttributes::_internal_set_mp_recover_percent(float value) {
  
  _impl_.mp_recover_percent_ = value;
}
inline void PlayerGlobalConfigRoleInitAttributes::set_mp_recover_percent(float value) {
  _internal_set_mp_recover_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigRoleInitAttributes.mp_recover_percent)
}

// float crit_coef = 9;
inline void PlayerGlobalConfigRoleInitAttributes::clear_crit_coef() {
  _impl_.crit_coef_ = 0;
}
inline float PlayerGlobalConfigRoleInitAttributes::_internal_crit_coef() const {
  return _impl_.crit_coef_;
}
inline float PlayerGlobalConfigRoleInitAttributes::crit_coef() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigRoleInitAttributes.crit_coef)
  return _internal_crit_coef();
}
inline void PlayerGlobalConfigRoleInitAttributes::_internal_set_crit_coef(float value) {
  
  _impl_.crit_coef_ = value;
}
inline void PlayerGlobalConfigRoleInitAttributes::set_crit_coef(float value) {
  _internal_set_crit_coef(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigRoleInitAttributes.crit_coef)
}

// float crit_block = 10;
inline void PlayerGlobalConfigRoleInitAttributes::clear_crit_block() {
  _impl_.crit_block_ = 0;
}
inline float PlayerGlobalConfigRoleInitAttributes::_internal_crit_block() const {
  return _impl_.crit_block_;
}
inline float PlayerGlobalConfigRoleInitAttributes::crit_block() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigRoleInitAttributes.crit_block)
  return _internal_crit_block();
}
inline void PlayerGlobalConfigRoleInitAttributes::_internal_set_crit_block(float value) {
  
  _impl_.crit_block_ = value;
}
inline void PlayerGlobalConfigRoleInitAttributes::set_crit_block(float value) {
  _internal_set_crit_block(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigRoleInitAttributes.crit_block)
}

// float mind = 11;
inline void PlayerGlobalConfigRoleInitAttributes::clear_mind() {
  _impl_.mind_ = 0;
}
inline float PlayerGlobalConfigRoleInitAttributes::_internal_mind() const {
  return _impl_.mind_;
}
inline float PlayerGlobalConfigRoleInitAttributes::mind() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigRoleInitAttributes.mind)
  return _internal_mind();
}
inline void PlayerGlobalConfigRoleInitAttributes::_internal_set_mind(float value) {
  
  _impl_.mind_ = value;
}
inline void PlayerGlobalConfigRoleInitAttributes::set_mind(float value) {
  _internal_set_mind(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigRoleInitAttributes.mind)
}

// -------------------------------------------------------------------

// PlayerGlobalConfigConstants

// float init_radius = 1;
inline void PlayerGlobalConfigConstants::clear_init_radius() {
  _impl_.init_radius_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_init_radius() const {
  return _impl_.init_radius_;
}
inline float PlayerGlobalConfigConstants::init_radius() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.init_radius)
  return _internal_init_radius();
}
inline void PlayerGlobalConfigConstants::_internal_set_init_radius(float value) {
  
  _impl_.init_radius_ = value;
}
inline void PlayerGlobalConfigConstants::set_init_radius(float value) {
  _internal_set_init_radius(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.init_radius)
}

// float auto_move_stop_time = 2;
inline void PlayerGlobalConfigConstants::clear_auto_move_stop_time() {
  _impl_.auto_move_stop_time_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_auto_move_stop_time() const {
  return _impl_.auto_move_stop_time_;
}
inline float PlayerGlobalConfigConstants::auto_move_stop_time() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.auto_move_stop_time)
  return _internal_auto_move_stop_time();
}
inline void PlayerGlobalConfigConstants::_internal_set_auto_move_stop_time(float value) {
  
  _impl_.auto_move_stop_time_ = value;
}
inline void PlayerGlobalConfigConstants::set_auto_move_stop_time(float value) {
  _internal_set_auto_move_stop_time(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.auto_move_stop_time)
}

// float auto_move_walk_time = 3;
inline void PlayerGlobalConfigConstants::clear_auto_move_walk_time() {
  _impl_.auto_move_walk_time_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_auto_move_walk_time() const {
  return _impl_.auto_move_walk_time_;
}
inline float PlayerGlobalConfigConstants::auto_move_walk_time() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.auto_move_walk_time)
  return _internal_auto_move_walk_time();
}
inline void PlayerGlobalConfigConstants::_internal_set_auto_move_walk_time(float value) {
  
  _impl_.auto_move_walk_time_ = value;
}
inline void PlayerGlobalConfigConstants::set_auto_move_walk_time(float value) {
  _internal_set_auto_move_walk_time(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.auto_move_walk_time)
}

// int32 move_speed = 4;
inline void PlayerGlobalConfigConstants::clear_move_speed() {
  _impl_.move_speed_ = 0;
}
inline int32_t PlayerGlobalConfigConstants::_internal_move_speed() const {
  return _impl_.move_speed_;
}
inline int32_t PlayerGlobalConfigConstants::move_speed() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.move_speed)
  return _internal_move_speed();
}
inline void PlayerGlobalConfigConstants::_internal_set_move_speed(int32_t value) {
  
  _impl_.move_speed_ = value;
}
inline void PlayerGlobalConfigConstants::set_move_speed(int32_t value) {
  _internal_set_move_speed(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.move_speed)
}

// float attack_interval_time = 5;
inline void PlayerGlobalConfigConstants::clear_attack_interval_time() {
  _impl_.attack_interval_time_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_attack_interval_time() const {
  return _impl_.attack_interval_time_;
}
inline float PlayerGlobalConfigConstants::attack_interval_time() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.attack_interval_time)
  return _internal_attack_interval_time();
}
inline void PlayerGlobalConfigConstants::_internal_set_attack_interval_time(float value) {
  
  _impl_.attack_interval_time_ = value;
}
inline void PlayerGlobalConfigConstants::set_attack_interval_time(float value) {
  _internal_set_attack_interval_time(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.attack_interval_time)
}

// float auto_heal_trigger_ratio_hp = 6;
inline void PlayerGlobalConfigConstants::clear_auto_heal_trigger_ratio_hp() {
  _impl_.auto_heal_trigger_ratio_hp_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_auto_heal_trigger_ratio_hp() const {
  return _impl_.auto_heal_trigger_ratio_hp_;
}
inline float PlayerGlobalConfigConstants::auto_heal_trigger_ratio_hp() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.auto_heal_trigger_ratio_hp)
  return _internal_auto_heal_trigger_ratio_hp();
}
inline void PlayerGlobalConfigConstants::_internal_set_auto_heal_trigger_ratio_hp(float value) {
  
  _impl_.auto_heal_trigger_ratio_hp_ = value;
}
inline void PlayerGlobalConfigConstants::set_auto_heal_trigger_ratio_hp(float value) {
  _internal_set_auto_heal_trigger_ratio_hp(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.auto_heal_trigger_ratio_hp)
}

// float auto_heal_trigger_ratio_mp = 7;
inline void PlayerGlobalConfigConstants::clear_auto_heal_trigger_ratio_mp() {
  _impl_.auto_heal_trigger_ratio_mp_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_auto_heal_trigger_ratio_mp() const {
  return _impl_.auto_heal_trigger_ratio_mp_;
}
inline float PlayerGlobalConfigConstants::auto_heal_trigger_ratio_mp() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.auto_heal_trigger_ratio_mp)
  return _internal_auto_heal_trigger_ratio_mp();
}
inline void PlayerGlobalConfigConstants::_internal_set_auto_heal_trigger_ratio_mp(float value) {
  
  _impl_.auto_heal_trigger_ratio_mp_ = value;
}
inline void PlayerGlobalConfigConstants::set_auto_heal_trigger_ratio_mp(float value) {
  _internal_set_auto_heal_trigger_ratio_mp(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.auto_heal_trigger_ratio_mp)
}

// float player_lock_distance_hand = 8;
inline void PlayerGlobalConfigConstants::clear_player_lock_distance_hand() {
  _impl_.player_lock_distance_hand_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_lock_distance_hand() const {
  return _impl_.player_lock_distance_hand_;
}
inline float PlayerGlobalConfigConstants::player_lock_distance_hand() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_lock_distance_hand)
  return _internal_player_lock_distance_hand();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_lock_distance_hand(float value) {
  
  _impl_.player_lock_distance_hand_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_lock_distance_hand(float value) {
  _internal_set_player_lock_distance_hand(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_lock_distance_hand)
}

// float player_lock_distance_auto = 9;
inline void PlayerGlobalConfigConstants::clear_player_lock_distance_auto() {
  _impl_.player_lock_distance_auto_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_lock_distance_auto() const {
  return _impl_.player_lock_distance_auto_;
}
inline float PlayerGlobalConfigConstants::player_lock_distance_auto() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_lock_distance_auto)
  return _internal_player_lock_distance_auto();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_lock_distance_auto(float value) {
  
  _impl_.player_lock_distance_auto_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_lock_distance_auto(float value) {
  _internal_set_player_lock_distance_auto(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_lock_distance_auto)
}

// float player_lock_distance_max = 10;
inline void PlayerGlobalConfigConstants::clear_player_lock_distance_max() {
  _impl_.player_lock_distance_max_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_lock_distance_max() const {
  return _impl_.player_lock_distance_max_;
}
inline float PlayerGlobalConfigConstants::player_lock_distance_max() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_lock_distance_max)
  return _internal_player_lock_distance_max();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_lock_distance_max(float value) {
  
  _impl_.player_lock_distance_max_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_lock_distance_max(float value) {
  _internal_set_player_lock_distance_max(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_lock_distance_max)
}

// float player_lock_distance_near = 11;
inline void PlayerGlobalConfigConstants::clear_player_lock_distance_near() {
  _impl_.player_lock_distance_near_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_lock_distance_near() const {
  return _impl_.player_lock_distance_near_;
}
inline float PlayerGlobalConfigConstants::player_lock_distance_near() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_lock_distance_near)
  return _internal_player_lock_distance_near();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_lock_distance_near(float value) {
  
  _impl_.player_lock_distance_near_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_lock_distance_near(float value) {
  _internal_set_player_lock_distance_near(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_lock_distance_near)
}

// float player_lock_distance_screen = 12;
inline void PlayerGlobalConfigConstants::clear_player_lock_distance_screen() {
  _impl_.player_lock_distance_screen_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_lock_distance_screen() const {
  return _impl_.player_lock_distance_screen_;
}
inline float PlayerGlobalConfigConstants::player_lock_distance_screen() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_lock_distance_screen)
  return _internal_player_lock_distance_screen();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_lock_distance_screen(float value) {
  
  _impl_.player_lock_distance_screen_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_lock_distance_screen(float value) {
  _internal_set_player_lock_distance_screen(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_lock_distance_screen)
}

// float enter_scale_size_distance_2d = 13;
inline void PlayerGlobalConfigConstants::clear_enter_scale_size_distance_2d() {
  _impl_.enter_scale_size_distance_2d_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_enter_scale_size_distance_2d() const {
  return _impl_.enter_scale_size_distance_2d_;
}
inline float PlayerGlobalConfigConstants::enter_scale_size_distance_2d() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.enter_scale_size_distance_2d)
  return _internal_enter_scale_size_distance_2d();
}
inline void PlayerGlobalConfigConstants::_internal_set_enter_scale_size_distance_2d(float value) {
  
  _impl_.enter_scale_size_distance_2d_ = value;
}
inline void PlayerGlobalConfigConstants::set_enter_scale_size_distance_2d(float value) {
  _internal_set_enter_scale_size_distance_2d(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.enter_scale_size_distance_2d)
}

// float player_reborn_time = 14;
inline void PlayerGlobalConfigConstants::clear_player_reborn_time() {
  _impl_.player_reborn_time_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_reborn_time() const {
  return _impl_.player_reborn_time_;
}
inline float PlayerGlobalConfigConstants::player_reborn_time() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_reborn_time)
  return _internal_player_reborn_time();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_reborn_time(float value) {
  
  _impl_.player_reborn_time_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_reborn_time(float value) {
  _internal_set_player_reborn_time(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_reborn_time)
}

// float player_reduce_time = 15;
inline void PlayerGlobalConfigConstants::clear_player_reduce_time() {
  _impl_.player_reduce_time_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_reduce_time() const {
  return _impl_.player_reduce_time_;
}
inline float PlayerGlobalConfigConstants::player_reduce_time() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_reduce_time)
  return _internal_player_reduce_time();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_reduce_time(float value) {
  
  _impl_.player_reduce_time_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_reduce_time(float value) {
  _internal_set_player_reduce_time(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_reduce_time)
}

// float player_reduce_num_max = 16;
inline void PlayerGlobalConfigConstants::clear_player_reduce_num_max() {
  _impl_.player_reduce_num_max_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_reduce_num_max() const {
  return _impl_.player_reduce_num_max_;
}
inline float PlayerGlobalConfigConstants::player_reduce_num_max() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_reduce_num_max)
  return _internal_player_reduce_num_max();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_reduce_num_max(float value) {
  
  _impl_.player_reduce_num_max_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_reduce_num_max(float value) {
  _internal_set_player_reduce_num_max(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_reduce_num_max)
}

// float player_escape_time = 17;
inline void PlayerGlobalConfigConstants::clear_player_escape_time() {
  _impl_.player_escape_time_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_escape_time() const {
  return _impl_.player_escape_time_;
}
inline float PlayerGlobalConfigConstants::player_escape_time() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_escape_time)
  return _internal_player_escape_time();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_escape_time(float value) {
  
  _impl_.player_escape_time_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_escape_time(float value) {
  _internal_set_player_escape_time(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_escape_time)
}

// float battle_status_seconds = 18;
inline void PlayerGlobalConfigConstants::clear_battle_status_seconds() {
  _impl_.battle_status_seconds_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_battle_status_seconds() const {
  return _impl_.battle_status_seconds_;
}
inline float PlayerGlobalConfigConstants::battle_status_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.battle_status_seconds)
  return _internal_battle_status_seconds();
}
inline void PlayerGlobalConfigConstants::_internal_set_battle_status_seconds(float value) {
  
  _impl_.battle_status_seconds_ = value;
}
inline void PlayerGlobalConfigConstants::set_battle_status_seconds(float value) {
  _internal_set_battle_status_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.battle_status_seconds)
}

// int32 max_explore_time = 19;
inline void PlayerGlobalConfigConstants::clear_max_explore_time() {
  _impl_.max_explore_time_ = 0;
}
inline int32_t PlayerGlobalConfigConstants::_internal_max_explore_time() const {
  return _impl_.max_explore_time_;
}
inline int32_t PlayerGlobalConfigConstants::max_explore_time() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.max_explore_time)
  return _internal_max_explore_time();
}
inline void PlayerGlobalConfigConstants::_internal_set_max_explore_time(int32_t value) {
  
  _impl_.max_explore_time_ = value;
}
inline void PlayerGlobalConfigConstants::set_max_explore_time(int32_t value) {
  _internal_set_max_explore_time(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.max_explore_time)
}

// float player_teleport_cooldown = 20;
inline void PlayerGlobalConfigConstants::clear_player_teleport_cooldown() {
  _impl_.player_teleport_cooldown_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_teleport_cooldown() const {
  return _impl_.player_teleport_cooldown_;
}
inline float PlayerGlobalConfigConstants::player_teleport_cooldown() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_teleport_cooldown)
  return _internal_player_teleport_cooldown();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_teleport_cooldown(float value) {
  
  _impl_.player_teleport_cooldown_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_teleport_cooldown(float value) {
  _internal_set_player_teleport_cooldown(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_teleport_cooldown)
}

// int32 switch_cultivation_direction_min_rank = 21;
inline void PlayerGlobalConfigConstants::clear_switch_cultivation_direction_min_rank() {
  _impl_.switch_cultivation_direction_min_rank_ = 0;
}
inline int32_t PlayerGlobalConfigConstants::_internal_switch_cultivation_direction_min_rank() const {
  return _impl_.switch_cultivation_direction_min_rank_;
}
inline int32_t PlayerGlobalConfigConstants::switch_cultivation_direction_min_rank() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.switch_cultivation_direction_min_rank)
  return _internal_switch_cultivation_direction_min_rank();
}
inline void PlayerGlobalConfigConstants::_internal_set_switch_cultivation_direction_min_rank(int32_t value) {
  
  _impl_.switch_cultivation_direction_min_rank_ = value;
}
inline void PlayerGlobalConfigConstants::set_switch_cultivation_direction_min_rank(int32_t value) {
  _internal_set_switch_cultivation_direction_min_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.switch_cultivation_direction_min_rank)
}

// float server_take_control_idle_seconds = 22;
inline void PlayerGlobalConfigConstants::clear_server_take_control_idle_seconds() {
  _impl_.server_take_control_idle_seconds_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_server_take_control_idle_seconds() const {
  return _impl_.server_take_control_idle_seconds_;
}
inline float PlayerGlobalConfigConstants::server_take_control_idle_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.server_take_control_idle_seconds)
  return _internal_server_take_control_idle_seconds();
}
inline void PlayerGlobalConfigConstants::_internal_set_server_take_control_idle_seconds(float value) {
  
  _impl_.server_take_control_idle_seconds_ = value;
}
inline void PlayerGlobalConfigConstants::set_server_take_control_idle_seconds(float value) {
  _internal_set_server_take_control_idle_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.server_take_control_idle_seconds)
}

// float player_location_correction_distance_near = 23;
inline void PlayerGlobalConfigConstants::clear_player_location_correction_distance_near() {
  _impl_.player_location_correction_distance_near_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_location_correction_distance_near() const {
  return _impl_.player_location_correction_distance_near_;
}
inline float PlayerGlobalConfigConstants::player_location_correction_distance_near() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_location_correction_distance_near)
  return _internal_player_location_correction_distance_near();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_location_correction_distance_near(float value) {
  
  _impl_.player_location_correction_distance_near_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_location_correction_distance_near(float value) {
  _internal_set_player_location_correction_distance_near(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_location_correction_distance_near)
}

// float player_location_correction_distance_far = 24;
inline void PlayerGlobalConfigConstants::clear_player_location_correction_distance_far() {
  _impl_.player_location_correction_distance_far_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_location_correction_distance_far() const {
  return _impl_.player_location_correction_distance_far_;
}
inline float PlayerGlobalConfigConstants::player_location_correction_distance_far() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_location_correction_distance_far)
  return _internal_player_location_correction_distance_far();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_location_correction_distance_far(float value) {
  
  _impl_.player_location_correction_distance_far_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_location_correction_distance_far(float value) {
  _internal_set_player_location_correction_distance_far(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_location_correction_distance_far)
}

// float player_correction_cost_speed = 25;
inline void PlayerGlobalConfigConstants::clear_player_correction_cost_speed() {
  _impl_.player_correction_cost_speed_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_player_correction_cost_speed() const {
  return _impl_.player_correction_cost_speed_;
}
inline float PlayerGlobalConfigConstants::player_correction_cost_speed() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.player_correction_cost_speed)
  return _internal_player_correction_cost_speed();
}
inline void PlayerGlobalConfigConstants::_internal_set_player_correction_cost_speed(float value) {
  
  _impl_.player_correction_cost_speed_ = value;
}
inline void PlayerGlobalConfigConstants::set_player_correction_cost_speed(float value) {
  _internal_set_player_correction_cost_speed(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.player_correction_cost_speed)
}

// float mini_map_world_width = 26;
inline void PlayerGlobalConfigConstants::clear_mini_map_world_width() {
  _impl_.mini_map_world_width_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_mini_map_world_width() const {
  return _impl_.mini_map_world_width_;
}
inline float PlayerGlobalConfigConstants::mini_map_world_width() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.mini_map_world_width)
  return _internal_mini_map_world_width();
}
inline void PlayerGlobalConfigConstants::_internal_set_mini_map_world_width(float value) {
  
  _impl_.mini_map_world_width_ = value;
}
inline void PlayerGlobalConfigConstants::set_mini_map_world_width(float value) {
  _internal_set_mini_map_world_width(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.mini_map_world_width)
}

// float mini_map_world_height = 27;
inline void PlayerGlobalConfigConstants::clear_mini_map_world_height() {
  _impl_.mini_map_world_height_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_mini_map_world_height() const {
  return _impl_.mini_map_world_height_;
}
inline float PlayerGlobalConfigConstants::mini_map_world_height() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.mini_map_world_height)
  return _internal_mini_map_world_height();
}
inline void PlayerGlobalConfigConstants::_internal_set_mini_map_world_height(float value) {
  
  _impl_.mini_map_world_height_ = value;
}
inline void PlayerGlobalConfigConstants::set_mini_map_world_height(float value) {
  _internal_set_mini_map_world_height(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.mini_map_world_height)
}

// float activate_entities_distance = 28;
inline void PlayerGlobalConfigConstants::clear_activate_entities_distance() {
  _impl_.activate_entities_distance_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_activate_entities_distance() const {
  return _impl_.activate_entities_distance_;
}
inline float PlayerGlobalConfigConstants::activate_entities_distance() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.activate_entities_distance)
  return _internal_activate_entities_distance();
}
inline void PlayerGlobalConfigConstants::_internal_set_activate_entities_distance(float value) {
  
  _impl_.activate_entities_distance_ = value;
}
inline void PlayerGlobalConfigConstants::set_activate_entities_distance(float value) {
  _internal_set_activate_entities_distance(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.activate_entities_distance)
}

// float select_box_auto_disappear_time = 29;
inline void PlayerGlobalConfigConstants::clear_select_box_auto_disappear_time() {
  _impl_.select_box_auto_disappear_time_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_select_box_auto_disappear_time() const {
  return _impl_.select_box_auto_disappear_time_;
}
inline float PlayerGlobalConfigConstants::select_box_auto_disappear_time() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.select_box_auto_disappear_time)
  return _internal_select_box_auto_disappear_time();
}
inline void PlayerGlobalConfigConstants::_internal_set_select_box_auto_disappear_time(float value) {
  
  _impl_.select_box_auto_disappear_time_ = value;
}
inline void PlayerGlobalConfigConstants::set_select_box_auto_disappear_time(float value) {
  _internal_set_select_box_auto_disappear_time(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.select_box_auto_disappear_time)
}

// float intervene_to_auto_seconds = 30;
inline void PlayerGlobalConfigConstants::clear_intervene_to_auto_seconds() {
  _impl_.intervene_to_auto_seconds_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_intervene_to_auto_seconds() const {
  return _impl_.intervene_to_auto_seconds_;
}
inline float PlayerGlobalConfigConstants::intervene_to_auto_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.intervene_to_auto_seconds)
  return _internal_intervene_to_auto_seconds();
}
inline void PlayerGlobalConfigConstants::_internal_set_intervene_to_auto_seconds(float value) {
  
  _impl_.intervene_to_auto_seconds_ = value;
}
inline void PlayerGlobalConfigConstants::set_intervene_to_auto_seconds(float value) {
  _internal_set_intervene_to_auto_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.intervene_to_auto_seconds)
}

// float set_pause_move_function_time = 31;
inline void PlayerGlobalConfigConstants::clear_set_pause_move_function_time() {
  _impl_.set_pause_move_function_time_ = 0;
}
inline float PlayerGlobalConfigConstants::_internal_set_pause_move_function_time() const {
  return _impl_.set_pause_move_function_time_;
}
inline float PlayerGlobalConfigConstants::set_pause_move_function_time() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigConstants.set_pause_move_function_time)
  return _internal_set_pause_move_function_time();
}
inline void PlayerGlobalConfigConstants::_internal_set_set_pause_move_function_time(float value) {
  
  _impl_.set_pause_move_function_time_ = value;
}
inline void PlayerGlobalConfigConstants::set_set_pause_move_function_time(float value) {
  _internal_set_set_pause_move_function_time(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigConstants.set_pause_move_function_time)
}

// -------------------------------------------------------------------

// PlayerGlobalConfigAbility

// int32 open_rank = 1;
inline void PlayerGlobalConfigAbility::clear_open_rank() {
  _impl_.open_rank_ = 0;
}
inline int32_t PlayerGlobalConfigAbility::_internal_open_rank() const {
  return _impl_.open_rank_;
}
inline int32_t PlayerGlobalConfigAbility::open_rank() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigAbility.open_rank)
  return _internal_open_rank();
}
inline void PlayerGlobalConfigAbility::_internal_set_open_rank(int32_t value) {
  
  _impl_.open_rank_ = value;
}
inline void PlayerGlobalConfigAbility::set_open_rank(int32_t value) {
  _internal_set_open_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigAbility.open_rank)
}

// int32 open_secondary_rank = 2;
inline void PlayerGlobalConfigAbility::clear_open_secondary_rank() {
  _impl_.open_secondary_rank_ = 0;
}
inline int32_t PlayerGlobalConfigAbility::_internal_open_secondary_rank() const {
  return _impl_.open_secondary_rank_;
}
inline int32_t PlayerGlobalConfigAbility::open_secondary_rank() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigAbility.open_secondary_rank)
  return _internal_open_secondary_rank();
}
inline void PlayerGlobalConfigAbility::_internal_set_open_secondary_rank(int32_t value) {
  
  _impl_.open_secondary_rank_ = value;
}
inline void PlayerGlobalConfigAbility::set_open_secondary_rank(int32_t value) {
  _internal_set_open_secondary_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigAbility.open_secondary_rank)
}

// repeated int32 slots_unlock_rank = 3;
inline int PlayerGlobalConfigAbility::_internal_slots_unlock_rank_size() const {
  return _impl_.slots_unlock_rank_.size();
}
inline int PlayerGlobalConfigAbility::slots_unlock_rank_size() const {
  return _internal_slots_unlock_rank_size();
}
inline void PlayerGlobalConfigAbility::clear_slots_unlock_rank() {
  _impl_.slots_unlock_rank_.Clear();
}
inline int32_t PlayerGlobalConfigAbility::_internal_slots_unlock_rank(int index) const {
  return _impl_.slots_unlock_rank_.Get(index);
}
inline int32_t PlayerGlobalConfigAbility::slots_unlock_rank(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigAbility.slots_unlock_rank)
  return _internal_slots_unlock_rank(index);
}
inline void PlayerGlobalConfigAbility::set_slots_unlock_rank(int index, int32_t value) {
  _impl_.slots_unlock_rank_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigAbility.slots_unlock_rank)
}
inline void PlayerGlobalConfigAbility::_internal_add_slots_unlock_rank(int32_t value) {
  _impl_.slots_unlock_rank_.Add(value);
}
inline void PlayerGlobalConfigAbility::add_slots_unlock_rank(int32_t value) {
  _internal_add_slots_unlock_rank(value);
  // @@protoc_insertion_point(field_add:idlepb.PlayerGlobalConfigAbility.slots_unlock_rank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PlayerGlobalConfigAbility::_internal_slots_unlock_rank() const {
  return _impl_.slots_unlock_rank_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PlayerGlobalConfigAbility::slots_unlock_rank() const {
  // @@protoc_insertion_point(field_list:idlepb.PlayerGlobalConfigAbility.slots_unlock_rank)
  return _internal_slots_unlock_rank();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PlayerGlobalConfigAbility::_internal_mutable_slots_unlock_rank() {
  return &_impl_.slots_unlock_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PlayerGlobalConfigAbility::mutable_slots_unlock_rank() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.PlayerGlobalConfigAbility.slots_unlock_rank)
  return _internal_mutable_slots_unlock_rank();
}

// -------------------------------------------------------------------

// PlayerGlobalConfigBreathingExercise

// float speed = 1;
inline void PlayerGlobalConfigBreathingExercise::clear_speed() {
  _impl_.speed_ = 0;
}
inline float PlayerGlobalConfigBreathingExercise::_internal_speed() const {
  return _impl_.speed_;
}
inline float PlayerGlobalConfigBreathingExercise::speed() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigBreathingExercise.speed)
  return _internal_speed();
}
inline void PlayerGlobalConfigBreathingExercise::_internal_set_speed(float value) {
  
  _impl_.speed_ = value;
}
inline void PlayerGlobalConfigBreathingExercise::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigBreathingExercise.speed)
}

// float cancel_pct = 2;
inline void PlayerGlobalConfigBreathingExercise::clear_cancel_pct() {
  _impl_.cancel_pct_ = 0;
}
inline float PlayerGlobalConfigBreathingExercise::_internal_cancel_pct() const {
  return _impl_.cancel_pct_;
}
inline float PlayerGlobalConfigBreathingExercise::cancel_pct() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigBreathingExercise.cancel_pct)
  return _internal_cancel_pct();
}
inline void PlayerGlobalConfigBreathingExercise::_internal_set_cancel_pct(float value) {
  
  _impl_.cancel_pct_ = value;
}
inline void PlayerGlobalConfigBreathingExercise::set_cancel_pct(float value) {
  _internal_set_cancel_pct(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigBreathingExercise.cancel_pct)
}

// float high_min_pct = 3;
inline void PlayerGlobalConfigBreathingExercise::clear_high_min_pct() {
  _impl_.high_min_pct_ = 0;
}
inline float PlayerGlobalConfigBreathingExercise::_internal_high_min_pct() const {
  return _impl_.high_min_pct_;
}
inline float PlayerGlobalConfigBreathingExercise::high_min_pct() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigBreathingExercise.high_min_pct)
  return _internal_high_min_pct();
}
inline void PlayerGlobalConfigBreathingExercise::_internal_set_high_min_pct(float value) {
  
  _impl_.high_min_pct_ = value;
}
inline void PlayerGlobalConfigBreathingExercise::set_high_min_pct(float value) {
  _internal_set_high_min_pct(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigBreathingExercise.high_min_pct)
}

// float perfect_min_pct = 4;
inline void PlayerGlobalConfigBreathingExercise::clear_perfect_min_pct() {
  _impl_.perfect_min_pct_ = 0;
}
inline float PlayerGlobalConfigBreathingExercise::_internal_perfect_min_pct() const {
  return _impl_.perfect_min_pct_;
}
inline float PlayerGlobalConfigBreathingExercise::perfect_min_pct() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigBreathingExercise.perfect_min_pct)
  return _internal_perfect_min_pct();
}
inline void PlayerGlobalConfigBreathingExercise::_internal_set_perfect_min_pct(float value) {
  
  _impl_.perfect_min_pct_ = value;
}
inline void PlayerGlobalConfigBreathingExercise::set_perfect_min_pct(float value) {
  _internal_set_perfect_min_pct(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigBreathingExercise.perfect_min_pct)
}

// float perfect_max_pct = 5;
inline void PlayerGlobalConfigBreathingExercise::clear_perfect_max_pct() {
  _impl_.perfect_max_pct_ = 0;
}
inline float PlayerGlobalConfigBreathingExercise::_internal_perfect_max_pct() const {
  return _impl_.perfect_max_pct_;
}
inline float PlayerGlobalConfigBreathingExercise::perfect_max_pct() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigBreathingExercise.perfect_max_pct)
  return _internal_perfect_max_pct();
}
inline void PlayerGlobalConfigBreathingExercise::_internal_set_perfect_max_pct(float value) {
  
  _impl_.perfect_max_pct_ = value;
}
inline void PlayerGlobalConfigBreathingExercise::set_perfect_max_pct(float value) {
  _internal_set_perfect_max_pct(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigBreathingExercise.perfect_max_pct)
}

// int32 rate2 = 6;
inline void PlayerGlobalConfigBreathingExercise::clear_rate2() {
  _impl_.rate2_ = 0;
}
inline int32_t PlayerGlobalConfigBreathingExercise::_internal_rate2() const {
  return _impl_.rate2_;
}
inline int32_t PlayerGlobalConfigBreathingExercise::rate2() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigBreathingExercise.rate2)
  return _internal_rate2();
}
inline void PlayerGlobalConfigBreathingExercise::_internal_set_rate2(int32_t value) {
  
  _impl_.rate2_ = value;
}
inline void PlayerGlobalConfigBreathingExercise::set_rate2(int32_t value) {
  _internal_set_rate2(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigBreathingExercise.rate2)
}

// int32 rate5 = 7;
inline void PlayerGlobalConfigBreathingExercise::clear_rate5() {
  _impl_.rate5_ = 0;
}
inline int32_t PlayerGlobalConfigBreathingExercise::_internal_rate5() const {
  return _impl_.rate5_;
}
inline int32_t PlayerGlobalConfigBreathingExercise::rate5() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigBreathingExercise.rate5)
  return _internal_rate5();
}
inline void PlayerGlobalConfigBreathingExercise::_internal_set_rate5(int32_t value) {
  
  _impl_.rate5_ = value;
}
inline void PlayerGlobalConfigBreathingExercise::set_rate5(int32_t value) {
  _internal_set_rate5(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigBreathingExercise.rate5)
}

// int32 rate10 = 8;
inline void PlayerGlobalConfigBreathingExercise::clear_rate10() {
  _impl_.rate10_ = 0;
}
inline int32_t PlayerGlobalConfigBreathingExercise::_internal_rate10() const {
  return _impl_.rate10_;
}
inline int32_t PlayerGlobalConfigBreathingExercise::rate10() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigBreathingExercise.rate10)
  return _internal_rate10();
}
inline void PlayerGlobalConfigBreathingExercise::_internal_set_rate10(int32_t value) {
  
  _impl_.rate10_ = value;
}
inline void PlayerGlobalConfigBreathingExercise::set_rate10(int32_t value) {
  _internal_set_rate10(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigBreathingExercise.rate10)
}

// float basic_ling_qi = 9;
inline void PlayerGlobalConfigBreathingExercise::clear_basic_ling_qi() {
  _impl_.basic_ling_qi_ = 0;
}
inline float PlayerGlobalConfigBreathingExercise::_internal_basic_ling_qi() const {
  return _impl_.basic_ling_qi_;
}
inline float PlayerGlobalConfigBreathingExercise::basic_ling_qi() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigBreathingExercise.basic_ling_qi)
  return _internal_basic_ling_qi();
}
inline void PlayerGlobalConfigBreathingExercise::_internal_set_basic_ling_qi(float value) {
  
  _impl_.basic_ling_qi_ = value;
}
inline void PlayerGlobalConfigBreathingExercise::set_basic_ling_qi(float value) {
  _internal_set_basic_ling_qi(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigBreathingExercise.basic_ling_qi)
}

// -------------------------------------------------------------------

// PlayerGlobalConfigThunderTestDegreeConfig

// int32 degree = 1;
inline void PlayerGlobalConfigThunderTestDegreeConfig::clear_degree() {
  _impl_.degree_ = 0;
}
inline int32_t PlayerGlobalConfigThunderTestDegreeConfig::_internal_degree() const {
  return _impl_.degree_;
}
inline int32_t PlayerGlobalConfigThunderTestDegreeConfig::degree() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigThunderTestDegreeConfig.degree)
  return _internal_degree();
}
inline void PlayerGlobalConfigThunderTestDegreeConfig::_internal_set_degree(int32_t value) {
  
  _impl_.degree_ = value;
}
inline void PlayerGlobalConfigThunderTestDegreeConfig::set_degree(int32_t value) {
  _internal_set_degree(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigThunderTestDegreeConfig.degree)
}

// float val = 2;
inline void PlayerGlobalConfigThunderTestDegreeConfig::clear_val() {
  _impl_.val_ = 0;
}
inline float PlayerGlobalConfigThunderTestDegreeConfig::_internal_val() const {
  return _impl_.val_;
}
inline float PlayerGlobalConfigThunderTestDegreeConfig::val() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigThunderTestDegreeConfig.val)
  return _internal_val();
}
inline void PlayerGlobalConfigThunderTestDegreeConfig::_internal_set_val(float value) {
  
  _impl_.val_ = value;
}
inline void PlayerGlobalConfigThunderTestDegreeConfig::set_val(float value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigThunderTestDegreeConfig.val)
}

// -------------------------------------------------------------------

// PlayerGlobalConfigThunderTest

// repeated float damage_coef = 1;
inline int PlayerGlobalConfigThunderTest::_internal_damage_coef_size() const {
  return _impl_.damage_coef_.size();
}
inline int PlayerGlobalConfigThunderTest::damage_coef_size() const {
  return _internal_damage_coef_size();
}
inline void PlayerGlobalConfigThunderTest::clear_damage_coef() {
  _impl_.damage_coef_.Clear();
}
inline float PlayerGlobalConfigThunderTest::_internal_damage_coef(int index) const {
  return _impl_.damage_coef_.Get(index);
}
inline float PlayerGlobalConfigThunderTest::damage_coef(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigThunderTest.damage_coef)
  return _internal_damage_coef(index);
}
inline void PlayerGlobalConfigThunderTest::set_damage_coef(int index, float value) {
  _impl_.damage_coef_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigThunderTest.damage_coef)
}
inline void PlayerGlobalConfigThunderTest::_internal_add_damage_coef(float value) {
  _impl_.damage_coef_.Add(value);
}
inline void PlayerGlobalConfigThunderTest::add_damage_coef(float value) {
  _internal_add_damage_coef(value);
  // @@protoc_insertion_point(field_add:idlepb.PlayerGlobalConfigThunderTest.damage_coef)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlayerGlobalConfigThunderTest::_internal_damage_coef() const {
  return _impl_.damage_coef_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlayerGlobalConfigThunderTest::damage_coef() const {
  // @@protoc_insertion_point(field_list:idlepb.PlayerGlobalConfigThunderTest.damage_coef)
  return _internal_damage_coef();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlayerGlobalConfigThunderTest::_internal_mutable_damage_coef() {
  return &_impl_.damage_coef_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlayerGlobalConfigThunderTest::mutable_damage_coef() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.PlayerGlobalConfigThunderTest.damage_coef)
  return _internal_mutable_damage_coef();
}

// repeated .idlepb.PlayerGlobalConfigThunderTestDegreeConfig damage_base = 2;
inline int PlayerGlobalConfigThunderTest::_internal_damage_base_size() const {
  return _impl_.damage_base_.size();
}
inline int PlayerGlobalConfigThunderTest::damage_base_size() const {
  return _internal_damage_base_size();
}
inline void PlayerGlobalConfigThunderTest::clear_damage_base() {
  _impl_.damage_base_.Clear();
}
inline ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig* PlayerGlobalConfigThunderTest::mutable_damage_base(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerGlobalConfigThunderTest.damage_base)
  return _impl_.damage_base_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig >*
PlayerGlobalConfigThunderTest::mutable_damage_base() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.PlayerGlobalConfigThunderTest.damage_base)
  return &_impl_.damage_base_;
}
inline const ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig& PlayerGlobalConfigThunderTest::_internal_damage_base(int index) const {
  return _impl_.damage_base_.Get(index);
}
inline const ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig& PlayerGlobalConfigThunderTest::damage_base(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigThunderTest.damage_base)
  return _internal_damage_base(index);
}
inline ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig* PlayerGlobalConfigThunderTest::_internal_add_damage_base() {
  return _impl_.damage_base_.Add();
}
inline ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig* PlayerGlobalConfigThunderTest::add_damage_base() {
  ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig* _add = _internal_add_damage_base();
  // @@protoc_insertion_point(field_add:idlepb.PlayerGlobalConfigThunderTest.damage_base)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig >&
PlayerGlobalConfigThunderTest::damage_base() const {
  // @@protoc_insertion_point(field_list:idlepb.PlayerGlobalConfigThunderTest.damage_base)
  return _impl_.damage_base_;
}

// -------------------------------------------------------------------

// PlayerGlobalConfigAlchemy

// float each_refining_seconds = 1;
inline void PlayerGlobalConfigAlchemy::clear_each_refining_seconds() {
  _impl_.each_refining_seconds_ = 0;
}
inline float PlayerGlobalConfigAlchemy::_internal_each_refining_seconds() const {
  return _impl_.each_refining_seconds_;
}
inline float PlayerGlobalConfigAlchemy::each_refining_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigAlchemy.each_refining_seconds)
  return _internal_each_refining_seconds();
}
inline void PlayerGlobalConfigAlchemy::_internal_set_each_refining_seconds(float value) {
  
  _impl_.each_refining_seconds_ = value;
}
inline void PlayerGlobalConfigAlchemy::set_each_refining_seconds(float value) {
  _internal_set_each_refining_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigAlchemy.each_refining_seconds)
}

// int32 big_chance_value = 2;
inline void PlayerGlobalConfigAlchemy::clear_big_chance_value() {
  _impl_.big_chance_value_ = 0;
}
inline int32_t PlayerGlobalConfigAlchemy::_internal_big_chance_value() const {
  return _impl_.big_chance_value_;
}
inline int32_t PlayerGlobalConfigAlchemy::big_chance_value() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigAlchemy.big_chance_value)
  return _internal_big_chance_value();
}
inline void PlayerGlobalConfigAlchemy::_internal_set_big_chance_value(int32_t value) {
  
  _impl_.big_chance_value_ = value;
}
inline void PlayerGlobalConfigAlchemy::set_big_chance_value(int32_t value) {
  _internal_set_big_chance_value(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigAlchemy.big_chance_value)
}

// int32 small_chance_value = 3;
inline void PlayerGlobalConfigAlchemy::clear_small_chance_value() {
  _impl_.small_chance_value_ = 0;
}
inline int32_t PlayerGlobalConfigAlchemy::_internal_small_chance_value() const {
  return _impl_.small_chance_value_;
}
inline int32_t PlayerGlobalConfigAlchemy::small_chance_value() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigAlchemy.small_chance_value)
  return _internal_small_chance_value();
}
inline void PlayerGlobalConfigAlchemy::_internal_set_small_chance_value(int32_t value) {
  
  _impl_.small_chance_value_ = value;
}
inline void PlayerGlobalConfigAlchemy::set_small_chance_value(int32_t value) {
  _internal_set_small_chance_value(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigAlchemy.small_chance_value)
}

// int32 max_daily_count = 4;
inline void PlayerGlobalConfigAlchemy::clear_max_daily_count() {
  _impl_.max_daily_count_ = 0;
}
inline int32_t PlayerGlobalConfigAlchemy::_internal_max_daily_count() const {
  return _impl_.max_daily_count_;
}
inline int32_t PlayerGlobalConfigAlchemy::max_daily_count() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigAlchemy.max_daily_count)
  return _internal_max_daily_count();
}
inline void PlayerGlobalConfigAlchemy::_internal_set_max_daily_count(int32_t value) {
  
  _impl_.max_daily_count_ = value;
}
inline void PlayerGlobalConfigAlchemy::set_max_daily_count(int32_t value) {
  _internal_set_max_daily_count(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigAlchemy.max_daily_count)
}

// -------------------------------------------------------------------

// PlayerGlobalConfigForgeDestroyBackItemConfig

// int32 degree = 1;
inline void PlayerGlobalConfigForgeDestroyBackItemConfig::clear_degree() {
  _impl_.degree_ = 0;
}
inline int32_t PlayerGlobalConfigForgeDestroyBackItemConfig::_internal_degree() const {
  return _impl_.degree_;
}
inline int32_t PlayerGlobalConfigForgeDestroyBackItemConfig::degree() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig.degree)
  return _internal_degree();
}
inline void PlayerGlobalConfigForgeDestroyBackItemConfig::_internal_set_degree(int32_t value) {
  
  _impl_.degree_ = value;
}
inline void PlayerGlobalConfigForgeDestroyBackItemConfig::set_degree(int32_t value) {
  _internal_set_degree(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig.degree)
}

// int32 item_id = 2;
inline void PlayerGlobalConfigForgeDestroyBackItemConfig::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t PlayerGlobalConfigForgeDestroyBackItemConfig::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t PlayerGlobalConfigForgeDestroyBackItemConfig::item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig.item_id)
  return _internal_item_id();
}
inline void PlayerGlobalConfigForgeDestroyBackItemConfig::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void PlayerGlobalConfigForgeDestroyBackItemConfig::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig.item_id)
}

// int32 item_num = 3;
inline void PlayerGlobalConfigForgeDestroyBackItemConfig::clear_item_num() {
  _impl_.item_num_ = 0;
}
inline int32_t PlayerGlobalConfigForgeDestroyBackItemConfig::_internal_item_num() const {
  return _impl_.item_num_;
}
inline int32_t PlayerGlobalConfigForgeDestroyBackItemConfig::item_num() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig.item_num)
  return _internal_item_num();
}
inline void PlayerGlobalConfigForgeDestroyBackItemConfig::_internal_set_item_num(int32_t value) {
  
  _impl_.item_num_ = value;
}
inline void PlayerGlobalConfigForgeDestroyBackItemConfig::set_item_num(int32_t value) {
  _internal_set_item_num(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig.item_num)
}

// -------------------------------------------------------------------

// PlayerGlobalConfigForge

// float each_refining_seconds = 1;
inline void PlayerGlobalConfigForge::clear_each_refining_seconds() {
  _impl_.each_refining_seconds_ = 0;
}
inline float PlayerGlobalConfigForge::_internal_each_refining_seconds() const {
  return _impl_.each_refining_seconds_;
}
inline float PlayerGlobalConfigForge::each_refining_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForge.each_refining_seconds)
  return _internal_each_refining_seconds();
}
inline void PlayerGlobalConfigForge::_internal_set_each_refining_seconds(float value) {
  
  _impl_.each_refining_seconds_ = value;
}
inline void PlayerGlobalConfigForge::set_each_refining_seconds(float value) {
  _internal_set_each_refining_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForge.each_refining_seconds)
}

// int32 big_chance_value = 2;
inline void PlayerGlobalConfigForge::clear_big_chance_value() {
  _impl_.big_chance_value_ = 0;
}
inline int32_t PlayerGlobalConfigForge::_internal_big_chance_value() const {
  return _impl_.big_chance_value_;
}
inline int32_t PlayerGlobalConfigForge::big_chance_value() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForge.big_chance_value)
  return _internal_big_chance_value();
}
inline void PlayerGlobalConfigForge::_internal_set_big_chance_value(int32_t value) {
  
  _impl_.big_chance_value_ = value;
}
inline void PlayerGlobalConfigForge::set_big_chance_value(int32_t value) {
  _internal_set_big_chance_value(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForge.big_chance_value)
}

// int32 small_chance_value = 3;
inline void PlayerGlobalConfigForge::clear_small_chance_value() {
  _impl_.small_chance_value_ = 0;
}
inline int32_t PlayerGlobalConfigForge::_internal_small_chance_value() const {
  return _impl_.small_chance_value_;
}
inline int32_t PlayerGlobalConfigForge::small_chance_value() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForge.small_chance_value)
  return _internal_small_chance_value();
}
inline void PlayerGlobalConfigForge::_internal_set_small_chance_value(int32_t value) {
  
  _impl_.small_chance_value_ = value;
}
inline void PlayerGlobalConfigForge::set_small_chance_value(int32_t value) {
  _internal_set_small_chance_value(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForge.small_chance_value)
}

// int32 max_daily_count = 4;
inline void PlayerGlobalConfigForge::clear_max_daily_count() {
  _impl_.max_daily_count_ = 0;
}
inline int32_t PlayerGlobalConfigForge::_internal_max_daily_count() const {
  return _impl_.max_daily_count_;
}
inline int32_t PlayerGlobalConfigForge::max_daily_count() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForge.max_daily_count)
  return _internal_max_daily_count();
}
inline void PlayerGlobalConfigForge::_internal_set_max_daily_count(int32_t value) {
  
  _impl_.max_daily_count_ = value;
}
inline void PlayerGlobalConfigForge::set_max_daily_count(int32_t value) {
  _internal_set_max_daily_count(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForge.max_daily_count)
}

// int32 max_daily_extra_materials_use_count = 5;
inline void PlayerGlobalConfigForge::clear_max_daily_extra_materials_use_count() {
  _impl_.max_daily_extra_materials_use_count_ = 0;
}
inline int32_t PlayerGlobalConfigForge::_internal_max_daily_extra_materials_use_count() const {
  return _impl_.max_daily_extra_materials_use_count_;
}
inline int32_t PlayerGlobalConfigForge::max_daily_extra_materials_use_count() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForge.max_daily_extra_materials_use_count)
  return _internal_max_daily_extra_materials_use_count();
}
inline void PlayerGlobalConfigForge::_internal_set_max_daily_extra_materials_use_count(int32_t value) {
  
  _impl_.max_daily_extra_materials_use_count_ = value;
}
inline void PlayerGlobalConfigForge::set_max_daily_extra_materials_use_count(int32_t value) {
  _internal_set_max_daily_extra_materials_use_count(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForge.max_daily_extra_materials_use_count)
}

// int32 revert_cost_gold = 6;
inline void PlayerGlobalConfigForge::clear_revert_cost_gold() {
  _impl_.revert_cost_gold_ = 0;
}
inline int32_t PlayerGlobalConfigForge::_internal_revert_cost_gold() const {
  return _impl_.revert_cost_gold_;
}
inline int32_t PlayerGlobalConfigForge::revert_cost_gold() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForge.revert_cost_gold)
  return _internal_revert_cost_gold();
}
inline void PlayerGlobalConfigForge::_internal_set_revert_cost_gold(int32_t value) {
  
  _impl_.revert_cost_gold_ = value;
}
inline void PlayerGlobalConfigForge::set_revert_cost_gold(int32_t value) {
  _internal_set_revert_cost_gold(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForge.revert_cost_gold)
}

// int32 destroy_cost_gold = 7;
inline void PlayerGlobalConfigForge::clear_destroy_cost_gold() {
  _impl_.destroy_cost_gold_ = 0;
}
inline int32_t PlayerGlobalConfigForge::_internal_destroy_cost_gold() const {
  return _impl_.destroy_cost_gold_;
}
inline int32_t PlayerGlobalConfigForge::destroy_cost_gold() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForge.destroy_cost_gold)
  return _internal_destroy_cost_gold();
}
inline void PlayerGlobalConfigForge::_internal_set_destroy_cost_gold(int32_t value) {
  
  _impl_.destroy_cost_gold_ = value;
}
inline void PlayerGlobalConfigForge::set_destroy_cost_gold(int32_t value) {
  _internal_set_destroy_cost_gold(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForge.destroy_cost_gold)
}

// repeated .idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig destroy_get_item_num = 8;
inline int PlayerGlobalConfigForge::_internal_destroy_get_item_num_size() const {
  return _impl_.destroy_get_item_num_.size();
}
inline int PlayerGlobalConfigForge::destroy_get_item_num_size() const {
  return _internal_destroy_get_item_num_size();
}
inline void PlayerGlobalConfigForge::clear_destroy_get_item_num() {
  _impl_.destroy_get_item_num_.Clear();
}
inline ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig* PlayerGlobalConfigForge::mutable_destroy_get_item_num(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerGlobalConfigForge.destroy_get_item_num)
  return _impl_.destroy_get_item_num_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig >*
PlayerGlobalConfigForge::mutable_destroy_get_item_num() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.PlayerGlobalConfigForge.destroy_get_item_num)
  return &_impl_.destroy_get_item_num_;
}
inline const ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig& PlayerGlobalConfigForge::_internal_destroy_get_item_num(int index) const {
  return _impl_.destroy_get_item_num_.Get(index);
}
inline const ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig& PlayerGlobalConfigForge::destroy_get_item_num(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForge.destroy_get_item_num)
  return _internal_destroy_get_item_num(index);
}
inline ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig* PlayerGlobalConfigForge::_internal_add_destroy_get_item_num() {
  return _impl_.destroy_get_item_num_.Add();
}
inline ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig* PlayerGlobalConfigForge::add_destroy_get_item_num() {
  ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig* _add = _internal_add_destroy_get_item_num();
  // @@protoc_insertion_point(field_add:idlepb.PlayerGlobalConfigForge.destroy_get_item_num)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig >&
PlayerGlobalConfigForge::destroy_get_item_num() const {
  // @@protoc_insertion_point(field_list:idlepb.PlayerGlobalConfigForge.destroy_get_item_num)
  return _impl_.destroy_get_item_num_;
}

// int32 found_cost_gold = 9;
inline void PlayerGlobalConfigForge::clear_found_cost_gold() {
  _impl_.found_cost_gold_ = 0;
}
inline int32_t PlayerGlobalConfigForge::_internal_found_cost_gold() const {
  return _impl_.found_cost_gold_;
}
inline int32_t PlayerGlobalConfigForge::found_cost_gold() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForge.found_cost_gold)
  return _internal_found_cost_gold();
}
inline void PlayerGlobalConfigForge::_internal_set_found_cost_gold(int32_t value) {
  
  _impl_.found_cost_gold_ = value;
}
inline void PlayerGlobalConfigForge::set_found_cost_gold(int32_t value) {
  _internal_set_found_cost_gold(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForge.found_cost_gold)
}

// int32 found_time = 10;
inline void PlayerGlobalConfigForge::clear_found_time() {
  _impl_.found_time_ = 0;
}
inline int32_t PlayerGlobalConfigForge::_internal_found_time() const {
  return _impl_.found_time_;
}
inline int32_t PlayerGlobalConfigForge::found_time() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigForge.found_time)
  return _internal_found_time();
}
inline void PlayerGlobalConfigForge::_internal_set_found_time(int32_t value) {
  
  _impl_.found_time_ = value;
}
inline void PlayerGlobalConfigForge::set_found_time(int32_t value) {
  _internal_set_found_time(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigForge.found_time)
}

// -------------------------------------------------------------------

// PlayerGlobalConfigFightMode

// int32 all_mode_require_rank = 1;
inline void PlayerGlobalConfigFightMode::clear_all_mode_require_rank() {
  _impl_.all_mode_require_rank_ = 0;
}
inline int32_t PlayerGlobalConfigFightMode::_internal_all_mode_require_rank() const {
  return _impl_.all_mode_require_rank_;
}
inline int32_t PlayerGlobalConfigFightMode::all_mode_require_rank() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigFightMode.all_mode_require_rank)
  return _internal_all_mode_require_rank();
}
inline void PlayerGlobalConfigFightMode::_internal_set_all_mode_require_rank(int32_t value) {
  
  _impl_.all_mode_require_rank_ = value;
}
inline void PlayerGlobalConfigFightMode::set_all_mode_require_rank(int32_t value) {
  _internal_set_all_mode_require_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigFightMode.all_mode_require_rank)
}

// float all_mode_to_peace_mode_need_seconds = 2;
inline void PlayerGlobalConfigFightMode::clear_all_mode_to_peace_mode_need_seconds() {
  _impl_.all_mode_to_peace_mode_need_seconds_ = 0;
}
inline float PlayerGlobalConfigFightMode::_internal_all_mode_to_peace_mode_need_seconds() const {
  return _impl_.all_mode_to_peace_mode_need_seconds_;
}
inline float PlayerGlobalConfigFightMode::all_mode_to_peace_mode_need_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigFightMode.all_mode_to_peace_mode_need_seconds)
  return _internal_all_mode_to_peace_mode_need_seconds();
}
inline void PlayerGlobalConfigFightMode::_internal_set_all_mode_to_peace_mode_need_seconds(float value) {
  
  _impl_.all_mode_to_peace_mode_need_seconds_ = value;
}
inline void PlayerGlobalConfigFightMode::set_all_mode_to_peace_mode_need_seconds(float value) {
  _internal_set_all_mode_to_peace_mode_need_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigFightMode.all_mode_to_peace_mode_need_seconds)
}

// float mode_change_need_seconds = 3;
inline void PlayerGlobalConfigFightMode::clear_mode_change_need_seconds() {
  _impl_.mode_change_need_seconds_ = 0;
}
inline float PlayerGlobalConfigFightMode::_internal_mode_change_need_seconds() const {
  return _impl_.mode_change_need_seconds_;
}
inline float PlayerGlobalConfigFightMode::mode_change_need_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigFightMode.mode_change_need_seconds)
  return _internal_mode_change_need_seconds();
}
inline void PlayerGlobalConfigFightMode::_internal_set_mode_change_need_seconds(float value) {
  
  _impl_.mode_change_need_seconds_ = value;
}
inline void PlayerGlobalConfigFightMode::set_mode_change_need_seconds(float value) {
  _internal_set_mode_change_need_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigFightMode.mode_change_need_seconds)
}

// float hate_sustain_seconds = 4;
inline void PlayerGlobalConfigFightMode::clear_hate_sustain_seconds() {
  _impl_.hate_sustain_seconds_ = 0;
}
inline float PlayerGlobalConfigFightMode::_internal_hate_sustain_seconds() const {
  return _impl_.hate_sustain_seconds_;
}
inline float PlayerGlobalConfigFightMode::hate_sustain_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigFightMode.hate_sustain_seconds)
  return _internal_hate_sustain_seconds();
}
inline void PlayerGlobalConfigFightMode::_internal_set_hate_sustain_seconds(float value) {
  
  _impl_.hate_sustain_seconds_ = value;
}
inline void PlayerGlobalConfigFightMode::set_hate_sustain_seconds(float value) {
  _internal_set_hate_sustain_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigFightMode.hate_sustain_seconds)
}

// int32 world_speed_unlock_rank = 5;
inline void PlayerGlobalConfigFightMode::clear_world_speed_unlock_rank() {
  _impl_.world_speed_unlock_rank_ = 0;
}
inline int32_t PlayerGlobalConfigFightMode::_internal_world_speed_unlock_rank() const {
  return _impl_.world_speed_unlock_rank_;
}
inline int32_t PlayerGlobalConfigFightMode::world_speed_unlock_rank() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigFightMode.world_speed_unlock_rank)
  return _internal_world_speed_unlock_rank();
}
inline void PlayerGlobalConfigFightMode::_internal_set_world_speed_unlock_rank(int32_t value) {
  
  _impl_.world_speed_unlock_rank_ = value;
}
inline void PlayerGlobalConfigFightMode::set_world_speed_unlock_rank(int32_t value) {
  _internal_set_world_speed_unlock_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigFightMode.world_speed_unlock_rank)
}

// -------------------------------------------------------------------

// PlayerGlobalConfigInventory

// int32 init_space = 1;
inline void PlayerGlobalConfigInventory::clear_init_space() {
  _impl_.init_space_ = 0;
}
inline int32_t PlayerGlobalConfigInventory::_internal_init_space() const {
  return _impl_.init_space_;
}
inline int32_t PlayerGlobalConfigInventory::init_space() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigInventory.init_space)
  return _internal_init_space();
}
inline void PlayerGlobalConfigInventory::_internal_set_init_space(int32_t value) {
  
  _impl_.init_space_ = value;
}
inline void PlayerGlobalConfigInventory::set_init_space(int32_t value) {
  _internal_set_init_space(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigInventory.init_space)
}

// int32 stage_up_add_space = 2;
inline void PlayerGlobalConfigInventory::clear_stage_up_add_space() {
  _impl_.stage_up_add_space_ = 0;
}
inline int32_t PlayerGlobalConfigInventory::_internal_stage_up_add_space() const {
  return _impl_.stage_up_add_space_;
}
inline int32_t PlayerGlobalConfigInventory::stage_up_add_space() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigInventory.stage_up_add_space)
  return _internal_stage_up_add_space();
}
inline void PlayerGlobalConfigInventory::_internal_set_stage_up_add_space(int32_t value) {
  
  _impl_.stage_up_add_space_ = value;
}
inline void PlayerGlobalConfigInventory::set_stage_up_add_space(int32_t value) {
  _internal_set_stage_up_add_space(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigInventory.stage_up_add_space)
}

// int32 full_mail_id = 3;
inline void PlayerGlobalConfigInventory::clear_full_mail_id() {
  _impl_.full_mail_id_ = 0;
}
inline int32_t PlayerGlobalConfigInventory::_internal_full_mail_id() const {
  return _impl_.full_mail_id_;
}
inline int32_t PlayerGlobalConfigInventory::full_mail_id() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfigInventory.full_mail_id)
  return _internal_full_mail_id();
}
inline void PlayerGlobalConfigInventory::_internal_set_full_mail_id(int32_t value) {
  
  _impl_.full_mail_id_ = value;
}
inline void PlayerGlobalConfigInventory::set_full_mail_id(int32_t value) {
  _internal_set_full_mail_id(value);
  // @@protoc_insertion_point(field_set:idlepb.PlayerGlobalConfigInventory.full_mail_id)
}

// -------------------------------------------------------------------

// PlayerGlobalConfig

// .idlepb.PlayerGlobalConfigConstants constants = 1;
inline bool PlayerGlobalConfig::_internal_has_constants() const {
  return this != internal_default_instance() && _impl_.constants_ != nullptr;
}
inline bool PlayerGlobalConfig::has_constants() const {
  return _internal_has_constants();
}
inline void PlayerGlobalConfig::clear_constants() {
  if (GetArenaForAllocation() == nullptr && _impl_.constants_ != nullptr) {
    delete _impl_.constants_;
  }
  _impl_.constants_ = nullptr;
}
inline const ::idlepb::PlayerGlobalConfigConstants& PlayerGlobalConfig::_internal_constants() const {
  const ::idlepb::PlayerGlobalConfigConstants* p = _impl_.constants_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerGlobalConfigConstants&>(
      ::idlepb::_PlayerGlobalConfigConstants_default_instance_);
}
inline const ::idlepb::PlayerGlobalConfigConstants& PlayerGlobalConfig::constants() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfig.constants)
  return _internal_constants();
}
inline void PlayerGlobalConfig::unsafe_arena_set_allocated_constants(
    ::idlepb::PlayerGlobalConfigConstants* constants) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.constants_);
  }
  _impl_.constants_ = constants;
  if (constants) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.PlayerGlobalConfig.constants)
}
inline ::idlepb::PlayerGlobalConfigConstants* PlayerGlobalConfig::release_constants() {
  
  ::idlepb::PlayerGlobalConfigConstants* temp = _impl_.constants_;
  _impl_.constants_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerGlobalConfigConstants* PlayerGlobalConfig::unsafe_arena_release_constants() {
  // @@protoc_insertion_point(field_release:idlepb.PlayerGlobalConfig.constants)
  
  ::idlepb::PlayerGlobalConfigConstants* temp = _impl_.constants_;
  _impl_.constants_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerGlobalConfigConstants* PlayerGlobalConfig::_internal_mutable_constants() {
  
  if (_impl_.constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerGlobalConfigConstants>(GetArenaForAllocation());
    _impl_.constants_ = p;
  }
  return _impl_.constants_;
}
inline ::idlepb::PlayerGlobalConfigConstants* PlayerGlobalConfig::mutable_constants() {
  ::idlepb::PlayerGlobalConfigConstants* _msg = _internal_mutable_constants();
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerGlobalConfig.constants)
  return _msg;
}
inline void PlayerGlobalConfig::set_allocated_constants(::idlepb::PlayerGlobalConfigConstants* constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.constants_;
  }
  if (constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(constants);
    if (message_arena != submessage_arena) {
      constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constants, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.constants_ = constants;
  // @@protoc_insertion_point(field_set_allocated:idlepb.PlayerGlobalConfig.constants)
}

// .idlepb.PlayerGlobalConfigRoleInitAttributes new_role_init_attrs = 2;
inline bool PlayerGlobalConfig::_internal_has_new_role_init_attrs() const {
  return this != internal_default_instance() && _impl_.new_role_init_attrs_ != nullptr;
}
inline bool PlayerGlobalConfig::has_new_role_init_attrs() const {
  return _internal_has_new_role_init_attrs();
}
inline void PlayerGlobalConfig::clear_new_role_init_attrs() {
  if (GetArenaForAllocation() == nullptr && _impl_.new_role_init_attrs_ != nullptr) {
    delete _impl_.new_role_init_attrs_;
  }
  _impl_.new_role_init_attrs_ = nullptr;
}
inline const ::idlepb::PlayerGlobalConfigRoleInitAttributes& PlayerGlobalConfig::_internal_new_role_init_attrs() const {
  const ::idlepb::PlayerGlobalConfigRoleInitAttributes* p = _impl_.new_role_init_attrs_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerGlobalConfigRoleInitAttributes&>(
      ::idlepb::_PlayerGlobalConfigRoleInitAttributes_default_instance_);
}
inline const ::idlepb::PlayerGlobalConfigRoleInitAttributes& PlayerGlobalConfig::new_role_init_attrs() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfig.new_role_init_attrs)
  return _internal_new_role_init_attrs();
}
inline void PlayerGlobalConfig::unsafe_arena_set_allocated_new_role_init_attrs(
    ::idlepb::PlayerGlobalConfigRoleInitAttributes* new_role_init_attrs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_role_init_attrs_);
  }
  _impl_.new_role_init_attrs_ = new_role_init_attrs;
  if (new_role_init_attrs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.PlayerGlobalConfig.new_role_init_attrs)
}
inline ::idlepb::PlayerGlobalConfigRoleInitAttributes* PlayerGlobalConfig::release_new_role_init_attrs() {
  
  ::idlepb::PlayerGlobalConfigRoleInitAttributes* temp = _impl_.new_role_init_attrs_;
  _impl_.new_role_init_attrs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerGlobalConfigRoleInitAttributes* PlayerGlobalConfig::unsafe_arena_release_new_role_init_attrs() {
  // @@protoc_insertion_point(field_release:idlepb.PlayerGlobalConfig.new_role_init_attrs)
  
  ::idlepb::PlayerGlobalConfigRoleInitAttributes* temp = _impl_.new_role_init_attrs_;
  _impl_.new_role_init_attrs_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerGlobalConfigRoleInitAttributes* PlayerGlobalConfig::_internal_mutable_new_role_init_attrs() {
  
  if (_impl_.new_role_init_attrs_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerGlobalConfigRoleInitAttributes>(GetArenaForAllocation());
    _impl_.new_role_init_attrs_ = p;
  }
  return _impl_.new_role_init_attrs_;
}
inline ::idlepb::PlayerGlobalConfigRoleInitAttributes* PlayerGlobalConfig::mutable_new_role_init_attrs() {
  ::idlepb::PlayerGlobalConfigRoleInitAttributes* _msg = _internal_mutable_new_role_init_attrs();
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerGlobalConfig.new_role_init_attrs)
  return _msg;
}
inline void PlayerGlobalConfig::set_allocated_new_role_init_attrs(::idlepb::PlayerGlobalConfigRoleInitAttributes* new_role_init_attrs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.new_role_init_attrs_;
  }
  if (new_role_init_attrs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_role_init_attrs);
    if (message_arena != submessage_arena) {
      new_role_init_attrs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_role_init_attrs, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.new_role_init_attrs_ = new_role_init_attrs;
  // @@protoc_insertion_point(field_set_allocated:idlepb.PlayerGlobalConfig.new_role_init_attrs)
}

// .idlepb.PlayerGlobalConfigAbility ability = 3;
inline bool PlayerGlobalConfig::_internal_has_ability() const {
  return this != internal_default_instance() && _impl_.ability_ != nullptr;
}
inline bool PlayerGlobalConfig::has_ability() const {
  return _internal_has_ability();
}
inline void PlayerGlobalConfig::clear_ability() {
  if (GetArenaForAllocation() == nullptr && _impl_.ability_ != nullptr) {
    delete _impl_.ability_;
  }
  _impl_.ability_ = nullptr;
}
inline const ::idlepb::PlayerGlobalConfigAbility& PlayerGlobalConfig::_internal_ability() const {
  const ::idlepb::PlayerGlobalConfigAbility* p = _impl_.ability_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerGlobalConfigAbility&>(
      ::idlepb::_PlayerGlobalConfigAbility_default_instance_);
}
inline const ::idlepb::PlayerGlobalConfigAbility& PlayerGlobalConfig::ability() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfig.ability)
  return _internal_ability();
}
inline void PlayerGlobalConfig::unsafe_arena_set_allocated_ability(
    ::idlepb::PlayerGlobalConfigAbility* ability) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ability_);
  }
  _impl_.ability_ = ability;
  if (ability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.PlayerGlobalConfig.ability)
}
inline ::idlepb::PlayerGlobalConfigAbility* PlayerGlobalConfig::release_ability() {
  
  ::idlepb::PlayerGlobalConfigAbility* temp = _impl_.ability_;
  _impl_.ability_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerGlobalConfigAbility* PlayerGlobalConfig::unsafe_arena_release_ability() {
  // @@protoc_insertion_point(field_release:idlepb.PlayerGlobalConfig.ability)
  
  ::idlepb::PlayerGlobalConfigAbility* temp = _impl_.ability_;
  _impl_.ability_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerGlobalConfigAbility* PlayerGlobalConfig::_internal_mutable_ability() {
  
  if (_impl_.ability_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerGlobalConfigAbility>(GetArenaForAllocation());
    _impl_.ability_ = p;
  }
  return _impl_.ability_;
}
inline ::idlepb::PlayerGlobalConfigAbility* PlayerGlobalConfig::mutable_ability() {
  ::idlepb::PlayerGlobalConfigAbility* _msg = _internal_mutable_ability();
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerGlobalConfig.ability)
  return _msg;
}
inline void PlayerGlobalConfig::set_allocated_ability(::idlepb::PlayerGlobalConfigAbility* ability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ability_;
  }
  if (ability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ability);
    if (message_arena != submessage_arena) {
      ability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ability, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ability_ = ability;
  // @@protoc_insertion_point(field_set_allocated:idlepb.PlayerGlobalConfig.ability)
}

// .idlepb.PlayerGlobalConfigBreathingExercise breathing_exercise = 4;
inline bool PlayerGlobalConfig::_internal_has_breathing_exercise() const {
  return this != internal_default_instance() && _impl_.breathing_exercise_ != nullptr;
}
inline bool PlayerGlobalConfig::has_breathing_exercise() const {
  return _internal_has_breathing_exercise();
}
inline void PlayerGlobalConfig::clear_breathing_exercise() {
  if (GetArenaForAllocation() == nullptr && _impl_.breathing_exercise_ != nullptr) {
    delete _impl_.breathing_exercise_;
  }
  _impl_.breathing_exercise_ = nullptr;
}
inline const ::idlepb::PlayerGlobalConfigBreathingExercise& PlayerGlobalConfig::_internal_breathing_exercise() const {
  const ::idlepb::PlayerGlobalConfigBreathingExercise* p = _impl_.breathing_exercise_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerGlobalConfigBreathingExercise&>(
      ::idlepb::_PlayerGlobalConfigBreathingExercise_default_instance_);
}
inline const ::idlepb::PlayerGlobalConfigBreathingExercise& PlayerGlobalConfig::breathing_exercise() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfig.breathing_exercise)
  return _internal_breathing_exercise();
}
inline void PlayerGlobalConfig::unsafe_arena_set_allocated_breathing_exercise(
    ::idlepb::PlayerGlobalConfigBreathingExercise* breathing_exercise) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.breathing_exercise_);
  }
  _impl_.breathing_exercise_ = breathing_exercise;
  if (breathing_exercise) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.PlayerGlobalConfig.breathing_exercise)
}
inline ::idlepb::PlayerGlobalConfigBreathingExercise* PlayerGlobalConfig::release_breathing_exercise() {
  
  ::idlepb::PlayerGlobalConfigBreathingExercise* temp = _impl_.breathing_exercise_;
  _impl_.breathing_exercise_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerGlobalConfigBreathingExercise* PlayerGlobalConfig::unsafe_arena_release_breathing_exercise() {
  // @@protoc_insertion_point(field_release:idlepb.PlayerGlobalConfig.breathing_exercise)
  
  ::idlepb::PlayerGlobalConfigBreathingExercise* temp = _impl_.breathing_exercise_;
  _impl_.breathing_exercise_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerGlobalConfigBreathingExercise* PlayerGlobalConfig::_internal_mutable_breathing_exercise() {
  
  if (_impl_.breathing_exercise_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerGlobalConfigBreathingExercise>(GetArenaForAllocation());
    _impl_.breathing_exercise_ = p;
  }
  return _impl_.breathing_exercise_;
}
inline ::idlepb::PlayerGlobalConfigBreathingExercise* PlayerGlobalConfig::mutable_breathing_exercise() {
  ::idlepb::PlayerGlobalConfigBreathingExercise* _msg = _internal_mutable_breathing_exercise();
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerGlobalConfig.breathing_exercise)
  return _msg;
}
inline void PlayerGlobalConfig::set_allocated_breathing_exercise(::idlepb::PlayerGlobalConfigBreathingExercise* breathing_exercise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.breathing_exercise_;
  }
  if (breathing_exercise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(breathing_exercise);
    if (message_arena != submessage_arena) {
      breathing_exercise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, breathing_exercise, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.breathing_exercise_ = breathing_exercise;
  // @@protoc_insertion_point(field_set_allocated:idlepb.PlayerGlobalConfig.breathing_exercise)
}

// .idlepb.PlayerGlobalConfigThunderTest thunder_test = 5;
inline bool PlayerGlobalConfig::_internal_has_thunder_test() const {
  return this != internal_default_instance() && _impl_.thunder_test_ != nullptr;
}
inline bool PlayerGlobalConfig::has_thunder_test() const {
  return _internal_has_thunder_test();
}
inline void PlayerGlobalConfig::clear_thunder_test() {
  if (GetArenaForAllocation() == nullptr && _impl_.thunder_test_ != nullptr) {
    delete _impl_.thunder_test_;
  }
  _impl_.thunder_test_ = nullptr;
}
inline const ::idlepb::PlayerGlobalConfigThunderTest& PlayerGlobalConfig::_internal_thunder_test() const {
  const ::idlepb::PlayerGlobalConfigThunderTest* p = _impl_.thunder_test_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerGlobalConfigThunderTest&>(
      ::idlepb::_PlayerGlobalConfigThunderTest_default_instance_);
}
inline const ::idlepb::PlayerGlobalConfigThunderTest& PlayerGlobalConfig::thunder_test() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfig.thunder_test)
  return _internal_thunder_test();
}
inline void PlayerGlobalConfig::unsafe_arena_set_allocated_thunder_test(
    ::idlepb::PlayerGlobalConfigThunderTest* thunder_test) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thunder_test_);
  }
  _impl_.thunder_test_ = thunder_test;
  if (thunder_test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.PlayerGlobalConfig.thunder_test)
}
inline ::idlepb::PlayerGlobalConfigThunderTest* PlayerGlobalConfig::release_thunder_test() {
  
  ::idlepb::PlayerGlobalConfigThunderTest* temp = _impl_.thunder_test_;
  _impl_.thunder_test_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerGlobalConfigThunderTest* PlayerGlobalConfig::unsafe_arena_release_thunder_test() {
  // @@protoc_insertion_point(field_release:idlepb.PlayerGlobalConfig.thunder_test)
  
  ::idlepb::PlayerGlobalConfigThunderTest* temp = _impl_.thunder_test_;
  _impl_.thunder_test_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerGlobalConfigThunderTest* PlayerGlobalConfig::_internal_mutable_thunder_test() {
  
  if (_impl_.thunder_test_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerGlobalConfigThunderTest>(GetArenaForAllocation());
    _impl_.thunder_test_ = p;
  }
  return _impl_.thunder_test_;
}
inline ::idlepb::PlayerGlobalConfigThunderTest* PlayerGlobalConfig::mutable_thunder_test() {
  ::idlepb::PlayerGlobalConfigThunderTest* _msg = _internal_mutable_thunder_test();
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerGlobalConfig.thunder_test)
  return _msg;
}
inline void PlayerGlobalConfig::set_allocated_thunder_test(::idlepb::PlayerGlobalConfigThunderTest* thunder_test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.thunder_test_;
  }
  if (thunder_test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(thunder_test);
    if (message_arena != submessage_arena) {
      thunder_test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thunder_test, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.thunder_test_ = thunder_test;
  // @@protoc_insertion_point(field_set_allocated:idlepb.PlayerGlobalConfig.thunder_test)
}

// .idlepb.PlayerGlobalConfigAlchemy alchemy = 6;
inline bool PlayerGlobalConfig::_internal_has_alchemy() const {
  return this != internal_default_instance() && _impl_.alchemy_ != nullptr;
}
inline bool PlayerGlobalConfig::has_alchemy() const {
  return _internal_has_alchemy();
}
inline void PlayerGlobalConfig::clear_alchemy() {
  if (GetArenaForAllocation() == nullptr && _impl_.alchemy_ != nullptr) {
    delete _impl_.alchemy_;
  }
  _impl_.alchemy_ = nullptr;
}
inline const ::idlepb::PlayerGlobalConfigAlchemy& PlayerGlobalConfig::_internal_alchemy() const {
  const ::idlepb::PlayerGlobalConfigAlchemy* p = _impl_.alchemy_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerGlobalConfigAlchemy&>(
      ::idlepb::_PlayerGlobalConfigAlchemy_default_instance_);
}
inline const ::idlepb::PlayerGlobalConfigAlchemy& PlayerGlobalConfig::alchemy() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfig.alchemy)
  return _internal_alchemy();
}
inline void PlayerGlobalConfig::unsafe_arena_set_allocated_alchemy(
    ::idlepb::PlayerGlobalConfigAlchemy* alchemy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alchemy_);
  }
  _impl_.alchemy_ = alchemy;
  if (alchemy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.PlayerGlobalConfig.alchemy)
}
inline ::idlepb::PlayerGlobalConfigAlchemy* PlayerGlobalConfig::release_alchemy() {
  
  ::idlepb::PlayerGlobalConfigAlchemy* temp = _impl_.alchemy_;
  _impl_.alchemy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerGlobalConfigAlchemy* PlayerGlobalConfig::unsafe_arena_release_alchemy() {
  // @@protoc_insertion_point(field_release:idlepb.PlayerGlobalConfig.alchemy)
  
  ::idlepb::PlayerGlobalConfigAlchemy* temp = _impl_.alchemy_;
  _impl_.alchemy_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerGlobalConfigAlchemy* PlayerGlobalConfig::_internal_mutable_alchemy() {
  
  if (_impl_.alchemy_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerGlobalConfigAlchemy>(GetArenaForAllocation());
    _impl_.alchemy_ = p;
  }
  return _impl_.alchemy_;
}
inline ::idlepb::PlayerGlobalConfigAlchemy* PlayerGlobalConfig::mutable_alchemy() {
  ::idlepb::PlayerGlobalConfigAlchemy* _msg = _internal_mutable_alchemy();
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerGlobalConfig.alchemy)
  return _msg;
}
inline void PlayerGlobalConfig::set_allocated_alchemy(::idlepb::PlayerGlobalConfigAlchemy* alchemy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.alchemy_;
  }
  if (alchemy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alchemy);
    if (message_arena != submessage_arena) {
      alchemy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alchemy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.alchemy_ = alchemy;
  // @@protoc_insertion_point(field_set_allocated:idlepb.PlayerGlobalConfig.alchemy)
}

// .idlepb.PlayerGlobalConfigForge forge = 7;
inline bool PlayerGlobalConfig::_internal_has_forge() const {
  return this != internal_default_instance() && _impl_.forge_ != nullptr;
}
inline bool PlayerGlobalConfig::has_forge() const {
  return _internal_has_forge();
}
inline void PlayerGlobalConfig::clear_forge() {
  if (GetArenaForAllocation() == nullptr && _impl_.forge_ != nullptr) {
    delete _impl_.forge_;
  }
  _impl_.forge_ = nullptr;
}
inline const ::idlepb::PlayerGlobalConfigForge& PlayerGlobalConfig::_internal_forge() const {
  const ::idlepb::PlayerGlobalConfigForge* p = _impl_.forge_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerGlobalConfigForge&>(
      ::idlepb::_PlayerGlobalConfigForge_default_instance_);
}
inline const ::idlepb::PlayerGlobalConfigForge& PlayerGlobalConfig::forge() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfig.forge)
  return _internal_forge();
}
inline void PlayerGlobalConfig::unsafe_arena_set_allocated_forge(
    ::idlepb::PlayerGlobalConfigForge* forge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forge_);
  }
  _impl_.forge_ = forge;
  if (forge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.PlayerGlobalConfig.forge)
}
inline ::idlepb::PlayerGlobalConfigForge* PlayerGlobalConfig::release_forge() {
  
  ::idlepb::PlayerGlobalConfigForge* temp = _impl_.forge_;
  _impl_.forge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerGlobalConfigForge* PlayerGlobalConfig::unsafe_arena_release_forge() {
  // @@protoc_insertion_point(field_release:idlepb.PlayerGlobalConfig.forge)
  
  ::idlepb::PlayerGlobalConfigForge* temp = _impl_.forge_;
  _impl_.forge_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerGlobalConfigForge* PlayerGlobalConfig::_internal_mutable_forge() {
  
  if (_impl_.forge_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerGlobalConfigForge>(GetArenaForAllocation());
    _impl_.forge_ = p;
  }
  return _impl_.forge_;
}
inline ::idlepb::PlayerGlobalConfigForge* PlayerGlobalConfig::mutable_forge() {
  ::idlepb::PlayerGlobalConfigForge* _msg = _internal_mutable_forge();
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerGlobalConfig.forge)
  return _msg;
}
inline void PlayerGlobalConfig::set_allocated_forge(::idlepb::PlayerGlobalConfigForge* forge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.forge_;
  }
  if (forge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(forge);
    if (message_arena != submessage_arena) {
      forge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forge, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.forge_ = forge;
  // @@protoc_insertion_point(field_set_allocated:idlepb.PlayerGlobalConfig.forge)
}

// .idlepb.PlayerGlobalConfigFightMode fight_mode = 8;
inline bool PlayerGlobalConfig::_internal_has_fight_mode() const {
  return this != internal_default_instance() && _impl_.fight_mode_ != nullptr;
}
inline bool PlayerGlobalConfig::has_fight_mode() const {
  return _internal_has_fight_mode();
}
inline void PlayerGlobalConfig::clear_fight_mode() {
  if (GetArenaForAllocation() == nullptr && _impl_.fight_mode_ != nullptr) {
    delete _impl_.fight_mode_;
  }
  _impl_.fight_mode_ = nullptr;
}
inline const ::idlepb::PlayerGlobalConfigFightMode& PlayerGlobalConfig::_internal_fight_mode() const {
  const ::idlepb::PlayerGlobalConfigFightMode* p = _impl_.fight_mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerGlobalConfigFightMode&>(
      ::idlepb::_PlayerGlobalConfigFightMode_default_instance_);
}
inline const ::idlepb::PlayerGlobalConfigFightMode& PlayerGlobalConfig::fight_mode() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfig.fight_mode)
  return _internal_fight_mode();
}
inline void PlayerGlobalConfig::unsafe_arena_set_allocated_fight_mode(
    ::idlepb::PlayerGlobalConfigFightMode* fight_mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fight_mode_);
  }
  _impl_.fight_mode_ = fight_mode;
  if (fight_mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.PlayerGlobalConfig.fight_mode)
}
inline ::idlepb::PlayerGlobalConfigFightMode* PlayerGlobalConfig::release_fight_mode() {
  
  ::idlepb::PlayerGlobalConfigFightMode* temp = _impl_.fight_mode_;
  _impl_.fight_mode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerGlobalConfigFightMode* PlayerGlobalConfig::unsafe_arena_release_fight_mode() {
  // @@protoc_insertion_point(field_release:idlepb.PlayerGlobalConfig.fight_mode)
  
  ::idlepb::PlayerGlobalConfigFightMode* temp = _impl_.fight_mode_;
  _impl_.fight_mode_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerGlobalConfigFightMode* PlayerGlobalConfig::_internal_mutable_fight_mode() {
  
  if (_impl_.fight_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerGlobalConfigFightMode>(GetArenaForAllocation());
    _impl_.fight_mode_ = p;
  }
  return _impl_.fight_mode_;
}
inline ::idlepb::PlayerGlobalConfigFightMode* PlayerGlobalConfig::mutable_fight_mode() {
  ::idlepb::PlayerGlobalConfigFightMode* _msg = _internal_mutable_fight_mode();
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerGlobalConfig.fight_mode)
  return _msg;
}
inline void PlayerGlobalConfig::set_allocated_fight_mode(::idlepb::PlayerGlobalConfigFightMode* fight_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fight_mode_;
  }
  if (fight_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fight_mode);
    if (message_arena != submessage_arena) {
      fight_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fight_mode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fight_mode_ = fight_mode;
  // @@protoc_insertion_point(field_set_allocated:idlepb.PlayerGlobalConfig.fight_mode)
}

// .idlepb.PlayerGlobalConfigInventory inventory = 9;
inline bool PlayerGlobalConfig::_internal_has_inventory() const {
  return this != internal_default_instance() && _impl_.inventory_ != nullptr;
}
inline bool PlayerGlobalConfig::has_inventory() const {
  return _internal_has_inventory();
}
inline void PlayerGlobalConfig::clear_inventory() {
  if (GetArenaForAllocation() == nullptr && _impl_.inventory_ != nullptr) {
    delete _impl_.inventory_;
  }
  _impl_.inventory_ = nullptr;
}
inline const ::idlepb::PlayerGlobalConfigInventory& PlayerGlobalConfig::_internal_inventory() const {
  const ::idlepb::PlayerGlobalConfigInventory* p = _impl_.inventory_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::PlayerGlobalConfigInventory&>(
      ::idlepb::_PlayerGlobalConfigInventory_default_instance_);
}
inline const ::idlepb::PlayerGlobalConfigInventory& PlayerGlobalConfig::inventory() const {
  // @@protoc_insertion_point(field_get:idlepb.PlayerGlobalConfig.inventory)
  return _internal_inventory();
}
inline void PlayerGlobalConfig::unsafe_arena_set_allocated_inventory(
    ::idlepb::PlayerGlobalConfigInventory* inventory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inventory_);
  }
  _impl_.inventory_ = inventory;
  if (inventory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.PlayerGlobalConfig.inventory)
}
inline ::idlepb::PlayerGlobalConfigInventory* PlayerGlobalConfig::release_inventory() {
  
  ::idlepb::PlayerGlobalConfigInventory* temp = _impl_.inventory_;
  _impl_.inventory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::PlayerGlobalConfigInventory* PlayerGlobalConfig::unsafe_arena_release_inventory() {
  // @@protoc_insertion_point(field_release:idlepb.PlayerGlobalConfig.inventory)
  
  ::idlepb::PlayerGlobalConfigInventory* temp = _impl_.inventory_;
  _impl_.inventory_ = nullptr;
  return temp;
}
inline ::idlepb::PlayerGlobalConfigInventory* PlayerGlobalConfig::_internal_mutable_inventory() {
  
  if (_impl_.inventory_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::PlayerGlobalConfigInventory>(GetArenaForAllocation());
    _impl_.inventory_ = p;
  }
  return _impl_.inventory_;
}
inline ::idlepb::PlayerGlobalConfigInventory* PlayerGlobalConfig::mutable_inventory() {
  ::idlepb::PlayerGlobalConfigInventory* _msg = _internal_mutable_inventory();
  // @@protoc_insertion_point(field_mutable:idlepb.PlayerGlobalConfig.inventory)
  return _msg;
}
inline void PlayerGlobalConfig::set_allocated_inventory(::idlepb::PlayerGlobalConfigInventory* inventory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inventory_;
  }
  if (inventory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inventory);
    if (message_arena != submessage_arena) {
      inventory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inventory, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inventory_ = inventory;
  // @@protoc_insertion_point(field_set_allocated:idlepb.PlayerGlobalConfig.inventory)
}

// -------------------------------------------------------------------

// NpcGlobalConfigConstants

// float auto_move_stop_time = 1;
inline void NpcGlobalConfigConstants::clear_auto_move_stop_time() {
  _impl_.auto_move_stop_time_ = 0;
}
inline float NpcGlobalConfigConstants::_internal_auto_move_stop_time() const {
  return _impl_.auto_move_stop_time_;
}
inline float NpcGlobalConfigConstants::auto_move_stop_time() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.auto_move_stop_time)
  return _internal_auto_move_stop_time();
}
inline void NpcGlobalConfigConstants::_internal_set_auto_move_stop_time(float value) {
  
  _impl_.auto_move_stop_time_ = value;
}
inline void NpcGlobalConfigConstants::set_auto_move_stop_time(float value) {
  _internal_set_auto_move_stop_time(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.auto_move_stop_time)
}

// float auto_move_walk_time = 2;
inline void NpcGlobalConfigConstants::clear_auto_move_walk_time() {
  _impl_.auto_move_walk_time_ = 0;
}
inline float NpcGlobalConfigConstants::_internal_auto_move_walk_time() const {
  return _impl_.auto_move_walk_time_;
}
inline float NpcGlobalConfigConstants::auto_move_walk_time() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.auto_move_walk_time)
  return _internal_auto_move_walk_time();
}
inline void NpcGlobalConfigConstants::_internal_set_auto_move_walk_time(float value) {
  
  _impl_.auto_move_walk_time_ = value;
}
inline void NpcGlobalConfigConstants::set_auto_move_walk_time(float value) {
  _internal_set_auto_move_walk_time(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.auto_move_walk_time)
}

// int32 walk_speed = 3;
inline void NpcGlobalConfigConstants::clear_walk_speed() {
  _impl_.walk_speed_ = 0;
}
inline int32_t NpcGlobalConfigConstants::_internal_walk_speed() const {
  return _impl_.walk_speed_;
}
inline int32_t NpcGlobalConfigConstants::walk_speed() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.walk_speed)
  return _internal_walk_speed();
}
inline void NpcGlobalConfigConstants::_internal_set_walk_speed(int32_t value) {
  
  _impl_.walk_speed_ = value;
}
inline void NpcGlobalConfigConstants::set_walk_speed(int32_t value) {
  _internal_set_walk_speed(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.walk_speed)
}

// float attack_interval_time = 4;
inline void NpcGlobalConfigConstants::clear_attack_interval_time() {
  _impl_.attack_interval_time_ = 0;
}
inline float NpcGlobalConfigConstants::_internal_attack_interval_time() const {
  return _impl_.attack_interval_time_;
}
inline float NpcGlobalConfigConstants::attack_interval_time() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.attack_interval_time)
  return _internal_attack_interval_time();
}
inline void NpcGlobalConfigConstants::_internal_set_attack_interval_time(float value) {
  
  _impl_.attack_interval_time_ = value;
}
inline void NpcGlobalConfigConstants::set_attack_interval_time(float value) {
  _internal_set_attack_interval_time(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.attack_interval_time)
}

// float npc_lock_distance_auto = 5;
inline void NpcGlobalConfigConstants::clear_npc_lock_distance_auto() {
  _impl_.npc_lock_distance_auto_ = 0;
}
inline float NpcGlobalConfigConstants::_internal_npc_lock_distance_auto() const {
  return _impl_.npc_lock_distance_auto_;
}
inline float NpcGlobalConfigConstants::npc_lock_distance_auto() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.npc_lock_distance_auto)
  return _internal_npc_lock_distance_auto();
}
inline void NpcGlobalConfigConstants::_internal_set_npc_lock_distance_auto(float value) {
  
  _impl_.npc_lock_distance_auto_ = value;
}
inline void NpcGlobalConfigConstants::set_npc_lock_distance_auto(float value) {
  _internal_set_npc_lock_distance_auto(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.npc_lock_distance_auto)
}

// float npc_lock_distance_max = 6;
inline void NpcGlobalConfigConstants::clear_npc_lock_distance_max() {
  _impl_.npc_lock_distance_max_ = 0;
}
inline float NpcGlobalConfigConstants::_internal_npc_lock_distance_max() const {
  return _impl_.npc_lock_distance_max_;
}
inline float NpcGlobalConfigConstants::npc_lock_distance_max() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.npc_lock_distance_max)
  return _internal_npc_lock_distance_max();
}
inline void NpcGlobalConfigConstants::_internal_set_npc_lock_distance_max(float value) {
  
  _impl_.npc_lock_distance_max_ = value;
}
inline void NpcGlobalConfigConstants::set_npc_lock_distance_max(float value) {
  _internal_set_npc_lock_distance_max(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.npc_lock_distance_max)
}

// float monster_location_correction_distance_near = 7;
inline void NpcGlobalConfigConstants::clear_monster_location_correction_distance_near() {
  _impl_.monster_location_correction_distance_near_ = 0;
}
inline float NpcGlobalConfigConstants::_internal_monster_location_correction_distance_near() const {
  return _impl_.monster_location_correction_distance_near_;
}
inline float NpcGlobalConfigConstants::monster_location_correction_distance_near() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.monster_location_correction_distance_near)
  return _internal_monster_location_correction_distance_near();
}
inline void NpcGlobalConfigConstants::_internal_set_monster_location_correction_distance_near(float value) {
  
  _impl_.monster_location_correction_distance_near_ = value;
}
inline void NpcGlobalConfigConstants::set_monster_location_correction_distance_near(float value) {
  _internal_set_monster_location_correction_distance_near(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.monster_location_correction_distance_near)
}

// float monster_location_correction_distance_far = 8;
inline void NpcGlobalConfigConstants::clear_monster_location_correction_distance_far() {
  _impl_.monster_location_correction_distance_far_ = 0;
}
inline float NpcGlobalConfigConstants::_internal_monster_location_correction_distance_far() const {
  return _impl_.monster_location_correction_distance_far_;
}
inline float NpcGlobalConfigConstants::monster_location_correction_distance_far() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.monster_location_correction_distance_far)
  return _internal_monster_location_correction_distance_far();
}
inline void NpcGlobalConfigConstants::_internal_set_monster_location_correction_distance_far(float value) {
  
  _impl_.monster_location_correction_distance_far_ = value;
}
inline void NpcGlobalConfigConstants::set_monster_location_correction_distance_far(float value) {
  _internal_set_monster_location_correction_distance_far(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.monster_location_correction_distance_far)
}

// float monster_correction_cost_speed = 9;
inline void NpcGlobalConfigConstants::clear_monster_correction_cost_speed() {
  _impl_.monster_correction_cost_speed_ = 0;
}
inline float NpcGlobalConfigConstants::_internal_monster_correction_cost_speed() const {
  return _impl_.monster_correction_cost_speed_;
}
inline float NpcGlobalConfigConstants::monster_correction_cost_speed() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.monster_correction_cost_speed)
  return _internal_monster_correction_cost_speed();
}
inline void NpcGlobalConfigConstants::_internal_set_monster_correction_cost_speed(float value) {
  
  _impl_.monster_correction_cost_speed_ = value;
}
inline void NpcGlobalConfigConstants::set_monster_correction_cost_speed(float value) {
  _internal_set_monster_correction_cost_speed(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.monster_correction_cost_speed)
}

// float phy_default_ability_fullid = 10;
inline void NpcGlobalConfigConstants::clear_phy_default_ability_fullid() {
  _impl_.phy_default_ability_fullid_ = 0;
}
inline float NpcGlobalConfigConstants::_internal_phy_default_ability_fullid() const {
  return _impl_.phy_default_ability_fullid_;
}
inline float NpcGlobalConfigConstants::phy_default_ability_fullid() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.phy_default_ability_fullid)
  return _internal_phy_default_ability_fullid();
}
inline void NpcGlobalConfigConstants::_internal_set_phy_default_ability_fullid(float value) {
  
  _impl_.phy_default_ability_fullid_ = value;
}
inline void NpcGlobalConfigConstants::set_phy_default_ability_fullid(float value) {
  _internal_set_phy_default_ability_fullid(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.phy_default_ability_fullid)
}

// float mag_default_ability_fullid = 11;
inline void NpcGlobalConfigConstants::clear_mag_default_ability_fullid() {
  _impl_.mag_default_ability_fullid_ = 0;
}
inline float NpcGlobalConfigConstants::_internal_mag_default_ability_fullid() const {
  return _impl_.mag_default_ability_fullid_;
}
inline float NpcGlobalConfigConstants::mag_default_ability_fullid() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.mag_default_ability_fullid)
  return _internal_mag_default_ability_fullid();
}
inline void NpcGlobalConfigConstants::_internal_set_mag_default_ability_fullid(float value) {
  
  _impl_.mag_default_ability_fullid_ = value;
}
inline void NpcGlobalConfigConstants::set_mag_default_ability_fullid(float value) {
  _internal_set_mag_default_ability_fullid(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.mag_default_ability_fullid)
}

// int32 default_ability_weight = 12;
inline void NpcGlobalConfigConstants::clear_default_ability_weight() {
  _impl_.default_ability_weight_ = 0;
}
inline int32_t NpcGlobalConfigConstants::_internal_default_ability_weight() const {
  return _impl_.default_ability_weight_;
}
inline int32_t NpcGlobalConfigConstants::default_ability_weight() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfigConstants.default_ability_weight)
  return _internal_default_ability_weight();
}
inline void NpcGlobalConfigConstants::_internal_set_default_ability_weight(int32_t value) {
  
  _impl_.default_ability_weight_ = value;
}
inline void NpcGlobalConfigConstants::set_default_ability_weight(int32_t value) {
  _internal_set_default_ability_weight(value);
  // @@protoc_insertion_point(field_set:idlepb.NpcGlobalConfigConstants.default_ability_weight)
}

// -------------------------------------------------------------------

// NpcGlobalConfig

// .idlepb.NpcGlobalConfigConstants constants = 1;
inline bool NpcGlobalConfig::_internal_has_constants() const {
  return this != internal_default_instance() && _impl_.constants_ != nullptr;
}
inline bool NpcGlobalConfig::has_constants() const {
  return _internal_has_constants();
}
inline void NpcGlobalConfig::clear_constants() {
  if (GetArenaForAllocation() == nullptr && _impl_.constants_ != nullptr) {
    delete _impl_.constants_;
  }
  _impl_.constants_ = nullptr;
}
inline const ::idlepb::NpcGlobalConfigConstants& NpcGlobalConfig::_internal_constants() const {
  const ::idlepb::NpcGlobalConfigConstants* p = _impl_.constants_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::NpcGlobalConfigConstants&>(
      ::idlepb::_NpcGlobalConfigConstants_default_instance_);
}
inline const ::idlepb::NpcGlobalConfigConstants& NpcGlobalConfig::constants() const {
  // @@protoc_insertion_point(field_get:idlepb.NpcGlobalConfig.constants)
  return _internal_constants();
}
inline void NpcGlobalConfig::unsafe_arena_set_allocated_constants(
    ::idlepb::NpcGlobalConfigConstants* constants) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.constants_);
  }
  _impl_.constants_ = constants;
  if (constants) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.NpcGlobalConfig.constants)
}
inline ::idlepb::NpcGlobalConfigConstants* NpcGlobalConfig::release_constants() {
  
  ::idlepb::NpcGlobalConfigConstants* temp = _impl_.constants_;
  _impl_.constants_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::NpcGlobalConfigConstants* NpcGlobalConfig::unsafe_arena_release_constants() {
  // @@protoc_insertion_point(field_release:idlepb.NpcGlobalConfig.constants)
  
  ::idlepb::NpcGlobalConfigConstants* temp = _impl_.constants_;
  _impl_.constants_ = nullptr;
  return temp;
}
inline ::idlepb::NpcGlobalConfigConstants* NpcGlobalConfig::_internal_mutable_constants() {
  
  if (_impl_.constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::NpcGlobalConfigConstants>(GetArenaForAllocation());
    _impl_.constants_ = p;
  }
  return _impl_.constants_;
}
inline ::idlepb::NpcGlobalConfigConstants* NpcGlobalConfig::mutable_constants() {
  ::idlepb::NpcGlobalConfigConstants* _msg = _internal_mutable_constants();
  // @@protoc_insertion_point(field_mutable:idlepb.NpcGlobalConfig.constants)
  return _msg;
}
inline void NpcGlobalConfig::set_allocated_constants(::idlepb::NpcGlobalConfigConstants* constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.constants_;
  }
  if (constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(constants);
    if (message_arena != submessage_arena) {
      constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constants, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.constants_ = constants;
  // @@protoc_insertion_point(field_set_allocated:idlepb.NpcGlobalConfig.constants)
}

// -------------------------------------------------------------------

// WorldGlobalConfigDungeonCommon

// float begin_delay_seconds = 1;
inline void WorldGlobalConfigDungeonCommon::clear_begin_delay_seconds() {
  _impl_.begin_delay_seconds_ = 0;
}
inline float WorldGlobalConfigDungeonCommon::_internal_begin_delay_seconds() const {
  return _impl_.begin_delay_seconds_;
}
inline float WorldGlobalConfigDungeonCommon::begin_delay_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.WorldGlobalConfigDungeonCommon.begin_delay_seconds)
  return _internal_begin_delay_seconds();
}
inline void WorldGlobalConfigDungeonCommon::_internal_set_begin_delay_seconds(float value) {
  
  _impl_.begin_delay_seconds_ = value;
}
inline void WorldGlobalConfigDungeonCommon::set_begin_delay_seconds(float value) {
  _internal_set_begin_delay_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.WorldGlobalConfigDungeonCommon.begin_delay_seconds)
}

// float end_delay_seconds = 2;
inline void WorldGlobalConfigDungeonCommon::clear_end_delay_seconds() {
  _impl_.end_delay_seconds_ = 0;
}
inline float WorldGlobalConfigDungeonCommon::_internal_end_delay_seconds() const {
  return _impl_.end_delay_seconds_;
}
inline float WorldGlobalConfigDungeonCommon::end_delay_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.WorldGlobalConfigDungeonCommon.end_delay_seconds)
  return _internal_end_delay_seconds();
}
inline void WorldGlobalConfigDungeonCommon::_internal_set_end_delay_seconds(float value) {
  
  _impl_.end_delay_seconds_ = value;
}
inline void WorldGlobalConfigDungeonCommon::set_end_delay_seconds(float value) {
  _internal_set_end_delay_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.WorldGlobalConfigDungeonCommon.end_delay_seconds)
}

// -------------------------------------------------------------------

// WorldGlobalConfig

// .idlepb.WorldGlobalConfigDungeonCommon dungeon_common = 1;
inline bool WorldGlobalConfig::_internal_has_dungeon_common() const {
  return this != internal_default_instance() && _impl_.dungeon_common_ != nullptr;
}
inline bool WorldGlobalConfig::has_dungeon_common() const {
  return _internal_has_dungeon_common();
}
inline void WorldGlobalConfig::clear_dungeon_common() {
  if (GetArenaForAllocation() == nullptr && _impl_.dungeon_common_ != nullptr) {
    delete _impl_.dungeon_common_;
  }
  _impl_.dungeon_common_ = nullptr;
}
inline const ::idlepb::WorldGlobalConfigDungeonCommon& WorldGlobalConfig::_internal_dungeon_common() const {
  const ::idlepb::WorldGlobalConfigDungeonCommon* p = _impl_.dungeon_common_;
  return p != nullptr ? *p : reinterpret_cast<const ::idlepb::WorldGlobalConfigDungeonCommon&>(
      ::idlepb::_WorldGlobalConfigDungeonCommon_default_instance_);
}
inline const ::idlepb::WorldGlobalConfigDungeonCommon& WorldGlobalConfig::dungeon_common() const {
  // @@protoc_insertion_point(field_get:idlepb.WorldGlobalConfig.dungeon_common)
  return _internal_dungeon_common();
}
inline void WorldGlobalConfig::unsafe_arena_set_allocated_dungeon_common(
    ::idlepb::WorldGlobalConfigDungeonCommon* dungeon_common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dungeon_common_);
  }
  _impl_.dungeon_common_ = dungeon_common;
  if (dungeon_common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idlepb.WorldGlobalConfig.dungeon_common)
}
inline ::idlepb::WorldGlobalConfigDungeonCommon* WorldGlobalConfig::release_dungeon_common() {
  
  ::idlepb::WorldGlobalConfigDungeonCommon* temp = _impl_.dungeon_common_;
  _impl_.dungeon_common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idlepb::WorldGlobalConfigDungeonCommon* WorldGlobalConfig::unsafe_arena_release_dungeon_common() {
  // @@protoc_insertion_point(field_release:idlepb.WorldGlobalConfig.dungeon_common)
  
  ::idlepb::WorldGlobalConfigDungeonCommon* temp = _impl_.dungeon_common_;
  _impl_.dungeon_common_ = nullptr;
  return temp;
}
inline ::idlepb::WorldGlobalConfigDungeonCommon* WorldGlobalConfig::_internal_mutable_dungeon_common() {
  
  if (_impl_.dungeon_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::idlepb::WorldGlobalConfigDungeonCommon>(GetArenaForAllocation());
    _impl_.dungeon_common_ = p;
  }
  return _impl_.dungeon_common_;
}
inline ::idlepb::WorldGlobalConfigDungeonCommon* WorldGlobalConfig::mutable_dungeon_common() {
  ::idlepb::WorldGlobalConfigDungeonCommon* _msg = _internal_mutable_dungeon_common();
  // @@protoc_insertion_point(field_mutable:idlepb.WorldGlobalConfig.dungeon_common)
  return _msg;
}
inline void WorldGlobalConfig::set_allocated_dungeon_common(::idlepb::WorldGlobalConfigDungeonCommon* dungeon_common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dungeon_common_;
  }
  if (dungeon_common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dungeon_common);
    if (message_arena != submessage_arena) {
      dungeon_common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dungeon_common, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dungeon_common_ = dungeon_common;
  // @@protoc_insertion_point(field_set_allocated:idlepb.WorldGlobalConfig.dungeon_common)
}

// -------------------------------------------------------------------

// AppearanceGlobalConfigShopRefreshRule

// int32 type = 1;
inline void AppearanceGlobalConfigShopRefreshRule::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t AppearanceGlobalConfigShopRefreshRule::_internal_type() const {
  return _impl_.type_;
}
inline int32_t AppearanceGlobalConfigShopRefreshRule::type() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfigShopRefreshRule.type)
  return _internal_type();
}
inline void AppearanceGlobalConfigShopRefreshRule::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void AppearanceGlobalConfigShopRefreshRule::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceGlobalConfigShopRefreshRule.type)
}

// repeated int32 num = 2;
inline int AppearanceGlobalConfigShopRefreshRule::_internal_num_size() const {
  return _impl_.num_.size();
}
inline int AppearanceGlobalConfigShopRefreshRule::num_size() const {
  return _internal_num_size();
}
inline void AppearanceGlobalConfigShopRefreshRule::clear_num() {
  _impl_.num_.Clear();
}
inline int32_t AppearanceGlobalConfigShopRefreshRule::_internal_num(int index) const {
  return _impl_.num_.Get(index);
}
inline int32_t AppearanceGlobalConfigShopRefreshRule::num(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfigShopRefreshRule.num)
  return _internal_num(index);
}
inline void AppearanceGlobalConfigShopRefreshRule::set_num(int index, int32_t value) {
  _impl_.num_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceGlobalConfigShopRefreshRule.num)
}
inline void AppearanceGlobalConfigShopRefreshRule::_internal_add_num(int32_t value) {
  _impl_.num_.Add(value);
}
inline void AppearanceGlobalConfigShopRefreshRule::add_num(int32_t value) {
  _internal_add_num(value);
  // @@protoc_insertion_point(field_add:idlepb.AppearanceGlobalConfigShopRefreshRule.num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppearanceGlobalConfigShopRefreshRule::_internal_num() const {
  return _impl_.num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppearanceGlobalConfigShopRefreshRule::num() const {
  // @@protoc_insertion_point(field_list:idlepb.AppearanceGlobalConfigShopRefreshRule.num)
  return _internal_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppearanceGlobalConfigShopRefreshRule::_internal_mutable_num() {
  return &_impl_.num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppearanceGlobalConfigShopRefreshRule::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.AppearanceGlobalConfigShopRefreshRule.num)
  return _internal_mutable_num();
}

// repeated int32 weight = 3;
inline int AppearanceGlobalConfigShopRefreshRule::_internal_weight_size() const {
  return _impl_.weight_.size();
}
inline int AppearanceGlobalConfigShopRefreshRule::weight_size() const {
  return _internal_weight_size();
}
inline void AppearanceGlobalConfigShopRefreshRule::clear_weight() {
  _impl_.weight_.Clear();
}
inline int32_t AppearanceGlobalConfigShopRefreshRule::_internal_weight(int index) const {
  return _impl_.weight_.Get(index);
}
inline int32_t AppearanceGlobalConfigShopRefreshRule::weight(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfigShopRefreshRule.weight)
  return _internal_weight(index);
}
inline void AppearanceGlobalConfigShopRefreshRule::set_weight(int index, int32_t value) {
  _impl_.weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceGlobalConfigShopRefreshRule.weight)
}
inline void AppearanceGlobalConfigShopRefreshRule::_internal_add_weight(int32_t value) {
  _impl_.weight_.Add(value);
}
inline void AppearanceGlobalConfigShopRefreshRule::add_weight(int32_t value) {
  _internal_add_weight(value);
  // @@protoc_insertion_point(field_add:idlepb.AppearanceGlobalConfigShopRefreshRule.weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppearanceGlobalConfigShopRefreshRule::_internal_weight() const {
  return _impl_.weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppearanceGlobalConfigShopRefreshRule::weight() const {
  // @@protoc_insertion_point(field_list:idlepb.AppearanceGlobalConfigShopRefreshRule.weight)
  return _internal_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppearanceGlobalConfigShopRefreshRule::_internal_mutable_weight() {
  return &_impl_.weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppearanceGlobalConfigShopRefreshRule::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.AppearanceGlobalConfigShopRefreshRule.weight)
  return _internal_mutable_weight();
}

// -------------------------------------------------------------------

// AppearanceGlobalConfigModelTypeInfo

// int32 model_type = 1;
inline void AppearanceGlobalConfigModelTypeInfo::clear_model_type() {
  _impl_.model_type_ = 0;
}
inline int32_t AppearanceGlobalConfigModelTypeInfo::_internal_model_type() const {
  return _impl_.model_type_;
}
inline int32_t AppearanceGlobalConfigModelTypeInfo::model_type() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfigModelTypeInfo.model_type)
  return _internal_model_type();
}
inline void AppearanceGlobalConfigModelTypeInfo::_internal_set_model_type(int32_t value) {
  
  _impl_.model_type_ = value;
}
inline void AppearanceGlobalConfigModelTypeInfo::set_model_type(int32_t value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceGlobalConfigModelTypeInfo.model_type)
}

// string name_english = 2;
inline void AppearanceGlobalConfigModelTypeInfo::clear_name_english() {
  _impl_.name_english_.ClearToEmpty();
}
inline const std::string& AppearanceGlobalConfigModelTypeInfo::name_english() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfigModelTypeInfo.name_english)
  return _internal_name_english();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppearanceGlobalConfigModelTypeInfo::set_name_english(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_english_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.AppearanceGlobalConfigModelTypeInfo.name_english)
}
inline std::string* AppearanceGlobalConfigModelTypeInfo::mutable_name_english() {
  std::string* _s = _internal_mutable_name_english();
  // @@protoc_insertion_point(field_mutable:idlepb.AppearanceGlobalConfigModelTypeInfo.name_english)
  return _s;
}
inline const std::string& AppearanceGlobalConfigModelTypeInfo::_internal_name_english() const {
  return _impl_.name_english_.Get();
}
inline void AppearanceGlobalConfigModelTypeInfo::_internal_set_name_english(const std::string& value) {
  
  _impl_.name_english_.Set(value, GetArenaForAllocation());
}
inline std::string* AppearanceGlobalConfigModelTypeInfo::_internal_mutable_name_english() {
  
  return _impl_.name_english_.Mutable(GetArenaForAllocation());
}
inline std::string* AppearanceGlobalConfigModelTypeInfo::release_name_english() {
  // @@protoc_insertion_point(field_release:idlepb.AppearanceGlobalConfigModelTypeInfo.name_english)
  return _impl_.name_english_.Release();
}
inline void AppearanceGlobalConfigModelTypeInfo::set_allocated_name_english(std::string* name_english) {
  if (name_english != nullptr) {
    
  } else {
    
  }
  _impl_.name_english_.SetAllocated(name_english, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_english_.IsDefault()) {
    _impl_.name_english_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.AppearanceGlobalConfigModelTypeInfo.name_english)
}

// string name_chinese = 3;
inline void AppearanceGlobalConfigModelTypeInfo::clear_name_chinese() {
  _impl_.name_chinese_.ClearToEmpty();
}
inline const std::string& AppearanceGlobalConfigModelTypeInfo::name_chinese() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfigModelTypeInfo.name_chinese)
  return _internal_name_chinese();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppearanceGlobalConfigModelTypeInfo::set_name_chinese(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_chinese_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.AppearanceGlobalConfigModelTypeInfo.name_chinese)
}
inline std::string* AppearanceGlobalConfigModelTypeInfo::mutable_name_chinese() {
  std::string* _s = _internal_mutable_name_chinese();
  // @@protoc_insertion_point(field_mutable:idlepb.AppearanceGlobalConfigModelTypeInfo.name_chinese)
  return _s;
}
inline const std::string& AppearanceGlobalConfigModelTypeInfo::_internal_name_chinese() const {
  return _impl_.name_chinese_.Get();
}
inline void AppearanceGlobalConfigModelTypeInfo::_internal_set_name_chinese(const std::string& value) {
  
  _impl_.name_chinese_.Set(value, GetArenaForAllocation());
}
inline std::string* AppearanceGlobalConfigModelTypeInfo::_internal_mutable_name_chinese() {
  
  return _impl_.name_chinese_.Mutable(GetArenaForAllocation());
}
inline std::string* AppearanceGlobalConfigModelTypeInfo::release_name_chinese() {
  // @@protoc_insertion_point(field_release:idlepb.AppearanceGlobalConfigModelTypeInfo.name_chinese)
  return _impl_.name_chinese_.Release();
}
inline void AppearanceGlobalConfigModelTypeInfo::set_allocated_name_chinese(std::string* name_chinese) {
  if (name_chinese != nullptr) {
    
  } else {
    
  }
  _impl_.name_chinese_.SetAllocated(name_chinese, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_chinese_.IsDefault()) {
    _impl_.name_chinese_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.AppearanceGlobalConfigModelTypeInfo.name_chinese)
}

// -------------------------------------------------------------------

// AppearanceGlobalConfig

// int32 refund_item_id = 1;
inline void AppearanceGlobalConfig::clear_refund_item_id() {
  _impl_.refund_item_id_ = 0;
}
inline int32_t AppearanceGlobalConfig::_internal_refund_item_id() const {
  return _impl_.refund_item_id_;
}
inline int32_t AppearanceGlobalConfig::refund_item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfig.refund_item_id)
  return _internal_refund_item_id();
}
inline void AppearanceGlobalConfig::_internal_set_refund_item_id(int32_t value) {
  
  _impl_.refund_item_id_ = value;
}
inline void AppearanceGlobalConfig::set_refund_item_id(int32_t value) {
  _internal_set_refund_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceGlobalConfig.refund_item_id)
}

// int32 shop_item_id = 2;
inline void AppearanceGlobalConfig::clear_shop_item_id() {
  _impl_.shop_item_id_ = 0;
}
inline int32_t AppearanceGlobalConfig::_internal_shop_item_id() const {
  return _impl_.shop_item_id_;
}
inline int32_t AppearanceGlobalConfig::shop_item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfig.shop_item_id)
  return _internal_shop_item_id();
}
inline void AppearanceGlobalConfig::_internal_set_shop_item_id(int32_t value) {
  
  _impl_.shop_item_id_ = value;
}
inline void AppearanceGlobalConfig::set_shop_item_id(int32_t value) {
  _internal_set_shop_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceGlobalConfig.shop_item_id)
}

// int32 shop_refresh_time = 3;
inline void AppearanceGlobalConfig::clear_shop_refresh_time() {
  _impl_.shop_refresh_time_ = 0;
}
inline int32_t AppearanceGlobalConfig::_internal_shop_refresh_time() const {
  return _impl_.shop_refresh_time_;
}
inline int32_t AppearanceGlobalConfig::shop_refresh_time() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfig.shop_refresh_time)
  return _internal_shop_refresh_time();
}
inline void AppearanceGlobalConfig::_internal_set_shop_refresh_time(int32_t value) {
  
  _impl_.shop_refresh_time_ = value;
}
inline void AppearanceGlobalConfig::set_shop_refresh_time(int32_t value) {
  _internal_set_shop_refresh_time(value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceGlobalConfig.shop_refresh_time)
}

// int32 sk_type_change_cd = 4;
inline void AppearanceGlobalConfig::clear_sk_type_change_cd() {
  _impl_.sk_type_change_cd_ = 0;
}
inline int32_t AppearanceGlobalConfig::_internal_sk_type_change_cd() const {
  return _impl_.sk_type_change_cd_;
}
inline int32_t AppearanceGlobalConfig::sk_type_change_cd() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfig.sk_type_change_cd)
  return _internal_sk_type_change_cd();
}
inline void AppearanceGlobalConfig::_internal_set_sk_type_change_cd(int32_t value) {
  
  _impl_.sk_type_change_cd_ = value;
}
inline void AppearanceGlobalConfig::set_sk_type_change_cd(int32_t value) {
  _internal_set_sk_type_change_cd(value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceGlobalConfig.sk_type_change_cd)
}

// int32 sk_type_change_item_id = 5;
inline void AppearanceGlobalConfig::clear_sk_type_change_item_id() {
  _impl_.sk_type_change_item_id_ = 0;
}
inline int32_t AppearanceGlobalConfig::_internal_sk_type_change_item_id() const {
  return _impl_.sk_type_change_item_id_;
}
inline int32_t AppearanceGlobalConfig::sk_type_change_item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfig.sk_type_change_item_id)
  return _internal_sk_type_change_item_id();
}
inline void AppearanceGlobalConfig::_internal_set_sk_type_change_item_id(int32_t value) {
  
  _impl_.sk_type_change_item_id_ = value;
}
inline void AppearanceGlobalConfig::set_sk_type_change_item_id(int32_t value) {
  _internal_set_sk_type_change_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.AppearanceGlobalConfig.sk_type_change_item_id)
}

// repeated .idlepb.AppearanceGlobalConfigShopRefreshRule shop_refresh_rule = 6;
inline int AppearanceGlobalConfig::_internal_shop_refresh_rule_size() const {
  return _impl_.shop_refresh_rule_.size();
}
inline int AppearanceGlobalConfig::shop_refresh_rule_size() const {
  return _internal_shop_refresh_rule_size();
}
inline void AppearanceGlobalConfig::clear_shop_refresh_rule() {
  _impl_.shop_refresh_rule_.Clear();
}
inline ::idlepb::AppearanceGlobalConfigShopRefreshRule* AppearanceGlobalConfig::mutable_shop_refresh_rule(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.AppearanceGlobalConfig.shop_refresh_rule)
  return _impl_.shop_refresh_rule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceGlobalConfigShopRefreshRule >*
AppearanceGlobalConfig::mutable_shop_refresh_rule() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.AppearanceGlobalConfig.shop_refresh_rule)
  return &_impl_.shop_refresh_rule_;
}
inline const ::idlepb::AppearanceGlobalConfigShopRefreshRule& AppearanceGlobalConfig::_internal_shop_refresh_rule(int index) const {
  return _impl_.shop_refresh_rule_.Get(index);
}
inline const ::idlepb::AppearanceGlobalConfigShopRefreshRule& AppearanceGlobalConfig::shop_refresh_rule(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfig.shop_refresh_rule)
  return _internal_shop_refresh_rule(index);
}
inline ::idlepb::AppearanceGlobalConfigShopRefreshRule* AppearanceGlobalConfig::_internal_add_shop_refresh_rule() {
  return _impl_.shop_refresh_rule_.Add();
}
inline ::idlepb::AppearanceGlobalConfigShopRefreshRule* AppearanceGlobalConfig::add_shop_refresh_rule() {
  ::idlepb::AppearanceGlobalConfigShopRefreshRule* _add = _internal_add_shop_refresh_rule();
  // @@protoc_insertion_point(field_add:idlepb.AppearanceGlobalConfig.shop_refresh_rule)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceGlobalConfigShopRefreshRule >&
AppearanceGlobalConfig::shop_refresh_rule() const {
  // @@protoc_insertion_point(field_list:idlepb.AppearanceGlobalConfig.shop_refresh_rule)
  return _impl_.shop_refresh_rule_;
}

// repeated .idlepb.AppearanceGlobalConfigModelTypeInfo model_type_info = 7;
inline int AppearanceGlobalConfig::_internal_model_type_info_size() const {
  return _impl_.model_type_info_.size();
}
inline int AppearanceGlobalConfig::model_type_info_size() const {
  return _internal_model_type_info_size();
}
inline void AppearanceGlobalConfig::clear_model_type_info() {
  _impl_.model_type_info_.Clear();
}
inline ::idlepb::AppearanceGlobalConfigModelTypeInfo* AppearanceGlobalConfig::mutable_model_type_info(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.AppearanceGlobalConfig.model_type_info)
  return _impl_.model_type_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceGlobalConfigModelTypeInfo >*
AppearanceGlobalConfig::mutable_model_type_info() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.AppearanceGlobalConfig.model_type_info)
  return &_impl_.model_type_info_;
}
inline const ::idlepb::AppearanceGlobalConfigModelTypeInfo& AppearanceGlobalConfig::_internal_model_type_info(int index) const {
  return _impl_.model_type_info_.Get(index);
}
inline const ::idlepb::AppearanceGlobalConfigModelTypeInfo& AppearanceGlobalConfig::model_type_info(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.AppearanceGlobalConfig.model_type_info)
  return _internal_model_type_info(index);
}
inline ::idlepb::AppearanceGlobalConfigModelTypeInfo* AppearanceGlobalConfig::_internal_add_model_type_info() {
  return _impl_.model_type_info_.Add();
}
inline ::idlepb::AppearanceGlobalConfigModelTypeInfo* AppearanceGlobalConfig::add_model_type_info() {
  ::idlepb::AppearanceGlobalConfigModelTypeInfo* _add = _internal_add_model_type_info();
  // @@protoc_insertion_point(field_add:idlepb.AppearanceGlobalConfig.model_type_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AppearanceGlobalConfigModelTypeInfo >&
AppearanceGlobalConfig::model_type_info() const {
  // @@protoc_insertion_point(field_list:idlepb.AppearanceGlobalConfig.model_type_info)
  return _impl_.model_type_info_;
}

// -------------------------------------------------------------------

// FarmGlobalConfig

// string farmland_shape = 1;
inline void FarmGlobalConfig::clear_farmland_shape() {
  _impl_.farmland_shape_.ClearToEmpty();
}
inline const std::string& FarmGlobalConfig::farmland_shape() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmGlobalConfig.farmland_shape)
  return _internal_farmland_shape();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FarmGlobalConfig::set_farmland_shape(ArgT0&& arg0, ArgT... args) {
 
 _impl_.farmland_shape_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.FarmGlobalConfig.farmland_shape)
}
inline std::string* FarmGlobalConfig::mutable_farmland_shape() {
  std::string* _s = _internal_mutable_farmland_shape();
  // @@protoc_insertion_point(field_mutable:idlepb.FarmGlobalConfig.farmland_shape)
  return _s;
}
inline const std::string& FarmGlobalConfig::_internal_farmland_shape() const {
  return _impl_.farmland_shape_.Get();
}
inline void FarmGlobalConfig::_internal_set_farmland_shape(const std::string& value) {
  
  _impl_.farmland_shape_.Set(value, GetArenaForAllocation());
}
inline std::string* FarmGlobalConfig::_internal_mutable_farmland_shape() {
  
  return _impl_.farmland_shape_.Mutable(GetArenaForAllocation());
}
inline std::string* FarmGlobalConfig::release_farmland_shape() {
  // @@protoc_insertion_point(field_release:idlepb.FarmGlobalConfig.farmland_shape)
  return _impl_.farmland_shape_.Release();
}
inline void FarmGlobalConfig::set_allocated_farmland_shape(std::string* farmland_shape) {
  if (farmland_shape != nullptr) {
    
  } else {
    
  }
  _impl_.farmland_shape_.SetAllocated(farmland_shape, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.farmland_shape_.IsDefault()) {
    _impl_.farmland_shape_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.FarmGlobalConfig.farmland_shape)
}

// repeated int32 default_unlock_farmland_index = 2;
inline int FarmGlobalConfig::_internal_default_unlock_farmland_index_size() const {
  return _impl_.default_unlock_farmland_index_.size();
}
inline int FarmGlobalConfig::default_unlock_farmland_index_size() const {
  return _internal_default_unlock_farmland_index_size();
}
inline void FarmGlobalConfig::clear_default_unlock_farmland_index() {
  _impl_.default_unlock_farmland_index_.Clear();
}
inline int32_t FarmGlobalConfig::_internal_default_unlock_farmland_index(int index) const {
  return _impl_.default_unlock_farmland_index_.Get(index);
}
inline int32_t FarmGlobalConfig::default_unlock_farmland_index(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.FarmGlobalConfig.default_unlock_farmland_index)
  return _internal_default_unlock_farmland_index(index);
}
inline void FarmGlobalConfig::set_default_unlock_farmland_index(int index, int32_t value) {
  _impl_.default_unlock_farmland_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.FarmGlobalConfig.default_unlock_farmland_index)
}
inline void FarmGlobalConfig::_internal_add_default_unlock_farmland_index(int32_t value) {
  _impl_.default_unlock_farmland_index_.Add(value);
}
inline void FarmGlobalConfig::add_default_unlock_farmland_index(int32_t value) {
  _internal_add_default_unlock_farmland_index(value);
  // @@protoc_insertion_point(field_add:idlepb.FarmGlobalConfig.default_unlock_farmland_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FarmGlobalConfig::_internal_default_unlock_farmland_index() const {
  return _impl_.default_unlock_farmland_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FarmGlobalConfig::default_unlock_farmland_index() const {
  // @@protoc_insertion_point(field_list:idlepb.FarmGlobalConfig.default_unlock_farmland_index)
  return _internal_default_unlock_farmland_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FarmGlobalConfig::_internal_mutable_default_unlock_farmland_index() {
  return &_impl_.default_unlock_farmland_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FarmGlobalConfig::mutable_default_unlock_farmland_index() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.FarmGlobalConfig.default_unlock_farmland_index)
  return _internal_mutable_default_unlock_farmland_index();
}

// int32 unlock_farmland_cost_item_id = 3;
inline void FarmGlobalConfig::clear_unlock_farmland_cost_item_id() {
  _impl_.unlock_farmland_cost_item_id_ = 0;
}
inline int32_t FarmGlobalConfig::_internal_unlock_farmland_cost_item_id() const {
  return _impl_.unlock_farmland_cost_item_id_;
}
inline int32_t FarmGlobalConfig::unlock_farmland_cost_item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmGlobalConfig.unlock_farmland_cost_item_id)
  return _internal_unlock_farmland_cost_item_id();
}
inline void FarmGlobalConfig::_internal_set_unlock_farmland_cost_item_id(int32_t value) {
  
  _impl_.unlock_farmland_cost_item_id_ = value;
}
inline void FarmGlobalConfig::set_unlock_farmland_cost_item_id(int32_t value) {
  _internal_set_unlock_farmland_cost_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmGlobalConfig.unlock_farmland_cost_item_id)
}

// repeated int32 unlock_farmland_cost_item_num = 4;
inline int FarmGlobalConfig::_internal_unlock_farmland_cost_item_num_size() const {
  return _impl_.unlock_farmland_cost_item_num_.size();
}
inline int FarmGlobalConfig::unlock_farmland_cost_item_num_size() const {
  return _internal_unlock_farmland_cost_item_num_size();
}
inline void FarmGlobalConfig::clear_unlock_farmland_cost_item_num() {
  _impl_.unlock_farmland_cost_item_num_.Clear();
}
inline int32_t FarmGlobalConfig::_internal_unlock_farmland_cost_item_num(int index) const {
  return _impl_.unlock_farmland_cost_item_num_.Get(index);
}
inline int32_t FarmGlobalConfig::unlock_farmland_cost_item_num(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.FarmGlobalConfig.unlock_farmland_cost_item_num)
  return _internal_unlock_farmland_cost_item_num(index);
}
inline void FarmGlobalConfig::set_unlock_farmland_cost_item_num(int index, int32_t value) {
  _impl_.unlock_farmland_cost_item_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.FarmGlobalConfig.unlock_farmland_cost_item_num)
}
inline void FarmGlobalConfig::_internal_add_unlock_farmland_cost_item_num(int32_t value) {
  _impl_.unlock_farmland_cost_item_num_.Add(value);
}
inline void FarmGlobalConfig::add_unlock_farmland_cost_item_num(int32_t value) {
  _internal_add_unlock_farmland_cost_item_num(value);
  // @@protoc_insertion_point(field_add:idlepb.FarmGlobalConfig.unlock_farmland_cost_item_num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FarmGlobalConfig::_internal_unlock_farmland_cost_item_num() const {
  return _impl_.unlock_farmland_cost_item_num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FarmGlobalConfig::unlock_farmland_cost_item_num() const {
  // @@protoc_insertion_point(field_list:idlepb.FarmGlobalConfig.unlock_farmland_cost_item_num)
  return _internal_unlock_farmland_cost_item_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FarmGlobalConfig::_internal_mutable_unlock_farmland_cost_item_num() {
  return &_impl_.unlock_farmland_cost_item_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FarmGlobalConfig::mutable_unlock_farmland_cost_item_num() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.FarmGlobalConfig.unlock_farmland_cost_item_num)
  return _internal_mutable_unlock_farmland_cost_item_num();
}

// string farmland_seed_shape = 5;
inline void FarmGlobalConfig::clear_farmland_seed_shape() {
  _impl_.farmland_seed_shape_.ClearToEmpty();
}
inline const std::string& FarmGlobalConfig::farmland_seed_shape() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmGlobalConfig.farmland_seed_shape)
  return _internal_farmland_seed_shape();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FarmGlobalConfig::set_farmland_seed_shape(ArgT0&& arg0, ArgT... args) {
 
 _impl_.farmland_seed_shape_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.FarmGlobalConfig.farmland_seed_shape)
}
inline std::string* FarmGlobalConfig::mutable_farmland_seed_shape() {
  std::string* _s = _internal_mutable_farmland_seed_shape();
  // @@protoc_insertion_point(field_mutable:idlepb.FarmGlobalConfig.farmland_seed_shape)
  return _s;
}
inline const std::string& FarmGlobalConfig::_internal_farmland_seed_shape() const {
  return _impl_.farmland_seed_shape_.Get();
}
inline void FarmGlobalConfig::_internal_set_farmland_seed_shape(const std::string& value) {
  
  _impl_.farmland_seed_shape_.Set(value, GetArenaForAllocation());
}
inline std::string* FarmGlobalConfig::_internal_mutable_farmland_seed_shape() {
  
  return _impl_.farmland_seed_shape_.Mutable(GetArenaForAllocation());
}
inline std::string* FarmGlobalConfig::release_farmland_seed_shape() {
  // @@protoc_insertion_point(field_release:idlepb.FarmGlobalConfig.farmland_seed_shape)
  return _impl_.farmland_seed_shape_.Release();
}
inline void FarmGlobalConfig::set_allocated_farmland_seed_shape(std::string* farmland_seed_shape) {
  if (farmland_seed_shape != nullptr) {
    
  } else {
    
  }
  _impl_.farmland_seed_shape_.SetAllocated(farmland_seed_shape, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.farmland_seed_shape_.IsDefault()) {
    _impl_.farmland_seed_shape_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.FarmGlobalConfig.farmland_seed_shape)
}

// int32 watering_times_per_day = 6;
inline void FarmGlobalConfig::clear_watering_times_per_day() {
  _impl_.watering_times_per_day_ = 0;
}
inline int32_t FarmGlobalConfig::_internal_watering_times_per_day() const {
  return _impl_.watering_times_per_day_;
}
inline int32_t FarmGlobalConfig::watering_times_per_day() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmGlobalConfig.watering_times_per_day)
  return _internal_watering_times_per_day();
}
inline void FarmGlobalConfig::_internal_set_watering_times_per_day(int32_t value) {
  
  _impl_.watering_times_per_day_ = value;
}
inline void FarmGlobalConfig::set_watering_times_per_day(int32_t value) {
  _internal_set_watering_times_per_day(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmGlobalConfig.watering_times_per_day)
}

// repeated int32 cost_per_watering = 7;
inline int FarmGlobalConfig::_internal_cost_per_watering_size() const {
  return _impl_.cost_per_watering_.size();
}
inline int FarmGlobalConfig::cost_per_watering_size() const {
  return _internal_cost_per_watering_size();
}
inline void FarmGlobalConfig::clear_cost_per_watering() {
  _impl_.cost_per_watering_.Clear();
}
inline int32_t FarmGlobalConfig::_internal_cost_per_watering(int index) const {
  return _impl_.cost_per_watering_.Get(index);
}
inline int32_t FarmGlobalConfig::cost_per_watering(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.FarmGlobalConfig.cost_per_watering)
  return _internal_cost_per_watering(index);
}
inline void FarmGlobalConfig::set_cost_per_watering(int index, int32_t value) {
  _impl_.cost_per_watering_.Set(index, value);
  // @@protoc_insertion_point(field_set:idlepb.FarmGlobalConfig.cost_per_watering)
}
inline void FarmGlobalConfig::_internal_add_cost_per_watering(int32_t value) {
  _impl_.cost_per_watering_.Add(value);
}
inline void FarmGlobalConfig::add_cost_per_watering(int32_t value) {
  _internal_add_cost_per_watering(value);
  // @@protoc_insertion_point(field_add:idlepb.FarmGlobalConfig.cost_per_watering)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FarmGlobalConfig::_internal_cost_per_watering() const {
  return _impl_.cost_per_watering_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FarmGlobalConfig::cost_per_watering() const {
  // @@protoc_insertion_point(field_list:idlepb.FarmGlobalConfig.cost_per_watering)
  return _internal_cost_per_watering();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FarmGlobalConfig::_internal_mutable_cost_per_watering() {
  return &_impl_.cost_per_watering_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FarmGlobalConfig::mutable_cost_per_watering() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.FarmGlobalConfig.cost_per_watering)
  return _internal_mutable_cost_per_watering();
}

// int32 add_speed_per_watering = 8;
inline void FarmGlobalConfig::clear_add_speed_per_watering() {
  _impl_.add_speed_per_watering_ = 0;
}
inline int32_t FarmGlobalConfig::_internal_add_speed_per_watering() const {
  return _impl_.add_speed_per_watering_;
}
inline int32_t FarmGlobalConfig::add_speed_per_watering() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmGlobalConfig.add_speed_per_watering)
  return _internal_add_speed_per_watering();
}
inline void FarmGlobalConfig::_internal_set_add_speed_per_watering(int32_t value) {
  
  _impl_.add_speed_per_watering_ = value;
}
inline void FarmGlobalConfig::set_add_speed_per_watering(int32_t value) {
  _internal_set_add_speed_per_watering(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmGlobalConfig.add_speed_per_watering)
}

// string add_speed_from_item = 9;
inline void FarmGlobalConfig::clear_add_speed_from_item() {
  _impl_.add_speed_from_item_.ClearToEmpty();
}
inline const std::string& FarmGlobalConfig::add_speed_from_item() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmGlobalConfig.add_speed_from_item)
  return _internal_add_speed_from_item();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FarmGlobalConfig::set_add_speed_from_item(ArgT0&& arg0, ArgT... args) {
 
 _impl_.add_speed_from_item_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.FarmGlobalConfig.add_speed_from_item)
}
inline std::string* FarmGlobalConfig::mutable_add_speed_from_item() {
  std::string* _s = _internal_mutable_add_speed_from_item();
  // @@protoc_insertion_point(field_mutable:idlepb.FarmGlobalConfig.add_speed_from_item)
  return _s;
}
inline const std::string& FarmGlobalConfig::_internal_add_speed_from_item() const {
  return _impl_.add_speed_from_item_.Get();
}
inline void FarmGlobalConfig::_internal_set_add_speed_from_item(const std::string& value) {
  
  _impl_.add_speed_from_item_.Set(value, GetArenaForAllocation());
}
inline std::string* FarmGlobalConfig::_internal_mutable_add_speed_from_item() {
  
  return _impl_.add_speed_from_item_.Mutable(GetArenaForAllocation());
}
inline std::string* FarmGlobalConfig::release_add_speed_from_item() {
  // @@protoc_insertion_point(field_release:idlepb.FarmGlobalConfig.add_speed_from_item)
  return _impl_.add_speed_from_item_.Release();
}
inline void FarmGlobalConfig::set_allocated_add_speed_from_item(std::string* add_speed_from_item) {
  if (add_speed_from_item != nullptr) {
    
  } else {
    
  }
  _impl_.add_speed_from_item_.SetAllocated(add_speed_from_item, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.add_speed_from_item_.IsDefault()) {
    _impl_.add_speed_from_item_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.FarmGlobalConfig.add_speed_from_item)
}

// float min_seed_plant_time_percent = 10;
inline void FarmGlobalConfig::clear_min_seed_plant_time_percent() {
  _impl_.min_seed_plant_time_percent_ = 0;
}
inline float FarmGlobalConfig::_internal_min_seed_plant_time_percent() const {
  return _impl_.min_seed_plant_time_percent_;
}
inline float FarmGlobalConfig::min_seed_plant_time_percent() const {
  // @@protoc_insertion_point(field_get:idlepb.FarmGlobalConfig.min_seed_plant_time_percent)
  return _internal_min_seed_plant_time_percent();
}
inline void FarmGlobalConfig::_internal_set_min_seed_plant_time_percent(float value) {
  
  _impl_.min_seed_plant_time_percent_ = value;
}
inline void FarmGlobalConfig::set_min_seed_plant_time_percent(float value) {
  _internal_set_min_seed_plant_time_percent(value);
  // @@protoc_insertion_point(field_set:idlepb.FarmGlobalConfig.min_seed_plant_time_percent)
}

// -------------------------------------------------------------------

// FriendsGlobalConfig

// int32 max_friend_num = 1;
inline void FriendsGlobalConfig::clear_max_friend_num() {
  _impl_.max_friend_num_ = 0;
}
inline int32_t FriendsGlobalConfig::_internal_max_friend_num() const {
  return _impl_.max_friend_num_;
}
inline int32_t FriendsGlobalConfig::max_friend_num() const {
  // @@protoc_insertion_point(field_get:idlepb.FriendsGlobalConfig.max_friend_num)
  return _internal_max_friend_num();
}
inline void FriendsGlobalConfig::_internal_set_max_friend_num(int32_t value) {
  
  _impl_.max_friend_num_ = value;
}
inline void FriendsGlobalConfig::set_max_friend_num(int32_t value) {
  _internal_set_max_friend_num(value);
  // @@protoc_insertion_point(field_set:idlepb.FriendsGlobalConfig.max_friend_num)
}

// int32 daily_search_count = 2;
inline void FriendsGlobalConfig::clear_daily_search_count() {
  _impl_.daily_search_count_ = 0;
}
inline int32_t FriendsGlobalConfig::_internal_daily_search_count() const {
  return _impl_.daily_search_count_;
}
inline int32_t FriendsGlobalConfig::daily_search_count() const {
  // @@protoc_insertion_point(field_get:idlepb.FriendsGlobalConfig.daily_search_count)
  return _internal_daily_search_count();
}
inline void FriendsGlobalConfig::_internal_set_daily_search_count(int32_t value) {
  
  _impl_.daily_search_count_ = value;
}
inline void FriendsGlobalConfig::set_daily_search_count(int32_t value) {
  _internal_set_daily_search_count(value);
  // @@protoc_insertion_point(field_set:idlepb.FriendsGlobalConfig.daily_search_count)
}

// int32 max_apply_count = 3;
inline void FriendsGlobalConfig::clear_max_apply_count() {
  _impl_.max_apply_count_ = 0;
}
inline int32_t FriendsGlobalConfig::_internal_max_apply_count() const {
  return _impl_.max_apply_count_;
}
inline int32_t FriendsGlobalConfig::max_apply_count() const {
  // @@protoc_insertion_point(field_get:idlepb.FriendsGlobalConfig.max_apply_count)
  return _internal_max_apply_count();
}
inline void FriendsGlobalConfig::_internal_set_max_apply_count(int32_t value) {
  
  _impl_.max_apply_count_ = value;
}
inline void FriendsGlobalConfig::set_max_apply_count(int32_t value) {
  _internal_set_max_apply_count(value);
  // @@protoc_insertion_point(field_set:idlepb.FriendsGlobalConfig.max_apply_count)
}

// int32 max_block_list = 4;
inline void FriendsGlobalConfig::clear_max_block_list() {
  _impl_.max_block_list_ = 0;
}
inline int32_t FriendsGlobalConfig::_internal_max_block_list() const {
  return _impl_.max_block_list_;
}
inline int32_t FriendsGlobalConfig::max_block_list() const {
  // @@protoc_insertion_point(field_get:idlepb.FriendsGlobalConfig.max_block_list)
  return _internal_max_block_list();
}
inline void FriendsGlobalConfig::_internal_set_max_block_list(int32_t value) {
  
  _impl_.max_block_list_ = value;
}
inline void FriendsGlobalConfig::set_max_block_list(int32_t value) {
  _internal_set_max_block_list(value);
  // @@protoc_insertion_point(field_set:idlepb.FriendsGlobalConfig.max_block_list)
}

// -------------------------------------------------------------------

// AvatarStageCountDiff

// int32 diff_num = 1;
inline void AvatarStageCountDiff::clear_diff_num() {
  _impl_.diff_num_ = 0;
}
inline int32_t AvatarStageCountDiff::_internal_diff_num() const {
  return _impl_.diff_num_;
}
inline int32_t AvatarStageCountDiff::diff_num() const {
  // @@protoc_insertion_point(field_get:idlepb.AvatarStageCountDiff.diff_num)
  return _internal_diff_num();
}
inline void AvatarStageCountDiff::_internal_set_diff_num(int32_t value) {
  
  _impl_.diff_num_ = value;
}
inline void AvatarStageCountDiff::set_diff_num(int32_t value) {
  _internal_set_diff_num(value);
  // @@protoc_insertion_point(field_set:idlepb.AvatarStageCountDiff.diff_num)
}

// float coef = 2;
inline void AvatarStageCountDiff::clear_coef() {
  _impl_.coef_ = 0;
}
inline float AvatarStageCountDiff::_internal_coef() const {
  return _impl_.coef_;
}
inline float AvatarStageCountDiff::coef() const {
  // @@protoc_insertion_point(field_get:idlepb.AvatarStageCountDiff.coef)
  return _internal_coef();
}
inline void AvatarStageCountDiff::_internal_set_coef(float value) {
  
  _impl_.coef_ = value;
}
inline void AvatarStageCountDiff::set_coef(float value) {
  _internal_set_coef(value);
  // @@protoc_insertion_point(field_set:idlepb.AvatarStageCountDiff.coef)
}

// -------------------------------------------------------------------

// AnotherMeGlobalConfig

// int32 temp_package_max = 1;
inline void AnotherMeGlobalConfig::clear_temp_package_max() {
  _impl_.temp_package_max_ = 0;
}
inline int32_t AnotherMeGlobalConfig::_internal_temp_package_max() const {
  return _impl_.temp_package_max_;
}
inline int32_t AnotherMeGlobalConfig::temp_package_max() const {
  // @@protoc_insertion_point(field_get:idlepb.AnotherMeGlobalConfig.temp_package_max)
  return _internal_temp_package_max();
}
inline void AnotherMeGlobalConfig::_internal_set_temp_package_max(int32_t value) {
  
  _impl_.temp_package_max_ = value;
}
inline void AnotherMeGlobalConfig::set_temp_package_max(int32_t value) {
  _internal_set_temp_package_max(value);
  // @@protoc_insertion_point(field_set:idlepb.AnotherMeGlobalConfig.temp_package_max)
}

// int32 idle_time_max = 2;
inline void AnotherMeGlobalConfig::clear_idle_time_max() {
  _impl_.idle_time_max_ = 0;
}
inline int32_t AnotherMeGlobalConfig::_internal_idle_time_max() const {
  return _impl_.idle_time_max_;
}
inline int32_t AnotherMeGlobalConfig::idle_time_max() const {
  // @@protoc_insertion_point(field_get:idlepb.AnotherMeGlobalConfig.idle_time_max)
  return _internal_idle_time_max();
}
inline void AnotherMeGlobalConfig::_internal_set_idle_time_max(int32_t value) {
  
  _impl_.idle_time_max_ = value;
}
inline void AnotherMeGlobalConfig::set_idle_time_max(int32_t value) {
  _internal_set_idle_time_max(value);
  // @@protoc_insertion_point(field_set:idlepb.AnotherMeGlobalConfig.idle_time_max)
}

// int32 idle_time_duration = 3;
inline void AnotherMeGlobalConfig::clear_idle_time_duration() {
  _impl_.idle_time_duration_ = 0;
}
inline int32_t AnotherMeGlobalConfig::_internal_idle_time_duration() const {
  return _impl_.idle_time_duration_;
}
inline int32_t AnotherMeGlobalConfig::idle_time_duration() const {
  // @@protoc_insertion_point(field_get:idlepb.AnotherMeGlobalConfig.idle_time_duration)
  return _internal_idle_time_duration();
}
inline void AnotherMeGlobalConfig::_internal_set_idle_time_duration(int32_t value) {
  
  _impl_.idle_time_duration_ = value;
}
inline void AnotherMeGlobalConfig::set_idle_time_duration(int32_t value) {
  _internal_set_idle_time_duration(value);
  // @@protoc_insertion_point(field_set:idlepb.AnotherMeGlobalConfig.idle_time_duration)
}

// int32 default_draw_time = 4;
inline void AnotherMeGlobalConfig::clear_default_draw_time() {
  _impl_.default_draw_time_ = 0;
}
inline int32_t AnotherMeGlobalConfig::_internal_default_draw_time() const {
  return _impl_.default_draw_time_;
}
inline int32_t AnotherMeGlobalConfig::default_draw_time() const {
  // @@protoc_insertion_point(field_get:idlepb.AnotherMeGlobalConfig.default_draw_time)
  return _internal_default_draw_time();
}
inline void AnotherMeGlobalConfig::_internal_set_default_draw_time(int32_t value) {
  
  _impl_.default_draw_time_ = value;
}
inline void AnotherMeGlobalConfig::set_default_draw_time(int32_t value) {
  _internal_set_default_draw_time(value);
  // @@protoc_insertion_point(field_set:idlepb.AnotherMeGlobalConfig.default_draw_time)
}

// repeated .idlepb.AvatarStageCountDiff stage_count_diff = 5;
inline int AnotherMeGlobalConfig::_internal_stage_count_diff_size() const {
  return _impl_.stage_count_diff_.size();
}
inline int AnotherMeGlobalConfig::stage_count_diff_size() const {
  return _internal_stage_count_diff_size();
}
inline void AnotherMeGlobalConfig::clear_stage_count_diff() {
  _impl_.stage_count_diff_.Clear();
}
inline ::idlepb::AvatarStageCountDiff* AnotherMeGlobalConfig::mutable_stage_count_diff(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.AnotherMeGlobalConfig.stage_count_diff)
  return _impl_.stage_count_diff_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AvatarStageCountDiff >*
AnotherMeGlobalConfig::mutable_stage_count_diff() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.AnotherMeGlobalConfig.stage_count_diff)
  return &_impl_.stage_count_diff_;
}
inline const ::idlepb::AvatarStageCountDiff& AnotherMeGlobalConfig::_internal_stage_count_diff(int index) const {
  return _impl_.stage_count_diff_.Get(index);
}
inline const ::idlepb::AvatarStageCountDiff& AnotherMeGlobalConfig::stage_count_diff(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.AnotherMeGlobalConfig.stage_count_diff)
  return _internal_stage_count_diff(index);
}
inline ::idlepb::AvatarStageCountDiff* AnotherMeGlobalConfig::_internal_add_stage_count_diff() {
  return _impl_.stage_count_diff_.Add();
}
inline ::idlepb::AvatarStageCountDiff* AnotherMeGlobalConfig::add_stage_count_diff() {
  ::idlepb::AvatarStageCountDiff* _add = _internal_add_stage_count_diff();
  // @@protoc_insertion_point(field_add:idlepb.AnotherMeGlobalConfig.stage_count_diff)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::AvatarStageCountDiff >&
AnotherMeGlobalConfig::stage_count_diff() const {
  // @@protoc_insertion_point(field_list:idlepb.AnotherMeGlobalConfig.stage_count_diff)
  return _impl_.stage_count_diff_;
}

// -------------------------------------------------------------------

// FuZeRewardNum

// int32 rank = 1;
inline void FuZeRewardNum::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t FuZeRewardNum::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t FuZeRewardNum::rank() const {
  // @@protoc_insertion_point(field_get:idlepb.FuZeRewardNum.rank)
  return _internal_rank();
}
inline void FuZeRewardNum::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void FuZeRewardNum::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:idlepb.FuZeRewardNum.rank)
}

// int32 num = 2;
inline void FuZeRewardNum::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t FuZeRewardNum::_internal_num() const {
  return _impl_.num_;
}
inline int32_t FuZeRewardNum::num() const {
  // @@protoc_insertion_point(field_get:idlepb.FuZeRewardNum.num)
  return _internal_num();
}
inline void FuZeRewardNum::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void FuZeRewardNum::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:idlepb.FuZeRewardNum.num)
}

// -------------------------------------------------------------------

// FuZeRewardItemId

// int32 degree = 1;
inline void FuZeRewardItemId::clear_degree() {
  _impl_.degree_ = 0;
}
inline int32_t FuZeRewardItemId::_internal_degree() const {
  return _impl_.degree_;
}
inline int32_t FuZeRewardItemId::degree() const {
  // @@protoc_insertion_point(field_get:idlepb.FuZeRewardItemId.degree)
  return _internal_degree();
}
inline void FuZeRewardItemId::_internal_set_degree(int32_t value) {
  
  _impl_.degree_ = value;
}
inline void FuZeRewardItemId::set_degree(int32_t value) {
  _internal_set_degree(value);
  // @@protoc_insertion_point(field_set:idlepb.FuZeRewardItemId.degree)
}

// int32 item_id = 2;
inline void FuZeRewardItemId::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t FuZeRewardItemId::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t FuZeRewardItemId::item_id() const {
  // @@protoc_insertion_point(field_get:idlepb.FuZeRewardItemId.item_id)
  return _internal_item_id();
}
inline void FuZeRewardItemId::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void FuZeRewardItemId::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:idlepb.FuZeRewardItemId.item_id)
}

// -------------------------------------------------------------------

// FuZeGlobalConfig

// repeated .idlepb.FuZeRewardNum reward_num = 1;
inline int FuZeGlobalConfig::_internal_reward_num_size() const {
  return _impl_.reward_num_.size();
}
inline int FuZeGlobalConfig::reward_num_size() const {
  return _internal_reward_num_size();
}
inline void FuZeGlobalConfig::clear_reward_num() {
  _impl_.reward_num_.Clear();
}
inline ::idlepb::FuZeRewardNum* FuZeGlobalConfig::mutable_reward_num(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.FuZeGlobalConfig.reward_num)
  return _impl_.reward_num_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZeRewardNum >*
FuZeGlobalConfig::mutable_reward_num() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.FuZeGlobalConfig.reward_num)
  return &_impl_.reward_num_;
}
inline const ::idlepb::FuZeRewardNum& FuZeGlobalConfig::_internal_reward_num(int index) const {
  return _impl_.reward_num_.Get(index);
}
inline const ::idlepb::FuZeRewardNum& FuZeGlobalConfig::reward_num(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.FuZeGlobalConfig.reward_num)
  return _internal_reward_num(index);
}
inline ::idlepb::FuZeRewardNum* FuZeGlobalConfig::_internal_add_reward_num() {
  return _impl_.reward_num_.Add();
}
inline ::idlepb::FuZeRewardNum* FuZeGlobalConfig::add_reward_num() {
  ::idlepb::FuZeRewardNum* _add = _internal_add_reward_num();
  // @@protoc_insertion_point(field_add:idlepb.FuZeGlobalConfig.reward_num)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZeRewardNum >&
FuZeGlobalConfig::reward_num() const {
  // @@protoc_insertion_point(field_list:idlepb.FuZeGlobalConfig.reward_num)
  return _impl_.reward_num_;
}

// repeated .idlepb.FuZeRewardItemId reward_id = 2;
inline int FuZeGlobalConfig::_internal_reward_id_size() const {
  return _impl_.reward_id_.size();
}
inline int FuZeGlobalConfig::reward_id_size() const {
  return _internal_reward_id_size();
}
inline void FuZeGlobalConfig::clear_reward_id() {
  _impl_.reward_id_.Clear();
}
inline ::idlepb::FuZeRewardItemId* FuZeGlobalConfig::mutable_reward_id(int index) {
  // @@protoc_insertion_point(field_mutable:idlepb.FuZeGlobalConfig.reward_id)
  return _impl_.reward_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZeRewardItemId >*
FuZeGlobalConfig::mutable_reward_id() {
  // @@protoc_insertion_point(field_mutable_list:idlepb.FuZeGlobalConfig.reward_id)
  return &_impl_.reward_id_;
}
inline const ::idlepb::FuZeRewardItemId& FuZeGlobalConfig::_internal_reward_id(int index) const {
  return _impl_.reward_id_.Get(index);
}
inline const ::idlepb::FuZeRewardItemId& FuZeGlobalConfig::reward_id(int index) const {
  // @@protoc_insertion_point(field_get:idlepb.FuZeGlobalConfig.reward_id)
  return _internal_reward_id(index);
}
inline ::idlepb::FuZeRewardItemId* FuZeGlobalConfig::_internal_add_reward_id() {
  return _impl_.reward_id_.Add();
}
inline ::idlepb::FuZeRewardItemId* FuZeGlobalConfig::add_reward_id() {
  ::idlepb::FuZeRewardItemId* _add = _internal_add_reward_id();
  // @@protoc_insertion_point(field_add:idlepb.FuZeGlobalConfig.reward_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idlepb::FuZeRewardItemId >&
FuZeGlobalConfig::reward_id() const {
  // @@protoc_insertion_point(field_list:idlepb.FuZeGlobalConfig.reward_id)
  return _impl_.reward_id_;
}

// int32 fuze_rank_num = 3;
inline void FuZeGlobalConfig::clear_fuze_rank_num() {
  _impl_.fuze_rank_num_ = 0;
}
inline int32_t FuZeGlobalConfig::_internal_fuze_rank_num() const {
  return _impl_.fuze_rank_num_;
}
inline int32_t FuZeGlobalConfig::fuze_rank_num() const {
  // @@protoc_insertion_point(field_get:idlepb.FuZeGlobalConfig.fuze_rank_num)
  return _internal_fuze_rank_num();
}
inline void FuZeGlobalConfig::_internal_set_fuze_rank_num(int32_t value) {
  
  _impl_.fuze_rank_num_ = value;
}
inline void FuZeGlobalConfig::set_fuze_rank_num(int32_t value) {
  _internal_set_fuze_rank_num(value);
  // @@protoc_insertion_point(field_set:idlepb.FuZeGlobalConfig.fuze_rank_num)
}

// float fuze_rank_ratio = 4;
inline void FuZeGlobalConfig::clear_fuze_rank_ratio() {
  _impl_.fuze_rank_ratio_ = 0;
}
inline float FuZeGlobalConfig::_internal_fuze_rank_ratio() const {
  return _impl_.fuze_rank_ratio_;
}
inline float FuZeGlobalConfig::fuze_rank_ratio() const {
  // @@protoc_insertion_point(field_get:idlepb.FuZeGlobalConfig.fuze_rank_ratio)
  return _internal_fuze_rank_ratio();
}
inline void FuZeGlobalConfig::_internal_set_fuze_rank_ratio(float value) {
  
  _impl_.fuze_rank_ratio_ = value;
}
inline void FuZeGlobalConfig::set_fuze_rank_ratio(float value) {
  _internal_set_fuze_rank_ratio(value);
  // @@protoc_insertion_point(field_set:idlepb.FuZeGlobalConfig.fuze_rank_ratio)
}

// float fenqi_exp_ratio = 5;
inline void FuZeGlobalConfig::clear_fenqi_exp_ratio() {
  _impl_.fenqi_exp_ratio_ = 0;
}
inline float FuZeGlobalConfig::_internal_fenqi_exp_ratio() const {
  return _impl_.fenqi_exp_ratio_;
}
inline float FuZeGlobalConfig::fenqi_exp_ratio() const {
  // @@protoc_insertion_point(field_get:idlepb.FuZeGlobalConfig.fenqi_exp_ratio)
  return _internal_fenqi_exp_ratio();
}
inline void FuZeGlobalConfig::_internal_set_fenqi_exp_ratio(float value) {
  
  _impl_.fenqi_exp_ratio_ = value;
}
inline void FuZeGlobalConfig::set_fenqi_exp_ratio(float value) {
  _internal_set_fenqi_exp_ratio(value);
  // @@protoc_insertion_point(field_set:idlepb.FuZeGlobalConfig.fenqi_exp_ratio)
}

// int32 fuze_rank_min = 6;
inline void FuZeGlobalConfig::clear_fuze_rank_min() {
  _impl_.fuze_rank_min_ = 0;
}
inline int32_t FuZeGlobalConfig::_internal_fuze_rank_min() const {
  return _impl_.fuze_rank_min_;
}
inline int32_t FuZeGlobalConfig::fuze_rank_min() const {
  // @@protoc_insertion_point(field_get:idlepb.FuZeGlobalConfig.fuze_rank_min)
  return _internal_fuze_rank_min();
}
inline void FuZeGlobalConfig::_internal_set_fuze_rank_min(int32_t value) {
  
  _impl_.fuze_rank_min_ = value;
}
inline void FuZeGlobalConfig::set_fuze_rank_min(int32_t value) {
  _internal_set_fuze_rank_min(value);
  // @@protoc_insertion_point(field_set:idlepb.FuZeGlobalConfig.fuze_rank_min)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idlepb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gdd_5fglobal_2eproto
