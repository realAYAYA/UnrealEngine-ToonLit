// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdd_global.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gdd_5fglobal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gdd_5fglobal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "defines.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gdd_5fglobal_2eproto MPROTOCOL_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct MPROTOCOL_API TableStruct_gdd_5fglobal_2eproto {
  static const uint32_t offsets[];
};
MPROTOCOL_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gdd_5fglobal_2eproto;
namespace idlepb {
class CommonGlobalConfig;
struct CommonGlobalConfigDefaultTypeInternal;
MPROTOCOL_API extern CommonGlobalConfigDefaultTypeInternal _CommonGlobalConfig_default_instance_;
class GameClientConfig;
struct GameClientConfigDefaultTypeInternal;
MPROTOCOL_API extern GameClientConfigDefaultTypeInternal _GameClientConfig_default_instance_;
class GameServicesConfig;
struct GameServicesConfigDefaultTypeInternal;
MPROTOCOL_API extern GameServicesConfigDefaultTypeInternal _GameServicesConfig_default_instance_;
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
template<> MPROTOCOL_API ::idlepb::CommonGlobalConfig* Arena::CreateMaybeMessage<::idlepb::CommonGlobalConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::GameClientConfig* Arena::CreateMaybeMessage<::idlepb::GameClientConfig>(Arena*);
template<> MPROTOCOL_API ::idlepb::GameServicesConfig* Arena::CreateMaybeMessage<::idlepb::GameServicesConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace idlepb {

// ===================================================================

class MPROTOCOL_API CommonGlobalConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.CommonGlobalConfig) */ {
 public:
  inline CommonGlobalConfig() : CommonGlobalConfig(nullptr) {}
  ~CommonGlobalConfig() override;
  explicit PROTOBUF_CONSTEXPR CommonGlobalConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonGlobalConfig(const CommonGlobalConfig& from);
  CommonGlobalConfig(CommonGlobalConfig&& from) noexcept
    : CommonGlobalConfig() {
    *this = ::std::move(from);
  }

  inline CommonGlobalConfig& operator=(const CommonGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonGlobalConfig& operator=(CommonGlobalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonGlobalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const CommonGlobalConfig*>(
               &_CommonGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonGlobalConfig& a, CommonGlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonGlobalConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonGlobalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonGlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonGlobalConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonGlobalConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonGlobalConfig& from) {
    CommonGlobalConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonGlobalConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.CommonGlobalConfig";
  }
  protected:
  explicit CommonGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsRpcMaxSecondsFieldNumber = 1,
  };
  // float ts_rpc_max_seconds = 1;
  void clear_ts_rpc_max_seconds();
  float ts_rpc_max_seconds() const;
  void set_ts_rpc_max_seconds(float value);
  private:
  float _internal_ts_rpc_max_seconds() const;
  void _internal_set_ts_rpc_max_seconds(float value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.CommonGlobalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float ts_rpc_max_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API GameServicesConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.GameServicesConfig) */ {
 public:
  inline GameServicesConfig() : GameServicesConfig(nullptr) {}
  ~GameServicesConfig() override;
  explicit PROTOBUF_CONSTEXPR GameServicesConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServicesConfig(const GameServicesConfig& from);
  GameServicesConfig(GameServicesConfig&& from) noexcept
    : GameServicesConfig() {
    *this = ::std::move(from);
  }

  inline GameServicesConfig& operator=(const GameServicesConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServicesConfig& operator=(GameServicesConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServicesConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServicesConfig* internal_default_instance() {
    return reinterpret_cast<const GameServicesConfig*>(
               &_GameServicesConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameServicesConfig& a, GameServicesConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServicesConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServicesConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameServicesConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameServicesConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameServicesConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameServicesConfig& from) {
    GameServicesConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServicesConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.GameServicesConfig";
  }
  protected:
  explicit GameServicesConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenIpFieldNumber = 1,
    kRedisIpFieldNumber = 3,
    kRedisPasswordFieldNumber = 5,
    kPortFieldNumber = 2,
    kRedisPortFieldNumber = 4,
  };
  // string listen_ip = 1;
  void clear_listen_ip();
  const std::string& listen_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listen_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listen_ip();
  PROTOBUF_NODISCARD std::string* release_listen_ip();
  void set_allocated_listen_ip(std::string* listen_ip);
  private:
  const std::string& _internal_listen_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listen_ip(const std::string& value);
  std::string* _internal_mutable_listen_ip();
  public:

  // string redis_ip = 3;
  void clear_redis_ip();
  const std::string& redis_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redis_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redis_ip();
  PROTOBUF_NODISCARD std::string* release_redis_ip();
  void set_allocated_redis_ip(std::string* redis_ip);
  private:
  const std::string& _internal_redis_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redis_ip(const std::string& value);
  std::string* _internal_mutable_redis_ip();
  public:

  // string redis_password = 5;
  void clear_redis_password();
  const std::string& redis_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redis_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redis_password();
  PROTOBUF_NODISCARD std::string* release_redis_password();
  void set_allocated_redis_password(std::string* redis_password);
  private:
  const std::string& _internal_redis_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redis_password(const std::string& value);
  std::string* _internal_mutable_redis_password();
  public:

  // int32 port = 2;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // int32 redis_port = 4;
  void clear_redis_port();
  int32_t redis_port() const;
  void set_redis_port(int32_t value);
  private:
  int32_t _internal_redis_port() const;
  void _internal_set_redis_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.GameServicesConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listen_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redis_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redis_password_;
    int32_t port_;
    int32_t redis_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// -------------------------------------------------------------------

class MPROTOCOL_API GameClientConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idlepb.GameClientConfig) */ {
 public:
  inline GameClientConfig() : GameClientConfig(nullptr) {}
  ~GameClientConfig() override;
  explicit PROTOBUF_CONSTEXPR GameClientConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientConfig(const GameClientConfig& from);
  GameClientConfig(GameClientConfig&& from) noexcept
    : GameClientConfig() {
    *this = ::std::move(from);
  }

  inline GameClientConfig& operator=(const GameClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientConfig& operator=(GameClientConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientConfig* internal_default_instance() {
    return reinterpret_cast<const GameClientConfig*>(
               &_GameClientConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameClientConfig& a, GameClientConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameClientConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameClientConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameClientConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameClientConfig& from) {
    GameClientConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idlepb.GameClientConfig";
  }
  protected:
  explicit GameClientConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIpFieldNumber = 1,
    kServerPortFieldNumber = 2,
  };
  // string server_ip = 1;
  void clear_server_ip();
  const std::string& server_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_ip();
  PROTOBUF_NODISCARD std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // int32 server_port = 2;
  void clear_server_port();
  int32_t server_port() const;
  void set_server_port(int32_t value);
  private:
  int32_t _internal_server_port() const;
  void _internal_set_server_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idlepb.GameClientConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
    int32_t server_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gdd_5fglobal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonGlobalConfig

// float ts_rpc_max_seconds = 1;
inline void CommonGlobalConfig::clear_ts_rpc_max_seconds() {
  _impl_.ts_rpc_max_seconds_ = 0;
}
inline float CommonGlobalConfig::_internal_ts_rpc_max_seconds() const {
  return _impl_.ts_rpc_max_seconds_;
}
inline float CommonGlobalConfig::ts_rpc_max_seconds() const {
  // @@protoc_insertion_point(field_get:idlepb.CommonGlobalConfig.ts_rpc_max_seconds)
  return _internal_ts_rpc_max_seconds();
}
inline void CommonGlobalConfig::_internal_set_ts_rpc_max_seconds(float value) {
  
  _impl_.ts_rpc_max_seconds_ = value;
}
inline void CommonGlobalConfig::set_ts_rpc_max_seconds(float value) {
  _internal_set_ts_rpc_max_seconds(value);
  // @@protoc_insertion_point(field_set:idlepb.CommonGlobalConfig.ts_rpc_max_seconds)
}

// -------------------------------------------------------------------

// GameServicesConfig

// string listen_ip = 1;
inline void GameServicesConfig::clear_listen_ip() {
  _impl_.listen_ip_.ClearToEmpty();
}
inline const std::string& GameServicesConfig::listen_ip() const {
  // @@protoc_insertion_point(field_get:idlepb.GameServicesConfig.listen_ip)
  return _internal_listen_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameServicesConfig::set_listen_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.listen_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.GameServicesConfig.listen_ip)
}
inline std::string* GameServicesConfig::mutable_listen_ip() {
  std::string* _s = _internal_mutable_listen_ip();
  // @@protoc_insertion_point(field_mutable:idlepb.GameServicesConfig.listen_ip)
  return _s;
}
inline const std::string& GameServicesConfig::_internal_listen_ip() const {
  return _impl_.listen_ip_.Get();
}
inline void GameServicesConfig::_internal_set_listen_ip(const std::string& value) {
  
  _impl_.listen_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* GameServicesConfig::_internal_mutable_listen_ip() {
  
  return _impl_.listen_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* GameServicesConfig::release_listen_ip() {
  // @@protoc_insertion_point(field_release:idlepb.GameServicesConfig.listen_ip)
  return _impl_.listen_ip_.Release();
}
inline void GameServicesConfig::set_allocated_listen_ip(std::string* listen_ip) {
  if (listen_ip != nullptr) {
    
  } else {
    
  }
  _impl_.listen_ip_.SetAllocated(listen_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.listen_ip_.IsDefault()) {
    _impl_.listen_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.GameServicesConfig.listen_ip)
}

// int32 port = 2;
inline void GameServicesConfig::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t GameServicesConfig::_internal_port() const {
  return _impl_.port_;
}
inline int32_t GameServicesConfig::port() const {
  // @@protoc_insertion_point(field_get:idlepb.GameServicesConfig.port)
  return _internal_port();
}
inline void GameServicesConfig::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void GameServicesConfig::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:idlepb.GameServicesConfig.port)
}

// string redis_ip = 3;
inline void GameServicesConfig::clear_redis_ip() {
  _impl_.redis_ip_.ClearToEmpty();
}
inline const std::string& GameServicesConfig::redis_ip() const {
  // @@protoc_insertion_point(field_get:idlepb.GameServicesConfig.redis_ip)
  return _internal_redis_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameServicesConfig::set_redis_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.redis_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.GameServicesConfig.redis_ip)
}
inline std::string* GameServicesConfig::mutable_redis_ip() {
  std::string* _s = _internal_mutable_redis_ip();
  // @@protoc_insertion_point(field_mutable:idlepb.GameServicesConfig.redis_ip)
  return _s;
}
inline const std::string& GameServicesConfig::_internal_redis_ip() const {
  return _impl_.redis_ip_.Get();
}
inline void GameServicesConfig::_internal_set_redis_ip(const std::string& value) {
  
  _impl_.redis_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* GameServicesConfig::_internal_mutable_redis_ip() {
  
  return _impl_.redis_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* GameServicesConfig::release_redis_ip() {
  // @@protoc_insertion_point(field_release:idlepb.GameServicesConfig.redis_ip)
  return _impl_.redis_ip_.Release();
}
inline void GameServicesConfig::set_allocated_redis_ip(std::string* redis_ip) {
  if (redis_ip != nullptr) {
    
  } else {
    
  }
  _impl_.redis_ip_.SetAllocated(redis_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.redis_ip_.IsDefault()) {
    _impl_.redis_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.GameServicesConfig.redis_ip)
}

// int32 redis_port = 4;
inline void GameServicesConfig::clear_redis_port() {
  _impl_.redis_port_ = 0;
}
inline int32_t GameServicesConfig::_internal_redis_port() const {
  return _impl_.redis_port_;
}
inline int32_t GameServicesConfig::redis_port() const {
  // @@protoc_insertion_point(field_get:idlepb.GameServicesConfig.redis_port)
  return _internal_redis_port();
}
inline void GameServicesConfig::_internal_set_redis_port(int32_t value) {
  
  _impl_.redis_port_ = value;
}
inline void GameServicesConfig::set_redis_port(int32_t value) {
  _internal_set_redis_port(value);
  // @@protoc_insertion_point(field_set:idlepb.GameServicesConfig.redis_port)
}

// string redis_password = 5;
inline void GameServicesConfig::clear_redis_password() {
  _impl_.redis_password_.ClearToEmpty();
}
inline const std::string& GameServicesConfig::redis_password() const {
  // @@protoc_insertion_point(field_get:idlepb.GameServicesConfig.redis_password)
  return _internal_redis_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameServicesConfig::set_redis_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.redis_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.GameServicesConfig.redis_password)
}
inline std::string* GameServicesConfig::mutable_redis_password() {
  std::string* _s = _internal_mutable_redis_password();
  // @@protoc_insertion_point(field_mutable:idlepb.GameServicesConfig.redis_password)
  return _s;
}
inline const std::string& GameServicesConfig::_internal_redis_password() const {
  return _impl_.redis_password_.Get();
}
inline void GameServicesConfig::_internal_set_redis_password(const std::string& value) {
  
  _impl_.redis_password_.Set(value, GetArenaForAllocation());
}
inline std::string* GameServicesConfig::_internal_mutable_redis_password() {
  
  return _impl_.redis_password_.Mutable(GetArenaForAllocation());
}
inline std::string* GameServicesConfig::release_redis_password() {
  // @@protoc_insertion_point(field_release:idlepb.GameServicesConfig.redis_password)
  return _impl_.redis_password_.Release();
}
inline void GameServicesConfig::set_allocated_redis_password(std::string* redis_password) {
  if (redis_password != nullptr) {
    
  } else {
    
  }
  _impl_.redis_password_.SetAllocated(redis_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.redis_password_.IsDefault()) {
    _impl_.redis_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.GameServicesConfig.redis_password)
}

// -------------------------------------------------------------------

// GameClientConfig

// string server_ip = 1;
inline void GameClientConfig::clear_server_ip() {
  _impl_.server_ip_.ClearToEmpty();
}
inline const std::string& GameClientConfig::server_ip() const {
  // @@protoc_insertion_point(field_get:idlepb.GameClientConfig.server_ip)
  return _internal_server_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameClientConfig::set_server_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idlepb.GameClientConfig.server_ip)
}
inline std::string* GameClientConfig::mutable_server_ip() {
  std::string* _s = _internal_mutable_server_ip();
  // @@protoc_insertion_point(field_mutable:idlepb.GameClientConfig.server_ip)
  return _s;
}
inline const std::string& GameClientConfig::_internal_server_ip() const {
  return _impl_.server_ip_.Get();
}
inline void GameClientConfig::_internal_set_server_ip(const std::string& value) {
  
  _impl_.server_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* GameClientConfig::_internal_mutable_server_ip() {
  
  return _impl_.server_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* GameClientConfig::release_server_ip() {
  // @@protoc_insertion_point(field_release:idlepb.GameClientConfig.server_ip)
  return _impl_.server_ip_.Release();
}
inline void GameClientConfig::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  _impl_.server_ip_.SetAllocated(server_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_ip_.IsDefault()) {
    _impl_.server_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idlepb.GameClientConfig.server_ip)
}

// int32 server_port = 2;
inline void GameClientConfig::clear_server_port() {
  _impl_.server_port_ = 0;
}
inline int32_t GameClientConfig::_internal_server_port() const {
  return _impl_.server_port_;
}
inline int32_t GameClientConfig::server_port() const {
  // @@protoc_insertion_point(field_get:idlepb.GameClientConfig.server_port)
  return _internal_server_port();
}
inline void GameClientConfig::_internal_set_server_port(int32_t value) {
  
  _impl_.server_port_ = value;
}
inline void GameClientConfig::set_server_port(int32_t value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:idlepb.GameClientConfig.server_port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idlepb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gdd_5fglobal_2eproto
