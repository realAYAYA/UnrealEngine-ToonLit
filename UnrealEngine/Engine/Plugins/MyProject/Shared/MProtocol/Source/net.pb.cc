// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace idlepb {
PROTOBUF_CONSTEXPR PbRpcMessage::PbRpcMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sn_)*/int64_t{0}
  , /*decltype(_impl_.op_)*/0
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_.rpc_id_)*/uint64_t{0u}
  , /*decltype(_impl_.body_type_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PbRpcMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PbRpcMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PbRpcMessageDefaultTypeInternal() {}
  union {
    PbRpcMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PbRpcMessageDefaultTypeInternal _PbRpcMessage_default_instance_;
}  // namespace idlepb
static ::_pb::Metadata file_level_metadata_net_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_net_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_net_2eproto = nullptr;

const uint32_t TableStruct_net_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PbRpcMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PbRpcMessage, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PbRpcMessage, _impl_.sn_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PbRpcMessage, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PbRpcMessage, _impl_.rpc_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PbRpcMessage, _impl_.body_type_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PbRpcMessage, _impl_.body_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::idlepb::PbRpcMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::idlepb::_PbRpcMessage_default_instance_._instance,
};

const char descriptor_table_protodef_net_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnet.proto\022\006idlepb\"\237\001\n\014PbRpcMessage\022 \n\002"
  "op\030\001 \001(\0162\024.idlepb.RpcMessageOp\022\n\n\002sn\030\002 \001"
  "(\003\022(\n\nerror_code\030\003 \001(\0162\024.idlepb.RpcError"
  "Code\022\016\n\006rpc_id\030\004 \001(\004\022\024\n\014body_type_id\030\005 \001"
  "(\004\022\021\n\tbody_data\030\006 \001(\014*\\\n\014RpcMessageOp\022\027\n"
  "\023RpcMessageOp_Notify\020\000\022\030\n\024RpcMessageOp_R"
  "equest\020\001\022\031\n\025RpcMessageOp_Response\020\002*\265\001\n\014"
  "RpcErrorCode\022\023\n\017RpcErrorCode_Ok\020\000\022\030\n\024Rpc"
  "ErrorCode_Unknown\020\001\022\036\n\032RpcErrorCode_Unim"
  "plemented\020\002\022\030\n\024RpcErrorCode_Timeout\020\003\022\035\n"
  "\031RpcErrorCode_ReqDataError\020\004\022\035\n\031RpcError"
  "Code_RspDataError\020\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_net_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_net_2eproto = {
    false, false, 467, descriptor_table_protodef_net_2eproto,
    "net.proto",
    &descriptor_table_net_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_net_2eproto::offsets,
    file_level_metadata_net_2eproto, file_level_enum_descriptors_net_2eproto,
    file_level_service_descriptors_net_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_net_2eproto_getter() {
  return &descriptor_table_net_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_net_2eproto(&descriptor_table_net_2eproto);
namespace idlepb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcMessageOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[0];
}
bool RpcMessageOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[1];
}
bool RpcErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PbRpcMessage::_Internal {
 public:
};

PbRpcMessage::PbRpcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PbRpcMessage)
}
PbRpcMessage::PbRpcMessage(const PbRpcMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PbRpcMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_data_){}
    , decltype(_impl_.sn_){}
    , decltype(_impl_.op_){}
    , decltype(_impl_.error_code_){}
    , decltype(_impl_.rpc_id_){}
    , decltype(_impl_.body_type_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body_data().empty()) {
    _this->_impl_.body_data_.Set(from._internal_body_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sn_, &from._impl_.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.body_type_id_) -
    reinterpret_cast<char*>(&_impl_.sn_)) + sizeof(_impl_.body_type_id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PbRpcMessage)
}

inline void PbRpcMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.body_data_){}
    , decltype(_impl_.sn_){int64_t{0}}
    , decltype(_impl_.op_){0}
    , decltype(_impl_.error_code_){0}
    , decltype(_impl_.rpc_id_){uint64_t{0u}}
    , decltype(_impl_.body_type_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.body_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PbRpcMessage::~PbRpcMessage() {
  // @@protoc_insertion_point(destructor:idlepb.PbRpcMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PbRpcMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_data_.Destroy();
}

void PbRpcMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PbRpcMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PbRpcMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_data_.ClearToEmpty();
  ::memset(&_impl_.sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.body_type_id_) -
      reinterpret_cast<char*>(&_impl_.sn_)) + sizeof(_impl_.body_type_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbRpcMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.RpcMessageOp op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::idlepb::RpcMessageOp>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RpcErrorCode error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::idlepb::RpcErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 rpc_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rpc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 body_type_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.body_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes body_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_body_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PbRpcMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PbRpcMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.RpcMessageOp op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // int64 sn = 2;
  if (this->_internal_sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_sn(), target);
  }

  // .idlepb.RpcErrorCode error_code = 3;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error_code(), target);
  }

  // uint64 rpc_id = 4;
  if (this->_internal_rpc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_rpc_id(), target);
  }

  // uint64 body_type_id = 5;
  if (this->_internal_body_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_body_type_id(), target);
  }

  // bytes body_data = 6;
  if (!this->_internal_body_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_body_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PbRpcMessage)
  return target;
}

size_t PbRpcMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PbRpcMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body_data = 6;
  if (!this->_internal_body_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body_data());
  }

  // int64 sn = 2;
  if (this->_internal_sn() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sn());
  }

  // .idlepb.RpcMessageOp op = 1;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  // .idlepb.RpcErrorCode error_code = 3;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  // uint64 rpc_id = 4;
  if (this->_internal_rpc_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rpc_id());
  }

  // uint64 body_type_id = 5;
  if (this->_internal_body_type_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_body_type_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PbRpcMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PbRpcMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PbRpcMessage::GetClassData() const { return &_class_data_; }


void PbRpcMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PbRpcMessage*>(&to_msg);
  auto& from = static_cast<const PbRpcMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PbRpcMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body_data().empty()) {
    _this->_internal_set_body_data(from._internal_body_data());
  }
  if (from._internal_sn() != 0) {
    _this->_internal_set_sn(from._internal_sn());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  if (from._internal_rpc_id() != 0) {
    _this->_internal_set_rpc_id(from._internal_rpc_id());
  }
  if (from._internal_body_type_id() != 0) {
    _this->_internal_set_body_type_id(from._internal_body_type_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PbRpcMessage::CopyFrom(const PbRpcMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PbRpcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcMessage::IsInitialized() const {
  return true;
}

void PbRpcMessage::InternalSwap(PbRpcMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_data_, lhs_arena,
      &other->_impl_.body_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbRpcMessage, _impl_.body_type_id_)
      + sizeof(PbRpcMessage::_impl_.body_type_id_)
      - PROTOBUF_FIELD_OFFSET(PbRpcMessage, _impl_.sn_)>(
          reinterpret_cast<char*>(&_impl_.sn_),
          reinterpret_cast<char*>(&other->_impl_.sn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PbRpcMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::idlepb::PbRpcMessage*
Arena::CreateMaybeMessage< ::idlepb::PbRpcMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PbRpcMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
