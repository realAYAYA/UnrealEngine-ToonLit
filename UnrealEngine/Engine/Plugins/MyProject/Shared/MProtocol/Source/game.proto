// PB2BP: BP_FILE_NAME=ZPbGame
syntax = "proto3";
package idlepb;

import "defines.proto";
import "common.proto";

message Ping {
	int64 req_ticks = 1;
}
message Pong {
	int64 req_ticks = 1;
	int64 rsp_ticks = 2;
}

message DoGmCommand {
	string command = 1;
} 

message ReportError {
	string text = 1;
}

// 登录游戏	
message LoginGameReq {
	string account = 1;
	string client_version = 2;
}
message LoginGameAck {
	LoginGameRetCode ret = 1;
	RoleData role_data = 2;
	bool is_relogin = 3;  // 是否为重连 (即服务器上玩家对象已经存在)
	OfflineAwardSummary offline_award_summary = 4;
	SelfSeptInfo sept_info = 5;
}

// 刷新包裹数据
message RefreshInventoryData {
	repeated ItemData items = 1;
}

// 设置当前修炼方向
message SetCurrentCultivationDirectionReq {
	CultivationDirection dir = 1;
}
message SetCurrentCultivationDirectionAck {
	CultivationDirection dir = 1;
}

// 刷新当前修炼方向
message RefreshCurrentCultivationDirection {
	CultivationDirection dir = 1;
}

// 刷新等级经验数据
message RefreshCultivationRankData {
	RankData rank_data = 1;
	CultivationDirection dir = 2;  // 修炼方向
	int64 last_exp_cycle_timestamp = 3;  // 最后一次 ExpTick 的时间戳
}

// 刷新修炼数据
message RefreshCultivationData {
	CultivationData cultivation_data = 1;
	CultivationDirection dir = 2;  // 修炼方向
}

// 刷新货币
message RefreshCurrencyData {
	CurrencyData data = 1;
};

// 刷新今日计数
message RefreshDailyCounterData {
	RoleDailyCounter daily_counter = 1;
	RoleWeeklyCounter weekly_counter = 2;
}

// 刷新最后解锁到的秘境地图
message RefreshLastUnlockArenaId {
	int32 last_unlock_arena_id = 1;
}

// 刷新已解锁装备槽位列表
message RefreshUnlockedEquipmentSlots {
	repeated int32 slots = 1;
}

message UnlockEquipmentSlotReq {
	int32 index = 1;
}

message UnlockEquipmentSlotAck {
	bool ok = 1;
}

message ThunderTestRoundData {
	int32 round = 1;
	float damage = 2;  // 本轮伤害量
	float hp = 3;  // 剩余血量
	float mp = 4;  // 剩余蓝量
}

message ThunderTestData {
	float hp = 1;
	float mp = 2;
	repeated ThunderTestRoundData rounds = 3;
}

// 进行突破
message DoBreakthroughReq {
	int64 item_id = 1;  // 突破丹药的道具id
}
message DoBreakthroughAck {
	bool success = 1;  // 突破是否成功
	BreakthroughType old_type = 2;  // 本次突破类型
	BreakthroughType new_type = 3;  // 下次突破类型
	bool is_bottleneck = 4;  // 本次是否为突破瓶颈(已含特殊处理)
	ThunderTestData thunder_test_data = 5;  // 雷劫数据
}

// 刷新包裹数据
message RefreshItems {
	repeated ItemData items = 1;  // 添加或更改
	repeated int64 junks = 2;  // 待删除道具列表
	repeated SimpleItemData others = 3;  // 添加的其它不进包裹的道具(如：Token) 
	repeated ItemData quiet_items = 4;  // 静默添加或更改道具(不弹提示)
}

// 刷新临时包裹中的道具
message RefreshTemporaryPackageItems {
	repeated TemporaryPackageItem items = 1;	
	int32 total_num = 2;  // 包裹中道具总数量
	int64 last_extract_time = 3;
}

// 提取临时包裹中所有道具
message ExtractTemporaryPackageItemsReq {
}
message ExtractTemporaryPackageItemsAck {
}

// 获取临时包裹数据
message GetTemporaryPackageDataReq {
}
message GetTemporaryPackageDataAck {
	repeated TemporaryPackageItem items = 1;  // 道具列表
	int64 last_extract_time = 2;  // 最后一次提取的时间
}

// 获取秘境探索统计数据
message GetArenaExplorationStatisticalDataReq {
}
message GetArenaExplorationStatisticalDataAck {
	RoleArenaExplorationStatisticalData data = 1; // 统计数据
}

// 吐纳
message DoBreathingExerciseReq {
	float percet = 1;
}
message DoBreathingExerciseAck {
	DoBreathingExerciseResult result = 1;
}

// 一键合并吐纳
message OneClickMergeBreathingReq {
}
message OneClickMergeBreathingAck {
	repeated float exp = 1;// 每次吐纳经验
	repeated float ret = 2;// 每次吐纳倍率
}

// 请求公共修炼数据
message RequestCommonCultivationDataReq {
}
message RequestCommonCultivationDataAck {
	CommonCultivationData data = 1;
}

// 请求领取吐纳奖励
message ReceiveBreathingExerciseRewardReq {
	int32 index = 1;
}
message ReceiveBreathingExerciseRewardAck {
	bool ok = 1;
}

// 道具类型
enum UseItemResult {
	UIR_Success = 0;			// 成功
	UIR_UnKnown = 1;			// 未知
	UIR_BadParam = 2;			// 参数非法
	UIR_NotEnoughNum = 3;		// 数量不足
	UIR_InventoryIsFull = 4;	// 背包已满
	UIR_LowRank = 5;			// 境界不足
	UIR_BadDir = 6;				// 修炼方向不对
	UIR_BadConfig = 7;			// 配置出错
	UIR_UseNumIsFull = 8;		// 达到上限
	UIR_BadTime = 9;			// 时机不对
	UIR_BadData = 10;			// 内存错误
	UIR_BadType = 11;			// 类型不对
}

// 使用道具 (参数 id 和 cfg_id 二选一)
message UseItemReq {
	int64 id = 1;  // 通过道具唯一ID，使用指定道具
	int32 cfg_id = 2;  // 通过道具配置ID，使用一类道具
	int32 num = 3;	// 使用数量
}
message UseItemAck {
	UseItemResult error_code = 11;
}

// 使用自选宝箱
message UseSelectGiftReq {
	int64 uid = 1;
	int32 choose_id = 2;
	int32 num = 3;
}
message UseSelectGiftAck {
	UseItemResult error_code = 11;
}

message SellItemInfo {
	int64 item_id = 1;  // 道具唯一ID
	int32 num = 2;  // 数量
	bool ok = 3;  // 用于返回售卖是否成功
}

// 出售道具
message SellItemReq {
	repeated SellItemInfo items = 1;
}
message SellItemAck {
	repeated SellItemInfo items = 1;
}

// 刷新炼丹数据
message RefreshAlchemyData {
	RoleAlchemyData data = 1;
}

message NotifyAlchemyRefineResult {
	ItemQuality quality = 1;
	int32 item_cfg_id = 2;
	int32 item_num = 3;
	int32 exp = 4;
	AlchemyChanceType chance_type = 5;
}

// 刷新炼器数据
message RefreshForgeData {
	RoleForgeData data = 1;
}


message NotifyForgeRefineResult {
	ItemQuality quality = 1;
	int32 item_cfg_id = 2;
	int32 item_num = 3;
	int32 exp = 4;
	ForgeChanceType chance_type = 5;
}

// 穿装备
message EquipmentPutOnReq {
	int32 slot_idx = 1;
	uint64 item_id = 2;
}
message EquipmentPutOnAck {
	bool ok = 1;
}

// 脱装备
message EquipmentTakeOffReq {
	int32 slot_idx = 1;
}
message EquipmentTakeOffAck {
	bool ok = 1;
}

// 请求包裹
message GetInventoryDataReq {
}
message GetInventoryDataAck {
	repeated ItemData items = 1;
	repeated int32 unlocked_equipment_slots = 2;
	int32 inventory_space_num = 3;
}

message AlchemyRefineStartReq {
	int32 recipe_id = 1;  // 配方ID
	int32 material_id = 2;  // 材料ID
	int32 target_num = 3;  // 目标数量
}
message AlchemyRefineStartAck {
	bool ok = 1;
}

message AlchemyRefineCancelReq {
}

message AlchemyRefineCancelAck {
	bool ok = 1;
}

message AlchemyRefineExtractReq {
}

message AlchemyRefineExtractAck {
	bool ok = 1;
}

// 创建角色
message CreateCharacterReq {
	string hero_name = 1;
	CharacterModelConfig data = 2;
	int32 skeleton_type = 6;
	repeated int32 model_data = 7;
}
message CreateCharacterAck {
	bool ok = 1;
}

// 系统提示信息
message SystemNotice {
	int32 style = 1;  // 系统信息显示样式
	string text = 2;  // 文本
	string s1 = 10;
	string s2 = 11;
	string s3 = 12;
	int64 n1 = 20;
	int64 n2 = 21;
	int64 n3 = 22;
}

// 坊市 - 请求数据
message GetRoleShopDataReq {
}
message GetRoleShopDataAck {
	RoleShopData data = 1;
}

// 坊市 - 手动进货
message RefreshShopReq {
}
message RefreshShopAck {
	bool ok = 1;
	RoleShopData data = 2;
}

// 坊市 - 购买
message BuyShopItemReq {
	int32 index = 1;
}
message BuyShopItemAck {
	bool ok = 1;
}

// 天机阁 - 请求数据
message GetRoleDeluxeShopDataReq {
}
message GetRoleDeluxeShopDataAck {
	RoleDeluxeShopData data = 1;
}

// 天机阁 - 手动进货
message RefreshDeluxeShopReq {
}
message RefreshDeluxeShopAck {
	bool ok = 1;
	RoleDeluxeShopData data = 2;
}

// 天机阁 - 购买
message BuyDeluxeShopItemReq {
	int32 index = 1;
}
message BuyDeluxeShopItemAck {
	bool ok = 1;
}

// 天机阁 - 解锁
message UnlockDeluxeShopReq {
}
message UnlockDeluxeShopAck {
	bool ok = 1;
	RoleDeluxeShopData data = 2;	
}

// 通知天机阁解锁状态
message RefreshDeluxeShopUnlocked {
	bool is_unlocked = 1;	
}

// 尝试解锁指定秘境
message UnlockArenaReq {
	int32 arena_id = 1;
}
message UnlockArenaAck {
	bool ok = 1;
}

// 通知解锁挑战结果
message NotifyUnlockArenaChallengeResult {
	int32 arena_id = 1;  // 解锁目标秘境CfgId
	int32 door_id = 2;  // 传送门场景CfgId
	bool ok = 3;  // 是否成功
}

// 请求刷新角色战力
message RequestRefreshRoleCombatPower {
}

// 刷新角色战力
message NotifyRoleCombatPower {
	int64 old_value = 1;
	int64 new_value = 2;
	bool show_notice = 3;
}


// 系统聊天/战斗日志/
message GameSystemChatMessage {
	int32 chat_type = 1;      // 类型(目前只有战斗日志)
	bytes chat_content = 10;  // 聊天内容 
}

// 任务进度同步
message ReplicateQuestProgressChange {
	int32 quest_id = 1;
	QuestRequirementType type = 2;
	int32 target_id = 3;
	int32 amount = 4;
}

// 请求任务操作
message QuestOpReq {
	QuestOpType operation = 1; // 操作类型
	int32 quest_id = 2;
}
message QuestOpAck {
	bool ok = 1;
	repeated ReplicateQuestProgressChange init_progress = 2;// 接受任务后初始化任务进度
}

// 请求任务数据 -- 客户端任务存档
message GetQuestDataReq {
}
message GetQuestDataAck {
	RoleQuestData data = 1;
}

// 排行榜 - 请求玩家排行榜个人信息
message GetRoleLeaderboardDataReq {
	int64 role_id = 1;
}
message GetRoleLeaderboardDataAck {
	RoleLeaderboardData data = 1;
	int64 param_n1 = 11;	// 修为榜福泽排名修为均值
	repeated int32 leaderboard_rank = 12;// 各个榜单上的排名
}

// 请求排行榜预览，每个榜的榜一数据
message GetLeaderboardPreviewReq {
}
message GetLeaderboardPreviewAck {
	repeated LeaderboardListItem champions = 1;	// 角色属性榜第一
	repeated CharacterModelConfig role_model_configs = 2;// 角色头像，如果需要
	RoleLeaderboardData my_data = 3;	// 玩家自己的配置
	repeated ItemData equipments = 4;	// 装备榜，需要预览数据
	SeptDataOnLeaderboard sept = 5;		// 宗门榜第一

	int64 last_refresh_time = 6;// 上次榜单刷新时间
}

// 请求排行榜数据
message GetLeaderboardDataReq {
	LeaderboardType type = 1;
}
message GetLeaderboardDataAck {
	int64 last_refresh_time = 1;// 上次榜单刷新时间
	repeated LeaderboardListItem data = 2; // 前100名，如果玩家自己未进榜，则发送101个
	int32 my_rank = 6; // 玩家自己的排名
	string rank1_message = 7;
	repeated CharacterModelConfig role_model_configs = 9;	// 榜单玩家模型配置，头像

	repeated ItemData equipments = 10;						// 对应装备榜
	repeated ShanhetuRecord shanghetu_records = 11;			// 山河图记录
	
	repeated int32 top3_clicklike_num = 12; 				// 排行榜前三名点赞数

	repeated SeptDataOnLeaderboard septs = 13;				// 对应宗门榜
}

// 请求排行榜点赞
message LeaderboardClickLikeReq {
	int64 role_id = 1;
	LeaderboardType type = 2;
}
message LeaderboardClickLikeAck {
	bool ok = 1;
}

// 请求更新排行榜留言
message LeaderboardUpdateMessageReq {
	string new_message = 1;
}
message LeaderboardUpdateMessageAck {
	bool ok = 1;
}

// 请求镇妖塔挑战榜数据
message GetMonsterTowerChallengeListReq {
	int32 challenge_id = 1;
}
message GetMonsterTowerChallengeListAck {
	repeated LeaderboardListItem data = 1;
	repeated CharacterModelConfig model_configs = 2;// 榜单玩家模型配置，头像
	repeated int32 all_list_progress = 3;			// 所有榜单的完成进度
}

// 请求镇妖塔挑战榜奖励
message GetMonsterTowerChallengeRewardReq {
	int32 challenge_id = 1;
}
message GetMonsterTowerChallengeRewardAck {
	bool ok = 1;
}

// 请求福泽奖励
message GetFuZeRewardReq {
}
message GetFuZeRewardAck {
	bool ok = 1;
}

// 请求邮箱数据
message GetRoleMailDataReq {
	bool only_num = 1;
}
message GetRoleMailDataAck {
	int32 unread_mail_num = 1;
	repeated Mail mail_box = 2;// 邮件预览，不包含体积大的道具和装备数据
}

// 邮箱数据更新
message UpdateRoleMail {
}

// 请求邮件已读，同时发送邮件真实内容
message ReadMailReq {
	int32 index = 1;
}
message ReadMailAck {
	bool ok = 1;
	Mail mail = 2;// 包含了装备和道具数据的邮件全部内容
}

// 请求邮件领取
message GetMailAttachmentReq {
	int32 index = 1;
}
message GetMailAttachmentAck {
	MailOperation result = 1;
	Mail mail_data = 2;
}

// 请求邮件删除
message DeleteMailReq {
	int32 index = 1;
}
message DeleteMailAck {
	bool ok = 1;
}

// 请求邮件一键领取
message OneClickGetMailAttachmentReq {
}
message OneClickGetMailAttachmentAck {
	MailOperation result = 1;
	int32 unread_mail_num = 2;
	repeated Mail mail_box = 3;
}

// 请求邮件一键已读
message OneClickReadMailReq {
}
message OneClickReadMailAck {
	bool ok = 1;
}

// 请求邮件一键删除
message OneClickDeleteMailReq {
}
message OneClickDeleteMailAck {
	repeated int32 deleted_index = 1;
}

// 解锁指定模块
message UnlockFunctionModuleReq {
	FunctionModuleType type = 1;
}
message UnlockFunctionModuleAck {
	bool ok = 1;
}

// 刷新已经解锁模块列表
message NotifyUnlockedModuels {
	repeated int32 unlocked_modules = 1;
}

// 聊天消息更新
message UpdateChat {
	ChatMessageChannel channel = 1;
	ChatMessage chat_message = 2;
}

// 发送聊天消息
message SendChatMessageReq {
	uint64 role_id = 1;
	ChatMessageChannel channel = 2;
	string text = 3;
	ChatMessageType type = 4;// 消息类型，这会允许客户端命令服务器广播公告，这并不合适
}
message SendChatMessageAck {
	bool ok = 1;
}

// 请求聊天记录
message GetChatRecordReq {
}
message GetChatRecordAck {
	ChatData public_chat_record = 1;
	RolePrivateChatRecord private_chat_record = 2;// 私聊记录
	repeated ChatMessage sept_record = 3;	// 宗门聊天记录
}

// 请求删除私聊记录
message DeletePrivateChatRecordReq {
	uint64 role_id = 1;
}
message DeletePrivateChatRecordAck {
	bool ok = 1;
}

// 请求聊天记录已读
message ClearChatUnreadNumReq {
	uint64 role_id = 1;
}
message ClearChatUnreadNumAck {
}

// 请求玩家数据缓存
message GetRoleInfoCacheReq {
	repeated uint64 role_ids = 1;
}
message GetRoleInfoCacheAck {
	repeated SimpleRoleInfo role_infos = 1;
}

message ForgeRefineStartReq {
	int32 recipe_id = 1;  // 配方ID
	int32 material_id = 2;  // 材料ID
	int32 ext_material_id = 3;  // 辅材ID
	int32 target_num = 4;  // 目标数量
	bool auto_sell_poor = 5;  // 自动出售“下品”
	bool auto_sell_middle = 6;  // 自动出售“中品”
}
message ForgeRefineStartAck {
	bool ok = 1;
}

message ForgeRefineCancelReq {
}

message ForgeRefineCancelAck {
	bool ok = 1;
}

message ForgeRefineExtractReq {
}

message ForgeRefineExtractAck {
	bool ok = 1;
	repeated int64 items = 2;
}

message GetForgeLostEquipmentDataReq {
}
message GetForgeLostEquipmentDataAck {
	repeated LostEquipmentData data = 1;
}

message ForgeDestroyReq {
	int64 uid = 1;
}
message ForgeDestroyAck {
	bool ok = 1;
}

message ForgeFindBackReq {
	int32 uid = 1;
}
message ForgeFindBackAck {
	bool ok = 1;
}

// 请求秘药数据
message RequestPillElixirDataReq {
}
message RequestPillElixirDataAck {
	RolePillElixirData data = 1;
}

// 请求单种秘药数据
message GetOnePillElixirDataReq {
	int32 item_cfg_id = 1;
}
message GetOnePillElixirDataAck {
	PillElixirData data = 1;
}

// 请求修改秘药过滤配置
message RequestModifyPillElixirFilterReq {
	int32 limit_double = 1;
	int32 limit_exp = 2;
	int32 limit_property = 3;
}
message RequestModifyPillElixirFilterAck {
	bool ok = 1;
}

// 使用秘药报告
message UsePillElixirReport {
	int32 item_id = 1;
	int32 num = 2;
	float property_num = 3;
}

// 使用单颗秘药
message UsePillElixirReq {
	int32 item_id = 1;
}
message UsePillElixirAck {
	bool ok = 1;
}

// 一键使用秘药
message OneClickUsePillElixirReq {
}
message OneClickUsePillElixirAck {
	repeated UsePillElixirReport report = 1;
}

// 请求秘药兑换天机石
message TradePillElixirReq {
	int32 item_id = 1;
	int32 num = 2;
}
message TradePillElixirAck {
	bool ok = 1;
}

// 更新自动模式状态
message NotifyAutoModeStatus {
	bool enable = 1;
}

// 设置自动模块状态
message SetAutoMode {
	bool enable = 1;
}

// 请求强化装备
message ReinforceEquipmentReq {
	int64 id = 1;
}
message ReinforceEquipmentAck {
	bool ok = 1;
}

// 请求装备器纹
message QiWenEquipmentReq {
	int64 id = 1;
	int32 select_abc = 2;
	repeated int64 commit_materials = 3;
}
message QiWenEquipmentAck {
	bool ok = 1;
}

// 请求精炼装备
message RefineEquipmentReq {
	int64 id = 1;
}
message RefineEquipmentAck {
	bool ok = 1;
}

// 请求还原装备
message ResetEquipmentReq {
	repeated int64 id = 1;
}
message ResetEquipmentAck {
	bool ok = 1;
	repeated SimpleItemData items = 2;
}

// 请求继承装备
message InheritEquipmentReq {
	int64 equipment_from = 1;
	int64 equipment_to = 2;
}
message InheritEquipmentAck {
	bool ok = 1;
	repeated SimpleItemData items = 2;
}

// 请求锁定/解锁道具
message LockItemReq {
	int64 id = 1;
}
message LockItemAck {
	bool ok = 1;
}

// ========================================================

// 古宝已激活套装
message CollectionActivatedSuit {
	int32 id = 1;
	int32 index = 2;
	float combat_power = 3;
}

message GetRoleCollectionDataReq {
}
message GetRoleCollectionDataRsp {
	repeated CollectionEntry entries = 1;
	repeated CommonCollectionPieceData common_pieces = 2;
	repeated CollectionActivatedSuit actived_suite = 3;
	repeated int32 draw_award_done_histories = 4;  // 已领取奖励的渊源
	repeated int32 can_award_histories = 5;  // 可领取奖励的渊源
	repeated CollectionZoneActiveAwardData zone_active_awards = 6;  // 已领取到累计收集奖励
	int64 next_reset_enhance_ticks = 7;  // 下次可重置强化的时间
}

// 古宝操作
enum RoleCollectionOpType {
	RCOT_PieceFusion = 0;  // 碎片合成
	RCOT_UpgradeLevel = 1;  // 注灵
	RCOT_UpgradeStar = 2;  // 升星
	RCOT_DrawHistoryAward = 3;  // 领取渊源奖励
	RCOT_DrawZoneActiveAward = 4;  // 领取累计收集奖励
	RCOT_ResetEnhance = 5;  // 重置强化
}

message RoleCollectionOpReq {
	RoleCollectionOpType op_type = 1;
	int32 id = 2;
	repeated MapValueInt32 consume_list = 3;
	bool is_preview = 4;
}
message RoleCollectionOpAck {
	RoleCollectionOpType op_type = 1;
	bool ok = 2;
	repeated SimpleItemData items = 3;
}

message NotifyRoleCollectionData {
	CollectionEntry entry = 1;
}

message NotifyCommonCollectionPieceData {
	repeated CommonCollectionPieceData common_pieces = 1;
}

message NotifyCollectionActivatedSuit {
	repeated CollectionActivatedSuit actived_suite = 1;
}

message ShareSelfRoleCollectionReq {
	int32 id = 1;
}
message ShareSelfRoleCollectionRsp {
	int64 share_id = 1;
}

message GetShareRoleCollectionDataReq {
	int64 share_id = 1;
}
message GetShareRoleCollectionDataRsp {
	bool ok = 1;
	CollectionEntry collection_data = 2;
}

message NotifyRoleCollectionHistories {
	repeated int32 draw_award_done_histories = 1;  // 已领取奖励的渊源
	repeated int32 can_award_histories = 2;  // 可领取奖励的渊源
}

message NotifyCollectionZoneActiveAwards {
	repeated CollectionZoneActiveAwardData zone_active_awards = 1;  // 已领取到累计收集奖励
}

message NotifyRoleCollectionNextResetEnhanceTicks {
	int64 next_reset_enhance_ticks = 1;
}

// ========================================================

message RoleBattleHistoryList {
	repeated RoleBattleInfo entries = 1;
}

// 切磋挑战结束
message NotifySoloArenaChallengeOver {
	bool win = 1;
	BattleInfo info = 2;  // 对战信息提要
}

// 发起切磋
message SoloArenaChallengeReq {
	int64 target_role_id = 1;
}
message SoloArenaChallengeAck {
	bool ok = 1;	
}

// 请求快速结束
message SoloArenaQuickEndReq {
	bool is_exit = 1;  // 是否为中途退出
}
message SoloArenaQuickEndAck {
}

// 获取切磋历史列表
message GetSoloArenaHistoryListReq {
	SoloType type = 1;
}
message GetSoloArenaHistoryListAck {
	RoleBattleHistoryList data = 1;
}

message ReplaySoloArenaHistoryReq {
	uint64 history_world_id = 1;
}
message ReplaySoloArenaHistoryAck {
	bool ok = 1;
	CompressedData data = 2;
}

// ========================================================

message GetBattleHistoryInfoReq {
	uint64 history_world_id = 1;
}
message GetBattleHistoryInfoAck {
	bool ok = 1;
	BattleInfo info = 2;	
}

// ========================================================

// 请求客户端进入客户端地图
message NotifyEnterOpenClientWorld {
	int32 world_cfg_id = 1;
}

// 更新镇妖塔数据
message NotifyMonsterTowerData {
	RoleMonsterTowerData data = 1;
}

// 镇妖塔挑战结束
message NotifyMonsterTowerChallengeOver {
	int32 floor = 1;  // 挑战层数
	bool win = 2;  // 是否挑战成功
}

// 挑战镇妖塔
message MonsterTowerChallengeReq {

}
message MonsterTowerChallengeAck {
	
}

// 领取镇妖塔挂机奖励
message MonsterTowerDrawIdleAwardReq {

}
message MonsterTowerDrawIdleAwardAck {
	
}

// 镇妖塔闭关
message MonsterTowerClosedDoorTrainingReq {

}
message MonsterTowerClosedDoorTrainingAck {
	
}

// 请求快速结束
message MonsterTowerQuickEndReq {
	bool is_exit = 1;  // 是否为中途退出
}
message MonsterTowerQuickEndAck {
}


// 更新战斗模式数据
message NotifyFightModeData {
	RoleFightModeData data = 1;
}


enum SetFightModeAckErrorCode {
	SetFightModeAckErrorCode_Ok = 0;  // 成功
	SetFightModeAckErrorCode_Other = 1;  // 其它错误
	SetFightModeAckErrorCode_RankInvalid = 2;  // 等级错误
	SetFightModeAckErrorCode_ModeInvalid = 3;  // 该模式不能在当前地图使用
	SetFightModeAckErrorCode_FightTime = 4;  // 战斗时间错误
}

// 设置战斗模式
message SetFightModeReq {
	FightMode mode = 1;
}
message SetFightModeAck {
	bool ok = 1;
	SetFightModeAckErrorCode error_code = 2;
}

// 更新背包空间
message NotifyInventorySpaceNum {
	int32 num = 1;
}

// 通知背包已经满，道具经邮件发送
message NotifyInventoryFullMailItem {
}

// 更新聚灵阵等级
message NotifyQiCollectorRank {
	int32 rank = 1;
}

// 升级聚灵阵
message UpgradeQiCollectorReq {
}
message UpgradeQiCollectorAck {
	bool ok = 1;
}

// 请求玩家的游戏数值数据
message GetRoleAllStatsReq {
}
message GetRoleAllStatsAck {
	GameStatsAllModuleData all_stats_data = 1;
}

// 请求玩家山河图数据
message GetShanhetuDataReq {
}
message GetShanhetuDataAck {
	RoleShanhetuData data = 1;
}

// 请求修改山河图使用配置
message SetShanhetuUseConfigReq {
	bool auto_skip_green = 1;
	bool auto_skip_blue = 2;
	bool auto_skip_perpo = 3;
	bool auto_skip_gold = 4;
	bool auto_skip_red = 5;

	int32 auto_select = 6;
}
message SetShanhetuUseConfigAck {
	bool ok = 1;
}

// 请求使用山河图
message UseShanhetuReq {
	int32 item_id = 1;
	bool skip = 2;
	int32 num = 3;// 使用数量大于1时判定为批量使用
}
message UseShanhetuAck {
	bool ok = 1;
	repeated SimpleItemData items = 2;	// 跳过使用，直接返回一组道具结果
	ShanhetuMap map = 3;				// 不跳过使用，则返回一张地图			
}

// 探索山河图
message StepShanhetuReq {
	int32 choose_event = 1;// 如果有事件，选择
}
message StepShanhetuAck {
	bool done = 1;				// 是否探索完成
	int32 current_row = 2;		// 当前进度，如果进度不变则代表探索失败
	ShanhetuRecord record = 3;	// 当前记录
}

// 请求山河图记录
message GetShanhetuUseRecordReq {
	int64 role_id = 1;
	int64 uid = 2;
}
message GetShanhetuUseRecordAck {
	ShanhetuRecord record = 1;
}

// 设置锁定方式
message SetAttackLockTypeReq {
	AttackLockType type = 1;
}
message SetAttackLockTypeAck {
	bool ok = 1;
}


// 设置取消锁定方式
message SetAttackUnlockTypeReq {
	AttackUnlockType type = 1;
}
message SetAttackUnlockTypeAck {
	bool ok = 1;
}

// 设置是否显示解锁按钮
message SetShowUnlockButtonReq {
	bool enable = 1;
}
message SetShowUnlockButtonAck {
	bool ok = 1;
}

message RefreshRoleNormalSetting {
	RoleNormalSettings settings = 1;
}

// 获取用户变量内容
message GetUserVarReq {
	string var_name = 1;
}
message GetUserVarRsp {
	int32 var_value = 1;
}

// 获取多个用户变量内容
message GetUserVarsReq {
	repeated string var_name = 1;
}
message GetUserVarsRsp {
	repeated StringKeyInt32ValueEntry data = 1;
}

// 设置用户变量值
message SetUserVar {
	string var_name = 1;
	int32 var_value = 2;
}

// 删除用户变量
message DelUserVar {
	string var_name = 1;
}


message ShareSelfItemReq {
	int64 item_id = 1;
}
message ShareSelfItemRsp {
	int64 share_id = 1;
}

message ShareSelfItemsReq {
	repeated int64 item_id = 1;
}
message ShareSelfItemsRsp {
	repeated Int64Pair share_id = 1;
}

message GetShareItemDataReq {
	int64 share_id = 1;
}
message GetShareItemDataRsp {
	bool ok = 1;
	ItemData item_data = 2;
}

// 福缘功能相关

// 请求玩家福缘数据
message GetChecklistDataReq {
}
message GetChecklistDataAck {
	RoleChecklistData data = 1;
}

// 通知福缘功能，有任务完成
message NotifyChecklist {
}

// 福缘操作，提交任务、领取奖励
message ChecklistOpReq {
	bool sumbmit_or_receive = 1;	// 提交任务或领取奖励
	bool day_or_week = 2;			// 仅在领取奖励时有效
}
message ChecklistOpAck {
	bool ok = 1;
	RoleChecklistData data = 2;
}

// 福缘操作，提交任务进度、领取奖励
message UpdateChecklistReq {
	int32 type = 1;
}
message UpdateChecklistAck {
	bool ok = 1;
}

// 获取玩家通用道具兑换数据
message GetCommonItemExchangeDataReq {
	int32 cfg_id = 1;
}
message GetCommonItemExchangeDataAck {
	int32 today_exchange_num = 1;
}

// 请求兑换通用道具
message ExchangeCommonItemReq {
	int32 cfg_id = 1;
	int32 num = 2;
}
message ExchangeCommonItemAck {
	bool ok = 1;
	int32 out_num = 2;
}

// 请求合成通用道具
message SynthesisCommonItemReq {
	int32 cfg_id = 1;
	int32 num = 2;
}
message SynthesisCommonItemAck {
	bool ok = 1;
}

// 请求玩家宗门商店数据
message GetRoleSeptShopDataReq {
}
message GetRoleSeptShopDataAck {
	RoleSeptShopData data = 1;
}

// 请求玩家宗门事务数据
message GetRoleSeptQuestDataReq {
}
message GetRoleSeptQuestDataAck {
	RoleSeptQuestData data = 1;
}

// 请求兑换宗门商店道具
message BuySeptShopItemReq {
	int32 id = 1;
	int32 num = 2;
}
message BuySeptShopItemAck {
	bool ok = 1;
}

message ReqRoleSeptQuestOpReq {
	int32 uid = 1;
}
message ReqRoleSeptQuestOpAck {
	bool ok = 1;
}

message RefreshSeptQuestReq {
}
message RefreshSeptQuestAck {
	RoleSeptQuestData data = 1;
}

message ReqSeptQuestRankUpReq {
}
message ReqSeptQuestRankUpAck {
	bool ok = 1;
}

message GetGongFaDataReq {
}
message GetGongFaDataAck {
	RoleGongFaData data = 1;
}

message GongFaOpReq {
	int32 gongfa_id = 1;
}
message GongFaOpAck {
	bool ok = 1;
	GongFaData gongfa_data = 2;
}

message ActivateGongFaMaxEffectReq {
	int32 cfg_id = 1;
}
message ActivateGongFaMaxEffectAck {
	bool ok = 1;
}

message ReceiveFuZengRewardsReq {
	int32 cfg_id = 1;
	FuZengType type = 2;
}
message ReceiveFuZengRewardsAck {
	bool ok = 1;
	FuZengData data = 2;
}

message GetRoleFuZengDataReq {
}
message GetRoleFuZengDataAck {
	RoleFuZengData data = 1;
}

// 通知福缘功能，有任务完成
message NotifyFuZeng {
	FuZengType type = 1;
	int64 num = 2;
	int32 cfg_id = 3;
}

// 宝藏阁相关

message GetRoleTreasuryDataReq {
	bool dirty_flag = 1;
}
message GetRoleTreasuryDataAck {
	RoleTreasurySaveData data = 1;
}

// 请求开箱
message OpenTreasuryChestReq {
	int32 chest_type = 1;	// 开箱类型
	int32 num = 2;			// 开启次数
}
message OpenTreasuryChestAck {
	bool ok = 1;
}

// 请求一键全开箱
message OneClickOpenTreasuryChestReq {
}
message OneClickOpenTreasuryChestAck {
	bool ok = 1;
	repeated int32 today_open_times = 2;// 返回新的开箱次数
	repeated int32 guarantee_count = 3;// 返回新的保底次数
}

// 请求探索卡池
message OpenTreasuryGachaReq {
	int32 gacha_type = 1;	// 卡池类型
	int32 num = 2;			// 探索次数
}
message OpenTreasuryGachaAck {
	bool ok = 1;
	bool free = 2;// 是否消耗的免费次数
}

// 请求刷新古修商店
message RefreshTreasuryShopReq {
}
message RefreshTreasuryShopAck {
	bool ok = 1;
	repeated TreasuryShopItem items = 2;
}

// 请求古修商店中购买
message TreasuryShopBuyReq {
	int32 index = 1;
}
message TreasuryShopBuyAck {
	bool ok = 1;
}

// 获取生涯计数器数据
message GetLifeCounterDataReq {
}
message GetLifeCounterDataAck {
	RoleLifeCounterData data = 1;
}

message UpdateLifeCounter {
	int32 function_type = 1;
	int32 target_id = 2;
	int64 new_num = 3;
}

// 进行任务对战
message DoQuestFightReq {
	int32 quest_id = 1;
}
message DoQuestFightAck {
	bool ok = 1;
}

// 请求任务对战快速结束
message QuestFightQuickEndReq {
	bool is_exit = 1;  // 是否为中途退出
}
message QuestFightQuickEndAck {
}

// 任务对战挑战结束
message NotifyQuestFightChallengeOver {
	int32 quest_id = 1;	// 挑战任务id
	bool win = 2;		// 是否挑战成功
}

// 请求外观数据
message GetAppearanceDataReq {
}
message GetAppearanceDataAck {
	RoleAppearanceData data = 1;
}

// 请求添加外观（使用包含外观的礼包道具）
message AppearanceAddReq {
	int32 item_id = 1;
}
message AppearanceAddAck {
	bool ok = 1;
}

// 请求激活外观
message AppearanceActiveReq {
	int32 group_id = 1;
}
message AppearanceActiveAck {
	bool ok = 1;
}

// 请求穿戴外观
message AppearanceWearReq {
	int32 group_id = 1;
}
message AppearanceWearAck {
	bool ok = 1;
}

// 请求修改外形
message AppearanceChangeSkTypeReq {
	int32 sk_type = 1;
}
message AppearanceChangeSkTypeAck {
	bool ok = 1;
}

// 请求外观商店购买
message AppearanceBuyReq {
	int32 shop_index = 1;
	int32 item_index = 2;
}
message AppearanceBuyAck {
	bool ok = 1;
}

// 请求秘境探索数据
message GetArenaCheckListDataReq {
}
message GetArenaCheckListDataAck {
	RoleArenaCheckListData data = 1;
}

// 请求提交秘境探索事件
message ArenaCheckListSubmitReq {
	int32 check_list_id = 1;
}

message ArenaCheckListSubmitAck {
	bool ok = 1;
	ArenaCheckListData data = 2;
}

// 请求提交秘境探索奖励
message ArenaCheckListRewardSubmitReq {
	int32 reward_id = 1;
}

message ArenaCheckListRewardSubmitAck {
	bool ok = 1;
	ArenaCheckListRewardData data = 2;
}

// 发起剿灭副本
message DungeonKillAllChallengeReq {
	int32 dungeon_uid_id = 1;
}
message DungeonKillAllChallengeAck {
	bool ok = 1;
}

// 请求剿灭副本快速结束
message DungeonKillAllQuickEndReq {
	bool is_exit = 1;  // 是否为中途退出
}
message DungeonKillAllQuickEndAck {
	bool ok = 1;
}

// 剿灭副本挑战结束
message NotifyDungeonKillAllChallengeOver {
	int32 uid = 1;  // 挑战Id
	bool win = 2;  // 是否挑战成功
}

// 通知剿灭副本当前第几波
message NotifyDungeonKillAllChallengeCurWaveNum {
	int32 uid = 1;  // 挑战Id
	int32 curnum = 2; // 当前波数
	int32 maxnum = 3; // 最大波数
}

// 询问剿灭副本是否完成
message DungeonKillAllDataReq {
	int32 ask_uid = 1;
}

message DungeonKillAllDataAck {
	bool ok = 1;
}

// 发起生存副本
message DungeonSurviveChallengeReq {
	int32 dungeon_uid = 1;
}
message DungeonSurviveChallengeAck {
	bool ok = 1;
}

// 请求生存副本快速结束
message DungeonSurviveQuickEndReq {
	bool is_exit = 1;  // 是否为中途退出
}
message DungeonSurviveQuickEndAck {
	bool ok = 1;
}

// 生存副本挑战结束
message NotifyDungeonSurviveChallengeOver {
	int32 uid = 1;  // 挑战Id
	bool win = 2;  // 是否挑战成功
}

// 通知生存副本当前第几波
message NotifyDungeonSurviveChallengeCurWaveNum {
	int32 uid = 1;  // 挑战Id
	int32 curnum = 2; // 当前波数
	int32 maxnum = 3; // 最大波数
}

// 询问生存副本是否完成
message DungeonSurviveDataReq {
	int32 ask_uid = 1;
}

message DungeonSurviveDataAck {
	bool ok = 1;
}

// 请求进入镇魔深渊
message RequestEnterSeptDemonWorldReq {
	int64 sept_id = 1;
}
message RequestEnterSeptDemonWorldAck {
	bool ok = 1;
}

// 请求退出镇魔深渊
message RequestLeaveSeptDemonWorldReq {
	int64 sept_id = 1;
}
message RequestLeaveSeptDemonWorldAck {
	bool ok = 1;
}

// 请求镇魔深渊相关数据
message RequestSeptDemonWorldDataReq {
	int64 sept_id = 1;
}

message RequestSeptDemonWorldDataAck {
	SeptDemonWorldData data = 1;
}

// 请求在镇魔深渊待的最后时间点
message RequestInSeptDemonWorldEndTimeReq {
}

message RequestInSeptDemonWorldEndTimeAck {
	int64 end_time = 1;
}

// 药园数据请求
message GetFarmlandDataReq {
}
message GetFarmlandDataAck {
	RoleFarmlandData data = 1;
}

// 药园地块解锁
message FarmlandUnlockBlockReq {
	int32 x = 1;
	int32 y = 2;
}
message FarmlandUnlockBlockAck {
	bool ok = 1;
}

// 药园种植或铲除
message FarmlandPlantSeedReq {
	int32 item_id = 1;	// 道具配置id
	int32 x = 2;		// 种植坐标
	int32 y = 3;
	int32 rotation = 4;	// 旋转摆放

	bool is_delete = 5;	// 改为铲除药植请求
}
message FarmlandPlantSeedAck {
	FarmlandPlantData plant_data = 2;
}

// 药园浇灌
message FarmlandWateringReq {
	int32 num = 1;
}
message FarmlandWateringAck {
	int32 totaol_speed_up = 1;
}

// 药园催熟
message FarmlandRipeningReq {
	int32 plant_uid = 1;
	int32 item_id = 2;	// 催熟道具id
	int32 num = 3;		// 使用数量

	int32 one_click = 4;// 一键催熟
	repeated FarmlandManagementInfo one_click_plants = 5;
}
message FarmlandRipeningAck {
	bool ok = 1;
	repeated FarmlandPlantData result = 2;
	repeated SimpleItemData used_ripe_items = 3;// 用掉的催熟道具情况
}

// 药园收获
message FarmlandHarvestReq {
	repeated int32 plant_ids = 1;
	bool auto_harvest_same_class = 2;
}
message FarmlandHarvestAck {
	bool ok = 1;
	repeated SimpleItemData items = 2;
	repeated int32 op_success_plant_id = 3;// 收获成功的药株id
	repeated FarmlandPlantData continue_seeds = 4;// 续种的新数据
}

// 药园药童升级
message FarmerRankUpReq {
}
message FarmerRankUpAck {
	bool ok = 1;
}

// 药园打理
message FarmlandSetManagementReq {
	repeated FarmlandManagementInfo plans = 1;
}
message FarmlandSetManagementAck {
	bool ok = 1;
}

// 药园状态数据，自动收获，药童好感动刷新
message UpdateFarmlandStateReq {
}
message UpdateFarmlandStateAck {
	int32 farmer_friendship_exp = 1;
	repeated int32 auto_harvest_plants = 2;// 自动收获的植株
	repeated FarmlandPlantData continue_seeds = 3;// 续种的新数据
	repeated SimpleItemData harvest_items = 4;// 自动收获的道具
}


// 请求玩家个人信息 Todo 旧接口
message GetRoleInfoReq {
	uint64 role_id = 1;
}
message GetRoleInfoAck {
	RoleInfo role_info = 1;
	bool ok = 2;
}

// 获取道友功能数据
message GetRoleFriendDataReq {
}
message GetRoleFriendDataAck {
	RoleFriendData data = 1;
	repeated SimpleRoleInfo role_infos = 11;// 用于显示的角色数据缓存
}

// 发起 好友申请/或移除好友 拉黑/或移除拉黑 成为道侣或解除道侣
message FriendOpReq {
	int64 role_id = 1;
	FriendRelationshipType op_type = 2;// 枚举值除了None无用处，其它分别为发起好友请求，拉黑，结义操作
	bool reverse_op = 3;// 是否为反向操作, 即删除好友，解除拉黑，解除结义
}
message FriendOpAck {
	bool ok = 1;
	FriendRelationshipType relationship_ab = 2;
	FriendRelationshipType relationship_ba = 3;
}

// 发起 好友申请/或移除好友 拉黑/或移除拉黑 成为道侣或解除道侣
message ReplyFriendRequestReq {
	int64 role_id = 1;
	bool agree = 2;
	bool one_click = 3;
}
message ReplyFriendRequestAck {
	bool ok = 1;
	repeated int32 relationship_ba = 2;// 操作失败的角色与玩家的关系
	repeated int64 failed_ids = 3;// 操作失败的角色id
}

// 查找玩家（道友功能）
message FriendSearchRoleInfoReq {
	string role_name = 1;
}
message FriendSearchRoleInfoAck {
	repeated SimpleRoleInfo role_infos = 2;// 用于显示的角色数据缓存
}

// 通知道友功能消息,视玩家数据进行解析
message NotifyFriendMessage {
	SimpleRoleInfo role_info = 1;
	bool is_update_state = 2;			// 1.上线状态更新消息
	bool b_refused = 3;					// 2.好友申请被拒绝消息
	FriendListItem friend_event = 4;	// 3.好友关系变更事件消息（收到请求|绝交、被拉黑、成为好友|道缘值更新）
	bool online = 5;
}


// 获取化身数据
message GetRoleAvatarDataReq {
	bool draw_this_time = 1;// 触发时间间隔进行物资抽取结算
}
message GetRoleAvatarDataAck {
	RoleAvatarData data = 1;
}

// 派遣化身
message DispatchAvatarReq {
	int32 world_index = 1;
}
message DispatchAvatarAck {
	RoleAvatarData data = 1;
}

// 化身升级
message AvatarRankUpReq {
}
message AvatarRankUpAck {
	RoleAvatarData data = 1;
}

// 收获化身包裹道具
message ReceiveAvatarTempPackageReq {
}
message ReceiveAvatarTempPackageAck {
	RoleAvatarData data = 1;
}

// 请求角色传记数据
message GetRoleBiographyDataReq {
}
message GetRoleBiographyDataAck {
	RoleBiographyData data = 1;
}

// 请求领取传记奖励
message ReceiveBiographyItemReq {
	repeated int32 cfg_ids = 1;// 一个章节下的Id
}
message ReceiveBiographyItemAck {
	bool ok = 1;
}

// 通知传记功能消息（史记或纪念）
message NotifyBiographyMessage {
}

// 请求史记记数据
message GetBiographyEventDataReq {
}
message GetBiographyEventDataAck {
	repeated BiographyEventLeaderboardList biography_lists = 1;// 史记排行榜
	ServerCounterData server_counter_data = 2;// 服务器计数器
}

// 请求领取史记奖励
message ReceiveBiographyEventItemReq {
	int32 cfg_id = 1;
}
message ReceiveBiographyEventItemAck {
	repeated SimpleItemData items = 1;
}

// 请求上传纪念日志
message AddBiographyRoleLogReq {
	BiographyRoleLog log = 1;
}
message AddBiographyRoleLogAck {
	BiographyRoleLog log = 1;
}

// 请求仙阁商店数据
message GetRoleVipShopDataReq {
}
message GetRoleVipShopDataAck {
	RoleVipShopData data = 1;
}

// 请求仙阁商店购买
message VipShopBuyReq {
	int32 index = 1;
	int32 num = 2;
}
message VipShopBuyAck {
	bool ok = 1;
}