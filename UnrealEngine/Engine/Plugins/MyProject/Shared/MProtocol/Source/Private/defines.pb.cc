// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: defines.proto

#include "defines.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace idlepb {
}  // namespace idlepb
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_defines_2eproto[70];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_defines_2eproto = nullptr;
const uint32_t TableStruct_defines_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_defines_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rdefines.proto\022\006idlepb*m\n\013ItemQuality\022\013"
  "\n\007EQ_None\020\000\022\014\n\010EQ_White\020\001\022\014\n\010EQ_Green\020\002\022"
  "\013\n\007EQ_Blue\020\003\022\r\n\tEQ_Purple\020\004\022\r\n\tEQ_Orange"
  "\020\005\022\n\n\006EQ_Red\020\006*\215\001\n\014ItemShowType\022\025\n\021ItemS"
  "howType_None\020\000\022\032\n\026ItemShowType_Equipment"
  "\020\001\022\025\n\021ItemShowType_Pill\020\002\022\031\n\025ItemShowTyp"
  "e_Material\020\003\022\030\n\024ItemShowType_Special\020\004*\263"
  "\005\n\010ItemType\022\021\n\rItemType_None\020\000\022\024\n\020ItemTy"
  "pe_ExpPill\020\001\022\023\n\017ItemType_Weapon\020\002\022\025\n\021Ite"
  "mType_CLOTHING\020\003\022\024\n\020ItemType_JEWELRY\020\004\022\033"
  "\n\027ItemType_SkillEquipment\020\005\022\030\n\024ItemType_"
  "RecoverPill\020\006\022\026\n\022ItemType_SkillBook\020\007\022\027\n"
  "\023ItemType_SecretPill\020\010\022\025\n\021ItemType_AttrP"
  "ill\020\t\022\035\n\031ItemType_BreakthroughPill\020\n\022\031\n\025"
  "ItemType_PillMaterial\020\013\022\033\n\027ItemType_Weap"
  "onMaterial\020\014\022\027\n\023ItemType_PillRecipe\020\r\022\030\n"
  "\024ItemType_EquipRecipe\020\016\022\032\n\026ItemType_Forg"
  "eMaterial\020\017\022\030\n\024ItemType_GiftPackage\020\020\022\032\n"
  "\026ItemType_SpaceMaterial\020\021\022\021\n\rItemType_Se"
  "ed\020\022\022\025\n\021ItemType_ShanHeTu\020\024\022\022\n\016ItemType_"
  "QiWen\020\025\022\023\n\017ItemType_QiLing\020\026\022\022\n\016ItemType"
  "_GuBao\020\027\022\027\n\023ItemType_GuBaoPiece\020\030\022\030\n\024Ite"
  "mType_QiLingSkill\020\031\022\034\n\030ItemType_ZhuLingM"
  "eterial\020\034\022\025\n\021ItemType_FarmRipe\020$\022\022\n\016Item"
  "Type_Token\020d*\336\001\n\021EquipmentMainType\022\032\n\026Eq"
  "uipmentMainType_None\020\000\022\034\n\030EquipmentMainT"
  "ype_Weapon\020\001\022\036\n\032EquipmentMainType_CLOTHI"
  "NG\020\002\022\035\n\031EquipmentMainType_JEWELRY\020\003\022\'\n#E"
  "quipmentMainType_AttSkillEquipment\020\004\022\'\n#"
  "EquipmentMainType_DefSkillEquipment\020\005*a\n"
  "\020PerkValueAddType\022\031\n\025PerkValueAddType_No"
  "ne\020\000\022\030\n\024PerkValueAddType_Add\020\001\022\030\n\024PerkVa"
  "lueAddType_Sub\020\002*\307\003\n\023PerkValueEffectType"
  "\022\034\n\030PerkValueEffectType_None\020\000\022/\n+PerkVa"
  "lueEffectType_EquipmentBasicAttribute\020\001\022"
  "\036\n\032PerkValueEffectType_Attack\020\002\022\034\n\030PerkV"
  "alueEffectType_HpMp\020\003\022\037\n\033PerkValueEffect"
  "Type_Defence\020\004\022&\n\"PerkValueEffectType_Cr"
  "itAndCritDef\020\005\022!\n\035PerkValueEffectType_Cr"
  "itCoeff\020\006\022)\n%PerkValueEffectType_Strengt"
  "hIntellect\020\007\022&\n\"PerkValueEffectType_Reco"
  "verPercent\020\010\022\037\n\033PerkValueEffectType_Agil"
  "ity\020\t\022 \n\034PerkValueEffectType_DodgeHit\020\n\022"
  "!\n\035PerkValueEffectType_MoveSpeed\020\013*\323\004\n\014P"
  "erkIdConsts\022\025\n\021PerkIdConsts_None\020\000\022(\n$Pe"
  "rkIdConsts_EquipmentBasicAttribute\020\001\022\032\n\026"
  "PerkIdConsts_MagAttack\020\002\022\032\n\026PerkIdConsts"
  "_PhyAttack\020\003\022\023\n\017PerkIdConsts_Hp\020\004\022\023\n\017Per"
  "kIdConsts_Mp\020\005\022\033\n\027PerkIdConsts_PhyDefenc"
  "e\020\006\022\033\n\027PerkIdConsts_MagDefence\020\007\022\025\n\021Perk"
  "IdConsts_Crit\020\010\022\032\n\026PerkIdConsts_CritCoef"
  "f\020\t\022\031\n\025PerkIdConsts_Strength\020\013\022\032\n\026PerkId"
  "Consts_Intellect\020\014\022!\n\035PerkIdConsts_MpRec"
  "overPercent\020\r\022!\n\035PerkIdConsts_HpRecoverP"
  "ercent\020\016\022\030\n\024PerkIdConsts_Agility\020\017\022\031\n\025Pe"
  "rkIdConsts_MagDodge\020\020\022\031\n\025PerkIdConsts_Ph"
  "yDodge\020\021\022\030\n\024PerkIdConsts_CritDef\020\022\022\027\n\023Pe"
  "rkIdConsts_PhyHit\020\023\022\027\n\023PerkIdConsts_MagH"
  "it\020\024\022\032\n\026PerkIdConsts_MoveSpeed\020\031*\303\001\n\022Equ"
  "ipmentSlotState\022\035\n\031EquipmentSlotState_Lo"
  "cked\020\000\022\037\n\033EquipmentSlotState_ToUnlock\020\001\022"
  "$\n EquipmentSlotState_UnlockNoEquip\020\002\022\'\n"
  "#EquipmentSlotState_UnlockEquipInBag\020\003\022\036"
  "\n\032EquipmentSlotState_Slotted\020\004*@\n\025Equipm"
  "entSlotWearType\022\022\n\016ESWT_Equipment\020\000\022\023\n\017E"
  "SWT_Collection\020\001*i\n\021AlchemyChanceType\022\034\n"
  "\030AlchemyChanceType_Normal\020\000\022\033\n\027AlchemyCh"
  "anceType_Small\020\001\022\031\n\025AlchemyChanceType_Bi"
  "g\020\002*\?\n\010PillType\022\021\n\rPillType_None\020\000\022\017\n\013Pi"
  "llType_Hp\020\001\022\017\n\013PillType_Mp\020\002*@\n\024Cultivat"
  "ionDirection\022\013\n\007CD_None\020\000\022\r\n\tCD_Physic\020\001"
  "\022\014\n\010CD_Magic\020\002*J\n\020BreakthroughType\022\013\n\007BT"
  "_None\020\000\022\014\n\010BT_Layer\020\001\022\014\n\010BT_Stage\020\002\022\r\n\tB"
  "T_Degree\020\003*\322\001\n\tWorldType\022\013\n\007WT_None\020\000\022\021\n"
  "\rWT_ClientOnly\020\001\022\014\n\010WT_Arena\020\002\022\013\n\007WT_Doo"
  "r\020\003\022\023\n\017WT_MonsterTower\020\004\022\020\n\014WT_SoloArena"
  "\020\005\022\020\n\014WT_SeptArena\020\006\022\021\n\rWT_QuestFight\020\007\022"
  "\025\n\021WT_DungeonKillAll\020\010\022\025\n\021WT_DungeonSurv"
  "ive\020\t\022\020\n\014WT_SeptDemon\020\n*7\n\nEntityType\022\016\n"
  "\nET_Unknown\020\000\022\r\n\tET_Player\020\001\022\n\n\006ET_Npc\020\002"
  "*T\n\013EntityState\022\013\n\007ES_None\020\000\022\013\n\007ES_Init\020"
  "\001\022\r\n\tES_Normal\020\002\022\014\n\010ES_Death\020\003\022\016\n\nES_Rec"
  "ycle\020\004*s\n\007NpcType\022\020\n\014NpcType_None\020\000\022\024\n\020N"
  "pcType_Function\020\001\022\023\n\017NpcType_Monster\020\002\022\025"
  "\n\021NpcType_SeptStone\020\003\022\024\n\020NpcType_SeptLan"
  "d\020\004*\237\001\n\013MonsterType\022\024\n\020MonsterType_None\020"
  "\000\022\026\n\022MonsterType_Normal\020\001\022\025\n\021MonsterType"
  "_Elite\020\002\022\025\n\021MonsterType_Chief\020\003\022\031\n\025Monst"
  "erType_SuperBoss\020\004\022\031\n\025MonsterType_SeptDe"
  "mon\020\005*\343\007\n\014CurrencyType\022\025\n\021CurrencyType_N"
  "one\020\000\022\026\n\022CurrencyType_Money\020\001\022\025\n\021Currenc"
  "yType_Soul\020\002\022\025\n\021CurrencyType_Gold\020\003\022\025\n\021C"
  "urrencyType_Item\020\004\022#\n\037CurrencyType_Abili"
  "tyActivePoint\020\005\022$\n CurrencyType_AbilityU"
  "pgradePoint\020\006\022\034\n\030CurrencyType_KungfuPoin"
  "t\020\007\022\036\n\032CurrencyType_TreasureToken\020\010\022\033\n\027C"
  "urrencyType_ChaosStone\020\t\022\033\n\027CurrencyType"
  "_StudyPoint\020\n\022\033\n\027CurrencyType_NingWenGem"
  "\020\013\022\031\n\025CurrencyType_HeroCard\020\014\022\035\n\031Currenc"
  "yType_SeptDonation\020\r\022\032\n\026CurrencyType_Sep"
  "tStone\020\016\022\035\n\031CurrencyType_SeptQuestExp\020\017\022"
  "\037\n\033CurrencyType_SeptQuestToken\020\020\022\034\n\030Curr"
  "encyType_GongFaToken\020\021\022\035\n\031CurrencyType_G"
  "achaTokenL1\020\022\022\035\n\031CurrencyType_GachaToken"
  "L2\020\023\022\035\n\031CurrencyType_GachaTokenL3\020\024\022\035\n\031C"
  "urrencyType_GachaTokenL4\020\025\022\035\n\031CurrencyTy"
  "pe_GachaTokenL5\020\026\022 \n\034CurrencyType_Treasu"
  "ryChest01\020\027\022 \n\034CurrencyType_TreasuryChes"
  "t02\020\030\022 \n\034CurrencyType_TreasuryChest03\020\031\022"
  " \n\034CurrencyType_TreasuryChest04\020\032\022 \n\034Cur"
  "rencyType_TreasuryChest05\020\033\022 \n\034CurrencyT"
  "ype_TreasuryChest06\020\034\022 \n\034CurrencyType_Tr"
  "easuryChest07\020\035\022 \n\034CurrencyType_Treasury"
  "Chest08\020\036\022 \n\034CurrencyType_AppearanceMone"
  "y\020\037*\210\001\n\010SoloType\022\021\n\rSoloType_None\020\000\022\027\n\023S"
  "oloType_FriendlyPk\020\001\022\024\n\020SoloType_SwordPk"
  "\020\002\022\033\n\027SoloType_SwordPkRevenge\020\003\022\035\n\031SoloT"
  "ype_RobberySeptStone\020\004*\364\002\n\024QuestRequirem"
  "entType\022\013\n\007QT_Kill\020\000\022\n\n\006QT_Get\020\001\022\r\n\tQT_S"
  "ubmit\020\002\022\013\n\007QT_Rank\020\003\022\014\n\010QT_Event\020\004\022\016\n\nQT"
  "_Alchemy\020\005\022\022\n\016QT_AlchemyRank\020\006\022\020\n\014QT_Ski"
  "llRank\020\007\022\014\n\010QT_Forge\020\010\022\020\n\014QT_ForgeRank\020\t"
  "\022\020\n\014QT_ArenaDoor\020\n\022\023\n\017QT_MonsterTower\020\013\022"
  "\022\n\016QT_QiCollector\020\014\022\r\n\tQT_GongFa\020\r\022\021\n\rQT"
  "_QuestFight\020\016\022\022\n\016QT_SkillDegree\020\017\022\023\n\017QT_"
  "GongFaDegree\020\020\022\027\n\023QT_CollectorQuality\020\021\022"
  "\017\n\013QT_JoinSept\020\022\022\023\n\017QT_FarmlandSeed\020\023*=\n"
  "\013QuestOpType\022\016\n\nQOp_Accept\020\000\022\016\n\nQOp_Fini"
  "sh\020\001\022\016\n\nQOp_GiveUp\020\002*3\n\026QuestSpecialRewa"
  "rdType\022\031\n\025QSRT_FarmerFriendShip\020\000*\210\002\n\017Le"
  "aderboardType\022\016\n\nLBT_Combat\020\000\022\r\n\tLBT_Mag"
  "ic\020\001\022\013\n\007LBT_Phy\020\002\022\014\n\010LBT_Rich\020\003\022\013\n\007LBT_P"
  "et\020\004\022\014\n\010LBT_Sect\020\005\022\016\n\nLBT_Weapon\020\006\022\r\n\tLB"
  "T_Armor\020\007\022\017\n\013LBT_Jewelry\020\010\022\020\n\014LBT_Treasu"
  "re\020\t\022\020\n\014LBT_Shanhetu\020\n\022\025\n\021LBT_Shanhetu_W"
  "eek\020\013\022\024\n\020LBT_MonsterTower\020\014\022\017\n\013LBT_MainE"
  "xp\020\r\022\016\n\nLBT_MaxNum\020\016*V\n\014AlchemyState\022\025\n\021"
  "AlchemyState_None\020\000\022\030\n\024AlchemyState_Runn"
  "ing\020\001\022\025\n\021AlchemyState_Done\020\002*U\n\nWorldSta"
  "te\022\013\n\007WS_None\020\000\022\013\n\007WS_Init\020\001\022\r\n\tWS_Norma"
  "l\020\002\022\016\n\nWS_Closing\020\003\022\016\n\nWS_Recycle\020\004*\322\005\n\023"
  "GameStatsModuleType\022\020\n\014GSMT_Summary\020\000\022\r\n"
  "\tGSMT_Base\020\001\022\027\n\023GSMT_CollectionBlue\020\002\022\031\n"
  "\025GSMT_CollectionPurple\020\003\022\031\n\025GSMT_Collect"
  "ionOrange\020\004\022\026\n\022GSMT_CollectionRed\020\005\022\033\n\027G"
  "SMT_CollectionSuitBlue\020\006\022\035\n\031GSMT_Collect"
  "ionSuitPurple\020\007\022\035\n\031GSMT_CollectionSuitOr"
  "ange\020\010\022\032\n\026GSMT_CollectionSuitRed\020\t\022\026\n\022GS"
  "MT_EquipmentBase\020\037\022\033\n\027GSMT_EquipmentRein"
  "force\020 \022\027\n\023GSMT_EquipmentQiWen\020!\022\030\n\024GSMT"
  "_EquipmentRefine\020\"\022\016\n\nGSMT_Debug\0202\022\031\n\025GS"
  "MT_RankBreakthrough\0203\022\025\n\021GSMT_RankPracti"
  "ce\0204\022\023\n\017GSMT_Collection\0205\022\027\n\023GSMT_Collec"
  "tionSuit\0206\022\023\n\017GSMT_PillElixir\0207\022\025\n\021GSMT_"
  "PillProperty\0208\022\017\n\013GSMT_GongFa\0209\022\024\n\020GSMT_"
  "QiCollector\020:\022\r\n\tGSMT_Sept\020;\022\022\n\016GSMT_Equ"
  "ipment\020<\022\020\n\014GSMT_Ability\020=\022$\n GSMT_Equip"
  "mentReinforceResonance\020>\022 \n\034GSMT_Equipme"
  "ntQiWenResonance\020\?\022\024\n\020GSMT_Leaderboard\020["
  "*^\n\023ItemStatsModuleType\022\022\n\016ISMT_Equipmen"
  "t\020\000\022\022\n\016ISMT_Reinforce\020\002\022\016\n\nISMT_QiWen\020\003\022"
  "\017\n\013ISMT_Refine\020\004*V\n\023FunctionModuleState\022"
  "\014\n\010FMS_Hide\020\000\022\014\n\010FMS_Show\020\001\022\021\n\rFMS_CanUn"
  "lock\020\002\022\020\n\014FMS_Unlocked\020\003*\325\003\n\022FunctionMod"
  "uleType\022\014\n\010FMT_None\020\000\022\017\n\013FMT_Alchemy\020\001\022\014"
  "\n\010FMT_Shop\020\002\022\021\n\rFMT_DeluxShop\020\003\022\023\n\017FMT_L"
  "eaderboard\020\004\022\014\n\010FMT_Mail\020\005\022\r\n\tFMT_Forge\020"
  "\006\022\024\n\020FMT_MonsterTower\020\007\022\022\n\016FMT_PillElixi"
  "r\020\010\022\017\n\013FMT_Ability\020\t\022\r\n\tFMT_GuBao\020\n\022\016\n\nF"
  "MT_GongFa\020\013\022\r\n\tFMT_Share\020\014\022\023\n\017FMT_HuangZ"
  "huang\020\r\022\021\n\rFMT_ZhuangPei\020\016\022\023\n\017FMT_QiColl"
  "ector\020\017\022\021\n\rFMT_Checklist\020\020\022\017\n\013FMT_SwordP"
  "k\020\021\022\025\n\021FMT_TreasuryChest\020\022\022\022\n\016FMT_Appear"
  "ance\020\023\022\014\n\010FMT_Farm\020\024\022\016\n\nFMT_Avatar\020\025\022\021\n\r"
  "FMT_Biography\020\026\022\026\n\022FMT_BiographyEvent\020\027\022"
  "\017\n\013FMT_VipShop\020\030*9\n\030FunctionModuleUnlock"
  "Type\022\016\n\nFMUT_Click\020\000\022\r\n\tFMUT_Auto\020\001*>\n\010M"
  "ailType\022\r\n\tMT_System\020\000\022\022\n\016MT_Maintenance"
  "\020\001\022\017\n\013MT_Official\020\002*D\n\rMailOperation\022\014\n\010"
  "MOP_Fail\020\000\022\014\n\010MOP_Done\020\001\022\027\n\023MOP_Inventor"
  "yIsFull\020\002*7\n\017ChatMessageType\022\016\n\nCMT_Norm"
  "al\020\000\022\024\n\020CMT_SystemNotice\020\001*|\n\022ChatMessag"
  "eChannel\022\025\n\021CMC_ColonyServers\020\000\022\023\n\017CMC_Q"
  "uadServers\020\001\022\023\n\017CMC_LocalServer\020\002\022\024\n\020CMC"
  "_Organization\020\003\022\017\n\013CMC_Private\020\004*a\n\017Forg"
  "eChanceType\022\032\n\026ForgeChanceType_Normal\020\000\022"
  "\031\n\025ForgeChanceType_Small\020\001\022\027\n\023ForgeChanc"
  "eType_Big\020\002*N\n\nForgeState\022\023\n\017ForgeState_"
  "None\020\000\022\026\n\022ForgeState_Running\020\001\022\023\n\017ForgeS"
  "tate_Done\020\002*z\n\016PillElixirType\022\030\n\024PillEli"
  "xirType_Other\020\000\022\026\n\022PillElixirType_Exp\020\001\022"
  "\033\n\027PillElixirType_Property\020\002\022\031\n\025PillElix"
  "irType_Double\020\003*\323\002\n\023PillElixrEffectType\022"
  "\034\n\030PillElixrEffectType_None\020\000\022\036\n\032PillEli"
  "xrEffectType_PhyExp\020\001\022 \n\034PillElixrEffect"
  "Type_MagicExp\020\002\022&\n\"PillElixrEffectType_C"
  "riticalResist\020\003\022 \n\034PillElixrEffectType_C"
  "ritical\020\004\022\"\n\036PillElixrEffectType_MagicDo"
  "dge\020\005\022&\n\"PillElixrEffectType_MagicAccura"
  "ccy\020\006\022 \n\034PillElixrEffectType_PhyDodge\020\007\022"
  "$\n PillElixrEffectType_PhyAccuraccy\020\010*\244\003"
  "\n\031PlayerAbilityActionResult\022\037\n\033PlayerAbi"
  "lityAction_Success\020\000\022\037\n\033PlayerAbilityAct"
  "ion_Timeout\020\001\022&\n\"PlayerAbilityAction_Inv"
  "alidAbility\020\002\022/\n+PlayerAbilityAction_Giv"
  "eFailed_ExistAlready\020\n\022.\n*PlayerAbilityA"
  "ction_GiveFailed_OwnerFailed\020\013\022.\n*Player"
  "AbilityAction_UpgradeFailed_NonExist\020\024\022."
  "\n*PlayerAbilityAction_UpgradeFailed_MaxG"
  "rade\020\025\0221\n-PlayerAbilityAction_UpgradeFai"
  "led_OwnerFailed\020\026\022)\n%PlayerAbilityAction"
  "_ResetAll_CoolDown\0202*^\n\tFightMode\022\023\n\017Fig"
  "htMode_Peace\020\000\022\021\n\rFightMode_All\020\001\022\022\n\016Fig"
  "htMode_Sept\020\002\022\025\n\021FightMode_Neutral\020\003*n\n\016"
  "AttackLockType\022\036\n\032AttackLockType_MinDist"
  "ance\020\000\022\033\n\027AttackLockType_LowHpPct\020\001\022\037\n\033A"
  "ttackLockType_LowHpMpValue\020\002*t\n\020AttackUn"
  "lockType\022 \n\034AttackUnlockType_MaxDistance"
  "\020\000\022!\n\035AttackUnlockType_NearDistance\020\001\022\033\n"
  "\027AttackUnlockType_Screen\020\002*\242\001\n\021BossInvas"
  "ionState\022\032\n\026BossInvasionState_None\020\000\022\032\n\026"
  "BossInvasionState_Wait\020\001\022\035\n\031BossInvasion"
  "State_Prepare\020\002\022\033\n\027BossInvasionState_Fig"
  "ht\020\003\022\031\n\025BossInvasionState_End\020\004*\225\001\n\014Swor"
  "dPkState\022\025\n\021SwordPkState_None\020\000\022\025\n\021Sword"
  "PkState_Init\020\001\022\034\n\030SwordPkState_SeasonBeg"
  "in\020\002\022\035\n\031SwordPkState_SeasonDuring\020\003\022\032\n\026S"
  "wordPkState_SeasonEnd\020\004*\351\003\n\021CheckListTas"
  "kType\022\r\n\tCLTT_None\020\000\022\016\n\nCLTT_Login\020\001\022\020\n\014"
  "CLTT_EatPill\020\002\022\021\n\rCLTT_Practice\020\003\022\024\n\020CLT"
  "T_BuyInMarket\020\004\022\021\n\rCLTT_MakePill\020\005\022\017\n\013CL"
  "TT_GongFa\020\006\022\025\n\021CLTT_MonsterTower\020\007\022\017\n\013CL"
  "TT_Portal\020\010\022\016\n\nCLTT_Plant\020\t\022\016\n\nCLTT_Forg"
  "e\020\n\022\013\n\007CLTT_Ad\020\013\022\020\n\014CLTT_Ability\020\014\022\020\n\014CL"
  "TT_LocalPk\020\r\022\017\n\013CLTT_Bounty\020\016\022\022\n\016CLTT_Re"
  "inforce\020\017\022\021\n\rCLTT_CommonPk\020\020\022\027\n\023CLTT_Buy"
  "InDeluxShop\020\021\022\030\n\024CLTT_MonsterInvasion\020\022\022"
  "\026\n\022CLTT_WorldInvasion\020\023\022\r\n\tCLTT_Mine\020\024\022\031"
  "\n\025CLTT_SectContribution\020\025\022\r\n\tCLTT_Quiz\020\026"
  "\022\016\n\nCLTT_Share\020\027\022\021\n\rCLTT_MineTime\020\030*\254\001\n\014"
  "SeptPosition\022\025\n\021SeptPosition_None\020\000\022\027\n\023S"
  "eptPosition_Normal\020\001\022\030\n\024SeptPosition_Man"
  "ager\020\002\022\030\n\024SeptPosition_Senator\020\003\022\035\n\031Sept"
  "Position_ViceChairman\020\004\022\031\n\025SeptPosition_"
  "Chairman\020\005*^\n\013SeptLogType\022\014\n\010SLT_None\020\000\022"
  "\014\n\010SLT_Join\020\001\022\r\n\tSLT_Leave\020\002\022\020\n\014SLT_Chan"
  "geUp\020\003\022\022\n\016SLT_ChangeDown\020\004*\263\001\n\022SeptArena"
  "StoneType\022\033\n\027SeptArenaStoneType_None\020\000\022\036"
  "\n\032SeptArenaStoneType_Primary\020\001\022#\n\037SeptAr"
  "enaStoneType_Intermediate\020\002\022\037\n\033SeptArena"
  "StoneType_Advanced\020\003\022\032\n\026SeptArenaStoneTy"
  "pe_Top\020\004*U\n\013GongFaState\022\n\n\006Unable\020\000\022\020\n\014R"
  "eadyToLearn\020\001\022\014\n\010Training\020\002\022\013\n\007Standby\020\003"
  "\022\r\n\tActivated\020\004*\330\002\n\017GongFaCondition\022\014\n\010G"
  "FC_None\020\000\022\023\n\017GFC_HerbalBlock\020\001\022\020\n\014GFC_Co"
  "stItem\020\002\022\r\n\tGFC_GuBao\020\003\022\023\n\017GFC_AvatarLev"
  "el\020\004\022\025\n\021GFC_OrangeAlchemy\020\005\022\023\n\017GFC_Orang"
  "eForge\020\006\022\r\n\tGFC_MaxHP\020\007\022\r\n\tGFC_MaxMP\020\010\022\020"
  "\n\014GFC_PetLevel\020\t\022\022\n\016GFC_SkillLevel\020\n\022\024\n\020"
  "GFC_ImmortalRoad\020\013\022\014\n\010GFC_Crit\020\014\022\020\n\014GFC_"
  "CritCoff\020\r\022\020\n\014GFC_MagBreak\020\016\022\020\n\014GFC_PhyB"
  "reak\020\017\022\020\n\014GFC_MagBlock\020\020\022\020\n\014GFC_PhyBlock"
  "\020\021*\265\006\n\020GongFaEffectType\022\r\n\tGFET_None\020\000\022\020"
  "\n\014GFET_BaseAtt\020\001\022\017\n\013GFET_DongFu\020\002\022\024\n\020GFE"
  "T_PracticeNum\020\003\022\023\n\017GFET_PracticeUp\020\004\022\026\n\022"
  "GFET_MergePractive\020\005\022\017\n\013GFET_PillUp\020\006\022\023\n"
  "\017GFET_PillUseNum\020\007\022\020\n\014GFET_MoneyUp\020\010\022&\n\""
  "GFET_AttackMonsterDamageAddPercent\020\t\022\'\n#"
  "GFET_TakeMonsterDamageReducePercent\020\n\022&\n"
  "\"GFET_FaBaoDamageToPlayerAddPercent\020\013\022)\n"
  "%GFET_FaBaoDamageToPlayerReducePercent\020\014"
  "\022)\n%GFET_ShenTongDamageToPlayerAddPercen"
  "t\020\r\022,\n(GFET_ShenTongDamageToPlayerReduce"
  "Percent\020\016\022\r\n\tGFET_Mind\020\017\022\031\n\025GFET_MpRecov"
  "erPercent\020\020\022\013\n\007GFET_Mp\020\021\022\017\n\013GFET_BaseMp\020"
  "\022\022\031\n\025GFET_HpRecoverPercent\020\023\022\013\n\007GFET_Hp\020"
  "\024\022\017\n\013GFET_BaseHp\020\025\022\017\n\013GFET_MagAtt\020\026\022\017\n\013G"
  "FET_PhyAtt\020\027\022\r\n\tGFET_Crit\020\030\022\022\n\016GFET_Crit"
  "Coeff\020\031\022\022\n\016GFET_CritBlock\020\032\022\027\n\023GFET_Cont"
  "rolRateAtt\020\033\022\027\n\023GFET_ControlRateDef\020\034\022\027\n"
  "\023GFET_ControlTimeAtt\020\035\022\027\n\023GFET_ControlTi"
  "meDef\020\036\022\022\n\016GFET_MoveSpeed\020\037\022\022\n\016GFET_Inte"
  "llect\020 \022\021\n\rGFET_Strength\020!*\300\001\n\nFuZengTyp"
  "e\022\014\n\010FZT_None\020\000\022\023\n\017FZT_CombatPower\020\001\022\024\n\020"
  "FZT_MonsterTower\020\002\022\017\n\013FZT_Ability\020\003\022\014\n\010F"
  "ZT_Pill\020\004\022\016\n\nFZT_GongFa\020\005\022\027\n\023FZT_GuBaoCo"
  "llection\020\006\022\022\n\016FZT_GuBaoLevel\020\007\022\r\n\tFZT_Ga"
  "Cha\020\010\022\016\n\nFZT_MaxNum\020\t*E\n\013FuZengState\022\022\n\016"
  "FZS_UnFinished\020\000\022\020\n\014FZS_Finished\020\001\022\020\n\014FZ"
  "S_Received\020\002*;\n\032CollectionStarAdditionTy"
  "pe\022\016\n\nCSAT_Times\020\000\022\r\n\tCSAT_Plus\020\001*H\n\021Col"
  "lectionUseType\022\016\n\nCUT_Active\020\000\022\017\n\013CUT_Pa"
  "ssive\020\001\022\022\n\016CUT_Functional\020\002*s\n\022Collectio"
  "nZoneType\022\017\n\013CZT_Unknown\020\000\022\016\n\nCZT_RenJie"
  "\020\001\022\017\n\013CZT_LingJie\020\002\022\016\n\nCZT_XianMo\020\003\022\r\n\tC"
  "ZT_LiuYu\020\004\022\014\n\010CZT_QiTa\020\005*_\n\024CollectionFi"
  "lterType\022\r\n\tCFT_Owned\020\000\022\013\n\007CFT_All\020\001\022\016\n\n"
  "CFT_Source\020\002\022\014\n\010CFT_Suit\020\003\022\r\n\tCFT_CanUp\020"
  "\004*W\n\023CollectionOrderType\022\017\n\013COT_Quality\020"
  "\000\022\020\n\014COT_Property\020\001\022\r\n\tCOT_Level\020\002\022\016\n\nCO"
  "T_Active\020\003*\\\n\026CollectionHistoryState\022\014\n\010"
  "CHS_None\020\000\022\021\n\rCHS_NotActive\020\001\022\017\n\013CHS_Can"
  "Draw\020\002\022\020\n\014CHS_DrawDone\020\003*W\n\036CollectionZo"
  "neActiveAwardState\022\016\n\nCZAAS_None\020\000\022\021\n\rCZ"
  "AAS_CanDraw\020\001\022\022\n\016CZAAS_DrawDone\020\002*\345\004\n\017Li"
  "feCounterType\022\017\n\013LCT_Unknown\020\000\022\026\n\022LCT_Al"
  "chemyQuality\020\001\022\035\n\031LCT_ForgeEquipmentQual"
  "ity\020\002\022\"\n\036LCT_ForgeSkillEquipmentQuality\020"
  "\003\022\027\n\023LCT_AbilityLevelPhy\020\004\022\027\n\023LCT_Abilit"
  "yLevelMag\020\005\022\031\n\025LCT_KillCommonMonster\020\006\022\030"
  "\n\024LCT_KillEliteMonster\020\007\022\020\n\014LCT_KillBoss"
  "\020\010\022\031\n\025LCT_ActiveGongFaPoint\020\t\022\027\n\023LCT_Fin"
  "ishingGongFa\020\n\022\026\n\022LCT_PillElixirUsed\020\013\022\031"
  "\n\025LCT_InventoryItemUsed\020\014\022\035\n\031LCT_Invento"
  "ryItemUsedType\020\r\022\021\n\rLCT_LoginGame\020\016\022\023\n\017L"
  "CT_FuYuanPoint\020\017\022\021\n\rLCT_SeptQuest\020\020\022\024\n\020L"
  "CT_MonsterTower\020\021\022\026\n\022LCT_CollectionStar\020"
  "\022\022\025\n\021LCT_CollectionNum\020\023\022\021\n\rLCT_GaChaOpe"
  "n\020\024\022\020\n\014LCT_Shanhetu\020\025\022\027\n\023LCT_PropertyPil"
  "lUse\020\026\022\024\n\020LCT_FarmBlockNum\020\027\022\023\n\017LCT_Alch"
  "emyType\020\030*\210\002\n\tModelType\022\016\n\nMT_Unknown\020\000\022"
  "\017\n\013MT_HeadIcon\020\001\022\020\n\014MT_HeadFrame\020\002\022\013\n\007MT"
  "_Body\020\003\022\013\n\007MT_Hair\020\004\022\n\n\006MT_Hat\020\005\022\017\n\013MT_H"
  "eadDeco\020\006\022\017\n\013MT_FaceDeco\020\007\022\013\n\007MT_Mask\020\010\022"
  "\016\n\nMT_EarDeco\020\t\022\017\n\013MT_EyeBrows\020\n\022\r\n\tMT_M"
  "akeup\020\013\022\020\n\014MT_FacePaint\020\014\022\020\n\014MT_FacePrin"
  "t\020\r\022\020\n\014MT_BackLight\020\016\022\r\n\tMT_MaxNum\020\017*G\n\030"
  "InventoryItemChangedType\022\017\n\013IICT_Modify\020"
  "\000\022\014\n\010IICT_Add\020\001\022\014\n\010IICT_Del\020\002*_\n\023ArenaCh"
  "eckListState\022\r\n\tACLS_None\020\000\022\023\n\017ACLS_UnFi"
  "nished\020\001\022\021\n\rACLS_Finished\020\002\022\021\n\rACLS_Rece"
  "ived\020\003*[\n\031ArenaCheckListRewardState\022\024\n\020A"
  "CLRS_UnFinished\020\000\022\024\n\020ACLRS_UnReceived\020\001\022"
  "\022\n\016ACLRS_Received\020\002*:\n\rFarmLandState\022\014\n\010"
  "FLS_None\020\000\022\014\n\010FLS_Free\020\001\022\r\n\tFLS_InUse\020\002*"
  "\276\001\n\020FarmerEffectType\022\014\n\010FET_None\020\000\022\030\n\024FE"
  "T_ReduceGrowthTime\020\001\022\022\n\016FET_RipeningUp\020\002"
  "\022\022\n\016FET_WateringUp\020\003\022\027\n\023FET_ExtraOneHarv"
  "est\020\004\022\025\n\021FET_WateringNumUp\020\005\022\032\n\026FET_Redu"
  "ceGrowthPeriod\020\006\022\016\n\nFET_MaxNum\020\007*\227\001\n\021Ser"
  "verCounterType\022\014\n\010SCT_None\020\000\022+\n\'SCT_Biog"
  "raphyEventKillNpcWithHighDegree\020\001\022\035\n\031SCT"
  "_KillNpcWithHighDegree\020\002\022\023\n\017SCT_DegreeUp"
  "Phy\020\003\022\023\n\017SCT_DegreeUpMag\020\004*M\n\nPeriodType"
  "\022\013\n\007PT_None\020\000\022\n\n\006PT_Day\020\001\022\013\n\007PT_Week\020\002\022\014"
  "\n\010PT_Mouth\020\003\022\013\n\007PT_Year\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_defines_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_defines_2eproto = {
    false, false, 13833, descriptor_table_protodef_defines_2eproto,
    "defines.proto",
    &descriptor_table_defines_2eproto_once, nullptr, 0, 0,
    schemas, file_default_instances, TableStruct_defines_2eproto::offsets,
    nullptr, file_level_enum_descriptors_defines_2eproto,
    file_level_service_descriptors_defines_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_defines_2eproto_getter() {
  return &descriptor_table_defines_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_defines_2eproto(&descriptor_table_defines_2eproto);
namespace idlepb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[0];
}
bool ItemQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemShowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[1];
}
bool ItemShowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[2];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 28:
    case 36:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EquipmentMainType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[3];
}
bool EquipmentMainType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerkValueAddType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[4];
}
bool PerkValueAddType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerkValueEffectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[5];
}
bool PerkValueEffectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerkIdConsts_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[6];
}
bool PerkIdConsts_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EquipmentSlotState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[7];
}
bool EquipmentSlotState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EquipmentSlotWearType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[8];
}
bool EquipmentSlotWearType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlchemyChanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[9];
}
bool AlchemyChanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PillType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[10];
}
bool PillType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CultivationDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[11];
}
bool CultivationDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BreakthroughType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[12];
}
bool BreakthroughType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[13];
}
bool WorldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[14];
}
bool EntityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[15];
}
bool EntityState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NpcType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[16];
}
bool NpcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[17];
}
bool MonsterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CurrencyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[18];
}
bool CurrencyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SoloType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[19];
}
bool SoloType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestRequirementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[20];
}
bool QuestRequirementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestOpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[21];
}
bool QuestOpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestSpecialRewardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[22];
}
bool QuestSpecialRewardType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LeaderboardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[23];
}
bool LeaderboardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlchemyState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[24];
}
bool AlchemyState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[25];
}
bool WorldState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameStatsModuleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[26];
}
bool GameStatsModuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 31:
    case 32:
    case 33:
    case 34:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 91:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemStatsModuleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[27];
}
bool ItemStatsModuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionModuleState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[28];
}
bool FunctionModuleState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionModuleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[29];
}
bool FunctionModuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionModuleUnlockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[30];
}
bool FunctionModuleUnlockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MailType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[31];
}
bool MailType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MailOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[32];
}
bool MailOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[33];
}
bool ChatMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatMessageChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[34];
}
bool ChatMessageChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForgeChanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[35];
}
bool ForgeChanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForgeState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[36];
}
bool ForgeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PillElixirType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[37];
}
bool PillElixirType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PillElixrEffectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[38];
}
bool PillElixrEffectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerAbilityActionResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[39];
}
bool PlayerAbilityActionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
    case 20:
    case 21:
    case 22:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FightMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[40];
}
bool FightMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttackLockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[41];
}
bool AttackLockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttackUnlockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[42];
}
bool AttackUnlockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BossInvasionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[43];
}
bool BossInvasionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwordPkState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[44];
}
bool SwordPkState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckListTaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[45];
}
bool CheckListTaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeptPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[46];
}
bool SeptPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeptLogType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[47];
}
bool SeptLogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeptArenaStoneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[48];
}
bool SeptArenaStoneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GongFaState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[49];
}
bool GongFaState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GongFaCondition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[50];
}
bool GongFaCondition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GongFaEffectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[51];
}
bool GongFaEffectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FuZengType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[52];
}
bool FuZengType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FuZengState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[53];
}
bool FuZengState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollectionStarAdditionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[54];
}
bool CollectionStarAdditionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollectionUseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[55];
}
bool CollectionUseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollectionZoneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[56];
}
bool CollectionZoneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollectionFilterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[57];
}
bool CollectionFilterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollectionOrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[58];
}
bool CollectionOrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollectionHistoryState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[59];
}
bool CollectionHistoryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollectionZoneActiveAwardState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[60];
}
bool CollectionZoneActiveAwardState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LifeCounterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[61];
}
bool LifeCounterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[62];
}
bool ModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InventoryItemChangedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[63];
}
bool InventoryItemChangedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArenaCheckListState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[64];
}
bool ArenaCheckListState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArenaCheckListRewardState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[65];
}
bool ArenaCheckListRewardState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FarmLandState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[66];
}
bool FarmLandState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FarmerEffectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[67];
}
bool FarmerEffectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCounterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[68];
}
bool ServerCounterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeriodType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[69];
}
bool PeriodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
