// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdd_global.proto

#include "gdd_global.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace idlepb {
PROTOBUF_CONSTEXPR CommonGlobalConfig::CommonGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ts_rpc_max_seconds_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommonGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonGlobalConfigDefaultTypeInternal() {}
  union {
    CommonGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonGlobalConfigDefaultTypeInternal _CommonGlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR GameServicesConfig::GameServicesConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.listen_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redis_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redis_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_.redis_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameServicesConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameServicesConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameServicesConfigDefaultTypeInternal() {}
  union {
    GameServicesConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameServicesConfigDefaultTypeInternal _GameServicesConfig_default_instance_;
}  // namespace idlepb
static ::_pb::Metadata file_level_metadata_gdd_5fglobal_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gdd_5fglobal_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gdd_5fglobal_2eproto = nullptr;

const uint32_t TableStruct_gdd_5fglobal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CommonGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CommonGlobalConfig, _impl_.ts_rpc_max_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::GameServicesConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::GameServicesConfig, _impl_.listen_ip_),
  PROTOBUF_FIELD_OFFSET(::idlepb::GameServicesConfig, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::idlepb::GameServicesConfig, _impl_.redis_ip_),
  PROTOBUF_FIELD_OFFSET(::idlepb::GameServicesConfig, _impl_.redis_port_),
  PROTOBUF_FIELD_OFFSET(::idlepb::GameServicesConfig, _impl_.redis_password_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::idlepb::CommonGlobalConfig)},
  { 7, -1, -1, sizeof(::idlepb::GameServicesConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::idlepb::_CommonGlobalConfig_default_instance_._instance,
  &::idlepb::_GameServicesConfig_default_instance_._instance,
};

const char descriptor_table_protodef_gdd_5fglobal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gdd_global.proto\022\006idlepb\032\rdefines.prot"
  "o\032\014common.proto\"0\n\022CommonGlobalConfig\022\032\n"
  "\022ts_rpc_max_seconds\030\001 \001(\002\"s\n\022GameService"
  "sConfig\022\021\n\tlisten_ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005"
  "\022\020\n\010redis_ip\030\003 \001(\t\022\022\n\nredis_port\030\004 \001(\005\022\026"
  "\n\016redis_password\030\005 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gdd_5fglobal_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_defines_2eproto,
};
static ::_pbi::once_flag descriptor_table_gdd_5fglobal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gdd_5fglobal_2eproto = {
    false, false, 230, descriptor_table_protodef_gdd_5fglobal_2eproto,
    "gdd_global.proto",
    &descriptor_table_gdd_5fglobal_2eproto_once, descriptor_table_gdd_5fglobal_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_gdd_5fglobal_2eproto::offsets,
    file_level_metadata_gdd_5fglobal_2eproto, file_level_enum_descriptors_gdd_5fglobal_2eproto,
    file_level_service_descriptors_gdd_5fglobal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gdd_5fglobal_2eproto_getter() {
  return &descriptor_table_gdd_5fglobal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gdd_5fglobal_2eproto(&descriptor_table_gdd_5fglobal_2eproto);
namespace idlepb {

// ===================================================================

class CommonGlobalConfig::_Internal {
 public:
};

CommonGlobalConfig::CommonGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CommonGlobalConfig)
}
CommonGlobalConfig::CommonGlobalConfig(const CommonGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommonGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ts_rpc_max_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ts_rpc_max_seconds_ = from._impl_.ts_rpc_max_seconds_;
  // @@protoc_insertion_point(copy_constructor:idlepb.CommonGlobalConfig)
}

inline void CommonGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ts_rpc_max_seconds_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommonGlobalConfig::~CommonGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.CommonGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommonGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CommonGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ts_rpc_max_seconds_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float ts_rpc_max_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.ts_rpc_max_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CommonGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float ts_rpc_max_seconds = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ts_rpc_max_seconds = this->_internal_ts_rpc_max_seconds();
  uint32_t raw_ts_rpc_max_seconds;
  memcpy(&raw_ts_rpc_max_seconds, &tmp_ts_rpc_max_seconds, sizeof(tmp_ts_rpc_max_seconds));
  if (raw_ts_rpc_max_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_ts_rpc_max_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CommonGlobalConfig)
  return target;
}

size_t CommonGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CommonGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float ts_rpc_max_seconds = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ts_rpc_max_seconds = this->_internal_ts_rpc_max_seconds();
  uint32_t raw_ts_rpc_max_seconds;
  memcpy(&raw_ts_rpc_max_seconds, &tmp_ts_rpc_max_seconds, sizeof(tmp_ts_rpc_max_seconds));
  if (raw_ts_rpc_max_seconds != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommonGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonGlobalConfig::GetClassData() const { return &_class_data_; }


void CommonGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommonGlobalConfig*>(&to_msg);
  auto& from = static_cast<const CommonGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CommonGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ts_rpc_max_seconds = from._internal_ts_rpc_max_seconds();
  uint32_t raw_ts_rpc_max_seconds;
  memcpy(&raw_ts_rpc_max_seconds, &tmp_ts_rpc_max_seconds, sizeof(tmp_ts_rpc_max_seconds));
  if (raw_ts_rpc_max_seconds != 0) {
    _this->_internal_set_ts_rpc_max_seconds(from._internal_ts_rpc_max_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonGlobalConfig::CopyFrom(const CommonGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CommonGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonGlobalConfig::IsInitialized() const {
  return true;
}

void CommonGlobalConfig::InternalSwap(CommonGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ts_rpc_max_seconds_, other->_impl_.ts_rpc_max_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[0]);
}

// ===================================================================

class GameServicesConfig::_Internal {
 public:
};

GameServicesConfig::GameServicesConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.GameServicesConfig)
}
GameServicesConfig::GameServicesConfig(const GameServicesConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameServicesConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.listen_ip_){}
    , decltype(_impl_.redis_ip_){}
    , decltype(_impl_.redis_password_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.redis_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.listen_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listen_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_listen_ip().empty()) {
    _this->_impl_.listen_ip_.Set(from._internal_listen_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.redis_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redis_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redis_ip().empty()) {
    _this->_impl_.redis_ip_.Set(from._internal_redis_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.redis_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redis_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redis_password().empty()) {
    _this->_impl_.redis_password_.Set(from._internal_redis_password(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.redis_port_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.redis_port_));
  // @@protoc_insertion_point(copy_constructor:idlepb.GameServicesConfig)
}

inline void GameServicesConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.listen_ip_){}
    , decltype(_impl_.redis_ip_){}
    , decltype(_impl_.redis_password_){}
    , decltype(_impl_.port_){0}
    , decltype(_impl_.redis_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.listen_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listen_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redis_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redis_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redis_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redis_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameServicesConfig::~GameServicesConfig() {
  // @@protoc_insertion_point(destructor:idlepb.GameServicesConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameServicesConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.listen_ip_.Destroy();
  _impl_.redis_ip_.Destroy();
  _impl_.redis_password_.Destroy();
}

void GameServicesConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameServicesConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.GameServicesConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.listen_ip_.ClearToEmpty();
  _impl_.redis_ip_.ClearToEmpty();
  _impl_.redis_password_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.redis_port_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.redis_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServicesConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string listen_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_listen_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.GameServicesConfig.listen_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string redis_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_redis_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.GameServicesConfig.redis_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 redis_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.redis_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string redis_password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_redis_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.GameServicesConfig.redis_password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameServicesConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.GameServicesConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string listen_ip = 1;
  if (!this->_internal_listen_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listen_ip().data(), static_cast<int>(this->_internal_listen_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.GameServicesConfig.listen_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_listen_ip(), target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // string redis_ip = 3;
  if (!this->_internal_redis_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redis_ip().data(), static_cast<int>(this->_internal_redis_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.GameServicesConfig.redis_ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_redis_ip(), target);
  }

  // int32 redis_port = 4;
  if (this->_internal_redis_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_redis_port(), target);
  }

  // string redis_password = 5;
  if (!this->_internal_redis_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redis_password().data(), static_cast<int>(this->_internal_redis_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.GameServicesConfig.redis_password");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_redis_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.GameServicesConfig)
  return target;
}

size_t GameServicesConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.GameServicesConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string listen_ip = 1;
  if (!this->_internal_listen_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_listen_ip());
  }

  // string redis_ip = 3;
  if (!this->_internal_redis_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redis_ip());
  }

  // string redis_password = 5;
  if (!this->_internal_redis_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redis_password());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  // int32 redis_port = 4;
  if (this->_internal_redis_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_redis_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameServicesConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameServicesConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameServicesConfig::GetClassData() const { return &_class_data_; }


void GameServicesConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameServicesConfig*>(&to_msg);
  auto& from = static_cast<const GameServicesConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.GameServicesConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_listen_ip().empty()) {
    _this->_internal_set_listen_ip(from._internal_listen_ip());
  }
  if (!from._internal_redis_ip().empty()) {
    _this->_internal_set_redis_ip(from._internal_redis_ip());
  }
  if (!from._internal_redis_password().empty()) {
    _this->_internal_set_redis_password(from._internal_redis_password());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_redis_port() != 0) {
    _this->_internal_set_redis_port(from._internal_redis_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameServicesConfig::CopyFrom(const GameServicesConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.GameServicesConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServicesConfig::IsInitialized() const {
  return true;
}

void GameServicesConfig::InternalSwap(GameServicesConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.listen_ip_, lhs_arena,
      &other->_impl_.listen_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redis_ip_, lhs_arena,
      &other->_impl_.redis_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redis_password_, lhs_arena,
      &other->_impl_.redis_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServicesConfig, _impl_.redis_port_)
      + sizeof(GameServicesConfig::_impl_.redis_port_)
      - PROTOBUF_FIELD_OFFSET(GameServicesConfig, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServicesConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::idlepb::CommonGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::CommonGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CommonGlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::GameServicesConfig*
Arena::CreateMaybeMessage< ::idlepb::GameServicesConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::GameServicesConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
