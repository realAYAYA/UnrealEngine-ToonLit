// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdd_global.proto

#include "gdd_global.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace idlepb {
PROTOBUF_CONSTEXPR CommonGlobalConfig::CommonGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ts_rpc_max_seconds_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommonGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonGlobalConfigDefaultTypeInternal() {}
  union {
    CommonGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonGlobalConfigDefaultTypeInternal _CommonGlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR CollectionGlobalConfigLevelUpEntry::CollectionGlobalConfigLevelUpEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.degree_limit_)*/0
  , /*decltype(_impl_.stage_limit_)*/0
  , /*decltype(_impl_.cost_item_id_)*/0
  , /*decltype(_impl_.cost_item_num_)*/0
  , /*decltype(_impl_.cost_money_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectionGlobalConfigLevelUpEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionGlobalConfigLevelUpEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionGlobalConfigLevelUpEntryDefaultTypeInternal() {}
  union {
    CollectionGlobalConfigLevelUpEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionGlobalConfigLevelUpEntryDefaultTypeInternal _CollectionGlobalConfigLevelUpEntry_default_instance_;
PROTOBUF_CONSTEXPR CollectionGlobalConfigUpgradeStarCostRequestEntry::CollectionGlobalConfigUpgradeStarCostRequestEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cost_common_piece_num_)*/{}
  , /*decltype(_impl_._cost_common_piece_num_cached_byte_size_)*/{0}
  , /*decltype(_impl_.cost_item_num_)*/0
  , /*decltype(_impl_.cost_self_piece_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectionGlobalConfigUpgradeStarCostRequestEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionGlobalConfigUpgradeStarCostRequestEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionGlobalConfigUpgradeStarCostRequestEntryDefaultTypeInternal() {}
  union {
    CollectionGlobalConfigUpgradeStarCostRequestEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionGlobalConfigUpgradeStarCostRequestEntryDefaultTypeInternal _CollectionGlobalConfigUpgradeStarCostRequestEntry_default_instance_;
PROTOBUF_CONSTEXPR CollectionGlobalConfigUpgradeStarCostEntry::CollectionGlobalConfigUpgradeStarCostEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectionGlobalConfigUpgradeStarCostEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionGlobalConfigUpgradeStarCostEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionGlobalConfigUpgradeStarCostEntryDefaultTypeInternal() {}
  union {
    CollectionGlobalConfigUpgradeStarCostEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionGlobalConfigUpgradeStarCostEntryDefaultTypeInternal _CollectionGlobalConfigUpgradeStarCostEntry_default_instance_;
PROTOBUF_CONSTEXPR CollectionGlobalConfigUpgradeStar::CollectionGlobalConfigUpgradeStar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.common_piece_by_quality_)*/{}
  , /*decltype(_impl_._common_piece_by_quality_cached_byte_size_)*/{0}
  , /*decltype(_impl_.cost_by_quality_)*/{}
  , /*decltype(_impl_.cost_by_quality_skill_)*/{}
  , /*decltype(_impl_.cost_item_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectionGlobalConfigUpgradeStarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionGlobalConfigUpgradeStarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionGlobalConfigUpgradeStarDefaultTypeInternal() {}
  union {
    CollectionGlobalConfigUpgradeStar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionGlobalConfigUpgradeStarDefaultTypeInternal _CollectionGlobalConfigUpgradeStar_default_instance_;
PROTOBUF_CONSTEXPR CollectionGlobalConfigReset::CollectionGlobalConfigReset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cost_ji_yuan_)*/0
  , /*decltype(_impl_.cold_time_seconds_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectionGlobalConfigResetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionGlobalConfigResetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionGlobalConfigResetDefaultTypeInternal() {}
  union {
    CollectionGlobalConfigReset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionGlobalConfigResetDefaultTypeInternal _CollectionGlobalConfigReset_default_instance_;
PROTOBUF_CONSTEXPR CollectionGlobalConfig::CollectionGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.active_by_quality_)*/{}
  , /*decltype(_impl_._active_by_quality_cached_byte_size_)*/{0}
  , /*decltype(_impl_.levelup_)*/{}
  , /*decltype(_impl_.upgrade_star_)*/nullptr
  , /*decltype(_impl_.reset_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectionGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionGlobalConfigDefaultTypeInternal() {}
  union {
    CollectionGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionGlobalConfigDefaultTypeInternal _CollectionGlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR CurrencyGlobalConfigItem2Currency::CurrencyGlobalConfigItem2Currency(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_cfg_id_)*/0
  , /*decltype(_impl_.currency_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CurrencyGlobalConfigItem2CurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrencyGlobalConfigItem2CurrencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrencyGlobalConfigItem2CurrencyDefaultTypeInternal() {}
  union {
    CurrencyGlobalConfigItem2Currency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrencyGlobalConfigItem2CurrencyDefaultTypeInternal _CurrencyGlobalConfigItem2Currency_default_instance_;
PROTOBUF_CONSTEXPR CurrencyGlobalConfig::CurrencyGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item2currency_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CurrencyGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrencyGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrencyGlobalConfigDefaultTypeInternal() {}
  union {
    CurrencyGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrencyGlobalConfigDefaultTypeInternal _CurrencyGlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfigRoleInitAttributes::PlayerGlobalConfigRoleInitAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.mp_)*/0
  , /*decltype(_impl_.phy_att_)*/0
  , /*decltype(_impl_.phy_def_)*/0
  , /*decltype(_impl_.mag_att_)*/0
  , /*decltype(_impl_.mag_def_)*/0
  , /*decltype(_impl_.hp_recover_percent_)*/0
  , /*decltype(_impl_.mp_recover_percent_)*/0
  , /*decltype(_impl_.crit_coef_)*/0
  , /*decltype(_impl_.crit_block_)*/0
  , /*decltype(_impl_.mind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigRoleInitAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigRoleInitAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigRoleInitAttributesDefaultTypeInternal() {}
  union {
    PlayerGlobalConfigRoleInitAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigRoleInitAttributesDefaultTypeInternal _PlayerGlobalConfigRoleInitAttributes_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfigConstants::PlayerGlobalConfigConstants(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.init_radius_)*/0
  , /*decltype(_impl_.auto_move_stop_time_)*/0
  , /*decltype(_impl_.auto_move_walk_time_)*/0
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_.attack_interval_time_)*/0
  , /*decltype(_impl_.auto_heal_trigger_ratio_hp_)*/0
  , /*decltype(_impl_.auto_heal_trigger_ratio_mp_)*/0
  , /*decltype(_impl_.player_lock_distance_hand_)*/0
  , /*decltype(_impl_.player_lock_distance_auto_)*/0
  , /*decltype(_impl_.player_lock_distance_max_)*/0
  , /*decltype(_impl_.player_lock_distance_near_)*/0
  , /*decltype(_impl_.player_lock_distance_screen_)*/0
  , /*decltype(_impl_.enter_scale_size_distance_2d_)*/0
  , /*decltype(_impl_.player_reborn_time_)*/0
  , /*decltype(_impl_.player_reduce_time_)*/0
  , /*decltype(_impl_.player_reduce_num_max_)*/0
  , /*decltype(_impl_.player_escape_time_)*/0
  , /*decltype(_impl_.battle_status_seconds_)*/0
  , /*decltype(_impl_.max_explore_time_)*/0
  , /*decltype(_impl_.player_teleport_cooldown_)*/0
  , /*decltype(_impl_.switch_cultivation_direction_min_rank_)*/0
  , /*decltype(_impl_.server_take_control_idle_seconds_)*/0
  , /*decltype(_impl_.player_location_correction_distance_near_)*/0
  , /*decltype(_impl_.player_location_correction_distance_far_)*/0
  , /*decltype(_impl_.player_correction_cost_speed_)*/0
  , /*decltype(_impl_.mini_map_world_width_)*/0
  , /*decltype(_impl_.mini_map_world_height_)*/0
  , /*decltype(_impl_.activate_entities_distance_)*/0
  , /*decltype(_impl_.select_box_auto_disappear_time_)*/0
  , /*decltype(_impl_.intervene_to_auto_seconds_)*/0
  , /*decltype(_impl_.set_pause_move_function_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigConstantsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigConstantsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigConstantsDefaultTypeInternal() {}
  union {
    PlayerGlobalConfigConstants _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigConstantsDefaultTypeInternal _PlayerGlobalConfigConstants_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfigAbility::PlayerGlobalConfigAbility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slots_unlock_rank_)*/{}
  , /*decltype(_impl_._slots_unlock_rank_cached_byte_size_)*/{0}
  , /*decltype(_impl_.open_rank_)*/0
  , /*decltype(_impl_.open_secondary_rank_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigAbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigAbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigAbilityDefaultTypeInternal() {}
  union {
    PlayerGlobalConfigAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigAbilityDefaultTypeInternal _PlayerGlobalConfigAbility_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfigBreathingExercise::PlayerGlobalConfigBreathingExercise(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.cancel_pct_)*/0
  , /*decltype(_impl_.high_min_pct_)*/0
  , /*decltype(_impl_.perfect_min_pct_)*/0
  , /*decltype(_impl_.perfect_max_pct_)*/0
  , /*decltype(_impl_.rate2_)*/0
  , /*decltype(_impl_.rate5_)*/0
  , /*decltype(_impl_.rate10_)*/0
  , /*decltype(_impl_.basic_ling_qi_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigBreathingExerciseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigBreathingExerciseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigBreathingExerciseDefaultTypeInternal() {}
  union {
    PlayerGlobalConfigBreathingExercise _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigBreathingExerciseDefaultTypeInternal _PlayerGlobalConfigBreathingExercise_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfigThunderTestDegreeConfig::PlayerGlobalConfigThunderTestDegreeConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.degree_)*/0
  , /*decltype(_impl_.val_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigThunderTestDegreeConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigThunderTestDegreeConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigThunderTestDegreeConfigDefaultTypeInternal() {}
  union {
    PlayerGlobalConfigThunderTestDegreeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigThunderTestDegreeConfigDefaultTypeInternal _PlayerGlobalConfigThunderTestDegreeConfig_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfigThunderTest::PlayerGlobalConfigThunderTest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.damage_coef_)*/{}
  , /*decltype(_impl_.damage_base_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigThunderTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigThunderTestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigThunderTestDefaultTypeInternal() {}
  union {
    PlayerGlobalConfigThunderTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigThunderTestDefaultTypeInternal _PlayerGlobalConfigThunderTest_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfigAlchemy::PlayerGlobalConfigAlchemy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.each_refining_seconds_)*/0
  , /*decltype(_impl_.big_chance_value_)*/0
  , /*decltype(_impl_.small_chance_value_)*/0
  , /*decltype(_impl_.max_daily_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigAlchemyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigAlchemyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigAlchemyDefaultTypeInternal() {}
  union {
    PlayerGlobalConfigAlchemy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigAlchemyDefaultTypeInternal _PlayerGlobalConfigAlchemy_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfigForgeDestroyBackItemConfig::PlayerGlobalConfigForgeDestroyBackItemConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.degree_)*/0
  , /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_.item_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigForgeDestroyBackItemConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigForgeDestroyBackItemConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigForgeDestroyBackItemConfigDefaultTypeInternal() {}
  union {
    PlayerGlobalConfigForgeDestroyBackItemConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigForgeDestroyBackItemConfigDefaultTypeInternal _PlayerGlobalConfigForgeDestroyBackItemConfig_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfigForge::PlayerGlobalConfigForge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destroy_get_item_num_)*/{}
  , /*decltype(_impl_.each_refining_seconds_)*/0
  , /*decltype(_impl_.big_chance_value_)*/0
  , /*decltype(_impl_.small_chance_value_)*/0
  , /*decltype(_impl_.max_daily_count_)*/0
  , /*decltype(_impl_.max_daily_extra_materials_use_count_)*/0
  , /*decltype(_impl_.revert_cost_gold_)*/0
  , /*decltype(_impl_.destroy_cost_gold_)*/0
  , /*decltype(_impl_.found_cost_gold_)*/0
  , /*decltype(_impl_.found_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigForgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigForgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigForgeDefaultTypeInternal() {}
  union {
    PlayerGlobalConfigForge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigForgeDefaultTypeInternal _PlayerGlobalConfigForge_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfigFightMode::PlayerGlobalConfigFightMode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.all_mode_require_rank_)*/0
  , /*decltype(_impl_.all_mode_to_peace_mode_need_seconds_)*/0
  , /*decltype(_impl_.mode_change_need_seconds_)*/0
  , /*decltype(_impl_.hate_sustain_seconds_)*/0
  , /*decltype(_impl_.world_speed_unlock_rank_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigFightModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigFightModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigFightModeDefaultTypeInternal() {}
  union {
    PlayerGlobalConfigFightMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigFightModeDefaultTypeInternal _PlayerGlobalConfigFightMode_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfigInventory::PlayerGlobalConfigInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.init_space_)*/0
  , /*decltype(_impl_.stage_up_add_space_)*/0
  , /*decltype(_impl_.full_mail_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigInventoryDefaultTypeInternal() {}
  union {
    PlayerGlobalConfigInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigInventoryDefaultTypeInternal _PlayerGlobalConfigInventory_default_instance_;
PROTOBUF_CONSTEXPR PlayerGlobalConfig::PlayerGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.constants_)*/nullptr
  , /*decltype(_impl_.new_role_init_attrs_)*/nullptr
  , /*decltype(_impl_.ability_)*/nullptr
  , /*decltype(_impl_.breathing_exercise_)*/nullptr
  , /*decltype(_impl_.thunder_test_)*/nullptr
  , /*decltype(_impl_.alchemy_)*/nullptr
  , /*decltype(_impl_.forge_)*/nullptr
  , /*decltype(_impl_.fight_mode_)*/nullptr
  , /*decltype(_impl_.inventory_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGlobalConfigDefaultTypeInternal() {}
  union {
    PlayerGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGlobalConfigDefaultTypeInternal _PlayerGlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR NpcGlobalConfigConstants::NpcGlobalConfigConstants(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.auto_move_stop_time_)*/0
  , /*decltype(_impl_.auto_move_walk_time_)*/0
  , /*decltype(_impl_.walk_speed_)*/0
  , /*decltype(_impl_.attack_interval_time_)*/0
  , /*decltype(_impl_.npc_lock_distance_auto_)*/0
  , /*decltype(_impl_.npc_lock_distance_max_)*/0
  , /*decltype(_impl_.monster_location_correction_distance_near_)*/0
  , /*decltype(_impl_.monster_location_correction_distance_far_)*/0
  , /*decltype(_impl_.monster_correction_cost_speed_)*/0
  , /*decltype(_impl_.phy_default_ability_fullid_)*/0
  , /*decltype(_impl_.mag_default_ability_fullid_)*/0
  , /*decltype(_impl_.default_ability_weight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NpcGlobalConfigConstantsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NpcGlobalConfigConstantsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NpcGlobalConfigConstantsDefaultTypeInternal() {}
  union {
    NpcGlobalConfigConstants _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NpcGlobalConfigConstantsDefaultTypeInternal _NpcGlobalConfigConstants_default_instance_;
PROTOBUF_CONSTEXPR NpcGlobalConfig::NpcGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.constants_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NpcGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NpcGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NpcGlobalConfigDefaultTypeInternal() {}
  union {
    NpcGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NpcGlobalConfigDefaultTypeInternal _NpcGlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR WorldGlobalConfigDungeonCommon::WorldGlobalConfigDungeonCommon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.begin_delay_seconds_)*/0
  , /*decltype(_impl_.end_delay_seconds_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorldGlobalConfigDungeonCommonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldGlobalConfigDungeonCommonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldGlobalConfigDungeonCommonDefaultTypeInternal() {}
  union {
    WorldGlobalConfigDungeonCommon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldGlobalConfigDungeonCommonDefaultTypeInternal _WorldGlobalConfigDungeonCommon_default_instance_;
PROTOBUF_CONSTEXPR WorldGlobalConfig::WorldGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dungeon_common_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorldGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldGlobalConfigDefaultTypeInternal() {}
  union {
    WorldGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldGlobalConfigDefaultTypeInternal _WorldGlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR AppearanceGlobalConfigShopRefreshRule::AppearanceGlobalConfigShopRefreshRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_)*/{}
  , /*decltype(_impl_._num_cached_byte_size_)*/{0}
  , /*decltype(_impl_.weight_)*/{}
  , /*decltype(_impl_._weight_cached_byte_size_)*/{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppearanceGlobalConfigShopRefreshRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppearanceGlobalConfigShopRefreshRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppearanceGlobalConfigShopRefreshRuleDefaultTypeInternal() {}
  union {
    AppearanceGlobalConfigShopRefreshRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppearanceGlobalConfigShopRefreshRuleDefaultTypeInternal _AppearanceGlobalConfigShopRefreshRule_default_instance_;
PROTOBUF_CONSTEXPR AppearanceGlobalConfigModelTypeInfo::AppearanceGlobalConfigModelTypeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_english_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_chinese_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppearanceGlobalConfigModelTypeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppearanceGlobalConfigModelTypeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppearanceGlobalConfigModelTypeInfoDefaultTypeInternal() {}
  union {
    AppearanceGlobalConfigModelTypeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppearanceGlobalConfigModelTypeInfoDefaultTypeInternal _AppearanceGlobalConfigModelTypeInfo_default_instance_;
PROTOBUF_CONSTEXPR AppearanceGlobalConfig::AppearanceGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shop_refresh_rule_)*/{}
  , /*decltype(_impl_.model_type_info_)*/{}
  , /*decltype(_impl_.refund_item_id_)*/0
  , /*decltype(_impl_.shop_item_id_)*/0
  , /*decltype(_impl_.shop_refresh_time_)*/0
  , /*decltype(_impl_.sk_type_change_cd_)*/0
  , /*decltype(_impl_.sk_type_change_item_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppearanceGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppearanceGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppearanceGlobalConfigDefaultTypeInternal() {}
  union {
    AppearanceGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppearanceGlobalConfigDefaultTypeInternal _AppearanceGlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR FarmGlobalConfig::FarmGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.default_unlock_farmland_index_)*/{}
  , /*decltype(_impl_._default_unlock_farmland_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.unlock_farmland_cost_item_num_)*/{}
  , /*decltype(_impl_._unlock_farmland_cost_item_num_cached_byte_size_)*/{0}
  , /*decltype(_impl_.cost_per_watering_)*/{}
  , /*decltype(_impl_._cost_per_watering_cached_byte_size_)*/{0}
  , /*decltype(_impl_.farmland_shape_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.farmland_seed_shape_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.add_speed_from_item_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unlock_farmland_cost_item_id_)*/0
  , /*decltype(_impl_.watering_times_per_day_)*/0
  , /*decltype(_impl_.add_speed_per_watering_)*/0
  , /*decltype(_impl_.min_seed_plant_time_percent_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FarmGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FarmGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FarmGlobalConfigDefaultTypeInternal() {}
  union {
    FarmGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FarmGlobalConfigDefaultTypeInternal _FarmGlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR FriendsGlobalConfig::FriendsGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_friend_num_)*/0
  , /*decltype(_impl_.daily_search_count_)*/0
  , /*decltype(_impl_.max_apply_count_)*/0
  , /*decltype(_impl_.max_block_list_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendsGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendsGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendsGlobalConfigDefaultTypeInternal() {}
  union {
    FriendsGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendsGlobalConfigDefaultTypeInternal _FriendsGlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR AvatarStageCountDiff::AvatarStageCountDiff(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.diff_num_)*/0
  , /*decltype(_impl_.coef_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AvatarStageCountDiffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvatarStageCountDiffDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvatarStageCountDiffDefaultTypeInternal() {}
  union {
    AvatarStageCountDiff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvatarStageCountDiffDefaultTypeInternal _AvatarStageCountDiff_default_instance_;
PROTOBUF_CONSTEXPR AnotherMeGlobalConfig::AnotherMeGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stage_count_diff_)*/{}
  , /*decltype(_impl_.temp_package_max_)*/0
  , /*decltype(_impl_.idle_time_max_)*/0
  , /*decltype(_impl_.idle_time_duration_)*/0
  , /*decltype(_impl_.default_draw_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnotherMeGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnotherMeGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnotherMeGlobalConfigDefaultTypeInternal() {}
  union {
    AnotherMeGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnotherMeGlobalConfigDefaultTypeInternal _AnotherMeGlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR FuZeRewardNum::FuZeRewardNum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FuZeRewardNumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FuZeRewardNumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FuZeRewardNumDefaultTypeInternal() {}
  union {
    FuZeRewardNum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FuZeRewardNumDefaultTypeInternal _FuZeRewardNum_default_instance_;
PROTOBUF_CONSTEXPR FuZeRewardItemId::FuZeRewardItemId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.degree_)*/0
  , /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FuZeRewardItemIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FuZeRewardItemIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FuZeRewardItemIdDefaultTypeInternal() {}
  union {
    FuZeRewardItemId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FuZeRewardItemIdDefaultTypeInternal _FuZeRewardItemId_default_instance_;
PROTOBUF_CONSTEXPR FuZeGlobalConfig::FuZeGlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reward_num_)*/{}
  , /*decltype(_impl_.reward_id_)*/{}
  , /*decltype(_impl_.fuze_rank_num_)*/0
  , /*decltype(_impl_.fuze_rank_ratio_)*/0
  , /*decltype(_impl_.fenqi_exp_ratio_)*/0
  , /*decltype(_impl_.fuze_rank_min_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FuZeGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FuZeGlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FuZeGlobalConfigDefaultTypeInternal() {}
  union {
    FuZeGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FuZeGlobalConfigDefaultTypeInternal _FuZeGlobalConfig_default_instance_;
}  // namespace idlepb
static ::_pb::Metadata file_level_metadata_gdd_5fglobal_2eproto[35];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gdd_5fglobal_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gdd_5fglobal_2eproto = nullptr;

const uint32_t TableStruct_gdd_5fglobal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CommonGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CommonGlobalConfig, _impl_.ts_rpc_max_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigLevelUpEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigLevelUpEntry, _impl_.degree_limit_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigLevelUpEntry, _impl_.stage_limit_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigLevelUpEntry, _impl_.cost_item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigLevelUpEntry, _impl_.cost_item_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigLevelUpEntry, _impl_.cost_money_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry, _impl_.cost_item_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry, _impl_.cost_self_piece_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry, _impl_.cost_common_piece_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigUpgradeStarCostEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigUpgradeStarCostEntry, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigUpgradeStar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigUpgradeStar, _impl_.cost_item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigUpgradeStar, _impl_.common_piece_by_quality_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigUpgradeStar, _impl_.cost_by_quality_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigUpgradeStar, _impl_.cost_by_quality_skill_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigReset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigReset, _impl_.cost_ji_yuan_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfigReset, _impl_.cold_time_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfig, _impl_.active_by_quality_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfig, _impl_.levelup_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfig, _impl_.upgrade_star_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionGlobalConfig, _impl_.reset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CurrencyGlobalConfigItem2Currency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CurrencyGlobalConfigItem2Currency, _impl_.item_cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CurrencyGlobalConfigItem2Currency, _impl_.currency_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CurrencyGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CurrencyGlobalConfig, _impl_.item2currency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _impl_.mp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _impl_.phy_att_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _impl_.phy_def_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _impl_.mag_att_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _impl_.mag_def_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _impl_.hp_recover_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _impl_.mp_recover_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _impl_.crit_coef_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _impl_.crit_block_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigRoleInitAttributes, _impl_.mind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.init_radius_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.auto_move_stop_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.auto_move_walk_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.move_speed_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.attack_interval_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.auto_heal_trigger_ratio_hp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.auto_heal_trigger_ratio_mp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_lock_distance_hand_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_lock_distance_auto_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_lock_distance_max_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_lock_distance_near_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_lock_distance_screen_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.enter_scale_size_distance_2d_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_reborn_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_reduce_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_reduce_num_max_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_escape_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.battle_status_seconds_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.max_explore_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_teleport_cooldown_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.switch_cultivation_direction_min_rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.server_take_control_idle_seconds_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_location_correction_distance_near_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_location_correction_distance_far_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.player_correction_cost_speed_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.mini_map_world_width_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.mini_map_world_height_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.activate_entities_distance_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.select_box_auto_disappear_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.intervene_to_auto_seconds_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigConstants, _impl_.set_pause_move_function_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigAbility, _impl_.open_rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigAbility, _impl_.open_secondary_rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigAbility, _impl_.slots_unlock_rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigBreathingExercise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigBreathingExercise, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigBreathingExercise, _impl_.cancel_pct_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigBreathingExercise, _impl_.high_min_pct_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigBreathingExercise, _impl_.perfect_min_pct_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigBreathingExercise, _impl_.perfect_max_pct_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigBreathingExercise, _impl_.rate2_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigBreathingExercise, _impl_.rate5_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigBreathingExercise, _impl_.rate10_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigBreathingExercise, _impl_.basic_ling_qi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigThunderTestDegreeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigThunderTestDegreeConfig, _impl_.degree_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigThunderTestDegreeConfig, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigThunderTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigThunderTest, _impl_.damage_coef_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigThunderTest, _impl_.damage_base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigAlchemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigAlchemy, _impl_.each_refining_seconds_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigAlchemy, _impl_.big_chance_value_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigAlchemy, _impl_.small_chance_value_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigAlchemy, _impl_.max_daily_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig, _impl_.degree_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig, _impl_.item_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForge, _impl_.each_refining_seconds_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForge, _impl_.big_chance_value_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForge, _impl_.small_chance_value_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForge, _impl_.max_daily_count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForge, _impl_.max_daily_extra_materials_use_count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForge, _impl_.revert_cost_gold_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForge, _impl_.destroy_cost_gold_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForge, _impl_.destroy_get_item_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForge, _impl_.found_cost_gold_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigForge, _impl_.found_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigFightMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigFightMode, _impl_.all_mode_require_rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigFightMode, _impl_.all_mode_to_peace_mode_need_seconds_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigFightMode, _impl_.mode_change_need_seconds_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigFightMode, _impl_.hate_sustain_seconds_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigFightMode, _impl_.world_speed_unlock_rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigInventory, _impl_.init_space_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigInventory, _impl_.stage_up_add_space_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfigInventory, _impl_.full_mail_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfig, _impl_.constants_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfig, _impl_.new_role_init_attrs_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfig, _impl_.ability_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfig, _impl_.breathing_exercise_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfig, _impl_.thunder_test_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfig, _impl_.alchemy_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfig, _impl_.forge_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfig, _impl_.fight_mode_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerGlobalConfig, _impl_.inventory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.auto_move_stop_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.auto_move_walk_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.walk_speed_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.attack_interval_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.npc_lock_distance_auto_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.npc_lock_distance_max_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.monster_location_correction_distance_near_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.monster_location_correction_distance_far_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.monster_correction_cost_speed_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.phy_default_ability_fullid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.mag_default_ability_fullid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfigConstants, _impl_.default_ability_weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::NpcGlobalConfig, _impl_.constants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::WorldGlobalConfigDungeonCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::WorldGlobalConfigDungeonCommon, _impl_.begin_delay_seconds_),
  PROTOBUF_FIELD_OFFSET(::idlepb::WorldGlobalConfigDungeonCommon, _impl_.end_delay_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::WorldGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::WorldGlobalConfig, _impl_.dungeon_common_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfigShopRefreshRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfigShopRefreshRule, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfigShopRefreshRule, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfigShopRefreshRule, _impl_.weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfigModelTypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfigModelTypeInfo, _impl_.model_type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfigModelTypeInfo, _impl_.name_english_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfigModelTypeInfo, _impl_.name_chinese_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfig, _impl_.refund_item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfig, _impl_.shop_item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfig, _impl_.shop_refresh_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfig, _impl_.sk_type_change_cd_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfig, _impl_.sk_type_change_item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfig, _impl_.shop_refresh_rule_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceGlobalConfig, _impl_.model_type_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmGlobalConfig, _impl_.farmland_shape_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmGlobalConfig, _impl_.default_unlock_farmland_index_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmGlobalConfig, _impl_.unlock_farmland_cost_item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmGlobalConfig, _impl_.unlock_farmland_cost_item_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmGlobalConfig, _impl_.farmland_seed_shape_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmGlobalConfig, _impl_.watering_times_per_day_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmGlobalConfig, _impl_.cost_per_watering_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmGlobalConfig, _impl_.add_speed_per_watering_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmGlobalConfig, _impl_.add_speed_from_item_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmGlobalConfig, _impl_.min_seed_plant_time_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::FriendsGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::FriendsGlobalConfig, _impl_.max_friend_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FriendsGlobalConfig, _impl_.daily_search_count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FriendsGlobalConfig, _impl_.max_apply_count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FriendsGlobalConfig, _impl_.max_block_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AvatarStageCountDiff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AvatarStageCountDiff, _impl_.diff_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AvatarStageCountDiff, _impl_.coef_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AnotherMeGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AnotherMeGlobalConfig, _impl_.temp_package_max_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AnotherMeGlobalConfig, _impl_.idle_time_max_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AnotherMeGlobalConfig, _impl_.idle_time_duration_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AnotherMeGlobalConfig, _impl_.default_draw_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AnotherMeGlobalConfig, _impl_.stage_count_diff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeRewardNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeRewardNum, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeRewardNum, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeRewardItemId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeRewardItemId, _impl_.degree_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeRewardItemId, _impl_.item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeGlobalConfig, _impl_.reward_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeGlobalConfig, _impl_.reward_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeGlobalConfig, _impl_.fuze_rank_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeGlobalConfig, _impl_.fuze_rank_ratio_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeGlobalConfig, _impl_.fenqi_exp_ratio_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZeGlobalConfig, _impl_.fuze_rank_min_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::idlepb::CommonGlobalConfig)},
  { 7, -1, -1, sizeof(::idlepb::CollectionGlobalConfigLevelUpEntry)},
  { 18, -1, -1, sizeof(::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry)},
  { 27, -1, -1, sizeof(::idlepb::CollectionGlobalConfigUpgradeStarCostEntry)},
  { 34, -1, -1, sizeof(::idlepb::CollectionGlobalConfigUpgradeStar)},
  { 44, -1, -1, sizeof(::idlepb::CollectionGlobalConfigReset)},
  { 52, -1, -1, sizeof(::idlepb::CollectionGlobalConfig)},
  { 62, -1, -1, sizeof(::idlepb::CurrencyGlobalConfigItem2Currency)},
  { 70, -1, -1, sizeof(::idlepb::CurrencyGlobalConfig)},
  { 77, -1, -1, sizeof(::idlepb::PlayerGlobalConfigRoleInitAttributes)},
  { 94, -1, -1, sizeof(::idlepb::PlayerGlobalConfigConstants)},
  { 131, -1, -1, sizeof(::idlepb::PlayerGlobalConfigAbility)},
  { 140, -1, -1, sizeof(::idlepb::PlayerGlobalConfigBreathingExercise)},
  { 155, -1, -1, sizeof(::idlepb::PlayerGlobalConfigThunderTestDegreeConfig)},
  { 163, -1, -1, sizeof(::idlepb::PlayerGlobalConfigThunderTest)},
  { 171, -1, -1, sizeof(::idlepb::PlayerGlobalConfigAlchemy)},
  { 181, -1, -1, sizeof(::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig)},
  { 190, -1, -1, sizeof(::idlepb::PlayerGlobalConfigForge)},
  { 206, -1, -1, sizeof(::idlepb::PlayerGlobalConfigFightMode)},
  { 217, -1, -1, sizeof(::idlepb::PlayerGlobalConfigInventory)},
  { 226, -1, -1, sizeof(::idlepb::PlayerGlobalConfig)},
  { 241, -1, -1, sizeof(::idlepb::NpcGlobalConfigConstants)},
  { 259, -1, -1, sizeof(::idlepb::NpcGlobalConfig)},
  { 266, -1, -1, sizeof(::idlepb::WorldGlobalConfigDungeonCommon)},
  { 274, -1, -1, sizeof(::idlepb::WorldGlobalConfig)},
  { 281, -1, -1, sizeof(::idlepb::AppearanceGlobalConfigShopRefreshRule)},
  { 290, -1, -1, sizeof(::idlepb::AppearanceGlobalConfigModelTypeInfo)},
  { 299, -1, -1, sizeof(::idlepb::AppearanceGlobalConfig)},
  { 312, -1, -1, sizeof(::idlepb::FarmGlobalConfig)},
  { 328, -1, -1, sizeof(::idlepb::FriendsGlobalConfig)},
  { 338, -1, -1, sizeof(::idlepb::AvatarStageCountDiff)},
  { 346, -1, -1, sizeof(::idlepb::AnotherMeGlobalConfig)},
  { 357, -1, -1, sizeof(::idlepb::FuZeRewardNum)},
  { 365, -1, -1, sizeof(::idlepb::FuZeRewardItemId)},
  { 373, -1, -1, sizeof(::idlepb::FuZeGlobalConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::idlepb::_CommonGlobalConfig_default_instance_._instance,
  &::idlepb::_CollectionGlobalConfigLevelUpEntry_default_instance_._instance,
  &::idlepb::_CollectionGlobalConfigUpgradeStarCostRequestEntry_default_instance_._instance,
  &::idlepb::_CollectionGlobalConfigUpgradeStarCostEntry_default_instance_._instance,
  &::idlepb::_CollectionGlobalConfigUpgradeStar_default_instance_._instance,
  &::idlepb::_CollectionGlobalConfigReset_default_instance_._instance,
  &::idlepb::_CollectionGlobalConfig_default_instance_._instance,
  &::idlepb::_CurrencyGlobalConfigItem2Currency_default_instance_._instance,
  &::idlepb::_CurrencyGlobalConfig_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfigRoleInitAttributes_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfigConstants_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfigAbility_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfigBreathingExercise_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfigThunderTestDegreeConfig_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfigThunderTest_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfigAlchemy_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfigForgeDestroyBackItemConfig_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfigForge_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfigFightMode_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfigInventory_default_instance_._instance,
  &::idlepb::_PlayerGlobalConfig_default_instance_._instance,
  &::idlepb::_NpcGlobalConfigConstants_default_instance_._instance,
  &::idlepb::_NpcGlobalConfig_default_instance_._instance,
  &::idlepb::_WorldGlobalConfigDungeonCommon_default_instance_._instance,
  &::idlepb::_WorldGlobalConfig_default_instance_._instance,
  &::idlepb::_AppearanceGlobalConfigShopRefreshRule_default_instance_._instance,
  &::idlepb::_AppearanceGlobalConfigModelTypeInfo_default_instance_._instance,
  &::idlepb::_AppearanceGlobalConfig_default_instance_._instance,
  &::idlepb::_FarmGlobalConfig_default_instance_._instance,
  &::idlepb::_FriendsGlobalConfig_default_instance_._instance,
  &::idlepb::_AvatarStageCountDiff_default_instance_._instance,
  &::idlepb::_AnotherMeGlobalConfig_default_instance_._instance,
  &::idlepb::_FuZeRewardNum_default_instance_._instance,
  &::idlepb::_FuZeRewardItemId_default_instance_._instance,
  &::idlepb::_FuZeGlobalConfig_default_instance_._instance,
};

const char descriptor_table_protodef_gdd_5fglobal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gdd_global.proto\022\006idlepb\032\rdefines.prot"
  "o\032\014common.proto\"0\n\022CommonGlobalConfig\022\032\n"
  "\022ts_rpc_max_seconds\030\001 \001(\002\"\220\001\n\"Collection"
  "GlobalConfigLevelUpEntry\022\024\n\014degree_limit"
  "\030\001 \001(\005\022\023\n\013stage_limit\030\002 \001(\005\022\024\n\014cost_item"
  "_id\030\003 \001(\005\022\025\n\rcost_item_num\030\004 \001(\005\022\022\n\ncost"
  "_money\030\005 \001(\005\"\206\001\n1CollectionGlobalConfigU"
  "pgradeStarCostRequestEntry\022\025\n\rcost_item_"
  "num\030\001 \001(\005\022\033\n\023cost_self_piece_num\030\002 \001(\005\022\035"
  "\n\025cost_common_piece_num\030\003 \003(\005\"x\n*Collect"
  "ionGlobalConfigUpgradeStarCostEntry\022J\n\007r"
  "equest\030\001 \003(\01329.idlepb.CollectionGlobalCo"
  "nfigUpgradeStarCostRequestEntry\"\372\001\n!Coll"
  "ectionGlobalConfigUpgradeStar\022\024\n\014cost_it"
  "em_id\030\001 \001(\005\022\037\n\027common_piece_by_quality\030\002"
  " \003(\005\022K\n\017cost_by_quality\030\003 \003(\01322.idlepb.C"
  "ollectionGlobalConfigUpgradeStarCostEntr"
  "y\022Q\n\025cost_by_quality_skill\030\004 \003(\01322.idlep"
  "b.CollectionGlobalConfigUpgradeStarCostE"
  "ntry\"N\n\033CollectionGlobalConfigReset\022\024\n\014c"
  "ost_ji_yuan\030\001 \001(\005\022\031\n\021cold_time_seconds\030\002"
  " \001(\005\"\345\001\n\026CollectionGlobalConfig\022\031\n\021activ"
  "e_by_quality\030\001 \003(\005\022;\n\007levelup\030\002 \003(\0132*.id"
  "lepb.CollectionGlobalConfigLevelUpEntry\022"
  "\?\n\014upgrade_star\030\003 \001(\0132).idlepb.Collectio"
  "nGlobalConfigUpgradeStar\0222\n\005reset\030\004 \001(\0132"
  "#.idlepb.CollectionGlobalConfigReset\"e\n!"
  "CurrencyGlobalConfigItem2Currency\022\023\n\013ite"
  "m_cfg_id\030\001 \001(\005\022+\n\rcurrency_type\030\002 \001(\0162\024."
  "idlepb.CurrencyType\"X\n\024CurrencyGlobalCon"
  "fig\022@\n\ritem2currency\030\001 \003(\0132).idlepb.Curr"
  "encyGlobalConfigItem2Currency\"\357\001\n$Player"
  "GlobalConfigRoleInitAttributes\022\n\n\002hp\030\001 \001"
  "(\002\022\n\n\002mp\030\002 \001(\002\022\017\n\007phy_att\030\003 \001(\002\022\017\n\007phy_d"
  "ef\030\004 \001(\002\022\017\n\007mag_att\030\005 \001(\002\022\017\n\007mag_def\030\006 \001"
  "(\002\022\032\n\022hp_recover_percent\030\007 \001(\002\022\032\n\022mp_rec"
  "over_percent\030\010 \001(\002\022\021\n\tcrit_coef\030\t \001(\002\022\022\n"
  "\ncrit_block\030\n \001(\002\022\014\n\004mind\030\013 \001(\002\"\276\010\n\033Play"
  "erGlobalConfigConstants\022\023\n\013init_radius\030\001"
  " \001(\002\022\033\n\023auto_move_stop_time\030\002 \001(\002\022\033\n\023aut"
  "o_move_walk_time\030\003 \001(\002\022\022\n\nmove_speed\030\004 \001"
  "(\005\022\034\n\024attack_interval_time\030\005 \001(\002\022\"\n\032auto"
  "_heal_trigger_ratio_hp\030\006 \001(\002\022\"\n\032auto_hea"
  "l_trigger_ratio_mp\030\007 \001(\002\022!\n\031player_lock_"
  "distance_hand\030\010 \001(\002\022!\n\031player_lock_dista"
  "nce_auto\030\t \001(\002\022 \n\030player_lock_distance_m"
  "ax\030\n \001(\002\022!\n\031player_lock_distance_near\030\013 "
  "\001(\002\022#\n\033player_lock_distance_screen\030\014 \001(\002"
  "\022$\n\034enter_scale_size_distance_2d\030\r \001(\002\022\032"
  "\n\022player_reborn_time\030\016 \001(\002\022\032\n\022player_red"
  "uce_time\030\017 \001(\002\022\035\n\025player_reduce_num_max\030"
  "\020 \001(\002\022\032\n\022player_escape_time\030\021 \001(\002\022\035\n\025bat"
  "tle_status_seconds\030\022 \001(\002\022\030\n\020max_explore_"
  "time\030\023 \001(\005\022 \n\030player_teleport_cooldown\030\024"
  " \001(\002\022-\n%switch_cultivation_direction_min"
  "_rank\030\025 \001(\005\022(\n server_take_control_idle_"
  "seconds\030\026 \001(\002\0220\n(player_location_correct"
  "ion_distance_near\030\027 \001(\002\022/\n\'player_locati"
  "on_correction_distance_far\030\030 \001(\002\022$\n\034play"
  "er_correction_cost_speed\030\031 \001(\002\022\034\n\024mini_m"
  "ap_world_width\030\032 \001(\002\022\035\n\025mini_map_world_h"
  "eight\030\033 \001(\002\022\"\n\032activate_entities_distanc"
  "e\030\034 \001(\002\022&\n\036select_box_auto_disappear_tim"
  "e\030\035 \001(\002\022!\n\031intervene_to_auto_seconds\030\036 \001"
  "(\002\022$\n\034set_pause_move_function_time\030\037 \001(\002"
  "\"f\n\031PlayerGlobalConfigAbility\022\021\n\topen_ra"
  "nk\030\001 \001(\005\022\033\n\023open_secondary_rank\030\002 \001(\005\022\031\n"
  "\021slots_unlock_rank\030\003 \003(\005\"\325\001\n#PlayerGloba"
  "lConfigBreathingExercise\022\r\n\005speed\030\001 \001(\002\022"
  "\022\n\ncancel_pct\030\002 \001(\002\022\024\n\014high_min_pct\030\003 \001("
  "\002\022\027\n\017perfect_min_pct\030\004 \001(\002\022\027\n\017perfect_ma"
  "x_pct\030\005 \001(\002\022\r\n\005rate2\030\006 \001(\005\022\r\n\005rate5\030\007 \001("
  "\005\022\016\n\006rate10\030\010 \001(\005\022\025\n\rbasic_ling_qi\030\t \001(\002"
  "\"H\n)PlayerGlobalConfigThunderTestDegreeC"
  "onfig\022\016\n\006degree\030\001 \001(\005\022\013\n\003val\030\002 \001(\002\"|\n\035Pl"
  "ayerGlobalConfigThunderTest\022\023\n\013damage_co"
  "ef\030\001 \003(\002\022F\n\013damage_base\030\002 \003(\01321.idlepb.P"
  "layerGlobalConfigThunderTestDegreeConfig"
  "\"\211\001\n\031PlayerGlobalConfigAlchemy\022\035\n\025each_r"
  "efining_seconds\030\001 \001(\002\022\030\n\020big_chance_valu"
  "e\030\002 \001(\005\022\032\n\022small_chance_value\030\003 \001(\005\022\027\n\017m"
  "ax_daily_count\030\004 \001(\005\"a\n,PlayerGlobalConf"
  "igForgeDestroyBackItemConfig\022\016\n\006degree\030\001"
  " \001(\005\022\017\n\007item_id\030\002 \001(\005\022\020\n\010item_num\030\003 \001(\005\""
  "\352\002\n\027PlayerGlobalConfigForge\022\035\n\025each_refi"
  "ning_seconds\030\001 \001(\002\022\030\n\020big_chance_value\030\002"
  " \001(\005\022\032\n\022small_chance_value\030\003 \001(\005\022\027\n\017max_"
  "daily_count\030\004 \001(\005\022+\n#max_daily_extra_mat"
  "erials_use_count\030\005 \001(\005\022\030\n\020revert_cost_go"
  "ld\030\006 \001(\005\022\031\n\021destroy_cost_gold\030\007 \001(\005\022R\n\024d"
  "estroy_get_item_num\030\010 \003(\01324.idlepb.Playe"
  "rGlobalConfigForgeDestroyBackItemConfig\022"
  "\027\n\017found_cost_gold\030\t \001(\005\022\022\n\nfound_time\030\n"
  " \001(\005\"\312\001\n\033PlayerGlobalConfigFightMode\022\035\n\025"
  "all_mode_require_rank\030\001 \001(\005\022+\n#all_mode_"
  "to_peace_mode_need_seconds\030\002 \001(\002\022 \n\030mode"
  "_change_need_seconds\030\003 \001(\002\022\034\n\024hate_susta"
  "in_seconds\030\004 \001(\002\022\037\n\027world_speed_unlock_r"
  "ank\030\005 \001(\005\"c\n\033PlayerGlobalConfigInventory"
  "\022\022\n\ninit_space\030\001 \001(\005\022\032\n\022stage_up_add_spa"
  "ce\030\002 \001(\005\022\024\n\014full_mail_id\030\003 \001(\005\"\246\004\n\022Playe"
  "rGlobalConfig\0226\n\tconstants\030\001 \001(\0132#.idlep"
  "b.PlayerGlobalConfigConstants\022I\n\023new_rol"
  "e_init_attrs\030\002 \001(\0132,.idlepb.PlayerGlobal"
  "ConfigRoleInitAttributes\0222\n\007ability\030\003 \001("
  "\0132!.idlepb.PlayerGlobalConfigAbility\022G\n\022"
  "breathing_exercise\030\004 \001(\0132+.idlepb.Player"
  "GlobalConfigBreathingExercise\022;\n\014thunder"
  "_test\030\005 \001(\0132%.idlepb.PlayerGlobalConfigT"
  "hunderTest\0222\n\007alchemy\030\006 \001(\0132!.idlepb.Pla"
  "yerGlobalConfigAlchemy\022.\n\005forge\030\007 \001(\0132\037."
  "idlepb.PlayerGlobalConfigForge\0227\n\nfight_"
  "mode\030\010 \001(\0132#.idlepb.PlayerGlobalConfigFi"
  "ghtMode\0226\n\tinventory\030\t \001(\0132#.idlepb.Play"
  "erGlobalConfigInventory\"\271\003\n\030NpcGlobalCon"
  "figConstants\022\033\n\023auto_move_stop_time\030\001 \001("
  "\002\022\033\n\023auto_move_walk_time\030\002 \001(\002\022\022\n\nwalk_s"
  "peed\030\003 \001(\005\022\034\n\024attack_interval_time\030\004 \001(\002"
  "\022\036\n\026npc_lock_distance_auto\030\005 \001(\002\022\035\n\025npc_"
  "lock_distance_max\030\006 \001(\002\0221\n)monster_locat"
  "ion_correction_distance_near\030\007 \001(\002\0220\n(mo"
  "nster_location_correction_distance_far\030\010"
  " \001(\002\022%\n\035monster_correction_cost_speed\030\t "
  "\001(\002\022\"\n\032phy_default_ability_fullid\030\n \001(\002\022"
  "\"\n\032mag_default_ability_fullid\030\013 \001(\002\022\036\n\026d"
  "efault_ability_weight\030\014 \001(\005\"F\n\017NpcGlobal"
  "Config\0223\n\tconstants\030\001 \001(\0132 .idlepb.NpcGl"
  "obalConfigConstants\"X\n\036WorldGlobalConfig"
  "DungeonCommon\022\033\n\023begin_delay_seconds\030\001 \001"
  "(\002\022\031\n\021end_delay_seconds\030\002 \001(\002\"S\n\021WorldGl"
  "obalConfig\022>\n\016dungeon_common\030\001 \001(\0132&.idl"
  "epb.WorldGlobalConfigDungeonCommon\"R\n%Ap"
  "pearanceGlobalConfigShopRefreshRule\022\014\n\004t"
  "ype\030\001 \001(\005\022\013\n\003num\030\002 \003(\005\022\016\n\006weight\030\003 \003(\005\"e"
  "\n#AppearanceGlobalConfigModelTypeInfo\022\022\n"
  "\nmodel_type\030\001 \001(\005\022\024\n\014name_english\030\002 \001(\t\022"
  "\024\n\014name_chinese\030\003 \001(\t\"\254\002\n\026AppearanceGlob"
  "alConfig\022\026\n\016refund_item_id\030\001 \001(\005\022\024\n\014shop"
  "_item_id\030\002 \001(\005\022\031\n\021shop_refresh_time\030\003 \001("
  "\005\022\031\n\021sk_type_change_cd\030\004 \001(\005\022\036\n\026sk_type_"
  "change_item_id\030\005 \001(\005\022H\n\021shop_refresh_rul"
  "e\030\006 \003(\0132-.idlepb.AppearanceGlobalConfigS"
  "hopRefreshRule\022D\n\017model_type_info\030\007 \003(\0132"
  "+.idlepb.AppearanceGlobalConfigModelType"
  "Info\"\330\002\n\020FarmGlobalConfig\022\026\n\016farmland_sh"
  "ape\030\001 \001(\t\022%\n\035default_unlock_farmland_ind"
  "ex\030\002 \003(\005\022$\n\034unlock_farmland_cost_item_id"
  "\030\003 \001(\005\022%\n\035unlock_farmland_cost_item_num\030"
  "\004 \003(\005\022\033\n\023farmland_seed_shape\030\005 \001(\t\022\036\n\026wa"
  "tering_times_per_day\030\006 \001(\005\022\031\n\021cost_per_w"
  "atering\030\007 \003(\005\022\036\n\026add_speed_per_watering\030"
  "\010 \001(\005\022\033\n\023add_speed_from_item\030\t \001(\t\022#\n\033mi"
  "n_seed_plant_time_percent\030\n \001(\002\"z\n\023Frien"
  "dsGlobalConfig\022\026\n\016max_friend_num\030\001 \001(\005\022\032"
  "\n\022daily_search_count\030\002 \001(\005\022\027\n\017max_apply_"
  "count\030\003 \001(\005\022\026\n\016max_block_list\030\004 \001(\005\"6\n\024A"
  "vatarStageCountDiff\022\020\n\010diff_num\030\001 \001(\005\022\014\n"
  "\004coef\030\002 \001(\002\"\267\001\n\025AnotherMeGlobalConfig\022\030\n"
  "\020temp_package_max\030\001 \001(\005\022\025\n\ridle_time_max"
  "\030\002 \001(\005\022\032\n\022idle_time_duration\030\003 \001(\005\022\031\n\021de"
  "fault_draw_time\030\004 \001(\005\0226\n\020stage_count_dif"
  "f\030\005 \003(\0132\034.idlepb.AvatarStageCountDiff\"*\n"
  "\rFuZeRewardNum\022\014\n\004rank\030\001 \001(\005\022\013\n\003num\030\002 \001("
  "\005\"3\n\020FuZeRewardItemId\022\016\n\006degree\030\001 \001(\005\022\017\n"
  "\007item_id\030\002 \001(\005\"\312\001\n\020FuZeGlobalConfig\022)\n\nr"
  "eward_num\030\001 \003(\0132\025.idlepb.FuZeRewardNum\022+"
  "\n\treward_id\030\002 \003(\0132\030.idlepb.FuZeRewardIte"
  "mId\022\025\n\rfuze_rank_num\030\003 \001(\005\022\027\n\017fuze_rank_"
  "ratio\030\004 \001(\002\022\027\n\017fenqi_exp_ratio\030\005 \001(\002\022\025\n\r"
  "fuze_rank_min\030\006 \001(\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gdd_5fglobal_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_defines_2eproto,
};
static ::_pbi::once_flag descriptor_table_gdd_5fglobal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gdd_5fglobal_2eproto = {
    false, false, 6787, descriptor_table_protodef_gdd_5fglobal_2eproto,
    "gdd_global.proto",
    &descriptor_table_gdd_5fglobal_2eproto_once, descriptor_table_gdd_5fglobal_2eproto_deps, 2, 35,
    schemas, file_default_instances, TableStruct_gdd_5fglobal_2eproto::offsets,
    file_level_metadata_gdd_5fglobal_2eproto, file_level_enum_descriptors_gdd_5fglobal_2eproto,
    file_level_service_descriptors_gdd_5fglobal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gdd_5fglobal_2eproto_getter() {
  return &descriptor_table_gdd_5fglobal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gdd_5fglobal_2eproto(&descriptor_table_gdd_5fglobal_2eproto);
namespace idlepb {

// ===================================================================

class CommonGlobalConfig::_Internal {
 public:
};

CommonGlobalConfig::CommonGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CommonGlobalConfig)
}
CommonGlobalConfig::CommonGlobalConfig(const CommonGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommonGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ts_rpc_max_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ts_rpc_max_seconds_ = from._impl_.ts_rpc_max_seconds_;
  // @@protoc_insertion_point(copy_constructor:idlepb.CommonGlobalConfig)
}

inline void CommonGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ts_rpc_max_seconds_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommonGlobalConfig::~CommonGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.CommonGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommonGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CommonGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ts_rpc_max_seconds_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float ts_rpc_max_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.ts_rpc_max_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CommonGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float ts_rpc_max_seconds = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ts_rpc_max_seconds = this->_internal_ts_rpc_max_seconds();
  uint32_t raw_ts_rpc_max_seconds;
  memcpy(&raw_ts_rpc_max_seconds, &tmp_ts_rpc_max_seconds, sizeof(tmp_ts_rpc_max_seconds));
  if (raw_ts_rpc_max_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_ts_rpc_max_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CommonGlobalConfig)
  return target;
}

size_t CommonGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CommonGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float ts_rpc_max_seconds = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ts_rpc_max_seconds = this->_internal_ts_rpc_max_seconds();
  uint32_t raw_ts_rpc_max_seconds;
  memcpy(&raw_ts_rpc_max_seconds, &tmp_ts_rpc_max_seconds, sizeof(tmp_ts_rpc_max_seconds));
  if (raw_ts_rpc_max_seconds != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommonGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonGlobalConfig::GetClassData() const { return &_class_data_; }


void CommonGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommonGlobalConfig*>(&to_msg);
  auto& from = static_cast<const CommonGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CommonGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ts_rpc_max_seconds = from._internal_ts_rpc_max_seconds();
  uint32_t raw_ts_rpc_max_seconds;
  memcpy(&raw_ts_rpc_max_seconds, &tmp_ts_rpc_max_seconds, sizeof(tmp_ts_rpc_max_seconds));
  if (raw_ts_rpc_max_seconds != 0) {
    _this->_internal_set_ts_rpc_max_seconds(from._internal_ts_rpc_max_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonGlobalConfig::CopyFrom(const CommonGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CommonGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonGlobalConfig::IsInitialized() const {
  return true;
}

void CommonGlobalConfig::InternalSwap(CommonGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ts_rpc_max_seconds_, other->_impl_.ts_rpc_max_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[0]);
}

// ===================================================================

class CollectionGlobalConfigLevelUpEntry::_Internal {
 public:
};

CollectionGlobalConfigLevelUpEntry::CollectionGlobalConfigLevelUpEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CollectionGlobalConfigLevelUpEntry)
}
CollectionGlobalConfigLevelUpEntry::CollectionGlobalConfigLevelUpEntry(const CollectionGlobalConfigLevelUpEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectionGlobalConfigLevelUpEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.degree_limit_){}
    , decltype(_impl_.stage_limit_){}
    , decltype(_impl_.cost_item_id_){}
    , decltype(_impl_.cost_item_num_){}
    , decltype(_impl_.cost_money_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.degree_limit_, &from._impl_.degree_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cost_money_) -
    reinterpret_cast<char*>(&_impl_.degree_limit_)) + sizeof(_impl_.cost_money_));
  // @@protoc_insertion_point(copy_constructor:idlepb.CollectionGlobalConfigLevelUpEntry)
}

inline void CollectionGlobalConfigLevelUpEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.degree_limit_){0}
    , decltype(_impl_.stage_limit_){0}
    , decltype(_impl_.cost_item_id_){0}
    , decltype(_impl_.cost_item_num_){0}
    , decltype(_impl_.cost_money_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectionGlobalConfigLevelUpEntry::~CollectionGlobalConfigLevelUpEntry() {
  // @@protoc_insertion_point(destructor:idlepb.CollectionGlobalConfigLevelUpEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionGlobalConfigLevelUpEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollectionGlobalConfigLevelUpEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectionGlobalConfigLevelUpEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CollectionGlobalConfigLevelUpEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.degree_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cost_money_) -
      reinterpret_cast<char*>(&_impl_.degree_limit_)) + sizeof(_impl_.cost_money_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionGlobalConfigLevelUpEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 degree_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.degree_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stage_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stage_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cost_item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cost_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cost_item_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cost_item_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cost_money = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cost_money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionGlobalConfigLevelUpEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CollectionGlobalConfigLevelUpEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 degree_limit = 1;
  if (this->_internal_degree_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_degree_limit(), target);
  }

  // int32 stage_limit = 2;
  if (this->_internal_stage_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stage_limit(), target);
  }

  // int32 cost_item_id = 3;
  if (this->_internal_cost_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_cost_item_id(), target);
  }

  // int32 cost_item_num = 4;
  if (this->_internal_cost_item_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cost_item_num(), target);
  }

  // int32 cost_money = 5;
  if (this->_internal_cost_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_cost_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CollectionGlobalConfigLevelUpEntry)
  return target;
}

size_t CollectionGlobalConfigLevelUpEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CollectionGlobalConfigLevelUpEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 degree_limit = 1;
  if (this->_internal_degree_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_degree_limit());
  }

  // int32 stage_limit = 2;
  if (this->_internal_stage_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stage_limit());
  }

  // int32 cost_item_id = 3;
  if (this->_internal_cost_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cost_item_id());
  }

  // int32 cost_item_num = 4;
  if (this->_internal_cost_item_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cost_item_num());
  }

  // int32 cost_money = 5;
  if (this->_internal_cost_money() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cost_money());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionGlobalConfigLevelUpEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectionGlobalConfigLevelUpEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionGlobalConfigLevelUpEntry::GetClassData() const { return &_class_data_; }


void CollectionGlobalConfigLevelUpEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectionGlobalConfigLevelUpEntry*>(&to_msg);
  auto& from = static_cast<const CollectionGlobalConfigLevelUpEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CollectionGlobalConfigLevelUpEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_degree_limit() != 0) {
    _this->_internal_set_degree_limit(from._internal_degree_limit());
  }
  if (from._internal_stage_limit() != 0) {
    _this->_internal_set_stage_limit(from._internal_stage_limit());
  }
  if (from._internal_cost_item_id() != 0) {
    _this->_internal_set_cost_item_id(from._internal_cost_item_id());
  }
  if (from._internal_cost_item_num() != 0) {
    _this->_internal_set_cost_item_num(from._internal_cost_item_num());
  }
  if (from._internal_cost_money() != 0) {
    _this->_internal_set_cost_money(from._internal_cost_money());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionGlobalConfigLevelUpEntry::CopyFrom(const CollectionGlobalConfigLevelUpEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CollectionGlobalConfigLevelUpEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionGlobalConfigLevelUpEntry::IsInitialized() const {
  return true;
}

void CollectionGlobalConfigLevelUpEntry::InternalSwap(CollectionGlobalConfigLevelUpEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectionGlobalConfigLevelUpEntry, _impl_.cost_money_)
      + sizeof(CollectionGlobalConfigLevelUpEntry::_impl_.cost_money_)
      - PROTOBUF_FIELD_OFFSET(CollectionGlobalConfigLevelUpEntry, _impl_.degree_limit_)>(
          reinterpret_cast<char*>(&_impl_.degree_limit_),
          reinterpret_cast<char*>(&other->_impl_.degree_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionGlobalConfigLevelUpEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[1]);
}

// ===================================================================

class CollectionGlobalConfigUpgradeStarCostRequestEntry::_Internal {
 public:
};

CollectionGlobalConfigUpgradeStarCostRequestEntry::CollectionGlobalConfigUpgradeStarCostRequestEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry)
}
CollectionGlobalConfigUpgradeStarCostRequestEntry::CollectionGlobalConfigUpgradeStarCostRequestEntry(const CollectionGlobalConfigUpgradeStarCostRequestEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectionGlobalConfigUpgradeStarCostRequestEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cost_common_piece_num_){from._impl_.cost_common_piece_num_}
    , /*decltype(_impl_._cost_common_piece_num_cached_byte_size_)*/{0}
    , decltype(_impl_.cost_item_num_){}
    , decltype(_impl_.cost_self_piece_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cost_item_num_, &from._impl_.cost_item_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cost_self_piece_num_) -
    reinterpret_cast<char*>(&_impl_.cost_item_num_)) + sizeof(_impl_.cost_self_piece_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry)
}

inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cost_common_piece_num_){arena}
    , /*decltype(_impl_._cost_common_piece_num_cached_byte_size_)*/{0}
    , decltype(_impl_.cost_item_num_){0}
    , decltype(_impl_.cost_self_piece_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectionGlobalConfigUpgradeStarCostRequestEntry::~CollectionGlobalConfigUpgradeStarCostRequestEntry() {
  // @@protoc_insertion_point(destructor:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionGlobalConfigUpgradeStarCostRequestEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cost_common_piece_num_.~RepeatedField();
}

void CollectionGlobalConfigUpgradeStarCostRequestEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectionGlobalConfigUpgradeStarCostRequestEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cost_common_piece_num_.Clear();
  ::memset(&_impl_.cost_item_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cost_self_piece_num_) -
      reinterpret_cast<char*>(&_impl_.cost_item_num_)) + sizeof(_impl_.cost_self_piece_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionGlobalConfigUpgradeStarCostRequestEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cost_item_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cost_item_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cost_self_piece_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cost_self_piece_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 cost_common_piece_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cost_common_piece_num(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_cost_common_piece_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionGlobalConfigUpgradeStarCostRequestEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cost_item_num = 1;
  if (this->_internal_cost_item_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cost_item_num(), target);
  }

  // int32 cost_self_piece_num = 2;
  if (this->_internal_cost_self_piece_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cost_self_piece_num(), target);
  }

  // repeated int32 cost_common_piece_num = 3;
  {
    int byte_size = _impl_._cost_common_piece_num_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_cost_common_piece_num(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry)
  return target;
}

size_t CollectionGlobalConfigUpgradeStarCostRequestEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cost_common_piece_num = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.cost_common_piece_num_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cost_common_piece_num_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 cost_item_num = 1;
  if (this->_internal_cost_item_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cost_item_num());
  }

  // int32 cost_self_piece_num = 2;
  if (this->_internal_cost_self_piece_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cost_self_piece_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionGlobalConfigUpgradeStarCostRequestEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectionGlobalConfigUpgradeStarCostRequestEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionGlobalConfigUpgradeStarCostRequestEntry::GetClassData() const { return &_class_data_; }


void CollectionGlobalConfigUpgradeStarCostRequestEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectionGlobalConfigUpgradeStarCostRequestEntry*>(&to_msg);
  auto& from = static_cast<const CollectionGlobalConfigUpgradeStarCostRequestEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cost_common_piece_num_.MergeFrom(from._impl_.cost_common_piece_num_);
  if (from._internal_cost_item_num() != 0) {
    _this->_internal_set_cost_item_num(from._internal_cost_item_num());
  }
  if (from._internal_cost_self_piece_num() != 0) {
    _this->_internal_set_cost_self_piece_num(from._internal_cost_self_piece_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionGlobalConfigUpgradeStarCostRequestEntry::CopyFrom(const CollectionGlobalConfigUpgradeStarCostRequestEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionGlobalConfigUpgradeStarCostRequestEntry::IsInitialized() const {
  return true;
}

void CollectionGlobalConfigUpgradeStarCostRequestEntry::InternalSwap(CollectionGlobalConfigUpgradeStarCostRequestEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cost_common_piece_num_.InternalSwap(&other->_impl_.cost_common_piece_num_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectionGlobalConfigUpgradeStarCostRequestEntry, _impl_.cost_self_piece_num_)
      + sizeof(CollectionGlobalConfigUpgradeStarCostRequestEntry::_impl_.cost_self_piece_num_)
      - PROTOBUF_FIELD_OFFSET(CollectionGlobalConfigUpgradeStarCostRequestEntry, _impl_.cost_item_num_)>(
          reinterpret_cast<char*>(&_impl_.cost_item_num_),
          reinterpret_cast<char*>(&other->_impl_.cost_item_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionGlobalConfigUpgradeStarCostRequestEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[2]);
}

// ===================================================================

class CollectionGlobalConfigUpgradeStarCostEntry::_Internal {
 public:
};

CollectionGlobalConfigUpgradeStarCostEntry::CollectionGlobalConfigUpgradeStarCostEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CollectionGlobalConfigUpgradeStarCostEntry)
}
CollectionGlobalConfigUpgradeStarCostEntry::CollectionGlobalConfigUpgradeStarCostEntry(const CollectionGlobalConfigUpgradeStarCostEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectionGlobalConfigUpgradeStarCostEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){from._impl_.request_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.CollectionGlobalConfigUpgradeStarCostEntry)
}

inline void CollectionGlobalConfigUpgradeStarCostEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectionGlobalConfigUpgradeStarCostEntry::~CollectionGlobalConfigUpgradeStarCostEntry() {
  // @@protoc_insertion_point(destructor:idlepb.CollectionGlobalConfigUpgradeStarCostEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionGlobalConfigUpgradeStarCostEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_.~RepeatedPtrField();
}

void CollectionGlobalConfigUpgradeStarCostEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectionGlobalConfigUpgradeStarCostEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CollectionGlobalConfigUpgradeStarCostEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionGlobalConfigUpgradeStarCostEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionGlobalConfigUpgradeStarCostEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CollectionGlobalConfigUpgradeStarCostEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry request = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_request_size()); i < n; i++) {
    const auto& repfield = this->_internal_request(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CollectionGlobalConfigUpgradeStarCostEntry)
  return target;
}

size_t CollectionGlobalConfigUpgradeStarCostEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CollectionGlobalConfigUpgradeStarCostEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostRequestEntry request = 1;
  total_size += 1UL * this->_internal_request_size();
  for (const auto& msg : this->_impl_.request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionGlobalConfigUpgradeStarCostEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectionGlobalConfigUpgradeStarCostEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionGlobalConfigUpgradeStarCostEntry::GetClassData() const { return &_class_data_; }


void CollectionGlobalConfigUpgradeStarCostEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectionGlobalConfigUpgradeStarCostEntry*>(&to_msg);
  auto& from = static_cast<const CollectionGlobalConfigUpgradeStarCostEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CollectionGlobalConfigUpgradeStarCostEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.request_.MergeFrom(from._impl_.request_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionGlobalConfigUpgradeStarCostEntry::CopyFrom(const CollectionGlobalConfigUpgradeStarCostEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CollectionGlobalConfigUpgradeStarCostEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionGlobalConfigUpgradeStarCostEntry::IsInitialized() const {
  return true;
}

void CollectionGlobalConfigUpgradeStarCostEntry::InternalSwap(CollectionGlobalConfigUpgradeStarCostEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.request_.InternalSwap(&other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionGlobalConfigUpgradeStarCostEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[3]);
}

// ===================================================================

class CollectionGlobalConfigUpgradeStar::_Internal {
 public:
};

CollectionGlobalConfigUpgradeStar::CollectionGlobalConfigUpgradeStar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CollectionGlobalConfigUpgradeStar)
}
CollectionGlobalConfigUpgradeStar::CollectionGlobalConfigUpgradeStar(const CollectionGlobalConfigUpgradeStar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectionGlobalConfigUpgradeStar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.common_piece_by_quality_){from._impl_.common_piece_by_quality_}
    , /*decltype(_impl_._common_piece_by_quality_cached_byte_size_)*/{0}
    , decltype(_impl_.cost_by_quality_){from._impl_.cost_by_quality_}
    , decltype(_impl_.cost_by_quality_skill_){from._impl_.cost_by_quality_skill_}
    , decltype(_impl_.cost_item_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cost_item_id_ = from._impl_.cost_item_id_;
  // @@protoc_insertion_point(copy_constructor:idlepb.CollectionGlobalConfigUpgradeStar)
}

inline void CollectionGlobalConfigUpgradeStar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.common_piece_by_quality_){arena}
    , /*decltype(_impl_._common_piece_by_quality_cached_byte_size_)*/{0}
    , decltype(_impl_.cost_by_quality_){arena}
    , decltype(_impl_.cost_by_quality_skill_){arena}
    , decltype(_impl_.cost_item_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectionGlobalConfigUpgradeStar::~CollectionGlobalConfigUpgradeStar() {
  // @@protoc_insertion_point(destructor:idlepb.CollectionGlobalConfigUpgradeStar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionGlobalConfigUpgradeStar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.common_piece_by_quality_.~RepeatedField();
  _impl_.cost_by_quality_.~RepeatedPtrField();
  _impl_.cost_by_quality_skill_.~RepeatedPtrField();
}

void CollectionGlobalConfigUpgradeStar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectionGlobalConfigUpgradeStar::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CollectionGlobalConfigUpgradeStar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.common_piece_by_quality_.Clear();
  _impl_.cost_by_quality_.Clear();
  _impl_.cost_by_quality_skill_.Clear();
  _impl_.cost_item_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionGlobalConfigUpgradeStar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cost_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cost_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 common_piece_by_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_common_piece_by_quality(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_common_piece_by_quality(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostEntry cost_by_quality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cost_by_quality(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostEntry cost_by_quality_skill = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cost_by_quality_skill(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionGlobalConfigUpgradeStar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CollectionGlobalConfigUpgradeStar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cost_item_id = 1;
  if (this->_internal_cost_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cost_item_id(), target);
  }

  // repeated int32 common_piece_by_quality = 2;
  {
    int byte_size = _impl_._common_piece_by_quality_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_common_piece_by_quality(), byte_size, target);
    }
  }

  // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostEntry cost_by_quality = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cost_by_quality_size()); i < n; i++) {
    const auto& repfield = this->_internal_cost_by_quality(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostEntry cost_by_quality_skill = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cost_by_quality_skill_size()); i < n; i++) {
    const auto& repfield = this->_internal_cost_by_quality_skill(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CollectionGlobalConfigUpgradeStar)
  return target;
}

size_t CollectionGlobalConfigUpgradeStar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CollectionGlobalConfigUpgradeStar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 common_piece_by_quality = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.common_piece_by_quality_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._common_piece_by_quality_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostEntry cost_by_quality = 3;
  total_size += 1UL * this->_internal_cost_by_quality_size();
  for (const auto& msg : this->_impl_.cost_by_quality_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.CollectionGlobalConfigUpgradeStarCostEntry cost_by_quality_skill = 4;
  total_size += 1UL * this->_internal_cost_by_quality_skill_size();
  for (const auto& msg : this->_impl_.cost_by_quality_skill_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 cost_item_id = 1;
  if (this->_internal_cost_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cost_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionGlobalConfigUpgradeStar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectionGlobalConfigUpgradeStar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionGlobalConfigUpgradeStar::GetClassData() const { return &_class_data_; }


void CollectionGlobalConfigUpgradeStar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectionGlobalConfigUpgradeStar*>(&to_msg);
  auto& from = static_cast<const CollectionGlobalConfigUpgradeStar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CollectionGlobalConfigUpgradeStar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.common_piece_by_quality_.MergeFrom(from._impl_.common_piece_by_quality_);
  _this->_impl_.cost_by_quality_.MergeFrom(from._impl_.cost_by_quality_);
  _this->_impl_.cost_by_quality_skill_.MergeFrom(from._impl_.cost_by_quality_skill_);
  if (from._internal_cost_item_id() != 0) {
    _this->_internal_set_cost_item_id(from._internal_cost_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionGlobalConfigUpgradeStar::CopyFrom(const CollectionGlobalConfigUpgradeStar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CollectionGlobalConfigUpgradeStar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionGlobalConfigUpgradeStar::IsInitialized() const {
  return true;
}

void CollectionGlobalConfigUpgradeStar::InternalSwap(CollectionGlobalConfigUpgradeStar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.common_piece_by_quality_.InternalSwap(&other->_impl_.common_piece_by_quality_);
  _impl_.cost_by_quality_.InternalSwap(&other->_impl_.cost_by_quality_);
  _impl_.cost_by_quality_skill_.InternalSwap(&other->_impl_.cost_by_quality_skill_);
  swap(_impl_.cost_item_id_, other->_impl_.cost_item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionGlobalConfigUpgradeStar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[4]);
}

// ===================================================================

class CollectionGlobalConfigReset::_Internal {
 public:
};

CollectionGlobalConfigReset::CollectionGlobalConfigReset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CollectionGlobalConfigReset)
}
CollectionGlobalConfigReset::CollectionGlobalConfigReset(const CollectionGlobalConfigReset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectionGlobalConfigReset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cost_ji_yuan_){}
    , decltype(_impl_.cold_time_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cost_ji_yuan_, &from._impl_.cost_ji_yuan_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cold_time_seconds_) -
    reinterpret_cast<char*>(&_impl_.cost_ji_yuan_)) + sizeof(_impl_.cold_time_seconds_));
  // @@protoc_insertion_point(copy_constructor:idlepb.CollectionGlobalConfigReset)
}

inline void CollectionGlobalConfigReset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cost_ji_yuan_){0}
    , decltype(_impl_.cold_time_seconds_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectionGlobalConfigReset::~CollectionGlobalConfigReset() {
  // @@protoc_insertion_point(destructor:idlepb.CollectionGlobalConfigReset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionGlobalConfigReset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollectionGlobalConfigReset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectionGlobalConfigReset::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CollectionGlobalConfigReset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cost_ji_yuan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cold_time_seconds_) -
      reinterpret_cast<char*>(&_impl_.cost_ji_yuan_)) + sizeof(_impl_.cold_time_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionGlobalConfigReset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cost_ji_yuan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cost_ji_yuan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cold_time_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cold_time_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionGlobalConfigReset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CollectionGlobalConfigReset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cost_ji_yuan = 1;
  if (this->_internal_cost_ji_yuan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cost_ji_yuan(), target);
  }

  // int32 cold_time_seconds = 2;
  if (this->_internal_cold_time_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cold_time_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CollectionGlobalConfigReset)
  return target;
}

size_t CollectionGlobalConfigReset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CollectionGlobalConfigReset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cost_ji_yuan = 1;
  if (this->_internal_cost_ji_yuan() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cost_ji_yuan());
  }

  // int32 cold_time_seconds = 2;
  if (this->_internal_cold_time_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cold_time_seconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionGlobalConfigReset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectionGlobalConfigReset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionGlobalConfigReset::GetClassData() const { return &_class_data_; }


void CollectionGlobalConfigReset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectionGlobalConfigReset*>(&to_msg);
  auto& from = static_cast<const CollectionGlobalConfigReset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CollectionGlobalConfigReset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cost_ji_yuan() != 0) {
    _this->_internal_set_cost_ji_yuan(from._internal_cost_ji_yuan());
  }
  if (from._internal_cold_time_seconds() != 0) {
    _this->_internal_set_cold_time_seconds(from._internal_cold_time_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionGlobalConfigReset::CopyFrom(const CollectionGlobalConfigReset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CollectionGlobalConfigReset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionGlobalConfigReset::IsInitialized() const {
  return true;
}

void CollectionGlobalConfigReset::InternalSwap(CollectionGlobalConfigReset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectionGlobalConfigReset, _impl_.cold_time_seconds_)
      + sizeof(CollectionGlobalConfigReset::_impl_.cold_time_seconds_)
      - PROTOBUF_FIELD_OFFSET(CollectionGlobalConfigReset, _impl_.cost_ji_yuan_)>(
          reinterpret_cast<char*>(&_impl_.cost_ji_yuan_),
          reinterpret_cast<char*>(&other->_impl_.cost_ji_yuan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionGlobalConfigReset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[5]);
}

// ===================================================================

class CollectionGlobalConfig::_Internal {
 public:
  static const ::idlepb::CollectionGlobalConfigUpgradeStar& upgrade_star(const CollectionGlobalConfig* msg);
  static const ::idlepb::CollectionGlobalConfigReset& reset(const CollectionGlobalConfig* msg);
};

const ::idlepb::CollectionGlobalConfigUpgradeStar&
CollectionGlobalConfig::_Internal::upgrade_star(const CollectionGlobalConfig* msg) {
  return *msg->_impl_.upgrade_star_;
}
const ::idlepb::CollectionGlobalConfigReset&
CollectionGlobalConfig::_Internal::reset(const CollectionGlobalConfig* msg) {
  return *msg->_impl_.reset_;
}
CollectionGlobalConfig::CollectionGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CollectionGlobalConfig)
}
CollectionGlobalConfig::CollectionGlobalConfig(const CollectionGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectionGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.active_by_quality_){from._impl_.active_by_quality_}
    , /*decltype(_impl_._active_by_quality_cached_byte_size_)*/{0}
    , decltype(_impl_.levelup_){from._impl_.levelup_}
    , decltype(_impl_.upgrade_star_){nullptr}
    , decltype(_impl_.reset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upgrade_star()) {
    _this->_impl_.upgrade_star_ = new ::idlepb::CollectionGlobalConfigUpgradeStar(*from._impl_.upgrade_star_);
  }
  if (from._internal_has_reset()) {
    _this->_impl_.reset_ = new ::idlepb::CollectionGlobalConfigReset(*from._impl_.reset_);
  }
  // @@protoc_insertion_point(copy_constructor:idlepb.CollectionGlobalConfig)
}

inline void CollectionGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.active_by_quality_){arena}
    , /*decltype(_impl_._active_by_quality_cached_byte_size_)*/{0}
    , decltype(_impl_.levelup_){arena}
    , decltype(_impl_.upgrade_star_){nullptr}
    , decltype(_impl_.reset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectionGlobalConfig::~CollectionGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.CollectionGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.active_by_quality_.~RepeatedField();
  _impl_.levelup_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.upgrade_star_;
  if (this != internal_default_instance()) delete _impl_.reset_;
}

void CollectionGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectionGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CollectionGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.active_by_quality_.Clear();
  _impl_.levelup_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.upgrade_star_ != nullptr) {
    delete _impl_.upgrade_star_;
  }
  _impl_.upgrade_star_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reset_ != nullptr) {
    delete _impl_.reset_;
  }
  _impl_.reset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 active_by_quality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_active_by_quality(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_active_by_quality(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.CollectionGlobalConfigLevelUpEntry levelup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_levelup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CollectionGlobalConfigUpgradeStar upgrade_star = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgrade_star(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CollectionGlobalConfigReset reset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CollectionGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 active_by_quality = 1;
  {
    int byte_size = _impl_._active_by_quality_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_active_by_quality(), byte_size, target);
    }
  }

  // repeated .idlepb.CollectionGlobalConfigLevelUpEntry levelup = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_levelup_size()); i < n; i++) {
    const auto& repfield = this->_internal_levelup(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .idlepb.CollectionGlobalConfigUpgradeStar upgrade_star = 3;
  if (this->_internal_has_upgrade_star()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::upgrade_star(this),
        _Internal::upgrade_star(this).GetCachedSize(), target, stream);
  }

  // .idlepb.CollectionGlobalConfigReset reset = 4;
  if (this->_internal_has_reset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::reset(this),
        _Internal::reset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CollectionGlobalConfig)
  return target;
}

size_t CollectionGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CollectionGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 active_by_quality = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.active_by_quality_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._active_by_quality_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .idlepb.CollectionGlobalConfigLevelUpEntry levelup = 2;
  total_size += 1UL * this->_internal_levelup_size();
  for (const auto& msg : this->_impl_.levelup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .idlepb.CollectionGlobalConfigUpgradeStar upgrade_star = 3;
  if (this->_internal_has_upgrade_star()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upgrade_star_);
  }

  // .idlepb.CollectionGlobalConfigReset reset = 4;
  if (this->_internal_has_reset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectionGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionGlobalConfig::GetClassData() const { return &_class_data_; }


void CollectionGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectionGlobalConfig*>(&to_msg);
  auto& from = static_cast<const CollectionGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CollectionGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.active_by_quality_.MergeFrom(from._impl_.active_by_quality_);
  _this->_impl_.levelup_.MergeFrom(from._impl_.levelup_);
  if (from._internal_has_upgrade_star()) {
    _this->_internal_mutable_upgrade_star()->::idlepb::CollectionGlobalConfigUpgradeStar::MergeFrom(
        from._internal_upgrade_star());
  }
  if (from._internal_has_reset()) {
    _this->_internal_mutable_reset()->::idlepb::CollectionGlobalConfigReset::MergeFrom(
        from._internal_reset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionGlobalConfig::CopyFrom(const CollectionGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CollectionGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionGlobalConfig::IsInitialized() const {
  return true;
}

void CollectionGlobalConfig::InternalSwap(CollectionGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.active_by_quality_.InternalSwap(&other->_impl_.active_by_quality_);
  _impl_.levelup_.InternalSwap(&other->_impl_.levelup_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectionGlobalConfig, _impl_.reset_)
      + sizeof(CollectionGlobalConfig::_impl_.reset_)
      - PROTOBUF_FIELD_OFFSET(CollectionGlobalConfig, _impl_.upgrade_star_)>(
          reinterpret_cast<char*>(&_impl_.upgrade_star_),
          reinterpret_cast<char*>(&other->_impl_.upgrade_star_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[6]);
}

// ===================================================================

class CurrencyGlobalConfigItem2Currency::_Internal {
 public:
};

CurrencyGlobalConfigItem2Currency::CurrencyGlobalConfigItem2Currency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CurrencyGlobalConfigItem2Currency)
}
CurrencyGlobalConfigItem2Currency::CurrencyGlobalConfigItem2Currency(const CurrencyGlobalConfigItem2Currency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CurrencyGlobalConfigItem2Currency* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_cfg_id_){}
    , decltype(_impl_.currency_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_cfg_id_, &from._impl_.item_cfg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currency_type_) -
    reinterpret_cast<char*>(&_impl_.item_cfg_id_)) + sizeof(_impl_.currency_type_));
  // @@protoc_insertion_point(copy_constructor:idlepb.CurrencyGlobalConfigItem2Currency)
}

inline void CurrencyGlobalConfigItem2Currency::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_cfg_id_){0}
    , decltype(_impl_.currency_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CurrencyGlobalConfigItem2Currency::~CurrencyGlobalConfigItem2Currency() {
  // @@protoc_insertion_point(destructor:idlepb.CurrencyGlobalConfigItem2Currency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrencyGlobalConfigItem2Currency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CurrencyGlobalConfigItem2Currency::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurrencyGlobalConfigItem2Currency::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CurrencyGlobalConfigItem2Currency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_cfg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.currency_type_) -
      reinterpret_cast<char*>(&_impl_.item_cfg_id_)) + sizeof(_impl_.currency_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrencyGlobalConfigItem2Currency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_cfg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CurrencyType currency_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_currency_type(static_cast<::idlepb::CurrencyType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrencyGlobalConfigItem2Currency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CurrencyGlobalConfigItem2Currency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_cfg_id = 1;
  if (this->_internal_item_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_cfg_id(), target);
  }

  // .idlepb.CurrencyType currency_type = 2;
  if (this->_internal_currency_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_currency_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CurrencyGlobalConfigItem2Currency)
  return target;
}

size_t CurrencyGlobalConfigItem2Currency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CurrencyGlobalConfigItem2Currency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_cfg_id = 1;
  if (this->_internal_item_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_cfg_id());
  }

  // .idlepb.CurrencyType currency_type = 2;
  if (this->_internal_currency_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_currency_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrencyGlobalConfigItem2Currency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CurrencyGlobalConfigItem2Currency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrencyGlobalConfigItem2Currency::GetClassData() const { return &_class_data_; }


void CurrencyGlobalConfigItem2Currency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CurrencyGlobalConfigItem2Currency*>(&to_msg);
  auto& from = static_cast<const CurrencyGlobalConfigItem2Currency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CurrencyGlobalConfigItem2Currency)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_cfg_id() != 0) {
    _this->_internal_set_item_cfg_id(from._internal_item_cfg_id());
  }
  if (from._internal_currency_type() != 0) {
    _this->_internal_set_currency_type(from._internal_currency_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrencyGlobalConfigItem2Currency::CopyFrom(const CurrencyGlobalConfigItem2Currency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CurrencyGlobalConfigItem2Currency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyGlobalConfigItem2Currency::IsInitialized() const {
  return true;
}

void CurrencyGlobalConfigItem2Currency::InternalSwap(CurrencyGlobalConfigItem2Currency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CurrencyGlobalConfigItem2Currency, _impl_.currency_type_)
      + sizeof(CurrencyGlobalConfigItem2Currency::_impl_.currency_type_)
      - PROTOBUF_FIELD_OFFSET(CurrencyGlobalConfigItem2Currency, _impl_.item_cfg_id_)>(
          reinterpret_cast<char*>(&_impl_.item_cfg_id_),
          reinterpret_cast<char*>(&other->_impl_.item_cfg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyGlobalConfigItem2Currency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[7]);
}

// ===================================================================

class CurrencyGlobalConfig::_Internal {
 public:
};

CurrencyGlobalConfig::CurrencyGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CurrencyGlobalConfig)
}
CurrencyGlobalConfig::CurrencyGlobalConfig(const CurrencyGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CurrencyGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item2currency_){from._impl_.item2currency_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.CurrencyGlobalConfig)
}

inline void CurrencyGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item2currency_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CurrencyGlobalConfig::~CurrencyGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.CurrencyGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrencyGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item2currency_.~RepeatedPtrField();
}

void CurrencyGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurrencyGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CurrencyGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item2currency_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrencyGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.CurrencyGlobalConfigItem2Currency item2currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item2currency(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrencyGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CurrencyGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.CurrencyGlobalConfigItem2Currency item2currency = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item2currency_size()); i < n; i++) {
    const auto& repfield = this->_internal_item2currency(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CurrencyGlobalConfig)
  return target;
}

size_t CurrencyGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CurrencyGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.CurrencyGlobalConfigItem2Currency item2currency = 1;
  total_size += 1UL * this->_internal_item2currency_size();
  for (const auto& msg : this->_impl_.item2currency_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrencyGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CurrencyGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrencyGlobalConfig::GetClassData() const { return &_class_data_; }


void CurrencyGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CurrencyGlobalConfig*>(&to_msg);
  auto& from = static_cast<const CurrencyGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CurrencyGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item2currency_.MergeFrom(from._impl_.item2currency_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrencyGlobalConfig::CopyFrom(const CurrencyGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CurrencyGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyGlobalConfig::IsInitialized() const {
  return true;
}

void CurrencyGlobalConfig::InternalSwap(CurrencyGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item2currency_.InternalSwap(&other->_impl_.item2currency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[8]);
}

// ===================================================================

class PlayerGlobalConfigRoleInitAttributes::_Internal {
 public:
};

PlayerGlobalConfigRoleInitAttributes::PlayerGlobalConfigRoleInitAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfigRoleInitAttributes)
}
PlayerGlobalConfigRoleInitAttributes::PlayerGlobalConfigRoleInitAttributes(const PlayerGlobalConfigRoleInitAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfigRoleInitAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hp_){}
    , decltype(_impl_.mp_){}
    , decltype(_impl_.phy_att_){}
    , decltype(_impl_.phy_def_){}
    , decltype(_impl_.mag_att_){}
    , decltype(_impl_.mag_def_){}
    , decltype(_impl_.hp_recover_percent_){}
    , decltype(_impl_.mp_recover_percent_){}
    , decltype(_impl_.crit_coef_){}
    , decltype(_impl_.crit_block_){}
    , decltype(_impl_.mind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hp_, &from._impl_.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mind_) -
    reinterpret_cast<char*>(&_impl_.hp_)) + sizeof(_impl_.mind_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfigRoleInitAttributes)
}

inline void PlayerGlobalConfigRoleInitAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hp_){0}
    , decltype(_impl_.mp_){0}
    , decltype(_impl_.phy_att_){0}
    , decltype(_impl_.phy_def_){0}
    , decltype(_impl_.mag_att_){0}
    , decltype(_impl_.mag_def_){0}
    , decltype(_impl_.hp_recover_percent_){0}
    , decltype(_impl_.mp_recover_percent_){0}
    , decltype(_impl_.crit_coef_){0}
    , decltype(_impl_.crit_block_){0}
    , decltype(_impl_.mind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfigRoleInitAttributes::~PlayerGlobalConfigRoleInitAttributes() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfigRoleInitAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfigRoleInitAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerGlobalConfigRoleInitAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfigRoleInitAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfigRoleInitAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mind_) -
      reinterpret_cast<char*>(&_impl_.hp_)) + sizeof(_impl_.mind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfigRoleInitAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float hp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.mp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_att = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.phy_att_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.phy_def_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_att = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.mag_att_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_def = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.mag_def_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hp_recover_percent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.hp_recover_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mp_recover_percent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.mp_recover_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float crit_coef = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.crit_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float crit_block = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.crit_block_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mind = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.mind_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfigRoleInitAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfigRoleInitAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float hp = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_hp(), target);
  }

  // float mp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = this->_internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_mp(), target);
  }

  // float phy_att = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_att = this->_internal_phy_att();
  uint32_t raw_phy_att;
  memcpy(&raw_phy_att, &tmp_phy_att, sizeof(tmp_phy_att));
  if (raw_phy_att != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_phy_att(), target);
  }

  // float phy_def = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_def = this->_internal_phy_def();
  uint32_t raw_phy_def;
  memcpy(&raw_phy_def, &tmp_phy_def, sizeof(tmp_phy_def));
  if (raw_phy_def != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_phy_def(), target);
  }

  // float mag_att = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_att = this->_internal_mag_att();
  uint32_t raw_mag_att;
  memcpy(&raw_mag_att, &tmp_mag_att, sizeof(tmp_mag_att));
  if (raw_mag_att != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_mag_att(), target);
  }

  // float mag_def = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_def = this->_internal_mag_def();
  uint32_t raw_mag_def;
  memcpy(&raw_mag_def, &tmp_mag_def, sizeof(tmp_mag_def));
  if (raw_mag_def != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_mag_def(), target);
  }

  // float hp_recover_percent = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp_recover_percent = this->_internal_hp_recover_percent();
  uint32_t raw_hp_recover_percent;
  memcpy(&raw_hp_recover_percent, &tmp_hp_recover_percent, sizeof(tmp_hp_recover_percent));
  if (raw_hp_recover_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_hp_recover_percent(), target);
  }

  // float mp_recover_percent = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp_recover_percent = this->_internal_mp_recover_percent();
  uint32_t raw_mp_recover_percent;
  memcpy(&raw_mp_recover_percent, &tmp_mp_recover_percent, sizeof(tmp_mp_recover_percent));
  if (raw_mp_recover_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_mp_recover_percent(), target);
  }

  // float crit_coef = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_coef = this->_internal_crit_coef();
  uint32_t raw_crit_coef;
  memcpy(&raw_crit_coef, &tmp_crit_coef, sizeof(tmp_crit_coef));
  if (raw_crit_coef != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_crit_coef(), target);
  }

  // float crit_block = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_block = this->_internal_crit_block();
  uint32_t raw_crit_block;
  memcpy(&raw_crit_block, &tmp_crit_block, sizeof(tmp_crit_block));
  if (raw_crit_block != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_crit_block(), target);
  }

  // float mind = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mind = this->_internal_mind();
  uint32_t raw_mind;
  memcpy(&raw_mind, &tmp_mind, sizeof(tmp_mind));
  if (raw_mind != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_mind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfigRoleInitAttributes)
  return target;
}

size_t PlayerGlobalConfigRoleInitAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfigRoleInitAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float hp = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  // float mp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = this->_internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    total_size += 1 + 4;
  }

  // float phy_att = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_att = this->_internal_phy_att();
  uint32_t raw_phy_att;
  memcpy(&raw_phy_att, &tmp_phy_att, sizeof(tmp_phy_att));
  if (raw_phy_att != 0) {
    total_size += 1 + 4;
  }

  // float phy_def = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_def = this->_internal_phy_def();
  uint32_t raw_phy_def;
  memcpy(&raw_phy_def, &tmp_phy_def, sizeof(tmp_phy_def));
  if (raw_phy_def != 0) {
    total_size += 1 + 4;
  }

  // float mag_att = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_att = this->_internal_mag_att();
  uint32_t raw_mag_att;
  memcpy(&raw_mag_att, &tmp_mag_att, sizeof(tmp_mag_att));
  if (raw_mag_att != 0) {
    total_size += 1 + 4;
  }

  // float mag_def = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_def = this->_internal_mag_def();
  uint32_t raw_mag_def;
  memcpy(&raw_mag_def, &tmp_mag_def, sizeof(tmp_mag_def));
  if (raw_mag_def != 0) {
    total_size += 1 + 4;
  }

  // float hp_recover_percent = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp_recover_percent = this->_internal_hp_recover_percent();
  uint32_t raw_hp_recover_percent;
  memcpy(&raw_hp_recover_percent, &tmp_hp_recover_percent, sizeof(tmp_hp_recover_percent));
  if (raw_hp_recover_percent != 0) {
    total_size += 1 + 4;
  }

  // float mp_recover_percent = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp_recover_percent = this->_internal_mp_recover_percent();
  uint32_t raw_mp_recover_percent;
  memcpy(&raw_mp_recover_percent, &tmp_mp_recover_percent, sizeof(tmp_mp_recover_percent));
  if (raw_mp_recover_percent != 0) {
    total_size += 1 + 4;
  }

  // float crit_coef = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_coef = this->_internal_crit_coef();
  uint32_t raw_crit_coef;
  memcpy(&raw_crit_coef, &tmp_crit_coef, sizeof(tmp_crit_coef));
  if (raw_crit_coef != 0) {
    total_size += 1 + 4;
  }

  // float crit_block = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_block = this->_internal_crit_block();
  uint32_t raw_crit_block;
  memcpy(&raw_crit_block, &tmp_crit_block, sizeof(tmp_crit_block));
  if (raw_crit_block != 0) {
    total_size += 1 + 4;
  }

  // float mind = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mind = this->_internal_mind();
  uint32_t raw_mind;
  memcpy(&raw_mind, &tmp_mind, sizeof(tmp_mind));
  if (raw_mind != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfigRoleInitAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfigRoleInitAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfigRoleInitAttributes::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfigRoleInitAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfigRoleInitAttributes*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfigRoleInitAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfigRoleInitAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = from._internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    _this->_internal_set_mp(from._internal_mp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_att = from._internal_phy_att();
  uint32_t raw_phy_att;
  memcpy(&raw_phy_att, &tmp_phy_att, sizeof(tmp_phy_att));
  if (raw_phy_att != 0) {
    _this->_internal_set_phy_att(from._internal_phy_att());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_def = from._internal_phy_def();
  uint32_t raw_phy_def;
  memcpy(&raw_phy_def, &tmp_phy_def, sizeof(tmp_phy_def));
  if (raw_phy_def != 0) {
    _this->_internal_set_phy_def(from._internal_phy_def());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_att = from._internal_mag_att();
  uint32_t raw_mag_att;
  memcpy(&raw_mag_att, &tmp_mag_att, sizeof(tmp_mag_att));
  if (raw_mag_att != 0) {
    _this->_internal_set_mag_att(from._internal_mag_att());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_def = from._internal_mag_def();
  uint32_t raw_mag_def;
  memcpy(&raw_mag_def, &tmp_mag_def, sizeof(tmp_mag_def));
  if (raw_mag_def != 0) {
    _this->_internal_set_mag_def(from._internal_mag_def());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp_recover_percent = from._internal_hp_recover_percent();
  uint32_t raw_hp_recover_percent;
  memcpy(&raw_hp_recover_percent, &tmp_hp_recover_percent, sizeof(tmp_hp_recover_percent));
  if (raw_hp_recover_percent != 0) {
    _this->_internal_set_hp_recover_percent(from._internal_hp_recover_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp_recover_percent = from._internal_mp_recover_percent();
  uint32_t raw_mp_recover_percent;
  memcpy(&raw_mp_recover_percent, &tmp_mp_recover_percent, sizeof(tmp_mp_recover_percent));
  if (raw_mp_recover_percent != 0) {
    _this->_internal_set_mp_recover_percent(from._internal_mp_recover_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_coef = from._internal_crit_coef();
  uint32_t raw_crit_coef;
  memcpy(&raw_crit_coef, &tmp_crit_coef, sizeof(tmp_crit_coef));
  if (raw_crit_coef != 0) {
    _this->_internal_set_crit_coef(from._internal_crit_coef());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_block = from._internal_crit_block();
  uint32_t raw_crit_block;
  memcpy(&raw_crit_block, &tmp_crit_block, sizeof(tmp_crit_block));
  if (raw_crit_block != 0) {
    _this->_internal_set_crit_block(from._internal_crit_block());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mind = from._internal_mind();
  uint32_t raw_mind;
  memcpy(&raw_mind, &tmp_mind, sizeof(tmp_mind));
  if (raw_mind != 0) {
    _this->_internal_set_mind(from._internal_mind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfigRoleInitAttributes::CopyFrom(const PlayerGlobalConfigRoleInitAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfigRoleInitAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfigRoleInitAttributes::IsInitialized() const {
  return true;
}

void PlayerGlobalConfigRoleInitAttributes::InternalSwap(PlayerGlobalConfigRoleInitAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigRoleInitAttributes, _impl_.mind_)
      + sizeof(PlayerGlobalConfigRoleInitAttributes::_impl_.mind_)
      - PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigRoleInitAttributes, _impl_.hp_)>(
          reinterpret_cast<char*>(&_impl_.hp_),
          reinterpret_cast<char*>(&other->_impl_.hp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfigRoleInitAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[9]);
}

// ===================================================================

class PlayerGlobalConfigConstants::_Internal {
 public:
};

PlayerGlobalConfigConstants::PlayerGlobalConfigConstants(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfigConstants)
}
PlayerGlobalConfigConstants::PlayerGlobalConfigConstants(const PlayerGlobalConfigConstants& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfigConstants* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.init_radius_){}
    , decltype(_impl_.auto_move_stop_time_){}
    , decltype(_impl_.auto_move_walk_time_){}
    , decltype(_impl_.move_speed_){}
    , decltype(_impl_.attack_interval_time_){}
    , decltype(_impl_.auto_heal_trigger_ratio_hp_){}
    , decltype(_impl_.auto_heal_trigger_ratio_mp_){}
    , decltype(_impl_.player_lock_distance_hand_){}
    , decltype(_impl_.player_lock_distance_auto_){}
    , decltype(_impl_.player_lock_distance_max_){}
    , decltype(_impl_.player_lock_distance_near_){}
    , decltype(_impl_.player_lock_distance_screen_){}
    , decltype(_impl_.enter_scale_size_distance_2d_){}
    , decltype(_impl_.player_reborn_time_){}
    , decltype(_impl_.player_reduce_time_){}
    , decltype(_impl_.player_reduce_num_max_){}
    , decltype(_impl_.player_escape_time_){}
    , decltype(_impl_.battle_status_seconds_){}
    , decltype(_impl_.max_explore_time_){}
    , decltype(_impl_.player_teleport_cooldown_){}
    , decltype(_impl_.switch_cultivation_direction_min_rank_){}
    , decltype(_impl_.server_take_control_idle_seconds_){}
    , decltype(_impl_.player_location_correction_distance_near_){}
    , decltype(_impl_.player_location_correction_distance_far_){}
    , decltype(_impl_.player_correction_cost_speed_){}
    , decltype(_impl_.mini_map_world_width_){}
    , decltype(_impl_.mini_map_world_height_){}
    , decltype(_impl_.activate_entities_distance_){}
    , decltype(_impl_.select_box_auto_disappear_time_){}
    , decltype(_impl_.intervene_to_auto_seconds_){}
    , decltype(_impl_.set_pause_move_function_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.init_radius_, &from._impl_.init_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.set_pause_move_function_time_) -
    reinterpret_cast<char*>(&_impl_.init_radius_)) + sizeof(_impl_.set_pause_move_function_time_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfigConstants)
}

inline void PlayerGlobalConfigConstants::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.init_radius_){0}
    , decltype(_impl_.auto_move_stop_time_){0}
    , decltype(_impl_.auto_move_walk_time_){0}
    , decltype(_impl_.move_speed_){0}
    , decltype(_impl_.attack_interval_time_){0}
    , decltype(_impl_.auto_heal_trigger_ratio_hp_){0}
    , decltype(_impl_.auto_heal_trigger_ratio_mp_){0}
    , decltype(_impl_.player_lock_distance_hand_){0}
    , decltype(_impl_.player_lock_distance_auto_){0}
    , decltype(_impl_.player_lock_distance_max_){0}
    , decltype(_impl_.player_lock_distance_near_){0}
    , decltype(_impl_.player_lock_distance_screen_){0}
    , decltype(_impl_.enter_scale_size_distance_2d_){0}
    , decltype(_impl_.player_reborn_time_){0}
    , decltype(_impl_.player_reduce_time_){0}
    , decltype(_impl_.player_reduce_num_max_){0}
    , decltype(_impl_.player_escape_time_){0}
    , decltype(_impl_.battle_status_seconds_){0}
    , decltype(_impl_.max_explore_time_){0}
    , decltype(_impl_.player_teleport_cooldown_){0}
    , decltype(_impl_.switch_cultivation_direction_min_rank_){0}
    , decltype(_impl_.server_take_control_idle_seconds_){0}
    , decltype(_impl_.player_location_correction_distance_near_){0}
    , decltype(_impl_.player_location_correction_distance_far_){0}
    , decltype(_impl_.player_correction_cost_speed_){0}
    , decltype(_impl_.mini_map_world_width_){0}
    , decltype(_impl_.mini_map_world_height_){0}
    , decltype(_impl_.activate_entities_distance_){0}
    , decltype(_impl_.select_box_auto_disappear_time_){0}
    , decltype(_impl_.intervene_to_auto_seconds_){0}
    , decltype(_impl_.set_pause_move_function_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfigConstants::~PlayerGlobalConfigConstants() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfigConstants)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfigConstants::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerGlobalConfigConstants::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfigConstants::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfigConstants)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.init_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.set_pause_move_function_time_) -
      reinterpret_cast<char*>(&_impl_.init_radius_)) + sizeof(_impl_.set_pause_move_function_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfigConstants::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float init_radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.init_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float auto_move_stop_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.auto_move_stop_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float auto_move_walk_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.auto_move_walk_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 move_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float attack_interval_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.attack_interval_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float auto_heal_trigger_ratio_hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.auto_heal_trigger_ratio_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float auto_heal_trigger_ratio_mp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.auto_heal_trigger_ratio_mp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_lock_distance_hand = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.player_lock_distance_hand_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_lock_distance_auto = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.player_lock_distance_auto_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_lock_distance_max = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.player_lock_distance_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_lock_distance_near = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.player_lock_distance_near_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_lock_distance_screen = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.player_lock_distance_screen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float enter_scale_size_distance_2d = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.enter_scale_size_distance_2d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_reborn_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.player_reborn_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_reduce_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.player_reduce_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_reduce_num_max = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.player_reduce_num_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_escape_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.player_escape_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float battle_status_seconds = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _impl_.battle_status_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 max_explore_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.max_explore_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float player_teleport_cooldown = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _impl_.player_teleport_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 switch_cultivation_direction_min_rank = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.switch_cultivation_direction_min_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float server_take_control_idle_seconds = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _impl_.server_take_control_idle_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_location_correction_distance_near = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _impl_.player_location_correction_distance_near_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_location_correction_distance_far = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _impl_.player_location_correction_distance_far_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_correction_cost_speed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _impl_.player_correction_cost_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mini_map_world_width = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _impl_.mini_map_world_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mini_map_world_height = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _impl_.mini_map_world_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float activate_entities_distance = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _impl_.activate_entities_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float select_box_auto_disappear_time = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _impl_.select_box_auto_disappear_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float intervene_to_auto_seconds = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _impl_.intervene_to_auto_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float set_pause_move_function_time = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _impl_.set_pause_move_function_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfigConstants::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfigConstants)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float init_radius = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_init_radius = this->_internal_init_radius();
  uint32_t raw_init_radius;
  memcpy(&raw_init_radius, &tmp_init_radius, sizeof(tmp_init_radius));
  if (raw_init_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_init_radius(), target);
  }

  // float auto_move_stop_time = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_stop_time = this->_internal_auto_move_stop_time();
  uint32_t raw_auto_move_stop_time;
  memcpy(&raw_auto_move_stop_time, &tmp_auto_move_stop_time, sizeof(tmp_auto_move_stop_time));
  if (raw_auto_move_stop_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_auto_move_stop_time(), target);
  }

  // float auto_move_walk_time = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_walk_time = this->_internal_auto_move_walk_time();
  uint32_t raw_auto_move_walk_time;
  memcpy(&raw_auto_move_walk_time, &tmp_auto_move_walk_time, sizeof(tmp_auto_move_walk_time));
  if (raw_auto_move_walk_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_auto_move_walk_time(), target);
  }

  // int32 move_speed = 4;
  if (this->_internal_move_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_move_speed(), target);
  }

  // float attack_interval_time = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_interval_time = this->_internal_attack_interval_time();
  uint32_t raw_attack_interval_time;
  memcpy(&raw_attack_interval_time, &tmp_attack_interval_time, sizeof(tmp_attack_interval_time));
  if (raw_attack_interval_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_attack_interval_time(), target);
  }

  // float auto_heal_trigger_ratio_hp = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_heal_trigger_ratio_hp = this->_internal_auto_heal_trigger_ratio_hp();
  uint32_t raw_auto_heal_trigger_ratio_hp;
  memcpy(&raw_auto_heal_trigger_ratio_hp, &tmp_auto_heal_trigger_ratio_hp, sizeof(tmp_auto_heal_trigger_ratio_hp));
  if (raw_auto_heal_trigger_ratio_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_auto_heal_trigger_ratio_hp(), target);
  }

  // float auto_heal_trigger_ratio_mp = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_heal_trigger_ratio_mp = this->_internal_auto_heal_trigger_ratio_mp();
  uint32_t raw_auto_heal_trigger_ratio_mp;
  memcpy(&raw_auto_heal_trigger_ratio_mp, &tmp_auto_heal_trigger_ratio_mp, sizeof(tmp_auto_heal_trigger_ratio_mp));
  if (raw_auto_heal_trigger_ratio_mp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_auto_heal_trigger_ratio_mp(), target);
  }

  // float player_lock_distance_hand = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_hand = this->_internal_player_lock_distance_hand();
  uint32_t raw_player_lock_distance_hand;
  memcpy(&raw_player_lock_distance_hand, &tmp_player_lock_distance_hand, sizeof(tmp_player_lock_distance_hand));
  if (raw_player_lock_distance_hand != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_player_lock_distance_hand(), target);
  }

  // float player_lock_distance_auto = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_auto = this->_internal_player_lock_distance_auto();
  uint32_t raw_player_lock_distance_auto;
  memcpy(&raw_player_lock_distance_auto, &tmp_player_lock_distance_auto, sizeof(tmp_player_lock_distance_auto));
  if (raw_player_lock_distance_auto != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_player_lock_distance_auto(), target);
  }

  // float player_lock_distance_max = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_max = this->_internal_player_lock_distance_max();
  uint32_t raw_player_lock_distance_max;
  memcpy(&raw_player_lock_distance_max, &tmp_player_lock_distance_max, sizeof(tmp_player_lock_distance_max));
  if (raw_player_lock_distance_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_player_lock_distance_max(), target);
  }

  // float player_lock_distance_near = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_near = this->_internal_player_lock_distance_near();
  uint32_t raw_player_lock_distance_near;
  memcpy(&raw_player_lock_distance_near, &tmp_player_lock_distance_near, sizeof(tmp_player_lock_distance_near));
  if (raw_player_lock_distance_near != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_player_lock_distance_near(), target);
  }

  // float player_lock_distance_screen = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_screen = this->_internal_player_lock_distance_screen();
  uint32_t raw_player_lock_distance_screen;
  memcpy(&raw_player_lock_distance_screen, &tmp_player_lock_distance_screen, sizeof(tmp_player_lock_distance_screen));
  if (raw_player_lock_distance_screen != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_player_lock_distance_screen(), target);
  }

  // float enter_scale_size_distance_2d = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_enter_scale_size_distance_2d = this->_internal_enter_scale_size_distance_2d();
  uint32_t raw_enter_scale_size_distance_2d;
  memcpy(&raw_enter_scale_size_distance_2d, &tmp_enter_scale_size_distance_2d, sizeof(tmp_enter_scale_size_distance_2d));
  if (raw_enter_scale_size_distance_2d != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_enter_scale_size_distance_2d(), target);
  }

  // float player_reborn_time = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_reborn_time = this->_internal_player_reborn_time();
  uint32_t raw_player_reborn_time;
  memcpy(&raw_player_reborn_time, &tmp_player_reborn_time, sizeof(tmp_player_reborn_time));
  if (raw_player_reborn_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_player_reborn_time(), target);
  }

  // float player_reduce_time = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_reduce_time = this->_internal_player_reduce_time();
  uint32_t raw_player_reduce_time;
  memcpy(&raw_player_reduce_time, &tmp_player_reduce_time, sizeof(tmp_player_reduce_time));
  if (raw_player_reduce_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_player_reduce_time(), target);
  }

  // float player_reduce_num_max = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_reduce_num_max = this->_internal_player_reduce_num_max();
  uint32_t raw_player_reduce_num_max;
  memcpy(&raw_player_reduce_num_max, &tmp_player_reduce_num_max, sizeof(tmp_player_reduce_num_max));
  if (raw_player_reduce_num_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_player_reduce_num_max(), target);
  }

  // float player_escape_time = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_escape_time = this->_internal_player_escape_time();
  uint32_t raw_player_escape_time;
  memcpy(&raw_player_escape_time, &tmp_player_escape_time, sizeof(tmp_player_escape_time));
  if (raw_player_escape_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_player_escape_time(), target);
  }

  // float battle_status_seconds = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_battle_status_seconds = this->_internal_battle_status_seconds();
  uint32_t raw_battle_status_seconds;
  memcpy(&raw_battle_status_seconds, &tmp_battle_status_seconds, sizeof(tmp_battle_status_seconds));
  if (raw_battle_status_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_battle_status_seconds(), target);
  }

  // int32 max_explore_time = 19;
  if (this->_internal_max_explore_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_max_explore_time(), target);
  }

  // float player_teleport_cooldown = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_teleport_cooldown = this->_internal_player_teleport_cooldown();
  uint32_t raw_player_teleport_cooldown;
  memcpy(&raw_player_teleport_cooldown, &tmp_player_teleport_cooldown, sizeof(tmp_player_teleport_cooldown));
  if (raw_player_teleport_cooldown != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_player_teleport_cooldown(), target);
  }

  // int32 switch_cultivation_direction_min_rank = 21;
  if (this->_internal_switch_cultivation_direction_min_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_switch_cultivation_direction_min_rank(), target);
  }

  // float server_take_control_idle_seconds = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_server_take_control_idle_seconds = this->_internal_server_take_control_idle_seconds();
  uint32_t raw_server_take_control_idle_seconds;
  memcpy(&raw_server_take_control_idle_seconds, &tmp_server_take_control_idle_seconds, sizeof(tmp_server_take_control_idle_seconds));
  if (raw_server_take_control_idle_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_server_take_control_idle_seconds(), target);
  }

  // float player_location_correction_distance_near = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_location_correction_distance_near = this->_internal_player_location_correction_distance_near();
  uint32_t raw_player_location_correction_distance_near;
  memcpy(&raw_player_location_correction_distance_near, &tmp_player_location_correction_distance_near, sizeof(tmp_player_location_correction_distance_near));
  if (raw_player_location_correction_distance_near != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_player_location_correction_distance_near(), target);
  }

  // float player_location_correction_distance_far = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_location_correction_distance_far = this->_internal_player_location_correction_distance_far();
  uint32_t raw_player_location_correction_distance_far;
  memcpy(&raw_player_location_correction_distance_far, &tmp_player_location_correction_distance_far, sizeof(tmp_player_location_correction_distance_far));
  if (raw_player_location_correction_distance_far != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_player_location_correction_distance_far(), target);
  }

  // float player_correction_cost_speed = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_correction_cost_speed = this->_internal_player_correction_cost_speed();
  uint32_t raw_player_correction_cost_speed;
  memcpy(&raw_player_correction_cost_speed, &tmp_player_correction_cost_speed, sizeof(tmp_player_correction_cost_speed));
  if (raw_player_correction_cost_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_player_correction_cost_speed(), target);
  }

  // float mini_map_world_width = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mini_map_world_width = this->_internal_mini_map_world_width();
  uint32_t raw_mini_map_world_width;
  memcpy(&raw_mini_map_world_width, &tmp_mini_map_world_width, sizeof(tmp_mini_map_world_width));
  if (raw_mini_map_world_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(26, this->_internal_mini_map_world_width(), target);
  }

  // float mini_map_world_height = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mini_map_world_height = this->_internal_mini_map_world_height();
  uint32_t raw_mini_map_world_height;
  memcpy(&raw_mini_map_world_height, &tmp_mini_map_world_height, sizeof(tmp_mini_map_world_height));
  if (raw_mini_map_world_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_mini_map_world_height(), target);
  }

  // float activate_entities_distance = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_activate_entities_distance = this->_internal_activate_entities_distance();
  uint32_t raw_activate_entities_distance;
  memcpy(&raw_activate_entities_distance, &tmp_activate_entities_distance, sizeof(tmp_activate_entities_distance));
  if (raw_activate_entities_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_activate_entities_distance(), target);
  }

  // float select_box_auto_disappear_time = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_select_box_auto_disappear_time = this->_internal_select_box_auto_disappear_time();
  uint32_t raw_select_box_auto_disappear_time;
  memcpy(&raw_select_box_auto_disappear_time, &tmp_select_box_auto_disappear_time, sizeof(tmp_select_box_auto_disappear_time));
  if (raw_select_box_auto_disappear_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_select_box_auto_disappear_time(), target);
  }

  // float intervene_to_auto_seconds = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intervene_to_auto_seconds = this->_internal_intervene_to_auto_seconds();
  uint32_t raw_intervene_to_auto_seconds;
  memcpy(&raw_intervene_to_auto_seconds, &tmp_intervene_to_auto_seconds, sizeof(tmp_intervene_to_auto_seconds));
  if (raw_intervene_to_auto_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_intervene_to_auto_seconds(), target);
  }

  // float set_pause_move_function_time = 31;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_set_pause_move_function_time = this->_internal_set_pause_move_function_time();
  uint32_t raw_set_pause_move_function_time;
  memcpy(&raw_set_pause_move_function_time, &tmp_set_pause_move_function_time, sizeof(tmp_set_pause_move_function_time));
  if (raw_set_pause_move_function_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_set_pause_move_function_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfigConstants)
  return target;
}

size_t PlayerGlobalConfigConstants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfigConstants)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float init_radius = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_init_radius = this->_internal_init_radius();
  uint32_t raw_init_radius;
  memcpy(&raw_init_radius, &tmp_init_radius, sizeof(tmp_init_radius));
  if (raw_init_radius != 0) {
    total_size += 1 + 4;
  }

  // float auto_move_stop_time = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_stop_time = this->_internal_auto_move_stop_time();
  uint32_t raw_auto_move_stop_time;
  memcpy(&raw_auto_move_stop_time, &tmp_auto_move_stop_time, sizeof(tmp_auto_move_stop_time));
  if (raw_auto_move_stop_time != 0) {
    total_size += 1 + 4;
  }

  // float auto_move_walk_time = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_walk_time = this->_internal_auto_move_walk_time();
  uint32_t raw_auto_move_walk_time;
  memcpy(&raw_auto_move_walk_time, &tmp_auto_move_walk_time, sizeof(tmp_auto_move_walk_time));
  if (raw_auto_move_walk_time != 0) {
    total_size += 1 + 4;
  }

  // int32 move_speed = 4;
  if (this->_internal_move_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_move_speed());
  }

  // float attack_interval_time = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_interval_time = this->_internal_attack_interval_time();
  uint32_t raw_attack_interval_time;
  memcpy(&raw_attack_interval_time, &tmp_attack_interval_time, sizeof(tmp_attack_interval_time));
  if (raw_attack_interval_time != 0) {
    total_size += 1 + 4;
  }

  // float auto_heal_trigger_ratio_hp = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_heal_trigger_ratio_hp = this->_internal_auto_heal_trigger_ratio_hp();
  uint32_t raw_auto_heal_trigger_ratio_hp;
  memcpy(&raw_auto_heal_trigger_ratio_hp, &tmp_auto_heal_trigger_ratio_hp, sizeof(tmp_auto_heal_trigger_ratio_hp));
  if (raw_auto_heal_trigger_ratio_hp != 0) {
    total_size += 1 + 4;
  }

  // float auto_heal_trigger_ratio_mp = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_heal_trigger_ratio_mp = this->_internal_auto_heal_trigger_ratio_mp();
  uint32_t raw_auto_heal_trigger_ratio_mp;
  memcpy(&raw_auto_heal_trigger_ratio_mp, &tmp_auto_heal_trigger_ratio_mp, sizeof(tmp_auto_heal_trigger_ratio_mp));
  if (raw_auto_heal_trigger_ratio_mp != 0) {
    total_size += 1 + 4;
  }

  // float player_lock_distance_hand = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_hand = this->_internal_player_lock_distance_hand();
  uint32_t raw_player_lock_distance_hand;
  memcpy(&raw_player_lock_distance_hand, &tmp_player_lock_distance_hand, sizeof(tmp_player_lock_distance_hand));
  if (raw_player_lock_distance_hand != 0) {
    total_size += 1 + 4;
  }

  // float player_lock_distance_auto = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_auto = this->_internal_player_lock_distance_auto();
  uint32_t raw_player_lock_distance_auto;
  memcpy(&raw_player_lock_distance_auto, &tmp_player_lock_distance_auto, sizeof(tmp_player_lock_distance_auto));
  if (raw_player_lock_distance_auto != 0) {
    total_size += 1 + 4;
  }

  // float player_lock_distance_max = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_max = this->_internal_player_lock_distance_max();
  uint32_t raw_player_lock_distance_max;
  memcpy(&raw_player_lock_distance_max, &tmp_player_lock_distance_max, sizeof(tmp_player_lock_distance_max));
  if (raw_player_lock_distance_max != 0) {
    total_size += 1 + 4;
  }

  // float player_lock_distance_near = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_near = this->_internal_player_lock_distance_near();
  uint32_t raw_player_lock_distance_near;
  memcpy(&raw_player_lock_distance_near, &tmp_player_lock_distance_near, sizeof(tmp_player_lock_distance_near));
  if (raw_player_lock_distance_near != 0) {
    total_size += 1 + 4;
  }

  // float player_lock_distance_screen = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_screen = this->_internal_player_lock_distance_screen();
  uint32_t raw_player_lock_distance_screen;
  memcpy(&raw_player_lock_distance_screen, &tmp_player_lock_distance_screen, sizeof(tmp_player_lock_distance_screen));
  if (raw_player_lock_distance_screen != 0) {
    total_size += 1 + 4;
  }

  // float enter_scale_size_distance_2d = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_enter_scale_size_distance_2d = this->_internal_enter_scale_size_distance_2d();
  uint32_t raw_enter_scale_size_distance_2d;
  memcpy(&raw_enter_scale_size_distance_2d, &tmp_enter_scale_size_distance_2d, sizeof(tmp_enter_scale_size_distance_2d));
  if (raw_enter_scale_size_distance_2d != 0) {
    total_size += 1 + 4;
  }

  // float player_reborn_time = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_reborn_time = this->_internal_player_reborn_time();
  uint32_t raw_player_reborn_time;
  memcpy(&raw_player_reborn_time, &tmp_player_reborn_time, sizeof(tmp_player_reborn_time));
  if (raw_player_reborn_time != 0) {
    total_size += 1 + 4;
  }

  // float player_reduce_time = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_reduce_time = this->_internal_player_reduce_time();
  uint32_t raw_player_reduce_time;
  memcpy(&raw_player_reduce_time, &tmp_player_reduce_time, sizeof(tmp_player_reduce_time));
  if (raw_player_reduce_time != 0) {
    total_size += 1 + 4;
  }

  // float player_reduce_num_max = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_reduce_num_max = this->_internal_player_reduce_num_max();
  uint32_t raw_player_reduce_num_max;
  memcpy(&raw_player_reduce_num_max, &tmp_player_reduce_num_max, sizeof(tmp_player_reduce_num_max));
  if (raw_player_reduce_num_max != 0) {
    total_size += 2 + 4;
  }

  // float player_escape_time = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_escape_time = this->_internal_player_escape_time();
  uint32_t raw_player_escape_time;
  memcpy(&raw_player_escape_time, &tmp_player_escape_time, sizeof(tmp_player_escape_time));
  if (raw_player_escape_time != 0) {
    total_size += 2 + 4;
  }

  // float battle_status_seconds = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_battle_status_seconds = this->_internal_battle_status_seconds();
  uint32_t raw_battle_status_seconds;
  memcpy(&raw_battle_status_seconds, &tmp_battle_status_seconds, sizeof(tmp_battle_status_seconds));
  if (raw_battle_status_seconds != 0) {
    total_size += 2 + 4;
  }

  // int32 max_explore_time = 19;
  if (this->_internal_max_explore_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_max_explore_time());
  }

  // float player_teleport_cooldown = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_teleport_cooldown = this->_internal_player_teleport_cooldown();
  uint32_t raw_player_teleport_cooldown;
  memcpy(&raw_player_teleport_cooldown, &tmp_player_teleport_cooldown, sizeof(tmp_player_teleport_cooldown));
  if (raw_player_teleport_cooldown != 0) {
    total_size += 2 + 4;
  }

  // int32 switch_cultivation_direction_min_rank = 21;
  if (this->_internal_switch_cultivation_direction_min_rank() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_switch_cultivation_direction_min_rank());
  }

  // float server_take_control_idle_seconds = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_server_take_control_idle_seconds = this->_internal_server_take_control_idle_seconds();
  uint32_t raw_server_take_control_idle_seconds;
  memcpy(&raw_server_take_control_idle_seconds, &tmp_server_take_control_idle_seconds, sizeof(tmp_server_take_control_idle_seconds));
  if (raw_server_take_control_idle_seconds != 0) {
    total_size += 2 + 4;
  }

  // float player_location_correction_distance_near = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_location_correction_distance_near = this->_internal_player_location_correction_distance_near();
  uint32_t raw_player_location_correction_distance_near;
  memcpy(&raw_player_location_correction_distance_near, &tmp_player_location_correction_distance_near, sizeof(tmp_player_location_correction_distance_near));
  if (raw_player_location_correction_distance_near != 0) {
    total_size += 2 + 4;
  }

  // float player_location_correction_distance_far = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_location_correction_distance_far = this->_internal_player_location_correction_distance_far();
  uint32_t raw_player_location_correction_distance_far;
  memcpy(&raw_player_location_correction_distance_far, &tmp_player_location_correction_distance_far, sizeof(tmp_player_location_correction_distance_far));
  if (raw_player_location_correction_distance_far != 0) {
    total_size += 2 + 4;
  }

  // float player_correction_cost_speed = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_correction_cost_speed = this->_internal_player_correction_cost_speed();
  uint32_t raw_player_correction_cost_speed;
  memcpy(&raw_player_correction_cost_speed, &tmp_player_correction_cost_speed, sizeof(tmp_player_correction_cost_speed));
  if (raw_player_correction_cost_speed != 0) {
    total_size += 2 + 4;
  }

  // float mini_map_world_width = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mini_map_world_width = this->_internal_mini_map_world_width();
  uint32_t raw_mini_map_world_width;
  memcpy(&raw_mini_map_world_width, &tmp_mini_map_world_width, sizeof(tmp_mini_map_world_width));
  if (raw_mini_map_world_width != 0) {
    total_size += 2 + 4;
  }

  // float mini_map_world_height = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mini_map_world_height = this->_internal_mini_map_world_height();
  uint32_t raw_mini_map_world_height;
  memcpy(&raw_mini_map_world_height, &tmp_mini_map_world_height, sizeof(tmp_mini_map_world_height));
  if (raw_mini_map_world_height != 0) {
    total_size += 2 + 4;
  }

  // float activate_entities_distance = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_activate_entities_distance = this->_internal_activate_entities_distance();
  uint32_t raw_activate_entities_distance;
  memcpy(&raw_activate_entities_distance, &tmp_activate_entities_distance, sizeof(tmp_activate_entities_distance));
  if (raw_activate_entities_distance != 0) {
    total_size += 2 + 4;
  }

  // float select_box_auto_disappear_time = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_select_box_auto_disappear_time = this->_internal_select_box_auto_disappear_time();
  uint32_t raw_select_box_auto_disappear_time;
  memcpy(&raw_select_box_auto_disappear_time, &tmp_select_box_auto_disappear_time, sizeof(tmp_select_box_auto_disappear_time));
  if (raw_select_box_auto_disappear_time != 0) {
    total_size += 2 + 4;
  }

  // float intervene_to_auto_seconds = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intervene_to_auto_seconds = this->_internal_intervene_to_auto_seconds();
  uint32_t raw_intervene_to_auto_seconds;
  memcpy(&raw_intervene_to_auto_seconds, &tmp_intervene_to_auto_seconds, sizeof(tmp_intervene_to_auto_seconds));
  if (raw_intervene_to_auto_seconds != 0) {
    total_size += 2 + 4;
  }

  // float set_pause_move_function_time = 31;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_set_pause_move_function_time = this->_internal_set_pause_move_function_time();
  uint32_t raw_set_pause_move_function_time;
  memcpy(&raw_set_pause_move_function_time, &tmp_set_pause_move_function_time, sizeof(tmp_set_pause_move_function_time));
  if (raw_set_pause_move_function_time != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfigConstants::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfigConstants::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfigConstants::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfigConstants::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfigConstants*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfigConstants&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfigConstants)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_init_radius = from._internal_init_radius();
  uint32_t raw_init_radius;
  memcpy(&raw_init_radius, &tmp_init_radius, sizeof(tmp_init_radius));
  if (raw_init_radius != 0) {
    _this->_internal_set_init_radius(from._internal_init_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_stop_time = from._internal_auto_move_stop_time();
  uint32_t raw_auto_move_stop_time;
  memcpy(&raw_auto_move_stop_time, &tmp_auto_move_stop_time, sizeof(tmp_auto_move_stop_time));
  if (raw_auto_move_stop_time != 0) {
    _this->_internal_set_auto_move_stop_time(from._internal_auto_move_stop_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_walk_time = from._internal_auto_move_walk_time();
  uint32_t raw_auto_move_walk_time;
  memcpy(&raw_auto_move_walk_time, &tmp_auto_move_walk_time, sizeof(tmp_auto_move_walk_time));
  if (raw_auto_move_walk_time != 0) {
    _this->_internal_set_auto_move_walk_time(from._internal_auto_move_walk_time());
  }
  if (from._internal_move_speed() != 0) {
    _this->_internal_set_move_speed(from._internal_move_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_interval_time = from._internal_attack_interval_time();
  uint32_t raw_attack_interval_time;
  memcpy(&raw_attack_interval_time, &tmp_attack_interval_time, sizeof(tmp_attack_interval_time));
  if (raw_attack_interval_time != 0) {
    _this->_internal_set_attack_interval_time(from._internal_attack_interval_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_heal_trigger_ratio_hp = from._internal_auto_heal_trigger_ratio_hp();
  uint32_t raw_auto_heal_trigger_ratio_hp;
  memcpy(&raw_auto_heal_trigger_ratio_hp, &tmp_auto_heal_trigger_ratio_hp, sizeof(tmp_auto_heal_trigger_ratio_hp));
  if (raw_auto_heal_trigger_ratio_hp != 0) {
    _this->_internal_set_auto_heal_trigger_ratio_hp(from._internal_auto_heal_trigger_ratio_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_heal_trigger_ratio_mp = from._internal_auto_heal_trigger_ratio_mp();
  uint32_t raw_auto_heal_trigger_ratio_mp;
  memcpy(&raw_auto_heal_trigger_ratio_mp, &tmp_auto_heal_trigger_ratio_mp, sizeof(tmp_auto_heal_trigger_ratio_mp));
  if (raw_auto_heal_trigger_ratio_mp != 0) {
    _this->_internal_set_auto_heal_trigger_ratio_mp(from._internal_auto_heal_trigger_ratio_mp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_hand = from._internal_player_lock_distance_hand();
  uint32_t raw_player_lock_distance_hand;
  memcpy(&raw_player_lock_distance_hand, &tmp_player_lock_distance_hand, sizeof(tmp_player_lock_distance_hand));
  if (raw_player_lock_distance_hand != 0) {
    _this->_internal_set_player_lock_distance_hand(from._internal_player_lock_distance_hand());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_auto = from._internal_player_lock_distance_auto();
  uint32_t raw_player_lock_distance_auto;
  memcpy(&raw_player_lock_distance_auto, &tmp_player_lock_distance_auto, sizeof(tmp_player_lock_distance_auto));
  if (raw_player_lock_distance_auto != 0) {
    _this->_internal_set_player_lock_distance_auto(from._internal_player_lock_distance_auto());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_max = from._internal_player_lock_distance_max();
  uint32_t raw_player_lock_distance_max;
  memcpy(&raw_player_lock_distance_max, &tmp_player_lock_distance_max, sizeof(tmp_player_lock_distance_max));
  if (raw_player_lock_distance_max != 0) {
    _this->_internal_set_player_lock_distance_max(from._internal_player_lock_distance_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_near = from._internal_player_lock_distance_near();
  uint32_t raw_player_lock_distance_near;
  memcpy(&raw_player_lock_distance_near, &tmp_player_lock_distance_near, sizeof(tmp_player_lock_distance_near));
  if (raw_player_lock_distance_near != 0) {
    _this->_internal_set_player_lock_distance_near(from._internal_player_lock_distance_near());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_lock_distance_screen = from._internal_player_lock_distance_screen();
  uint32_t raw_player_lock_distance_screen;
  memcpy(&raw_player_lock_distance_screen, &tmp_player_lock_distance_screen, sizeof(tmp_player_lock_distance_screen));
  if (raw_player_lock_distance_screen != 0) {
    _this->_internal_set_player_lock_distance_screen(from._internal_player_lock_distance_screen());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_enter_scale_size_distance_2d = from._internal_enter_scale_size_distance_2d();
  uint32_t raw_enter_scale_size_distance_2d;
  memcpy(&raw_enter_scale_size_distance_2d, &tmp_enter_scale_size_distance_2d, sizeof(tmp_enter_scale_size_distance_2d));
  if (raw_enter_scale_size_distance_2d != 0) {
    _this->_internal_set_enter_scale_size_distance_2d(from._internal_enter_scale_size_distance_2d());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_reborn_time = from._internal_player_reborn_time();
  uint32_t raw_player_reborn_time;
  memcpy(&raw_player_reborn_time, &tmp_player_reborn_time, sizeof(tmp_player_reborn_time));
  if (raw_player_reborn_time != 0) {
    _this->_internal_set_player_reborn_time(from._internal_player_reborn_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_reduce_time = from._internal_player_reduce_time();
  uint32_t raw_player_reduce_time;
  memcpy(&raw_player_reduce_time, &tmp_player_reduce_time, sizeof(tmp_player_reduce_time));
  if (raw_player_reduce_time != 0) {
    _this->_internal_set_player_reduce_time(from._internal_player_reduce_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_reduce_num_max = from._internal_player_reduce_num_max();
  uint32_t raw_player_reduce_num_max;
  memcpy(&raw_player_reduce_num_max, &tmp_player_reduce_num_max, sizeof(tmp_player_reduce_num_max));
  if (raw_player_reduce_num_max != 0) {
    _this->_internal_set_player_reduce_num_max(from._internal_player_reduce_num_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_escape_time = from._internal_player_escape_time();
  uint32_t raw_player_escape_time;
  memcpy(&raw_player_escape_time, &tmp_player_escape_time, sizeof(tmp_player_escape_time));
  if (raw_player_escape_time != 0) {
    _this->_internal_set_player_escape_time(from._internal_player_escape_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_battle_status_seconds = from._internal_battle_status_seconds();
  uint32_t raw_battle_status_seconds;
  memcpy(&raw_battle_status_seconds, &tmp_battle_status_seconds, sizeof(tmp_battle_status_seconds));
  if (raw_battle_status_seconds != 0) {
    _this->_internal_set_battle_status_seconds(from._internal_battle_status_seconds());
  }
  if (from._internal_max_explore_time() != 0) {
    _this->_internal_set_max_explore_time(from._internal_max_explore_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_teleport_cooldown = from._internal_player_teleport_cooldown();
  uint32_t raw_player_teleport_cooldown;
  memcpy(&raw_player_teleport_cooldown, &tmp_player_teleport_cooldown, sizeof(tmp_player_teleport_cooldown));
  if (raw_player_teleport_cooldown != 0) {
    _this->_internal_set_player_teleport_cooldown(from._internal_player_teleport_cooldown());
  }
  if (from._internal_switch_cultivation_direction_min_rank() != 0) {
    _this->_internal_set_switch_cultivation_direction_min_rank(from._internal_switch_cultivation_direction_min_rank());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_server_take_control_idle_seconds = from._internal_server_take_control_idle_seconds();
  uint32_t raw_server_take_control_idle_seconds;
  memcpy(&raw_server_take_control_idle_seconds, &tmp_server_take_control_idle_seconds, sizeof(tmp_server_take_control_idle_seconds));
  if (raw_server_take_control_idle_seconds != 0) {
    _this->_internal_set_server_take_control_idle_seconds(from._internal_server_take_control_idle_seconds());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_location_correction_distance_near = from._internal_player_location_correction_distance_near();
  uint32_t raw_player_location_correction_distance_near;
  memcpy(&raw_player_location_correction_distance_near, &tmp_player_location_correction_distance_near, sizeof(tmp_player_location_correction_distance_near));
  if (raw_player_location_correction_distance_near != 0) {
    _this->_internal_set_player_location_correction_distance_near(from._internal_player_location_correction_distance_near());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_location_correction_distance_far = from._internal_player_location_correction_distance_far();
  uint32_t raw_player_location_correction_distance_far;
  memcpy(&raw_player_location_correction_distance_far, &tmp_player_location_correction_distance_far, sizeof(tmp_player_location_correction_distance_far));
  if (raw_player_location_correction_distance_far != 0) {
    _this->_internal_set_player_location_correction_distance_far(from._internal_player_location_correction_distance_far());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_correction_cost_speed = from._internal_player_correction_cost_speed();
  uint32_t raw_player_correction_cost_speed;
  memcpy(&raw_player_correction_cost_speed, &tmp_player_correction_cost_speed, sizeof(tmp_player_correction_cost_speed));
  if (raw_player_correction_cost_speed != 0) {
    _this->_internal_set_player_correction_cost_speed(from._internal_player_correction_cost_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mini_map_world_width = from._internal_mini_map_world_width();
  uint32_t raw_mini_map_world_width;
  memcpy(&raw_mini_map_world_width, &tmp_mini_map_world_width, sizeof(tmp_mini_map_world_width));
  if (raw_mini_map_world_width != 0) {
    _this->_internal_set_mini_map_world_width(from._internal_mini_map_world_width());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mini_map_world_height = from._internal_mini_map_world_height();
  uint32_t raw_mini_map_world_height;
  memcpy(&raw_mini_map_world_height, &tmp_mini_map_world_height, sizeof(tmp_mini_map_world_height));
  if (raw_mini_map_world_height != 0) {
    _this->_internal_set_mini_map_world_height(from._internal_mini_map_world_height());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_activate_entities_distance = from._internal_activate_entities_distance();
  uint32_t raw_activate_entities_distance;
  memcpy(&raw_activate_entities_distance, &tmp_activate_entities_distance, sizeof(tmp_activate_entities_distance));
  if (raw_activate_entities_distance != 0) {
    _this->_internal_set_activate_entities_distance(from._internal_activate_entities_distance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_select_box_auto_disappear_time = from._internal_select_box_auto_disappear_time();
  uint32_t raw_select_box_auto_disappear_time;
  memcpy(&raw_select_box_auto_disappear_time, &tmp_select_box_auto_disappear_time, sizeof(tmp_select_box_auto_disappear_time));
  if (raw_select_box_auto_disappear_time != 0) {
    _this->_internal_set_select_box_auto_disappear_time(from._internal_select_box_auto_disappear_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intervene_to_auto_seconds = from._internal_intervene_to_auto_seconds();
  uint32_t raw_intervene_to_auto_seconds;
  memcpy(&raw_intervene_to_auto_seconds, &tmp_intervene_to_auto_seconds, sizeof(tmp_intervene_to_auto_seconds));
  if (raw_intervene_to_auto_seconds != 0) {
    _this->_internal_set_intervene_to_auto_seconds(from._internal_intervene_to_auto_seconds());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_set_pause_move_function_time = from._internal_set_pause_move_function_time();
  uint32_t raw_set_pause_move_function_time;
  memcpy(&raw_set_pause_move_function_time, &tmp_set_pause_move_function_time, sizeof(tmp_set_pause_move_function_time));
  if (raw_set_pause_move_function_time != 0) {
    _this->_internal_set_set_pause_move_function_time(from._internal_set_pause_move_function_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfigConstants::CopyFrom(const PlayerGlobalConfigConstants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfigConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfigConstants::IsInitialized() const {
  return true;
}

void PlayerGlobalConfigConstants::InternalSwap(PlayerGlobalConfigConstants* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigConstants, _impl_.set_pause_move_function_time_)
      + sizeof(PlayerGlobalConfigConstants::_impl_.set_pause_move_function_time_)
      - PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigConstants, _impl_.init_radius_)>(
          reinterpret_cast<char*>(&_impl_.init_radius_),
          reinterpret_cast<char*>(&other->_impl_.init_radius_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfigConstants::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[10]);
}

// ===================================================================

class PlayerGlobalConfigAbility::_Internal {
 public:
};

PlayerGlobalConfigAbility::PlayerGlobalConfigAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfigAbility)
}
PlayerGlobalConfigAbility::PlayerGlobalConfigAbility(const PlayerGlobalConfigAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfigAbility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slots_unlock_rank_){from._impl_.slots_unlock_rank_}
    , /*decltype(_impl_._slots_unlock_rank_cached_byte_size_)*/{0}
    , decltype(_impl_.open_rank_){}
    , decltype(_impl_.open_secondary_rank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.open_rank_, &from._impl_.open_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.open_secondary_rank_) -
    reinterpret_cast<char*>(&_impl_.open_rank_)) + sizeof(_impl_.open_secondary_rank_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfigAbility)
}

inline void PlayerGlobalConfigAbility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.slots_unlock_rank_){arena}
    , /*decltype(_impl_._slots_unlock_rank_cached_byte_size_)*/{0}
    , decltype(_impl_.open_rank_){0}
    , decltype(_impl_.open_secondary_rank_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfigAbility::~PlayerGlobalConfigAbility() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfigAbility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfigAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slots_unlock_rank_.~RepeatedField();
}

void PlayerGlobalConfigAbility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfigAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfigAbility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slots_unlock_rank_.Clear();
  ::memset(&_impl_.open_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.open_secondary_rank_) -
      reinterpret_cast<char*>(&_impl_.open_rank_)) + sizeof(_impl_.open_secondary_rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfigAbility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 open_rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.open_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 open_secondary_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.open_secondary_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 slots_unlock_rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_slots_unlock_rank(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_slots_unlock_rank(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfigAbility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfigAbility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 open_rank = 1;
  if (this->_internal_open_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_open_rank(), target);
  }

  // int32 open_secondary_rank = 2;
  if (this->_internal_open_secondary_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_open_secondary_rank(), target);
  }

  // repeated int32 slots_unlock_rank = 3;
  {
    int byte_size = _impl_._slots_unlock_rank_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_slots_unlock_rank(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfigAbility)
  return target;
}

size_t PlayerGlobalConfigAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfigAbility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 slots_unlock_rank = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.slots_unlock_rank_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._slots_unlock_rank_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 open_rank = 1;
  if (this->_internal_open_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_open_rank());
  }

  // int32 open_secondary_rank = 2;
  if (this->_internal_open_secondary_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_open_secondary_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfigAbility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfigAbility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfigAbility::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfigAbility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfigAbility*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfigAbility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfigAbility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slots_unlock_rank_.MergeFrom(from._impl_.slots_unlock_rank_);
  if (from._internal_open_rank() != 0) {
    _this->_internal_set_open_rank(from._internal_open_rank());
  }
  if (from._internal_open_secondary_rank() != 0) {
    _this->_internal_set_open_secondary_rank(from._internal_open_secondary_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfigAbility::CopyFrom(const PlayerGlobalConfigAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfigAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfigAbility::IsInitialized() const {
  return true;
}

void PlayerGlobalConfigAbility::InternalSwap(PlayerGlobalConfigAbility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.slots_unlock_rank_.InternalSwap(&other->_impl_.slots_unlock_rank_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigAbility, _impl_.open_secondary_rank_)
      + sizeof(PlayerGlobalConfigAbility::_impl_.open_secondary_rank_)
      - PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigAbility, _impl_.open_rank_)>(
          reinterpret_cast<char*>(&_impl_.open_rank_),
          reinterpret_cast<char*>(&other->_impl_.open_rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfigAbility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[11]);
}

// ===================================================================

class PlayerGlobalConfigBreathingExercise::_Internal {
 public:
};

PlayerGlobalConfigBreathingExercise::PlayerGlobalConfigBreathingExercise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfigBreathingExercise)
}
PlayerGlobalConfigBreathingExercise::PlayerGlobalConfigBreathingExercise(const PlayerGlobalConfigBreathingExercise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfigBreathingExercise* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_){}
    , decltype(_impl_.cancel_pct_){}
    , decltype(_impl_.high_min_pct_){}
    , decltype(_impl_.perfect_min_pct_){}
    , decltype(_impl_.perfect_max_pct_){}
    , decltype(_impl_.rate2_){}
    , decltype(_impl_.rate5_){}
    , decltype(_impl_.rate10_){}
    , decltype(_impl_.basic_ling_qi_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.speed_, &from._impl_.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.basic_ling_qi_) -
    reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.basic_ling_qi_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfigBreathingExercise)
}

inline void PlayerGlobalConfigBreathingExercise::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_){0}
    , decltype(_impl_.cancel_pct_){0}
    , decltype(_impl_.high_min_pct_){0}
    , decltype(_impl_.perfect_min_pct_){0}
    , decltype(_impl_.perfect_max_pct_){0}
    , decltype(_impl_.rate2_){0}
    , decltype(_impl_.rate5_){0}
    , decltype(_impl_.rate10_){0}
    , decltype(_impl_.basic_ling_qi_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfigBreathingExercise::~PlayerGlobalConfigBreathingExercise() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfigBreathingExercise)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfigBreathingExercise::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerGlobalConfigBreathingExercise::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfigBreathingExercise::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfigBreathingExercise)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.basic_ling_qi_) -
      reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.basic_ling_qi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfigBreathingExercise::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cancel_pct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.cancel_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float high_min_pct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.high_min_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float perfect_min_pct = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.perfect_min_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float perfect_max_pct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.perfect_max_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 rate2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rate2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rate5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.rate5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rate10 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.rate10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float basic_ling_qi = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.basic_ling_qi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfigBreathingExercise::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfigBreathingExercise)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float speed = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_speed(), target);
  }

  // float cancel_pct = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cancel_pct = this->_internal_cancel_pct();
  uint32_t raw_cancel_pct;
  memcpy(&raw_cancel_pct, &tmp_cancel_pct, sizeof(tmp_cancel_pct));
  if (raw_cancel_pct != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_cancel_pct(), target);
  }

  // float high_min_pct = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high_min_pct = this->_internal_high_min_pct();
  uint32_t raw_high_min_pct;
  memcpy(&raw_high_min_pct, &tmp_high_min_pct, sizeof(tmp_high_min_pct));
  if (raw_high_min_pct != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_high_min_pct(), target);
  }

  // float perfect_min_pct = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_perfect_min_pct = this->_internal_perfect_min_pct();
  uint32_t raw_perfect_min_pct;
  memcpy(&raw_perfect_min_pct, &tmp_perfect_min_pct, sizeof(tmp_perfect_min_pct));
  if (raw_perfect_min_pct != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_perfect_min_pct(), target);
  }

  // float perfect_max_pct = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_perfect_max_pct = this->_internal_perfect_max_pct();
  uint32_t raw_perfect_max_pct;
  memcpy(&raw_perfect_max_pct, &tmp_perfect_max_pct, sizeof(tmp_perfect_max_pct));
  if (raw_perfect_max_pct != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_perfect_max_pct(), target);
  }

  // int32 rate2 = 6;
  if (this->_internal_rate2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_rate2(), target);
  }

  // int32 rate5 = 7;
  if (this->_internal_rate5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_rate5(), target);
  }

  // int32 rate10 = 8;
  if (this->_internal_rate10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_rate10(), target);
  }

  // float basic_ling_qi = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basic_ling_qi = this->_internal_basic_ling_qi();
  uint32_t raw_basic_ling_qi;
  memcpy(&raw_basic_ling_qi, &tmp_basic_ling_qi, sizeof(tmp_basic_ling_qi));
  if (raw_basic_ling_qi != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_basic_ling_qi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfigBreathingExercise)
  return target;
}

size_t PlayerGlobalConfigBreathingExercise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfigBreathingExercise)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float speed = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  // float cancel_pct = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cancel_pct = this->_internal_cancel_pct();
  uint32_t raw_cancel_pct;
  memcpy(&raw_cancel_pct, &tmp_cancel_pct, sizeof(tmp_cancel_pct));
  if (raw_cancel_pct != 0) {
    total_size += 1 + 4;
  }

  // float high_min_pct = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high_min_pct = this->_internal_high_min_pct();
  uint32_t raw_high_min_pct;
  memcpy(&raw_high_min_pct, &tmp_high_min_pct, sizeof(tmp_high_min_pct));
  if (raw_high_min_pct != 0) {
    total_size += 1 + 4;
  }

  // float perfect_min_pct = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_perfect_min_pct = this->_internal_perfect_min_pct();
  uint32_t raw_perfect_min_pct;
  memcpy(&raw_perfect_min_pct, &tmp_perfect_min_pct, sizeof(tmp_perfect_min_pct));
  if (raw_perfect_min_pct != 0) {
    total_size += 1 + 4;
  }

  // float perfect_max_pct = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_perfect_max_pct = this->_internal_perfect_max_pct();
  uint32_t raw_perfect_max_pct;
  memcpy(&raw_perfect_max_pct, &tmp_perfect_max_pct, sizeof(tmp_perfect_max_pct));
  if (raw_perfect_max_pct != 0) {
    total_size += 1 + 4;
  }

  // int32 rate2 = 6;
  if (this->_internal_rate2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rate2());
  }

  // int32 rate5 = 7;
  if (this->_internal_rate5() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rate5());
  }

  // int32 rate10 = 8;
  if (this->_internal_rate10() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rate10());
  }

  // float basic_ling_qi = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basic_ling_qi = this->_internal_basic_ling_qi();
  uint32_t raw_basic_ling_qi;
  memcpy(&raw_basic_ling_qi, &tmp_basic_ling_qi, sizeof(tmp_basic_ling_qi));
  if (raw_basic_ling_qi != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfigBreathingExercise::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfigBreathingExercise::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfigBreathingExercise::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfigBreathingExercise::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfigBreathingExercise*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfigBreathingExercise&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfigBreathingExercise)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cancel_pct = from._internal_cancel_pct();
  uint32_t raw_cancel_pct;
  memcpy(&raw_cancel_pct, &tmp_cancel_pct, sizeof(tmp_cancel_pct));
  if (raw_cancel_pct != 0) {
    _this->_internal_set_cancel_pct(from._internal_cancel_pct());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high_min_pct = from._internal_high_min_pct();
  uint32_t raw_high_min_pct;
  memcpy(&raw_high_min_pct, &tmp_high_min_pct, sizeof(tmp_high_min_pct));
  if (raw_high_min_pct != 0) {
    _this->_internal_set_high_min_pct(from._internal_high_min_pct());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_perfect_min_pct = from._internal_perfect_min_pct();
  uint32_t raw_perfect_min_pct;
  memcpy(&raw_perfect_min_pct, &tmp_perfect_min_pct, sizeof(tmp_perfect_min_pct));
  if (raw_perfect_min_pct != 0) {
    _this->_internal_set_perfect_min_pct(from._internal_perfect_min_pct());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_perfect_max_pct = from._internal_perfect_max_pct();
  uint32_t raw_perfect_max_pct;
  memcpy(&raw_perfect_max_pct, &tmp_perfect_max_pct, sizeof(tmp_perfect_max_pct));
  if (raw_perfect_max_pct != 0) {
    _this->_internal_set_perfect_max_pct(from._internal_perfect_max_pct());
  }
  if (from._internal_rate2() != 0) {
    _this->_internal_set_rate2(from._internal_rate2());
  }
  if (from._internal_rate5() != 0) {
    _this->_internal_set_rate5(from._internal_rate5());
  }
  if (from._internal_rate10() != 0) {
    _this->_internal_set_rate10(from._internal_rate10());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basic_ling_qi = from._internal_basic_ling_qi();
  uint32_t raw_basic_ling_qi;
  memcpy(&raw_basic_ling_qi, &tmp_basic_ling_qi, sizeof(tmp_basic_ling_qi));
  if (raw_basic_ling_qi != 0) {
    _this->_internal_set_basic_ling_qi(from._internal_basic_ling_qi());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfigBreathingExercise::CopyFrom(const PlayerGlobalConfigBreathingExercise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfigBreathingExercise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfigBreathingExercise::IsInitialized() const {
  return true;
}

void PlayerGlobalConfigBreathingExercise::InternalSwap(PlayerGlobalConfigBreathingExercise* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigBreathingExercise, _impl_.basic_ling_qi_)
      + sizeof(PlayerGlobalConfigBreathingExercise::_impl_.basic_ling_qi_)
      - PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigBreathingExercise, _impl_.speed_)>(
          reinterpret_cast<char*>(&_impl_.speed_),
          reinterpret_cast<char*>(&other->_impl_.speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfigBreathingExercise::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[12]);
}

// ===================================================================

class PlayerGlobalConfigThunderTestDegreeConfig::_Internal {
 public:
};

PlayerGlobalConfigThunderTestDegreeConfig::PlayerGlobalConfigThunderTestDegreeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfigThunderTestDegreeConfig)
}
PlayerGlobalConfigThunderTestDegreeConfig::PlayerGlobalConfigThunderTestDegreeConfig(const PlayerGlobalConfigThunderTestDegreeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfigThunderTestDegreeConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.degree_){}
    , decltype(_impl_.val_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.degree_, &from._impl_.degree_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.val_) -
    reinterpret_cast<char*>(&_impl_.degree_)) + sizeof(_impl_.val_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfigThunderTestDegreeConfig)
}

inline void PlayerGlobalConfigThunderTestDegreeConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.degree_){0}
    , decltype(_impl_.val_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfigThunderTestDegreeConfig::~PlayerGlobalConfigThunderTestDegreeConfig() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfigThunderTestDegreeConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfigThunderTestDegreeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerGlobalConfigThunderTestDegreeConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfigThunderTestDegreeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfigThunderTestDegreeConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.val_) -
      reinterpret_cast<char*>(&_impl_.degree_)) + sizeof(_impl_.val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfigThunderTestDegreeConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 degree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfigThunderTestDegreeConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfigThunderTestDegreeConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 degree = 1;
  if (this->_internal_degree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_degree(), target);
  }

  // float val = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val = this->_internal_val();
  uint32_t raw_val;
  memcpy(&raw_val, &tmp_val, sizeof(tmp_val));
  if (raw_val != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfigThunderTestDegreeConfig)
  return target;
}

size_t PlayerGlobalConfigThunderTestDegreeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfigThunderTestDegreeConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 degree = 1;
  if (this->_internal_degree() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_degree());
  }

  // float val = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val = this->_internal_val();
  uint32_t raw_val;
  memcpy(&raw_val, &tmp_val, sizeof(tmp_val));
  if (raw_val != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfigThunderTestDegreeConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfigThunderTestDegreeConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfigThunderTestDegreeConfig::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfigThunderTestDegreeConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfigThunderTestDegreeConfig*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfigThunderTestDegreeConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfigThunderTestDegreeConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_degree() != 0) {
    _this->_internal_set_degree(from._internal_degree());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val = from._internal_val();
  uint32_t raw_val;
  memcpy(&raw_val, &tmp_val, sizeof(tmp_val));
  if (raw_val != 0) {
    _this->_internal_set_val(from._internal_val());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfigThunderTestDegreeConfig::CopyFrom(const PlayerGlobalConfigThunderTestDegreeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfigThunderTestDegreeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfigThunderTestDegreeConfig::IsInitialized() const {
  return true;
}

void PlayerGlobalConfigThunderTestDegreeConfig::InternalSwap(PlayerGlobalConfigThunderTestDegreeConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigThunderTestDegreeConfig, _impl_.val_)
      + sizeof(PlayerGlobalConfigThunderTestDegreeConfig::_impl_.val_)
      - PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigThunderTestDegreeConfig, _impl_.degree_)>(
          reinterpret_cast<char*>(&_impl_.degree_),
          reinterpret_cast<char*>(&other->_impl_.degree_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfigThunderTestDegreeConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[13]);
}

// ===================================================================

class PlayerGlobalConfigThunderTest::_Internal {
 public:
};

PlayerGlobalConfigThunderTest::PlayerGlobalConfigThunderTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfigThunderTest)
}
PlayerGlobalConfigThunderTest::PlayerGlobalConfigThunderTest(const PlayerGlobalConfigThunderTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfigThunderTest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.damage_coef_){from._impl_.damage_coef_}
    , decltype(_impl_.damage_base_){from._impl_.damage_base_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfigThunderTest)
}

inline void PlayerGlobalConfigThunderTest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.damage_coef_){arena}
    , decltype(_impl_.damage_base_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfigThunderTest::~PlayerGlobalConfigThunderTest() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfigThunderTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfigThunderTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.damage_coef_.~RepeatedField();
  _impl_.damage_base_.~RepeatedPtrField();
}

void PlayerGlobalConfigThunderTest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfigThunderTest::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfigThunderTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.damage_coef_.Clear();
  _impl_.damage_base_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfigThunderTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float damage_coef = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_damage_coef(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_damage_coef(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.PlayerGlobalConfigThunderTestDegreeConfig damage_base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_damage_base(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfigThunderTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfigThunderTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float damage_coef = 1;
  if (this->_internal_damage_coef_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_damage_coef(), target);
  }

  // repeated .idlepb.PlayerGlobalConfigThunderTestDegreeConfig damage_base = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_damage_base_size()); i < n; i++) {
    const auto& repfield = this->_internal_damage_base(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfigThunderTest)
  return target;
}

size_t PlayerGlobalConfigThunderTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfigThunderTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float damage_coef = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_damage_coef_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .idlepb.PlayerGlobalConfigThunderTestDegreeConfig damage_base = 2;
  total_size += 1UL * this->_internal_damage_base_size();
  for (const auto& msg : this->_impl_.damage_base_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfigThunderTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfigThunderTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfigThunderTest::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfigThunderTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfigThunderTest*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfigThunderTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfigThunderTest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.damage_coef_.MergeFrom(from._impl_.damage_coef_);
  _this->_impl_.damage_base_.MergeFrom(from._impl_.damage_base_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfigThunderTest::CopyFrom(const PlayerGlobalConfigThunderTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfigThunderTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfigThunderTest::IsInitialized() const {
  return true;
}

void PlayerGlobalConfigThunderTest::InternalSwap(PlayerGlobalConfigThunderTest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.damage_coef_.InternalSwap(&other->_impl_.damage_coef_);
  _impl_.damage_base_.InternalSwap(&other->_impl_.damage_base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfigThunderTest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[14]);
}

// ===================================================================

class PlayerGlobalConfigAlchemy::_Internal {
 public:
};

PlayerGlobalConfigAlchemy::PlayerGlobalConfigAlchemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfigAlchemy)
}
PlayerGlobalConfigAlchemy::PlayerGlobalConfigAlchemy(const PlayerGlobalConfigAlchemy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfigAlchemy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.each_refining_seconds_){}
    , decltype(_impl_.big_chance_value_){}
    , decltype(_impl_.small_chance_value_){}
    , decltype(_impl_.max_daily_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.each_refining_seconds_, &from._impl_.each_refining_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_daily_count_) -
    reinterpret_cast<char*>(&_impl_.each_refining_seconds_)) + sizeof(_impl_.max_daily_count_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfigAlchemy)
}

inline void PlayerGlobalConfigAlchemy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.each_refining_seconds_){0}
    , decltype(_impl_.big_chance_value_){0}
    , decltype(_impl_.small_chance_value_){0}
    , decltype(_impl_.max_daily_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfigAlchemy::~PlayerGlobalConfigAlchemy() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfigAlchemy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfigAlchemy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerGlobalConfigAlchemy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfigAlchemy::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfigAlchemy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.each_refining_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_daily_count_) -
      reinterpret_cast<char*>(&_impl_.each_refining_seconds_)) + sizeof(_impl_.max_daily_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfigAlchemy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float each_refining_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.each_refining_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 big_chance_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.big_chance_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 small_chance_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.small_chance_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_daily_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_daily_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfigAlchemy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfigAlchemy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float each_refining_seconds = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_each_refining_seconds = this->_internal_each_refining_seconds();
  uint32_t raw_each_refining_seconds;
  memcpy(&raw_each_refining_seconds, &tmp_each_refining_seconds, sizeof(tmp_each_refining_seconds));
  if (raw_each_refining_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_each_refining_seconds(), target);
  }

  // int32 big_chance_value = 2;
  if (this->_internal_big_chance_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_chance_value(), target);
  }

  // int32 small_chance_value = 3;
  if (this->_internal_small_chance_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_small_chance_value(), target);
  }

  // int32 max_daily_count = 4;
  if (this->_internal_max_daily_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_daily_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfigAlchemy)
  return target;
}

size_t PlayerGlobalConfigAlchemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfigAlchemy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float each_refining_seconds = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_each_refining_seconds = this->_internal_each_refining_seconds();
  uint32_t raw_each_refining_seconds;
  memcpy(&raw_each_refining_seconds, &tmp_each_refining_seconds, sizeof(tmp_each_refining_seconds));
  if (raw_each_refining_seconds != 0) {
    total_size += 1 + 4;
  }

  // int32 big_chance_value = 2;
  if (this->_internal_big_chance_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_big_chance_value());
  }

  // int32 small_chance_value = 3;
  if (this->_internal_small_chance_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_small_chance_value());
  }

  // int32 max_daily_count = 4;
  if (this->_internal_max_daily_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_daily_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfigAlchemy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfigAlchemy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfigAlchemy::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfigAlchemy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfigAlchemy*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfigAlchemy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfigAlchemy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_each_refining_seconds = from._internal_each_refining_seconds();
  uint32_t raw_each_refining_seconds;
  memcpy(&raw_each_refining_seconds, &tmp_each_refining_seconds, sizeof(tmp_each_refining_seconds));
  if (raw_each_refining_seconds != 0) {
    _this->_internal_set_each_refining_seconds(from._internal_each_refining_seconds());
  }
  if (from._internal_big_chance_value() != 0) {
    _this->_internal_set_big_chance_value(from._internal_big_chance_value());
  }
  if (from._internal_small_chance_value() != 0) {
    _this->_internal_set_small_chance_value(from._internal_small_chance_value());
  }
  if (from._internal_max_daily_count() != 0) {
    _this->_internal_set_max_daily_count(from._internal_max_daily_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfigAlchemy::CopyFrom(const PlayerGlobalConfigAlchemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfigAlchemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfigAlchemy::IsInitialized() const {
  return true;
}

void PlayerGlobalConfigAlchemy::InternalSwap(PlayerGlobalConfigAlchemy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigAlchemy, _impl_.max_daily_count_)
      + sizeof(PlayerGlobalConfigAlchemy::_impl_.max_daily_count_)
      - PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigAlchemy, _impl_.each_refining_seconds_)>(
          reinterpret_cast<char*>(&_impl_.each_refining_seconds_),
          reinterpret_cast<char*>(&other->_impl_.each_refining_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfigAlchemy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[15]);
}

// ===================================================================

class PlayerGlobalConfigForgeDestroyBackItemConfig::_Internal {
 public:
};

PlayerGlobalConfigForgeDestroyBackItemConfig::PlayerGlobalConfigForgeDestroyBackItemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig)
}
PlayerGlobalConfigForgeDestroyBackItemConfig::PlayerGlobalConfigForgeDestroyBackItemConfig(const PlayerGlobalConfigForgeDestroyBackItemConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfigForgeDestroyBackItemConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.degree_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.item_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.degree_, &from._impl_.degree_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_num_) -
    reinterpret_cast<char*>(&_impl_.degree_)) + sizeof(_impl_.item_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig)
}

inline void PlayerGlobalConfigForgeDestroyBackItemConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.degree_){0}
    , decltype(_impl_.item_id_){0}
    , decltype(_impl_.item_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfigForgeDestroyBackItemConfig::~PlayerGlobalConfigForgeDestroyBackItemConfig() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfigForgeDestroyBackItemConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerGlobalConfigForgeDestroyBackItemConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfigForgeDestroyBackItemConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_num_) -
      reinterpret_cast<char*>(&_impl_.degree_)) + sizeof(_impl_.item_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfigForgeDestroyBackItemConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 degree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.item_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfigForgeDestroyBackItemConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 degree = 1;
  if (this->_internal_degree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_degree(), target);
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_id(), target);
  }

  // int32 item_num = 3;
  if (this->_internal_item_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_item_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig)
  return target;
}

size_t PlayerGlobalConfigForgeDestroyBackItemConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 degree = 1;
  if (this->_internal_degree() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_degree());
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
  }

  // int32 item_num = 3;
  if (this->_internal_item_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfigForgeDestroyBackItemConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfigForgeDestroyBackItemConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfigForgeDestroyBackItemConfig::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfigForgeDestroyBackItemConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfigForgeDestroyBackItemConfig*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfigForgeDestroyBackItemConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_degree() != 0) {
    _this->_internal_set_degree(from._internal_degree());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_item_num() != 0) {
    _this->_internal_set_item_num(from._internal_item_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfigForgeDestroyBackItemConfig::CopyFrom(const PlayerGlobalConfigForgeDestroyBackItemConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfigForgeDestroyBackItemConfig::IsInitialized() const {
  return true;
}

void PlayerGlobalConfigForgeDestroyBackItemConfig::InternalSwap(PlayerGlobalConfigForgeDestroyBackItemConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigForgeDestroyBackItemConfig, _impl_.item_num_)
      + sizeof(PlayerGlobalConfigForgeDestroyBackItemConfig::_impl_.item_num_)
      - PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigForgeDestroyBackItemConfig, _impl_.degree_)>(
          reinterpret_cast<char*>(&_impl_.degree_),
          reinterpret_cast<char*>(&other->_impl_.degree_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfigForgeDestroyBackItemConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[16]);
}

// ===================================================================

class PlayerGlobalConfigForge::_Internal {
 public:
};

PlayerGlobalConfigForge::PlayerGlobalConfigForge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfigForge)
}
PlayerGlobalConfigForge::PlayerGlobalConfigForge(const PlayerGlobalConfigForge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfigForge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destroy_get_item_num_){from._impl_.destroy_get_item_num_}
    , decltype(_impl_.each_refining_seconds_){}
    , decltype(_impl_.big_chance_value_){}
    , decltype(_impl_.small_chance_value_){}
    , decltype(_impl_.max_daily_count_){}
    , decltype(_impl_.max_daily_extra_materials_use_count_){}
    , decltype(_impl_.revert_cost_gold_){}
    , decltype(_impl_.destroy_cost_gold_){}
    , decltype(_impl_.found_cost_gold_){}
    , decltype(_impl_.found_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.each_refining_seconds_, &from._impl_.each_refining_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.found_time_) -
    reinterpret_cast<char*>(&_impl_.each_refining_seconds_)) + sizeof(_impl_.found_time_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfigForge)
}

inline void PlayerGlobalConfigForge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.destroy_get_item_num_){arena}
    , decltype(_impl_.each_refining_seconds_){0}
    , decltype(_impl_.big_chance_value_){0}
    , decltype(_impl_.small_chance_value_){0}
    , decltype(_impl_.max_daily_count_){0}
    , decltype(_impl_.max_daily_extra_materials_use_count_){0}
    , decltype(_impl_.revert_cost_gold_){0}
    , decltype(_impl_.destroy_cost_gold_){0}
    , decltype(_impl_.found_cost_gold_){0}
    , decltype(_impl_.found_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfigForge::~PlayerGlobalConfigForge() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfigForge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfigForge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destroy_get_item_num_.~RepeatedPtrField();
}

void PlayerGlobalConfigForge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfigForge::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfigForge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destroy_get_item_num_.Clear();
  ::memset(&_impl_.each_refining_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.found_time_) -
      reinterpret_cast<char*>(&_impl_.each_refining_seconds_)) + sizeof(_impl_.found_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfigForge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float each_refining_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.each_refining_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 big_chance_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.big_chance_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 small_chance_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.small_chance_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_daily_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_daily_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_daily_extra_materials_use_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.max_daily_extra_materials_use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 revert_cost_gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.revert_cost_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 destroy_cost_gold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.destroy_cost_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig destroy_get_item_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_destroy_get_item_num(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 found_cost_gold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.found_cost_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 found_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.found_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfigForge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfigForge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float each_refining_seconds = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_each_refining_seconds = this->_internal_each_refining_seconds();
  uint32_t raw_each_refining_seconds;
  memcpy(&raw_each_refining_seconds, &tmp_each_refining_seconds, sizeof(tmp_each_refining_seconds));
  if (raw_each_refining_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_each_refining_seconds(), target);
  }

  // int32 big_chance_value = 2;
  if (this->_internal_big_chance_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_chance_value(), target);
  }

  // int32 small_chance_value = 3;
  if (this->_internal_small_chance_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_small_chance_value(), target);
  }

  // int32 max_daily_count = 4;
  if (this->_internal_max_daily_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_daily_count(), target);
  }

  // int32 max_daily_extra_materials_use_count = 5;
  if (this->_internal_max_daily_extra_materials_use_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_daily_extra_materials_use_count(), target);
  }

  // int32 revert_cost_gold = 6;
  if (this->_internal_revert_cost_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_revert_cost_gold(), target);
  }

  // int32 destroy_cost_gold = 7;
  if (this->_internal_destroy_cost_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_destroy_cost_gold(), target);
  }

  // repeated .idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig destroy_get_item_num = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_destroy_get_item_num_size()); i < n; i++) {
    const auto& repfield = this->_internal_destroy_get_item_num(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 found_cost_gold = 9;
  if (this->_internal_found_cost_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_found_cost_gold(), target);
  }

  // int32 found_time = 10;
  if (this->_internal_found_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_found_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfigForge)
  return target;
}

size_t PlayerGlobalConfigForge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfigForge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.PlayerGlobalConfigForgeDestroyBackItemConfig destroy_get_item_num = 8;
  total_size += 1UL * this->_internal_destroy_get_item_num_size();
  for (const auto& msg : this->_impl_.destroy_get_item_num_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float each_refining_seconds = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_each_refining_seconds = this->_internal_each_refining_seconds();
  uint32_t raw_each_refining_seconds;
  memcpy(&raw_each_refining_seconds, &tmp_each_refining_seconds, sizeof(tmp_each_refining_seconds));
  if (raw_each_refining_seconds != 0) {
    total_size += 1 + 4;
  }

  // int32 big_chance_value = 2;
  if (this->_internal_big_chance_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_big_chance_value());
  }

  // int32 small_chance_value = 3;
  if (this->_internal_small_chance_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_small_chance_value());
  }

  // int32 max_daily_count = 4;
  if (this->_internal_max_daily_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_daily_count());
  }

  // int32 max_daily_extra_materials_use_count = 5;
  if (this->_internal_max_daily_extra_materials_use_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_daily_extra_materials_use_count());
  }

  // int32 revert_cost_gold = 6;
  if (this->_internal_revert_cost_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_revert_cost_gold());
  }

  // int32 destroy_cost_gold = 7;
  if (this->_internal_destroy_cost_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destroy_cost_gold());
  }

  // int32 found_cost_gold = 9;
  if (this->_internal_found_cost_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_found_cost_gold());
  }

  // int32 found_time = 10;
  if (this->_internal_found_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_found_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfigForge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfigForge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfigForge::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfigForge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfigForge*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfigForge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfigForge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.destroy_get_item_num_.MergeFrom(from._impl_.destroy_get_item_num_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_each_refining_seconds = from._internal_each_refining_seconds();
  uint32_t raw_each_refining_seconds;
  memcpy(&raw_each_refining_seconds, &tmp_each_refining_seconds, sizeof(tmp_each_refining_seconds));
  if (raw_each_refining_seconds != 0) {
    _this->_internal_set_each_refining_seconds(from._internal_each_refining_seconds());
  }
  if (from._internal_big_chance_value() != 0) {
    _this->_internal_set_big_chance_value(from._internal_big_chance_value());
  }
  if (from._internal_small_chance_value() != 0) {
    _this->_internal_set_small_chance_value(from._internal_small_chance_value());
  }
  if (from._internal_max_daily_count() != 0) {
    _this->_internal_set_max_daily_count(from._internal_max_daily_count());
  }
  if (from._internal_max_daily_extra_materials_use_count() != 0) {
    _this->_internal_set_max_daily_extra_materials_use_count(from._internal_max_daily_extra_materials_use_count());
  }
  if (from._internal_revert_cost_gold() != 0) {
    _this->_internal_set_revert_cost_gold(from._internal_revert_cost_gold());
  }
  if (from._internal_destroy_cost_gold() != 0) {
    _this->_internal_set_destroy_cost_gold(from._internal_destroy_cost_gold());
  }
  if (from._internal_found_cost_gold() != 0) {
    _this->_internal_set_found_cost_gold(from._internal_found_cost_gold());
  }
  if (from._internal_found_time() != 0) {
    _this->_internal_set_found_time(from._internal_found_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfigForge::CopyFrom(const PlayerGlobalConfigForge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfigForge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfigForge::IsInitialized() const {
  return true;
}

void PlayerGlobalConfigForge::InternalSwap(PlayerGlobalConfigForge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.destroy_get_item_num_.InternalSwap(&other->_impl_.destroy_get_item_num_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigForge, _impl_.found_time_)
      + sizeof(PlayerGlobalConfigForge::_impl_.found_time_)
      - PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigForge, _impl_.each_refining_seconds_)>(
          reinterpret_cast<char*>(&_impl_.each_refining_seconds_),
          reinterpret_cast<char*>(&other->_impl_.each_refining_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfigForge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[17]);
}

// ===================================================================

class PlayerGlobalConfigFightMode::_Internal {
 public:
};

PlayerGlobalConfigFightMode::PlayerGlobalConfigFightMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfigFightMode)
}
PlayerGlobalConfigFightMode::PlayerGlobalConfigFightMode(const PlayerGlobalConfigFightMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfigFightMode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.all_mode_require_rank_){}
    , decltype(_impl_.all_mode_to_peace_mode_need_seconds_){}
    , decltype(_impl_.mode_change_need_seconds_){}
    , decltype(_impl_.hate_sustain_seconds_){}
    , decltype(_impl_.world_speed_unlock_rank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.all_mode_require_rank_, &from._impl_.all_mode_require_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.world_speed_unlock_rank_) -
    reinterpret_cast<char*>(&_impl_.all_mode_require_rank_)) + sizeof(_impl_.world_speed_unlock_rank_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfigFightMode)
}

inline void PlayerGlobalConfigFightMode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.all_mode_require_rank_){0}
    , decltype(_impl_.all_mode_to_peace_mode_need_seconds_){0}
    , decltype(_impl_.mode_change_need_seconds_){0}
    , decltype(_impl_.hate_sustain_seconds_){0}
    , decltype(_impl_.world_speed_unlock_rank_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfigFightMode::~PlayerGlobalConfigFightMode() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfigFightMode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfigFightMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerGlobalConfigFightMode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfigFightMode::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfigFightMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.all_mode_require_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.world_speed_unlock_rank_) -
      reinterpret_cast<char*>(&_impl_.all_mode_require_rank_)) + sizeof(_impl_.world_speed_unlock_rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfigFightMode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 all_mode_require_rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.all_mode_require_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float all_mode_to_peace_mode_need_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.all_mode_to_peace_mode_need_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mode_change_need_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.mode_change_need_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hate_sustain_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.hate_sustain_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 world_speed_unlock_rank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.world_speed_unlock_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfigFightMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfigFightMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 all_mode_require_rank = 1;
  if (this->_internal_all_mode_require_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_all_mode_require_rank(), target);
  }

  // float all_mode_to_peace_mode_need_seconds = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_all_mode_to_peace_mode_need_seconds = this->_internal_all_mode_to_peace_mode_need_seconds();
  uint32_t raw_all_mode_to_peace_mode_need_seconds;
  memcpy(&raw_all_mode_to_peace_mode_need_seconds, &tmp_all_mode_to_peace_mode_need_seconds, sizeof(tmp_all_mode_to_peace_mode_need_seconds));
  if (raw_all_mode_to_peace_mode_need_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_all_mode_to_peace_mode_need_seconds(), target);
  }

  // float mode_change_need_seconds = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mode_change_need_seconds = this->_internal_mode_change_need_seconds();
  uint32_t raw_mode_change_need_seconds;
  memcpy(&raw_mode_change_need_seconds, &tmp_mode_change_need_seconds, sizeof(tmp_mode_change_need_seconds));
  if (raw_mode_change_need_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_mode_change_need_seconds(), target);
  }

  // float hate_sustain_seconds = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hate_sustain_seconds = this->_internal_hate_sustain_seconds();
  uint32_t raw_hate_sustain_seconds;
  memcpy(&raw_hate_sustain_seconds, &tmp_hate_sustain_seconds, sizeof(tmp_hate_sustain_seconds));
  if (raw_hate_sustain_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_hate_sustain_seconds(), target);
  }

  // int32 world_speed_unlock_rank = 5;
  if (this->_internal_world_speed_unlock_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_world_speed_unlock_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfigFightMode)
  return target;
}

size_t PlayerGlobalConfigFightMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfigFightMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 all_mode_require_rank = 1;
  if (this->_internal_all_mode_require_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_all_mode_require_rank());
  }

  // float all_mode_to_peace_mode_need_seconds = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_all_mode_to_peace_mode_need_seconds = this->_internal_all_mode_to_peace_mode_need_seconds();
  uint32_t raw_all_mode_to_peace_mode_need_seconds;
  memcpy(&raw_all_mode_to_peace_mode_need_seconds, &tmp_all_mode_to_peace_mode_need_seconds, sizeof(tmp_all_mode_to_peace_mode_need_seconds));
  if (raw_all_mode_to_peace_mode_need_seconds != 0) {
    total_size += 1 + 4;
  }

  // float mode_change_need_seconds = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mode_change_need_seconds = this->_internal_mode_change_need_seconds();
  uint32_t raw_mode_change_need_seconds;
  memcpy(&raw_mode_change_need_seconds, &tmp_mode_change_need_seconds, sizeof(tmp_mode_change_need_seconds));
  if (raw_mode_change_need_seconds != 0) {
    total_size += 1 + 4;
  }

  // float hate_sustain_seconds = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hate_sustain_seconds = this->_internal_hate_sustain_seconds();
  uint32_t raw_hate_sustain_seconds;
  memcpy(&raw_hate_sustain_seconds, &tmp_hate_sustain_seconds, sizeof(tmp_hate_sustain_seconds));
  if (raw_hate_sustain_seconds != 0) {
    total_size += 1 + 4;
  }

  // int32 world_speed_unlock_rank = 5;
  if (this->_internal_world_speed_unlock_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_world_speed_unlock_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfigFightMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfigFightMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfigFightMode::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfigFightMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfigFightMode*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfigFightMode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfigFightMode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_all_mode_require_rank() != 0) {
    _this->_internal_set_all_mode_require_rank(from._internal_all_mode_require_rank());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_all_mode_to_peace_mode_need_seconds = from._internal_all_mode_to_peace_mode_need_seconds();
  uint32_t raw_all_mode_to_peace_mode_need_seconds;
  memcpy(&raw_all_mode_to_peace_mode_need_seconds, &tmp_all_mode_to_peace_mode_need_seconds, sizeof(tmp_all_mode_to_peace_mode_need_seconds));
  if (raw_all_mode_to_peace_mode_need_seconds != 0) {
    _this->_internal_set_all_mode_to_peace_mode_need_seconds(from._internal_all_mode_to_peace_mode_need_seconds());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mode_change_need_seconds = from._internal_mode_change_need_seconds();
  uint32_t raw_mode_change_need_seconds;
  memcpy(&raw_mode_change_need_seconds, &tmp_mode_change_need_seconds, sizeof(tmp_mode_change_need_seconds));
  if (raw_mode_change_need_seconds != 0) {
    _this->_internal_set_mode_change_need_seconds(from._internal_mode_change_need_seconds());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hate_sustain_seconds = from._internal_hate_sustain_seconds();
  uint32_t raw_hate_sustain_seconds;
  memcpy(&raw_hate_sustain_seconds, &tmp_hate_sustain_seconds, sizeof(tmp_hate_sustain_seconds));
  if (raw_hate_sustain_seconds != 0) {
    _this->_internal_set_hate_sustain_seconds(from._internal_hate_sustain_seconds());
  }
  if (from._internal_world_speed_unlock_rank() != 0) {
    _this->_internal_set_world_speed_unlock_rank(from._internal_world_speed_unlock_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfigFightMode::CopyFrom(const PlayerGlobalConfigFightMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfigFightMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfigFightMode::IsInitialized() const {
  return true;
}

void PlayerGlobalConfigFightMode::InternalSwap(PlayerGlobalConfigFightMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigFightMode, _impl_.world_speed_unlock_rank_)
      + sizeof(PlayerGlobalConfigFightMode::_impl_.world_speed_unlock_rank_)
      - PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigFightMode, _impl_.all_mode_require_rank_)>(
          reinterpret_cast<char*>(&_impl_.all_mode_require_rank_),
          reinterpret_cast<char*>(&other->_impl_.all_mode_require_rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfigFightMode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[18]);
}

// ===================================================================

class PlayerGlobalConfigInventory::_Internal {
 public:
};

PlayerGlobalConfigInventory::PlayerGlobalConfigInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfigInventory)
}
PlayerGlobalConfigInventory::PlayerGlobalConfigInventory(const PlayerGlobalConfigInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfigInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.init_space_){}
    , decltype(_impl_.stage_up_add_space_){}
    , decltype(_impl_.full_mail_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.init_space_, &from._impl_.init_space_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.full_mail_id_) -
    reinterpret_cast<char*>(&_impl_.init_space_)) + sizeof(_impl_.full_mail_id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfigInventory)
}

inline void PlayerGlobalConfigInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.init_space_){0}
    , decltype(_impl_.stage_up_add_space_){0}
    , decltype(_impl_.full_mail_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfigInventory::~PlayerGlobalConfigInventory() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfigInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfigInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerGlobalConfigInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfigInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfigInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.init_space_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.full_mail_id_) -
      reinterpret_cast<char*>(&_impl_.init_space_)) + sizeof(_impl_.full_mail_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfigInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 init_space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.init_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stage_up_add_space = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stage_up_add_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 full_mail_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.full_mail_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfigInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfigInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 init_space = 1;
  if (this->_internal_init_space() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_init_space(), target);
  }

  // int32 stage_up_add_space = 2;
  if (this->_internal_stage_up_add_space() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stage_up_add_space(), target);
  }

  // int32 full_mail_id = 3;
  if (this->_internal_full_mail_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_full_mail_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfigInventory)
  return target;
}

size_t PlayerGlobalConfigInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfigInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 init_space = 1;
  if (this->_internal_init_space() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_init_space());
  }

  // int32 stage_up_add_space = 2;
  if (this->_internal_stage_up_add_space() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stage_up_add_space());
  }

  // int32 full_mail_id = 3;
  if (this->_internal_full_mail_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_full_mail_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfigInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfigInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfigInventory::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfigInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfigInventory*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfigInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfigInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_init_space() != 0) {
    _this->_internal_set_init_space(from._internal_init_space());
  }
  if (from._internal_stage_up_add_space() != 0) {
    _this->_internal_set_stage_up_add_space(from._internal_stage_up_add_space());
  }
  if (from._internal_full_mail_id() != 0) {
    _this->_internal_set_full_mail_id(from._internal_full_mail_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfigInventory::CopyFrom(const PlayerGlobalConfigInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfigInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfigInventory::IsInitialized() const {
  return true;
}

void PlayerGlobalConfigInventory::InternalSwap(PlayerGlobalConfigInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigInventory, _impl_.full_mail_id_)
      + sizeof(PlayerGlobalConfigInventory::_impl_.full_mail_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerGlobalConfigInventory, _impl_.init_space_)>(
          reinterpret_cast<char*>(&_impl_.init_space_),
          reinterpret_cast<char*>(&other->_impl_.init_space_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfigInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[19]);
}

// ===================================================================

class PlayerGlobalConfig::_Internal {
 public:
  static const ::idlepb::PlayerGlobalConfigConstants& constants(const PlayerGlobalConfig* msg);
  static const ::idlepb::PlayerGlobalConfigRoleInitAttributes& new_role_init_attrs(const PlayerGlobalConfig* msg);
  static const ::idlepb::PlayerGlobalConfigAbility& ability(const PlayerGlobalConfig* msg);
  static const ::idlepb::PlayerGlobalConfigBreathingExercise& breathing_exercise(const PlayerGlobalConfig* msg);
  static const ::idlepb::PlayerGlobalConfigThunderTest& thunder_test(const PlayerGlobalConfig* msg);
  static const ::idlepb::PlayerGlobalConfigAlchemy& alchemy(const PlayerGlobalConfig* msg);
  static const ::idlepb::PlayerGlobalConfigForge& forge(const PlayerGlobalConfig* msg);
  static const ::idlepb::PlayerGlobalConfigFightMode& fight_mode(const PlayerGlobalConfig* msg);
  static const ::idlepb::PlayerGlobalConfigInventory& inventory(const PlayerGlobalConfig* msg);
};

const ::idlepb::PlayerGlobalConfigConstants&
PlayerGlobalConfig::_Internal::constants(const PlayerGlobalConfig* msg) {
  return *msg->_impl_.constants_;
}
const ::idlepb::PlayerGlobalConfigRoleInitAttributes&
PlayerGlobalConfig::_Internal::new_role_init_attrs(const PlayerGlobalConfig* msg) {
  return *msg->_impl_.new_role_init_attrs_;
}
const ::idlepb::PlayerGlobalConfigAbility&
PlayerGlobalConfig::_Internal::ability(const PlayerGlobalConfig* msg) {
  return *msg->_impl_.ability_;
}
const ::idlepb::PlayerGlobalConfigBreathingExercise&
PlayerGlobalConfig::_Internal::breathing_exercise(const PlayerGlobalConfig* msg) {
  return *msg->_impl_.breathing_exercise_;
}
const ::idlepb::PlayerGlobalConfigThunderTest&
PlayerGlobalConfig::_Internal::thunder_test(const PlayerGlobalConfig* msg) {
  return *msg->_impl_.thunder_test_;
}
const ::idlepb::PlayerGlobalConfigAlchemy&
PlayerGlobalConfig::_Internal::alchemy(const PlayerGlobalConfig* msg) {
  return *msg->_impl_.alchemy_;
}
const ::idlepb::PlayerGlobalConfigForge&
PlayerGlobalConfig::_Internal::forge(const PlayerGlobalConfig* msg) {
  return *msg->_impl_.forge_;
}
const ::idlepb::PlayerGlobalConfigFightMode&
PlayerGlobalConfig::_Internal::fight_mode(const PlayerGlobalConfig* msg) {
  return *msg->_impl_.fight_mode_;
}
const ::idlepb::PlayerGlobalConfigInventory&
PlayerGlobalConfig::_Internal::inventory(const PlayerGlobalConfig* msg) {
  return *msg->_impl_.inventory_;
}
PlayerGlobalConfig::PlayerGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerGlobalConfig)
}
PlayerGlobalConfig::PlayerGlobalConfig(const PlayerGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.constants_){nullptr}
    , decltype(_impl_.new_role_init_attrs_){nullptr}
    , decltype(_impl_.ability_){nullptr}
    , decltype(_impl_.breathing_exercise_){nullptr}
    , decltype(_impl_.thunder_test_){nullptr}
    , decltype(_impl_.alchemy_){nullptr}
    , decltype(_impl_.forge_){nullptr}
    , decltype(_impl_.fight_mode_){nullptr}
    , decltype(_impl_.inventory_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_constants()) {
    _this->_impl_.constants_ = new ::idlepb::PlayerGlobalConfigConstants(*from._impl_.constants_);
  }
  if (from._internal_has_new_role_init_attrs()) {
    _this->_impl_.new_role_init_attrs_ = new ::idlepb::PlayerGlobalConfigRoleInitAttributes(*from._impl_.new_role_init_attrs_);
  }
  if (from._internal_has_ability()) {
    _this->_impl_.ability_ = new ::idlepb::PlayerGlobalConfigAbility(*from._impl_.ability_);
  }
  if (from._internal_has_breathing_exercise()) {
    _this->_impl_.breathing_exercise_ = new ::idlepb::PlayerGlobalConfigBreathingExercise(*from._impl_.breathing_exercise_);
  }
  if (from._internal_has_thunder_test()) {
    _this->_impl_.thunder_test_ = new ::idlepb::PlayerGlobalConfigThunderTest(*from._impl_.thunder_test_);
  }
  if (from._internal_has_alchemy()) {
    _this->_impl_.alchemy_ = new ::idlepb::PlayerGlobalConfigAlchemy(*from._impl_.alchemy_);
  }
  if (from._internal_has_forge()) {
    _this->_impl_.forge_ = new ::idlepb::PlayerGlobalConfigForge(*from._impl_.forge_);
  }
  if (from._internal_has_fight_mode()) {
    _this->_impl_.fight_mode_ = new ::idlepb::PlayerGlobalConfigFightMode(*from._impl_.fight_mode_);
  }
  if (from._internal_has_inventory()) {
    _this->_impl_.inventory_ = new ::idlepb::PlayerGlobalConfigInventory(*from._impl_.inventory_);
  }
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerGlobalConfig)
}

inline void PlayerGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.constants_){nullptr}
    , decltype(_impl_.new_role_init_attrs_){nullptr}
    , decltype(_impl_.ability_){nullptr}
    , decltype(_impl_.breathing_exercise_){nullptr}
    , decltype(_impl_.thunder_test_){nullptr}
    , decltype(_impl_.alchemy_){nullptr}
    , decltype(_impl_.forge_){nullptr}
    , decltype(_impl_.fight_mode_){nullptr}
    , decltype(_impl_.inventory_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerGlobalConfig::~PlayerGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.constants_;
  if (this != internal_default_instance()) delete _impl_.new_role_init_attrs_;
  if (this != internal_default_instance()) delete _impl_.ability_;
  if (this != internal_default_instance()) delete _impl_.breathing_exercise_;
  if (this != internal_default_instance()) delete _impl_.thunder_test_;
  if (this != internal_default_instance()) delete _impl_.alchemy_;
  if (this != internal_default_instance()) delete _impl_.forge_;
  if (this != internal_default_instance()) delete _impl_.fight_mode_;
  if (this != internal_default_instance()) delete _impl_.inventory_;
}

void PlayerGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.constants_ != nullptr) {
    delete _impl_.constants_;
  }
  _impl_.constants_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.new_role_init_attrs_ != nullptr) {
    delete _impl_.new_role_init_attrs_;
  }
  _impl_.new_role_init_attrs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ability_ != nullptr) {
    delete _impl_.ability_;
  }
  _impl_.ability_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.breathing_exercise_ != nullptr) {
    delete _impl_.breathing_exercise_;
  }
  _impl_.breathing_exercise_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.thunder_test_ != nullptr) {
    delete _impl_.thunder_test_;
  }
  _impl_.thunder_test_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.alchemy_ != nullptr) {
    delete _impl_.alchemy_;
  }
  _impl_.alchemy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forge_ != nullptr) {
    delete _impl_.forge_;
  }
  _impl_.forge_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fight_mode_ != nullptr) {
    delete _impl_.fight_mode_;
  }
  _impl_.fight_mode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inventory_ != nullptr) {
    delete _impl_.inventory_;
  }
  _impl_.inventory_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.PlayerGlobalConfigConstants constants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_constants(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.PlayerGlobalConfigRoleInitAttributes new_role_init_attrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_role_init_attrs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.PlayerGlobalConfigAbility ability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ability(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.PlayerGlobalConfigBreathingExercise breathing_exercise = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_breathing_exercise(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.PlayerGlobalConfigThunderTest thunder_test = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_thunder_test(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.PlayerGlobalConfigAlchemy alchemy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_alchemy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.PlayerGlobalConfigForge forge = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_forge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.PlayerGlobalConfigFightMode fight_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fight_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.PlayerGlobalConfigInventory inventory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_inventory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.PlayerGlobalConfigConstants constants = 1;
  if (this->_internal_has_constants()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::constants(this),
        _Internal::constants(this).GetCachedSize(), target, stream);
  }

  // .idlepb.PlayerGlobalConfigRoleInitAttributes new_role_init_attrs = 2;
  if (this->_internal_has_new_role_init_attrs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_role_init_attrs(this),
        _Internal::new_role_init_attrs(this).GetCachedSize(), target, stream);
  }

  // .idlepb.PlayerGlobalConfigAbility ability = 3;
  if (this->_internal_has_ability()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ability(this),
        _Internal::ability(this).GetCachedSize(), target, stream);
  }

  // .idlepb.PlayerGlobalConfigBreathingExercise breathing_exercise = 4;
  if (this->_internal_has_breathing_exercise()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::breathing_exercise(this),
        _Internal::breathing_exercise(this).GetCachedSize(), target, stream);
  }

  // .idlepb.PlayerGlobalConfigThunderTest thunder_test = 5;
  if (this->_internal_has_thunder_test()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::thunder_test(this),
        _Internal::thunder_test(this).GetCachedSize(), target, stream);
  }

  // .idlepb.PlayerGlobalConfigAlchemy alchemy = 6;
  if (this->_internal_has_alchemy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::alchemy(this),
        _Internal::alchemy(this).GetCachedSize(), target, stream);
  }

  // .idlepb.PlayerGlobalConfigForge forge = 7;
  if (this->_internal_has_forge()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::forge(this),
        _Internal::forge(this).GetCachedSize(), target, stream);
  }

  // .idlepb.PlayerGlobalConfigFightMode fight_mode = 8;
  if (this->_internal_has_fight_mode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::fight_mode(this),
        _Internal::fight_mode(this).GetCachedSize(), target, stream);
  }

  // .idlepb.PlayerGlobalConfigInventory inventory = 9;
  if (this->_internal_has_inventory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::inventory(this),
        _Internal::inventory(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerGlobalConfig)
  return target;
}

size_t PlayerGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.PlayerGlobalConfigConstants constants = 1;
  if (this->_internal_has_constants()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.constants_);
  }

  // .idlepb.PlayerGlobalConfigRoleInitAttributes new_role_init_attrs = 2;
  if (this->_internal_has_new_role_init_attrs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_role_init_attrs_);
  }

  // .idlepb.PlayerGlobalConfigAbility ability = 3;
  if (this->_internal_has_ability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ability_);
  }

  // .idlepb.PlayerGlobalConfigBreathingExercise breathing_exercise = 4;
  if (this->_internal_has_breathing_exercise()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.breathing_exercise_);
  }

  // .idlepb.PlayerGlobalConfigThunderTest thunder_test = 5;
  if (this->_internal_has_thunder_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.thunder_test_);
  }

  // .idlepb.PlayerGlobalConfigAlchemy alchemy = 6;
  if (this->_internal_has_alchemy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.alchemy_);
  }

  // .idlepb.PlayerGlobalConfigForge forge = 7;
  if (this->_internal_has_forge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forge_);
  }

  // .idlepb.PlayerGlobalConfigFightMode fight_mode = 8;
  if (this->_internal_has_fight_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fight_mode_);
  }

  // .idlepb.PlayerGlobalConfigInventory inventory = 9;
  if (this->_internal_has_inventory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inventory_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGlobalConfig::GetClassData() const { return &_class_data_; }


void PlayerGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGlobalConfig*>(&to_msg);
  auto& from = static_cast<const PlayerGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_constants()) {
    _this->_internal_mutable_constants()->::idlepb::PlayerGlobalConfigConstants::MergeFrom(
        from._internal_constants());
  }
  if (from._internal_has_new_role_init_attrs()) {
    _this->_internal_mutable_new_role_init_attrs()->::idlepb::PlayerGlobalConfigRoleInitAttributes::MergeFrom(
        from._internal_new_role_init_attrs());
  }
  if (from._internal_has_ability()) {
    _this->_internal_mutable_ability()->::idlepb::PlayerGlobalConfigAbility::MergeFrom(
        from._internal_ability());
  }
  if (from._internal_has_breathing_exercise()) {
    _this->_internal_mutable_breathing_exercise()->::idlepb::PlayerGlobalConfigBreathingExercise::MergeFrom(
        from._internal_breathing_exercise());
  }
  if (from._internal_has_thunder_test()) {
    _this->_internal_mutable_thunder_test()->::idlepb::PlayerGlobalConfigThunderTest::MergeFrom(
        from._internal_thunder_test());
  }
  if (from._internal_has_alchemy()) {
    _this->_internal_mutable_alchemy()->::idlepb::PlayerGlobalConfigAlchemy::MergeFrom(
        from._internal_alchemy());
  }
  if (from._internal_has_forge()) {
    _this->_internal_mutable_forge()->::idlepb::PlayerGlobalConfigForge::MergeFrom(
        from._internal_forge());
  }
  if (from._internal_has_fight_mode()) {
    _this->_internal_mutable_fight_mode()->::idlepb::PlayerGlobalConfigFightMode::MergeFrom(
        from._internal_fight_mode());
  }
  if (from._internal_has_inventory()) {
    _this->_internal_mutable_inventory()->::idlepb::PlayerGlobalConfigInventory::MergeFrom(
        from._internal_inventory());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGlobalConfig::CopyFrom(const PlayerGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGlobalConfig::IsInitialized() const {
  return true;
}

void PlayerGlobalConfig::InternalSwap(PlayerGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGlobalConfig, _impl_.inventory_)
      + sizeof(PlayerGlobalConfig::_impl_.inventory_)
      - PROTOBUF_FIELD_OFFSET(PlayerGlobalConfig, _impl_.constants_)>(
          reinterpret_cast<char*>(&_impl_.constants_),
          reinterpret_cast<char*>(&other->_impl_.constants_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[20]);
}

// ===================================================================

class NpcGlobalConfigConstants::_Internal {
 public:
};

NpcGlobalConfigConstants::NpcGlobalConfigConstants(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.NpcGlobalConfigConstants)
}
NpcGlobalConfigConstants::NpcGlobalConfigConstants(const NpcGlobalConfigConstants& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NpcGlobalConfigConstants* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.auto_move_stop_time_){}
    , decltype(_impl_.auto_move_walk_time_){}
    , decltype(_impl_.walk_speed_){}
    , decltype(_impl_.attack_interval_time_){}
    , decltype(_impl_.npc_lock_distance_auto_){}
    , decltype(_impl_.npc_lock_distance_max_){}
    , decltype(_impl_.monster_location_correction_distance_near_){}
    , decltype(_impl_.monster_location_correction_distance_far_){}
    , decltype(_impl_.monster_correction_cost_speed_){}
    , decltype(_impl_.phy_default_ability_fullid_){}
    , decltype(_impl_.mag_default_ability_fullid_){}
    , decltype(_impl_.default_ability_weight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.auto_move_stop_time_, &from._impl_.auto_move_stop_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.default_ability_weight_) -
    reinterpret_cast<char*>(&_impl_.auto_move_stop_time_)) + sizeof(_impl_.default_ability_weight_));
  // @@protoc_insertion_point(copy_constructor:idlepb.NpcGlobalConfigConstants)
}

inline void NpcGlobalConfigConstants::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.auto_move_stop_time_){0}
    , decltype(_impl_.auto_move_walk_time_){0}
    , decltype(_impl_.walk_speed_){0}
    , decltype(_impl_.attack_interval_time_){0}
    , decltype(_impl_.npc_lock_distance_auto_){0}
    , decltype(_impl_.npc_lock_distance_max_){0}
    , decltype(_impl_.monster_location_correction_distance_near_){0}
    , decltype(_impl_.monster_location_correction_distance_far_){0}
    , decltype(_impl_.monster_correction_cost_speed_){0}
    , decltype(_impl_.phy_default_ability_fullid_){0}
    , decltype(_impl_.mag_default_ability_fullid_){0}
    , decltype(_impl_.default_ability_weight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NpcGlobalConfigConstants::~NpcGlobalConfigConstants() {
  // @@protoc_insertion_point(destructor:idlepb.NpcGlobalConfigConstants)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NpcGlobalConfigConstants::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NpcGlobalConfigConstants::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NpcGlobalConfigConstants::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.NpcGlobalConfigConstants)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.auto_move_stop_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.default_ability_weight_) -
      reinterpret_cast<char*>(&_impl_.auto_move_stop_time_)) + sizeof(_impl_.default_ability_weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpcGlobalConfigConstants::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float auto_move_stop_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.auto_move_stop_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float auto_move_walk_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.auto_move_walk_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 walk_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.walk_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float attack_interval_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.attack_interval_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float npc_lock_distance_auto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.npc_lock_distance_auto_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float npc_lock_distance_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.npc_lock_distance_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float monster_location_correction_distance_near = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.monster_location_correction_distance_near_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float monster_location_correction_distance_far = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.monster_location_correction_distance_far_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float monster_correction_cost_speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.monster_correction_cost_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_default_ability_fullid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.phy_default_ability_fullid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_default_ability_fullid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.mag_default_ability_fullid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 default_ability_weight = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.default_ability_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NpcGlobalConfigConstants::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.NpcGlobalConfigConstants)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float auto_move_stop_time = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_stop_time = this->_internal_auto_move_stop_time();
  uint32_t raw_auto_move_stop_time;
  memcpy(&raw_auto_move_stop_time, &tmp_auto_move_stop_time, sizeof(tmp_auto_move_stop_time));
  if (raw_auto_move_stop_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_auto_move_stop_time(), target);
  }

  // float auto_move_walk_time = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_walk_time = this->_internal_auto_move_walk_time();
  uint32_t raw_auto_move_walk_time;
  memcpy(&raw_auto_move_walk_time, &tmp_auto_move_walk_time, sizeof(tmp_auto_move_walk_time));
  if (raw_auto_move_walk_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_auto_move_walk_time(), target);
  }

  // int32 walk_speed = 3;
  if (this->_internal_walk_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_walk_speed(), target);
  }

  // float attack_interval_time = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_interval_time = this->_internal_attack_interval_time();
  uint32_t raw_attack_interval_time;
  memcpy(&raw_attack_interval_time, &tmp_attack_interval_time, sizeof(tmp_attack_interval_time));
  if (raw_attack_interval_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_attack_interval_time(), target);
  }

  // float npc_lock_distance_auto = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_npc_lock_distance_auto = this->_internal_npc_lock_distance_auto();
  uint32_t raw_npc_lock_distance_auto;
  memcpy(&raw_npc_lock_distance_auto, &tmp_npc_lock_distance_auto, sizeof(tmp_npc_lock_distance_auto));
  if (raw_npc_lock_distance_auto != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_npc_lock_distance_auto(), target);
  }

  // float npc_lock_distance_max = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_npc_lock_distance_max = this->_internal_npc_lock_distance_max();
  uint32_t raw_npc_lock_distance_max;
  memcpy(&raw_npc_lock_distance_max, &tmp_npc_lock_distance_max, sizeof(tmp_npc_lock_distance_max));
  if (raw_npc_lock_distance_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_npc_lock_distance_max(), target);
  }

  // float monster_location_correction_distance_near = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_monster_location_correction_distance_near = this->_internal_monster_location_correction_distance_near();
  uint32_t raw_monster_location_correction_distance_near;
  memcpy(&raw_monster_location_correction_distance_near, &tmp_monster_location_correction_distance_near, sizeof(tmp_monster_location_correction_distance_near));
  if (raw_monster_location_correction_distance_near != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_monster_location_correction_distance_near(), target);
  }

  // float monster_location_correction_distance_far = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_monster_location_correction_distance_far = this->_internal_monster_location_correction_distance_far();
  uint32_t raw_monster_location_correction_distance_far;
  memcpy(&raw_monster_location_correction_distance_far, &tmp_monster_location_correction_distance_far, sizeof(tmp_monster_location_correction_distance_far));
  if (raw_monster_location_correction_distance_far != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_monster_location_correction_distance_far(), target);
  }

  // float monster_correction_cost_speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_monster_correction_cost_speed = this->_internal_monster_correction_cost_speed();
  uint32_t raw_monster_correction_cost_speed;
  memcpy(&raw_monster_correction_cost_speed, &tmp_monster_correction_cost_speed, sizeof(tmp_monster_correction_cost_speed));
  if (raw_monster_correction_cost_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_monster_correction_cost_speed(), target);
  }

  // float phy_default_ability_fullid = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_default_ability_fullid = this->_internal_phy_default_ability_fullid();
  uint32_t raw_phy_default_ability_fullid;
  memcpy(&raw_phy_default_ability_fullid, &tmp_phy_default_ability_fullid, sizeof(tmp_phy_default_ability_fullid));
  if (raw_phy_default_ability_fullid != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_phy_default_ability_fullid(), target);
  }

  // float mag_default_ability_fullid = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_default_ability_fullid = this->_internal_mag_default_ability_fullid();
  uint32_t raw_mag_default_ability_fullid;
  memcpy(&raw_mag_default_ability_fullid, &tmp_mag_default_ability_fullid, sizeof(tmp_mag_default_ability_fullid));
  if (raw_mag_default_ability_fullid != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_mag_default_ability_fullid(), target);
  }

  // int32 default_ability_weight = 12;
  if (this->_internal_default_ability_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_default_ability_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.NpcGlobalConfigConstants)
  return target;
}

size_t NpcGlobalConfigConstants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.NpcGlobalConfigConstants)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float auto_move_stop_time = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_stop_time = this->_internal_auto_move_stop_time();
  uint32_t raw_auto_move_stop_time;
  memcpy(&raw_auto_move_stop_time, &tmp_auto_move_stop_time, sizeof(tmp_auto_move_stop_time));
  if (raw_auto_move_stop_time != 0) {
    total_size += 1 + 4;
  }

  // float auto_move_walk_time = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_walk_time = this->_internal_auto_move_walk_time();
  uint32_t raw_auto_move_walk_time;
  memcpy(&raw_auto_move_walk_time, &tmp_auto_move_walk_time, sizeof(tmp_auto_move_walk_time));
  if (raw_auto_move_walk_time != 0) {
    total_size += 1 + 4;
  }

  // int32 walk_speed = 3;
  if (this->_internal_walk_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_walk_speed());
  }

  // float attack_interval_time = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_interval_time = this->_internal_attack_interval_time();
  uint32_t raw_attack_interval_time;
  memcpy(&raw_attack_interval_time, &tmp_attack_interval_time, sizeof(tmp_attack_interval_time));
  if (raw_attack_interval_time != 0) {
    total_size += 1 + 4;
  }

  // float npc_lock_distance_auto = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_npc_lock_distance_auto = this->_internal_npc_lock_distance_auto();
  uint32_t raw_npc_lock_distance_auto;
  memcpy(&raw_npc_lock_distance_auto, &tmp_npc_lock_distance_auto, sizeof(tmp_npc_lock_distance_auto));
  if (raw_npc_lock_distance_auto != 0) {
    total_size += 1 + 4;
  }

  // float npc_lock_distance_max = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_npc_lock_distance_max = this->_internal_npc_lock_distance_max();
  uint32_t raw_npc_lock_distance_max;
  memcpy(&raw_npc_lock_distance_max, &tmp_npc_lock_distance_max, sizeof(tmp_npc_lock_distance_max));
  if (raw_npc_lock_distance_max != 0) {
    total_size += 1 + 4;
  }

  // float monster_location_correction_distance_near = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_monster_location_correction_distance_near = this->_internal_monster_location_correction_distance_near();
  uint32_t raw_monster_location_correction_distance_near;
  memcpy(&raw_monster_location_correction_distance_near, &tmp_monster_location_correction_distance_near, sizeof(tmp_monster_location_correction_distance_near));
  if (raw_monster_location_correction_distance_near != 0) {
    total_size += 1 + 4;
  }

  // float monster_location_correction_distance_far = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_monster_location_correction_distance_far = this->_internal_monster_location_correction_distance_far();
  uint32_t raw_monster_location_correction_distance_far;
  memcpy(&raw_monster_location_correction_distance_far, &tmp_monster_location_correction_distance_far, sizeof(tmp_monster_location_correction_distance_far));
  if (raw_monster_location_correction_distance_far != 0) {
    total_size += 1 + 4;
  }

  // float monster_correction_cost_speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_monster_correction_cost_speed = this->_internal_monster_correction_cost_speed();
  uint32_t raw_monster_correction_cost_speed;
  memcpy(&raw_monster_correction_cost_speed, &tmp_monster_correction_cost_speed, sizeof(tmp_monster_correction_cost_speed));
  if (raw_monster_correction_cost_speed != 0) {
    total_size += 1 + 4;
  }

  // float phy_default_ability_fullid = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_default_ability_fullid = this->_internal_phy_default_ability_fullid();
  uint32_t raw_phy_default_ability_fullid;
  memcpy(&raw_phy_default_ability_fullid, &tmp_phy_default_ability_fullid, sizeof(tmp_phy_default_ability_fullid));
  if (raw_phy_default_ability_fullid != 0) {
    total_size += 1 + 4;
  }

  // float mag_default_ability_fullid = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_default_ability_fullid = this->_internal_mag_default_ability_fullid();
  uint32_t raw_mag_default_ability_fullid;
  memcpy(&raw_mag_default_ability_fullid, &tmp_mag_default_ability_fullid, sizeof(tmp_mag_default_ability_fullid));
  if (raw_mag_default_ability_fullid != 0) {
    total_size += 1 + 4;
  }

  // int32 default_ability_weight = 12;
  if (this->_internal_default_ability_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_default_ability_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NpcGlobalConfigConstants::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NpcGlobalConfigConstants::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NpcGlobalConfigConstants::GetClassData() const { return &_class_data_; }


void NpcGlobalConfigConstants::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NpcGlobalConfigConstants*>(&to_msg);
  auto& from = static_cast<const NpcGlobalConfigConstants&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.NpcGlobalConfigConstants)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_stop_time = from._internal_auto_move_stop_time();
  uint32_t raw_auto_move_stop_time;
  memcpy(&raw_auto_move_stop_time, &tmp_auto_move_stop_time, sizeof(tmp_auto_move_stop_time));
  if (raw_auto_move_stop_time != 0) {
    _this->_internal_set_auto_move_stop_time(from._internal_auto_move_stop_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_auto_move_walk_time = from._internal_auto_move_walk_time();
  uint32_t raw_auto_move_walk_time;
  memcpy(&raw_auto_move_walk_time, &tmp_auto_move_walk_time, sizeof(tmp_auto_move_walk_time));
  if (raw_auto_move_walk_time != 0) {
    _this->_internal_set_auto_move_walk_time(from._internal_auto_move_walk_time());
  }
  if (from._internal_walk_speed() != 0) {
    _this->_internal_set_walk_speed(from._internal_walk_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_interval_time = from._internal_attack_interval_time();
  uint32_t raw_attack_interval_time;
  memcpy(&raw_attack_interval_time, &tmp_attack_interval_time, sizeof(tmp_attack_interval_time));
  if (raw_attack_interval_time != 0) {
    _this->_internal_set_attack_interval_time(from._internal_attack_interval_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_npc_lock_distance_auto = from._internal_npc_lock_distance_auto();
  uint32_t raw_npc_lock_distance_auto;
  memcpy(&raw_npc_lock_distance_auto, &tmp_npc_lock_distance_auto, sizeof(tmp_npc_lock_distance_auto));
  if (raw_npc_lock_distance_auto != 0) {
    _this->_internal_set_npc_lock_distance_auto(from._internal_npc_lock_distance_auto());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_npc_lock_distance_max = from._internal_npc_lock_distance_max();
  uint32_t raw_npc_lock_distance_max;
  memcpy(&raw_npc_lock_distance_max, &tmp_npc_lock_distance_max, sizeof(tmp_npc_lock_distance_max));
  if (raw_npc_lock_distance_max != 0) {
    _this->_internal_set_npc_lock_distance_max(from._internal_npc_lock_distance_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_monster_location_correction_distance_near = from._internal_monster_location_correction_distance_near();
  uint32_t raw_monster_location_correction_distance_near;
  memcpy(&raw_monster_location_correction_distance_near, &tmp_monster_location_correction_distance_near, sizeof(tmp_monster_location_correction_distance_near));
  if (raw_monster_location_correction_distance_near != 0) {
    _this->_internal_set_monster_location_correction_distance_near(from._internal_monster_location_correction_distance_near());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_monster_location_correction_distance_far = from._internal_monster_location_correction_distance_far();
  uint32_t raw_monster_location_correction_distance_far;
  memcpy(&raw_monster_location_correction_distance_far, &tmp_monster_location_correction_distance_far, sizeof(tmp_monster_location_correction_distance_far));
  if (raw_monster_location_correction_distance_far != 0) {
    _this->_internal_set_monster_location_correction_distance_far(from._internal_monster_location_correction_distance_far());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_monster_correction_cost_speed = from._internal_monster_correction_cost_speed();
  uint32_t raw_monster_correction_cost_speed;
  memcpy(&raw_monster_correction_cost_speed, &tmp_monster_correction_cost_speed, sizeof(tmp_monster_correction_cost_speed));
  if (raw_monster_correction_cost_speed != 0) {
    _this->_internal_set_monster_correction_cost_speed(from._internal_monster_correction_cost_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_default_ability_fullid = from._internal_phy_default_ability_fullid();
  uint32_t raw_phy_default_ability_fullid;
  memcpy(&raw_phy_default_ability_fullid, &tmp_phy_default_ability_fullid, sizeof(tmp_phy_default_ability_fullid));
  if (raw_phy_default_ability_fullid != 0) {
    _this->_internal_set_phy_default_ability_fullid(from._internal_phy_default_ability_fullid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_default_ability_fullid = from._internal_mag_default_ability_fullid();
  uint32_t raw_mag_default_ability_fullid;
  memcpy(&raw_mag_default_ability_fullid, &tmp_mag_default_ability_fullid, sizeof(tmp_mag_default_ability_fullid));
  if (raw_mag_default_ability_fullid != 0) {
    _this->_internal_set_mag_default_ability_fullid(from._internal_mag_default_ability_fullid());
  }
  if (from._internal_default_ability_weight() != 0) {
    _this->_internal_set_default_ability_weight(from._internal_default_ability_weight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NpcGlobalConfigConstants::CopyFrom(const NpcGlobalConfigConstants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.NpcGlobalConfigConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcGlobalConfigConstants::IsInitialized() const {
  return true;
}

void NpcGlobalConfigConstants::InternalSwap(NpcGlobalConfigConstants* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NpcGlobalConfigConstants, _impl_.default_ability_weight_)
      + sizeof(NpcGlobalConfigConstants::_impl_.default_ability_weight_)
      - PROTOBUF_FIELD_OFFSET(NpcGlobalConfigConstants, _impl_.auto_move_stop_time_)>(
          reinterpret_cast<char*>(&_impl_.auto_move_stop_time_),
          reinterpret_cast<char*>(&other->_impl_.auto_move_stop_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NpcGlobalConfigConstants::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[21]);
}

// ===================================================================

class NpcGlobalConfig::_Internal {
 public:
  static const ::idlepb::NpcGlobalConfigConstants& constants(const NpcGlobalConfig* msg);
};

const ::idlepb::NpcGlobalConfigConstants&
NpcGlobalConfig::_Internal::constants(const NpcGlobalConfig* msg) {
  return *msg->_impl_.constants_;
}
NpcGlobalConfig::NpcGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.NpcGlobalConfig)
}
NpcGlobalConfig::NpcGlobalConfig(const NpcGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NpcGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.constants_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_constants()) {
    _this->_impl_.constants_ = new ::idlepb::NpcGlobalConfigConstants(*from._impl_.constants_);
  }
  // @@protoc_insertion_point(copy_constructor:idlepb.NpcGlobalConfig)
}

inline void NpcGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.constants_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NpcGlobalConfig::~NpcGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.NpcGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NpcGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.constants_;
}

void NpcGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NpcGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.NpcGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.constants_ != nullptr) {
    delete _impl_.constants_;
  }
  _impl_.constants_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpcGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.NpcGlobalConfigConstants constants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_constants(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NpcGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.NpcGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.NpcGlobalConfigConstants constants = 1;
  if (this->_internal_has_constants()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::constants(this),
        _Internal::constants(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.NpcGlobalConfig)
  return target;
}

size_t NpcGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.NpcGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.NpcGlobalConfigConstants constants = 1;
  if (this->_internal_has_constants()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.constants_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NpcGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NpcGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NpcGlobalConfig::GetClassData() const { return &_class_data_; }


void NpcGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NpcGlobalConfig*>(&to_msg);
  auto& from = static_cast<const NpcGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.NpcGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_constants()) {
    _this->_internal_mutable_constants()->::idlepb::NpcGlobalConfigConstants::MergeFrom(
        from._internal_constants());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NpcGlobalConfig::CopyFrom(const NpcGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.NpcGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcGlobalConfig::IsInitialized() const {
  return true;
}

void NpcGlobalConfig::InternalSwap(NpcGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.constants_, other->_impl_.constants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NpcGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[22]);
}

// ===================================================================

class WorldGlobalConfigDungeonCommon::_Internal {
 public:
};

WorldGlobalConfigDungeonCommon::WorldGlobalConfigDungeonCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.WorldGlobalConfigDungeonCommon)
}
WorldGlobalConfigDungeonCommon::WorldGlobalConfigDungeonCommon(const WorldGlobalConfigDungeonCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorldGlobalConfigDungeonCommon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.begin_delay_seconds_){}
    , decltype(_impl_.end_delay_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.begin_delay_seconds_, &from._impl_.begin_delay_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_delay_seconds_) -
    reinterpret_cast<char*>(&_impl_.begin_delay_seconds_)) + sizeof(_impl_.end_delay_seconds_));
  // @@protoc_insertion_point(copy_constructor:idlepb.WorldGlobalConfigDungeonCommon)
}

inline void WorldGlobalConfigDungeonCommon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.begin_delay_seconds_){0}
    , decltype(_impl_.end_delay_seconds_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorldGlobalConfigDungeonCommon::~WorldGlobalConfigDungeonCommon() {
  // @@protoc_insertion_point(destructor:idlepb.WorldGlobalConfigDungeonCommon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorldGlobalConfigDungeonCommon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorldGlobalConfigDungeonCommon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorldGlobalConfigDungeonCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.WorldGlobalConfigDungeonCommon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.begin_delay_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_delay_seconds_) -
      reinterpret_cast<char*>(&_impl_.begin_delay_seconds_)) + sizeof(_impl_.end_delay_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldGlobalConfigDungeonCommon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float begin_delay_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.begin_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_delay_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.end_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorldGlobalConfigDungeonCommon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.WorldGlobalConfigDungeonCommon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float begin_delay_seconds = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_begin_delay_seconds = this->_internal_begin_delay_seconds();
  uint32_t raw_begin_delay_seconds;
  memcpy(&raw_begin_delay_seconds, &tmp_begin_delay_seconds, sizeof(tmp_begin_delay_seconds));
  if (raw_begin_delay_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_begin_delay_seconds(), target);
  }

  // float end_delay_seconds = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_delay_seconds = this->_internal_end_delay_seconds();
  uint32_t raw_end_delay_seconds;
  memcpy(&raw_end_delay_seconds, &tmp_end_delay_seconds, sizeof(tmp_end_delay_seconds));
  if (raw_end_delay_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_end_delay_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.WorldGlobalConfigDungeonCommon)
  return target;
}

size_t WorldGlobalConfigDungeonCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.WorldGlobalConfigDungeonCommon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float begin_delay_seconds = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_begin_delay_seconds = this->_internal_begin_delay_seconds();
  uint32_t raw_begin_delay_seconds;
  memcpy(&raw_begin_delay_seconds, &tmp_begin_delay_seconds, sizeof(tmp_begin_delay_seconds));
  if (raw_begin_delay_seconds != 0) {
    total_size += 1 + 4;
  }

  // float end_delay_seconds = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_delay_seconds = this->_internal_end_delay_seconds();
  uint32_t raw_end_delay_seconds;
  memcpy(&raw_end_delay_seconds, &tmp_end_delay_seconds, sizeof(tmp_end_delay_seconds));
  if (raw_end_delay_seconds != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorldGlobalConfigDungeonCommon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorldGlobalConfigDungeonCommon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorldGlobalConfigDungeonCommon::GetClassData() const { return &_class_data_; }


void WorldGlobalConfigDungeonCommon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorldGlobalConfigDungeonCommon*>(&to_msg);
  auto& from = static_cast<const WorldGlobalConfigDungeonCommon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.WorldGlobalConfigDungeonCommon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_begin_delay_seconds = from._internal_begin_delay_seconds();
  uint32_t raw_begin_delay_seconds;
  memcpy(&raw_begin_delay_seconds, &tmp_begin_delay_seconds, sizeof(tmp_begin_delay_seconds));
  if (raw_begin_delay_seconds != 0) {
    _this->_internal_set_begin_delay_seconds(from._internal_begin_delay_seconds());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_delay_seconds = from._internal_end_delay_seconds();
  uint32_t raw_end_delay_seconds;
  memcpy(&raw_end_delay_seconds, &tmp_end_delay_seconds, sizeof(tmp_end_delay_seconds));
  if (raw_end_delay_seconds != 0) {
    _this->_internal_set_end_delay_seconds(from._internal_end_delay_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorldGlobalConfigDungeonCommon::CopyFrom(const WorldGlobalConfigDungeonCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.WorldGlobalConfigDungeonCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldGlobalConfigDungeonCommon::IsInitialized() const {
  return true;
}

void WorldGlobalConfigDungeonCommon::InternalSwap(WorldGlobalConfigDungeonCommon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorldGlobalConfigDungeonCommon, _impl_.end_delay_seconds_)
      + sizeof(WorldGlobalConfigDungeonCommon::_impl_.end_delay_seconds_)
      - PROTOBUF_FIELD_OFFSET(WorldGlobalConfigDungeonCommon, _impl_.begin_delay_seconds_)>(
          reinterpret_cast<char*>(&_impl_.begin_delay_seconds_),
          reinterpret_cast<char*>(&other->_impl_.begin_delay_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldGlobalConfigDungeonCommon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[23]);
}

// ===================================================================

class WorldGlobalConfig::_Internal {
 public:
  static const ::idlepb::WorldGlobalConfigDungeonCommon& dungeon_common(const WorldGlobalConfig* msg);
};

const ::idlepb::WorldGlobalConfigDungeonCommon&
WorldGlobalConfig::_Internal::dungeon_common(const WorldGlobalConfig* msg) {
  return *msg->_impl_.dungeon_common_;
}
WorldGlobalConfig::WorldGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.WorldGlobalConfig)
}
WorldGlobalConfig::WorldGlobalConfig(const WorldGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorldGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dungeon_common_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dungeon_common()) {
    _this->_impl_.dungeon_common_ = new ::idlepb::WorldGlobalConfigDungeonCommon(*from._impl_.dungeon_common_);
  }
  // @@protoc_insertion_point(copy_constructor:idlepb.WorldGlobalConfig)
}

inline void WorldGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dungeon_common_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorldGlobalConfig::~WorldGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.WorldGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorldGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.dungeon_common_;
}

void WorldGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorldGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.WorldGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.dungeon_common_ != nullptr) {
    delete _impl_.dungeon_common_;
  }
  _impl_.dungeon_common_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.WorldGlobalConfigDungeonCommon dungeon_common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dungeon_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorldGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.WorldGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.WorldGlobalConfigDungeonCommon dungeon_common = 1;
  if (this->_internal_has_dungeon_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dungeon_common(this),
        _Internal::dungeon_common(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.WorldGlobalConfig)
  return target;
}

size_t WorldGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.WorldGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.WorldGlobalConfigDungeonCommon dungeon_common = 1;
  if (this->_internal_has_dungeon_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dungeon_common_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorldGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorldGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorldGlobalConfig::GetClassData() const { return &_class_data_; }


void WorldGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorldGlobalConfig*>(&to_msg);
  auto& from = static_cast<const WorldGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.WorldGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dungeon_common()) {
    _this->_internal_mutable_dungeon_common()->::idlepb::WorldGlobalConfigDungeonCommon::MergeFrom(
        from._internal_dungeon_common());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorldGlobalConfig::CopyFrom(const WorldGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.WorldGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldGlobalConfig::IsInitialized() const {
  return true;
}

void WorldGlobalConfig::InternalSwap(WorldGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.dungeon_common_, other->_impl_.dungeon_common_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[24]);
}

// ===================================================================

class AppearanceGlobalConfigShopRefreshRule::_Internal {
 public:
};

AppearanceGlobalConfigShopRefreshRule::AppearanceGlobalConfigShopRefreshRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AppearanceGlobalConfigShopRefreshRule)
}
AppearanceGlobalConfigShopRefreshRule::AppearanceGlobalConfigShopRefreshRule(const AppearanceGlobalConfigShopRefreshRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppearanceGlobalConfigShopRefreshRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){from._impl_.num_}
    , /*decltype(_impl_._num_cached_byte_size_)*/{0}
    , decltype(_impl_.weight_){from._impl_.weight_}
    , /*decltype(_impl_._weight_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:idlepb.AppearanceGlobalConfigShopRefreshRule)
}

inline void AppearanceGlobalConfigShopRefreshRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){arena}
    , /*decltype(_impl_._num_cached_byte_size_)*/{0}
    , decltype(_impl_.weight_){arena}
    , /*decltype(_impl_._weight_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppearanceGlobalConfigShopRefreshRule::~AppearanceGlobalConfigShopRefreshRule() {
  // @@protoc_insertion_point(destructor:idlepb.AppearanceGlobalConfigShopRefreshRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppearanceGlobalConfigShopRefreshRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.num_.~RepeatedField();
  _impl_.weight_.~RepeatedField();
}

void AppearanceGlobalConfigShopRefreshRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppearanceGlobalConfigShopRefreshRule::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AppearanceGlobalConfigShopRefreshRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.num_.Clear();
  _impl_.weight_.Clear();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceGlobalConfigShopRefreshRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_num(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_weight(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_weight(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppearanceGlobalConfigShopRefreshRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AppearanceGlobalConfigShopRefreshRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated int32 num = 2;
  {
    int byte_size = _impl_._num_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_num(), byte_size, target);
    }
  }

  // repeated int32 weight = 3;
  {
    int byte_size = _impl_._weight_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_weight(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AppearanceGlobalConfigShopRefreshRule)
  return target;
}

size_t AppearanceGlobalConfigShopRefreshRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AppearanceGlobalConfigShopRefreshRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 num = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.num_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._num_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 weight = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.weight_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._weight_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppearanceGlobalConfigShopRefreshRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppearanceGlobalConfigShopRefreshRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppearanceGlobalConfigShopRefreshRule::GetClassData() const { return &_class_data_; }


void AppearanceGlobalConfigShopRefreshRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppearanceGlobalConfigShopRefreshRule*>(&to_msg);
  auto& from = static_cast<const AppearanceGlobalConfigShopRefreshRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AppearanceGlobalConfigShopRefreshRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.num_.MergeFrom(from._impl_.num_);
  _this->_impl_.weight_.MergeFrom(from._impl_.weight_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppearanceGlobalConfigShopRefreshRule::CopyFrom(const AppearanceGlobalConfigShopRefreshRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AppearanceGlobalConfigShopRefreshRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceGlobalConfigShopRefreshRule::IsInitialized() const {
  return true;
}

void AppearanceGlobalConfigShopRefreshRule::InternalSwap(AppearanceGlobalConfigShopRefreshRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.num_.InternalSwap(&other->_impl_.num_);
  _impl_.weight_.InternalSwap(&other->_impl_.weight_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceGlobalConfigShopRefreshRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[25]);
}

// ===================================================================

class AppearanceGlobalConfigModelTypeInfo::_Internal {
 public:
};

AppearanceGlobalConfigModelTypeInfo::AppearanceGlobalConfigModelTypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AppearanceGlobalConfigModelTypeInfo)
}
AppearanceGlobalConfigModelTypeInfo::AppearanceGlobalConfigModelTypeInfo(const AppearanceGlobalConfigModelTypeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppearanceGlobalConfigModelTypeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_english_){}
    , decltype(_impl_.name_chinese_){}
    , decltype(_impl_.model_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_english_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_english_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name_english().empty()) {
    _this->_impl_.name_english_.Set(from._internal_name_english(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_chinese_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_chinese_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name_chinese().empty()) {
    _this->_impl_.name_chinese_.Set(from._internal_name_chinese(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.model_type_ = from._impl_.model_type_;
  // @@protoc_insertion_point(copy_constructor:idlepb.AppearanceGlobalConfigModelTypeInfo)
}

inline void AppearanceGlobalConfigModelTypeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_english_){}
    , decltype(_impl_.name_chinese_){}
    , decltype(_impl_.model_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_english_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_english_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_chinese_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_chinese_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppearanceGlobalConfigModelTypeInfo::~AppearanceGlobalConfigModelTypeInfo() {
  // @@protoc_insertion_point(destructor:idlepb.AppearanceGlobalConfigModelTypeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppearanceGlobalConfigModelTypeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_english_.Destroy();
  _impl_.name_chinese_.Destroy();
}

void AppearanceGlobalConfigModelTypeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppearanceGlobalConfigModelTypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AppearanceGlobalConfigModelTypeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_english_.ClearToEmpty();
  _impl_.name_chinese_.ClearToEmpty();
  _impl_.model_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceGlobalConfigModelTypeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 model_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.model_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name_english = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name_english();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.AppearanceGlobalConfigModelTypeInfo.name_english"));
        } else
          goto handle_unusual;
        continue;
      // string name_chinese = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name_chinese();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.AppearanceGlobalConfigModelTypeInfo.name_chinese"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppearanceGlobalConfigModelTypeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AppearanceGlobalConfigModelTypeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model_type = 1;
  if (this->_internal_model_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_model_type(), target);
  }

  // string name_english = 2;
  if (!this->_internal_name_english().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_english().data(), static_cast<int>(this->_internal_name_english().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.AppearanceGlobalConfigModelTypeInfo.name_english");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name_english(), target);
  }

  // string name_chinese = 3;
  if (!this->_internal_name_chinese().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_chinese().data(), static_cast<int>(this->_internal_name_chinese().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.AppearanceGlobalConfigModelTypeInfo.name_chinese");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name_chinese(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AppearanceGlobalConfigModelTypeInfo)
  return target;
}

size_t AppearanceGlobalConfigModelTypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AppearanceGlobalConfigModelTypeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name_english = 2;
  if (!this->_internal_name_english().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_english());
  }

  // string name_chinese = 3;
  if (!this->_internal_name_chinese().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_chinese());
  }

  // int32 model_type = 1;
  if (this->_internal_model_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_model_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppearanceGlobalConfigModelTypeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppearanceGlobalConfigModelTypeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppearanceGlobalConfigModelTypeInfo::GetClassData() const { return &_class_data_; }


void AppearanceGlobalConfigModelTypeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppearanceGlobalConfigModelTypeInfo*>(&to_msg);
  auto& from = static_cast<const AppearanceGlobalConfigModelTypeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AppearanceGlobalConfigModelTypeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name_english().empty()) {
    _this->_internal_set_name_english(from._internal_name_english());
  }
  if (!from._internal_name_chinese().empty()) {
    _this->_internal_set_name_chinese(from._internal_name_chinese());
  }
  if (from._internal_model_type() != 0) {
    _this->_internal_set_model_type(from._internal_model_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppearanceGlobalConfigModelTypeInfo::CopyFrom(const AppearanceGlobalConfigModelTypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AppearanceGlobalConfigModelTypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceGlobalConfigModelTypeInfo::IsInitialized() const {
  return true;
}

void AppearanceGlobalConfigModelTypeInfo::InternalSwap(AppearanceGlobalConfigModelTypeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_english_, lhs_arena,
      &other->_impl_.name_english_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_chinese_, lhs_arena,
      &other->_impl_.name_chinese_, rhs_arena
  );
  swap(_impl_.model_type_, other->_impl_.model_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceGlobalConfigModelTypeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[26]);
}

// ===================================================================

class AppearanceGlobalConfig::_Internal {
 public:
};

AppearanceGlobalConfig::AppearanceGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AppearanceGlobalConfig)
}
AppearanceGlobalConfig::AppearanceGlobalConfig(const AppearanceGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppearanceGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shop_refresh_rule_){from._impl_.shop_refresh_rule_}
    , decltype(_impl_.model_type_info_){from._impl_.model_type_info_}
    , decltype(_impl_.refund_item_id_){}
    , decltype(_impl_.shop_item_id_){}
    , decltype(_impl_.shop_refresh_time_){}
    , decltype(_impl_.sk_type_change_cd_){}
    , decltype(_impl_.sk_type_change_item_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.refund_item_id_, &from._impl_.refund_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sk_type_change_item_id_) -
    reinterpret_cast<char*>(&_impl_.refund_item_id_)) + sizeof(_impl_.sk_type_change_item_id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AppearanceGlobalConfig)
}

inline void AppearanceGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shop_refresh_rule_){arena}
    , decltype(_impl_.model_type_info_){arena}
    , decltype(_impl_.refund_item_id_){0}
    , decltype(_impl_.shop_item_id_){0}
    , decltype(_impl_.shop_refresh_time_){0}
    , decltype(_impl_.sk_type_change_cd_){0}
    , decltype(_impl_.sk_type_change_item_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppearanceGlobalConfig::~AppearanceGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.AppearanceGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppearanceGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shop_refresh_rule_.~RepeatedPtrField();
  _impl_.model_type_info_.~RepeatedPtrField();
}

void AppearanceGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppearanceGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AppearanceGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shop_refresh_rule_.Clear();
  _impl_.model_type_info_.Clear();
  ::memset(&_impl_.refund_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sk_type_change_item_id_) -
      reinterpret_cast<char*>(&_impl_.refund_item_id_)) + sizeof(_impl_.sk_type_change_item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 refund_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.refund_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shop_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.shop_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shop_refresh_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.shop_refresh_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sk_type_change_cd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sk_type_change_cd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sk_type_change_item_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sk_type_change_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.AppearanceGlobalConfigShopRefreshRule shop_refresh_rule = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shop_refresh_rule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.AppearanceGlobalConfigModelTypeInfo model_type_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_type_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppearanceGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AppearanceGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 refund_item_id = 1;
  if (this->_internal_refund_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_refund_item_id(), target);
  }

  // int32 shop_item_id = 2;
  if (this->_internal_shop_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_shop_item_id(), target);
  }

  // int32 shop_refresh_time = 3;
  if (this->_internal_shop_refresh_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_shop_refresh_time(), target);
  }

  // int32 sk_type_change_cd = 4;
  if (this->_internal_sk_type_change_cd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_sk_type_change_cd(), target);
  }

  // int32 sk_type_change_item_id = 5;
  if (this->_internal_sk_type_change_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_sk_type_change_item_id(), target);
  }

  // repeated .idlepb.AppearanceGlobalConfigShopRefreshRule shop_refresh_rule = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shop_refresh_rule_size()); i < n; i++) {
    const auto& repfield = this->_internal_shop_refresh_rule(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.AppearanceGlobalConfigModelTypeInfo model_type_info = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_type_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_model_type_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AppearanceGlobalConfig)
  return target;
}

size_t AppearanceGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AppearanceGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.AppearanceGlobalConfigShopRefreshRule shop_refresh_rule = 6;
  total_size += 1UL * this->_internal_shop_refresh_rule_size();
  for (const auto& msg : this->_impl_.shop_refresh_rule_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.AppearanceGlobalConfigModelTypeInfo model_type_info = 7;
  total_size += 1UL * this->_internal_model_type_info_size();
  for (const auto& msg : this->_impl_.model_type_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 refund_item_id = 1;
  if (this->_internal_refund_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_refund_item_id());
  }

  // int32 shop_item_id = 2;
  if (this->_internal_shop_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shop_item_id());
  }

  // int32 shop_refresh_time = 3;
  if (this->_internal_shop_refresh_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shop_refresh_time());
  }

  // int32 sk_type_change_cd = 4;
  if (this->_internal_sk_type_change_cd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sk_type_change_cd());
  }

  // int32 sk_type_change_item_id = 5;
  if (this->_internal_sk_type_change_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sk_type_change_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppearanceGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppearanceGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppearanceGlobalConfig::GetClassData() const { return &_class_data_; }


void AppearanceGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppearanceGlobalConfig*>(&to_msg);
  auto& from = static_cast<const AppearanceGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AppearanceGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shop_refresh_rule_.MergeFrom(from._impl_.shop_refresh_rule_);
  _this->_impl_.model_type_info_.MergeFrom(from._impl_.model_type_info_);
  if (from._internal_refund_item_id() != 0) {
    _this->_internal_set_refund_item_id(from._internal_refund_item_id());
  }
  if (from._internal_shop_item_id() != 0) {
    _this->_internal_set_shop_item_id(from._internal_shop_item_id());
  }
  if (from._internal_shop_refresh_time() != 0) {
    _this->_internal_set_shop_refresh_time(from._internal_shop_refresh_time());
  }
  if (from._internal_sk_type_change_cd() != 0) {
    _this->_internal_set_sk_type_change_cd(from._internal_sk_type_change_cd());
  }
  if (from._internal_sk_type_change_item_id() != 0) {
    _this->_internal_set_sk_type_change_item_id(from._internal_sk_type_change_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppearanceGlobalConfig::CopyFrom(const AppearanceGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AppearanceGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceGlobalConfig::IsInitialized() const {
  return true;
}

void AppearanceGlobalConfig::InternalSwap(AppearanceGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shop_refresh_rule_.InternalSwap(&other->_impl_.shop_refresh_rule_);
  _impl_.model_type_info_.InternalSwap(&other->_impl_.model_type_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppearanceGlobalConfig, _impl_.sk_type_change_item_id_)
      + sizeof(AppearanceGlobalConfig::_impl_.sk_type_change_item_id_)
      - PROTOBUF_FIELD_OFFSET(AppearanceGlobalConfig, _impl_.refund_item_id_)>(
          reinterpret_cast<char*>(&_impl_.refund_item_id_),
          reinterpret_cast<char*>(&other->_impl_.refund_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[27]);
}

// ===================================================================

class FarmGlobalConfig::_Internal {
 public:
};

FarmGlobalConfig::FarmGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.FarmGlobalConfig)
}
FarmGlobalConfig::FarmGlobalConfig(const FarmGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FarmGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.default_unlock_farmland_index_){from._impl_.default_unlock_farmland_index_}
    , /*decltype(_impl_._default_unlock_farmland_index_cached_byte_size_)*/{0}
    , decltype(_impl_.unlock_farmland_cost_item_num_){from._impl_.unlock_farmland_cost_item_num_}
    , /*decltype(_impl_._unlock_farmland_cost_item_num_cached_byte_size_)*/{0}
    , decltype(_impl_.cost_per_watering_){from._impl_.cost_per_watering_}
    , /*decltype(_impl_._cost_per_watering_cached_byte_size_)*/{0}
    , decltype(_impl_.farmland_shape_){}
    , decltype(_impl_.farmland_seed_shape_){}
    , decltype(_impl_.add_speed_from_item_){}
    , decltype(_impl_.unlock_farmland_cost_item_id_){}
    , decltype(_impl_.watering_times_per_day_){}
    , decltype(_impl_.add_speed_per_watering_){}
    , decltype(_impl_.min_seed_plant_time_percent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.farmland_shape_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.farmland_shape_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_farmland_shape().empty()) {
    _this->_impl_.farmland_shape_.Set(from._internal_farmland_shape(), 
      _this->GetArenaForAllocation());
  }
  _impl_.farmland_seed_shape_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.farmland_seed_shape_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_farmland_seed_shape().empty()) {
    _this->_impl_.farmland_seed_shape_.Set(from._internal_farmland_seed_shape(), 
      _this->GetArenaForAllocation());
  }
  _impl_.add_speed_from_item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.add_speed_from_item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_add_speed_from_item().empty()) {
    _this->_impl_.add_speed_from_item_.Set(from._internal_add_speed_from_item(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.unlock_farmland_cost_item_id_, &from._impl_.unlock_farmland_cost_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_seed_plant_time_percent_) -
    reinterpret_cast<char*>(&_impl_.unlock_farmland_cost_item_id_)) + sizeof(_impl_.min_seed_plant_time_percent_));
  // @@protoc_insertion_point(copy_constructor:idlepb.FarmGlobalConfig)
}

inline void FarmGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.default_unlock_farmland_index_){arena}
    , /*decltype(_impl_._default_unlock_farmland_index_cached_byte_size_)*/{0}
    , decltype(_impl_.unlock_farmland_cost_item_num_){arena}
    , /*decltype(_impl_._unlock_farmland_cost_item_num_cached_byte_size_)*/{0}
    , decltype(_impl_.cost_per_watering_){arena}
    , /*decltype(_impl_._cost_per_watering_cached_byte_size_)*/{0}
    , decltype(_impl_.farmland_shape_){}
    , decltype(_impl_.farmland_seed_shape_){}
    , decltype(_impl_.add_speed_from_item_){}
    , decltype(_impl_.unlock_farmland_cost_item_id_){0}
    , decltype(_impl_.watering_times_per_day_){0}
    , decltype(_impl_.add_speed_per_watering_){0}
    , decltype(_impl_.min_seed_plant_time_percent_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.farmland_shape_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.farmland_shape_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.farmland_seed_shape_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.farmland_seed_shape_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.add_speed_from_item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.add_speed_from_item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FarmGlobalConfig::~FarmGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.FarmGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FarmGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.default_unlock_farmland_index_.~RepeatedField();
  _impl_.unlock_farmland_cost_item_num_.~RepeatedField();
  _impl_.cost_per_watering_.~RepeatedField();
  _impl_.farmland_shape_.Destroy();
  _impl_.farmland_seed_shape_.Destroy();
  _impl_.add_speed_from_item_.Destroy();
}

void FarmGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FarmGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.FarmGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.default_unlock_farmland_index_.Clear();
  _impl_.unlock_farmland_cost_item_num_.Clear();
  _impl_.cost_per_watering_.Clear();
  _impl_.farmland_shape_.ClearToEmpty();
  _impl_.farmland_seed_shape_.ClearToEmpty();
  _impl_.add_speed_from_item_.ClearToEmpty();
  ::memset(&_impl_.unlock_farmland_cost_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.min_seed_plant_time_percent_) -
      reinterpret_cast<char*>(&_impl_.unlock_farmland_cost_item_id_)) + sizeof(_impl_.min_seed_plant_time_percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FarmGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string farmland_shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_farmland_shape();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.FarmGlobalConfig.farmland_shape"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 default_unlock_farmland_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_default_unlock_farmland_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_default_unlock_farmland_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unlock_farmland_cost_item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.unlock_farmland_cost_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 unlock_farmland_cost_item_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unlock_farmland_cost_item_num(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_unlock_farmland_cost_item_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string farmland_seed_shape = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_farmland_seed_shape();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.FarmGlobalConfig.farmland_seed_shape"));
        } else
          goto handle_unusual;
        continue;
      // int32 watering_times_per_day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.watering_times_per_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 cost_per_watering = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cost_per_watering(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_cost_per_watering(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 add_speed_per_watering = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.add_speed_per_watering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string add_speed_from_item = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_add_speed_from_item();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.FarmGlobalConfig.add_speed_from_item"));
        } else
          goto handle_unusual;
        continue;
      // float min_seed_plant_time_percent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.min_seed_plant_time_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FarmGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.FarmGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string farmland_shape = 1;
  if (!this->_internal_farmland_shape().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_farmland_shape().data(), static_cast<int>(this->_internal_farmland_shape().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.FarmGlobalConfig.farmland_shape");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_farmland_shape(), target);
  }

  // repeated int32 default_unlock_farmland_index = 2;
  {
    int byte_size = _impl_._default_unlock_farmland_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_default_unlock_farmland_index(), byte_size, target);
    }
  }

  // int32 unlock_farmland_cost_item_id = 3;
  if (this->_internal_unlock_farmland_cost_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_unlock_farmland_cost_item_id(), target);
  }

  // repeated int32 unlock_farmland_cost_item_num = 4;
  {
    int byte_size = _impl_._unlock_farmland_cost_item_num_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_unlock_farmland_cost_item_num(), byte_size, target);
    }
  }

  // string farmland_seed_shape = 5;
  if (!this->_internal_farmland_seed_shape().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_farmland_seed_shape().data(), static_cast<int>(this->_internal_farmland_seed_shape().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.FarmGlobalConfig.farmland_seed_shape");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_farmland_seed_shape(), target);
  }

  // int32 watering_times_per_day = 6;
  if (this->_internal_watering_times_per_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_watering_times_per_day(), target);
  }

  // repeated int32 cost_per_watering = 7;
  {
    int byte_size = _impl_._cost_per_watering_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_cost_per_watering(), byte_size, target);
    }
  }

  // int32 add_speed_per_watering = 8;
  if (this->_internal_add_speed_per_watering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_add_speed_per_watering(), target);
  }

  // string add_speed_from_item = 9;
  if (!this->_internal_add_speed_from_item().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_add_speed_from_item().data(), static_cast<int>(this->_internal_add_speed_from_item().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.FarmGlobalConfig.add_speed_from_item");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_add_speed_from_item(), target);
  }

  // float min_seed_plant_time_percent = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_seed_plant_time_percent = this->_internal_min_seed_plant_time_percent();
  uint32_t raw_min_seed_plant_time_percent;
  memcpy(&raw_min_seed_plant_time_percent, &tmp_min_seed_plant_time_percent, sizeof(tmp_min_seed_plant_time_percent));
  if (raw_min_seed_plant_time_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_min_seed_plant_time_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.FarmGlobalConfig)
  return target;
}

size_t FarmGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.FarmGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 default_unlock_farmland_index = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.default_unlock_farmland_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._default_unlock_farmland_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 unlock_farmland_cost_item_num = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.unlock_farmland_cost_item_num_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._unlock_farmland_cost_item_num_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 cost_per_watering = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.cost_per_watering_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cost_per_watering_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string farmland_shape = 1;
  if (!this->_internal_farmland_shape().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_farmland_shape());
  }

  // string farmland_seed_shape = 5;
  if (!this->_internal_farmland_seed_shape().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_farmland_seed_shape());
  }

  // string add_speed_from_item = 9;
  if (!this->_internal_add_speed_from_item().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_add_speed_from_item());
  }

  // int32 unlock_farmland_cost_item_id = 3;
  if (this->_internal_unlock_farmland_cost_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unlock_farmland_cost_item_id());
  }

  // int32 watering_times_per_day = 6;
  if (this->_internal_watering_times_per_day() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_watering_times_per_day());
  }

  // int32 add_speed_per_watering = 8;
  if (this->_internal_add_speed_per_watering() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_add_speed_per_watering());
  }

  // float min_seed_plant_time_percent = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_seed_plant_time_percent = this->_internal_min_seed_plant_time_percent();
  uint32_t raw_min_seed_plant_time_percent;
  memcpy(&raw_min_seed_plant_time_percent, &tmp_min_seed_plant_time_percent, sizeof(tmp_min_seed_plant_time_percent));
  if (raw_min_seed_plant_time_percent != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FarmGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FarmGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FarmGlobalConfig::GetClassData() const { return &_class_data_; }


void FarmGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FarmGlobalConfig*>(&to_msg);
  auto& from = static_cast<const FarmGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.FarmGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.default_unlock_farmland_index_.MergeFrom(from._impl_.default_unlock_farmland_index_);
  _this->_impl_.unlock_farmland_cost_item_num_.MergeFrom(from._impl_.unlock_farmland_cost_item_num_);
  _this->_impl_.cost_per_watering_.MergeFrom(from._impl_.cost_per_watering_);
  if (!from._internal_farmland_shape().empty()) {
    _this->_internal_set_farmland_shape(from._internal_farmland_shape());
  }
  if (!from._internal_farmland_seed_shape().empty()) {
    _this->_internal_set_farmland_seed_shape(from._internal_farmland_seed_shape());
  }
  if (!from._internal_add_speed_from_item().empty()) {
    _this->_internal_set_add_speed_from_item(from._internal_add_speed_from_item());
  }
  if (from._internal_unlock_farmland_cost_item_id() != 0) {
    _this->_internal_set_unlock_farmland_cost_item_id(from._internal_unlock_farmland_cost_item_id());
  }
  if (from._internal_watering_times_per_day() != 0) {
    _this->_internal_set_watering_times_per_day(from._internal_watering_times_per_day());
  }
  if (from._internal_add_speed_per_watering() != 0) {
    _this->_internal_set_add_speed_per_watering(from._internal_add_speed_per_watering());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_seed_plant_time_percent = from._internal_min_seed_plant_time_percent();
  uint32_t raw_min_seed_plant_time_percent;
  memcpy(&raw_min_seed_plant_time_percent, &tmp_min_seed_plant_time_percent, sizeof(tmp_min_seed_plant_time_percent));
  if (raw_min_seed_plant_time_percent != 0) {
    _this->_internal_set_min_seed_plant_time_percent(from._internal_min_seed_plant_time_percent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FarmGlobalConfig::CopyFrom(const FarmGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.FarmGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FarmGlobalConfig::IsInitialized() const {
  return true;
}

void FarmGlobalConfig::InternalSwap(FarmGlobalConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.default_unlock_farmland_index_.InternalSwap(&other->_impl_.default_unlock_farmland_index_);
  _impl_.unlock_farmland_cost_item_num_.InternalSwap(&other->_impl_.unlock_farmland_cost_item_num_);
  _impl_.cost_per_watering_.InternalSwap(&other->_impl_.cost_per_watering_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.farmland_shape_, lhs_arena,
      &other->_impl_.farmland_shape_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.farmland_seed_shape_, lhs_arena,
      &other->_impl_.farmland_seed_shape_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.add_speed_from_item_, lhs_arena,
      &other->_impl_.add_speed_from_item_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FarmGlobalConfig, _impl_.min_seed_plant_time_percent_)
      + sizeof(FarmGlobalConfig::_impl_.min_seed_plant_time_percent_)
      - PROTOBUF_FIELD_OFFSET(FarmGlobalConfig, _impl_.unlock_farmland_cost_item_id_)>(
          reinterpret_cast<char*>(&_impl_.unlock_farmland_cost_item_id_),
          reinterpret_cast<char*>(&other->_impl_.unlock_farmland_cost_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FarmGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[28]);
}

// ===================================================================

class FriendsGlobalConfig::_Internal {
 public:
};

FriendsGlobalConfig::FriendsGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.FriendsGlobalConfig)
}
FriendsGlobalConfig::FriendsGlobalConfig(const FriendsGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendsGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_friend_num_){}
    , decltype(_impl_.daily_search_count_){}
    , decltype(_impl_.max_apply_count_){}
    , decltype(_impl_.max_block_list_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_friend_num_, &from._impl_.max_friend_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_block_list_) -
    reinterpret_cast<char*>(&_impl_.max_friend_num_)) + sizeof(_impl_.max_block_list_));
  // @@protoc_insertion_point(copy_constructor:idlepb.FriendsGlobalConfig)
}

inline void FriendsGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_friend_num_){0}
    , decltype(_impl_.daily_search_count_){0}
    , decltype(_impl_.max_apply_count_){0}
    , decltype(_impl_.max_block_list_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FriendsGlobalConfig::~FriendsGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.FriendsGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendsGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendsGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendsGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.FriendsGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_friend_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_block_list_) -
      reinterpret_cast<char*>(&_impl_.max_friend_num_)) + sizeof(_impl_.max_block_list_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendsGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_friend_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.max_friend_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 daily_search_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.daily_search_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_apply_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_apply_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_block_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_block_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendsGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.FriendsGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_friend_num = 1;
  if (this->_internal_max_friend_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_friend_num(), target);
  }

  // int32 daily_search_count = 2;
  if (this->_internal_daily_search_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_daily_search_count(), target);
  }

  // int32 max_apply_count = 3;
  if (this->_internal_max_apply_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_apply_count(), target);
  }

  // int32 max_block_list = 4;
  if (this->_internal_max_block_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_block_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.FriendsGlobalConfig)
  return target;
}

size_t FriendsGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.FriendsGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_friend_num = 1;
  if (this->_internal_max_friend_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_friend_num());
  }

  // int32 daily_search_count = 2;
  if (this->_internal_daily_search_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_daily_search_count());
  }

  // int32 max_apply_count = 3;
  if (this->_internal_max_apply_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_apply_count());
  }

  // int32 max_block_list = 4;
  if (this->_internal_max_block_list() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_block_list());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendsGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendsGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendsGlobalConfig::GetClassData() const { return &_class_data_; }


void FriendsGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendsGlobalConfig*>(&to_msg);
  auto& from = static_cast<const FriendsGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.FriendsGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_friend_num() != 0) {
    _this->_internal_set_max_friend_num(from._internal_max_friend_num());
  }
  if (from._internal_daily_search_count() != 0) {
    _this->_internal_set_daily_search_count(from._internal_daily_search_count());
  }
  if (from._internal_max_apply_count() != 0) {
    _this->_internal_set_max_apply_count(from._internal_max_apply_count());
  }
  if (from._internal_max_block_list() != 0) {
    _this->_internal_set_max_block_list(from._internal_max_block_list());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendsGlobalConfig::CopyFrom(const FriendsGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.FriendsGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsGlobalConfig::IsInitialized() const {
  return true;
}

void FriendsGlobalConfig::InternalSwap(FriendsGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendsGlobalConfig, _impl_.max_block_list_)
      + sizeof(FriendsGlobalConfig::_impl_.max_block_list_)
      - PROTOBUF_FIELD_OFFSET(FriendsGlobalConfig, _impl_.max_friend_num_)>(
          reinterpret_cast<char*>(&_impl_.max_friend_num_),
          reinterpret_cast<char*>(&other->_impl_.max_friend_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendsGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[29]);
}

// ===================================================================

class AvatarStageCountDiff::_Internal {
 public:
};

AvatarStageCountDiff::AvatarStageCountDiff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AvatarStageCountDiff)
}
AvatarStageCountDiff::AvatarStageCountDiff(const AvatarStageCountDiff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AvatarStageCountDiff* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.diff_num_){}
    , decltype(_impl_.coef_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.diff_num_, &from._impl_.diff_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.coef_) -
    reinterpret_cast<char*>(&_impl_.diff_num_)) + sizeof(_impl_.coef_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AvatarStageCountDiff)
}

inline void AvatarStageCountDiff::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.diff_num_){0}
    , decltype(_impl_.coef_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AvatarStageCountDiff::~AvatarStageCountDiff() {
  // @@protoc_insertion_point(destructor:idlepb.AvatarStageCountDiff)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AvatarStageCountDiff::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AvatarStageCountDiff::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AvatarStageCountDiff::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AvatarStageCountDiff)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.diff_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.coef_) -
      reinterpret_cast<char*>(&_impl_.diff_num_)) + sizeof(_impl_.coef_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvatarStageCountDiff::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 diff_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.diff_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float coef = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AvatarStageCountDiff::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AvatarStageCountDiff)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 diff_num = 1;
  if (this->_internal_diff_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_diff_num(), target);
  }

  // float coef = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_coef = this->_internal_coef();
  uint32_t raw_coef;
  memcpy(&raw_coef, &tmp_coef, sizeof(tmp_coef));
  if (raw_coef != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_coef(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AvatarStageCountDiff)
  return target;
}

size_t AvatarStageCountDiff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AvatarStageCountDiff)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 diff_num = 1;
  if (this->_internal_diff_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_diff_num());
  }

  // float coef = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_coef = this->_internal_coef();
  uint32_t raw_coef;
  memcpy(&raw_coef, &tmp_coef, sizeof(tmp_coef));
  if (raw_coef != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvatarStageCountDiff::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AvatarStageCountDiff::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvatarStageCountDiff::GetClassData() const { return &_class_data_; }


void AvatarStageCountDiff::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AvatarStageCountDiff*>(&to_msg);
  auto& from = static_cast<const AvatarStageCountDiff&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AvatarStageCountDiff)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_diff_num() != 0) {
    _this->_internal_set_diff_num(from._internal_diff_num());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_coef = from._internal_coef();
  uint32_t raw_coef;
  memcpy(&raw_coef, &tmp_coef, sizeof(tmp_coef));
  if (raw_coef != 0) {
    _this->_internal_set_coef(from._internal_coef());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvatarStageCountDiff::CopyFrom(const AvatarStageCountDiff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AvatarStageCountDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarStageCountDiff::IsInitialized() const {
  return true;
}

void AvatarStageCountDiff::InternalSwap(AvatarStageCountDiff* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AvatarStageCountDiff, _impl_.coef_)
      + sizeof(AvatarStageCountDiff::_impl_.coef_)
      - PROTOBUF_FIELD_OFFSET(AvatarStageCountDiff, _impl_.diff_num_)>(
          reinterpret_cast<char*>(&_impl_.diff_num_),
          reinterpret_cast<char*>(&other->_impl_.diff_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AvatarStageCountDiff::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[30]);
}

// ===================================================================

class AnotherMeGlobalConfig::_Internal {
 public:
};

AnotherMeGlobalConfig::AnotherMeGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AnotherMeGlobalConfig)
}
AnotherMeGlobalConfig::AnotherMeGlobalConfig(const AnotherMeGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnotherMeGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stage_count_diff_){from._impl_.stage_count_diff_}
    , decltype(_impl_.temp_package_max_){}
    , decltype(_impl_.idle_time_max_){}
    , decltype(_impl_.idle_time_duration_){}
    , decltype(_impl_.default_draw_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.temp_package_max_, &from._impl_.temp_package_max_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.default_draw_time_) -
    reinterpret_cast<char*>(&_impl_.temp_package_max_)) + sizeof(_impl_.default_draw_time_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AnotherMeGlobalConfig)
}

inline void AnotherMeGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stage_count_diff_){arena}
    , decltype(_impl_.temp_package_max_){0}
    , decltype(_impl_.idle_time_max_){0}
    , decltype(_impl_.idle_time_duration_){0}
    , decltype(_impl_.default_draw_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnotherMeGlobalConfig::~AnotherMeGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.AnotherMeGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnotherMeGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stage_count_diff_.~RepeatedPtrField();
}

void AnotherMeGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnotherMeGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AnotherMeGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stage_count_diff_.Clear();
  ::memset(&_impl_.temp_package_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.default_draw_time_) -
      reinterpret_cast<char*>(&_impl_.temp_package_max_)) + sizeof(_impl_.default_draw_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnotherMeGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 temp_package_max = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.temp_package_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 idle_time_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.idle_time_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 idle_time_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.idle_time_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 default_draw_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.default_draw_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.AvatarStageCountDiff stage_count_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stage_count_diff(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnotherMeGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AnotherMeGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 temp_package_max = 1;
  if (this->_internal_temp_package_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_temp_package_max(), target);
  }

  // int32 idle_time_max = 2;
  if (this->_internal_idle_time_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_idle_time_max(), target);
  }

  // int32 idle_time_duration = 3;
  if (this->_internal_idle_time_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_idle_time_duration(), target);
  }

  // int32 default_draw_time = 4;
  if (this->_internal_default_draw_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_default_draw_time(), target);
  }

  // repeated .idlepb.AvatarStageCountDiff stage_count_diff = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stage_count_diff_size()); i < n; i++) {
    const auto& repfield = this->_internal_stage_count_diff(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AnotherMeGlobalConfig)
  return target;
}

size_t AnotherMeGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AnotherMeGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.AvatarStageCountDiff stage_count_diff = 5;
  total_size += 1UL * this->_internal_stage_count_diff_size();
  for (const auto& msg : this->_impl_.stage_count_diff_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 temp_package_max = 1;
  if (this->_internal_temp_package_max() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_temp_package_max());
  }

  // int32 idle_time_max = 2;
  if (this->_internal_idle_time_max() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_idle_time_max());
  }

  // int32 idle_time_duration = 3;
  if (this->_internal_idle_time_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_idle_time_duration());
  }

  // int32 default_draw_time = 4;
  if (this->_internal_default_draw_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_default_draw_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnotherMeGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnotherMeGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnotherMeGlobalConfig::GetClassData() const { return &_class_data_; }


void AnotherMeGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnotherMeGlobalConfig*>(&to_msg);
  auto& from = static_cast<const AnotherMeGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AnotherMeGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stage_count_diff_.MergeFrom(from._impl_.stage_count_diff_);
  if (from._internal_temp_package_max() != 0) {
    _this->_internal_set_temp_package_max(from._internal_temp_package_max());
  }
  if (from._internal_idle_time_max() != 0) {
    _this->_internal_set_idle_time_max(from._internal_idle_time_max());
  }
  if (from._internal_idle_time_duration() != 0) {
    _this->_internal_set_idle_time_duration(from._internal_idle_time_duration());
  }
  if (from._internal_default_draw_time() != 0) {
    _this->_internal_set_default_draw_time(from._internal_default_draw_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnotherMeGlobalConfig::CopyFrom(const AnotherMeGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AnotherMeGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnotherMeGlobalConfig::IsInitialized() const {
  return true;
}

void AnotherMeGlobalConfig::InternalSwap(AnotherMeGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stage_count_diff_.InternalSwap(&other->_impl_.stage_count_diff_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnotherMeGlobalConfig, _impl_.default_draw_time_)
      + sizeof(AnotherMeGlobalConfig::_impl_.default_draw_time_)
      - PROTOBUF_FIELD_OFFSET(AnotherMeGlobalConfig, _impl_.temp_package_max_)>(
          reinterpret_cast<char*>(&_impl_.temp_package_max_),
          reinterpret_cast<char*>(&other->_impl_.temp_package_max_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnotherMeGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[31]);
}

// ===================================================================

class FuZeRewardNum::_Internal {
 public:
};

FuZeRewardNum::FuZeRewardNum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.FuZeRewardNum)
}
FuZeRewardNum::FuZeRewardNum(const FuZeRewardNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FuZeRewardNum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rank_, &from._impl_.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.FuZeRewardNum)
}

inline void FuZeRewardNum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FuZeRewardNum::~FuZeRewardNum() {
  // @@protoc_insertion_point(destructor:idlepb.FuZeRewardNum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FuZeRewardNum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FuZeRewardNum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FuZeRewardNum::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.FuZeRewardNum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuZeRewardNum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FuZeRewardNum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.FuZeRewardNum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.FuZeRewardNum)
  return target;
}

size_t FuZeRewardNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.FuZeRewardNum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FuZeRewardNum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FuZeRewardNum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FuZeRewardNum::GetClassData() const { return &_class_data_; }


void FuZeRewardNum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FuZeRewardNum*>(&to_msg);
  auto& from = static_cast<const FuZeRewardNum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.FuZeRewardNum)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FuZeRewardNum::CopyFrom(const FuZeRewardNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.FuZeRewardNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuZeRewardNum::IsInitialized() const {
  return true;
}

void FuZeRewardNum::InternalSwap(FuZeRewardNum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FuZeRewardNum, _impl_.num_)
      + sizeof(FuZeRewardNum::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(FuZeRewardNum, _impl_.rank_)>(
          reinterpret_cast<char*>(&_impl_.rank_),
          reinterpret_cast<char*>(&other->_impl_.rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FuZeRewardNum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[32]);
}

// ===================================================================

class FuZeRewardItemId::_Internal {
 public:
};

FuZeRewardItemId::FuZeRewardItemId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.FuZeRewardItemId)
}
FuZeRewardItemId::FuZeRewardItemId(const FuZeRewardItemId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FuZeRewardItemId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.degree_){}
    , decltype(_impl_.item_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.degree_, &from._impl_.degree_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_id_) -
    reinterpret_cast<char*>(&_impl_.degree_)) + sizeof(_impl_.item_id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.FuZeRewardItemId)
}

inline void FuZeRewardItemId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.degree_){0}
    , decltype(_impl_.item_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FuZeRewardItemId::~FuZeRewardItemId() {
  // @@protoc_insertion_point(destructor:idlepb.FuZeRewardItemId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FuZeRewardItemId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FuZeRewardItemId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FuZeRewardItemId::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.FuZeRewardItemId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_id_) -
      reinterpret_cast<char*>(&_impl_.degree_)) + sizeof(_impl_.item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuZeRewardItemId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 degree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FuZeRewardItemId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.FuZeRewardItemId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 degree = 1;
  if (this->_internal_degree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_degree(), target);
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.FuZeRewardItemId)
  return target;
}

size_t FuZeRewardItemId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.FuZeRewardItemId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 degree = 1;
  if (this->_internal_degree() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_degree());
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FuZeRewardItemId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FuZeRewardItemId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FuZeRewardItemId::GetClassData() const { return &_class_data_; }


void FuZeRewardItemId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FuZeRewardItemId*>(&to_msg);
  auto& from = static_cast<const FuZeRewardItemId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.FuZeRewardItemId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_degree() != 0) {
    _this->_internal_set_degree(from._internal_degree());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FuZeRewardItemId::CopyFrom(const FuZeRewardItemId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.FuZeRewardItemId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuZeRewardItemId::IsInitialized() const {
  return true;
}

void FuZeRewardItemId::InternalSwap(FuZeRewardItemId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FuZeRewardItemId, _impl_.item_id_)
      + sizeof(FuZeRewardItemId::_impl_.item_id_)
      - PROTOBUF_FIELD_OFFSET(FuZeRewardItemId, _impl_.degree_)>(
          reinterpret_cast<char*>(&_impl_.degree_),
          reinterpret_cast<char*>(&other->_impl_.degree_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FuZeRewardItemId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[33]);
}

// ===================================================================

class FuZeGlobalConfig::_Internal {
 public:
};

FuZeGlobalConfig::FuZeGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.FuZeGlobalConfig)
}
FuZeGlobalConfig::FuZeGlobalConfig(const FuZeGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FuZeGlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reward_num_){from._impl_.reward_num_}
    , decltype(_impl_.reward_id_){from._impl_.reward_id_}
    , decltype(_impl_.fuze_rank_num_){}
    , decltype(_impl_.fuze_rank_ratio_){}
    , decltype(_impl_.fenqi_exp_ratio_){}
    , decltype(_impl_.fuze_rank_min_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fuze_rank_num_, &from._impl_.fuze_rank_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fuze_rank_min_) -
    reinterpret_cast<char*>(&_impl_.fuze_rank_num_)) + sizeof(_impl_.fuze_rank_min_));
  // @@protoc_insertion_point(copy_constructor:idlepb.FuZeGlobalConfig)
}

inline void FuZeGlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reward_num_){arena}
    , decltype(_impl_.reward_id_){arena}
    , decltype(_impl_.fuze_rank_num_){0}
    , decltype(_impl_.fuze_rank_ratio_){0}
    , decltype(_impl_.fenqi_exp_ratio_){0}
    , decltype(_impl_.fuze_rank_min_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FuZeGlobalConfig::~FuZeGlobalConfig() {
  // @@protoc_insertion_point(destructor:idlepb.FuZeGlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FuZeGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reward_num_.~RepeatedPtrField();
  _impl_.reward_id_.~RepeatedPtrField();
}

void FuZeGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FuZeGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.FuZeGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reward_num_.Clear();
  _impl_.reward_id_.Clear();
  ::memset(&_impl_.fuze_rank_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fuze_rank_min_) -
      reinterpret_cast<char*>(&_impl_.fuze_rank_num_)) + sizeof(_impl_.fuze_rank_min_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuZeGlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.FuZeRewardNum reward_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_num(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.FuZeRewardItemId reward_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 fuze_rank_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fuze_rank_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float fuze_rank_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.fuze_rank_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fenqi_exp_ratio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.fenqi_exp_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 fuze_rank_min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.fuze_rank_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FuZeGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.FuZeGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.FuZeRewardNum reward_num = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reward_num_size()); i < n; i++) {
    const auto& repfield = this->_internal_reward_num(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.FuZeRewardItemId reward_id = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reward_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_reward_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 fuze_rank_num = 3;
  if (this->_internal_fuze_rank_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_fuze_rank_num(), target);
  }

  // float fuze_rank_ratio = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuze_rank_ratio = this->_internal_fuze_rank_ratio();
  uint32_t raw_fuze_rank_ratio;
  memcpy(&raw_fuze_rank_ratio, &tmp_fuze_rank_ratio, sizeof(tmp_fuze_rank_ratio));
  if (raw_fuze_rank_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_fuze_rank_ratio(), target);
  }

  // float fenqi_exp_ratio = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fenqi_exp_ratio = this->_internal_fenqi_exp_ratio();
  uint32_t raw_fenqi_exp_ratio;
  memcpy(&raw_fenqi_exp_ratio, &tmp_fenqi_exp_ratio, sizeof(tmp_fenqi_exp_ratio));
  if (raw_fenqi_exp_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_fenqi_exp_ratio(), target);
  }

  // int32 fuze_rank_min = 6;
  if (this->_internal_fuze_rank_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_fuze_rank_min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.FuZeGlobalConfig)
  return target;
}

size_t FuZeGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.FuZeGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.FuZeRewardNum reward_num = 1;
  total_size += 1UL * this->_internal_reward_num_size();
  for (const auto& msg : this->_impl_.reward_num_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.FuZeRewardItemId reward_id = 2;
  total_size += 1UL * this->_internal_reward_id_size();
  for (const auto& msg : this->_impl_.reward_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 fuze_rank_num = 3;
  if (this->_internal_fuze_rank_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fuze_rank_num());
  }

  // float fuze_rank_ratio = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuze_rank_ratio = this->_internal_fuze_rank_ratio();
  uint32_t raw_fuze_rank_ratio;
  memcpy(&raw_fuze_rank_ratio, &tmp_fuze_rank_ratio, sizeof(tmp_fuze_rank_ratio));
  if (raw_fuze_rank_ratio != 0) {
    total_size += 1 + 4;
  }

  // float fenqi_exp_ratio = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fenqi_exp_ratio = this->_internal_fenqi_exp_ratio();
  uint32_t raw_fenqi_exp_ratio;
  memcpy(&raw_fenqi_exp_ratio, &tmp_fenqi_exp_ratio, sizeof(tmp_fenqi_exp_ratio));
  if (raw_fenqi_exp_ratio != 0) {
    total_size += 1 + 4;
  }

  // int32 fuze_rank_min = 6;
  if (this->_internal_fuze_rank_min() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fuze_rank_min());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FuZeGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FuZeGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FuZeGlobalConfig::GetClassData() const { return &_class_data_; }


void FuZeGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FuZeGlobalConfig*>(&to_msg);
  auto& from = static_cast<const FuZeGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.FuZeGlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reward_num_.MergeFrom(from._impl_.reward_num_);
  _this->_impl_.reward_id_.MergeFrom(from._impl_.reward_id_);
  if (from._internal_fuze_rank_num() != 0) {
    _this->_internal_set_fuze_rank_num(from._internal_fuze_rank_num());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuze_rank_ratio = from._internal_fuze_rank_ratio();
  uint32_t raw_fuze_rank_ratio;
  memcpy(&raw_fuze_rank_ratio, &tmp_fuze_rank_ratio, sizeof(tmp_fuze_rank_ratio));
  if (raw_fuze_rank_ratio != 0) {
    _this->_internal_set_fuze_rank_ratio(from._internal_fuze_rank_ratio());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fenqi_exp_ratio = from._internal_fenqi_exp_ratio();
  uint32_t raw_fenqi_exp_ratio;
  memcpy(&raw_fenqi_exp_ratio, &tmp_fenqi_exp_ratio, sizeof(tmp_fenqi_exp_ratio));
  if (raw_fenqi_exp_ratio != 0) {
    _this->_internal_set_fenqi_exp_ratio(from._internal_fenqi_exp_ratio());
  }
  if (from._internal_fuze_rank_min() != 0) {
    _this->_internal_set_fuze_rank_min(from._internal_fuze_rank_min());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FuZeGlobalConfig::CopyFrom(const FuZeGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.FuZeGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuZeGlobalConfig::IsInitialized() const {
  return true;
}

void FuZeGlobalConfig::InternalSwap(FuZeGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.reward_num_.InternalSwap(&other->_impl_.reward_num_);
  _impl_.reward_id_.InternalSwap(&other->_impl_.reward_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FuZeGlobalConfig, _impl_.fuze_rank_min_)
      + sizeof(FuZeGlobalConfig::_impl_.fuze_rank_min_)
      - PROTOBUF_FIELD_OFFSET(FuZeGlobalConfig, _impl_.fuze_rank_num_)>(
          reinterpret_cast<char*>(&_impl_.fuze_rank_num_),
          reinterpret_cast<char*>(&other->_impl_.fuze_rank_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FuZeGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gdd_5fglobal_2eproto_getter, &descriptor_table_gdd_5fglobal_2eproto_once,
      file_level_metadata_gdd_5fglobal_2eproto[34]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::idlepb::CommonGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::CommonGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CommonGlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CollectionGlobalConfigLevelUpEntry*
Arena::CreateMaybeMessage< ::idlepb::CollectionGlobalConfigLevelUpEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CollectionGlobalConfigLevelUpEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry*
Arena::CreateMaybeMessage< ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CollectionGlobalConfigUpgradeStarCostRequestEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry*
Arena::CreateMaybeMessage< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CollectionGlobalConfigUpgradeStarCostEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CollectionGlobalConfigUpgradeStar*
Arena::CreateMaybeMessage< ::idlepb::CollectionGlobalConfigUpgradeStar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CollectionGlobalConfigUpgradeStar >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CollectionGlobalConfigReset*
Arena::CreateMaybeMessage< ::idlepb::CollectionGlobalConfigReset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CollectionGlobalConfigReset >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CollectionGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::CollectionGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CollectionGlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CurrencyGlobalConfigItem2Currency*
Arena::CreateMaybeMessage< ::idlepb::CurrencyGlobalConfigItem2Currency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CurrencyGlobalConfigItem2Currency >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CurrencyGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::CurrencyGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CurrencyGlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfigRoleInitAttributes*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfigRoleInitAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfigRoleInitAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfigConstants*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfigConstants >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfigConstants >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfigAbility*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfigAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfigAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfigBreathingExercise*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfigBreathingExercise >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfigBreathingExercise >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfigThunderTestDegreeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfigThunderTest*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfigThunderTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfigThunderTest >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfigAlchemy*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfigAlchemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfigAlchemy >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfigForgeDestroyBackItemConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfigForge*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfigForge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfigForge >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfigFightMode*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfigFightMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfigFightMode >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfigInventory*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfigInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfigInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::PlayerGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerGlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::NpcGlobalConfigConstants*
Arena::CreateMaybeMessage< ::idlepb::NpcGlobalConfigConstants >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::NpcGlobalConfigConstants >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::NpcGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::NpcGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::NpcGlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::WorldGlobalConfigDungeonCommon*
Arena::CreateMaybeMessage< ::idlepb::WorldGlobalConfigDungeonCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::WorldGlobalConfigDungeonCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::WorldGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::WorldGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::WorldGlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AppearanceGlobalConfigShopRefreshRule*
Arena::CreateMaybeMessage< ::idlepb::AppearanceGlobalConfigShopRefreshRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AppearanceGlobalConfigShopRefreshRule >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AppearanceGlobalConfigModelTypeInfo*
Arena::CreateMaybeMessage< ::idlepb::AppearanceGlobalConfigModelTypeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AppearanceGlobalConfigModelTypeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AppearanceGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::AppearanceGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AppearanceGlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::FarmGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::FarmGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::FarmGlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::FriendsGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::FriendsGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::FriendsGlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AvatarStageCountDiff*
Arena::CreateMaybeMessage< ::idlepb::AvatarStageCountDiff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AvatarStageCountDiff >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AnotherMeGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::AnotherMeGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AnotherMeGlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::FuZeRewardNum*
Arena::CreateMaybeMessage< ::idlepb::FuZeRewardNum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::FuZeRewardNum >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::FuZeRewardItemId*
Arena::CreateMaybeMessage< ::idlepb::FuZeRewardItemId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::FuZeRewardItemId >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::FuZeGlobalConfig*
Arena::CreateMaybeMessage< ::idlepb::FuZeGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::FuZeGlobalConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
