// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace idlepb {
PROTOBUF_CONSTEXPR Int64Pair::Int64Pair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v1_)*/int64_t{0}
  , /*decltype(_impl_.v2_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Int64PairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64PairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64PairDefaultTypeInternal() {}
  union {
    Int64Pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64PairDefaultTypeInternal _Int64Pair_default_instance_;
PROTOBUF_CONSTEXPR Int32Pair::Int32Pair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v1_)*/int64_t{0}
  , /*decltype(_impl_.v2_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Int32PairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int32PairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int32PairDefaultTypeInternal() {}
  union {
    Int32Pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int32PairDefaultTypeInternal _Int32Pair_default_instance_;
PROTOBUF_CONSTEXPR StringInt32Pair::StringInt32Pair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringInt32PairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringInt32PairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringInt32PairDefaultTypeInternal() {}
  union {
    StringInt32Pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringInt32PairDefaultTypeInternal _StringInt32Pair_default_instance_;
PROTOBUF_CONSTEXPR Int32Int64Pair::Int32Int64Pair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v64_)*/int64_t{0}
  , /*decltype(_impl_.v32_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Int32Int64PairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int32Int64PairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int32Int64PairDefaultTypeInternal() {}
  union {
    Int32Int64Pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int32Int64PairDefaultTypeInternal _Int32Int64Pair_default_instance_;
PROTOBUF_CONSTEXPR PlayerData::PlayerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.last_online_date_)*/int64_t{0}
  , /*decltype(_impl_.create_date_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDataDefaultTypeInternal() {}
  union {
    PlayerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDataDefaultTypeInternal _PlayerData_default_instance_;
PROTOBUF_CONSTEXPR PlayerSaveData::PlayerSaveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerSaveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerSaveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerSaveDataDefaultTypeInternal() {}
  union {
    PlayerSaveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerSaveDataDefaultTypeInternal _PlayerSaveData_default_instance_;
}  // namespace idlepb
static ::_pb::Metadata file_level_metadata_common_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const uint32_t TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::Int64Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::Int64Pair, _impl_.v1_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Int64Pair, _impl_.v2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::Int32Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::Int32Pair, _impl_.v1_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Int32Pair, _impl_.v2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::StringInt32Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::StringInt32Pair, _impl_.str_),
  PROTOBUF_FIELD_OFFSET(::idlepb::StringInt32Pair, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::Int32Int64Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::Int32Int64Pair, _impl_.v32_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Int32Int64Pair, _impl_.v64_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerData, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerData, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerData, _impl_.last_online_date_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerData, _impl_.create_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerSaveData, _impl_.player_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::idlepb::Int64Pair)},
  { 8, -1, -1, sizeof(::idlepb::Int32Pair)},
  { 16, -1, -1, sizeof(::idlepb::StringInt32Pair)},
  { 24, -1, -1, sizeof(::idlepb::Int32Int64Pair)},
  { 32, -1, -1, sizeof(::idlepb::PlayerData)},
  { 42, -1, -1, sizeof(::idlepb::PlayerSaveData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::idlepb::_Int64Pair_default_instance_._instance,
  &::idlepb::_Int32Pair_default_instance_._instance,
  &::idlepb::_StringInt32Pair_default_instance_._instance,
  &::idlepb::_Int32Int64Pair_default_instance_._instance,
  &::idlepb::_PlayerData_default_instance_._instance,
  &::idlepb::_PlayerSaveData_default_instance_._instance,
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\006idlepb\032\rdefines.proto\032\tn"
  "et.proto\"#\n\tInt64Pair\022\n\n\002v1\030\001 \001(\003\022\n\n\002v2\030"
  "\002 \001(\003\"#\n\tInt32Pair\022\n\n\002v1\030\001 \001(\003\022\n\n\002v2\030\002 \001"
  "(\003\"-\n\017StringInt32Pair\022\013\n\003str\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\005\"*\n\016Int32Int64Pair\022\013\n\003v32\030\001 \001(\005"
  "\022\013\n\003v64\030\002 \001(\003\"c\n\nPlayerData\022\021\n\tplayer_id"
  "\030\001 \001(\003\022\023\n\013player_name\030\003 \001(\t\022\030\n\020last_onli"
  "ne_date\030\004 \001(\003\022\023\n\013create_date\030\005 \001(\003\"9\n\016Pl"
  "ayerSaveData\022\'\n\013player_data\030\001 \001(\0132\022.idle"
  "pb.PlayerData*F\n\023ReplicatedLevelType\022\r\n\t"
  "RLT_Local\020\000\022\017\n\013RLT_Offical\020\001\022\017\n\013RLT_Priv"
  "ate\020\002*q\n\021SystemNoticeStyle\022\032\n\026SystemNoti"
  "ceStyle_None\020\000\022\034\n\030SystemNoticeStyle_Dial"
  "og\020\001\022\"\n\036SystemNoticeStyle_ScreenCenter\020\002"
  "*,\n\020SystemNoticeType\022\007\n\003SNT\020\000\022\017\n\013SNT_Add"
  "Item\020\007b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_common_2eproto_deps[2] = {
  &::descriptor_table_defines_2eproto,
  &::descriptor_table_net_2eproto,
};
static ::_pbi::once_flag descriptor_table_common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false, false, 614, descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_common_2eproto::offsets,
    file_level_metadata_common_2eproto, file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
namespace idlepb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReplicatedLevelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool ReplicatedLevelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemNoticeStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool SystemNoticeStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemNoticeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool SystemNoticeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Int64Pair::_Internal {
 public:
};

Int64Pair::Int64Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.Int64Pair)
}
Int64Pair::Int64Pair(const Int64Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Int64Pair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v1_){}
    , decltype(_impl_.v2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.v1_, &from._impl_.v1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.v2_) -
    reinterpret_cast<char*>(&_impl_.v1_)) + sizeof(_impl_.v2_));
  // @@protoc_insertion_point(copy_constructor:idlepb.Int64Pair)
}

inline void Int64Pair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v1_){int64_t{0}}
    , decltype(_impl_.v2_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Int64Pair::~Int64Pair() {
  // @@protoc_insertion_point(destructor:idlepb.Int64Pair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Int64Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Int64Pair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Int64Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.Int64Pair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.v1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.v2_) -
      reinterpret_cast<char*>(&_impl_.v1_)) + sizeof(_impl_.v2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int64Pair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 v2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Int64Pair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.Int64Pair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 v1 = 1;
  if (this->_internal_v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_v1(), target);
  }

  // int64 v2 = 2;
  if (this->_internal_v2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_v2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.Int64Pair)
  return target;
}

size_t Int64Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.Int64Pair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 v1 = 1;
  if (this->_internal_v1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_v1());
  }

  // int64 v2 = 2;
  if (this->_internal_v2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_v2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Int64Pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Int64Pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Int64Pair::GetClassData() const { return &_class_data_; }


void Int64Pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Int64Pair*>(&to_msg);
  auto& from = static_cast<const Int64Pair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.Int64Pair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_v1() != 0) {
    _this->_internal_set_v1(from._internal_v1());
  }
  if (from._internal_v2() != 0) {
    _this->_internal_set_v2(from._internal_v2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Int64Pair::CopyFrom(const Int64Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.Int64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Pair::IsInitialized() const {
  return true;
}

void Int64Pair::InternalSwap(Int64Pair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Int64Pair, _impl_.v2_)
      + sizeof(Int64Pair::_impl_.v2_)
      - PROTOBUF_FIELD_OFFSET(Int64Pair, _impl_.v1_)>(
          reinterpret_cast<char*>(&_impl_.v1_),
          reinterpret_cast<char*>(&other->_impl_.v1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Int64Pair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}

// ===================================================================

class Int32Pair::_Internal {
 public:
};

Int32Pair::Int32Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.Int32Pair)
}
Int32Pair::Int32Pair(const Int32Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Int32Pair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v1_){}
    , decltype(_impl_.v2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.v1_, &from._impl_.v1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.v2_) -
    reinterpret_cast<char*>(&_impl_.v1_)) + sizeof(_impl_.v2_));
  // @@protoc_insertion_point(copy_constructor:idlepb.Int32Pair)
}

inline void Int32Pair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v1_){int64_t{0}}
    , decltype(_impl_.v2_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Int32Pair::~Int32Pair() {
  // @@protoc_insertion_point(destructor:idlepb.Int32Pair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Int32Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Int32Pair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Int32Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.Int32Pair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.v1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.v2_) -
      reinterpret_cast<char*>(&_impl_.v1_)) + sizeof(_impl_.v2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int32Pair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 v2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Int32Pair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.Int32Pair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 v1 = 1;
  if (this->_internal_v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_v1(), target);
  }

  // int64 v2 = 2;
  if (this->_internal_v2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_v2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.Int32Pair)
  return target;
}

size_t Int32Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.Int32Pair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 v1 = 1;
  if (this->_internal_v1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_v1());
  }

  // int64 v2 = 2;
  if (this->_internal_v2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_v2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Int32Pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Int32Pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Int32Pair::GetClassData() const { return &_class_data_; }


void Int32Pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Int32Pair*>(&to_msg);
  auto& from = static_cast<const Int32Pair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.Int32Pair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_v1() != 0) {
    _this->_internal_set_v1(from._internal_v1());
  }
  if (from._internal_v2() != 0) {
    _this->_internal_set_v2(from._internal_v2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Int32Pair::CopyFrom(const Int32Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.Int32Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Pair::IsInitialized() const {
  return true;
}

void Int32Pair::InternalSwap(Int32Pair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Int32Pair, _impl_.v2_)
      + sizeof(Int32Pair::_impl_.v2_)
      - PROTOBUF_FIELD_OFFSET(Int32Pair, _impl_.v1_)>(
          reinterpret_cast<char*>(&_impl_.v1_),
          reinterpret_cast<char*>(&other->_impl_.v1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Int32Pair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}

// ===================================================================

class StringInt32Pair::_Internal {
 public:
};

StringInt32Pair::StringInt32Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.StringInt32Pair)
}
StringInt32Pair::StringInt32Pair(const StringInt32Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringInt32Pair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.str_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    _this->_impl_.str_.Set(from._internal_str(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:idlepb.StringInt32Pair)
}

inline void StringInt32Pair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.str_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringInt32Pair::~StringInt32Pair() {
  // @@protoc_insertion_point(destructor:idlepb.StringInt32Pair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringInt32Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_.Destroy();
}

void StringInt32Pair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringInt32Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.StringInt32Pair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.str_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringInt32Pair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.StringInt32Pair.str"));
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringInt32Pair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.StringInt32Pair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.StringInt32Pair.str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.StringInt32Pair)
  return target;
}

size_t StringInt32Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.StringInt32Pair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 1;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringInt32Pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringInt32Pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringInt32Pair::GetClassData() const { return &_class_data_; }


void StringInt32Pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringInt32Pair*>(&to_msg);
  auto& from = static_cast<const StringInt32Pair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.StringInt32Pair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str().empty()) {
    _this->_internal_set_str(from._internal_str());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringInt32Pair::CopyFrom(const StringInt32Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.StringInt32Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringInt32Pair::IsInitialized() const {
  return true;
}

void StringInt32Pair::InternalSwap(StringInt32Pair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.str_, lhs_arena,
      &other->_impl_.str_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringInt32Pair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}

// ===================================================================

class Int32Int64Pair::_Internal {
 public:
};

Int32Int64Pair::Int32Int64Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.Int32Int64Pair)
}
Int32Int64Pair::Int32Int64Pair(const Int32Int64Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Int32Int64Pair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v64_){}
    , decltype(_impl_.v32_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.v64_, &from._impl_.v64_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.v32_) -
    reinterpret_cast<char*>(&_impl_.v64_)) + sizeof(_impl_.v32_));
  // @@protoc_insertion_point(copy_constructor:idlepb.Int32Int64Pair)
}

inline void Int32Int64Pair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v64_){int64_t{0}}
    , decltype(_impl_.v32_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Int32Int64Pair::~Int32Int64Pair() {
  // @@protoc_insertion_point(destructor:idlepb.Int32Int64Pair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Int32Int64Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Int32Int64Pair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Int32Int64Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.Int32Int64Pair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.v64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.v32_) -
      reinterpret_cast<char*>(&_impl_.v64_)) + sizeof(_impl_.v32_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int32Int64Pair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 v32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.v32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 v64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.v64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Int32Int64Pair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.Int32Int64Pair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v32 = 1;
  if (this->_internal_v32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_v32(), target);
  }

  // int64 v64 = 2;
  if (this->_internal_v64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_v64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.Int32Int64Pair)
  return target;
}

size_t Int32Int64Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.Int32Int64Pair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 v64 = 2;
  if (this->_internal_v64() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_v64());
  }

  // int32 v32 = 1;
  if (this->_internal_v32() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_v32());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Int32Int64Pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Int32Int64Pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Int32Int64Pair::GetClassData() const { return &_class_data_; }


void Int32Int64Pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Int32Int64Pair*>(&to_msg);
  auto& from = static_cast<const Int32Int64Pair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.Int32Int64Pair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_v64() != 0) {
    _this->_internal_set_v64(from._internal_v64());
  }
  if (from._internal_v32() != 0) {
    _this->_internal_set_v32(from._internal_v32());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Int32Int64Pair::CopyFrom(const Int32Int64Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.Int32Int64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Int64Pair::IsInitialized() const {
  return true;
}

void Int32Int64Pair::InternalSwap(Int32Int64Pair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Int32Int64Pair, _impl_.v32_)
      + sizeof(Int32Int64Pair::_impl_.v32_)
      - PROTOBUF_FIELD_OFFSET(Int32Int64Pair, _impl_.v64_)>(
          reinterpret_cast<char*>(&_impl_.v64_),
          reinterpret_cast<char*>(&other->_impl_.v64_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Int32Int64Pair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}

// ===================================================================

class PlayerData::_Internal {
 public:
};

PlayerData::PlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerData)
}
PlayerData::PlayerData(const PlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.last_online_date_){}
    , decltype(_impl_.create_date_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.create_date_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.create_date_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerData)
}

inline void PlayerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.last_online_date_){int64_t{0}}
    , decltype(_impl_.create_date_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerData::~PlayerData() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
}

void PlayerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_name_.ClearToEmpty();
  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.create_date_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.create_date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string player_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.PlayerData.player_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 last_online_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_online_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 create_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.create_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  // string player_name = 3;
  if (!this->_internal_player_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.PlayerData.player_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_player_name(), target);
  }

  // int64 last_online_date = 4;
  if (this->_internal_last_online_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_online_date(), target);
  }

  // int64 create_date = 5;
  if (this->_internal_create_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_create_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerData)
  return target;
}

size_t PlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 3;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  // int64 last_online_date = 4;
  if (this->_internal_last_online_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_online_date());
  }

  // int64 create_date = 5;
  if (this->_internal_create_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_date());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerData::GetClassData() const { return &_class_data_; }


void PlayerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerData*>(&to_msg);
  auto& from = static_cast<const PlayerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_last_online_date() != 0) {
    _this->_internal_set_last_online_date(from._internal_last_online_date());
  }
  if (from._internal_create_date() != 0) {
    _this->_internal_set_create_date(from._internal_create_date());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerData::CopyFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {
  return true;
}

void PlayerData::InternalSwap(PlayerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.create_date_)
      + sizeof(PlayerData::_impl_.create_date_)
      - PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}

// ===================================================================

class PlayerSaveData::_Internal {
 public:
  static const ::idlepb::PlayerData& player_data(const PlayerSaveData* msg);
};

const ::idlepb::PlayerData&
PlayerSaveData::_Internal::player_data(const PlayerSaveData* msg) {
  return *msg->_impl_.player_data_;
}
PlayerSaveData::PlayerSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerSaveData)
}
PlayerSaveData::PlayerSaveData(const PlayerSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerSaveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_data()) {
    _this->_impl_.player_data_ = new ::idlepb::PlayerData(*from._impl_.player_data_);
  }
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerSaveData)
}

inline void PlayerSaveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerSaveData::~PlayerSaveData() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerSaveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_data_;
}

void PlayerSaveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerSaveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_data_ != nullptr) {
    delete _impl_.player_data_;
  }
  _impl_.player_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerSaveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.PlayerData player_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerSaveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerSaveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.PlayerData player_data = 1;
  if (this->_internal_has_player_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_data(this),
        _Internal::player_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerSaveData)
  return target;
}

size_t PlayerSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerSaveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.PlayerData player_data = 1;
  if (this->_internal_has_player_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerSaveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerSaveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerSaveData::GetClassData() const { return &_class_data_; }


void PlayerSaveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerSaveData*>(&to_msg);
  auto& from = static_cast<const PlayerSaveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerSaveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_data()) {
    _this->_internal_mutable_player_data()->::idlepb::PlayerData::MergeFrom(
        from._internal_player_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerSaveData::CopyFrom(const PlayerSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSaveData::IsInitialized() const {
  return true;
}

void PlayerSaveData::InternalSwap(PlayerSaveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_data_, other->_impl_.player_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSaveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::idlepb::Int64Pair*
Arena::CreateMaybeMessage< ::idlepb::Int64Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::Int64Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::Int32Pair*
Arena::CreateMaybeMessage< ::idlepb::Int32Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::Int32Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::StringInt32Pair*
Arena::CreateMaybeMessage< ::idlepb::StringInt32Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::StringInt32Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::Int32Int64Pair*
Arena::CreateMaybeMessage< ::idlepb::Int32Int64Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::Int32Int64Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerData*
Arena::CreateMaybeMessage< ::idlepb::PlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerSaveData*
Arena::CreateMaybeMessage< ::idlepb::PlayerSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerSaveData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
