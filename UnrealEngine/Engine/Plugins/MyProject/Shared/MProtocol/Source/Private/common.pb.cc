// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace idlepb {
PROTOBUF_CONSTEXPR Int64Data::Int64Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Int64DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64DataDefaultTypeInternal() {}
  union {
    Int64Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64DataDefaultTypeInternal _Int64Data_default_instance_;
PROTOBUF_CONSTEXPR Vector2::Vector2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2DefaultTypeInternal() {}
  union {
    Vector2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2DefaultTypeInternal _Vector2_default_instance_;
PROTOBUF_CONSTEXPR Vector3::Vector3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_CONSTEXPR Color::Color(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.r_)*/0
  , /*decltype(_impl_.g_)*/0
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;
PROTOBUF_CONSTEXPR Int64Pair::Int64Pair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/int64_t{0}
  , /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Int64PairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64PairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64PairDefaultTypeInternal() {}
  union {
    Int64Pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64PairDefaultTypeInternal _Int64Pair_default_instance_;
PROTOBUF_CONSTEXPR StringKeyInt32ValueEntry::StringKeyInt32ValueEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringKeyInt32ValueEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringKeyInt32ValueEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringKeyInt32ValueEntryDefaultTypeInternal() {}
  union {
    StringKeyInt32ValueEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringKeyInt32ValueEntryDefaultTypeInternal _StringKeyInt32ValueEntry_default_instance_;
PROTOBUF_CONSTEXPR MapValueInt32::MapValueInt32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapValueInt32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapValueInt32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapValueInt32DefaultTypeInternal() {}
  union {
    MapValueInt32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapValueInt32DefaultTypeInternal _MapValueInt32_default_instance_;
PROTOBUF_CONSTEXPR StringInt64Pair::StringInt64Pair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringInt64PairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringInt64PairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringInt64PairDefaultTypeInternal() {}
  union {
    StringInt64Pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringInt64PairDefaultTypeInternal _StringInt64Pair_default_instance_;
PROTOBUF_CONSTEXPR AbilityEffectData::AbilityEffectData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.period_)*/0
  , /*decltype(_impl_.duration_policy_)*/0
  , /*decltype(_impl_.starttime_utc_)*/int64_t{0}
  , /*decltype(_impl_.starttime_world_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.m_)*/0
  , /*decltype(_impl_.n_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbilityEffectDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbilityEffectDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbilityEffectDataDefaultTypeInternal() {}
  union {
    AbilityEffectData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbilityEffectDataDefaultTypeInternal _AbilityEffectData_default_instance_;
PROTOBUF_CONSTEXPR GameStatData::GameStatData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameStatDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStatDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStatDataDefaultTypeInternal() {}
  union {
    GameStatData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStatDataDefaultTypeInternal _GameStatData_default_instance_;
PROTOBUF_CONSTEXPR GameStatsData::GameStatsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameStatsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStatsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStatsDataDefaultTypeInternal() {}
  union {
    GameStatsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStatsDataDefaultTypeInternal _GameStatsData_default_instance_;
PROTOBUF_CONSTEXPR GameStatsModuleData::GameStatsModuleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameStatsModuleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStatsModuleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStatsModuleDataDefaultTypeInternal() {}
  union {
    GameStatsModuleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStatsModuleDataDefaultTypeInternal _GameStatsModuleData_default_instance_;
PROTOBUF_CONSTEXPR GameStatsAllModuleData::GameStatsAllModuleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.all_module_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameStatsAllModuleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStatsAllModuleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStatsAllModuleDataDefaultTypeInternal() {}
  union {
    GameStatsAllModuleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStatsAllModuleDataDefaultTypeInternal _GameStatsAllModuleData_default_instance_;
PROTOBUF_CONSTEXPR RoleAttribute::RoleAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.health_)*/0
  , /*decltype(_impl_.max_health_)*/0
  , /*decltype(_impl_.mana_)*/0
  , /*decltype(_impl_.max_mana_)*/0
  , /*decltype(_impl_.mind_)*/0
  , /*decltype(_impl_.strength_)*/0
  , /*decltype(_impl_.intellect_)*/0
  , /*decltype(_impl_.agility_)*/0
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_.phy_att_)*/0
  , /*decltype(_impl_.phy_def_)*/0
  , /*decltype(_impl_.mag_att_)*/0
  , /*decltype(_impl_.mag_def_)*/0
  , /*decltype(_impl_.phy_dodge_)*/0
  , /*decltype(_impl_.mag_dodge_)*/0
  , /*decltype(_impl_.phy_hit_)*/0
  , /*decltype(_impl_.mag_hit_)*/0
  , /*decltype(_impl_.crit_)*/0
  , /*decltype(_impl_.crit_def_)*/0
  , /*decltype(_impl_.hp_recover_percent_)*/0
  , /*decltype(_impl_.mp_recover_percent_)*/0
  , /*decltype(_impl_.crit_coef_)*/0
  , /*decltype(_impl_.crit_block_)*/0
  , /*decltype(_impl_.crit_additional_damage_)*/0
  , /*decltype(_impl_.arena_money_add_percent_)*/0
  , /*decltype(_impl_.mag_break_)*/0
  , /*decltype(_impl_.phy_break_)*/0
  , /*decltype(_impl_.mag_block_)*/0
  , /*decltype(_impl_.phy_block_)*/0
  , /*decltype(_impl_.fen_qi_)*/0
  , /*decltype(_impl_.tuna_num_)*/0
  , /*decltype(_impl_.tuna_add_percent_)*/0
  , /*decltype(_impl_.medicine_num_)*/0
  , /*decltype(_impl_.medicine_add_percent_)*/0
  , /*decltype(_impl_.baseqi_add_percent_)*/0
  , /*decltype(_impl_.shen_tong_damage_to_player_add_percent_)*/0
  , /*decltype(_impl_.shen_tong_damage_to_player_reduce_percent_)*/0
  , /*decltype(_impl_.fa_bao_damage_to_player_add_percent_)*/0
  , /*decltype(_impl_.fa_bao_damage_to_player_reduce_percent_)*/0
  , /*decltype(_impl_.phy_damage_add_percent_)*/0
  , /*decltype(_impl_.mag_damage_add_percent_)*/0
  , /*decltype(_impl_.phy_damage_reduce_percent_)*/0
  , /*decltype(_impl_.mag_damage_reduce_percent_)*/0
  , /*decltype(_impl_.attack_monster_damage_add_percent_)*/0
  , /*decltype(_impl_.take_monster_damage_reduce_percent_)*/0
  , /*decltype(_impl_.base_hp_add_percent_)*/0
  , /*decltype(_impl_.base_mp_add_percent_)*/0
  , /*decltype(_impl_.base_phy_att_add_percent_)*/0
  , /*decltype(_impl_.base_mag_att_add_percent_)*/0
  , /*decltype(_impl_.base_phy_def_add_percent_)*/0
  , /*decltype(_impl_.base_mag_def_add_percent_)*/0
  , /*decltype(_impl_.base_phy_hit_add_percent_)*/0
  , /*decltype(_impl_.base_mag_hit_add_percent_)*/0
  , /*decltype(_impl_.base_phy_dodge_add_percent_)*/0
  , /*decltype(_impl_.base_mag_dodge_add_percent_)*/0
  , /*decltype(_impl_.base_crit_add_percent_)*/0
  , /*decltype(_impl_.base_crit_def_add_percent_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleAttributeDefaultTypeInternal() {}
  union {
    RoleAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleAttributeDefaultTypeInternal _RoleAttribute_default_instance_;
PROTOBUF_CONSTEXPR RankData::RankData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_.layer_)*/0
  , /*decltype(_impl_.stage_)*/0
  , /*decltype(_impl_.degree_)*/0
  , /*decltype(_impl_.breakthrough_type_)*/0
  , /*decltype(_impl_.lose_recover_timestamp_)*/int64_t{0}
  , /*decltype(_impl_.stage_add_att_)*/int64_t{0}
  , /*decltype(_impl_.lose_add_probability_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RankDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RankDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RankDataDefaultTypeInternal() {}
  union {
    RankData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RankDataDefaultTypeInternal _RankData_default_instance_;
PROTOBUF_CONSTEXPR BreathingReward::BreathingReward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/{}
  , /*decltype(_impl_._item_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.num_)*/{}
  , /*decltype(_impl_._num_cached_byte_size_)*/{0}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.received_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BreathingRewardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BreathingRewardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BreathingRewardDefaultTypeInternal() {}
  union {
    BreathingReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BreathingRewardDefaultTypeInternal _BreathingReward_default_instance_;
PROTOBUF_CONSTEXPR CommonCultivationData::CommonCultivationData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.breathing_rewards_)*/{}
  , /*decltype(_impl_.merge_breathing_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommonCultivationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonCultivationDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonCultivationDataDefaultTypeInternal() {}
  union {
    CommonCultivationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonCultivationDataDefaultTypeInternal _CommonCultivationData_default_instance_;
PROTOBUF_CONSTEXPR CultivationData::CultivationData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rank_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CultivationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CultivationDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CultivationDataDefaultTypeInternal() {}
  union {
    CultivationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CultivationDataDefaultTypeInternal _CultivationData_default_instance_;
PROTOBUF_CONSTEXPR RoleDailyCounterEntry::RoleDailyCounterEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleDailyCounterEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleDailyCounterEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleDailyCounterEntryDefaultTypeInternal() {}
  union {
    RoleDailyCounterEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleDailyCounterEntryDefaultTypeInternal _RoleDailyCounterEntry_default_instance_;
PROTOBUF_CONSTEXPR RoleDailyCounter::RoleDailyCounter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.last_reset_time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleDailyCounterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleDailyCounterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleDailyCounterDefaultTypeInternal() {}
  union {
    RoleDailyCounter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleDailyCounterDefaultTypeInternal _RoleDailyCounter_default_instance_;
PROTOBUF_CONSTEXPR RoleWeeklyCounterEntry::RoleWeeklyCounterEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleWeeklyCounterEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleWeeklyCounterEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleWeeklyCounterEntryDefaultTypeInternal() {}
  union {
    RoleWeeklyCounterEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleWeeklyCounterEntryDefaultTypeInternal _RoleWeeklyCounterEntry_default_instance_;
PROTOBUF_CONSTEXPR RoleWeeklyCounter::RoleWeeklyCounter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.last_reset_time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleWeeklyCounterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleWeeklyCounterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleWeeklyCounterDefaultTypeInternal() {}
  union {
    RoleWeeklyCounter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleWeeklyCounterDefaultTypeInternal _RoleWeeklyCounter_default_instance_;
PROTOBUF_CONSTEXPR CurrencyEntry::CurrencyEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CurrencyEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrencyEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrencyEntryDefaultTypeInternal() {}
  union {
    CurrencyEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrencyEntryDefaultTypeInternal _CurrencyEntry_default_instance_;
PROTOBUF_CONSTEXPR CurrencyData::CurrencyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.currencies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CurrencyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrencyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrencyDataDefaultTypeInternal() {}
  union {
    CurrencyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrencyDataDefaultTypeInternal _CurrencyData_default_instance_;
PROTOBUF_CONSTEXPR EquipPerkEntry::EquipPerkEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EquipPerkEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquipPerkEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquipPerkEntryDefaultTypeInternal() {}
  union {
    EquipPerkEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquipPerkEntryDefaultTypeInternal _EquipPerkEntry_default_instance_;
PROTOBUF_CONSTEXPR SkillEquipmentAttributes::SkillEquipmentAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.effects_)*/{}
  , /*decltype(_impl_.shield_effects_)*/{}
  , /*decltype(_impl_.cool_down_)*/0
  , /*decltype(_impl_.target_num_)*/0
  , /*decltype(_impl_.attack_count_)*/0
  , /*decltype(_impl_.phy_coefficient_)*/0
  , /*decltype(_impl_.phy_damage_)*/0
  , /*decltype(_impl_.mag_coefficient_)*/0
  , /*decltype(_impl_.mag_damage_)*/0
  , /*decltype(_impl_.max_damage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkillEquipmentAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillEquipmentAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillEquipmentAttributesDefaultTypeInternal() {}
  union {
    SkillEquipmentAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillEquipmentAttributesDefaultTypeInternal _SkillEquipmentAttributes_default_instance_;
PROTOBUF_CONSTEXPR SkillEquipmentData::SkillEquipmentData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_.reinforce_attributes_)*/nullptr
  , /*decltype(_impl_.qiwen_attributes_)*/nullptr
  , /*decltype(_impl_.jinglian_attributes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkillEquipmentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillEquipmentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillEquipmentDataDefaultTypeInternal() {}
  union {
    SkillEquipmentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillEquipmentDataDefaultTypeInternal _SkillEquipmentData_default_instance_;
PROTOBUF_CONSTEXPR CollectionEntry::CollectionEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.star_)*/0
  , /*decltype(_impl_.is_activated_)*/false
  , /*decltype(_impl_.piece_num_)*/0
  , /*decltype(_impl_.life_num_)*/0
  , /*decltype(_impl_.combat_power_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectionEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionEntryDefaultTypeInternal() {}
  union {
    CollectionEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionEntryDefaultTypeInternal _CollectionEntry_default_instance_;
PROTOBUF_CONSTEXPR EquipmentData::EquipmentData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.perks_)*/{}
  , /*decltype(_impl_.maker_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skill_equipment_data_)*/nullptr
  , /*decltype(_impl_.collection_data_)*/nullptr
  , /*decltype(_impl_.base_stats_)*/nullptr
  , /*decltype(_impl_.reinforce_stats_)*/nullptr
  , /*decltype(_impl_.qiwen_stats_)*/nullptr
  , /*decltype(_impl_.refine_stats_)*/nullptr
  , /*decltype(_impl_.perk_stats_)*/nullptr
  , /*decltype(_impl_.qiwen_resonance_stats_)*/nullptr
  , /*decltype(_impl_.combat_power_)*/int64_t{0}
  , /*decltype(_impl_.maker_roleid_)*/int64_t{0}
  , /*decltype(_impl_.slot_index_)*/0
  , /*decltype(_impl_.reinforce_level_)*/0
  , /*decltype(_impl_.refine_level_)*/0
  , /*decltype(_impl_.qiwen_a_level_)*/0
  , /*decltype(_impl_.qiwen_b_level_)*/0
  , /*decltype(_impl_.qiwen_c_level_)*/0
  , /*decltype(_impl_.qiwen_extra_effect_num_)*/0
  , /*decltype(_impl_.qiwen_moneycast_)*/0
  , /*decltype(_impl_.qiwen_current_exp_a_)*/0
  , /*decltype(_impl_.qiwen_current_exp_b_)*/0
  , /*decltype(_impl_.qiwen_current_exp_c_)*/0
  , /*decltype(_impl_.qiwen_total_exp_a_)*/0
  , /*decltype(_impl_.qiwen_total_exp_b_)*/0
  , /*decltype(_impl_.qiwen_total_exp_c_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EquipmentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquipmentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquipmentDataDefaultTypeInternal() {}
  union {
    EquipmentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquipmentDataDefaultTypeInternal _EquipmentData_default_instance_;
PROTOBUF_CONSTEXPR ItemData::ItemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equipment_data_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.locked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDataDefaultTypeInternal() {}
  union {
    ItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDataDefaultTypeInternal _ItemData_default_instance_;
PROTOBUF_CONSTEXPR SimpleItemData::SimpleItemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleItemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleItemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleItemDataDefaultTypeInternal() {}
  union {
    SimpleItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleItemDataDefaultTypeInternal _SimpleItemData_default_instance_;
PROTOBUF_CONSTEXPR TemporaryPackageItem::TemporaryPackageItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TemporaryPackageItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TemporaryPackageItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TemporaryPackageItemDefaultTypeInternal() {}
  union {
    TemporaryPackageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TemporaryPackageItemDefaultTypeInternal _TemporaryPackageItem_default_instance_;
PROTOBUF_CONSTEXPR ArenaExplorationStatisticalItem::ArenaExplorationStatisticalItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.killnum_)*/0
  , /*decltype(_impl_.deathnum_)*/0
  , /*decltype(_impl_.itemnum_)*/int64_t{0}
  , /*decltype(_impl_.moneynum_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArenaExplorationStatisticalItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArenaExplorationStatisticalItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArenaExplorationStatisticalItemDefaultTypeInternal() {}
  union {
    ArenaExplorationStatisticalItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArenaExplorationStatisticalItemDefaultTypeInternal _ArenaExplorationStatisticalItem_default_instance_;
PROTOBUF_CONSTEXPR ShopItemBase::ShopItemBase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.bought_count_)*/0
  , /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_.must_buy_)*/false
  , /*decltype(_impl_.discount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShopItemBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShopItemBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShopItemBaseDefaultTypeInternal() {}
  union {
    ShopItemBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShopItemBaseDefaultTypeInternal _ShopItemBase_default_instance_;
PROTOBUF_CONSTEXPR ShopItem::ShopItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_data_)*/nullptr
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.money_)*/0
  , /*decltype(_impl_.is_sold_out_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShopItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShopItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShopItemDefaultTypeInternal() {}
  union {
    ShopItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShopItemDefaultTypeInternal _ShopItem_default_instance_;
PROTOBUF_CONSTEXPR DeluxeShopItem::DeluxeShopItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_data_)*/nullptr
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.sellcount_)*/0
  , /*decltype(_impl_.discount_)*/0
  , /*decltype(_impl_.money_)*/0
  , /*decltype(_impl_.is_sold_out_)*/false
  , /*decltype(_impl_.must_buy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeluxeShopItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeluxeShopItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeluxeShopItemDefaultTypeInternal() {}
  union {
    DeluxeShopItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeluxeShopItemDefaultTypeInternal _DeluxeShopItem_default_instance_;
PROTOBUF_CONSTEXPR RoleVipShopData::RoleVipShopData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shop_items_)*/{}
  , /*decltype(_impl_.last_day_refresh_time_)*/int64_t{0}
  , /*decltype(_impl_.last_week_refresh_time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleVipShopDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleVipShopDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleVipShopDataDefaultTypeInternal() {}
  union {
    RoleVipShopData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleVipShopDataDefaultTypeInternal _RoleVipShopData_default_instance_;
PROTOBUF_CONSTEXPR CharacterModelConfig::CharacterModelConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_slots_)*/{}
  , /*decltype(_impl_._model_slots_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skeleton_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterModelConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterModelConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterModelConfigDefaultTypeInternal() {}
  union {
    CharacterModelConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterModelConfigDefaultTypeInternal _CharacterModelConfig_default_instance_;
PROTOBUF_CONSTEXPR RoleAppearanceShopData::RoleAppearanceShopData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.goods1_)*/{}
  , /*decltype(_impl_.last_auto_refresh_time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleAppearanceShopDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleAppearanceShopDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleAppearanceShopDataDefaultTypeInternal() {}
  union {
    RoleAppearanceShopData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleAppearanceShopDataDefaultTypeInternal _RoleAppearanceShopData_default_instance_;
PROTOBUF_CONSTEXPR AppearanceCollection::AppearanceCollection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.duration_)*/int64_t{0}
  , /*decltype(_impl_.begin_date_)*/int64_t{0}
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppearanceCollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppearanceCollectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppearanceCollectionDefaultTypeInternal() {}
  union {
    AppearanceCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppearanceCollectionDefaultTypeInternal _AppearanceCollection_default_instance_;
PROTOBUF_CONSTEXPR RoleAppearanceData::RoleAppearanceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collection_)*/{}
  , /*decltype(_impl_.current_model_)*/nullptr
  , /*decltype(_impl_.shop_data_)*/nullptr
  , /*decltype(_impl_.last_change_skeleton_time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleAppearanceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleAppearanceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleAppearanceDataDefaultTypeInternal() {}
  union {
    RoleAppearanceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleAppearanceDataDefaultTypeInternal _RoleAppearanceData_default_instance_;
PROTOBUF_CONSTEXPR AlchemyPackageItem::AlchemyPackageItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlchemyPackageItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlchemyPackageItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlchemyPackageItemDefaultTypeInternal() {}
  union {
    AlchemyPackageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlchemyPackageItemDefaultTypeInternal _AlchemyPackageItem_default_instance_;
PROTOBUF_CONSTEXPR AlchemyMakeData::AlchemyMakeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.recipe_id_)*/0
  , /*decltype(_impl_.recipe_degree_)*/0
  , /*decltype(_impl_.material_id_)*/0
  , /*decltype(_impl_.material_quality_)*/0
  , /*decltype(_impl_.target_num_)*/0
  , /*decltype(_impl_.cur_num_)*/0
  , /*decltype(_impl_.next_done_time_)*/int64_t{0}
  , /*decltype(_impl_.last_produce_item_cfg_id_)*/0
  , /*decltype(_impl_.last_produce_item_num_)*/0
  , /*decltype(_impl_.total_start_time_)*/int64_t{0}
  , /*decltype(_impl_.total_done_time_)*/int64_t{0}
  , /*decltype(_impl_.add_exp_)*/0
  , /*decltype(_impl_.cur_successed_num_)*/0
  , /*decltype(_impl_.cur_failed_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlchemyMakeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlchemyMakeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlchemyMakeDataDefaultTypeInternal() {}
  union {
    AlchemyMakeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlchemyMakeDataDefaultTypeInternal _AlchemyMakeData_default_instance_;
PROTOBUF_CONSTEXPR AlchemyRecipeData::AlchemyRecipeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recipe_id_)*/0
  , /*decltype(_impl_.big_chance_)*/0
  , /*decltype(_impl_.small_chance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlchemyRecipeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlchemyRecipeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlchemyRecipeDataDefaultTypeInternal() {}
  union {
    AlchemyRecipeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlchemyRecipeDataDefaultTypeInternal _AlchemyRecipeData_default_instance_;
PROTOBUF_CONSTEXPR RoleAlchemyData::RoleAlchemyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.produce_quality_stats_)*/{}
  , /*decltype(_impl_._produce_quality_stats_cached_byte_size_)*/{0}
  , /*decltype(_impl_.recipes_)*/{}
  , /*decltype(_impl_.cur_make_data_)*/nullptr
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_.total_refine_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleAlchemyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleAlchemyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleAlchemyDataDefaultTypeInternal() {}
  union {
    RoleAlchemyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleAlchemyDataDefaultTypeInternal _RoleAlchemyData_default_instance_;
PROTOBUF_CONSTEXPR ForgePackageItem::ForgePackageItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForgePackageItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForgePackageItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForgePackageItemDefaultTypeInternal() {}
  union {
    ForgePackageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForgePackageItemDefaultTypeInternal _ForgePackageItem_default_instance_;
PROTOBUF_CONSTEXPR ForgeMakeData::ForgeMakeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.recipe_id_)*/0
  , /*decltype(_impl_.recipe_degree_)*/0
  , /*decltype(_impl_.material_id_)*/0
  , /*decltype(_impl_.material_quality_)*/0
  , /*decltype(_impl_.target_num_)*/0
  , /*decltype(_impl_.cur_num_)*/0
  , /*decltype(_impl_.next_done_time_)*/int64_t{0}
  , /*decltype(_impl_.last_produce_item_cfg_id_)*/0
  , /*decltype(_impl_.last_produce_item_num_)*/0
  , /*decltype(_impl_.total_start_time_)*/int64_t{0}
  , /*decltype(_impl_.total_done_time_)*/int64_t{0}
  , /*decltype(_impl_.add_exp_)*/0
  , /*decltype(_impl_.cur_successed_num_)*/0
  , /*decltype(_impl_.cur_failed_num_)*/0
  , /*decltype(_impl_.ext_material_id_)*/0
  , /*decltype(_impl_.auto_sell_poor_)*/false
  , /*decltype(_impl_.auto_sell_middle_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForgeMakeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForgeMakeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForgeMakeDataDefaultTypeInternal() {}
  union {
    ForgeMakeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForgeMakeDataDefaultTypeInternal _ForgeMakeData_default_instance_;
PROTOBUF_CONSTEXPR ForgeRecipeData::ForgeRecipeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recipe_id_)*/0
  , /*decltype(_impl_.big_chance_)*/0
  , /*decltype(_impl_.small_chance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForgeRecipeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForgeRecipeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForgeRecipeDataDefaultTypeInternal() {}
  union {
    ForgeRecipeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForgeRecipeDataDefaultTypeInternal _ForgeRecipeData_default_instance_;
PROTOBUF_CONSTEXPR LostEquipmentData::LostEquipmentData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_data_)*/nullptr
  , /*decltype(_impl_.uid_)*/0
  , /*decltype(_impl_.tag_)*/0
  , /*decltype(_impl_.lost_date_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LostEquipmentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LostEquipmentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LostEquipmentDataDefaultTypeInternal() {}
  union {
    LostEquipmentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LostEquipmentDataDefaultTypeInternal _LostEquipmentData_default_instance_;
PROTOBUF_CONSTEXPR RoleForgeData::RoleForgeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.produce_equip_quality_stats_)*/{}
  , /*decltype(_impl_._produce_equip_quality_stats_cached_byte_size_)*/{0}
  , /*decltype(_impl_.produce_skillequip_quality_stats_)*/{}
  , /*decltype(_impl_._produce_skillequip_quality_stats_cached_byte_size_)*/{0}
  , /*decltype(_impl_.recipes_)*/{}
  , /*decltype(_impl_.lost_equipment_data_)*/{}
  , /*decltype(_impl_.cur_make_data_)*/nullptr
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_.total_refine_num_)*/0
  , /*decltype(_impl_.destroy_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleForgeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleForgeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleForgeDataDefaultTypeInternal() {}
  union {
    RoleForgeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleForgeDataDefaultTypeInternal _RoleForgeData_default_instance_;
PROTOBUF_CONSTEXPR PillPropertyData::PillPropertyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_.consumed_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PillPropertyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PillPropertyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PillPropertyDataDefaultTypeInternal() {}
  union {
    PillPropertyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PillPropertyDataDefaultTypeInternal _PillPropertyData_default_instance_;
PROTOBUF_CONSTEXPR GongFaData::GongFaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.begin_time_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.combat_power_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GongFaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GongFaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GongFaDataDefaultTypeInternal() {}
  union {
    GongFaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GongFaDataDefaultTypeInternal _GongFaData_default_instance_;
PROTOBUF_CONSTEXPR RoleGongFaData::RoleGongFaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.active_max_effect_)*/{}
  , /*decltype(_impl_._active_max_effect_cached_byte_size_)*/{0}
  , /*decltype(_impl_.gongfa_point_use_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleGongFaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleGongFaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleGongFaDataDefaultTypeInternal() {}
  union {
    RoleGongFaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleGongFaDataDefaultTypeInternal _RoleGongFaData_default_instance_;
PROTOBUF_CONSTEXPR CollectionEntrySaveData::CollectionEntrySaveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.star_)*/0
  , /*decltype(_impl_.is_activated_)*/false
  , /*decltype(_impl_.piece_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectionEntrySaveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionEntrySaveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionEntrySaveDataDefaultTypeInternal() {}
  union {
    CollectionEntrySaveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionEntrySaveDataDefaultTypeInternal _CollectionEntrySaveData_default_instance_;
PROTOBUF_CONSTEXPR CommonCollectionPieceData::CommonCollectionPieceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.piece_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommonCollectionPieceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonCollectionPieceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonCollectionPieceDataDefaultTypeInternal() {}
  union {
    CommonCollectionPieceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonCollectionPieceDataDefaultTypeInternal _CommonCollectionPieceData_default_instance_;
PROTOBUF_CONSTEXPR CollectionZoneActiveAwardData::CollectionZoneActiveAwardData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zone_type_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectionZoneActiveAwardDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionZoneActiveAwardDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionZoneActiveAwardDataDefaultTypeInternal() {}
  union {
    CollectionZoneActiveAwardData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionZoneActiveAwardDataDefaultTypeInternal _CollectionZoneActiveAwardData_default_instance_;
PROTOBUF_CONSTEXPR RoleCollectionSaveData::RoleCollectionSaveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.all_entries_)*/{}
  , /*decltype(_impl_.common_pieces_)*/{}
  , /*decltype(_impl_.draw_award_done_histories_)*/{}
  , /*decltype(_impl_._draw_award_done_histories_cached_byte_size_)*/{0}
  , /*decltype(_impl_.zone_active_awards_)*/{}
  , /*decltype(_impl_.next_reset_enhance_ticks_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleCollectionSaveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleCollectionSaveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleCollectionSaveDataDefaultTypeInternal() {}
  union {
    RoleCollectionSaveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleCollectionSaveDataDefaultTypeInternal _RoleCollectionSaveData_default_instance_;
PROTOBUF_CONSTEXPR FuZengTuple::FuZengTuple(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_)*/{}
  , /*decltype(_impl_._num_cached_byte_size_)*/{0}
  , /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FuZengTupleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FuZengTupleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FuZengTupleDefaultTypeInternal() {}
  union {
    FuZengTuple _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FuZengTupleDefaultTypeInternal _FuZengTuple_default_instance_;
PROTOBUF_CONSTEXPR FuZengData::FuZengData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.received_record_)*/{}
  , /*decltype(_impl_.max_num_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FuZengDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FuZengDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FuZengDataDefaultTypeInternal() {}
  union {
    FuZengData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FuZengDataDefaultTypeInternal _FuZengData_default_instance_;
PROTOBUF_CONSTEXPR RoleFuZengData::RoleFuZengData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleFuZengDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleFuZengDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleFuZengDataDefaultTypeInternal() {}
  union {
    RoleFuZengData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleFuZengDataDefaultTypeInternal _RoleFuZengData_default_instance_;
PROTOBUF_CONSTEXPR RoleFightModeData::RoleFightModeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_attack_ticks_)*/int64_t{0}
  , /*decltype(_impl_.last_defence_ticks_)*/int64_t{0}
  , /*decltype(_impl_.cur_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleFightModeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleFightModeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleFightModeDataDefaultTypeInternal() {}
  union {
    RoleFightModeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleFightModeDataDefaultTypeInternal _RoleFightModeData_default_instance_;
PROTOBUF_CONSTEXPR RoleNormalSettings::RoleNormalSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attack_lock_type_)*/0
  , /*decltype(_impl_.attack_unlock_type_)*/0
  , /*decltype(_impl_.show_unlock_button_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleNormalSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleNormalSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleNormalSettingsDefaultTypeInternal() {}
  union {
    RoleNormalSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleNormalSettingsDefaultTypeInternal _RoleNormalSettings_default_instance_;
PROTOBUF_CONSTEXPR RoleData::RoleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unlocked_modules_)*/{}
  , /*decltype(_impl_._unlocked_modules_cached_byte_size_)*/{0}
  , /*decltype(_impl_.pill_property_data_)*/{}
  , /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_data_)*/nullptr
  , /*decltype(_impl_.physics_data_)*/nullptr
  , /*decltype(_impl_.magic_data_)*/nullptr
  , /*decltype(_impl_.daily_counter_)*/nullptr
  , /*decltype(_impl_.model_config_)*/nullptr
  , /*decltype(_impl_.last_world_pos_)*/nullptr
  , /*decltype(_impl_.fight_mode_)*/nullptr
  , /*decltype(_impl_.normal_settings_)*/nullptr
  , /*decltype(_impl_.weekly_counter_)*/nullptr
  , /*decltype(_impl_.last_arena_world_pos_)*/nullptr
  , /*decltype(_impl_.game_stats_)*/nullptr
  , /*decltype(_impl_.last_all_arena_world_pos_)*/nullptr
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_.role_id_)*/uint64_t{0u}
  , /*decltype(_impl_.last_exp_cycle_timestamp_)*/int64_t{0}
  , /*decltype(_impl_.cultivation_dir_)*/0
  , /*decltype(_impl_.last_world_cfgid_)*/0
  , /*decltype(_impl_.next_teleport_time_)*/int64_t{0}
  , /*decltype(_impl_.combat_power_)*/int64_t{0}
  , /*decltype(_impl_.last_unlock_arena_id_)*/0
  , /*decltype(_impl_.login_count_)*/0
  , /*decltype(_impl_.create_time_)*/int64_t{0}
  , /*decltype(_impl_.qi_collector_rank_)*/0
  , /*decltype(_impl_.last_arena_world_cfgid_)*/0
  , /*decltype(_impl_.offline_time_)*/int64_t{0}
  , /*decltype(_impl_.last_all_arena_world_cfgid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleDataDefaultTypeInternal() {}
  union {
    RoleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleDataDefaultTypeInternal _RoleData_default_instance_;
PROTOBUF_CONSTEXPR SimpleAbilityData::SimpleAbilityData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.grade_)*/0
  , /*decltype(_impl_.study_grade_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleAbilityDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleAbilityDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleAbilityDataDefaultTypeInternal() {}
  union {
    SimpleAbilityData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleAbilityDataDefaultTypeInternal _SimpleAbilityData_default_instance_;
PROTOBUF_CONSTEXPR SimpleGongFaData::SimpleGongFaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.is_full_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleGongFaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleGongFaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleGongFaDataDefaultTypeInternal() {}
  union {
    SimpleGongFaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleGongFaDataDefaultTypeInternal _SimpleGongFaData_default_instance_;
PROTOBUF_CONSTEXPR RoleInfo::RoleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{}
  , /*decltype(_impl_._title_cached_byte_size_)*/{0}
  , /*decltype(_impl_.equipments_)*/{}
  , /*decltype(_impl_.unlocked_equipment_slots_)*/{}
  , /*decltype(_impl_._unlocked_equipment_slots_cached_byte_size_)*/{0}
  , /*decltype(_impl_.slotted_abilities_)*/{}
  , /*decltype(_impl_.unslotted_abilities_)*/{}
  , /*decltype(_impl_.gong_fa_entries_)*/{}
  , /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sept_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.character_model_)*/nullptr
  , /*decltype(_impl_.all_stats_data_)*/nullptr
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_.role_id_)*/uint64_t{0u}
  , /*decltype(_impl_.create_time_)*/int64_t{0}
  , /*decltype(_impl_.cultivation_main_dir_)*/0
  , /*decltype(_impl_.cultivation_main_rank_)*/0
  , /*decltype(_impl_.cultivation_second_dir_)*/0
  , /*decltype(_impl_.cultivation_second_rank_)*/0
  , /*decltype(_impl_.combat_power_)*/int64_t{0}
  , /*decltype(_impl_.sept_id_)*/uint64_t{0u}
  , /*decltype(_impl_.sept_position_)*/0
  , /*decltype(_impl_.sept_logo_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleInfoDefaultTypeInternal() {}
  union {
    RoleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleInfoDefaultTypeInternal _RoleInfo_default_instance_;
PROTOBUF_CONSTEXPR RoleInventoryData::RoleInventoryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.unlocked_equipment_slots_)*/{}
  , /*decltype(_impl_._unlocked_equipment_slots_cached_byte_size_)*/{0}
  , /*decltype(_impl_.next_item_id_)*/int64_t{0}
  , /*decltype(_impl_.hp_pill_cooldown_expire_time_)*/int64_t{0}
  , /*decltype(_impl_.mp_pill_cooldown_expire_time_)*/int64_t{0}
  , /*decltype(_impl_.inventory_space_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleInventoryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleInventoryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleInventoryDataDefaultTypeInternal() {}
  union {
    RoleInventoryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleInventoryDataDefaultTypeInternal _RoleInventoryData_default_instance_;
PROTOBUF_CONSTEXPR RoleTemporaryPackageData::RoleTemporaryPackageData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.last_extract_time_)*/int64_t{0}
  , /*decltype(_impl_.next_item_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleTemporaryPackageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleTemporaryPackageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleTemporaryPackageDataDefaultTypeInternal() {}
  union {
    RoleTemporaryPackageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleTemporaryPackageDataDefaultTypeInternal _RoleTemporaryPackageData_default_instance_;
PROTOBUF_CONSTEXPR RoleArenaExplorationStatisticalData::RoleArenaExplorationStatisticalData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleArenaExplorationStatisticalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleArenaExplorationStatisticalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleArenaExplorationStatisticalDataDefaultTypeInternal() {}
  union {
    RoleArenaExplorationStatisticalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleArenaExplorationStatisticalDataDefaultTypeInternal _RoleArenaExplorationStatisticalData_default_instance_;
PROTOBUF_CONSTEXPR QuestProgress::QuestProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.progress_)*/{}
  , /*decltype(_impl_._progress_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuestProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuestProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuestProgressDefaultTypeInternal() {}
  union {
    QuestProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuestProgressDefaultTypeInternal _QuestProgress_default_instance_;
PROTOBUF_CONSTEXPR RoleQuestData::RoleQuestData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accepted_quests_)*/{}
  , /*decltype(_impl_._accepted_quests_cached_byte_size_)*/{0}
  , /*decltype(_impl_.finished_quests_)*/{}
  , /*decltype(_impl_._finished_quests_cached_byte_size_)*/{0}
  , /*decltype(_impl_.quests_progress_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleQuestDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleQuestDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleQuestDataDefaultTypeInternal() {}
  union {
    RoleQuestData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleQuestDataDefaultTypeInternal _RoleQuestData_default_instance_;
PROTOBUF_CONSTEXPR RoleShopData::RoleShopData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.last_auto_refresh_time_)*/int64_t{0}
  , /*decltype(_impl_.today_manual_refresh_num_)*/0
  , /*decltype(_impl_.guarantee_refresh_num_)*/0
  , /*decltype(_impl_.last_reset_time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleShopDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleShopDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleShopDataDefaultTypeInternal() {}
  union {
    RoleShopData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleShopDataDefaultTypeInternal _RoleShopData_default_instance_;
PROTOBUF_CONSTEXPR RoleDeluxeShopData::RoleDeluxeShopData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.today_manual_refresh_num_item_)*/0
  , /*decltype(_impl_.today_manual_refresh_num_gold_)*/0
  , /*decltype(_impl_.last_auto_refresh_time_)*/int64_t{0}
  , /*decltype(_impl_.last_reset_time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleDeluxeShopDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleDeluxeShopDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleDeluxeShopDataDefaultTypeInternal() {}
  union {
    RoleDeluxeShopData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleDeluxeShopDataDefaultTypeInternal _RoleDeluxeShopData_default_instance_;
PROTOBUF_CONSTEXPR MailAttachment::MailAttachment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.received_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MailAttachmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MailAttachmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MailAttachmentDefaultTypeInternal() {}
  union {
    MailAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MailAttachmentDefaultTypeInternal _MailAttachment_default_instance_;
PROTOBUF_CONSTEXPR Mail::Mail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attachments_)*/{}
  , /*decltype(_impl_.equipments_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subtitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.begin_date_)*/int64_t{0}
  , /*decltype(_impl_.keep_time_)*/0
  , /*decltype(_impl_.is_read_)*/false
  , /*decltype(_impl_.is_received_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MailDefaultTypeInternal() {}
  union {
    Mail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MailDefaultTypeInternal _Mail_default_instance_;
PROTOBUF_CONSTEXPR RoleMailData::RoleMailData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mail_box_)*/{}
  , /*decltype(_impl_.system_mail_counter_)*/{}
  , /*decltype(_impl_.total_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleMailDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleMailDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleMailDataDefaultTypeInternal() {}
  union {
    RoleMailData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleMailDataDefaultTypeInternal _RoleMailData_default_instance_;
PROTOBUF_CONSTEXPR OfflineAwardSummary::OfflineAwardSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_during_)*/int64_t{0}
  , /*decltype(_impl_.add_exp_)*/int64_t{0}
  , /*decltype(_impl_.add_attr_)*/int64_t{0}
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OfflineAwardSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OfflineAwardSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OfflineAwardSummaryDefaultTypeInternal() {}
  union {
    OfflineAwardSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OfflineAwardSummaryDefaultTypeInternal _OfflineAwardSummary_default_instance_;
PROTOBUF_CONSTEXPR RoleOfflineData::RoleOfflineData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_award_summary_)*/nullptr
  , /*decltype(_impl_.last_exp_value_)*/int64_t{0}
  , /*decltype(_impl_.last_attr_value_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleOfflineDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleOfflineDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleOfflineDataDefaultTypeInternal() {}
  union {
    RoleOfflineData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleOfflineDataDefaultTypeInternal _RoleOfflineData_default_instance_;
PROTOBUF_CONSTEXPR PillElixirData::PillElixirData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_.holding_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PillElixirDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PillElixirDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PillElixirDataDefaultTypeInternal() {}
  union {
    PillElixirData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PillElixirDataDefaultTypeInternal _PillElixirData_default_instance_;
PROTOBUF_CONSTEXPR RolePillElixirData::RolePillElixirData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pill_data_)*/{}
  , /*decltype(_impl_.limit_double_)*/0
  , /*decltype(_impl_.limit_exp_)*/0
  , /*decltype(_impl_.limit_property_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RolePillElixirDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RolePillElixirDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RolePillElixirDataDefaultTypeInternal() {}
  union {
    RolePillElixirData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RolePillElixirDataDefaultTypeInternal _RolePillElixirData_default_instance_;
PROTOBUF_CONSTEXPR AbilityEffectDefData::AbilityEffectDefData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.period_)*/0
  , /*decltype(_impl_.duration_policy_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.m_)*/0
  , /*decltype(_impl_.n_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbilityEffectDefDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbilityEffectDefDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbilityEffectDefDataDefaultTypeInternal() {}
  union {
    AbilityEffectDefData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbilityEffectDefDataDefaultTypeInternal _AbilityEffectDefData_default_instance_;
PROTOBUF_CONSTEXPR AbilityData::AbilityData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.effect_defs_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.grade_)*/0
  , /*decltype(_impl_.activetime_utc_)*/int64_t{0}
  , /*decltype(_impl_.activetime_world_)*/0
  , /*decltype(_impl_.unique_id_)*/0
  , /*decltype(_impl_.study_grade_)*/0
  , /*decltype(_impl_.cooldown_)*/0
  , /*decltype(_impl_.target_num_)*/0
  , /*decltype(_impl_.target_distance_)*/0
  , /*decltype(_impl_.target_catchdistance_)*/0
  , /*decltype(_impl_.attack_count_)*/0
  , /*decltype(_impl_.phy_coefficient_)*/0
  , /*decltype(_impl_.phy_damage_)*/0
  , /*decltype(_impl_.mana_coefficient_)*/0
  , /*decltype(_impl_.mana_damage_)*/0
  , /*decltype(_impl_.item_id_)*/int64_t{0}
  , /*decltype(_impl_.item_maxdamage_)*/0
  , /*decltype(_impl_.item_cfgid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbilityDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbilityDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbilityDataDefaultTypeInternal() {}
  union {
    AbilityData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbilityDataDefaultTypeInternal _AbilityData_default_instance_;
PROTOBUF_CONSTEXPR PlayerAbilityData::PlayerAbilityData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.abilities_)*/{}
  , /*decltype(_impl_.slotted_abilites_)*/{}
  , /*decltype(_impl_.active_queue_)*/{}
  , /*decltype(_impl_._active_queue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.revert_all_skill_cooldown_)*/int64_t{0}
  , /*decltype(_impl_.is_shiled_first_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerAbilityDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerAbilityDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerAbilityDataDefaultTypeInternal() {}
  union {
    PlayerAbilityData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerAbilityDataDefaultTypeInternal _PlayerAbilityData_default_instance_;
PROTOBUF_CONSTEXPR RoleZasData::RoleZasData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zas_ability_)*/nullptr
  , /*decltype(_impl_.zas_version_)*/0
  , /*decltype(_impl_.shentong_upgrade_point_use_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleZasDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleZasDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleZasDataDefaultTypeInternal() {}
  union {
    RoleZasData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleZasDataDefaultTypeInternal _RoleZasData_default_instance_;
PROTOBUF_CONSTEXPR AbilityPKResult::AbilityPKResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instigator_)*/uint64_t{0u}
  , /*decltype(_impl_.target_)*/uint64_t{0u}
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.additional_damage_)*/0
  , /*decltype(_impl_.is_hit_)*/false
  , /*decltype(_impl_.is_critical_)*/false
  , /*decltype(_impl_.is_countered_)*/false
  , /*decltype(_impl_.is_extremedamage_)*/false
  , /*decltype(_impl_.countereddamage_)*/0
  , /*decltype(_impl_.currentattackcount_)*/0
  , /*decltype(_impl_.shield_suckdamage_)*/0
  , /*decltype(_impl_.is_countered_critical_)*/false
  , /*decltype(_impl_.countered_shield_suckdamage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbilityPKResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbilityPKResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbilityPKResultDefaultTypeInternal() {}
  union {
    AbilityPKResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbilityPKResultDefaultTypeInternal _AbilityPKResult_default_instance_;
PROTOBUF_CONSTEXPR AbilityActiveResult::AbilityActiveResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.effects_)*/{}
  , /*decltype(_impl_._effects_cached_byte_size_)*/{0}
  , /*decltype(_impl_.eid_)*/uint64_t{0u}
  , /*decltype(_impl_.ability_)*/0
  , /*decltype(_impl_.ability_unique_id_)*/0
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbilityActiveResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbilityActiveResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbilityActiveResultDefaultTypeInternal() {}
  union {
    AbilityActiveResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbilityActiveResultDefaultTypeInternal _AbilityActiveResult_default_instance_;
PROTOBUF_CONSTEXPR ShanhetuItem::ShanhetuItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShanhetuItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShanhetuItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShanhetuItemDefaultTypeInternal() {}
  union {
    ShanhetuItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShanhetuItemDefaultTypeInternal _ShanhetuItem_default_instance_;
PROTOBUF_CONSTEXPR ShanhetuRecord::ShanhetuRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.uid_)*/int64_t{0}
  , /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_.scale_id_)*/0
  , /*decltype(_impl_.use_time_)*/int64_t{0}
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShanhetuRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShanhetuRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShanhetuRecordDefaultTypeInternal() {}
  union {
    ShanhetuRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShanhetuRecordDefaultTypeInternal _ShanhetuRecord_default_instance_;
PROTOBUF_CONSTEXPR ShanhetuBlock::ShanhetuBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.event_cfg_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShanhetuBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShanhetuBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShanhetuBlockDefaultTypeInternal() {}
  union {
    ShanhetuBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShanhetuBlockDefaultTypeInternal _ShanhetuBlock_default_instance_;
PROTOBUF_CONSTEXPR ShanhetuBlockRow::ShanhetuBlockRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShanhetuBlockRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShanhetuBlockRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShanhetuBlockRowDefaultTypeInternal() {}
  union {
    ShanhetuBlockRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShanhetuBlockRowDefaultTypeInternal _ShanhetuBlockRow_default_instance_;
PROTOBUF_CONSTEXPR ShanhetuMap::ShanhetuMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_)*/{}
  , /*decltype(_impl_.record_)*/nullptr
  , /*decltype(_impl_.done_)*/false
  , /*decltype(_impl_.current_row_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShanhetuMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShanhetuMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShanhetuMapDefaultTypeInternal() {}
  union {
    ShanhetuMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShanhetuMapDefaultTypeInternal _ShanhetuMap_default_instance_;
PROTOBUF_CONSTEXPR RoleShanhetuData::RoleShanhetuData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.records_)*/{}
  , /*decltype(_impl_.current_map_)*/nullptr
  , /*decltype(_impl_.auto_skip_green_)*/false
  , /*decltype(_impl_.auto_skip_blue_)*/false
  , /*decltype(_impl_.auto_skip_perpo_)*/false
  , /*decltype(_impl_.auto_skip_gold_)*/false
  , /*decltype(_impl_.auto_skip_red_)*/false
  , /*decltype(_impl_.total_num_)*/int64_t{0}
  , /*decltype(_impl_.last_update_date_)*/int64_t{0}
  , /*decltype(_impl_.auto_select_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleShanhetuDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleShanhetuDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleShanhetuDataDefaultTypeInternal() {}
  union {
    RoleShanhetuData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleShanhetuDataDefaultTypeInternal _RoleShanhetuData_default_instance_;
PROTOBUF_CONSTEXPR RoleLeaderboardData::RoleLeaderboardData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.has_received_challange_reward_)*/{}
  , /*decltype(_impl_._has_received_challange_reward_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rank_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weapon_)*/nullptr
  , /*decltype(_impl_.ammor_)*/nullptr
  , /*decltype(_impl_.jewlery_)*/nullptr
  , /*decltype(_impl_.skill_weapon_)*/nullptr
  , /*decltype(_impl_.shanhetu_history_)*/nullptr
  , /*decltype(_impl_.shanhetu_week_)*/nullptr
  , /*decltype(_impl_.role_id_)*/int64_t{0}
  , /*decltype(_impl_.last_reset_time_)*/int64_t{0}
  , /*decltype(_impl_.blike_num_)*/0
  , /*decltype(_impl_.monster_tower_blike_num_)*/0
  , /*decltype(_impl_.fuze_rank_)*/0
  , /*decltype(_impl_.fuze_days_)*/0
  , /*decltype(_impl_.fuze_exp_)*/int64_t{0}
  , /*decltype(_impl_.fuze_leaderboard_rank_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleLeaderboardDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleLeaderboardDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleLeaderboardDataDefaultTypeInternal() {}
  union {
    RoleLeaderboardData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleLeaderboardDataDefaultTypeInternal _RoleLeaderboardData_default_instance_;
PROTOBUF_CONSTEXPR RoleMonsterTowerData::RoleMonsterTowerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.idle_during_ticks_)*/int64_t{0}
  , /*decltype(_impl_.last_floor_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleMonsterTowerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleMonsterTowerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleMonsterTowerDataDefaultTypeInternal() {}
  union {
    RoleMonsterTowerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleMonsterTowerDataDefaultTypeInternal _RoleMonsterTowerData_default_instance_;
PROTOBUF_CONSTEXPR RoleDungeonKillAllData::RoleDungeonKillAllData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.done_uid_)*/{}
  , /*decltype(_impl_._done_uid_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleDungeonKillAllDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleDungeonKillAllDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleDungeonKillAllDataDefaultTypeInternal() {}
  union {
    RoleDungeonKillAllData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleDungeonKillAllDataDefaultTypeInternal _RoleDungeonKillAllData_default_instance_;
PROTOBUF_CONSTEXPR RoleDungeonSurviveData::RoleDungeonSurviveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.done_uid_)*/{}
  , /*decltype(_impl_._done_uid_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleDungeonSurviveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleDungeonSurviveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleDungeonSurviveDataDefaultTypeInternal() {}
  union {
    RoleDungeonSurviveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleDungeonSurviveDataDefaultTypeInternal _RoleDungeonSurviveData_default_instance_;
PROTOBUF_CONSTEXPR BossInvasionRewardEntry::BossInvasionRewardEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unique_id_)*/int64_t{0}
  , /*decltype(_impl_.arena_cfg_id_)*/0
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BossInvasionRewardEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BossInvasionRewardEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BossInvasionRewardEntryDefaultTypeInternal() {}
  union {
    BossInvasionRewardEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BossInvasionRewardEntryDefaultTypeInternal _BossInvasionRewardEntry_default_instance_;
PROTOBUF_CONSTEXPR BossInvasionKillRewardData::BossInvasionKillRewardData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rewards_)*/{}
  , /*decltype(_impl_.start_ticks_)*/int64_t{0}
  , /*decltype(_impl_.drawed_unique_id_)*/int64_t{0}
  , /*decltype(_impl_.is_draw_done_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BossInvasionKillRewardDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BossInvasionKillRewardDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BossInvasionKillRewardDataDefaultTypeInternal() {}
  union {
    BossInvasionKillRewardData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BossInvasionKillRewardDataDefaultTypeInternal _BossInvasionKillRewardData_default_instance_;
PROTOBUF_CONSTEXPR BossInvasionDamageRewardData::BossInvasionDamageRewardData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rewards_)*/{}
  , /*decltype(_impl_.start_ticks_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BossInvasionDamageRewardDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BossInvasionDamageRewardDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BossInvasionDamageRewardDataDefaultTypeInternal() {}
  union {
    BossInvasionDamageRewardData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BossInvasionDamageRewardDataDefaultTypeInternal _BossInvasionDamageRewardData_default_instance_;
PROTOBUF_CONSTEXPR RoleBossInvasionData::RoleBossInvasionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.damage_reward_)*/{}
  , /*decltype(_impl_.kill_reward_)*/nullptr
  , /*decltype(_impl_.last_reset_ticks_)*/int64_t{0}
  , /*decltype(_impl_.drawed_unique_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleBossInvasionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleBossInvasionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleBossInvasionDataDefaultTypeInternal() {}
  union {
    RoleBossInvasionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleBossInvasionDataDefaultTypeInternal _RoleBossInvasionData_default_instance_;
PROTOBUF_CONSTEXPR RoleMasiveData::RoleMasiveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_vars_)*/{}
  , /*decltype(_impl_.next_self_unique_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleMasiveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleMasiveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleMasiveDataDefaultTypeInternal() {}
  union {
    RoleMasiveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleMasiveDataDefaultTypeInternal _RoleMasiveData_default_instance_;
PROTOBUF_CONSTEXPR CheckTask::CheckTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.need_num_)*/0
  , /*decltype(_impl_.point_)*/0
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_.is_submitted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckTaskDefaultTypeInternal() {}
  union {
    CheckTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckTaskDefaultTypeInternal _CheckTask_default_instance_;
PROTOBUF_CONSTEXPR RoleChecklistData::RoleChecklistData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.day_tasks_)*/{}
  , /*decltype(_impl_.week_tasks_)*/{}
  , /*decltype(_impl_.day_point_)*/0
  , /*decltype(_impl_.week_point_)*/0
  , /*decltype(_impl_.day_received_time_)*/0
  , /*decltype(_impl_.week_received_time_)*/0
  , /*decltype(_impl_.last_reset_day_time_)*/int64_t{0}
  , /*decltype(_impl_.last_reset_week_time_)*/int64_t{0}
  , /*decltype(_impl_.boss_invasion_time_)*/int64_t{0}
  , /*decltype(_impl_.degree_locked_day_)*/0
  , /*decltype(_impl_.degree_locked_week_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleChecklistDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleChecklistDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleChecklistDataDefaultTypeInternal() {}
  union {
    RoleChecklistData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleChecklistDataDefaultTypeInternal _RoleChecklistData_default_instance_;
PROTOBUF_CONSTEXPR RoleCommonItemExchangeData::RoleCommonItemExchangeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_exchange_day_)*/{}
  , /*decltype(_impl_.item_exchange_week_)*/{}
  , /*decltype(_impl_.last_reset_day_)*/int64_t{0}
  , /*decltype(_impl_.last_reset_week_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleCommonItemExchangeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleCommonItemExchangeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleCommonItemExchangeDataDefaultTypeInternal() {}
  union {
    RoleCommonItemExchangeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleCommonItemExchangeDataDefaultTypeInternal _RoleCommonItemExchangeData_default_instance_;
PROTOBUF_CONSTEXPR RoleTreasuryChestData::RoleTreasuryChestData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.today_open_times_)*/{}
  , /*decltype(_impl_._today_open_times_cached_byte_size_)*/{0}
  , /*decltype(_impl_.guarantee_count_)*/{}
  , /*decltype(_impl_._guarantee_count_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleTreasuryChestDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleTreasuryChestDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleTreasuryChestDataDefaultTypeInternal() {}
  union {
    RoleTreasuryChestData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleTreasuryChestDataDefaultTypeInternal _RoleTreasuryChestData_default_instance_;
PROTOBUF_CONSTEXPR RoleTreasuryGachaData::RoleTreasuryGachaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.today_open_times_)*/{}
  , /*decltype(_impl_._today_open_times_cached_byte_size_)*/{0}
  , /*decltype(_impl_.free_open_times_)*/{}
  , /*decltype(_impl_._free_open_times_cached_byte_size_)*/{0}
  , /*decltype(_impl_.guarantee_count_)*/{}
  , /*decltype(_impl_._guarantee_count_cached_byte_size_)*/{0}
  , /*decltype(_impl_.total_open_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleTreasuryGachaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleTreasuryGachaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleTreasuryGachaDataDefaultTypeInternal() {}
  union {
    RoleTreasuryGachaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleTreasuryGachaDataDefaultTypeInternal _RoleTreasuryGachaData_default_instance_;
PROTOBUF_CONSTEXPR TreasuryShopItem::TreasuryShopItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.bought_count_)*/0
  , /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TreasuryShopItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TreasuryShopItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TreasuryShopItemDefaultTypeInternal() {}
  union {
    TreasuryShopItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TreasuryShopItemDefaultTypeInternal _TreasuryShopItem_default_instance_;
PROTOBUF_CONSTEXPR RoleTreasuryShopData::RoleTreasuryShopData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shop_items_)*/{}
  , /*decltype(_impl_.today_refresh_time_)*/0
  , /*decltype(_impl_.shop_refresh_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleTreasuryShopDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleTreasuryShopDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleTreasuryShopDataDefaultTypeInternal() {}
  union {
    RoleTreasuryShopData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleTreasuryShopDataDefaultTypeInternal _RoleTreasuryShopData_default_instance_;
PROTOBUF_CONSTEXPR RoleTreasurySaveData::RoleTreasurySaveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.treasury_chest_data_)*/nullptr
  , /*decltype(_impl_.treasury_gacha_data_)*/nullptr
  , /*decltype(_impl_.treasury_shop_data_)*/nullptr
  , /*decltype(_impl_.last_reset_time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleTreasurySaveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleTreasurySaveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleTreasurySaveDataDefaultTypeInternal() {}
  union {
    RoleTreasurySaveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleTreasurySaveDataDefaultTypeInternal _RoleTreasurySaveData_default_instance_;
PROTOBUF_CONSTEXPR ArenaCheckListData::ArenaCheckListData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.checklist_id_)*/0
  , /*decltype(_impl_.checklist_num_)*/0
  , /*decltype(_impl_.checklist_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArenaCheckListDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArenaCheckListDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArenaCheckListDataDefaultTypeInternal() {}
  union {
    ArenaCheckListData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArenaCheckListDataDefaultTypeInternal _ArenaCheckListData_default_instance_;
PROTOBUF_CONSTEXPR ArenaCheckListRewardData::ArenaCheckListRewardData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reward_id_)*/0
  , /*decltype(_impl_.reward_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArenaCheckListRewardDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArenaCheckListRewardDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArenaCheckListRewardDataDefaultTypeInternal() {}
  union {
    ArenaCheckListRewardData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArenaCheckListRewardDataDefaultTypeInternal _ArenaCheckListRewardData_default_instance_;
PROTOBUF_CONSTEXPR RoleArenaCheckListData::RoleArenaCheckListData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arena_check_data_)*/{}
  , /*decltype(_impl_.check_reward_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleArenaCheckListDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleArenaCheckListDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleArenaCheckListDataDefaultTypeInternal() {}
  union {
    RoleArenaCheckListData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleArenaCheckListDataDefaultTypeInternal _RoleArenaCheckListData_default_instance_;
PROTOBUF_CONSTEXPR RoleSeptInviteEntry::RoleSeptInviteEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleSeptInviteEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleSeptInviteEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleSeptInviteEntryDefaultTypeInternal() {}
  union {
    RoleSeptInviteEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleSeptInviteEntryDefaultTypeInternal _RoleSeptInviteEntry_default_instance_;
PROTOBUF_CONSTEXPR SeptQuest::SeptQuest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.begin_time_)*/int64_t{0}
  , /*decltype(_impl_.quest_id_)*/0
  , /*decltype(_impl_.received_)*/false
  , /*decltype(_impl_.uid_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.money_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeptQuestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeptQuestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeptQuestDefaultTypeInternal() {}
  union {
    SeptQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeptQuestDefaultTypeInternal _SeptQuest_default_instance_;
PROTOBUF_CONSTEXPR RoleSeptQuestData::RoleSeptQuestData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quests_)*/{}
  , /*decltype(_impl_.today_manual_refresh_num_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.current_exp_)*/0
  , /*decltype(_impl_.total_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleSeptQuestDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleSeptQuestDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleSeptQuestDataDefaultTypeInternal() {}
  union {
    RoleSeptQuestData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleSeptQuestDataDefaultTypeInternal _RoleSeptQuestData_default_instance_;
PROTOBUF_CONSTEXPR RoleSeptShopData::RoleSeptShopData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchange_history_)*/{}
  , /*decltype(_impl_.last_reset_time_sept_shop_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleSeptShopDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleSeptShopDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleSeptShopDataDefaultTypeInternal() {}
  union {
    RoleSeptShopData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleSeptShopDataDefaultTypeInternal _RoleSeptShopData_default_instance_;
PROTOBUF_CONSTEXPR RoleSeptData::RoleSeptData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.daily_invite_entries_)*/{}
  , /*decltype(_impl_.sept_demon_damage_reward_received_)*/{}
  , /*decltype(_impl_._sept_demon_damage_reward_received_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sept_demon_damage_reward_finished_)*/{}
  , /*decltype(_impl_._sept_demon_damage_reward_finished_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sept_shop_data_)*/nullptr
  , /*decltype(_impl_.sept_quest_data_)*/nullptr
  , /*decltype(_impl_.next_join_ticks_)*/int64_t{0}
  , /*decltype(_impl_.sept_demon_cumulative_time_)*/0
  , /*decltype(_impl_.sept_demon_stage_reward_num_)*/0
  , /*decltype(_impl_.sept_demon_stage_reward_use_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleSeptDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleSeptDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleSeptDataDefaultTypeInternal() {}
  union {
    RoleSeptData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleSeptDataDefaultTypeInternal _RoleSeptData_default_instance_;
PROTOBUF_CONSTEXPR SeptDemonWorldData::SeptDemonWorldData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_ids_)*/{}
  , /*decltype(_impl_._player_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.cur_end_ticks_)*/int64_t{0}
  , /*decltype(_impl_.is_started_)*/false
  , /*decltype(_impl_.cur_stage_)*/0
  , /*decltype(_impl_.next_open_ticks_)*/int64_t{0}
  , /*decltype(_impl_.cur_stage_hp_)*/0
  , /*decltype(_impl_.cur_stage_maxhp_)*/0
  , /*decltype(_impl_.last_stage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeptDemonWorldDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeptDemonWorldDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeptDemonWorldDataDefaultTypeInternal() {}
  union {
    SeptDemonWorldData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeptDemonWorldDataDefaultTypeInternal _SeptDemonWorldData_default_instance_;
PROTOBUF_CONSTEXPR SimpleCounter::SimpleCounter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_)*/int64_t{0}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleCounterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleCounterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleCounterDefaultTypeInternal() {}
  union {
    SimpleCounter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleCounterDefaultTypeInternal _SimpleCounter_default_instance_;
PROTOBUF_CONSTEXPR FunctionCounter::FunctionCounter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.counters_)*/{}
  , /*decltype(_impl_.function_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FunctionCounterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionCounterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionCounterDefaultTypeInternal() {}
  union {
    FunctionCounter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionCounterDefaultTypeInternal _FunctionCounter_default_instance_;
PROTOBUF_CONSTEXPR RoleLifeCounterData::RoleLifeCounterData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.function_counter_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleLifeCounterDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleLifeCounterDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleLifeCounterDataDefaultTypeInternal() {}
  union {
    RoleLifeCounterData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleLifeCounterDataDefaultTypeInternal _RoleLifeCounterData_default_instance_;
PROTOBUF_CONSTEXPR FarmlandManagementInfo::FarmlandManagementInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plant_uid_)*/0
  , /*decltype(_impl_.target_stage_)*/0
  , /*decltype(_impl_.auto_seed_)*/false
  , /*decltype(_impl_.auto_harvest_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FarmlandManagementInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FarmlandManagementInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FarmlandManagementInfoDefaultTypeInternal() {}
  union {
    FarmlandManagementInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FarmlandManagementInfoDefaultTypeInternal _FarmlandManagementInfo_default_instance_;
PROTOBUF_CONSTEXPR FarmlandPlantData::FarmlandPlantData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plant_uid_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.rotation_)*/0
  , /*decltype(_impl_.config_id_)*/0
  , /*decltype(_impl_.shenling_)*/0
  , /*decltype(_impl_.begin_date_)*/int64_t{0}
  , /*decltype(_impl_.speed_up_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FarmlandPlantDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FarmlandPlantDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FarmlandPlantDataDefaultTypeInternal() {}
  union {
    FarmlandPlantData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FarmlandPlantDataDefaultTypeInternal _FarmlandPlantData_default_instance_;
PROTOBUF_CONSTEXPR RoleFarmlandData::RoleFarmlandData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_plants_)*/{}
  , /*decltype(_impl_.managment_plan_)*/{}
  , /*decltype(_impl_.unlock_blocks_)*/{}
  , /*decltype(_impl_.ripe_items_)*/{}
  , /*decltype(_impl_.farmer_grade_)*/0
  , /*decltype(_impl_.farmer_friendship_exp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleFarmlandDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleFarmlandDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleFarmlandDataDefaultTypeInternal() {}
  union {
    RoleFarmlandData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleFarmlandDataDefaultTypeInternal _RoleFarmlandData_default_instance_;
PROTOBUF_CONSTEXPR RoleAvatarData::RoleAvatarData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.temp_package_)*/{}
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.current_world_index_)*/0
  , /*decltype(_impl_.begin_time_)*/int64_t{0}
  , /*decltype(_impl_.last_draw_time_)*/int64_t{0}
  , /*decltype(_impl_.last_wrold_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleAvatarDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleAvatarDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleAvatarDataDefaultTypeInternal() {}
  union {
    RoleAvatarData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleAvatarDataDefaultTypeInternal _RoleAvatarData_default_instance_;
PROTOBUF_CONSTEXPR BiographyRoleLog::BiographyRoleLog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zone_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dao_year_)*/0
  , /*decltype(_impl_.log_type_)*/0
  , /*decltype(_impl_.poem_seed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiographyRoleLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiographyRoleLogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiographyRoleLogDefaultTypeInternal() {}
  union {
    BiographyRoleLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiographyRoleLogDefaultTypeInternal _BiographyRoleLog_default_instance_;
PROTOBUF_CONSTEXPR RoleBiographyData::RoleBiographyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.received_cfg_ids_)*/{}
  , /*decltype(_impl_._received_cfg_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.received_event_cfg_ids_)*/{}
  , /*decltype(_impl_._received_event_cfg_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.role_logs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleBiographyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleBiographyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleBiographyDataDefaultTypeInternal() {}
  union {
    RoleBiographyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleBiographyDataDefaultTypeInternal _RoleBiographyData_default_instance_;
PROTOBUF_CONSTEXPR SimpleRoleInfo::SimpleRoleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sept_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_config_)*/nullptr
  , /*decltype(_impl_.role_id_)*/uint64_t{0u}
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.role_cultivation_direction_)*/0
  , /*decltype(_impl_.last_online_timespan_)*/int64_t{0}
  , /*decltype(_impl_.server_id_)*/int64_t{0}
  , /*decltype(_impl_.sept_position_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleRoleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleRoleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleRoleInfoDefaultTypeInternal() {}
  union {
    SimpleRoleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleRoleInfoDefaultTypeInternal _SimpleRoleInfo_default_instance_;
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_info_)*/nullptr
  , /*decltype(_impl_.role_id_)*/uint64_t{0u}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
PROTOBUF_CONSTEXPR PrivateChatRecord::PrivateChatRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chat_record_)*/{}
  , /*decltype(_impl_.role_id_)*/uint64_t{0u}
  , /*decltype(_impl_.unread_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrivateChatRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateChatRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateChatRecordDefaultTypeInternal() {}
  union {
    PrivateChatRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateChatRecordDefaultTypeInternal _PrivateChatRecord_default_instance_;
PROTOBUF_CONSTEXPR RolePrivateChatRecord::RolePrivateChatRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.role_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RolePrivateChatRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RolePrivateChatRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RolePrivateChatRecordDefaultTypeInternal() {}
  union {
    RolePrivateChatRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RolePrivateChatRecordDefaultTypeInternal _RolePrivateChatRecord_default_instance_;
PROTOBUF_CONSTEXPR ChatData::ChatData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.colony_servers_)*/{}
  , /*decltype(_impl_.quad_servers_)*/{}
  , /*decltype(_impl_.local_server_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatDataDefaultTypeInternal() {}
  union {
    ChatData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatDataDefaultTypeInternal _ChatData_default_instance_;
PROTOBUF_CONSTEXPR FriendListItem::FriendListItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_id_)*/int64_t{0}
  , /*decltype(_impl_.relationship_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendListItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendListItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendListItemDefaultTypeInternal() {}
  union {
    FriendListItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendListItemDefaultTypeInternal _FriendListItem_default_instance_;
PROTOBUF_CONSTEXPR RoleFriendData::RoleFriendData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.friend_list_)*/{}
  , /*decltype(_impl_.request_list_)*/{}
  , /*decltype(_impl_._request_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.block_list_)*/{}
  , /*decltype(_impl_._block_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.my_request_)*/{}
  , /*decltype(_impl_._my_request_cached_byte_size_)*/{0}
  , /*decltype(_impl_.history_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleFriendDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleFriendDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleFriendDataDefaultTypeInternal() {}
  union {
    RoleFriendData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleFriendDataDefaultTypeInternal _RoleFriendData_default_instance_;
PROTOBUF_CONSTEXPR RoleOfflineFunctionData::RoleOfflineFunctionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mails_)*/{}
  , /*decltype(_impl_.private_chat_data_)*/{}
  , /*decltype(_impl_.role_logs_)*/{}
  , /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.friend_data_)*/nullptr
  , /*decltype(_impl_.leaderboard_data_)*/nullptr
  , /*decltype(_impl_.role_id_)*/int64_t{0}
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.degree_)*/0
  , /*decltype(_impl_.total_exp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleOfflineFunctionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleOfflineFunctionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleOfflineFunctionDataDefaultTypeInternal() {}
  union {
    RoleOfflineFunctionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleOfflineFunctionDataDefaultTypeInternal _RoleOfflineFunctionData_default_instance_;
PROTOBUF_CONSTEXPR ServerCounterData::ServerCounterData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.function_counter_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerCounterDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerCounterDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerCounterDataDefaultTypeInternal() {}
  union {
    ServerCounterData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerCounterDataDefaultTypeInternal _ServerCounterData_default_instance_;
PROTOBUF_CONSTEXPR SocialFunctionCommonSaveData::SocialFunctionCommonSaveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offline_role_datas_)*/{}
  , /*decltype(_impl_.role_list_)*/{}
  , /*decltype(_impl_.server_counter_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SocialFunctionCommonSaveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocialFunctionCommonSaveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocialFunctionCommonSaveDataDefaultTypeInternal() {}
  union {
    SocialFunctionCommonSaveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocialFunctionCommonSaveDataDefaultTypeInternal _SocialFunctionCommonSaveData_default_instance_;
PROTOBUF_CONSTEXPR RoleSaveData::RoleSaveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_data_)*/nullptr
  , /*decltype(_impl_.all_stats_data_)*/nullptr
  , /*decltype(_impl_.quest_)*/nullptr
  , /*decltype(_impl_.shop_)*/nullptr
  , /*decltype(_impl_.temporary_package_)*/nullptr
  , /*decltype(_impl_.inventory_)*/nullptr
  , /*decltype(_impl_.offline_data_)*/nullptr
  , /*decltype(_impl_.alchemy_data_)*/nullptr
  , /*decltype(_impl_.deluxe_shop_)*/nullptr
  , /*decltype(_impl_.leaderboard_data_)*/nullptr
  , /*decltype(_impl_.mail_data_)*/nullptr
  , /*decltype(_impl_.forge_data_)*/nullptr
  , /*decltype(_impl_.pillelixir_data_)*/nullptr
  , /*decltype(_impl_.common_cultivation_data_)*/nullptr
  , /*decltype(_impl_.zas_data_)*/nullptr
  , /*decltype(_impl_.monster_tower_data_)*/nullptr
  , /*decltype(_impl_.shanhetu_data_)*/nullptr
  , /*decltype(_impl_.boss_invasion_data_)*/nullptr
  , /*decltype(_impl_.massive_data_)*/nullptr
  , /*decltype(_impl_.checklist_data_)*/nullptr
  , /*decltype(_impl_.common_item_exchange_data_)*/nullptr
  , /*decltype(_impl_.sept_data_)*/nullptr
  , /*decltype(_impl_.treasury_chest_data_)*/nullptr
  , /*decltype(_impl_.gongfa_data_)*/nullptr
  , /*decltype(_impl_.fuzeng_data_)*/nullptr
  , /*decltype(_impl_.collection_data_)*/nullptr
  , /*decltype(_impl_.life_counter_data_)*/nullptr
  , /*decltype(_impl_.appearance_data_)*/nullptr
  , /*decltype(_impl_.arena_check_list_data_)*/nullptr
  , /*decltype(_impl_.dungeon_kill_all_data_)*/nullptr
  , /*decltype(_impl_.farmland_data_)*/nullptr
  , /*decltype(_impl_.dungeon_survive_data_)*/nullptr
  , /*decltype(_impl_.friend_data_)*/nullptr
  , /*decltype(_impl_.avatar_data_)*/nullptr
  , /*decltype(_impl_.arena_statistical_data_)*/nullptr
  , /*decltype(_impl_.biography_data_)*/nullptr
  , /*decltype(_impl_.vip_shop_data_)*/nullptr
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.mp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleSaveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleSaveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleSaveDataDefaultTypeInternal() {}
  union {
    RoleSaveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleSaveDataDefaultTypeInternal _RoleSaveData_default_instance_;
PROTOBUF_CONSTEXPR BattleHistoryRecord::BattleHistoryRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.world_seconds_)*/0
  , /*decltype(_impl_.source_entity_id_)*/uint64_t{0u}
  , /*decltype(_impl_.target_entity_id_)*/uint64_t{0u}
  , /*decltype(_impl_.message_type_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BattleHistoryRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BattleHistoryRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BattleHistoryRecordDefaultTypeInternal() {}
  union {
    BattleHistoryRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BattleHistoryRecordDefaultTypeInternal _BattleHistoryRecord_default_instance_;
PROTOBUF_CONSTEXPR BattleRoleInfo::BattleRoleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_config_)*/nullptr
  , /*decltype(_impl_.role_id_)*/int64_t{0}
  , /*decltype(_impl_.zone_id_)*/0
  , /*decltype(_impl_.score_delta_)*/0
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.rank_delta_)*/0
  , /*decltype(_impl_.combat_power_)*/int64_t{0}
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.cultivation_main_dir_)*/0
  , /*decltype(_impl_.cultivation_main_rank_)*/0
  , /*decltype(_impl_.npc_cfg_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BattleRoleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BattleRoleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BattleRoleInfoDefaultTypeInternal() {}
  union {
    BattleRoleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BattleRoleInfoDefaultTypeInternal _BattleRoleInfo_default_instance_;
PROTOBUF_CONSTEXPR BattleInfo::BattleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attacker_)*/nullptr
  , /*decltype(_impl_.defender_)*/nullptr
  , /*decltype(_impl_.world_id_)*/int64_t{0}
  , /*decltype(_impl_.attacker_win_)*/false
  , /*decltype(_impl_.solo_type_)*/0
  , /*decltype(_impl_.begin_ticks_)*/int64_t{0}
  , /*decltype(_impl_.end_ticks_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BattleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BattleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BattleInfoDefaultTypeInternal() {}
  union {
    BattleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BattleInfoDefaultTypeInternal _BattleInfo_default_instance_;
PROTOBUF_CONSTEXPR BattleHistory::BattleHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.records_)*/{}
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BattleHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BattleHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BattleHistoryDefaultTypeInternal() {}
  union {
    BattleHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BattleHistoryDefaultTypeInternal _BattleHistory_default_instance_;
PROTOBUF_CONSTEXPR RoleBattleInfo::RoleBattleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.can_revenge_)*/false
  , /*decltype(_impl_.round_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleBattleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleBattleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleBattleInfoDefaultTypeInternal() {}
  union {
    RoleBattleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleBattleInfoDefaultTypeInternal _RoleBattleInfo_default_instance_;
PROTOBUF_CONSTEXPR RoleBattleHistorySaveData::RoleBattleHistorySaveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.histories_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleBattleHistorySaveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleBattleHistorySaveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleBattleHistorySaveDataDefaultTypeInternal() {}
  union {
    RoleBattleHistorySaveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleBattleHistorySaveDataDefaultTypeInternal _RoleBattleHistorySaveData_default_instance_;
PROTOBUF_CONSTEXPR CompressedData::CompressedData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compressed_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.original_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompressedDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompressedDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompressedDataDefaultTypeInternal() {}
  union {
    CompressedData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompressedDataDefaultTypeInternal _CompressedData_default_instance_;
PROTOBUF_CONSTEXPR DoBreathingExerciseResult::DoBreathingExerciseResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ok_)*/false
  , /*decltype(_impl_.perfect_)*/false
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_.rate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DoBreathingExerciseResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoBreathingExerciseResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoBreathingExerciseResultDefaultTypeInternal() {}
  union {
    DoBreathingExerciseResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoBreathingExerciseResultDefaultTypeInternal _DoBreathingExerciseResult_default_instance_;
PROTOBUF_CONSTEXPR SystemNoticeParams::SystemNoticeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.s1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.n1_)*/int64_t{0}
  , /*decltype(_impl_.n2_)*/int64_t{0}
  , /*decltype(_impl_.n3_)*/int64_t{0}
  , /*decltype(_impl_.n4_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemNoticeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemNoticeParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemNoticeParamsDefaultTypeInternal() {}
  union {
    SystemNoticeParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemNoticeParamsDefaultTypeInternal _SystemNoticeParams_default_instance_;
PROTOBUF_CONSTEXPR DropItem::DropItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_.item_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropItemDefaultTypeInternal() {}
  union {
    DropItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropItemDefaultTypeInternal _DropItem_default_instance_;
PROTOBUF_CONSTEXPR BiographyEventLeaderboardItem::BiographyEventLeaderboardItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_n1_)*/{}
  , /*decltype(_impl_._params_n1_cached_byte_size_)*/{0}
  , /*decltype(_impl_.params_d1_)*/{}
  , /*decltype(_impl_._params_d1_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/int64_t{0}
  , /*decltype(_impl_.param_n1_)*/int64_t{0}
  , /*decltype(_impl_.param_d1_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiographyEventLeaderboardItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiographyEventLeaderboardItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiographyEventLeaderboardItemDefaultTypeInternal() {}
  union {
    BiographyEventLeaderboardItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiographyEventLeaderboardItemDefaultTypeInternal _BiographyEventLeaderboardItem_default_instance_;
PROTOBUF_CONSTEXPR BiographyEventLeaderboardList::BiographyEventLeaderboardList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_data_)*/{}
  , /*decltype(_impl_.begin_date_)*/int64_t{0}
  , /*decltype(_impl_.cfg_id_)*/0
  , /*decltype(_impl_.finished_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiographyEventLeaderboardListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiographyEventLeaderboardListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiographyEventLeaderboardListDefaultTypeInternal() {}
  union {
    BiographyEventLeaderboardList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiographyEventLeaderboardListDefaultTypeInternal _BiographyEventLeaderboardList_default_instance_;
PROTOBUF_CONSTEXPR LeaderboardListItem::LeaderboardListItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_id_)*/int64_t{0}
  , /*decltype(_impl_.property_num_)*/int64_t{0}
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.d1_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaderboardListItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaderboardListItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaderboardListItemDefaultTypeInternal() {}
  union {
    LeaderboardListItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaderboardListItemDefaultTypeInternal _LeaderboardListItem_default_instance_;
PROTOBUF_CONSTEXPR SeptDataOnLeaderboard::SeptDataOnLeaderboard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sept_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sept_id_)*/int64_t{0}
  , /*decltype(_impl_.property_num_)*/int64_t{0}
  , /*decltype(_impl_.logo_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeptDataOnLeaderboardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeptDataOnLeaderboardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeptDataOnLeaderboardDefaultTypeInternal() {}
  union {
    SeptDataOnLeaderboard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeptDataOnLeaderboardDefaultTypeInternal _SeptDataOnLeaderboard_default_instance_;
PROTOBUF_CONSTEXPR LeaderboardList::LeaderboardList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_data_)*/{}
  , /*decltype(_impl_.type_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaderboardListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaderboardListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaderboardListDefaultTypeInternal() {}
  union {
    LeaderboardList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaderboardListDefaultTypeInternal _LeaderboardList_default_instance_;
PROTOBUF_CONSTEXPR LeaderboardSaveData::LeaderboardSaveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lists_data_)*/{}
  , /*decltype(_impl_.sept_list_)*/{}
  , /*decltype(_impl_.monster_tower_challange_)*/{}
  , /*decltype(_impl_.biography_lists_)*/{}
  , /*decltype(_impl_.fuze_mail_list_)*/{}
  , /*decltype(_impl_._fuze_mail_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.last_reset_week_time_)*/int64_t{0}
  , /*decltype(_impl_.last_reset_day_time_)*/int64_t{0}
  , /*decltype(_impl_.fuze_exp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaderboardSaveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaderboardSaveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaderboardSaveDataDefaultTypeInternal() {}
  union {
    LeaderboardSaveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaderboardSaveDataDefaultTypeInternal _LeaderboardSaveData_default_instance_;
PROTOBUF_CONSTEXPR SeptDemonDamageHistoryEntry::SeptDemonDamageHistoryEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_model_)*/nullptr
  , /*decltype(_impl_.role_id_)*/int64_t{0}
  , /*decltype(_impl_.total_damage_)*/0
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeptDemonDamageHistoryEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeptDemonDamageHistoryEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeptDemonDamageHistoryEntryDefaultTypeInternal() {}
  union {
    SeptDemonDamageHistoryEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeptDemonDamageHistoryEntryDefaultTypeInternal _SeptDemonDamageHistoryEntry_default_instance_;
PROTOBUF_CONSTEXPR SeptDemonDamageHistoryData::SeptDemonDamageHistoryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.all_entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeptDemonDamageHistoryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeptDemonDamageHistoryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeptDemonDamageHistoryDataDefaultTypeInternal() {}
  union {
    SeptDemonDamageHistoryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeptDemonDamageHistoryDataDefaultTypeInternal _SeptDemonDamageHistoryData_default_instance_;
PROTOBUF_CONSTEXPR SelfSeptInfo::SelfSeptInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sept_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sept_id_)*/int64_t{0}
  , /*decltype(_impl_.next_join_ticks_)*/int64_t{0}
  , /*decltype(_impl_.sept_position_)*/0
  , /*decltype(_impl_.land_fighting_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelfSeptInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelfSeptInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelfSeptInfoDefaultTypeInternal() {}
  union {
    SelfSeptInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelfSeptInfoDefaultTypeInternal _SelfSeptInfo_default_instance_;
PROTOBUF_CONSTEXPR CreatePlayerParams::CreatePlayerParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.physics_rank_data_)*/nullptr
  , /*decltype(_impl_.magic_rank_data_)*/nullptr
  , /*decltype(_impl_.model_config_)*/nullptr
  , /*decltype(_impl_.ability_data_)*/nullptr
  , /*decltype(_impl_.normal_settings_)*/nullptr
  , /*decltype(_impl_.self_sept_info_)*/nullptr
  , /*decltype(_impl_.all_stats_data_)*/nullptr
  , /*decltype(_impl_.role_id_)*/int64_t{0}
  , /*decltype(_impl_.fight_mode_)*/0
  , /*decltype(_impl_.is_dummy_)*/false
  , /*decltype(_impl_.combat_power_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreatePlayerParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatePlayerParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatePlayerParamsDefaultTypeInternal() {}
  union {
    CreatePlayerParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatePlayerParamsDefaultTypeInternal _CreatePlayerParams_default_instance_;
PROTOBUF_CONSTEXPR WorldRuntimeData::WorldRuntimeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.world_id_)*/uint64_t{0u}
  , /*decltype(_impl_.world_seconds_)*/0
  , /*decltype(_impl_.time_dilation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorldRuntimeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldRuntimeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldRuntimeDataDefaultTypeInternal() {}
  union {
    WorldRuntimeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldRuntimeDataDefaultTypeInternal _WorldRuntimeData_default_instance_;
PROTOBUF_CONSTEXPR NotifyGiftPackageResult::NotifyGiftPackageResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.config_id_)*/{}
  , /*decltype(_impl_._config_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.gift_item_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotifyGiftPackageResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyGiftPackageResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyGiftPackageResultDefaultTypeInternal() {}
  union {
    NotifyGiftPackageResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyGiftPackageResultDefaultTypeInternal _NotifyGiftPackageResult_default_instance_;
PROTOBUF_CONSTEXPR NotifyUsePillProperty::NotifyUsePillProperty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.property_type_)*/0
  , /*decltype(_impl_.property_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotifyUsePillPropertyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyUsePillPropertyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyUsePillPropertyDefaultTypeInternal() {}
  union {
    NotifyUsePillProperty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyUsePillPropertyDefaultTypeInternal _NotifyUsePillProperty_default_instance_;
PROTOBUF_CONSTEXPR EntityCultivationDirData::EntityCultivationDirData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.layer_)*/0
  , /*decltype(_impl_.stage_)*/0
  , /*decltype(_impl_.degree_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntityCultivationDirDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityCultivationDirDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityCultivationDirDataDefaultTypeInternal() {}
  union {
    EntityCultivationDirData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityCultivationDirDataDefaultTypeInternal _EntityCultivationDirData_default_instance_;
PROTOBUF_CONSTEXPR EntityCultivationData::EntityCultivationData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.major_)*/nullptr
  , /*decltype(_impl_.minor_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntityCultivationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityCultivationDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityCultivationDataDefaultTypeInternal() {}
  union {
    EntityCultivationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityCultivationDataDefaultTypeInternal _EntityCultivationData_default_instance_;
PROTOBUF_CONSTEXPR SwordPkTopListEntry::SwordPkTopListEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_model_)*/nullptr
  , /*decltype(_impl_.role_id_)*/int64_t{0}
  , /*decltype(_impl_.score_update_ticks_)*/int64_t{0}
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.combat_power_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwordPkTopListEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwordPkTopListEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwordPkTopListEntryDefaultTypeInternal() {}
  union {
    SwordPkTopListEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwordPkTopListEntryDefaultTypeInternal _SwordPkTopListEntry_default_instance_;
PROTOBUF_CONSTEXPR SwordPkGlobalSaveData::SwordPkGlobalSaveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.top_list_)*/{}
  , /*decltype(_impl_.begin_local_ticks_)*/int64_t{0}
  , /*decltype(_impl_.round_num_)*/0
  , /*decltype(_impl_.is_over_)*/false
  , /*decltype(_impl_.end_local_ticks_)*/int64_t{0}
  , /*decltype(_impl_.next_daily_reward_local_ticks_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwordPkGlobalSaveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwordPkGlobalSaveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwordPkGlobalSaveDataDefaultTypeInternal() {}
  union {
    SwordPkGlobalSaveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwordPkGlobalSaveDataDefaultTypeInternal _SwordPkGlobalSaveData_default_instance_;
}  // namespace idlepb
static ::_pb::Metadata file_level_metadata_common_2eproto[165];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2eproto[12];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const uint32_t TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::Int64Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::Int64Data, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::Vector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::Vector2, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Vector2, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::Vector3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Vector3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Vector3, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::Color, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Color, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Color, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Color, _impl_.a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::Int64Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::Int64Pair, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Int64Pair, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::StringKeyInt32ValueEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::StringKeyInt32ValueEntry, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::idlepb::StringKeyInt32ValueEntry, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::MapValueInt32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::MapValueInt32, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::idlepb::MapValueInt32, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::StringInt64Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::StringInt64Pair, _impl_.str_),
  PROTOBUF_FIELD_OFFSET(::idlepb::StringInt64Pair, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _impl_.period_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _impl_.duration_policy_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _impl_.starttime_world_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _impl_.starttime_utc_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _impl_.m_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectData, _impl_.n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::GameStatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::GameStatData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::GameStatData, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::GameStatsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::GameStatsData, _impl_.stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::GameStatsModuleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::GameStatsModuleData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::GameStatsModuleData, _impl_.stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::GameStatsAllModuleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::GameStatsAllModuleData, _impl_.all_module_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.health_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.max_health_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.mana_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.max_mana_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.mind_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.strength_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.intellect_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.agility_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.move_speed_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.phy_att_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.phy_def_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.mag_att_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.mag_def_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.phy_dodge_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.mag_dodge_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.phy_hit_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.mag_hit_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.crit_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.crit_def_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.hp_recover_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.mp_recover_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.crit_coef_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.crit_block_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.crit_additional_damage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.arena_money_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.mag_break_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.phy_break_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.mag_block_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.phy_block_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.fen_qi_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.tuna_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.tuna_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.medicine_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.medicine_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.baseqi_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.shen_tong_damage_to_player_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.shen_tong_damage_to_player_reduce_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.fa_bao_damage_to_player_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.fa_bao_damage_to_player_reduce_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.phy_damage_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.mag_damage_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.phy_damage_reduce_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.mag_damage_reduce_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.attack_monster_damage_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.take_monster_damage_reduce_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_hp_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_mp_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_phy_att_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_mag_att_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_phy_def_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_mag_def_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_phy_hit_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_mag_hit_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_phy_dodge_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_mag_dodge_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_crit_add_percent_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAttribute, _impl_.base_crit_def_add_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RankData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RankData, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RankData, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RankData, _impl_.layer_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RankData, _impl_.stage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RankData, _impl_.degree_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RankData, _impl_.breakthrough_type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RankData, _impl_.lose_add_probability_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RankData, _impl_.lose_recover_timestamp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RankData, _impl_.stage_add_att_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::BreathingReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::BreathingReward, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BreathingReward, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BreathingReward, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BreathingReward, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BreathingReward, _impl_.received_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CommonCultivationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CommonCultivationData, _impl_.breathing_rewards_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CommonCultivationData, _impl_.merge_breathing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CultivationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CultivationData, _impl_.rank_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDailyCounterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDailyCounterEntry, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDailyCounterEntry, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDailyCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDailyCounter, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDailyCounter, _impl_.last_reset_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleWeeklyCounterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleWeeklyCounterEntry, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleWeeklyCounterEntry, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleWeeklyCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleWeeklyCounter, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleWeeklyCounter, _impl_.last_reset_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CurrencyEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CurrencyEntry, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CurrencyEntry, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CurrencyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CurrencyData, _impl_.currencies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipPerkEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipPerkEntry, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipPerkEntry, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipPerkEntry, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentAttributes, _impl_.cool_down_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentAttributes, _impl_.target_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentAttributes, _impl_.attack_count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentAttributes, _impl_.phy_coefficient_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentAttributes, _impl_.phy_damage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentAttributes, _impl_.mag_coefficient_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentAttributes, _impl_.mag_damage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentAttributes, _impl_.max_damage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentAttributes, _impl_.effects_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentAttributes, _impl_.shield_effects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentData, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentData, _impl_.reinforce_attributes_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentData, _impl_.qiwen_attributes_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SkillEquipmentData, _impl_.jinglian_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntry, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntry, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntry, _impl_.star_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntry, _impl_.is_activated_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntry, _impl_.piece_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntry, _impl_.life_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntry, _impl_.combat_power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.slot_index_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.combat_power_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.maker_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.maker_roleid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.perks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.skill_equipment_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.collection_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.reinforce_level_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.refine_level_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_a_level_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_b_level_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_c_level_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_extra_effect_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_moneycast_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_current_exp_a_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_current_exp_b_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_current_exp_c_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_total_exp_a_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_total_exp_b_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_total_exp_c_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.base_stats_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.reinforce_stats_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_stats_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.refine_stats_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.perk_stats_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EquipmentData, _impl_.qiwen_resonance_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ItemData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ItemData, _impl_.cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ItemData, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ItemData, _impl_.locked_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ItemData, _impl_.equipment_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleItemData, _impl_.cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleItemData, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::TemporaryPackageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::TemporaryPackageItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::TemporaryPackageItem, _impl_.cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::TemporaryPackageItem, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaExplorationStatisticalItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaExplorationStatisticalItem, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaExplorationStatisticalItem, _impl_.mapname_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaExplorationStatisticalItem, _impl_.killnum_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaExplorationStatisticalItem, _impl_.deathnum_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaExplorationStatisticalItem, _impl_.itemnum_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaExplorationStatisticalItem, _impl_.moneynum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItemBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItemBase, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItemBase, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItemBase, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItemBase, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItemBase, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItemBase, _impl_.bought_count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItemBase, _impl_.cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItemBase, _impl_.must_buy_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItemBase, _impl_.discount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItem, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItem, _impl_.cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItem, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItem, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItem, _impl_.is_sold_out_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShopItem, _impl_.item_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::DeluxeShopItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::DeluxeShopItem, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DeluxeShopItem, _impl_.cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DeluxeShopItem, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DeluxeShopItem, _impl_.sellcount_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DeluxeShopItem, _impl_.discount_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DeluxeShopItem, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DeluxeShopItem, _impl_.is_sold_out_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DeluxeShopItem, _impl_.item_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DeluxeShopItem, _impl_.must_buy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleVipShopData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleVipShopData, _impl_.shop_items_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleVipShopData, _impl_.last_day_refresh_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleVipShopData, _impl_.last_week_refresh_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CharacterModelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CharacterModelConfig, _impl_.skeleton_type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CharacterModelConfig, _impl_.model_slots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAppearanceShopData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAppearanceShopData, _impl_.goods1_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAppearanceShopData, _impl_.last_auto_refresh_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceCollection, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceCollection, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AppearanceCollection, _impl_.begin_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAppearanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAppearanceData, _impl_.last_change_skeleton_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAppearanceData, _impl_.collection_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAppearanceData, _impl_.current_model_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAppearanceData, _impl_.shop_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyPackageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyPackageItem, _impl_.cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyPackageItem, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.recipe_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.recipe_degree_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.material_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.material_quality_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.target_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.cur_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.next_done_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.last_produce_item_cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.last_produce_item_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.total_start_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.total_done_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.add_exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.cur_successed_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyMakeData, _impl_.cur_failed_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyRecipeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyRecipeData, _impl_.recipe_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyRecipeData, _impl_.big_chance_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AlchemyRecipeData, _impl_.small_chance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAlchemyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAlchemyData, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAlchemyData, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAlchemyData, _impl_.cur_make_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAlchemyData, _impl_.total_refine_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAlchemyData, _impl_.produce_quality_stats_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAlchemyData, _impl_.recipes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgePackageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgePackageItem, _impl_.cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgePackageItem, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.recipe_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.recipe_degree_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.material_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.material_quality_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.target_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.cur_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.next_done_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.last_produce_item_cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.last_produce_item_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.total_start_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.total_done_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.add_exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.cur_successed_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.cur_failed_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.ext_material_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.auto_sell_poor_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeMakeData, _impl_.auto_sell_middle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeRecipeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeRecipeData, _impl_.recipe_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeRecipeData, _impl_.big_chance_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ForgeRecipeData, _impl_.small_chance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::LostEquipmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::LostEquipmentData, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LostEquipmentData, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LostEquipmentData, _impl_.lost_date_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LostEquipmentData, _impl_.item_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleForgeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleForgeData, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleForgeData, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleForgeData, _impl_.cur_make_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleForgeData, _impl_.total_refine_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleForgeData, _impl_.produce_equip_quality_stats_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleForgeData, _impl_.produce_skillequip_quality_stats_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleForgeData, _impl_.recipes_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleForgeData, _impl_.lost_equipment_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleForgeData, _impl_.destroy_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PillPropertyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PillPropertyData, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PillPropertyData, _impl_.consumed_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::GongFaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::GongFaData, _impl_.cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::GongFaData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::idlepb::GongFaData, _impl_.begin_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::GongFaData, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::idlepb::GongFaData, _impl_.combat_power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleGongFaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleGongFaData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleGongFaData, _impl_.active_max_effect_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleGongFaData, _impl_.gongfa_point_use_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntrySaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntrySaveData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntrySaveData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntrySaveData, _impl_.star_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntrySaveData, _impl_.is_activated_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionEntrySaveData, _impl_.piece_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CommonCollectionPieceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CommonCollectionPieceData, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CommonCollectionPieceData, _impl_.piece_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionZoneActiveAwardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionZoneActiveAwardData, _impl_.zone_type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CollectionZoneActiveAwardData, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleCollectionSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleCollectionSaveData, _impl_.all_entries_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleCollectionSaveData, _impl_.common_pieces_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleCollectionSaveData, _impl_.draw_award_done_histories_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleCollectionSaveData, _impl_.zone_active_awards_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleCollectionSaveData, _impl_.next_reset_enhance_ticks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZengTuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZengTuple, _impl_.cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZengTuple, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZengData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZengData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZengData, _impl_.received_record_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FuZengData, _impl_.max_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFuZengData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFuZengData, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFightModeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFightModeData, _impl_.cur_mode_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFightModeData, _impl_.last_attack_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFightModeData, _impl_.last_defence_ticks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleNormalSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleNormalSettings, _impl_.attack_lock_type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleNormalSettings, _impl_.attack_unlock_type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleNormalSettings, _impl_.show_unlock_button_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.role_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.currency_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.physics_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.magic_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.cultivation_dir_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.last_exp_cycle_timestamp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.daily_counter_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.model_config_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.last_world_cfgid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.last_world_pos_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.next_teleport_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.last_unlock_arena_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.combat_power_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.login_count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.unlocked_modules_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.create_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.pill_property_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.fight_mode_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.qi_collector_rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.normal_settings_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.offline_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.weekly_counter_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.last_arena_world_cfgid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.last_arena_world_pos_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.game_stats_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.last_all_arena_world_cfgid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleData, _impl_.last_all_arena_world_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleAbilityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleAbilityData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleAbilityData, _impl_.grade_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleAbilityData, _impl_.study_grade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleGongFaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleGongFaData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleGongFaData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleGongFaData, _impl_.is_full_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.role_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.create_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.cultivation_main_dir_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.cultivation_main_rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.cultivation_second_dir_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.cultivation_second_rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.character_model_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.combat_power_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.equipments_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.unlocked_equipment_slots_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.sept_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.sept_position_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.sept_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.sept_logo_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.all_stats_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.slotted_abilities_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.unslotted_abilities_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInfo, _impl_.gong_fa_entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInventoryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInventoryData, _impl_.next_item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInventoryData, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInventoryData, _impl_.hp_pill_cooldown_expire_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInventoryData, _impl_.mp_pill_cooldown_expire_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInventoryData, _impl_.unlocked_equipment_slots_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleInventoryData, _impl_.inventory_space_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTemporaryPackageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTemporaryPackageData, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTemporaryPackageData, _impl_.last_extract_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTemporaryPackageData, _impl_.next_item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleArenaExplorationStatisticalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleArenaExplorationStatisticalData, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::QuestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::QuestProgress, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::QuestProgress, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::idlepb::QuestProgress, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleQuestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleQuestData, _impl_.accepted_quests_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleQuestData, _impl_.finished_quests_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleQuestData, _impl_.quests_progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShopData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShopData, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShopData, _impl_.today_manual_refresh_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShopData, _impl_.last_auto_refresh_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShopData, _impl_.last_reset_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShopData, _impl_.guarantee_refresh_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDeluxeShopData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDeluxeShopData, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDeluxeShopData, _impl_.today_manual_refresh_num_item_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDeluxeShopData, _impl_.today_manual_refresh_num_gold_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDeluxeShopData, _impl_.last_auto_refresh_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDeluxeShopData, _impl_.last_reset_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::MailAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::MailAttachment, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::MailAttachment, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::MailAttachment, _impl_.received_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.subtitle_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.body_text_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.attachments_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.begin_date_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.keep_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.is_read_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.is_received_),
  PROTOBUF_FIELD_OFFSET(::idlepb::Mail, _impl_.equipments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleMailData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleMailData, _impl_.mail_box_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleMailData, _impl_.total_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleMailData, _impl_.system_mail_counter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::OfflineAwardSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::OfflineAwardSummary, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::idlepb::OfflineAwardSummary, _impl_.time_during_),
  PROTOBUF_FIELD_OFFSET(::idlepb::OfflineAwardSummary, _impl_.add_exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::OfflineAwardSummary, _impl_.add_attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineData, _impl_.last_exp_value_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineData, _impl_.last_attr_value_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineData, _impl_.last_award_summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PillElixirData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PillElixirData, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PillElixirData, _impl_.holding_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RolePillElixirData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RolePillElixirData, _impl_.pill_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RolePillElixirData, _impl_.limit_double_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RolePillElixirData, _impl_.limit_exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RolePillElixirData, _impl_.limit_property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectDefData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectDefData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectDefData, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectDefData, _impl_.period_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectDefData, _impl_.duration_policy_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectDefData, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectDefData, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectDefData, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectDefData, _impl_.m_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityEffectDefData, _impl_.n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.grade_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.activetime_utc_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.activetime_world_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.unique_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.study_grade_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.cooldown_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.target_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.target_distance_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.target_catchdistance_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.attack_count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.phy_coefficient_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.phy_damage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.mana_coefficient_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.mana_damage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.item_maxdamage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.item_cfgid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityData, _impl_.effect_defs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerAbilityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerAbilityData, _impl_.abilities_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerAbilityData, _impl_.slotted_abilites_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerAbilityData, _impl_.active_queue_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerAbilityData, _impl_.is_shiled_first_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PlayerAbilityData, _impl_.revert_all_skill_cooldown_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleZasData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleZasData, _impl_.zas_version_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleZasData, _impl_.zas_ability_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleZasData, _impl_.shentong_upgrade_point_use_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.instigator_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.additional_damage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.is_hit_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.is_critical_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.is_countered_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.is_extremedamage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.countereddamage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.currentattackcount_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.shield_suckdamage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.is_countered_critical_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityPKResult, _impl_.countered_shield_suckdamage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityActiveResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityActiveResult, _impl_.eid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityActiveResult, _impl_.ability_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityActiveResult, _impl_.ability_unique_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityActiveResult, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityActiveResult, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::idlepb::AbilityActiveResult, _impl_.effects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuItem, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuItem, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuItem, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuItem, _impl_.score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuRecord, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuRecord, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuRecord, _impl_.scale_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuRecord, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuRecord, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuRecord, _impl_.use_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuBlock, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuBlock, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuBlock, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuBlock, _impl_.event_cfg_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuBlockRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuBlockRow, _impl_.blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuMap, _impl_.done_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuMap, _impl_.current_row_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuMap, _impl_.record_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ShanhetuMap, _impl_.map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShanhetuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShanhetuData, _impl_.auto_skip_green_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShanhetuData, _impl_.auto_skip_blue_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShanhetuData, _impl_.auto_skip_perpo_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShanhetuData, _impl_.auto_skip_gold_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShanhetuData, _impl_.auto_skip_red_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShanhetuData, _impl_.auto_select_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShanhetuData, _impl_.current_map_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShanhetuData, _impl_.total_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShanhetuData, _impl_.records_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleShanhetuData, _impl_.last_update_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.blike_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.last_reset_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.rank_message_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.weapon_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.ammor_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.jewlery_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.skill_weapon_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.shanhetu_history_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.shanhetu_week_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.monster_tower_blike_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.has_received_challange_reward_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.fuze_rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.fuze_days_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.fuze_exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLeaderboardData, _impl_.fuze_leaderboard_rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleMonsterTowerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleMonsterTowerData, _impl_.last_floor_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleMonsterTowerData, _impl_.idle_during_ticks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDungeonKillAllData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDungeonKillAllData, _impl_.done_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDungeonSurviveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleDungeonSurviveData, _impl_.done_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionRewardEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionRewardEntry, _impl_.unique_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionRewardEntry, _impl_.arena_cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionRewardEntry, _impl_.rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionKillRewardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionKillRewardData, _impl_.start_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionKillRewardData, _impl_.rewards_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionKillRewardData, _impl_.is_draw_done_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionKillRewardData, _impl_.drawed_unique_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionDamageRewardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionDamageRewardData, _impl_.start_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BossInvasionDamageRewardData, _impl_.rewards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBossInvasionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBossInvasionData, _impl_.last_reset_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBossInvasionData, _impl_.kill_reward_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBossInvasionData, _impl_.damage_reward_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBossInvasionData, _impl_.drawed_unique_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleMasiveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleMasiveData, _impl_.user_vars_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleMasiveData, _impl_.next_self_unique_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CheckTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CheckTask, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CheckTask, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CheckTask, _impl_.need_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CheckTask, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CheckTask, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CheckTask, _impl_.is_submitted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _impl_.day_point_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _impl_.week_point_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _impl_.day_tasks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _impl_.week_tasks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _impl_.day_received_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _impl_.week_received_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _impl_.last_reset_day_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _impl_.last_reset_week_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _impl_.boss_invasion_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _impl_.degree_locked_day_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleChecklistData, _impl_.degree_locked_week_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleCommonItemExchangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleCommonItemExchangeData, _impl_.last_reset_day_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleCommonItemExchangeData, _impl_.last_reset_week_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleCommonItemExchangeData, _impl_.item_exchange_day_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleCommonItemExchangeData, _impl_.item_exchange_week_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryChestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryChestData, _impl_.today_open_times_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryChestData, _impl_.guarantee_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryGachaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryGachaData, _impl_.today_open_times_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryGachaData, _impl_.free_open_times_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryGachaData, _impl_.guarantee_count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryGachaData, _impl_.total_open_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::TreasuryShopItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::TreasuryShopItem, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::idlepb::TreasuryShopItem, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::TreasuryShopItem, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::TreasuryShopItem, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::idlepb::TreasuryShopItem, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::TreasuryShopItem, _impl_.bought_count_),
  PROTOBUF_FIELD_OFFSET(::idlepb::TreasuryShopItem, _impl_.cfg_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryShopData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryShopData, _impl_.shop_items_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryShopData, _impl_.today_refresh_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasuryShopData, _impl_.shop_refresh_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasurySaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasurySaveData, _impl_.treasury_chest_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasurySaveData, _impl_.treasury_gacha_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasurySaveData, _impl_.treasury_shop_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleTreasurySaveData, _impl_.last_reset_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaCheckListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaCheckListData, _impl_.checklist_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaCheckListData, _impl_.checklist_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaCheckListData, _impl_.checklist_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaCheckListRewardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaCheckListRewardData, _impl_.reward_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ArenaCheckListRewardData, _impl_.reward_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleArenaCheckListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleArenaCheckListData, _impl_.arena_check_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleArenaCheckListData, _impl_.check_reward_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptInviteEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptInviteEntry, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptInviteEntry, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptQuest, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptQuest, _impl_.quest_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptQuest, _impl_.begin_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptQuest, _impl_.received_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptQuest, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptQuest, _impl_.money_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptQuestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptQuestData, _impl_.quests_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptQuestData, _impl_.today_manual_refresh_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptQuestData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptQuestData, _impl_.current_exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptQuestData, _impl_.total_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptShopData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptShopData, _impl_.last_reset_time_sept_shop_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptShopData, _impl_.exchange_history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptData, _impl_.next_join_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptData, _impl_.daily_invite_entries_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptData, _impl_.sept_shop_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptData, _impl_.sept_quest_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptData, _impl_.sept_demon_cumulative_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptData, _impl_.sept_demon_stage_reward_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptData, _impl_.sept_demon_stage_reward_use_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptData, _impl_.sept_demon_damage_reward_received_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSeptData, _impl_.sept_demon_damage_reward_finished_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonWorldData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonWorldData, _impl_.is_started_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonWorldData, _impl_.cur_end_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonWorldData, _impl_.next_open_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonWorldData, _impl_.cur_stage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonWorldData, _impl_.cur_stage_hp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonWorldData, _impl_.cur_stage_maxhp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonWorldData, _impl_.last_stage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonWorldData, _impl_.player_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleCounter, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleCounter, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::FunctionCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::FunctionCounter, _impl_.function_type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FunctionCounter, _impl_.counters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLifeCounterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleLifeCounterData, _impl_.function_counter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandManagementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandManagementInfo, _impl_.plant_uid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandManagementInfo, _impl_.target_stage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandManagementInfo, _impl_.auto_seed_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandManagementInfo, _impl_.auto_harvest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandPlantData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandPlantData, _impl_.plant_uid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandPlantData, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandPlantData, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandPlantData, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandPlantData, _impl_.config_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandPlantData, _impl_.shenling_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandPlantData, _impl_.begin_date_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FarmlandPlantData, _impl_.speed_up_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFarmlandData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFarmlandData, _impl_.current_plants_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFarmlandData, _impl_.managment_plan_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFarmlandData, _impl_.unlock_blocks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFarmlandData, _impl_.farmer_grade_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFarmlandData, _impl_.farmer_friendship_exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFarmlandData, _impl_.ripe_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAvatarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAvatarData, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAvatarData, _impl_.current_world_index_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAvatarData, _impl_.begin_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAvatarData, _impl_.last_draw_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAvatarData, _impl_.temp_package_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleAvatarData, _impl_.last_wrold_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyRoleLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyRoleLog, _impl_.dao_year_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyRoleLog, _impl_.log_type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyRoleLog, _impl_.poem_seed_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyRoleLog, _impl_.zone_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyRoleLog, _impl_.role_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyRoleLog, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBiographyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBiographyData, _impl_.received_cfg_ids_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBiographyData, _impl_.received_event_cfg_ids_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBiographyData, _impl_.role_logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleRoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleRoleInfo, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleRoleInfo, _impl_.role_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleRoleInfo, _impl_.model_config_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleRoleInfo, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleRoleInfo, _impl_.role_cultivation_direction_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleRoleInfo, _impl_.sept_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleRoleInfo, _impl_.sept_position_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleRoleInfo, _impl_.last_online_timespan_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SimpleRoleInfo, _impl_.server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ChatMessage, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ChatMessage, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ChatMessage, _impl_.role_info_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ChatMessage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ChatMessage, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::PrivateChatRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::PrivateChatRecord, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PrivateChatRecord, _impl_.chat_record_),
  PROTOBUF_FIELD_OFFSET(::idlepb::PrivateChatRecord, _impl_.unread_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RolePrivateChatRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RolePrivateChatRecord, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RolePrivateChatRecord, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ChatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ChatData, _impl_.colony_servers_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ChatData, _impl_.quad_servers_),
  PROTOBUF_FIELD_OFFSET(::idlepb::ChatData, _impl_.local_server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::FriendListItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::FriendListItem, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FriendListItem, _impl_.relationship_),
  PROTOBUF_FIELD_OFFSET(::idlepb::FriendListItem, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFriendData, _impl_.friend_list_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFriendData, _impl_.request_list_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFriendData, _impl_.block_list_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFriendData, _impl_.my_request_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleFriendData, _impl_.history_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineFunctionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineFunctionData, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineFunctionData, _impl_.mails_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineFunctionData, _impl_.friend_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineFunctionData, _impl_.private_chat_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineFunctionData, _impl_.role_logs_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineFunctionData, _impl_.leaderboard_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineFunctionData, _impl_.role_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineFunctionData, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineFunctionData, _impl_.degree_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleOfflineFunctionData, _impl_.total_exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::ServerCounterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::ServerCounterData, _impl_.function_counter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SocialFunctionCommonSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SocialFunctionCommonSaveData, _impl_.offline_role_datas_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SocialFunctionCommonSaveData, _impl_.server_counter_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SocialFunctionCommonSaveData, _impl_.role_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.role_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.all_stats_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.mp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.quest_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.shop_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.temporary_package_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.inventory_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.offline_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.alchemy_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.deluxe_shop_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.leaderboard_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.mail_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.forge_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.pillelixir_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.common_cultivation_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.zas_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.monster_tower_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.shanhetu_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.boss_invasion_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.massive_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.checklist_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.common_item_exchange_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.sept_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.treasury_chest_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.gongfa_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.fuzeng_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.collection_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.life_counter_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.appearance_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.arena_check_list_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.dungeon_kill_all_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.farmland_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.dungeon_survive_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.friend_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.avatar_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.arena_statistical_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.biography_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleSaveData, _impl_.vip_shop_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleHistoryRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleHistoryRecord, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleHistoryRecord, _impl_.world_seconds_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleHistoryRecord, _impl_.source_entity_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleHistoryRecord, _impl_.target_entity_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleHistoryRecord, _impl_.message_type_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleHistoryRecord, _impl_.message_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.role_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.zone_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.score_delta_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.rank_delta_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.combat_power_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.model_config_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.cultivation_main_dir_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.cultivation_main_rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleRoleInfo, _impl_.npc_cfg_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleInfo, _impl_.world_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleInfo, _impl_.attacker_win_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleInfo, _impl_.attacker_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleInfo, _impl_.defender_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleInfo, _impl_.begin_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleInfo, _impl_.end_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleInfo, _impl_.solo_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleHistory, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BattleHistory, _impl_.records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBattleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBattleInfo, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBattleInfo, _impl_.can_revenge_),
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBattleInfo, _impl_.round_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBattleHistorySaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::RoleBattleHistorySaveData, _impl_.histories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CompressedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CompressedData, _impl_.original_size_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CompressedData, _impl_.compressed_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::DoBreathingExerciseResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::DoBreathingExerciseResult, _impl_.ok_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DoBreathingExerciseResult, _impl_.perfect_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DoBreathingExerciseResult, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DoBreathingExerciseResult, _impl_.rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SystemNoticeParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SystemNoticeParams, _impl_.s1_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SystemNoticeParams, _impl_.s2_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SystemNoticeParams, _impl_.s3_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SystemNoticeParams, _impl_.s4_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SystemNoticeParams, _impl_.n1_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SystemNoticeParams, _impl_.n2_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SystemNoticeParams, _impl_.n3_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SystemNoticeParams, _impl_.n4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::DropItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::DropItem, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::DropItem, _impl_.item_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardItem, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardItem, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardItem, _impl_.param_d1_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardItem, _impl_.param_n1_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardItem, _impl_.params_n1_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardItem, _impl_.params_d1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardList, _impl_.list_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardList, _impl_.cfg_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardList, _impl_.begin_date_),
  PROTOBUF_FIELD_OFFSET(::idlepb::BiographyEventLeaderboardList, _impl_.finished_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardListItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardListItem, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardListItem, _impl_.user_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardListItem, _impl_.property_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardListItem, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardListItem, _impl_.d1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDataOnLeaderboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDataOnLeaderboard, _impl_.sept_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDataOnLeaderboard, _impl_.sept_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDataOnLeaderboard, _impl_.logo_index_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDataOnLeaderboard, _impl_.property_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardList, _impl_.list_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardList, _impl_.type_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardSaveData, _impl_.lists_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardSaveData, _impl_.sept_list_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardSaveData, _impl_.monster_tower_challange_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardSaveData, _impl_.last_reset_week_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardSaveData, _impl_.last_reset_day_time_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardSaveData, _impl_.biography_lists_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardSaveData, _impl_.fuze_exp_),
  PROTOBUF_FIELD_OFFSET(::idlepb::LeaderboardSaveData, _impl_.fuze_mail_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonDamageHistoryEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonDamageHistoryEntry, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonDamageHistoryEntry, _impl_.role_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonDamageHistoryEntry, _impl_.total_damage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonDamageHistoryEntry, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonDamageHistoryEntry, _impl_.role_model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonDamageHistoryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SeptDemonDamageHistoryData, _impl_.all_entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SelfSeptInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SelfSeptInfo, _impl_.sept_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SelfSeptInfo, _impl_.sept_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SelfSeptInfo, _impl_.sept_position_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SelfSeptInfo, _impl_.next_join_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SelfSeptInfo, _impl_.land_fighting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.role_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.physics_rank_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.magic_rank_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.model_config_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.ability_data_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.fight_mode_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.is_dummy_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.normal_settings_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.self_sept_info_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.combat_power_),
  PROTOBUF_FIELD_OFFSET(::idlepb::CreatePlayerParams, _impl_.all_stats_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::WorldRuntimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::WorldRuntimeData, _impl_.world_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::WorldRuntimeData, _impl_.world_seconds_),
  PROTOBUF_FIELD_OFFSET(::idlepb::WorldRuntimeData, _impl_.time_dilation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::NotifyGiftPackageResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::NotifyGiftPackageResult, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NotifyGiftPackageResult, _impl_.gift_item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NotifyGiftPackageResult, _impl_.config_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::NotifyUsePillProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::NotifyUsePillProperty, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NotifyUsePillProperty, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NotifyUsePillProperty, _impl_.property_type_),
  PROTOBUF_FIELD_OFFSET(::idlepb::NotifyUsePillProperty, _impl_.property_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::EntityCultivationDirData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::EntityCultivationDirData, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EntityCultivationDirData, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EntityCultivationDirData, _impl_.layer_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EntityCultivationDirData, _impl_.stage_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EntityCultivationDirData, _impl_.degree_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::EntityCultivationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::EntityCultivationData, _impl_.major_),
  PROTOBUF_FIELD_OFFSET(::idlepb::EntityCultivationData, _impl_.minor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkTopListEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkTopListEntry, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkTopListEntry, _impl_.role_name_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkTopListEntry, _impl_.role_model_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkTopListEntry, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkTopListEntry, _impl_.score_update_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkTopListEntry, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkTopListEntry, _impl_.combat_power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkGlobalSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkGlobalSaveData, _impl_.round_num_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkGlobalSaveData, _impl_.begin_local_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkGlobalSaveData, _impl_.end_local_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkGlobalSaveData, _impl_.is_over_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkGlobalSaveData, _impl_.next_daily_reward_local_ticks_),
  PROTOBUF_FIELD_OFFSET(::idlepb::SwordPkGlobalSaveData, _impl_.top_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::idlepb::Int64Data)},
  { 7, -1, -1, sizeof(::idlepb::Vector2)},
  { 15, -1, -1, sizeof(::idlepb::Vector3)},
  { 24, -1, -1, sizeof(::idlepb::Color)},
  { 34, -1, -1, sizeof(::idlepb::Int64Pair)},
  { 42, -1, -1, sizeof(::idlepb::StringKeyInt32ValueEntry)},
  { 50, -1, -1, sizeof(::idlepb::MapValueInt32)},
  { 58, -1, -1, sizeof(::idlepb::StringInt64Pair)},
  { 66, -1, -1, sizeof(::idlepb::AbilityEffectData)},
  { 83, -1, -1, sizeof(::idlepb::GameStatData)},
  { 91, -1, -1, sizeof(::idlepb::GameStatsData)},
  { 98, -1, -1, sizeof(::idlepb::GameStatsModuleData)},
  { 106, -1, -1, sizeof(::idlepb::GameStatsAllModuleData)},
  { 113, -1, -1, sizeof(::idlepb::RoleAttribute)},
  { 176, -1, -1, sizeof(::idlepb::RankData)},
  { 191, -1, -1, sizeof(::idlepb::BreathingReward)},
  { 202, -1, -1, sizeof(::idlepb::CommonCultivationData)},
  { 210, -1, -1, sizeof(::idlepb::CultivationData)},
  { 217, -1, -1, sizeof(::idlepb::RoleDailyCounterEntry)},
  { 225, -1, -1, sizeof(::idlepb::RoleDailyCounter)},
  { 233, -1, -1, sizeof(::idlepb::RoleWeeklyCounterEntry)},
  { 241, -1, -1, sizeof(::idlepb::RoleWeeklyCounter)},
  { 249, -1, -1, sizeof(::idlepb::CurrencyEntry)},
  { 257, -1, -1, sizeof(::idlepb::CurrencyData)},
  { 264, -1, -1, sizeof(::idlepb::EquipPerkEntry)},
  { 273, -1, -1, sizeof(::idlepb::SkillEquipmentAttributes)},
  { 289, -1, -1, sizeof(::idlepb::SkillEquipmentData)},
  { 299, -1, -1, sizeof(::idlepb::CollectionEntry)},
  { 312, -1, -1, sizeof(::idlepb::EquipmentData)},
  { 344, -1, -1, sizeof(::idlepb::ItemData)},
  { 355, -1, -1, sizeof(::idlepb::SimpleItemData)},
  { 363, -1, -1, sizeof(::idlepb::TemporaryPackageItem)},
  { 372, -1, -1, sizeof(::idlepb::ArenaExplorationStatisticalItem)},
  { 384, -1, -1, sizeof(::idlepb::ShopItemBase)},
  { 399, -1, -1, sizeof(::idlepb::ShopItem)},
  { 411, -1, -1, sizeof(::idlepb::DeluxeShopItem)},
  { 426, -1, -1, sizeof(::idlepb::RoleVipShopData)},
  { 435, -1, -1, sizeof(::idlepb::CharacterModelConfig)},
  { 443, -1, -1, sizeof(::idlepb::RoleAppearanceShopData)},
  { 451, -1, -1, sizeof(::idlepb::AppearanceCollection)},
  { 460, -1, -1, sizeof(::idlepb::RoleAppearanceData)},
  { 470, -1, -1, sizeof(::idlepb::AlchemyPackageItem)},
  { 478, -1, -1, sizeof(::idlepb::AlchemyMakeData)},
  { 499, -1, -1, sizeof(::idlepb::AlchemyRecipeData)},
  { 508, -1, -1, sizeof(::idlepb::RoleAlchemyData)},
  { 520, -1, -1, sizeof(::idlepb::ForgePackageItem)},
  { 528, -1, -1, sizeof(::idlepb::ForgeMakeData)},
  { 552, -1, -1, sizeof(::idlepb::ForgeRecipeData)},
  { 561, -1, -1, sizeof(::idlepb::LostEquipmentData)},
  { 571, -1, -1, sizeof(::idlepb::RoleForgeData)},
  { 586, -1, -1, sizeof(::idlepb::PillPropertyData)},
  { 594, -1, -1, sizeof(::idlepb::GongFaData)},
  { 605, -1, -1, sizeof(::idlepb::RoleGongFaData)},
  { 614, -1, -1, sizeof(::idlepb::CollectionEntrySaveData)},
  { 625, -1, -1, sizeof(::idlepb::CommonCollectionPieceData)},
  { 633, -1, -1, sizeof(::idlepb::CollectionZoneActiveAwardData)},
  { 641, -1, -1, sizeof(::idlepb::RoleCollectionSaveData)},
  { 652, -1, -1, sizeof(::idlepb::FuZengTuple)},
  { 660, -1, -1, sizeof(::idlepb::FuZengData)},
  { 669, -1, -1, sizeof(::idlepb::RoleFuZengData)},
  { 676, -1, -1, sizeof(::idlepb::RoleFightModeData)},
  { 685, -1, -1, sizeof(::idlepb::RoleNormalSettings)},
  { 694, -1, -1, sizeof(::idlepb::RoleData)},
  { 729, -1, -1, sizeof(::idlepb::SimpleAbilityData)},
  { 738, -1, -1, sizeof(::idlepb::SimpleGongFaData)},
  { 747, -1, -1, sizeof(::idlepb::RoleInfo)},
  { 774, -1, -1, sizeof(::idlepb::RoleInventoryData)},
  { 786, -1, -1, sizeof(::idlepb::RoleTemporaryPackageData)},
  { 795, -1, -1, sizeof(::idlepb::RoleArenaExplorationStatisticalData)},
  { 802, -1, -1, sizeof(::idlepb::QuestProgress)},
  { 811, -1, -1, sizeof(::idlepb::RoleQuestData)},
  { 820, -1, -1, sizeof(::idlepb::RoleShopData)},
  { 831, -1, -1, sizeof(::idlepb::RoleDeluxeShopData)},
  { 842, -1, -1, sizeof(::idlepb::MailAttachment)},
  { 851, -1, -1, sizeof(::idlepb::Mail)},
  { 869, -1, -1, sizeof(::idlepb::RoleMailData)},
  { 878, -1, -1, sizeof(::idlepb::OfflineAwardSummary)},
  { 888, -1, -1, sizeof(::idlepb::RoleOfflineData)},
  { 897, -1, -1, sizeof(::idlepb::PillElixirData)},
  { 905, -1, -1, sizeof(::idlepb::RolePillElixirData)},
  { 915, -1, -1, sizeof(::idlepb::AbilityEffectDefData)},
  { 930, -1, -1, sizeof(::idlepb::AbilityData)},
  { 955, -1, -1, sizeof(::idlepb::PlayerAbilityData)},
  { 966, -1, -1, sizeof(::idlepb::RoleZasData)},
  { 975, -1, -1, sizeof(::idlepb::AbilityPKResult)},
  { 994, -1, -1, sizeof(::idlepb::AbilityActiveResult)},
  { 1006, -1, -1, sizeof(::idlepb::ShanhetuItem)},
  { 1016, -1, -1, sizeof(::idlepb::ShanhetuRecord)},
  { 1028, -1, -1, sizeof(::idlepb::ShanhetuBlock)},
  { 1038, -1, -1, sizeof(::idlepb::ShanhetuBlockRow)},
  { 1045, -1, -1, sizeof(::idlepb::ShanhetuMap)},
  { 1055, -1, -1, sizeof(::idlepb::RoleShanhetuData)},
  { 1071, -1, -1, sizeof(::idlepb::RoleLeaderboardData)},
  { 1093, -1, -1, sizeof(::idlepb::RoleMonsterTowerData)},
  { 1101, -1, -1, sizeof(::idlepb::RoleDungeonKillAllData)},
  { 1108, -1, -1, sizeof(::idlepb::RoleDungeonSurviveData)},
  { 1115, -1, -1, sizeof(::idlepb::BossInvasionRewardEntry)},
  { 1124, -1, -1, sizeof(::idlepb::BossInvasionKillRewardData)},
  { 1134, -1, -1, sizeof(::idlepb::BossInvasionDamageRewardData)},
  { 1142, -1, -1, sizeof(::idlepb::RoleBossInvasionData)},
  { 1152, -1, -1, sizeof(::idlepb::RoleMasiveData)},
  { 1160, -1, -1, sizeof(::idlepb::CheckTask)},
  { 1172, -1, -1, sizeof(::idlepb::RoleChecklistData)},
  { 1189, -1, -1, sizeof(::idlepb::RoleCommonItemExchangeData)},
  { 1199, -1, -1, sizeof(::idlepb::RoleTreasuryChestData)},
  { 1207, -1, -1, sizeof(::idlepb::RoleTreasuryGachaData)},
  { 1217, -1, -1, sizeof(::idlepb::TreasuryShopItem)},
  { 1230, -1, -1, sizeof(::idlepb::RoleTreasuryShopData)},
  { 1239, -1, -1, sizeof(::idlepb::RoleTreasurySaveData)},
  { 1249, -1, -1, sizeof(::idlepb::ArenaCheckListData)},
  { 1258, -1, -1, sizeof(::idlepb::ArenaCheckListRewardData)},
  { 1266, -1, -1, sizeof(::idlepb::RoleArenaCheckListData)},
  { 1274, -1, -1, sizeof(::idlepb::RoleSeptInviteEntry)},
  { 1282, -1, -1, sizeof(::idlepb::SeptQuest)},
  { 1294, -1, -1, sizeof(::idlepb::RoleSeptQuestData)},
  { 1305, -1, -1, sizeof(::idlepb::RoleSeptShopData)},
  { 1313, -1, -1, sizeof(::idlepb::RoleSeptData)},
  { 1328, -1, -1, sizeof(::idlepb::SeptDemonWorldData)},
  { 1342, -1, -1, sizeof(::idlepb::SimpleCounter)},
  { 1350, -1, -1, sizeof(::idlepb::FunctionCounter)},
  { 1358, -1, -1, sizeof(::idlepb::RoleLifeCounterData)},
  { 1365, -1, -1, sizeof(::idlepb::FarmlandManagementInfo)},
  { 1375, -1, -1, sizeof(::idlepb::FarmlandPlantData)},
  { 1389, -1, -1, sizeof(::idlepb::RoleFarmlandData)},
  { 1401, -1, -1, sizeof(::idlepb::RoleAvatarData)},
  { 1413, -1, -1, sizeof(::idlepb::BiographyRoleLog)},
  { 1425, -1, -1, sizeof(::idlepb::RoleBiographyData)},
  { 1434, -1, -1, sizeof(::idlepb::SimpleRoleInfo)},
  { 1449, -1, -1, sizeof(::idlepb::ChatMessage)},
  { 1460, -1, -1, sizeof(::idlepb::PrivateChatRecord)},
  { 1469, -1, -1, sizeof(::idlepb::RolePrivateChatRecord)},
  { 1477, -1, -1, sizeof(::idlepb::ChatData)},
  { 1486, -1, -1, sizeof(::idlepb::FriendListItem)},
  { 1495, -1, -1, sizeof(::idlepb::RoleFriendData)},
  { 1506, -1, -1, sizeof(::idlepb::RoleOfflineFunctionData)},
  { 1522, -1, -1, sizeof(::idlepb::ServerCounterData)},
  { 1529, -1, -1, sizeof(::idlepb::SocialFunctionCommonSaveData)},
  { 1538, -1, -1, sizeof(::idlepb::RoleSaveData)},
  { 1583, -1, -1, sizeof(::idlepb::BattleHistoryRecord)},
  { 1595, -1, -1, sizeof(::idlepb::BattleRoleInfo)},
  { 1613, -1, -1, sizeof(::idlepb::BattleInfo)},
  { 1626, -1, -1, sizeof(::idlepb::BattleHistory)},
  { 1634, -1, -1, sizeof(::idlepb::RoleBattleInfo)},
  { 1643, -1, -1, sizeof(::idlepb::RoleBattleHistorySaveData)},
  { 1650, -1, -1, sizeof(::idlepb::CompressedData)},
  { 1658, -1, -1, sizeof(::idlepb::DoBreathingExerciseResult)},
  { 1668, -1, -1, sizeof(::idlepb::SystemNoticeParams)},
  { 1682, -1, -1, sizeof(::idlepb::DropItem)},
  { 1690, -1, -1, sizeof(::idlepb::BiographyEventLeaderboardItem)},
  { 1702, -1, -1, sizeof(::idlepb::BiographyEventLeaderboardList)},
  { 1712, -1, -1, sizeof(::idlepb::LeaderboardListItem)},
  { 1723, -1, -1, sizeof(::idlepb::SeptDataOnLeaderboard)},
  { 1733, -1, -1, sizeof(::idlepb::LeaderboardList)},
  { 1741, -1, -1, sizeof(::idlepb::LeaderboardSaveData)},
  { 1755, -1, -1, sizeof(::idlepb::SeptDemonDamageHistoryEntry)},
  { 1766, -1, -1, sizeof(::idlepb::SeptDemonDamageHistoryData)},
  { 1773, -1, -1, sizeof(::idlepb::SelfSeptInfo)},
  { 1784, -1, -1, sizeof(::idlepb::CreatePlayerParams)},
  { 1802, -1, -1, sizeof(::idlepb::WorldRuntimeData)},
  { 1811, -1, -1, sizeof(::idlepb::NotifyGiftPackageResult)},
  { 1820, -1, -1, sizeof(::idlepb::NotifyUsePillProperty)},
  { 1830, -1, -1, sizeof(::idlepb::EntityCultivationDirData)},
  { 1841, -1, -1, sizeof(::idlepb::EntityCultivationData)},
  { 1849, -1, -1, sizeof(::idlepb::SwordPkTopListEntry)},
  { 1862, -1, -1, sizeof(::idlepb::SwordPkGlobalSaveData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::idlepb::_Int64Data_default_instance_._instance,
  &::idlepb::_Vector2_default_instance_._instance,
  &::idlepb::_Vector3_default_instance_._instance,
  &::idlepb::_Color_default_instance_._instance,
  &::idlepb::_Int64Pair_default_instance_._instance,
  &::idlepb::_StringKeyInt32ValueEntry_default_instance_._instance,
  &::idlepb::_MapValueInt32_default_instance_._instance,
  &::idlepb::_StringInt64Pair_default_instance_._instance,
  &::idlepb::_AbilityEffectData_default_instance_._instance,
  &::idlepb::_GameStatData_default_instance_._instance,
  &::idlepb::_GameStatsData_default_instance_._instance,
  &::idlepb::_GameStatsModuleData_default_instance_._instance,
  &::idlepb::_GameStatsAllModuleData_default_instance_._instance,
  &::idlepb::_RoleAttribute_default_instance_._instance,
  &::idlepb::_RankData_default_instance_._instance,
  &::idlepb::_BreathingReward_default_instance_._instance,
  &::idlepb::_CommonCultivationData_default_instance_._instance,
  &::idlepb::_CultivationData_default_instance_._instance,
  &::idlepb::_RoleDailyCounterEntry_default_instance_._instance,
  &::idlepb::_RoleDailyCounter_default_instance_._instance,
  &::idlepb::_RoleWeeklyCounterEntry_default_instance_._instance,
  &::idlepb::_RoleWeeklyCounter_default_instance_._instance,
  &::idlepb::_CurrencyEntry_default_instance_._instance,
  &::idlepb::_CurrencyData_default_instance_._instance,
  &::idlepb::_EquipPerkEntry_default_instance_._instance,
  &::idlepb::_SkillEquipmentAttributes_default_instance_._instance,
  &::idlepb::_SkillEquipmentData_default_instance_._instance,
  &::idlepb::_CollectionEntry_default_instance_._instance,
  &::idlepb::_EquipmentData_default_instance_._instance,
  &::idlepb::_ItemData_default_instance_._instance,
  &::idlepb::_SimpleItemData_default_instance_._instance,
  &::idlepb::_TemporaryPackageItem_default_instance_._instance,
  &::idlepb::_ArenaExplorationStatisticalItem_default_instance_._instance,
  &::idlepb::_ShopItemBase_default_instance_._instance,
  &::idlepb::_ShopItem_default_instance_._instance,
  &::idlepb::_DeluxeShopItem_default_instance_._instance,
  &::idlepb::_RoleVipShopData_default_instance_._instance,
  &::idlepb::_CharacterModelConfig_default_instance_._instance,
  &::idlepb::_RoleAppearanceShopData_default_instance_._instance,
  &::idlepb::_AppearanceCollection_default_instance_._instance,
  &::idlepb::_RoleAppearanceData_default_instance_._instance,
  &::idlepb::_AlchemyPackageItem_default_instance_._instance,
  &::idlepb::_AlchemyMakeData_default_instance_._instance,
  &::idlepb::_AlchemyRecipeData_default_instance_._instance,
  &::idlepb::_RoleAlchemyData_default_instance_._instance,
  &::idlepb::_ForgePackageItem_default_instance_._instance,
  &::idlepb::_ForgeMakeData_default_instance_._instance,
  &::idlepb::_ForgeRecipeData_default_instance_._instance,
  &::idlepb::_LostEquipmentData_default_instance_._instance,
  &::idlepb::_RoleForgeData_default_instance_._instance,
  &::idlepb::_PillPropertyData_default_instance_._instance,
  &::idlepb::_GongFaData_default_instance_._instance,
  &::idlepb::_RoleGongFaData_default_instance_._instance,
  &::idlepb::_CollectionEntrySaveData_default_instance_._instance,
  &::idlepb::_CommonCollectionPieceData_default_instance_._instance,
  &::idlepb::_CollectionZoneActiveAwardData_default_instance_._instance,
  &::idlepb::_RoleCollectionSaveData_default_instance_._instance,
  &::idlepb::_FuZengTuple_default_instance_._instance,
  &::idlepb::_FuZengData_default_instance_._instance,
  &::idlepb::_RoleFuZengData_default_instance_._instance,
  &::idlepb::_RoleFightModeData_default_instance_._instance,
  &::idlepb::_RoleNormalSettings_default_instance_._instance,
  &::idlepb::_RoleData_default_instance_._instance,
  &::idlepb::_SimpleAbilityData_default_instance_._instance,
  &::idlepb::_SimpleGongFaData_default_instance_._instance,
  &::idlepb::_RoleInfo_default_instance_._instance,
  &::idlepb::_RoleInventoryData_default_instance_._instance,
  &::idlepb::_RoleTemporaryPackageData_default_instance_._instance,
  &::idlepb::_RoleArenaExplorationStatisticalData_default_instance_._instance,
  &::idlepb::_QuestProgress_default_instance_._instance,
  &::idlepb::_RoleQuestData_default_instance_._instance,
  &::idlepb::_RoleShopData_default_instance_._instance,
  &::idlepb::_RoleDeluxeShopData_default_instance_._instance,
  &::idlepb::_MailAttachment_default_instance_._instance,
  &::idlepb::_Mail_default_instance_._instance,
  &::idlepb::_RoleMailData_default_instance_._instance,
  &::idlepb::_OfflineAwardSummary_default_instance_._instance,
  &::idlepb::_RoleOfflineData_default_instance_._instance,
  &::idlepb::_PillElixirData_default_instance_._instance,
  &::idlepb::_RolePillElixirData_default_instance_._instance,
  &::idlepb::_AbilityEffectDefData_default_instance_._instance,
  &::idlepb::_AbilityData_default_instance_._instance,
  &::idlepb::_PlayerAbilityData_default_instance_._instance,
  &::idlepb::_RoleZasData_default_instance_._instance,
  &::idlepb::_AbilityPKResult_default_instance_._instance,
  &::idlepb::_AbilityActiveResult_default_instance_._instance,
  &::idlepb::_ShanhetuItem_default_instance_._instance,
  &::idlepb::_ShanhetuRecord_default_instance_._instance,
  &::idlepb::_ShanhetuBlock_default_instance_._instance,
  &::idlepb::_ShanhetuBlockRow_default_instance_._instance,
  &::idlepb::_ShanhetuMap_default_instance_._instance,
  &::idlepb::_RoleShanhetuData_default_instance_._instance,
  &::idlepb::_RoleLeaderboardData_default_instance_._instance,
  &::idlepb::_RoleMonsterTowerData_default_instance_._instance,
  &::idlepb::_RoleDungeonKillAllData_default_instance_._instance,
  &::idlepb::_RoleDungeonSurviveData_default_instance_._instance,
  &::idlepb::_BossInvasionRewardEntry_default_instance_._instance,
  &::idlepb::_BossInvasionKillRewardData_default_instance_._instance,
  &::idlepb::_BossInvasionDamageRewardData_default_instance_._instance,
  &::idlepb::_RoleBossInvasionData_default_instance_._instance,
  &::idlepb::_RoleMasiveData_default_instance_._instance,
  &::idlepb::_CheckTask_default_instance_._instance,
  &::idlepb::_RoleChecklistData_default_instance_._instance,
  &::idlepb::_RoleCommonItemExchangeData_default_instance_._instance,
  &::idlepb::_RoleTreasuryChestData_default_instance_._instance,
  &::idlepb::_RoleTreasuryGachaData_default_instance_._instance,
  &::idlepb::_TreasuryShopItem_default_instance_._instance,
  &::idlepb::_RoleTreasuryShopData_default_instance_._instance,
  &::idlepb::_RoleTreasurySaveData_default_instance_._instance,
  &::idlepb::_ArenaCheckListData_default_instance_._instance,
  &::idlepb::_ArenaCheckListRewardData_default_instance_._instance,
  &::idlepb::_RoleArenaCheckListData_default_instance_._instance,
  &::idlepb::_RoleSeptInviteEntry_default_instance_._instance,
  &::idlepb::_SeptQuest_default_instance_._instance,
  &::idlepb::_RoleSeptQuestData_default_instance_._instance,
  &::idlepb::_RoleSeptShopData_default_instance_._instance,
  &::idlepb::_RoleSeptData_default_instance_._instance,
  &::idlepb::_SeptDemonWorldData_default_instance_._instance,
  &::idlepb::_SimpleCounter_default_instance_._instance,
  &::idlepb::_FunctionCounter_default_instance_._instance,
  &::idlepb::_RoleLifeCounterData_default_instance_._instance,
  &::idlepb::_FarmlandManagementInfo_default_instance_._instance,
  &::idlepb::_FarmlandPlantData_default_instance_._instance,
  &::idlepb::_RoleFarmlandData_default_instance_._instance,
  &::idlepb::_RoleAvatarData_default_instance_._instance,
  &::idlepb::_BiographyRoleLog_default_instance_._instance,
  &::idlepb::_RoleBiographyData_default_instance_._instance,
  &::idlepb::_SimpleRoleInfo_default_instance_._instance,
  &::idlepb::_ChatMessage_default_instance_._instance,
  &::idlepb::_PrivateChatRecord_default_instance_._instance,
  &::idlepb::_RolePrivateChatRecord_default_instance_._instance,
  &::idlepb::_ChatData_default_instance_._instance,
  &::idlepb::_FriendListItem_default_instance_._instance,
  &::idlepb::_RoleFriendData_default_instance_._instance,
  &::idlepb::_RoleOfflineFunctionData_default_instance_._instance,
  &::idlepb::_ServerCounterData_default_instance_._instance,
  &::idlepb::_SocialFunctionCommonSaveData_default_instance_._instance,
  &::idlepb::_RoleSaveData_default_instance_._instance,
  &::idlepb::_BattleHistoryRecord_default_instance_._instance,
  &::idlepb::_BattleRoleInfo_default_instance_._instance,
  &::idlepb::_BattleInfo_default_instance_._instance,
  &::idlepb::_BattleHistory_default_instance_._instance,
  &::idlepb::_RoleBattleInfo_default_instance_._instance,
  &::idlepb::_RoleBattleHistorySaveData_default_instance_._instance,
  &::idlepb::_CompressedData_default_instance_._instance,
  &::idlepb::_DoBreathingExerciseResult_default_instance_._instance,
  &::idlepb::_SystemNoticeParams_default_instance_._instance,
  &::idlepb::_DropItem_default_instance_._instance,
  &::idlepb::_BiographyEventLeaderboardItem_default_instance_._instance,
  &::idlepb::_BiographyEventLeaderboardList_default_instance_._instance,
  &::idlepb::_LeaderboardListItem_default_instance_._instance,
  &::idlepb::_SeptDataOnLeaderboard_default_instance_._instance,
  &::idlepb::_LeaderboardList_default_instance_._instance,
  &::idlepb::_LeaderboardSaveData_default_instance_._instance,
  &::idlepb::_SeptDemonDamageHistoryEntry_default_instance_._instance,
  &::idlepb::_SeptDemonDamageHistoryData_default_instance_._instance,
  &::idlepb::_SelfSeptInfo_default_instance_._instance,
  &::idlepb::_CreatePlayerParams_default_instance_._instance,
  &::idlepb::_WorldRuntimeData_default_instance_._instance,
  &::idlepb::_NotifyGiftPackageResult_default_instance_._instance,
  &::idlepb::_NotifyUsePillProperty_default_instance_._instance,
  &::idlepb::_EntityCultivationDirData_default_instance_._instance,
  &::idlepb::_EntityCultivationData_default_instance_._instance,
  &::idlepb::_SwordPkTopListEntry_default_instance_._instance,
  &::idlepb::_SwordPkGlobalSaveData_default_instance_._instance,
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\006idlepb\032\rdefines.proto\032\tn"
  "et.proto\"\032\n\tInt64Data\022\r\n\005value\030\001 \001(\003\"\037\n\007"
  "Vector2\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"*\n\007Vector3"
  "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"3\n\005Col"
  "or\022\t\n\001r\030\001 \001(\002\022\t\n\001g\030\002 \001(\002\022\t\n\001b\030\003 \001(\002\022\t\n\001a"
  "\030\004 \001(\002\"\'\n\tInt64Pair\022\013\n\003key\030\001 \001(\003\022\r\n\005valu"
  "e\030\002 \001(\003\"6\n\030StringKeyInt32ValueEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\005\"+\n\rMapValueInt32"
  "\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"-\n\017StringIn"
  "t64Pair\022\013\n\003str\030\001 \001(\t\022\r\n\005value\030\002 \001(\003\"\303\001\n\021"
  "AbilityEffectData\022\014\n\004type\030\001 \001(\005\022\020\n\010durat"
  "ion\030\002 \001(\002\022\016\n\006period\030\003 \001(\002\022\027\n\017duration_po"
  "licy\030\004 \001(\005\022\027\n\017starttime_world\030\005 \001(\002\022\025\n\rs"
  "tarttime_utc\030\006 \001(\003\022\t\n\001x\030\n \001(\002\022\t\n\001y\030\013 \001(\002"
  "\022\t\n\001z\030\014 \001(\002\022\t\n\001m\030\r \001(\002\022\t\n\001n\030\016 \001(\002\"+\n\014Gam"
  "eStatData\022\014\n\004type\030\001 \001(\005\022\r\n\005value\030\002 \001(\002\"4"
  "\n\rGameStatsData\022#\n\005stats\030\001 \003(\0132\024.idlepb."
  "GameStatData\"I\n\023GameStatsModuleData\022\014\n\004t"
  "ype\030\001 \001(\005\022$\n\005stats\030\002 \001(\0132\025.idlepb.GameSt"
  "atsData\"I\n\026GameStatsAllModuleData\022/\n\nall"
  "_module\030\001 \003(\0132\033.idlepb.GameStatsModuleDa"
  "ta\"\227\014\n\rRoleAttribute\022\016\n\006health\030\001 \001(\002\022\022\n\n"
  "max_health\030\002 \001(\002\022\014\n\004mana\030\003 \001(\002\022\020\n\010max_ma"
  "na\030\004 \001(\002\022\014\n\004mind\030\005 \001(\002\022\020\n\010strength\030\006 \001(\002"
  "\022\021\n\tintellect\030\007 \001(\002\022\017\n\007agility\030\010 \001(\002\022\022\n\n"
  "move_speed\030\t \001(\002\022\017\n\007phy_att\030\n \001(\002\022\017\n\007phy"
  "_def\030\013 \001(\002\022\017\n\007mag_att\030\014 \001(\002\022\017\n\007mag_def\030\r"
  " \001(\002\022\021\n\tphy_dodge\030\016 \001(\002\022\021\n\tmag_dodge\030\017 \001"
  "(\002\022\017\n\007phy_hit\030\020 \001(\002\022\017\n\007mag_hit\030\021 \001(\002\022\014\n\004"
  "crit\030\022 \001(\002\022\020\n\010crit_def\030\023 \001(\002\022\032\n\022hp_recov"
  "er_percent\030\024 \001(\002\022\032\n\022mp_recover_percent\030\025"
  " \001(\002\022\021\n\tcrit_coef\030\026 \001(\002\022\022\n\ncrit_block\030\027 "
  "\001(\002\022\036\n\026crit_additional_damage\030\030 \001(\002\022\037\n\027a"
  "rena_money_add_percent\030\031 \001(\002\022\021\n\tmag_brea"
  "k\030\032 \001(\002\022\021\n\tphy_break\030\033 \001(\002\022\021\n\tmag_block\030"
  "\034 \001(\002\022\021\n\tphy_block\030\035 \001(\002\022\016\n\006fen_qi\030\036 \001(\002"
  "\022\021\n\010tuna_num\030\310\001 \001(\002\022\031\n\020tuna_add_percent\030"
  "\311\001 \001(\002\022\025\n\014medicine_num\030\312\001 \001(\002\022\035\n\024medicin"
  "e_add_percent\030\313\001 \001(\002\022\033\n\022baseqi_add_perce"
  "nt\030\314\001 \001(\002\022/\n&shen_tong_damage_to_player_"
  "add_percent\030\315\001 \001(\002\0222\n)shen_tong_damage_t"
  "o_player_reduce_percent\030\316\001 \001(\002\022,\n#fa_bao"
  "_damage_to_player_add_percent\030\317\001 \001(\002\022/\n&"
  "fa_bao_damage_to_player_reduce_percent\030\320"
  "\001 \001(\002\022\037\n\026phy_damage_add_percent\030\321\001 \001(\002\022\037"
  "\n\026mag_damage_add_percent\030\322\001 \001(\002\022\"\n\031phy_d"
  "amage_reduce_percent\030\323\001 \001(\002\022\"\n\031mag_damag"
  "e_reduce_percent\030\324\001 \001(\002\022*\n!attack_monste"
  "r_damage_add_percent\030\325\001 \001(\002\022+\n\"take_mons"
  "ter_damage_reduce_percent\030\326\001 \001(\002\022\034\n\023base"
  "_hp_add_percent\030\327\001 \001(\002\022\034\n\023base_mp_add_pe"
  "rcent\030\330\001 \001(\002\022!\n\030base_phy_att_add_percent"
  "\030\331\001 \001(\002\022!\n\030base_mag_att_add_percent\030\332\001 \001"
  "(\002\022!\n\030base_phy_def_add_percent\030\333\001 \001(\002\022!\n"
  "\030base_mag_def_add_percent\030\334\001 \001(\002\022!\n\030base"
  "_phy_hit_add_percent\030\335\001 \001(\002\022!\n\030base_mag_"
  "hit_add_percent\030\336\001 \001(\002\022#\n\032base_phy_dodge"
  "_add_percent\030\337\001 \001(\002\022#\n\032base_mag_dodge_ad"
  "d_percent\030\340\001 \001(\002\022\036\n\025base_crit_add_percen"
  "t\030\341\001 \001(\002\022\"\n\031base_crit_def_add_percent\030\342\001"
  " \001(\002\"\335\001\n\010RankData\022\014\n\004rank\030\001 \001(\005\022\013\n\003exp\030\002"
  " \001(\002\022\r\n\005layer\030\003 \001(\005\022\r\n\005stage\030\004 \001(\005\022\016\n\006de"
  "gree\030\005 \001(\005\0223\n\021breakthrough_type\030\006 \001(\0162\030."
  "idlepb.BreakthroughType\022\034\n\024lose_add_prob"
  "ability\030\007 \001(\005\022\036\n\026lose_recover_timestamp\030"
  "\010 \001(\003\022\025\n\rstage_add_att\030\t \001(\003\"]\n\017Breathin"
  "gReward\022\r\n\005index\030\001 \001(\005\022\017\n\007item_id\030\002 \003(\005\022"
  "\013\n\003num\030\003 \003(\005\022\013\n\003dir\030\004 \001(\005\022\020\n\010received\030\005 "
  "\001(\010\"d\n\025CommonCultivationData\0222\n\021breathin"
  "g_rewards\030\001 \003(\0132\027.idlepb.BreathingReward"
  "\022\027\n\017merge_breathing\030\002 \001(\010\"6\n\017Cultivation"
  "Data\022#\n\trank_data\030\001 \001(\0132\020.idlepb.RankDat"
  "a\"P\n\025RoleDailyCounterEntry\022*\n\004type\030\001 \001(\016"
  "2\034.idlepb.RoleDailyCounterType\022\013\n\003num\030\002 "
  "\001(\005\"[\n\020RoleDailyCounter\022.\n\007entries\030\001 \003(\013"
  "2\035.idlepb.RoleDailyCounterEntry\022\027\n\017last_"
  "reset_time\030\004 \001(\003\"R\n\026RoleWeeklyCounterEnt"
  "ry\022+\n\004type\030\001 \001(\0162\035.idlepb.RoleWeeklyCoun"
  "terType\022\013\n\003num\030\002 \001(\005\"]\n\021RoleWeeklyCounte"
  "r\022/\n\007entries\030\001 \003(\0132\036.idlepb.RoleWeeklyCo"
  "unterEntry\022\027\n\017last_reset_time\030\004 \001(\003\"@\n\rC"
  "urrencyEntry\022\"\n\004type\030\001 \001(\0162\024.idlepb.Curr"
  "encyType\022\013\n\003num\030\002 \001(\003\"9\n\014CurrencyData\022)\n"
  "\ncurrencies\030\n \003(\0132\025.idlepb.CurrencyEntry"
  "\"O\n\016EquipPerkEntry\022\n\n\002id\030\001 \001(\005\022$\n\007qualit"
  "y\030\002 \001(\0162\023.idlepb.ItemQuality\022\013\n\003num\030\003 \001("
  "\005\"\244\002\n\030SkillEquipmentAttributes\022\021\n\tcool_d"
  "own\030\001 \001(\002\022\022\n\ntarget_num\030\002 \001(\005\022\024\n\014attack_"
  "count\030\003 \001(\005\022\027\n\017phy_coefficient\030\004 \001(\002\022\022\n\n"
  "phy_damage\030\005 \001(\002\022\027\n\017mag_coefficient\030\006 \001("
  "\002\022\022\n\nmag_damage\030\007 \001(\002\022\022\n\nmax_damage\030\010 \001("
  "\002\022*\n\007effects\030\t \003(\0132\031.idlepb.AbilityEffec"
  "tData\0221\n\016shield_effects\030\n \003(\0132\031.idlepb.A"
  "bilityEffectData\"\205\002\n\022SkillEquipmentData\022"
  "4\n\nattributes\030\001 \001(\0132 .idlepb.SkillEquipm"
  "entAttributes\022>\n\024reinforce_attributes\030\002 "
  "\001(\0132 .idlepb.SkillEquipmentAttributes\022:\n"
  "\020qiwen_attributes\030\003 \001(\0132 .idlepb.SkillEq"
  "uipmentAttributes\022=\n\023jinglian_attributes"
  "\030\004 \001(\0132 .idlepb.SkillEquipmentAttributes"
  "\"\213\001\n\017CollectionEntry\022\n\n\002id\030\001 \001(\005\022\r\n\005leve"
  "l\030\002 \001(\005\022\014\n\004star\030\003 \001(\005\022\024\n\014is_activated\030\004 "
  "\001(\010\022\021\n\tpiece_num\030\005 \001(\005\022\020\n\010life_num\030\006 \001(\005"
  "\022\024\n\014combat_power\030\007 \001(\002\"\340\006\n\rEquipmentData"
  "\022\022\n\nslot_index\030\001 \001(\005\022\024\n\014combat_power\030\003 \001"
  "(\003\022\022\n\nmaker_name\030\004 \001(\t\022\024\n\014maker_roleid\030\005"
  " \001(\003\022%\n\005perks\030\n \003(\0132\026.idlepb.EquipPerkEn"
  "try\0228\n\024skill_equipment_data\030\013 \001(\0132\032.idle"
  "pb.SkillEquipmentData\0220\n\017collection_data"
  "\030\014 \001(\0132\027.idlepb.CollectionEntry\022\027\n\017reinf"
  "orce_level\030\036 \001(\005\022\024\n\014refine_level\030\037 \001(\005\022\025"
  "\n\rqiwen_a_level\0302 \001(\005\022\025\n\rqiwen_b_level\0303"
  " \001(\005\022\025\n\rqiwen_c_level\0304 \001(\005\022\036\n\026qiwen_ext"
  "ra_effect_num\0305 \001(\005\022\027\n\017qiwen_moneycast\0306"
  " \001(\005\022\033\n\023qiwen_current_exp_a\0307 \001(\005\022\033\n\023qiw"
  "en_current_exp_b\0308 \001(\005\022\033\n\023qiwen_current_"
  "exp_c\0309 \001(\005\022\031\n\021qiwen_total_exp_a\030: \001(\005\022\031"
  "\n\021qiwen_total_exp_b\030; \001(\005\022\031\n\021qiwen_total"
  "_exp_c\030< \001(\005\022)\n\nbase_stats\030d \001(\0132\025.idlep"
  "b.GameStatsData\022.\n\017reinforce_stats\030e \001(\013"
  "2\025.idlepb.GameStatsData\022*\n\013qiwen_stats\030f"
  " \001(\0132\025.idlepb.GameStatsData\022+\n\014refine_st"
  "ats\030g \001(\0132\025.idlepb.GameStatsData\022)\n\nperk"
  "_stats\030h \001(\0132\025.idlepb.GameStatsData\0224\n\025q"
  "iwen_resonance_stats\030i \001(\0132\025.idlepb.Game"
  "StatsData\"r\n\010ItemData\022\n\n\002id\030\001 \001(\003\022\016\n\006cfg"
  "_id\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\016\n\006locked\030\004 \001(\010\022-"
  "\n\016equipment_data\030\n \001(\0132\025.idlepb.Equipmen"
  "tData\"-\n\016SimpleItemData\022\016\n\006cfg_id\030\001 \001(\005\022"
  "\013\n\003num\030\002 \001(\005\"\?\n\024TemporaryPackageItem\022\n\n\002"
  "id\030\001 \001(\003\022\016\n\006cfg_id\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\"\206\001"
  "\n\037ArenaExplorationStatisticalItem\022\014\n\004tim"
  "e\030\001 \001(\003\022\017\n\007mapname\030\002 \001(\t\022\017\n\007killnum\030\003 \001("
  "\005\022\020\n\010deathnum\030\004 \001(\005\022\017\n\007itemnum\030\005 \001(\003\022\020\n\010"
  "moneynum\030\006 \001(\003\"\243\001\n\014ShopItemBase\022\r\n\005index"
  "\030\001 \001(\005\022\017\n\007item_id\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\r\n\005"
  "price\030\004 \001(\005\022\r\n\005count\030\005 \001(\005\022\024\n\014bought_cou"
  "nt\030\006 \001(\005\022\016\n\006cfg_id\030\007 \001(\005\022\020\n\010must_buy\030\010 \001"
  "(\010\022\020\n\010discount\030\t \001(\002\"\177\n\010ShopItem\022\r\n\005inde"
  "x\030\001 \001(\005\022\016\n\006cfg_id\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\r\n\005"
  "money\030\004 \001(\005\022\023\n\013is_sold_out\030\005 \001(\010\022#\n\titem"
  "_data\030\006 \001(\0132\020.idlepb.ItemData\"\274\001\n\016Deluxe"
  "ShopItem\022\r\n\005index\030\001 \001(\005\022\016\n\006cfg_id\030\002 \001(\005\022"
  "\013\n\003num\030\003 \001(\005\022\021\n\tsellcount\030\004 \001(\005\022\020\n\010disco"
  "unt\030\005 \001(\005\022\r\n\005money\030\006 \001(\005\022\023\n\013is_sold_out\030"
  "\007 \001(\010\022#\n\titem_data\030\010 \001(\0132\020.idlepb.ItemDa"
  "ta\022\020\n\010must_buy\030\t \001(\010\"z\n\017RoleVipShopData\022"
  "(\n\nshop_items\030\001 \003(\0132\024.idlepb.ShopItemBas"
  "e\022\035\n\025last_day_refresh_time\030\002 \001(\003\022\036\n\026last"
  "_week_refresh_time\030\003 \001(\003\"B\n\024CharacterMod"
  "elConfig\022\025\n\rskeleton_type\0303 \001(\005\022\023\n\013model"
  "_slots\0304 \003(\005\"^\n\026RoleAppearanceShopData\022$"
  "\n\006goods1\030\001 \003(\0132\024.idlepb.ShopItemBase\022\036\n\026"
  "last_auto_refresh_time\030\005 \001(\003\"N\n\024Appearan"
  "ceCollection\022\020\n\010group_id\030\001 \001(\005\022\020\n\010durati"
  "on\030\003 \001(\003\022\022\n\nbegin_date\030\004 \001(\003\"\321\001\n\022RoleApp"
  "earanceData\022!\n\031last_change_skeleton_time"
  "\030\001 \001(\003\0220\n\ncollection\030\002 \003(\0132\034.idlepb.Appe"
  "aranceCollection\0223\n\rcurrent_model\030\003 \001(\0132"
  "\034.idlepb.CharacterModelConfig\0221\n\tshop_da"
  "ta\030\013 \001(\0132\036.idlepb.RoleAppearanceShopData"
  "\"1\n\022AlchemyPackageItem\022\016\n\006cfg_id\030\001 \001(\005\022\013"
  "\n\003num\030\002 \001(\005\"\237\003\n\017AlchemyMakeData\022\021\n\trecip"
  "e_id\030\001 \001(\005\022\025\n\rrecipe_degree\030\002 \001(\005\022\023\n\013mat"
  "erial_id\030\003 \001(\005\022-\n\020material_quality\030\004 \001(\016"
  "2\023.idlepb.ItemQuality\022\022\n\ntarget_num\030\005 \001("
  "\005\022\017\n\007cur_num\030\006 \001(\005\022\026\n\016next_done_time\030\007 \001"
  "(\003\022)\n\005items\030\010 \003(\0132\032.idlepb.AlchemyPackag"
  "eItem\022 \n\030last_produce_item_cfg_id\030\n \001(\005\022"
  "\035\n\025last_produce_item_num\030\013 \001(\005\022\030\n\020total_"
  "start_time\030\014 \001(\003\022\027\n\017total_done_time\030\r \001("
  "\003\022\017\n\007add_exp\030\016 \001(\005\022\031\n\021cur_successed_num\030"
  "\017 \001(\005\022\026\n\016cur_failed_num\030\020 \001(\005\"P\n\021Alchemy"
  "RecipeData\022\021\n\trecipe_id\030\001 \001(\005\022\022\n\nbig_cha"
  "nce\030\002 \001(\005\022\024\n\014small_chance\030\003 \001(\005\"\301\001\n\017Role"
  "AlchemyData\022\014\n\004rank\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\022."
  "\n\rcur_make_data\030\004 \001(\0132\027.idlepb.AlchemyMa"
  "keData\022\030\n\020total_refine_num\030\007 \001(\005\022\035\n\025prod"
  "uce_quality_stats\030\010 \003(\005\022*\n\007recipes\030\t \003(\013"
  "2\031.idlepb.AlchemyRecipeData\"/\n\020ForgePack"
  "ageItem\022\016\n\006cfg_id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"\346\003\n"
  "\rForgeMakeData\022\021\n\trecipe_id\030\001 \001(\005\022\025\n\rrec"
  "ipe_degree\030\002 \001(\005\022\023\n\013material_id\030\003 \001(\005\022-\n"
  "\020material_quality\030\004 \001(\0162\023.idlepb.ItemQua"
  "lity\022\022\n\ntarget_num\030\005 \001(\005\022\017\n\007cur_num\030\006 \001("
  "\005\022\026\n\016next_done_time\030\007 \001(\003\022\'\n\005items\030\010 \003(\013"
  "2\030.idlepb.ForgePackageItem\022 \n\030last_produ"
  "ce_item_cfg_id\030\n \001(\005\022\035\n\025last_produce_ite"
  "m_num\030\013 \001(\005\022\030\n\020total_start_time\030\014 \001(\003\022\027\n"
  "\017total_done_time\030\r \001(\003\022\017\n\007add_exp\030\016 \001(\005\022"
  "\031\n\021cur_successed_num\030\017 \001(\005\022\026\n\016cur_failed"
  "_num\030\020 \001(\005\022\027\n\017ext_material_id\030\021 \001(\005\022\026\n\016a"
  "uto_sell_poor\030\022 \001(\010\022\030\n\020auto_sell_middle\030"
  "\023 \001(\010\"N\n\017ForgeRecipeData\022\021\n\trecipe_id\030\001 "
  "\001(\005\022\022\n\nbig_chance\030\002 \001(\005\022\024\n\014small_chance\030"
  "\003 \001(\005\"e\n\021LostEquipmentData\022\013\n\003uid\030\001 \001(\005\022"
  "\013\n\003tag\030\002 \001(\005\022\021\n\tlost_date\030\003 \001(\003\022#\n\titem_"
  "data\030\004 \001(\0132\020.idlepb.ItemData\"\270\002\n\rRoleFor"
  "geData\022\014\n\004rank\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\022,\n\rcur"
  "_make_data\030\004 \001(\0132\025.idlepb.ForgeMakeData\022"
  "\030\n\020total_refine_num\030\007 \001(\005\022#\n\033produce_equ"
  "ip_quality_stats\030\010 \003(\005\022(\n produce_skille"
  "quip_quality_stats\030\t \003(\005\022(\n\007recipes\030\n \003("
  "\0132\027.idlepb.ForgeRecipeData\0226\n\023lost_equip"
  "ment_data\030\025 \003(\0132\031.idlepb.LostEquipmentDa"
  "ta\022\023\n\013destroy_num\030\026 \001(\005\"9\n\020PillPropertyD"
  "ata\022\017\n\007item_id\030\001 \001(\005\022\024\n\014consumed_num\030\003 \001"
  "(\005\"y\n\nGongFaData\022\016\n\006cfg_id\030\001 \001(\005\022\r\n\005leve"
  "l\030\002 \001(\005\022\022\n\nbegin_time\030\003 \001(\003\022\"\n\005state\030\004 \001"
  "(\0162\023.idlepb.GongFaState\022\024\n\014combat_power\030"
  "\006 \001(\002\"k\n\016RoleGongFaData\022 \n\004data\030\001 \003(\0132\022."
  "idlepb.GongFaData\022\031\n\021active_max_effect\030\002"
  " \003(\005\022\034\n\024gongfa_point_use_num\030\003 \001(\005\"k\n\027Co"
  "llectionEntrySaveData\022\n\n\002id\030\001 \001(\005\022\r\n\005lev"
  "el\030\002 \001(\005\022\014\n\004star\030\003 \001(\005\022\024\n\014is_activated\030\004"
  " \001(\010\022\021\n\tpiece_num\030\005 \001(\005\"T\n\031CommonCollect"
  "ionPieceData\022$\n\007quality\030\001 \001(\0162\023.idlepb.I"
  "temQuality\022\021\n\tpiece_num\030\002 \001(\005\"[\n\035Collect"
  "ionZoneActiveAwardData\022-\n\tzone_type\030\001 \001("
  "\0162\032.idlepb.CollectionZoneType\022\013\n\003num\030\002 \001"
  "(\005\"\220\002\n\026RoleCollectionSaveData\0224\n\013all_ent"
  "ries\030\001 \003(\0132\037.idlepb.CollectionEntrySaveD"
  "ata\0228\n\rcommon_pieces\030\002 \003(\0132!.idlepb.Comm"
  "onCollectionPieceData\022!\n\031draw_award_done"
  "_histories\030\003 \003(\005\022A\n\022zone_active_awards\030\004"
  " \003(\0132%.idlepb.CollectionZoneActiveAwardD"
  "ata\022 \n\030next_reset_enhance_ticks\030\005 \001(\003\"*\n"
  "\013FuZengTuple\022\016\n\006cfg_id\030\001 \001(\005\022\013\n\003num\030\002 \003("
  "\003\"m\n\nFuZengData\022 \n\004type\030\001 \001(\0162\022.idlepb.F"
  "uZengType\022,\n\017received_record\030\002 \003(\0132\023.idl"
  "epb.FuZengTuple\022\017\n\007max_num\030\003 \001(\003\"2\n\016Role"
  "FuZengData\022 \n\004data\030\001 \003(\0132\022.idlepb.FuZeng"
  "Data\"o\n\021RoleFightModeData\022#\n\010cur_mode\030\001 "
  "\001(\0162\021.idlepb.FightMode\022\031\n\021last_attack_ti"
  "cks\030\002 \001(\003\022\032\n\022last_defence_ticks\030\003 \001(\003\"\230\001"
  "\n\022RoleNormalSettings\0220\n\020attack_lock_type"
  "\030\001 \001(\0162\026.idlepb.AttackLockType\0224\n\022attack"
  "_unlock_type\030\002 \001(\0162\030.idlepb.AttackUnlock"
  "Type\022\032\n\022show_unlock_button\030\003 \001(\010\"\254\010\n\010Rol"
  "eData\022\017\n\007user_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\022"
  "\021\n\trole_name\030\003 \001(\t\022+\n\rcurrency_data\030\004 \001("
  "\0132\024.idlepb.CurrencyData\022-\n\014physics_data\030"
  "\005 \001(\0132\027.idlepb.CultivationData\022+\n\nmagic_"
  "data\030\006 \001(\0132\027.idlepb.CultivationData\0225\n\017c"
  "ultivation_dir\030\007 \001(\0162\034.idlepb.Cultivatio"
  "nDirection\022 \n\030last_exp_cycle_timestamp\030\010"
  " \001(\003\022/\n\rdaily_counter\030\t \001(\0132\030.idlepb.Rol"
  "eDailyCounter\0222\n\014model_config\030\n \001(\0132\034.id"
  "lepb.CharacterModelConfig\022\030\n\020last_world_"
  "cfgid\030\013 \001(\005\022\'\n\016last_world_pos\030\014 \001(\0132\017.id"
  "lepb.Vector3\022\032\n\022next_teleport_time\030\016 \001(\003"
  "\022\034\n\024last_unlock_arena_id\030\017 \001(\005\022\024\n\014combat"
  "_power\030\020 \001(\003\022\023\n\013login_count\030\021 \001(\005\022\030\n\020unl"
  "ocked_modules\030\022 \003(\005\022\023\n\013create_time\030\023 \001(\003"
  "\0224\n\022pill_property_data\030\025 \003(\0132\030.idlepb.Pi"
  "llPropertyData\022-\n\nfight_mode\030\026 \001(\0132\031.idl"
  "epb.RoleFightModeData\022\031\n\021qi_collector_ra"
  "nk\030\027 \001(\005\0223\n\017normal_settings\030\032 \001(\0132\032.idle"
  "pb.RoleNormalSettings\022\024\n\014offline_time\030\033 "
  "\001(\003\0221\n\016weekly_counter\030\034 \001(\0132\031.idlepb.Rol"
  "eWeeklyCounter\022\036\n\026last_arena_world_cfgid"
  "\030\035 \001(\005\022-\n\024last_arena_world_pos\030\036 \001(\0132\017.i"
  "dlepb.Vector3\022)\n\ngame_stats\030\037 \001(\0132\025.idle"
  "pb.GameStatsData\022\"\n\032last_all_arena_world"
  "_cfgid\030  \001(\005\0221\n\030last_all_arena_world_pos"
  "\030! \001(\0132\017.idlepb.Vector3\"C\n\021SimpleAbility"
  "Data\022\n\n\002id\030\001 \001(\005\022\r\n\005grade\030\002 \001(\005\022\023\n\013study"
  "_grade\030\003 \001(\005\">\n\020SimpleGongFaData\022\n\n\002id\030\001"
  " \001(\005\022\r\n\005level\030\002 \001(\005\022\017\n\007is_full\030\003 \001(\010\"\357\005\n"
  "\010RoleInfo\022\017\n\007user_id\030\001 \001(\004\022\017\n\007role_id\030\002 "
  "\001(\004\022\021\n\trole_name\030\003 \001(\t\022\023\n\013create_time\030\004 "
  "\001(\003\022:\n\024cultivation_main_dir\030\005 \001(\0162\034.idle"
  "pb.CultivationDirection\022\035\n\025cultivation_m"
  "ain_rank\030\006 \001(\005\022<\n\026cultivation_second_dir"
  "\030\007 \001(\0162\034.idlepb.CultivationDirection\022\037\n\027"
  "cultivation_second_rank\030\010 \001(\005\0225\n\017charact"
  "er_model\030\n \001(\0132\034.idlepb.CharacterModelCo"
  "nfig\022\r\n\005title\030\013 \003(\005\022\024\n\014combat_power\030\014 \001("
  "\003\022$\n\nequipments\030\r \003(\0132\020.idlepb.ItemData\022"
  " \n\030unlocked_equipment_slots\030\016 \003(\005\022\017\n\007sep"
  "t_id\030\017 \001(\004\022+\n\rsept_position\030\020 \001(\0162\024.idle"
  "pb.SeptPosition\022\021\n\tsept_name\030\021 \001(\t\022\021\n\tse"
  "pt_logo\030\022 \001(\005\0226\n\016all_stats_data\030\023 \001(\0132\036."
  "idlepb.GameStatsAllModuleData\0224\n\021slotted"
  "_abilities\030\024 \003(\0132\031.idlepb.SimpleAbilityD"
  "ata\0226\n\023unslotted_abilities\030\025 \003(\0132\031.idlep"
  "b.SimpleAbilityData\0221\n\017gong_fa_entries\030\026"
  " \003(\0132\030.idlepb.SimpleGongFaData\"\325\001\n\021RoleI"
  "nventoryData\022\024\n\014next_item_id\030\002 \001(\003\022\037\n\005it"
  "ems\030\003 \003(\0132\020.idlepb.ItemData\022$\n\034hp_pill_c"
  "ooldown_expire_time\030\004 \001(\003\022$\n\034mp_pill_coo"
  "ldown_expire_time\030\005 \001(\003\022 \n\030unlocked_equi"
  "pment_slots\030\006 \003(\005\022\033\n\023inventory_space_num"
  "\030\007 \001(\005\"x\n\030RoleTemporaryPackageData\022+\n\005it"
  "ems\030\001 \003(\0132\034.idlepb.TemporaryPackageItem\022"
  "\031\n\021last_extract_time\030\002 \001(\003\022\024\n\014next_item_"
  "id\030\003 \001(\003\"]\n#RoleArenaExplorationStatisti"
  "calData\0226\n\005items\030\001 \003(\0132\'.idlepb.ArenaExp"
  "lorationStatisticalItem\"<\n\rQuestProgress"
  "\022\n\n\002id\030\001 \001(\005\022\020\n\010progress\030\002 \003(\005\022\r\n\005state\030"
  "\003 \001(\005\"q\n\rRoleQuestData\022\027\n\017accepted_quest"
  "s\030\001 \003(\005\022\027\n\017finished_quests\030\002 \003(\005\022.\n\017ques"
  "ts_progress\030\003 \003(\0132\025.idlepb.QuestProgress"
  "\"\251\001\n\014RoleShopData\022\037\n\005items\030\002 \003(\0132\020.idlep"
  "b.ShopItem\022 \n\030today_manual_refresh_num\030\003"
  " \001(\005\022\036\n\026last_auto_refresh_time\030\004 \001(\003\022\027\n\017"
  "last_reset_time\030\005 \001(\003\022\035\n\025guarantee_refre"
  "sh_num\030\006 \001(\005\"\302\001\n\022RoleDeluxeShopData\022%\n\005i"
  "tems\030\002 \003(\0132\026.idlepb.DeluxeShopItem\022%\n\035to"
  "day_manual_refresh_num_item\030\003 \001(\005\022%\n\035tod"
  "ay_manual_refresh_num_gold\030\004 \001(\005\022\036\n\026last"
  "_auto_refresh_time\030\005 \001(\003\022\027\n\017last_reset_t"
  "ime\030\006 \001(\003\";\n\016MailAttachment\022\n\n\002id\030\001 \001(\005\022"
  "\013\n\003num\030\002 \001(\005\022\020\n\010received\030\003 \001(\010\"\226\002\n\004Mail\022"
  "\n\n\002id\030\001 \001(\005\022\036\n\004type\030\002 \001(\0162\020.idlepb.MailT"
  "ype\022\r\n\005title\030\003 \001(\t\022\020\n\010subtitle\030\004 \001(\t\022\021\n\t"
  "body_text\030\005 \001(\t\022\016\n\006sender\030\006 \001(\t\022+\n\013attac"
  "hments\030\007 \003(\0132\026.idlepb.MailAttachment\022\022\n\n"
  "begin_date\030\010 \001(\003\022\021\n\tkeep_time\030\t \001(\005\022\017\n\007i"
  "s_read\030\n \001(\010\022\023\n\013is_received\030\013 \001(\010\022$\n\nequ"
  "ipments\030\014 \003(\0132\020.idlepb.ItemData\"u\n\014RoleM"
  "ailData\022\036\n\010mail_box\030\001 \003(\0132\014.idlepb.Mail\022"
  "\021\n\ttotal_num\030\003 \001(\005\0222\n\023system_mail_counte"
  "r\030\004 \003(\0132\025.idlepb.MapValueInt32\"x\n\023Offlin"
  "eAwardSummary\022)\n\003dir\030\001 \001(\0162\034.idlepb.Cult"
  "ivationDirection\022\023\n\013time_during\030\002 \001(\003\022\017\n"
  "\007add_exp\030\003 \001(\003\022\020\n\010add_attr\030\004 \001(\003\"{\n\017Role"
  "OfflineData\022\026\n\016last_exp_value\030\001 \001(\003\022\027\n\017l"
  "ast_attr_value\030\002 \001(\003\0227\n\022last_award_summa"
  "ry\030\003 \001(\0132\033.idlepb.OfflineAwardSummary\"6\n"
  "\016PillElixirData\022\017\n\007item_id\030\001 \001(\005\022\023\n\013hold"
  "ing_num\030\002 \001(\005\"\200\001\n\022RolePillElixirData\022)\n\t"
  "pill_data\030\001 \003(\0132\026.idlepb.PillElixirData\022"
  "\024\n\014limit_double\030\002 \001(\005\022\021\n\tlimit_exp\030\003 \001(\005"
  "\022\026\n\016limit_property\030\004 \001(\005\"\226\001\n\024AbilityEffe"
  "ctDefData\022\014\n\004type\030\001 \001(\005\022\020\n\010duration\030\002 \001("
  "\002\022\016\n\006period\030\003 \001(\002\022\027\n\017duration_policy\030\004 \001"
  "(\005\022\t\n\001x\030\n \001(\002\022\t\n\001y\030\013 \001(\002\022\t\n\001z\030\014 \001(\002\022\t\n\001m"
  "\030\r \001(\002\022\t\n\001n\030\016 \001(\002\"\302\003\n\013AbilityData\022\n\n\002id\030"
  "\001 \001(\005\022\r\n\005grade\030\002 \001(\005\022\026\n\016activetime_utc\030\003"
  " \001(\003\022\030\n\020activetime_world\030\004 \001(\002\022\021\n\tunique"
  "_id\030\005 \001(\005\022\023\n\013study_grade\030\006 \001(\005\022\020\n\010cooldo"
  "wn\030d \001(\002\022\022\n\ntarget_num\030e \001(\002\022\027\n\017target_d"
  "istance\030f \001(\002\022\034\n\024target_catchdistance\030g "
  "\001(\002\022\024\n\014attack_count\030h \001(\002\022\027\n\017phy_coeffic"
  "ient\030i \001(\002\022\022\n\nphy_damage\030j \001(\002\022\030\n\020mana_c"
  "oefficient\030k \001(\002\022\023\n\013mana_damage\030l \001(\002\022\017\n"
  "\007item_id\030m \001(\003\022\026\n\016item_maxdamage\030n \001(\002\022\022"
  "\n\nitem_cfgid\030o \001(\005\0222\n\013effect_defs\030\310\001 \003(\013"
  "2\034.idlepb.AbilityEffectDefData\"\276\001\n\021Playe"
  "rAbilityData\022&\n\tabilities\030\001 \003(\0132\023.idlepb"
  ".AbilityData\022/\n\020slotted_abilites\030\002 \003(\0132\025"
  ".idlepb.MapValueInt32\022\024\n\014active_queue\030\003 "
  "\003(\005\022\027\n\017is_shiled_first\030\004 \001(\010\022!\n\031revert_a"
  "ll_skill_cooldown\030\005 \001(\003\"z\n\013RoleZasData\022\023"
  "\n\013zas_version\030\001 \001(\005\022.\n\013zas_ability\030\002 \001(\013"
  "2\031.idlepb.PlayerAbilityData\022&\n\036shentong_"
  "upgrade_point_use_num\030\013 \001(\005\"\311\002\n\017AbilityP"
  "KResult\022\022\n\ninstigator\030\001 \001(\004\022\016\n\006target\030\002 "
  "\001(\004\022\016\n\006damage\030\n \001(\002\022\031\n\021additional_damage"
  "\030\013 \001(\002\022\016\n\006is_hit\030\014 \001(\010\022\023\n\013is_critical\030\r "
  "\001(\010\022\024\n\014is_countered\030\016 \001(\010\022\030\n\020is_extremed"
  "amage\030\017 \001(\010\022\027\n\017countereddamage\030\020 \001(\002\022\032\n\022"
  "currentattackcount\030\021 \001(\005\022\031\n\021shield_suckd"
  "amage\030\022 \001(\002\022\035\n\025is_countered_critical\030\023 \001"
  "(\010\022#\n\033countered_shield_suckdamage\030\024 \001(\002\""
  "\270\001\n\023AbilityActiveResult\022\013\n\003eid\030\001 \001(\004\022\017\n\007"
  "ability\030\002 \001(\005\022\031\n\021ability_unique_id\030\003 \001(\005"
  "\022-\n\005error\030\004 \001(\0162\036.idlepb.AbilityActiveEr"
  "rorCode\022(\n\007results\030\005 \003(\0132\027.idlepb.Abilit"
  "yPKResult\022\017\n\007effects\030\006 \003(\005\"K\n\014ShanhetuIt"
  "em\022\017\n\007item_id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\022\016\n\006weig"
  "ht\030\003 \001(\005\022\r\n\005score\030\004 \001(\005\"\206\001\n\016ShanhetuReco"
  "rd\022\013\n\003uid\030\001 \001(\003\022\017\n\007item_id\030\002 \001(\005\022\020\n\010scal"
  "e_id\030\003 \001(\005\022\r\n\005score\030\004 \001(\005\022#\n\005items\030\005 \003(\013"
  "2\024.idlepb.ShanhetuItem\022\020\n\010use_time\030\006 \001(\003"
  "\"h\n\rShanhetuBlock\022\014\n\004type\030\001 \001(\005\022\017\n\007quali"
  "ty\030\002 \001(\005\022\"\n\004item\030\003 \001(\0132\024.idlepb.Shanhetu"
  "Item\022\024\n\014event_cfg_id\030\013 \001(\005\"9\n\020ShanhetuBl"
  "ockRow\022%\n\006blocks\030\001 \003(\0132\025.idlepb.Shanhetu"
  "Block\"\177\n\013ShanhetuMap\022\014\n\004done\030\001 \001(\010\022\023\n\013cu"
  "rrent_row\030\002 \001(\005\022&\n\006record\030\003 \001(\0132\026.idlepb"
  ".ShanhetuRecord\022%\n\003map\030\004 \003(\0132\030.idlepb.Sh"
  "anhetuBlockRow\"\240\002\n\020RoleShanhetuData\022\027\n\017a"
  "uto_skip_green\030\001 \001(\010\022\026\n\016auto_skip_blue\030\002"
  " \001(\010\022\027\n\017auto_skip_perpo\030\003 \001(\010\022\026\n\016auto_sk"
  "ip_gold\030\004 \001(\010\022\025\n\rauto_skip_red\030\005 \001(\010\022\023\n\013"
  "auto_select\030\006 \001(\005\022(\n\013current_map\030\007 \001(\0132\023"
  ".idlepb.ShanhetuMap\022\021\n\ttotal_num\030\010 \001(\003\022\'"
  "\n\007records\030\t \003(\0132\026.idlepb.ShanhetuRecord\022"
  "\030\n\020last_update_date\030\014 \001(\003\"\366\003\n\023RoleLeader"
  "boardData\022\017\n\007role_id\030\001 \001(\003\022\021\n\tblike_num\030"
  "\002 \001(\005\022\027\n\017last_reset_time\030\004 \001(\003\022\024\n\014rank_m"
  "essage\030\005 \001(\t\022 \n\006weapon\030\006 \001(\0132\020.idlepb.It"
  "emData\022\037\n\005ammor\030\007 \001(\0132\020.idlepb.ItemData\022"
  "!\n\007jewlery\030\010 \001(\0132\020.idlepb.ItemData\022&\n\014sk"
  "ill_weapon\030\t \001(\0132\020.idlepb.ItemData\0220\n\020sh"
  "anhetu_history\030\n \001(\0132\026.idlepb.ShanhetuRe"
  "cord\022-\n\rshanhetu_week\030\013 \001(\0132\026.idlepb.Sha"
  "nhetuRecord\022\037\n\027monster_tower_blike_num\030\026"
  " \001(\005\022%\n\035has_received_challange_reward\030\027 "
  "\003(\005\022\021\n\tfuze_rank\030\030 \001(\005\022\021\n\tfuze_days\030\031 \001("
  "\005\022\020\n\010fuze_exp\030\032 \001(\003\022\035\n\025fuze_leaderboard_"
  "rank\030\033 \001(\005\"E\n\024RoleMonsterTowerData\022\022\n\nla"
  "st_floor\030\001 \001(\005\022\031\n\021idle_during_ticks\030\002 \001("
  "\003\"*\n\026RoleDungeonKillAllData\022\020\n\010done_uid\030"
  "\001 \003(\005\"*\n\026RoleDungeonSurviveData\022\020\n\010done_"
  "uid\030\001 \003(\005\"P\n\027BossInvasionRewardEntry\022\021\n\t"
  "unique_id\030\001 \001(\003\022\024\n\014arena_cfg_id\030\002 \001(\005\022\014\n"
  "\004rank\030\003 \001(\005\"\223\001\n\032BossInvasionKillRewardDa"
  "ta\022\023\n\013start_ticks\030\001 \001(\003\0220\n\007rewards\030\002 \003(\013"
  "2\037.idlepb.BossInvasionRewardEntry\022\024\n\014is_"
  "draw_done\030\003 \001(\010\022\030\n\020drawed_unique_id\030\004 \001("
  "\003\"e\n\034BossInvasionDamageRewardData\022\023\n\013sta"
  "rt_ticks\030\001 \001(\003\0220\n\007rewards\030\002 \003(\0132\037.idlepb"
  ".BossInvasionRewardEntry\"\300\001\n\024RoleBossInv"
  "asionData\022\030\n\020last_reset_ticks\030\001 \001(\003\0227\n\013k"
  "ill_reward\030\n \001(\0132\".idlepb.BossInvasionKi"
  "llRewardData\022;\n\rdamage_reward\030\014 \003(\0132$.id"
  "lepb.BossInvasionDamageRewardData\022\030\n\020dra"
  "wed_unique_id\030\016 \001(\003\"b\n\016RoleMasiveData\0223\n"
  "\tuser_vars\030\001 \003(\0132 .idlepb.StringKeyInt32"
  "ValueEntry\022\033\n\023next_self_unique_id\030\002 \001(\003\""
  "s\n\tCheckTask\022\017\n\007task_id\030\001 \001(\005\022\014\n\004type\030\002 "
  "\001(\005\022\020\n\010need_num\030\003 \001(\005\022\r\n\005point\030\004 \001(\005\022\020\n\010"
  "progress\030\005 \001(\005\022\024\n\014is_submitted\030\006 \001(\010\"\314\002\n"
  "\021RoleChecklistData\022\021\n\tday_point\030\001 \001(\005\022\022\n"
  "\nweek_point\030\002 \001(\005\022$\n\tday_tasks\030\003 \003(\0132\021.i"
  "dlepb.CheckTask\022%\n\nweek_tasks\030\004 \003(\0132\021.id"
  "lepb.CheckTask\022\031\n\021day_received_time\030\005 \001("
  "\005\022\032\n\022week_received_time\030\006 \001(\005\022\033\n\023last_re"
  "set_day_time\030\007 \001(\003\022\034\n\024last_reset_week_ti"
  "me\030\010 \001(\003\022\032\n\022boss_invasion_time\030\t \001(\003\022\031\n\021"
  "degree_locked_day\030\n \001(\005\022\032\n\022degree_locked"
  "_week\030\013 \001(\005\"\262\001\n\032RoleCommonItemExchangeDa"
  "ta\022\026\n\016last_reset_day\030\002 \001(\003\022\027\n\017last_reset"
  "_week\030\003 \001(\003\0220\n\021item_exchange_day\030\004 \003(\0132\025"
  ".idlepb.MapValueInt32\0221\n\022item_exchange_w"
  "eek\030\005 \003(\0132\025.idlepb.MapValueInt32\"J\n\025Role"
  "TreasuryChestData\022\030\n\020today_open_times\030\001 "
  "\003(\005\022\027\n\017guarantee_count\030\002 \003(\005\"|\n\025RoleTrea"
  "suryGachaData\022\030\n\020today_open_times\030\001 \003(\005\022"
  "\027\n\017free_open_times\030\002 \003(\005\022\027\n\017guarantee_co"
  "unt\030\003 \003(\005\022\027\n\017total_open_time\030\006 \001(\005\"\203\001\n\020T"
  "reasuryShopItem\022\r\n\005index\030\001 \001(\005\022\017\n\007item_i"
  "d\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\r\n\005price\030\004 \001(\005\022\r\n\005c"
  "ount\030\005 \001(\005\022\024\n\014bought_count\030\006 \001(\005\022\016\n\006cfg_"
  "id\030\007 \001(\005\"{\n\024RoleTreasuryShopData\022,\n\nshop"
  "_items\030\001 \003(\0132\030.idlepb.TreasuryShopItem\022\032"
  "\n\022today_refresh_time\030\002 \001(\005\022\031\n\021shop_refre"
  "sh_flag\030\003 \001(\010\"\341\001\n\024RoleTreasurySaveData\022:"
  "\n\023treasury_chest_data\030\001 \001(\0132\035.idlepb.Rol"
  "eTreasuryChestData\022:\n\023treasury_gacha_dat"
  "a\030\002 \001(\0132\035.idlepb.RoleTreasuryGachaData\0228"
  "\n\022treasury_shop_data\030\003 \001(\0132\034.idlepb.Role"
  "TreasuryShopData\022\027\n\017last_reset_time\030\006 \001("
  "\003\"w\n\022ArenaCheckListData\022\024\n\014checklist_id\030"
  "\001 \001(\005\022\025\n\rchecklist_num\030\002 \001(\005\0224\n\017checklis"
  "t_state\030\003 \001(\0162\033.idlepb.ArenaCheckListSta"
  "te\"f\n\030ArenaCheckListRewardData\022\021\n\treward"
  "_id\030\001 \001(\005\0227\n\014reward_state\030\002 \001(\0162!.idlepb"
  ".ArenaCheckListRewardState\"\213\001\n\026RoleArena"
  "CheckListData\0224\n\020arena_check_data\030\001 \003(\0132"
  "\032.idlepb.ArenaCheckListData\022;\n\021check_rew"
  "ard_data\030\002 \003(\0132 .idlepb.ArenaCheckListRe"
  "wardData\"J\n\023RoleSeptInviteEntry\022&\n\010posit"
  "ion\030\001 \001(\0162\024.idlepb.SeptPosition\022\013\n\003num\030\002"
  " \001(\005\"r\n\tSeptQuest\022\013\n\003uid\030\004 \001(\005\022\020\n\010quest_"
  "id\030\001 \001(\005\022\022\n\nbegin_time\030\002 \001(\003\022\020\n\010received"
  "\030\003 \001(\010\022\r\n\005level\030\013 \001(\005\022\021\n\tmoney_num\030\014 \001(\005"
  "\"\217\001\n\021RoleSeptQuestData\022!\n\006quests\030\001 \003(\0132\021"
  ".idlepb.SeptQuest\022 \n\030today_manual_refres"
  "h_num\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\022\023\n\013current_ex"
  "p\030\004 \001(\005\022\021\n\ttotal_num\030\005 \001(\005\"g\n\020RoleSeptSh"
  "opData\022!\n\031last_reset_time_sept_shop\030\001 \001("
  "\003\0220\n\020exchange_history\030\002 \003(\0132\026.idlepb.Sim"
  "pleItemData\"\220\003\n\014RoleSeptData\022\027\n\017next_joi"
  "n_ticks\030\001 \001(\003\0229\n\024daily_invite_entries\030\002 "
  "\003(\0132\033.idlepb.RoleSeptInviteEntry\0220\n\016sept"
  "_shop_data\030\006 \001(\0132\030.idlepb.RoleSeptShopDa"
  "ta\0222\n\017sept_quest_data\030\013 \001(\0132\031.idlepb.Rol"
  "eSeptQuestData\022\"\n\032sept_demon_cumulative_"
  "time\030\014 \001(\005\022#\n\033sept_demon_stage_reward_nu"
  "m\030\r \001(\005\022\'\n\037sept_demon_stage_reward_use_n"
  "um\030\016 \001(\005\022)\n!sept_demon_damage_reward_rec"
  "eived\030\017 \003(\005\022)\n!sept_demon_damage_reward_"
  "finished\030\020 \003(\005\"\302\001\n\022SeptDemonWorldData\022\022\n"
  "\nis_started\030\001 \001(\010\022\025\n\rcur_end_ticks\030\002 \001(\003"
  "\022\027\n\017next_open_ticks\030\003 \001(\003\022\021\n\tcur_stage\030\004"
  " \001(\005\022\024\n\014cur_stage_hp\030\005 \001(\002\022\027\n\017cur_stage_"
  "maxhp\030\006 \001(\002\022\022\n\nlast_stage\030\007 \001(\005\022\022\n\nplaye"
  "r_ids\030\010 \003(\003\"(\n\rSimpleCounter\022\n\n\002id\030\001 \001(\005"
  "\022\013\n\003num\030\002 \001(\003\"Q\n\017FunctionCounter\022\025\n\rfunc"
  "tion_type\030\001 \001(\005\022\'\n\010counters\030\002 \003(\0132\025.idle"
  "pb.SimpleCounter\"H\n\023RoleLifeCounterData\022"
  "1\n\020function_counter\030\002 \003(\0132\027.idlepb.Funct"
  "ionCounter\"j\n\026FarmlandManagementInfo\022\021\n\t"
  "plant_uid\030\001 \001(\005\022\024\n\014target_stage\030\002 \001(\005\022\021\n"
  "\tauto_seed\030\003 \001(\010\022\024\n\014auto_harvest\030\004 \001(\010\"\231"
  "\001\n\021FarmlandPlantData\022\021\n\tplant_uid\030\001 \001(\005\022"
  "\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\020\n\010rotation\030\004 \001(\005\022"
  "\021\n\tconfig_id\030\005 \001(\005\022\020\n\010shenling\030\006 \001(\005\022\022\n\n"
  "begin_date\030\007 \001(\003\022\020\n\010speed_up\030\010 \001(\005\"\206\002\n\020R"
  "oleFarmlandData\0221\n\016current_plants\030\001 \003(\0132"
  "\031.idlepb.FarmlandPlantData\0226\n\016managment_"
  "plan\030\002 \003(\0132\036.idlepb.FarmlandManagementIn"
  "fo\022&\n\runlock_blocks\030\003 \003(\0132\017.idlepb.Vecto"
  "r2\022\024\n\014farmer_grade\030\004 \001(\005\022\035\n\025farmer_frien"
  "dship_exp\030\005 \001(\005\022*\n\nripe_items\030\006 \003(\0132\026.id"
  "lepb.SimpleItemData\"\257\001\n\016RoleAvatarData\022\014"
  "\n\004rank\030\001 \001(\005\022\033\n\023current_world_index\030\002 \001("
  "\005\022\022\n\nbegin_time\030\003 \001(\003\022\026\n\016last_draw_time\030"
  "\004 \001(\003\022,\n\014temp_package\030\005 \003(\0132\026.idlepb.Sim"
  "pleItemData\022\030\n\020last_wrold_index\030\006 \001(\005\"\200\001"
  "\n\020BiographyRoleLog\022\020\n\010dao_year\030\001 \001(\005\022\020\n\010"
  "log_type\030\002 \001(\005\022\021\n\tpoem_seed\030\003 \001(\005\022\021\n\tzon"
  "e_name\030\004 \001(\t\022\021\n\trole_name\030\005 \001(\t\022\017\n\007conte"
  "nt\030\006 \001(\t\"z\n\021RoleBiographyData\022\030\n\020receive"
  "d_cfg_ids\030\001 \003(\005\022\036\n\026received_event_cfg_id"
  "s\030\002 \003(\005\022+\n\trole_logs\030\003 \003(\0132\030.idlepb.Biog"
  "raphyRoleLog\"\251\002\n\016SimpleRoleInfo\022\017\n\007role_"
  "id\030\001 \001(\004\022\021\n\trole_name\030\002 \001(\t\0222\n\014model_con"
  "fig\030\003 \001(\0132\034.idlepb.CharacterModelConfig\022"
  "\014\n\004rank\030\004 \001(\005\022@\n\032role_cultivation_direct"
  "ion\030\005 \001(\0162\034.idlepb.CultivationDirection\022"
  "\021\n\tsept_name\030\006 \001(\t\022+\n\rsept_position\030\007 \001("
  "\0162\024.idlepb.SeptPosition\022\034\n\024last_online_t"
  "imespan\030\025 \001(\003\022\021\n\tserver_id\030\026 \001(\003\"\214\001\n\013Cha"
  "tMessage\022\017\n\007role_id\030\001 \001(\004\022\014\n\004text\030\002 \001(\t\022"
  ")\n\trole_info\030\003 \001(\0132\026.idlepb.SimpleRoleIn"
  "fo\022%\n\004type\030\004 \001(\0162\027.idlepb.ChatMessageTyp"
  "e\022\014\n\004time\030\005 \001(\003\"b\n\021PrivateChatRecord\022\017\n\007"
  "role_id\030\001 \001(\004\022(\n\013chat_record\030\002 \003(\0132\023.idl"
  "epb.ChatMessage\022\022\n\nunread_num\030\003 \001(\005\"Q\n\025R"
  "olePrivateChatRecord\022\017\n\007role_id\030\001 \001(\004\022\'\n"
  "\004data\030\002 \003(\0132\031.idlepb.PrivateChatRecord\"\215"
  "\001\n\010ChatData\022+\n\016colony_servers\030\001 \003(\0132\023.id"
  "lepb.ChatMessage\022)\n\014quad_servers\030\002 \003(\0132\023"
  ".idlepb.ChatMessage\022)\n\014local_server\030\003 \003("
  "\0132\023.idlepb.ChatMessage\"e\n\016FriendListItem"
  "\022\017\n\007role_id\030\001 \001(\003\022\024\n\014relationship\030\002 \001(\005\022"
  ",\n\004type\030\003 \001(\0162\036.idlepb.FriendRelationshi"
  "pType\"\251\001\n\016RoleFriendData\022+\n\013friend_list\030"
  "\001 \003(\0132\026.idlepb.FriendListItem\022\024\n\014request"
  "_list\030\002 \003(\003\022\022\n\nblock_list\030\003 \003(\003\022\022\n\nmy_re"
  "quest\030\004 \003(\003\022,\n\014history_list\030\005 \003(\0132\026.idle"
  "pb.FriendListItem\"\322\002\n\027RoleOfflineFunctio"
  "nData\022\017\n\007role_id\030\001 \001(\003\022\033\n\005mails\030\002 \003(\0132\014."
  "idlepb.Mail\022+\n\013friend_data\030\003 \001(\0132\026.idlep"
  "b.RoleFriendData\0224\n\021private_chat_data\030\004 "
  "\003(\0132\031.idlepb.PrivateChatRecord\022+\n\trole_l"
  "ogs\030\005 \003(\0132\030.idlepb.BiographyRoleLog\0225\n\020l"
  "eaderboard_data\030\006 \001(\0132\033.idlepb.RoleLeade"
  "rboardData\022\021\n\trole_name\030\013 \001(\t\022\014\n\004rank\030\014 "
  "\001(\005\022\016\n\006degree\030\r \001(\005\022\021\n\ttotal_exp\030\016 \001(\003\"F"
  "\n\021ServerCounterData\0221\n\020function_counter\030"
  "\001 \003(\0132\027.idlepb.FunctionCounter\"\277\001\n\034Socia"
  "lFunctionCommonSaveData\022;\n\022offline_role_"
  "datas\030\001 \003(\0132\037.idlepb.RoleOfflineFunction"
  "Data\0226\n\023server_counter_data\030\002 \001(\0132\031.idle"
  "pb.ServerCounterData\022*\n\trole_list\030\003 \003(\0132"
  "\027.idlepb.StringInt64Pair\"\226\017\n\014RoleSaveDat"
  "a\022#\n\trole_data\030\001 \001(\0132\020.idlepb.RoleData\0226"
  "\n\016all_stats_data\030\002 \001(\0132\036.idlepb.GameStat"
  "sAllModuleData\022\n\n\002hp\030\003 \001(\002\022\n\n\002mp\030\004 \001(\002\022$"
  "\n\005quest\030\005 \001(\0132\025.idlepb.RoleQuestData\022\"\n\004"
  "shop\030\006 \001(\0132\024.idlepb.RoleShopData\022;\n\021temp"
  "orary_package\030\007 \001(\0132 .idlepb.RoleTempora"
  "ryPackageData\022,\n\tinventory\030\010 \001(\0132\031.idlep"
  "b.RoleInventoryData\022-\n\014offline_data\030\020 \001("
  "\0132\027.idlepb.RoleOfflineData\022-\n\014alchemy_da"
  "ta\030\021 \001(\0132\027.idlepb.RoleAlchemyData\022/\n\013del"
  "uxe_shop\030\022 \001(\0132\032.idlepb.RoleDeluxeShopDa"
  "ta\0225\n\020leaderboard_data\030\023 \001(\0132\033.idlepb.Ro"
  "leLeaderboardData\022\'\n\tmail_data\030\024 \001(\0132\024.i"
  "dlepb.RoleMailData\022)\n\nforge_data\030\025 \001(\0132\025"
  ".idlepb.RoleForgeData\0223\n\017pillelixir_data"
  "\030\026 \001(\0132\032.idlepb.RolePillElixirData\022>\n\027co"
  "mmon_cultivation_data\030\027 \001(\0132\035.idlepb.Com"
  "monCultivationData\022%\n\010zas_data\030\030 \001(\0132\023.i"
  "dlepb.RoleZasData\0228\n\022monster_tower_data\030"
  "\031 \001(\0132\034.idlepb.RoleMonsterTowerData\022/\n\rs"
  "hanhetu_data\030\032 \001(\0132\030.idlepb.RoleShanhetu"
  "Data\0228\n\022boss_invasion_data\030\033 \001(\0132\034.idlep"
  "b.RoleBossInvasionData\022,\n\014massive_data\030\034"
  " \001(\0132\026.idlepb.RoleMasiveData\0221\n\016checklis"
  "t_data\030\035 \001(\0132\031.idlepb.RoleChecklistData\022"
  "E\n\031common_item_exchange_data\030\036 \001(\0132\".idl"
  "epb.RoleCommonItemExchangeData\022\'\n\tsept_d"
  "ata\030\037 \001(\0132\024.idlepb.RoleSeptData\0229\n\023treas"
  "ury_chest_data\030! \001(\0132\034.idlepb.RoleTreasu"
  "rySaveData\022+\n\013gongfa_data\030\" \001(\0132\026.idlepb"
  ".RoleGongFaData\022+\n\013fuzeng_data\030# \001(\0132\026.i"
  "dlepb.RoleFuZengData\0227\n\017collection_data\030"
  "$ \001(\0132\036.idlepb.RoleCollectionSaveData\0226\n"
  "\021life_counter_data\030% \001(\0132\033.idlepb.RoleLi"
  "feCounterData\0223\n\017appearance_data\030& \001(\0132\032"
  ".idlepb.RoleAppearanceData\022=\n\025arena_chec"
  "k_list_data\030\' \001(\0132\036.idlepb.RoleArenaChec"
  "kListData\022=\n\025dungeon_kill_all_data\030( \001(\013"
  "2\036.idlepb.RoleDungeonKillAllData\022/\n\rfarm"
  "land_data\030) \001(\0132\030.idlepb.RoleFarmlandDat"
  "a\022<\n\024dungeon_survive_data\030* \001(\0132\036.idlepb"
  ".RoleDungeonSurviveData\022+\n\013friend_data\030+"
  " \001(\0132\026.idlepb.RoleFriendData\022+\n\013avatar_d"
  "ata\030, \001(\0132\026.idlepb.RoleAvatarData\022K\n\026are"
  "na_statistical_data\030- \001(\0132+.idlepb.RoleA"
  "renaExplorationStatisticalData\0221\n\016biogra"
  "phy_data\030. \001(\0132\031.idlepb.RoleBiographyDat"
  "a\022.\n\rvip_shop_data\030/ \001(\0132\027.idlepb.RoleVi"
  "pShopData\"\236\001\n\023BattleHistoryRecord\022\r\n\005ind"
  "ex\030\001 \001(\005\022\025\n\rworld_seconds\030\002 \001(\002\022\030\n\020sourc"
  "e_entity_id\030\003 \001(\004\022\030\n\020target_entity_id\030\004 "
  "\001(\004\022\027\n\017message_type_id\030\005 \001(\004\022\024\n\014message_"
  "body\030\006 \001(\014\"\304\002\n\016BattleRoleInfo\022\017\n\007role_id"
  "\030\001 \001(\003\022\021\n\trole_name\030\002 \001(\t\022\017\n\007zone_id\030\003 \001"
  "(\005\022\023\n\013score_delta\030\010 \001(\005\022\r\n\005score\030\t \001(\005\022\022"
  "\n\nrank_delta\030\n \001(\005\022\014\n\004rank\030\013 \001(\005\022\024\n\014comb"
  "at_power\030\014 \001(\003\0222\n\014model_config\030\r \001(\0132\034.i"
  "dlepb.CharacterModelConfig\022:\n\024cultivatio"
  "n_main_dir\030\016 \001(\0162\034.idlepb.CultivationDir"
  "ection\022\035\n\025cultivation_main_rank\030\017 \001(\005\022\022\n"
  "\nnpc_cfg_id\030\020 \001(\005\"\325\001\n\nBattleInfo\022\020\n\010worl"
  "d_id\030\001 \001(\003\022\024\n\014attacker_win\030\002 \001(\010\022(\n\010atta"
  "cker\030\n \001(\0132\026.idlepb.BattleRoleInfo\022(\n\010de"
  "fender\030\013 \001(\0132\026.idlepb.BattleRoleInfo\022\023\n\013"
  "begin_ticks\030\014 \001(\003\022\021\n\tend_ticks\030\r \001(\003\022#\n\t"
  "solo_type\030\016 \001(\0162\020.idlepb.SoloType\"_\n\rBat"
  "tleHistory\022 \n\004info\030\001 \001(\0132\022.idlepb.Battle"
  "Info\022,\n\007records\030\004 \003(\0132\033.idlepb.BattleHis"
  "toryRecord\"Z\n\016RoleBattleInfo\022 \n\004base\030\001 \001"
  "(\0132\022.idlepb.BattleInfo\022\023\n\013can_revenge\030\002 "
  "\001(\010\022\021\n\tround_num\030\003 \001(\005\"F\n\031RoleBattleHist"
  "orySaveData\022)\n\thistories\030\005 \003(\0132\026.idlepb."
  "RoleBattleInfo\"@\n\016CompressedData\022\025\n\rorig"
  "inal_size\030\001 \001(\005\022\027\n\017compressed_data\030\002 \001(\014"
  "\"S\n\031DoBreathingExerciseResult\022\n\n\002ok\030\001 \001("
  "\010\022\017\n\007perfect\030\002 \001(\010\022\013\n\003exp\030\003 \001(\002\022\014\n\004rate\030"
  "\004 \001(\005\"t\n\022SystemNoticeParams\022\n\n\002s1\030\001 \001(\t\022"
  "\n\n\002s2\030\002 \001(\t\022\n\n\002s3\030\003 \001(\t\022\n\n\002s4\030\004 \001(\t\022\n\n\002n"
  "1\030\005 \001(\003\022\n\n\002n2\030\006 \001(\003\022\n\n\002n3\030\007 \001(\003\022\n\n\002n4\030\010 "
  "\001(\003\"-\n\010DropItem\022\017\n\007item_id\030\001 \001(\005\022\020\n\010item"
  "_num\030\002 \001(\005\"\204\001\n\035BiographyEventLeaderboard"
  "Item\022\013\n\003uid\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\020\n\010param"
  "_d1\030\006 \001(\005\022\020\n\010param_n1\030\007 \001(\003\022\021\n\tparams_n1"
  "\030\010 \003(\003\022\021\n\tparams_d1\030\t \003(\005\"\217\001\n\035BiographyE"
  "ventLeaderboardList\0228\n\tlist_data\030\001 \003(\0132%"
  ".idlepb.BiographyEventLeaderboardItem\022\016\n"
  "\006cfg_id\030\002 \001(\005\022\022\n\nbegin_date\030\003 \001(\003\022\020\n\010fin"
  "ished\030\004 \001(\010\"i\n\023LeaderboardListItem\022\017\n\007ro"
  "le_id\030\001 \001(\003\022\021\n\tuser_name\030\002 \001(\t\022\024\n\014proper"
  "ty_num\030\003 \001(\003\022\014\n\004time\030\004 \001(\003\022\n\n\002d1\030\005 \001(\005\"e"
  "\n\025SeptDataOnLeaderboard\022\017\n\007sept_id\030\001 \001(\003"
  "\022\021\n\tsept_name\030\002 \001(\t\022\022\n\nlogo_index\030\003 \001(\005\022"
  "\024\n\014property_num\030\004 \001(\003\"R\n\017LeaderboardList"
  "\022.\n\tlist_data\030\001 \003(\0132\033.idlepb.Leaderboard"
  "ListItem\022\017\n\007type_id\030\002 \001(\005\"\323\002\n\023Leaderboar"
  "dSaveData\022+\n\nlists_data\030\001 \003(\0132\027.idlepb.L"
  "eaderboardList\0220\n\tsept_list\030\003 \003(\0132\035.idle"
  "pb.SeptDataOnLeaderboard\0228\n\027monster_towe"
  "r_challange\030\013 \003(\0132\027.idlepb.LeaderboardLi"
  "st\022\034\n\024last_reset_week_time\030\025 \001(\003\022\033\n\023last"
  "_reset_day_time\030\026 \001(\003\022>\n\017biography_lists"
  "\030\037 \003(\0132%.idlepb.BiographyEventLeaderboar"
  "dList\022\020\n\010fuze_exp\030  \001(\003\022\026\n\016fuze_mail_lis"
  "t\030! \003(\003\"\227\001\n\033SeptDemonDamageHistoryEntry\022"
  "\017\n\007role_id\030\001 \001(\003\022\021\n\trole_name\030\002 \001(\t\022\024\n\014t"
  "otal_damage\030\003 \001(\002\022\014\n\004rank\030\004 \001(\005\0220\n\nrole_"
  "model\030\005 \001(\0132\034.idlepb.CharacterModelConfi"
  "g\"V\n\032SeptDemonDamageHistoryData\0228\n\013all_e"
  "ntries\030\004 \003(\0132#.idlepb.SeptDemonDamageHis"
  "toryEntry\"\217\001\n\014SelfSeptInfo\022\017\n\007sept_id\030\001 "
  "\001(\003\022\021\n\tsept_name\030\002 \001(\t\022+\n\rsept_position\030"
  "\003 \001(\0162\024.idlepb.SeptPosition\022\027\n\017next_join"
  "_ticks\030\004 \001(\003\022\025\n\rland_fighting\030\005 \001(\010\"\337\003\n\022"
  "CreatePlayerParams\022\017\n\007role_id\030\001 \001(\003\022\021\n\tr"
  "ole_name\030\002 \001(\t\022+\n\021physics_rank_data\030\003 \001("
  "\0132\020.idlepb.RankData\022)\n\017magic_rank_data\030\004"
  " \001(\0132\020.idlepb.RankData\0222\n\014model_config\030\005"
  " \001(\0132\034.idlepb.CharacterModelConfig\022/\n\014ab"
  "ility_data\030\014 \001(\0132\031.idlepb.PlayerAbilityD"
  "ata\022%\n\nfight_mode\030\r \001(\0162\021.idlepb.FightMo"
  "de\022\020\n\010is_dummy\030\016 \001(\010\0223\n\017normal_settings\030"
  "\017 \001(\0132\032.idlepb.RoleNormalSettings\022,\n\016sel"
  "f_sept_info\030\020 \001(\0132\024.idlepb.SelfSeptInfo\022"
  "\024\n\014combat_power\030\021 \001(\003\0226\n\016all_stats_data\030"
  "\024 \001(\0132\036.idlepb.GameStatsAllModuleData\"R\n"
  "\020WorldRuntimeData\022\020\n\010world_id\030\001 \001(\004\022\025\n\rw"
  "orld_seconds\030\002 \001(\002\022\025\n\rtime_dilation\030\003 \001("
  "\002\"i\n\027NotifyGiftPackageResult\022%\n\005items\030\001 "
  "\003(\0132\026.idlepb.SimpleItemData\022\024\n\014gift_item"
  "_id\030\002 \001(\005\022\021\n\tconfig_id\030\006 \003(\005\"b\n\025NotifyUs"
  "ePillProperty\022\017\n\007item_id\030\001 \001(\005\022\013\n\003num\030\002 "
  "\001(\005\022\025\n\rproperty_type\030\003 \001(\005\022\024\n\014property_n"
  "um\030\004 \001(\002\"\201\001\n\030EntityCultivationDirData\022)\n"
  "\003dir\030\001 \001(\0162\034.idlepb.CultivationDirection"
  "\022\014\n\004rank\030\002 \001(\005\022\r\n\005layer\030\003 \001(\005\022\r\n\005stage\030\004"
  " \001(\005\022\016\n\006degree\030\005 \001(\005\"y\n\025EntityCultivatio"
  "nData\022/\n\005major\030\001 \001(\0132 .idlepb.EntityCult"
  "ivationDirData\022/\n\005minor\030\002 \001(\0132 .idlepb.E"
  "ntityCultivationDirData\"\272\001\n\023SwordPkTopLi"
  "stEntry\022\017\n\007role_id\030\001 \001(\003\022\021\n\trole_name\030\002 "
  "\001(\t\0220\n\nrole_model\030\003 \001(\0132\034.idlepb.Charact"
  "erModelConfig\022\r\n\005score\030\004 \001(\005\022\032\n\022score_up"
  "date_ticks\030\005 \001(\003\022\014\n\004rank\030\006 \001(\005\022\024\n\014combat"
  "_power\030\007 \001(\003\"\305\001\n\025SwordPkGlobalSaveData\022\021"
  "\n\tround_num\030\001 \001(\005\022\031\n\021begin_local_ticks\030\002"
  " \001(\003\022\027\n\017end_local_ticks\030\003 \001(\003\022\017\n\007is_over"
  "\030\004 \001(\010\022%\n\035next_daily_reward_local_ticks\030"
  "\005 \001(\003\022-\n\010top_list\030\006 \003(\0132\033.idlepb.SwordPk"
  "TopListEntry*4\n\025ReplicationTargetType\022\014\n"
  "\010RTT_Self\020\000\022\r\n\tRTT_World\020\001*q\n\021SystemNoti"
  "ceStyle\022\032\n\026SystemNoticeStyle_None\020\000\022\034\n\030S"
  "ystemNoticeStyle_Dialog\020\001\022\"\n\036SystemNotic"
  "eStyle_ScreenCenter\020\002*E\n\016SystemNoticeId\022"
  "\027\n\023SystemNoticeId_None\020\000\022\032\n\026SystemNotice"
  "Id_AddItem\020\007*\277\t\n\024RoleDailyCounterType\022\037\n"
  "\033RDCT_BreathingExerciseTimes\020\000\022\032\n\026RDCT_T"
  "akeMedicineTimes\020\001\022 \n\034RDCT_LeaderboardCl"
  "ickLikeNum\020\002\022\025\n\021RDCT_AlchemyTimes\020\003\022\023\n\017R"
  "DCT_ForgeTimes\020\004\022\037\n\033RDCT_UseExtraMateria"
  "lsTimes\020\005\022$\n RDCT_TotalBreathingExercise"
  "Times\020\006\022!\n\035RDCT_ForgeProduceQuality_None"
  "\020\007\022\"\n\036RDCT_ForgeProduceQuality_White\020\010\022\""
  "\n\036RDCT_ForgeProduceQuality_Green\020\t\022!\n\035RD"
  "CT_ForgeProduceQuality_Blue\020\n\022#\n\037RDCT_Fo"
  "rgeProduceQuality_Purple\020\013\022#\n\037RDCT_Forge"
  "ProduceQuality_Orange\020\014\022 \n\034RDCT_ForgePro"
  "duceQuality_Red\020\r\022\032\n\026RDCT_GiftPackage_Ot"
  "her\020\016\022\030\n\024RDCT_GiftPackage_Phy\020\017\022\032\n\026RDCT_"
  "GiftPackage_Magic\020\020\022\032\n\026RDCT_GiftPackage_"
  "Money\020\021\022\033\n\027RDCT_GiftPackage_Weapon\020\022\022\035\n\031"
  "RDCT_GiftPackage_Treasure\020\023\022\036\n\032RDCT_Gift"
  "Package_Materials\020\024\022\034\n\030RDCT_GiftPackage_"
  "GrabBag\020\025\022$\n RDCT_GiftPackage_MonsterInv"
  "asion\020\026\022\037\n\033RDCT_GiftPackage_StorageBag\020\027"
  "\022\033\n\027RDCT_GiftPackage_Select\020\030\022#\n\037RDCT_Mo"
  "nsterTowerChallengeTimes\020\031\022,\n(RDCT_Monst"
  "erTowerClosedDoorTrainingTimes\020\032\022\032\n\026RDCT"
  "_FriendlySoloTimes\020\033\022\025\n\021RDCT_SwordPkTime"
  "s\020\034\022\031\n\025RDCT_ExchangeHeroCard\020\035\022 \n\034RDCT_T"
  "odaySeptConstructTimes\020\036\022#\n\037RDCT_TodaySe"
  "archSeptByNameTimes\020\037\022\037\n\033RDCT_GatherSept"
  "StoneSeconds\020 \022!\n\035RDCT_MonsterTowerClick"
  "LikeNum\020!\022\031\n\025RDCT_FarmlandWatering\020\"\022\031\n\025"
  "RDCT_FriendRequestNum\020#\022\030\n\024RDCT_FriendSe"
  "archNum\020$\022\023\n\017RDCT_FuZeReward\020%*8\n\025RoleWe"
  "eklyCounterType\022\037\n\033RWCT_GatherSeptStoneS"
  "econds\020\000*\226\003\n\026AbilityActiveErrorCode\022\"\n\036A"
  "bilityActiveErrorCode_Success\020\000\022\"\n\036Abili"
  "tyActiveErrorCode_Timeout\020\001\022)\n%AbilityAc"
  "tiveErrorCode_InvalidAbility\020\002\022#\n\037Abilit"
  "yActiveErrorCode_Cooldown\020\013\022(\n$AbilityAc"
  "tiveErrorCode_CostNotEnough\020\014\022!\n\035Ability"
  "ActiveErrorCode_Silent\020\r\022#\n\037AbilityActiv"
  "eErrorCode_Freezing\020\016\022 \n\034AbilityActiveEr"
  "rorCode_Death\020\017\022%\n!AbilityActiveErrorCod"
  "e_OwnerCheck\020\020\022)\n%AbilityActiveErrorCode"
  "_CommonCooldown\020\021*X\n\026FriendRelationshipT"
  "ype\022\014\n\010FRT_None\020\000\022\016\n\nFRT_Friend\020\001\022\017\n\013FRT"
  "_Partner\020\002\022\017\n\013FRT_Blocked\020\003*\323\001\n\020LoginGam"
  "eRetCode\022\027\n\023LoginGameRetCode_Ok\020\000\022\034\n\030Log"
  "inGameRetCode_Unknown\020\001\022\033\n\027LoginGameRetC"
  "ode_NoRole\020\002\022#\n\037LoginGameRetCode_Duplica"
  "teLogin\020\003\022#\n\037LoginGameRetCode_AccountInv"
  "alid\020\004\022!\n\035LoginGameRetCode_VersionError\020"
  "\005*I\n\010GotoType\022\021\n\rGotoType_None\020\000\022\023\n\017Goto"
  "Type_Relive\020\001\022\025\n\021GotoType_Teleport\020\002*\220\001\n"
  "\017TravelWorldType\022\032\n\026TravelWorldType_Norm"
  "al\020\000\022\031\n\025TravelWorldType_Force\020\001\022 \n\034Trave"
  "lWorldType_ClientNoOpen\020\002\022$\n TravelWorld"
  "Type_ClientCityNoOpen\020\003*\216\001\n\022BiographyEve"
  "ntType\022\016\n\nBET_Degree\020\000\022\022\n\016BET_FullDegree"
  "\020\001\022\023\n\017BET_KillMonster\020\002\022\024\n\020BET_SeptDonat"
  "ion\020\003\022\023\n\017BET_CombatPower\020\004\022\024\n\020BET_Immort"
  "alRoad\020\005*\'\n\rRoleDirtyFlag\022\026\n\022RoleDirtyFl"
  "ag_Save\020\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_common_2eproto_deps[2] = {
  &::descriptor_table_defines_2eproto,
  &::descriptor_table_net_2eproto,
};
static ::_pbi::once_flag descriptor_table_common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false, false, 31057, descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_deps, 2, 165,
    schemas, file_default_instances, TableStruct_common_2eproto::offsets,
    file_level_metadata_common_2eproto, file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
namespace idlepb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReplicationTargetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool ReplicationTargetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemNoticeStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool SystemNoticeStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemNoticeId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool SystemNoticeId_IsValid(int value) {
  switch (value) {
    case 0:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleDailyCounterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[3];
}
bool RoleDailyCounterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleWeeklyCounterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[4];
}
bool RoleWeeklyCounterType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AbilityActiveErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[5];
}
bool AbilityActiveErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FriendRelationshipType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[6];
}
bool FriendRelationshipType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginGameRetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[7];
}
bool LoginGameRetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GotoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[8];
}
bool GotoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TravelWorldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[9];
}
bool TravelWorldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BiographyEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[10];
}
bool BiographyEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleDirtyFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[11];
}
bool RoleDirtyFlag_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Int64Data::_Internal {
 public:
};

Int64Data::Int64Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.Int64Data)
}
Int64Data::Int64Data(const Int64Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Int64Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:idlepb.Int64Data)
}

inline void Int64Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Int64Data::~Int64Data() {
  // @@protoc_insertion_point(destructor:idlepb.Int64Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Int64Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Int64Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Int64Data::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.Int64Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int64Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Int64Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.Int64Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.Int64Data)
  return target;
}

size_t Int64Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.Int64Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Int64Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Int64Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Int64Data::GetClassData() const { return &_class_data_; }


void Int64Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Int64Data*>(&to_msg);
  auto& from = static_cast<const Int64Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.Int64Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Int64Data::CopyFrom(const Int64Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.Int64Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Data::IsInitialized() const {
  return true;
}

void Int64Data::InternalSwap(Int64Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Int64Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}

// ===================================================================

class Vector2::_Internal {
 public:
};

Vector2::Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.Vector2)
}
Vector2::Vector2(const Vector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:idlepb.Vector2)
}

inline void Vector2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2::~Vector2() {
  // @@protoc_insertion_point(destructor:idlepb.Vector2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.Vector2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.Vector2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.Vector2)
  return target;
}

size_t Vector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.Vector2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2::GetClassData() const { return &_class_data_; }


void Vector2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2*>(&to_msg);
  auto& from = static_cast<const Vector2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.Vector2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2::CopyFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2::IsInitialized() const {
  return true;
}

void Vector2::InternalSwap(Vector2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2, _impl_.y_)
      + sizeof(Vector2::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Vector2, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}

// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:idlepb.Vector3)
}

inline void Vector3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:idlepb.Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.Vector3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }


void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.Vector3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}

// ===================================================================

class Color::_Internal {
 public:
};

Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Color* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.a_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.a_));
  // @@protoc_insertion_point(copy_constructor:idlepb.Color)
}

inline void Color::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){0}
    , decltype(_impl_.g_){0}
    , decltype(_impl_.b_){0}
    , decltype(_impl_.a_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:idlepb.Color)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Color::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a_) -
      reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.a_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // float g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // float b = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // float a = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 4;
  }

  // float g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    total_size += 1 + 4;
  }

  // float a = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }


void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Color*>(&to_msg);
  auto& from = static_cast<const Color&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.Color)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = from._internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = from._internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    _this->_internal_set_g(from._internal_g());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = from._internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = from._internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, _impl_.a_)
      + sizeof(Color::_impl_.a_)
      - PROTOBUF_FIELD_OFFSET(Color, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}

// ===================================================================

class Int64Pair::_Internal {
 public:
};

Int64Pair::Int64Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.Int64Pair)
}
Int64Pair::Int64Pair(const Int64Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Int64Pair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.key_, &from._impl_.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:idlepb.Int64Pair)
}

inline void Int64Pair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){int64_t{0}}
    , decltype(_impl_.value_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Int64Pair::~Int64Pair() {
  // @@protoc_insertion_point(destructor:idlepb.Int64Pair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Int64Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Int64Pair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Int64Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.Int64Pair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int64Pair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Int64Pair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.Int64Pair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_key(), target);
  }

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.Int64Pair)
  return target;
}

size_t Int64Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.Int64Pair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_key());
  }

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Int64Pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Int64Pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Int64Pair::GetClassData() const { return &_class_data_; }


void Int64Pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Int64Pair*>(&to_msg);
  auto& from = static_cast<const Int64Pair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.Int64Pair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Int64Pair::CopyFrom(const Int64Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.Int64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Pair::IsInitialized() const {
  return true;
}

void Int64Pair::InternalSwap(Int64Pair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Int64Pair, _impl_.value_)
      + sizeof(Int64Pair::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(Int64Pair, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Int64Pair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}

// ===================================================================

class StringKeyInt32ValueEntry::_Internal {
 public:
};

StringKeyInt32ValueEntry::StringKeyInt32ValueEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.StringKeyInt32ValueEntry)
}
StringKeyInt32ValueEntry::StringKeyInt32ValueEntry(const StringKeyInt32ValueEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringKeyInt32ValueEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:idlepb.StringKeyInt32ValueEntry)
}

inline void StringKeyInt32ValueEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringKeyInt32ValueEntry::~StringKeyInt32ValueEntry() {
  // @@protoc_insertion_point(destructor:idlepb.StringKeyInt32ValueEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringKeyInt32ValueEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void StringKeyInt32ValueEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringKeyInt32ValueEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.StringKeyInt32ValueEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringKeyInt32ValueEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.StringKeyInt32ValueEntry.key"));
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringKeyInt32ValueEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.StringKeyInt32ValueEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.StringKeyInt32ValueEntry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.StringKeyInt32ValueEntry)
  return target;
}

size_t StringKeyInt32ValueEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.StringKeyInt32ValueEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringKeyInt32ValueEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringKeyInt32ValueEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringKeyInt32ValueEntry::GetClassData() const { return &_class_data_; }


void StringKeyInt32ValueEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringKeyInt32ValueEntry*>(&to_msg);
  auto& from = static_cast<const StringKeyInt32ValueEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.StringKeyInt32ValueEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringKeyInt32ValueEntry::CopyFrom(const StringKeyInt32ValueEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.StringKeyInt32ValueEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringKeyInt32ValueEntry::IsInitialized() const {
  return true;
}

void StringKeyInt32ValueEntry::InternalSwap(StringKeyInt32ValueEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringKeyInt32ValueEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}

// ===================================================================

class MapValueInt32::_Internal {
 public:
};

MapValueInt32::MapValueInt32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.MapValueInt32)
}
MapValueInt32::MapValueInt32(const MapValueInt32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapValueInt32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.key_, &from._impl_.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:idlepb.MapValueInt32)
}

inline void MapValueInt32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){0}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapValueInt32::~MapValueInt32() {
  // @@protoc_insertion_point(destructor:idlepb.MapValueInt32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapValueInt32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MapValueInt32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapValueInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.MapValueInt32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapValueInt32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapValueInt32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.MapValueInt32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.MapValueInt32)
  return target;
}

size_t MapValueInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.MapValueInt32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapValueInt32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapValueInt32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapValueInt32::GetClassData() const { return &_class_data_; }


void MapValueInt32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapValueInt32*>(&to_msg);
  auto& from = static_cast<const MapValueInt32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.MapValueInt32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapValueInt32::CopyFrom(const MapValueInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.MapValueInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapValueInt32::IsInitialized() const {
  return true;
}

void MapValueInt32::InternalSwap(MapValueInt32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapValueInt32, _impl_.value_)
      + sizeof(MapValueInt32::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(MapValueInt32, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapValueInt32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[6]);
}

// ===================================================================

class StringInt64Pair::_Internal {
 public:
};

StringInt64Pair::StringInt64Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.StringInt64Pair)
}
StringInt64Pair::StringInt64Pair(const StringInt64Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringInt64Pair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.str_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    _this->_impl_.str_.Set(from._internal_str(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:idlepb.StringInt64Pair)
}

inline void StringInt64Pair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.str_){}
    , decltype(_impl_.value_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringInt64Pair::~StringInt64Pair() {
  // @@protoc_insertion_point(destructor:idlepb.StringInt64Pair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringInt64Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_.Destroy();
}

void StringInt64Pair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringInt64Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.StringInt64Pair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.str_.ClearToEmpty();
  _impl_.value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringInt64Pair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.StringInt64Pair.str"));
        } else
          goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringInt64Pair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.StringInt64Pair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.StringInt64Pair.str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str(), target);
  }

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.StringInt64Pair)
  return target;
}

size_t StringInt64Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.StringInt64Pair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 1;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringInt64Pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringInt64Pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringInt64Pair::GetClassData() const { return &_class_data_; }


void StringInt64Pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringInt64Pair*>(&to_msg);
  auto& from = static_cast<const StringInt64Pair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.StringInt64Pair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str().empty()) {
    _this->_internal_set_str(from._internal_str());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringInt64Pair::CopyFrom(const StringInt64Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.StringInt64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringInt64Pair::IsInitialized() const {
  return true;
}

void StringInt64Pair::InternalSwap(StringInt64Pair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.str_, lhs_arena,
      &other->_impl_.str_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringInt64Pair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[7]);
}

// ===================================================================

class AbilityEffectData::_Internal {
 public:
};

AbilityEffectData::AbilityEffectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AbilityEffectData)
}
AbilityEffectData::AbilityEffectData(const AbilityEffectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbilityEffectData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.period_){}
    , decltype(_impl_.duration_policy_){}
    , decltype(_impl_.starttime_utc_){}
    , decltype(_impl_.starttime_world_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.m_){}
    , decltype(_impl_.n_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.n_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.n_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AbilityEffectData)
}

inline void AbilityEffectData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.period_){0}
    , decltype(_impl_.duration_policy_){0}
    , decltype(_impl_.starttime_utc_){int64_t{0}}
    , decltype(_impl_.starttime_world_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.m_){0}
    , decltype(_impl_.n_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AbilityEffectData::~AbilityEffectData() {
  // @@protoc_insertion_point(destructor:idlepb.AbilityEffectData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbilityEffectData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AbilityEffectData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbilityEffectData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AbilityEffectData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.n_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.n_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbilityEffectData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 duration_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.duration_policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float starttime_world = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.starttime_world_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 starttime_utc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.starttime_utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float m = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float n = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbilityEffectData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AbilityEffectData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // float duration = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // float period = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_period = this->_internal_period();
  uint32_t raw_period;
  memcpy(&raw_period, &tmp_period, sizeof(tmp_period));
  if (raw_period != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_period(), target);
  }

  // int32 duration_policy = 4;
  if (this->_internal_duration_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_duration_policy(), target);
  }

  // float starttime_world = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_starttime_world = this->_internal_starttime_world();
  uint32_t raw_starttime_world;
  memcpy(&raw_starttime_world, &tmp_starttime_world, sizeof(tmp_starttime_world));
  if (raw_starttime_world != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_starttime_world(), target);
  }

  // int64 starttime_utc = 6;
  if (this->_internal_starttime_utc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_starttime_utc(), target);
  }

  // float x = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_x(), target);
  }

  // float y = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_y(), target);
  }

  // float z = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_z(), target);
  }

  // float m = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_m = this->_internal_m();
  uint32_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_m(), target);
  }

  // float n = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_n = this->_internal_n();
  uint32_t raw_n;
  memcpy(&raw_n, &tmp_n, sizeof(tmp_n));
  if (raw_n != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AbilityEffectData)
  return target;
}

size_t AbilityEffectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AbilityEffectData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // float duration = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 1 + 4;
  }

  // float period = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_period = this->_internal_period();
  uint32_t raw_period;
  memcpy(&raw_period, &tmp_period, sizeof(tmp_period));
  if (raw_period != 0) {
    total_size += 1 + 4;
  }

  // int32 duration_policy = 4;
  if (this->_internal_duration_policy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration_policy());
  }

  // int64 starttime_utc = 6;
  if (this->_internal_starttime_utc() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_starttime_utc());
  }

  // float starttime_world = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_starttime_world = this->_internal_starttime_world();
  uint32_t raw_starttime_world;
  memcpy(&raw_starttime_world, &tmp_starttime_world, sizeof(tmp_starttime_world));
  if (raw_starttime_world != 0) {
    total_size += 1 + 4;
  }

  // float x = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float m = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_m = this->_internal_m();
  uint32_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    total_size += 1 + 4;
  }

  // float n = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_n = this->_internal_n();
  uint32_t raw_n;
  memcpy(&raw_n, &tmp_n, sizeof(tmp_n));
  if (raw_n != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbilityEffectData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbilityEffectData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbilityEffectData::GetClassData() const { return &_class_data_; }


void AbilityEffectData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbilityEffectData*>(&to_msg);
  auto& from = static_cast<const AbilityEffectData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AbilityEffectData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = from._internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_period = from._internal_period();
  uint32_t raw_period;
  memcpy(&raw_period, &tmp_period, sizeof(tmp_period));
  if (raw_period != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  if (from._internal_duration_policy() != 0) {
    _this->_internal_set_duration_policy(from._internal_duration_policy());
  }
  if (from._internal_starttime_utc() != 0) {
    _this->_internal_set_starttime_utc(from._internal_starttime_utc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_starttime_world = from._internal_starttime_world();
  uint32_t raw_starttime_world;
  memcpy(&raw_starttime_world, &tmp_starttime_world, sizeof(tmp_starttime_world));
  if (raw_starttime_world != 0) {
    _this->_internal_set_starttime_world(from._internal_starttime_world());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_m = from._internal_m();
  uint32_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    _this->_internal_set_m(from._internal_m());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_n = from._internal_n();
  uint32_t raw_n;
  memcpy(&raw_n, &tmp_n, sizeof(tmp_n));
  if (raw_n != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbilityEffectData::CopyFrom(const AbilityEffectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AbilityEffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityEffectData::IsInitialized() const {
  return true;
}

void AbilityEffectData::InternalSwap(AbilityEffectData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbilityEffectData, _impl_.n_)
      + sizeof(AbilityEffectData::_impl_.n_)
      - PROTOBUF_FIELD_OFFSET(AbilityEffectData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbilityEffectData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[8]);
}

// ===================================================================

class GameStatData::_Internal {
 public:
};

GameStatData::GameStatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.GameStatData)
}
GameStatData::GameStatData(const GameStatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStatData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:idlepb.GameStatData)
}

inline void GameStatData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameStatData::~GameStatData() {
  // @@protoc_insertion_point(destructor:idlepb.GameStatData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStatData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameStatData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStatData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.GameStatData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStatData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStatData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.GameStatData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.GameStatData)
  return target;
}

size_t GameStatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.GameStatData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStatData::GetClassData() const { return &_class_data_; }


void GameStatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStatData*>(&to_msg);
  auto& from = static_cast<const GameStatData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.GameStatData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStatData::CopyFrom(const GameStatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.GameStatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatData::IsInitialized() const {
  return true;
}

void GameStatData::InternalSwap(GameStatData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStatData, _impl_.value_)
      + sizeof(GameStatData::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(GameStatData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStatData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[9]);
}

// ===================================================================

class GameStatsData::_Internal {
 public:
};

GameStatsData::GameStatsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.GameStatsData)
}
GameStatsData::GameStatsData(const GameStatsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStatsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.GameStatsData)
}

inline void GameStatsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameStatsData::~GameStatsData() {
  // @@protoc_insertion_point(destructor:idlepb.GameStatsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStatsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void GameStatsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStatsData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.GameStatsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStatsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.GameStatData stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStatsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.GameStatsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.GameStatData stats = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.GameStatsData)
  return target;
}

size_t GameStatsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.GameStatsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.GameStatData stats = 1;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStatsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStatsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStatsData::GetClassData() const { return &_class_data_; }


void GameStatsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStatsData*>(&to_msg);
  auto& from = static_cast<const GameStatsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.GameStatsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStatsData::CopyFrom(const GameStatsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.GameStatsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatsData::IsInitialized() const {
  return true;
}

void GameStatsData::InternalSwap(GameStatsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStatsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[10]);
}

// ===================================================================

class GameStatsModuleData::_Internal {
 public:
  static const ::idlepb::GameStatsData& stats(const GameStatsModuleData* msg);
};

const ::idlepb::GameStatsData&
GameStatsModuleData::_Internal::stats(const GameStatsModuleData* msg) {
  return *msg->_impl_.stats_;
}
GameStatsModuleData::GameStatsModuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.GameStatsModuleData)
}
GameStatsModuleData::GameStatsModuleData(const GameStatsModuleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStatsModuleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    _this->_impl_.stats_ = new ::idlepb::GameStatsData(*from._impl_.stats_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:idlepb.GameStatsModuleData)
}

inline void GameStatsModuleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameStatsModuleData::~GameStatsModuleData() {
  // @@protoc_insertion_point(destructor:idlepb.GameStatsModuleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStatsModuleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stats_;
}

void GameStatsModuleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStatsModuleData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.GameStatsModuleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStatsModuleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GameStatsData stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStatsModuleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.GameStatsModuleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // .idlepb.GameStatsData stats = 2;
  if (this->_internal_has_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.GameStatsModuleData)
  return target;
}

size_t GameStatsModuleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.GameStatsModuleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.GameStatsData stats = 2;
  if (this->_internal_has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stats_);
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStatsModuleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStatsModuleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStatsModuleData::GetClassData() const { return &_class_data_; }


void GameStatsModuleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStatsModuleData*>(&to_msg);
  auto& from = static_cast<const GameStatsModuleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.GameStatsModuleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stats()) {
    _this->_internal_mutable_stats()->::idlepb::GameStatsData::MergeFrom(
        from._internal_stats());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStatsModuleData::CopyFrom(const GameStatsModuleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.GameStatsModuleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatsModuleData::IsInitialized() const {
  return true;
}

void GameStatsModuleData::InternalSwap(GameStatsModuleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStatsModuleData, _impl_.type_)
      + sizeof(GameStatsModuleData::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GameStatsModuleData, _impl_.stats_)>(
          reinterpret_cast<char*>(&_impl_.stats_),
          reinterpret_cast<char*>(&other->_impl_.stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStatsModuleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[11]);
}

// ===================================================================

class GameStatsAllModuleData::_Internal {
 public:
};

GameStatsAllModuleData::GameStatsAllModuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.GameStatsAllModuleData)
}
GameStatsAllModuleData::GameStatsAllModuleData(const GameStatsAllModuleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStatsAllModuleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.all_module_){from._impl_.all_module_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.GameStatsAllModuleData)
}

inline void GameStatsAllModuleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.all_module_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameStatsAllModuleData::~GameStatsAllModuleData() {
  // @@protoc_insertion_point(destructor:idlepb.GameStatsAllModuleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStatsAllModuleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.all_module_.~RepeatedPtrField();
}

void GameStatsAllModuleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStatsAllModuleData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.GameStatsAllModuleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.all_module_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStatsAllModuleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.GameStatsModuleData all_module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_module(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStatsAllModuleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.GameStatsAllModuleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.GameStatsModuleData all_module = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_module_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_module(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.GameStatsAllModuleData)
  return target;
}

size_t GameStatsAllModuleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.GameStatsAllModuleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.GameStatsModuleData all_module = 1;
  total_size += 1UL * this->_internal_all_module_size();
  for (const auto& msg : this->_impl_.all_module_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStatsAllModuleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStatsAllModuleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStatsAllModuleData::GetClassData() const { return &_class_data_; }


void GameStatsAllModuleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStatsAllModuleData*>(&to_msg);
  auto& from = static_cast<const GameStatsAllModuleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.GameStatsAllModuleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.all_module_.MergeFrom(from._impl_.all_module_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStatsAllModuleData::CopyFrom(const GameStatsAllModuleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.GameStatsAllModuleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatsAllModuleData::IsInitialized() const {
  return true;
}

void GameStatsAllModuleData::InternalSwap(GameStatsAllModuleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.all_module_.InternalSwap(&other->_impl_.all_module_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStatsAllModuleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[12]);
}

// ===================================================================

class RoleAttribute::_Internal {
 public:
};

RoleAttribute::RoleAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleAttribute)
}
RoleAttribute::RoleAttribute(const RoleAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.health_){}
    , decltype(_impl_.max_health_){}
    , decltype(_impl_.mana_){}
    , decltype(_impl_.max_mana_){}
    , decltype(_impl_.mind_){}
    , decltype(_impl_.strength_){}
    , decltype(_impl_.intellect_){}
    , decltype(_impl_.agility_){}
    , decltype(_impl_.move_speed_){}
    , decltype(_impl_.phy_att_){}
    , decltype(_impl_.phy_def_){}
    , decltype(_impl_.mag_att_){}
    , decltype(_impl_.mag_def_){}
    , decltype(_impl_.phy_dodge_){}
    , decltype(_impl_.mag_dodge_){}
    , decltype(_impl_.phy_hit_){}
    , decltype(_impl_.mag_hit_){}
    , decltype(_impl_.crit_){}
    , decltype(_impl_.crit_def_){}
    , decltype(_impl_.hp_recover_percent_){}
    , decltype(_impl_.mp_recover_percent_){}
    , decltype(_impl_.crit_coef_){}
    , decltype(_impl_.crit_block_){}
    , decltype(_impl_.crit_additional_damage_){}
    , decltype(_impl_.arena_money_add_percent_){}
    , decltype(_impl_.mag_break_){}
    , decltype(_impl_.phy_break_){}
    , decltype(_impl_.mag_block_){}
    , decltype(_impl_.phy_block_){}
    , decltype(_impl_.fen_qi_){}
    , decltype(_impl_.tuna_num_){}
    , decltype(_impl_.tuna_add_percent_){}
    , decltype(_impl_.medicine_num_){}
    , decltype(_impl_.medicine_add_percent_){}
    , decltype(_impl_.baseqi_add_percent_){}
    , decltype(_impl_.shen_tong_damage_to_player_add_percent_){}
    , decltype(_impl_.shen_tong_damage_to_player_reduce_percent_){}
    , decltype(_impl_.fa_bao_damage_to_player_add_percent_){}
    , decltype(_impl_.fa_bao_damage_to_player_reduce_percent_){}
    , decltype(_impl_.phy_damage_add_percent_){}
    , decltype(_impl_.mag_damage_add_percent_){}
    , decltype(_impl_.phy_damage_reduce_percent_){}
    , decltype(_impl_.mag_damage_reduce_percent_){}
    , decltype(_impl_.attack_monster_damage_add_percent_){}
    , decltype(_impl_.take_monster_damage_reduce_percent_){}
    , decltype(_impl_.base_hp_add_percent_){}
    , decltype(_impl_.base_mp_add_percent_){}
    , decltype(_impl_.base_phy_att_add_percent_){}
    , decltype(_impl_.base_mag_att_add_percent_){}
    , decltype(_impl_.base_phy_def_add_percent_){}
    , decltype(_impl_.base_mag_def_add_percent_){}
    , decltype(_impl_.base_phy_hit_add_percent_){}
    , decltype(_impl_.base_mag_hit_add_percent_){}
    , decltype(_impl_.base_phy_dodge_add_percent_){}
    , decltype(_impl_.base_mag_dodge_add_percent_){}
    , decltype(_impl_.base_crit_add_percent_){}
    , decltype(_impl_.base_crit_def_add_percent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.health_, &from._impl_.health_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.base_crit_def_add_percent_) -
    reinterpret_cast<char*>(&_impl_.health_)) + sizeof(_impl_.base_crit_def_add_percent_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleAttribute)
}

inline void RoleAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.health_){0}
    , decltype(_impl_.max_health_){0}
    , decltype(_impl_.mana_){0}
    , decltype(_impl_.max_mana_){0}
    , decltype(_impl_.mind_){0}
    , decltype(_impl_.strength_){0}
    , decltype(_impl_.intellect_){0}
    , decltype(_impl_.agility_){0}
    , decltype(_impl_.move_speed_){0}
    , decltype(_impl_.phy_att_){0}
    , decltype(_impl_.phy_def_){0}
    , decltype(_impl_.mag_att_){0}
    , decltype(_impl_.mag_def_){0}
    , decltype(_impl_.phy_dodge_){0}
    , decltype(_impl_.mag_dodge_){0}
    , decltype(_impl_.phy_hit_){0}
    , decltype(_impl_.mag_hit_){0}
    , decltype(_impl_.crit_){0}
    , decltype(_impl_.crit_def_){0}
    , decltype(_impl_.hp_recover_percent_){0}
    , decltype(_impl_.mp_recover_percent_){0}
    , decltype(_impl_.crit_coef_){0}
    , decltype(_impl_.crit_block_){0}
    , decltype(_impl_.crit_additional_damage_){0}
    , decltype(_impl_.arena_money_add_percent_){0}
    , decltype(_impl_.mag_break_){0}
    , decltype(_impl_.phy_break_){0}
    , decltype(_impl_.mag_block_){0}
    , decltype(_impl_.phy_block_){0}
    , decltype(_impl_.fen_qi_){0}
    , decltype(_impl_.tuna_num_){0}
    , decltype(_impl_.tuna_add_percent_){0}
    , decltype(_impl_.medicine_num_){0}
    , decltype(_impl_.medicine_add_percent_){0}
    , decltype(_impl_.baseqi_add_percent_){0}
    , decltype(_impl_.shen_tong_damage_to_player_add_percent_){0}
    , decltype(_impl_.shen_tong_damage_to_player_reduce_percent_){0}
    , decltype(_impl_.fa_bao_damage_to_player_add_percent_){0}
    , decltype(_impl_.fa_bao_damage_to_player_reduce_percent_){0}
    , decltype(_impl_.phy_damage_add_percent_){0}
    , decltype(_impl_.mag_damage_add_percent_){0}
    , decltype(_impl_.phy_damage_reduce_percent_){0}
    , decltype(_impl_.mag_damage_reduce_percent_){0}
    , decltype(_impl_.attack_monster_damage_add_percent_){0}
    , decltype(_impl_.take_monster_damage_reduce_percent_){0}
    , decltype(_impl_.base_hp_add_percent_){0}
    , decltype(_impl_.base_mp_add_percent_){0}
    , decltype(_impl_.base_phy_att_add_percent_){0}
    , decltype(_impl_.base_mag_att_add_percent_){0}
    , decltype(_impl_.base_phy_def_add_percent_){0}
    , decltype(_impl_.base_mag_def_add_percent_){0}
    , decltype(_impl_.base_phy_hit_add_percent_){0}
    , decltype(_impl_.base_mag_hit_add_percent_){0}
    , decltype(_impl_.base_phy_dodge_add_percent_){0}
    , decltype(_impl_.base_mag_dodge_add_percent_){0}
    , decltype(_impl_.base_crit_add_percent_){0}
    , decltype(_impl_.base_crit_def_add_percent_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleAttribute::~RoleAttribute() {
  // @@protoc_insertion_point(destructor:idlepb.RoleAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.health_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.base_crit_def_add_percent_) -
      reinterpret_cast<char*>(&_impl_.health_)) + sizeof(_impl_.base_crit_def_add_percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float health = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.health_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max_health = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.max_health_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mana = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.mana_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max_mana = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.max_mana_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.mind_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float strength = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float intellect = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.intellect_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float agility = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.agility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float move_speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_att = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.phy_att_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_def = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.phy_def_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_att = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.mag_att_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_def = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.mag_def_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_dodge = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.phy_dodge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_dodge = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.mag_dodge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_hit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.phy_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_hit = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.mag_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float crit = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _impl_.crit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float crit_def = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _impl_.crit_def_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hp_recover_percent = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _impl_.hp_recover_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mp_recover_percent = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _impl_.mp_recover_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float crit_coef = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _impl_.crit_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float crit_block = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _impl_.crit_block_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float crit_additional_damage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _impl_.crit_additional_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float arena_money_add_percent = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _impl_.arena_money_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_break = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _impl_.mag_break_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_break = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _impl_.phy_break_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_block = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _impl_.mag_block_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_block = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _impl_.phy_block_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fen_qi = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _impl_.fen_qi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float tuna_num = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.tuna_num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float tuna_add_percent = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.tuna_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float medicine_num = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.medicine_num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float medicine_add_percent = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.medicine_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float baseqi_add_percent = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.baseqi_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float shen_tong_damage_to_player_add_percent = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.shen_tong_damage_to_player_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float shen_tong_damage_to_player_reduce_percent = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.shen_tong_damage_to_player_reduce_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fa_bao_damage_to_player_add_percent = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.fa_bao_damage_to_player_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fa_bao_damage_to_player_reduce_percent = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.fa_bao_damage_to_player_reduce_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_damage_add_percent = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.phy_damage_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_damage_add_percent = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _impl_.mag_damage_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_damage_reduce_percent = 211;
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _impl_.phy_damage_reduce_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_damage_reduce_percent = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _impl_.mag_damage_reduce_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attack_monster_damage_add_percent = 213;
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _impl_.attack_monster_damage_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float take_monster_damage_reduce_percent = 214;
      case 214:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _impl_.take_monster_damage_reduce_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_hp_add_percent = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _impl_.base_hp_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_mp_add_percent = 216;
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _impl_.base_mp_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_phy_att_add_percent = 217;
      case 217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _impl_.base_phy_att_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_mag_att_add_percent = 218;
      case 218:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _impl_.base_mag_att_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_phy_def_add_percent = 219;
      case 219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _impl_.base_phy_def_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_mag_def_add_percent = 220;
      case 220:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _impl_.base_mag_def_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_phy_hit_add_percent = 221;
      case 221:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _impl_.base_phy_hit_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_mag_hit_add_percent = 222;
      case 222:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _impl_.base_mag_hit_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_phy_dodge_add_percent = 223;
      case 223:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _impl_.base_phy_dodge_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_mag_dodge_add_percent = 224;
      case 224:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _impl_.base_mag_dodge_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_crit_add_percent = 225;
      case 225:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.base_crit_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_crit_def_add_percent = 226;
      case 226:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.base_crit_def_add_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float health = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_health = this->_internal_health();
  uint32_t raw_health;
  memcpy(&raw_health, &tmp_health, sizeof(tmp_health));
  if (raw_health != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_health(), target);
  }

  // float max_health = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_health = this->_internal_max_health();
  uint32_t raw_max_health;
  memcpy(&raw_max_health, &tmp_max_health, sizeof(tmp_max_health));
  if (raw_max_health != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_health(), target);
  }

  // float mana = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mana = this->_internal_mana();
  uint32_t raw_mana;
  memcpy(&raw_mana, &tmp_mana, sizeof(tmp_mana));
  if (raw_mana != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_mana(), target);
  }

  // float max_mana = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_mana = this->_internal_max_mana();
  uint32_t raw_max_mana;
  memcpy(&raw_max_mana, &tmp_max_mana, sizeof(tmp_max_mana));
  if (raw_max_mana != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_max_mana(), target);
  }

  // float mind = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mind = this->_internal_mind();
  uint32_t raw_mind;
  memcpy(&raw_mind, &tmp_mind, sizeof(tmp_mind));
  if (raw_mind != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_mind(), target);
  }

  // float strength = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strength = this->_internal_strength();
  uint32_t raw_strength;
  memcpy(&raw_strength, &tmp_strength, sizeof(tmp_strength));
  if (raw_strength != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_strength(), target);
  }

  // float intellect = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intellect = this->_internal_intellect();
  uint32_t raw_intellect;
  memcpy(&raw_intellect, &tmp_intellect, sizeof(tmp_intellect));
  if (raw_intellect != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_intellect(), target);
  }

  // float agility = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_agility = this->_internal_agility();
  uint32_t raw_agility;
  memcpy(&raw_agility, &tmp_agility, sizeof(tmp_agility));
  if (raw_agility != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_agility(), target);
  }

  // float move_speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_move_speed(), target);
  }

  // float phy_att = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_att = this->_internal_phy_att();
  uint32_t raw_phy_att;
  memcpy(&raw_phy_att, &tmp_phy_att, sizeof(tmp_phy_att));
  if (raw_phy_att != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_phy_att(), target);
  }

  // float phy_def = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_def = this->_internal_phy_def();
  uint32_t raw_phy_def;
  memcpy(&raw_phy_def, &tmp_phy_def, sizeof(tmp_phy_def));
  if (raw_phy_def != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_phy_def(), target);
  }

  // float mag_att = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_att = this->_internal_mag_att();
  uint32_t raw_mag_att;
  memcpy(&raw_mag_att, &tmp_mag_att, sizeof(tmp_mag_att));
  if (raw_mag_att != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_mag_att(), target);
  }

  // float mag_def = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_def = this->_internal_mag_def();
  uint32_t raw_mag_def;
  memcpy(&raw_mag_def, &tmp_mag_def, sizeof(tmp_mag_def));
  if (raw_mag_def != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_mag_def(), target);
  }

  // float phy_dodge = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_dodge = this->_internal_phy_dodge();
  uint32_t raw_phy_dodge;
  memcpy(&raw_phy_dodge, &tmp_phy_dodge, sizeof(tmp_phy_dodge));
  if (raw_phy_dodge != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_phy_dodge(), target);
  }

  // float mag_dodge = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_dodge = this->_internal_mag_dodge();
  uint32_t raw_mag_dodge;
  memcpy(&raw_mag_dodge, &tmp_mag_dodge, sizeof(tmp_mag_dodge));
  if (raw_mag_dodge != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_mag_dodge(), target);
  }

  // float phy_hit = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_hit = this->_internal_phy_hit();
  uint32_t raw_phy_hit;
  memcpy(&raw_phy_hit, &tmp_phy_hit, sizeof(tmp_phy_hit));
  if (raw_phy_hit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_phy_hit(), target);
  }

  // float mag_hit = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_hit = this->_internal_mag_hit();
  uint32_t raw_mag_hit;
  memcpy(&raw_mag_hit, &tmp_mag_hit, sizeof(tmp_mag_hit));
  if (raw_mag_hit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_mag_hit(), target);
  }

  // float crit = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit = this->_internal_crit();
  uint32_t raw_crit;
  memcpy(&raw_crit, &tmp_crit, sizeof(tmp_crit));
  if (raw_crit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_crit(), target);
  }

  // float crit_def = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_def = this->_internal_crit_def();
  uint32_t raw_crit_def;
  memcpy(&raw_crit_def, &tmp_crit_def, sizeof(tmp_crit_def));
  if (raw_crit_def != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_crit_def(), target);
  }

  // float hp_recover_percent = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp_recover_percent = this->_internal_hp_recover_percent();
  uint32_t raw_hp_recover_percent;
  memcpy(&raw_hp_recover_percent, &tmp_hp_recover_percent, sizeof(tmp_hp_recover_percent));
  if (raw_hp_recover_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_hp_recover_percent(), target);
  }

  // float mp_recover_percent = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp_recover_percent = this->_internal_mp_recover_percent();
  uint32_t raw_mp_recover_percent;
  memcpy(&raw_mp_recover_percent, &tmp_mp_recover_percent, sizeof(tmp_mp_recover_percent));
  if (raw_mp_recover_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_mp_recover_percent(), target);
  }

  // float crit_coef = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_coef = this->_internal_crit_coef();
  uint32_t raw_crit_coef;
  memcpy(&raw_crit_coef, &tmp_crit_coef, sizeof(tmp_crit_coef));
  if (raw_crit_coef != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_crit_coef(), target);
  }

  // float crit_block = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_block = this->_internal_crit_block();
  uint32_t raw_crit_block;
  memcpy(&raw_crit_block, &tmp_crit_block, sizeof(tmp_crit_block));
  if (raw_crit_block != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_crit_block(), target);
  }

  // float crit_additional_damage = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_additional_damage = this->_internal_crit_additional_damage();
  uint32_t raw_crit_additional_damage;
  memcpy(&raw_crit_additional_damage, &tmp_crit_additional_damage, sizeof(tmp_crit_additional_damage));
  if (raw_crit_additional_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_crit_additional_damage(), target);
  }

  // float arena_money_add_percent = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_arena_money_add_percent = this->_internal_arena_money_add_percent();
  uint32_t raw_arena_money_add_percent;
  memcpy(&raw_arena_money_add_percent, &tmp_arena_money_add_percent, sizeof(tmp_arena_money_add_percent));
  if (raw_arena_money_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_arena_money_add_percent(), target);
  }

  // float mag_break = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_break = this->_internal_mag_break();
  uint32_t raw_mag_break;
  memcpy(&raw_mag_break, &tmp_mag_break, sizeof(tmp_mag_break));
  if (raw_mag_break != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(26, this->_internal_mag_break(), target);
  }

  // float phy_break = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_break = this->_internal_phy_break();
  uint32_t raw_phy_break;
  memcpy(&raw_phy_break, &tmp_phy_break, sizeof(tmp_phy_break));
  if (raw_phy_break != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_phy_break(), target);
  }

  // float mag_block = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_block = this->_internal_mag_block();
  uint32_t raw_mag_block;
  memcpy(&raw_mag_block, &tmp_mag_block, sizeof(tmp_mag_block));
  if (raw_mag_block != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_mag_block(), target);
  }

  // float phy_block = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_block = this->_internal_phy_block();
  uint32_t raw_phy_block;
  memcpy(&raw_phy_block, &tmp_phy_block, sizeof(tmp_phy_block));
  if (raw_phy_block != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_phy_block(), target);
  }

  // float fen_qi = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fen_qi = this->_internal_fen_qi();
  uint32_t raw_fen_qi;
  memcpy(&raw_fen_qi, &tmp_fen_qi, sizeof(tmp_fen_qi));
  if (raw_fen_qi != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_fen_qi(), target);
  }

  // float tuna_num = 200;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tuna_num = this->_internal_tuna_num();
  uint32_t raw_tuna_num;
  memcpy(&raw_tuna_num, &tmp_tuna_num, sizeof(tmp_tuna_num));
  if (raw_tuna_num != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(200, this->_internal_tuna_num(), target);
  }

  // float tuna_add_percent = 201;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tuna_add_percent = this->_internal_tuna_add_percent();
  uint32_t raw_tuna_add_percent;
  memcpy(&raw_tuna_add_percent, &tmp_tuna_add_percent, sizeof(tmp_tuna_add_percent));
  if (raw_tuna_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(201, this->_internal_tuna_add_percent(), target);
  }

  // float medicine_num = 202;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_medicine_num = this->_internal_medicine_num();
  uint32_t raw_medicine_num;
  memcpy(&raw_medicine_num, &tmp_medicine_num, sizeof(tmp_medicine_num));
  if (raw_medicine_num != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(202, this->_internal_medicine_num(), target);
  }

  // float medicine_add_percent = 203;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_medicine_add_percent = this->_internal_medicine_add_percent();
  uint32_t raw_medicine_add_percent;
  memcpy(&raw_medicine_add_percent, &tmp_medicine_add_percent, sizeof(tmp_medicine_add_percent));
  if (raw_medicine_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(203, this->_internal_medicine_add_percent(), target);
  }

  // float baseqi_add_percent = 204;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_baseqi_add_percent = this->_internal_baseqi_add_percent();
  uint32_t raw_baseqi_add_percent;
  memcpy(&raw_baseqi_add_percent, &tmp_baseqi_add_percent, sizeof(tmp_baseqi_add_percent));
  if (raw_baseqi_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(204, this->_internal_baseqi_add_percent(), target);
  }

  // float shen_tong_damage_to_player_add_percent = 205;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shen_tong_damage_to_player_add_percent = this->_internal_shen_tong_damage_to_player_add_percent();
  uint32_t raw_shen_tong_damage_to_player_add_percent;
  memcpy(&raw_shen_tong_damage_to_player_add_percent, &tmp_shen_tong_damage_to_player_add_percent, sizeof(tmp_shen_tong_damage_to_player_add_percent));
  if (raw_shen_tong_damage_to_player_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(205, this->_internal_shen_tong_damage_to_player_add_percent(), target);
  }

  // float shen_tong_damage_to_player_reduce_percent = 206;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shen_tong_damage_to_player_reduce_percent = this->_internal_shen_tong_damage_to_player_reduce_percent();
  uint32_t raw_shen_tong_damage_to_player_reduce_percent;
  memcpy(&raw_shen_tong_damage_to_player_reduce_percent, &tmp_shen_tong_damage_to_player_reduce_percent, sizeof(tmp_shen_tong_damage_to_player_reduce_percent));
  if (raw_shen_tong_damage_to_player_reduce_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(206, this->_internal_shen_tong_damage_to_player_reduce_percent(), target);
  }

  // float fa_bao_damage_to_player_add_percent = 207;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fa_bao_damage_to_player_add_percent = this->_internal_fa_bao_damage_to_player_add_percent();
  uint32_t raw_fa_bao_damage_to_player_add_percent;
  memcpy(&raw_fa_bao_damage_to_player_add_percent, &tmp_fa_bao_damage_to_player_add_percent, sizeof(tmp_fa_bao_damage_to_player_add_percent));
  if (raw_fa_bao_damage_to_player_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(207, this->_internal_fa_bao_damage_to_player_add_percent(), target);
  }

  // float fa_bao_damage_to_player_reduce_percent = 208;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fa_bao_damage_to_player_reduce_percent = this->_internal_fa_bao_damage_to_player_reduce_percent();
  uint32_t raw_fa_bao_damage_to_player_reduce_percent;
  memcpy(&raw_fa_bao_damage_to_player_reduce_percent, &tmp_fa_bao_damage_to_player_reduce_percent, sizeof(tmp_fa_bao_damage_to_player_reduce_percent));
  if (raw_fa_bao_damage_to_player_reduce_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(208, this->_internal_fa_bao_damage_to_player_reduce_percent(), target);
  }

  // float phy_damage_add_percent = 209;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage_add_percent = this->_internal_phy_damage_add_percent();
  uint32_t raw_phy_damage_add_percent;
  memcpy(&raw_phy_damage_add_percent, &tmp_phy_damage_add_percent, sizeof(tmp_phy_damage_add_percent));
  if (raw_phy_damage_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(209, this->_internal_phy_damage_add_percent(), target);
  }

  // float mag_damage_add_percent = 210;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_damage_add_percent = this->_internal_mag_damage_add_percent();
  uint32_t raw_mag_damage_add_percent;
  memcpy(&raw_mag_damage_add_percent, &tmp_mag_damage_add_percent, sizeof(tmp_mag_damage_add_percent));
  if (raw_mag_damage_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(210, this->_internal_mag_damage_add_percent(), target);
  }

  // float phy_damage_reduce_percent = 211;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage_reduce_percent = this->_internal_phy_damage_reduce_percent();
  uint32_t raw_phy_damage_reduce_percent;
  memcpy(&raw_phy_damage_reduce_percent, &tmp_phy_damage_reduce_percent, sizeof(tmp_phy_damage_reduce_percent));
  if (raw_phy_damage_reduce_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(211, this->_internal_phy_damage_reduce_percent(), target);
  }

  // float mag_damage_reduce_percent = 212;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_damage_reduce_percent = this->_internal_mag_damage_reduce_percent();
  uint32_t raw_mag_damage_reduce_percent;
  memcpy(&raw_mag_damage_reduce_percent, &tmp_mag_damage_reduce_percent, sizeof(tmp_mag_damage_reduce_percent));
  if (raw_mag_damage_reduce_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(212, this->_internal_mag_damage_reduce_percent(), target);
  }

  // float attack_monster_damage_add_percent = 213;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_monster_damage_add_percent = this->_internal_attack_monster_damage_add_percent();
  uint32_t raw_attack_monster_damage_add_percent;
  memcpy(&raw_attack_monster_damage_add_percent, &tmp_attack_monster_damage_add_percent, sizeof(tmp_attack_monster_damage_add_percent));
  if (raw_attack_monster_damage_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(213, this->_internal_attack_monster_damage_add_percent(), target);
  }

  // float take_monster_damage_reduce_percent = 214;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_take_monster_damage_reduce_percent = this->_internal_take_monster_damage_reduce_percent();
  uint32_t raw_take_monster_damage_reduce_percent;
  memcpy(&raw_take_monster_damage_reduce_percent, &tmp_take_monster_damage_reduce_percent, sizeof(tmp_take_monster_damage_reduce_percent));
  if (raw_take_monster_damage_reduce_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(214, this->_internal_take_monster_damage_reduce_percent(), target);
  }

  // float base_hp_add_percent = 215;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_hp_add_percent = this->_internal_base_hp_add_percent();
  uint32_t raw_base_hp_add_percent;
  memcpy(&raw_base_hp_add_percent, &tmp_base_hp_add_percent, sizeof(tmp_base_hp_add_percent));
  if (raw_base_hp_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(215, this->_internal_base_hp_add_percent(), target);
  }

  // float base_mp_add_percent = 216;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mp_add_percent = this->_internal_base_mp_add_percent();
  uint32_t raw_base_mp_add_percent;
  memcpy(&raw_base_mp_add_percent, &tmp_base_mp_add_percent, sizeof(tmp_base_mp_add_percent));
  if (raw_base_mp_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(216, this->_internal_base_mp_add_percent(), target);
  }

  // float base_phy_att_add_percent = 217;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_att_add_percent = this->_internal_base_phy_att_add_percent();
  uint32_t raw_base_phy_att_add_percent;
  memcpy(&raw_base_phy_att_add_percent, &tmp_base_phy_att_add_percent, sizeof(tmp_base_phy_att_add_percent));
  if (raw_base_phy_att_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(217, this->_internal_base_phy_att_add_percent(), target);
  }

  // float base_mag_att_add_percent = 218;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_att_add_percent = this->_internal_base_mag_att_add_percent();
  uint32_t raw_base_mag_att_add_percent;
  memcpy(&raw_base_mag_att_add_percent, &tmp_base_mag_att_add_percent, sizeof(tmp_base_mag_att_add_percent));
  if (raw_base_mag_att_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(218, this->_internal_base_mag_att_add_percent(), target);
  }

  // float base_phy_def_add_percent = 219;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_def_add_percent = this->_internal_base_phy_def_add_percent();
  uint32_t raw_base_phy_def_add_percent;
  memcpy(&raw_base_phy_def_add_percent, &tmp_base_phy_def_add_percent, sizeof(tmp_base_phy_def_add_percent));
  if (raw_base_phy_def_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(219, this->_internal_base_phy_def_add_percent(), target);
  }

  // float base_mag_def_add_percent = 220;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_def_add_percent = this->_internal_base_mag_def_add_percent();
  uint32_t raw_base_mag_def_add_percent;
  memcpy(&raw_base_mag_def_add_percent, &tmp_base_mag_def_add_percent, sizeof(tmp_base_mag_def_add_percent));
  if (raw_base_mag_def_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(220, this->_internal_base_mag_def_add_percent(), target);
  }

  // float base_phy_hit_add_percent = 221;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_hit_add_percent = this->_internal_base_phy_hit_add_percent();
  uint32_t raw_base_phy_hit_add_percent;
  memcpy(&raw_base_phy_hit_add_percent, &tmp_base_phy_hit_add_percent, sizeof(tmp_base_phy_hit_add_percent));
  if (raw_base_phy_hit_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(221, this->_internal_base_phy_hit_add_percent(), target);
  }

  // float base_mag_hit_add_percent = 222;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_hit_add_percent = this->_internal_base_mag_hit_add_percent();
  uint32_t raw_base_mag_hit_add_percent;
  memcpy(&raw_base_mag_hit_add_percent, &tmp_base_mag_hit_add_percent, sizeof(tmp_base_mag_hit_add_percent));
  if (raw_base_mag_hit_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(222, this->_internal_base_mag_hit_add_percent(), target);
  }

  // float base_phy_dodge_add_percent = 223;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_dodge_add_percent = this->_internal_base_phy_dodge_add_percent();
  uint32_t raw_base_phy_dodge_add_percent;
  memcpy(&raw_base_phy_dodge_add_percent, &tmp_base_phy_dodge_add_percent, sizeof(tmp_base_phy_dodge_add_percent));
  if (raw_base_phy_dodge_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(223, this->_internal_base_phy_dodge_add_percent(), target);
  }

  // float base_mag_dodge_add_percent = 224;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_dodge_add_percent = this->_internal_base_mag_dodge_add_percent();
  uint32_t raw_base_mag_dodge_add_percent;
  memcpy(&raw_base_mag_dodge_add_percent, &tmp_base_mag_dodge_add_percent, sizeof(tmp_base_mag_dodge_add_percent));
  if (raw_base_mag_dodge_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(224, this->_internal_base_mag_dodge_add_percent(), target);
  }

  // float base_crit_add_percent = 225;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_crit_add_percent = this->_internal_base_crit_add_percent();
  uint32_t raw_base_crit_add_percent;
  memcpy(&raw_base_crit_add_percent, &tmp_base_crit_add_percent, sizeof(tmp_base_crit_add_percent));
  if (raw_base_crit_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(225, this->_internal_base_crit_add_percent(), target);
  }

  // float base_crit_def_add_percent = 226;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_crit_def_add_percent = this->_internal_base_crit_def_add_percent();
  uint32_t raw_base_crit_def_add_percent;
  memcpy(&raw_base_crit_def_add_percent, &tmp_base_crit_def_add_percent, sizeof(tmp_base_crit_def_add_percent));
  if (raw_base_crit_def_add_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(226, this->_internal_base_crit_def_add_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleAttribute)
  return target;
}

size_t RoleAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float health = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_health = this->_internal_health();
  uint32_t raw_health;
  memcpy(&raw_health, &tmp_health, sizeof(tmp_health));
  if (raw_health != 0) {
    total_size += 1 + 4;
  }

  // float max_health = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_health = this->_internal_max_health();
  uint32_t raw_max_health;
  memcpy(&raw_max_health, &tmp_max_health, sizeof(tmp_max_health));
  if (raw_max_health != 0) {
    total_size += 1 + 4;
  }

  // float mana = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mana = this->_internal_mana();
  uint32_t raw_mana;
  memcpy(&raw_mana, &tmp_mana, sizeof(tmp_mana));
  if (raw_mana != 0) {
    total_size += 1 + 4;
  }

  // float max_mana = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_mana = this->_internal_max_mana();
  uint32_t raw_max_mana;
  memcpy(&raw_max_mana, &tmp_max_mana, sizeof(tmp_max_mana));
  if (raw_max_mana != 0) {
    total_size += 1 + 4;
  }

  // float mind = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mind = this->_internal_mind();
  uint32_t raw_mind;
  memcpy(&raw_mind, &tmp_mind, sizeof(tmp_mind));
  if (raw_mind != 0) {
    total_size += 1 + 4;
  }

  // float strength = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strength = this->_internal_strength();
  uint32_t raw_strength;
  memcpy(&raw_strength, &tmp_strength, sizeof(tmp_strength));
  if (raw_strength != 0) {
    total_size += 1 + 4;
  }

  // float intellect = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intellect = this->_internal_intellect();
  uint32_t raw_intellect;
  memcpy(&raw_intellect, &tmp_intellect, sizeof(tmp_intellect));
  if (raw_intellect != 0) {
    total_size += 1 + 4;
  }

  // float agility = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_agility = this->_internal_agility();
  uint32_t raw_agility;
  memcpy(&raw_agility, &tmp_agility, sizeof(tmp_agility));
  if (raw_agility != 0) {
    total_size += 1 + 4;
  }

  // float move_speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    total_size += 1 + 4;
  }

  // float phy_att = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_att = this->_internal_phy_att();
  uint32_t raw_phy_att;
  memcpy(&raw_phy_att, &tmp_phy_att, sizeof(tmp_phy_att));
  if (raw_phy_att != 0) {
    total_size += 1 + 4;
  }

  // float phy_def = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_def = this->_internal_phy_def();
  uint32_t raw_phy_def;
  memcpy(&raw_phy_def, &tmp_phy_def, sizeof(tmp_phy_def));
  if (raw_phy_def != 0) {
    total_size += 1 + 4;
  }

  // float mag_att = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_att = this->_internal_mag_att();
  uint32_t raw_mag_att;
  memcpy(&raw_mag_att, &tmp_mag_att, sizeof(tmp_mag_att));
  if (raw_mag_att != 0) {
    total_size += 1 + 4;
  }

  // float mag_def = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_def = this->_internal_mag_def();
  uint32_t raw_mag_def;
  memcpy(&raw_mag_def, &tmp_mag_def, sizeof(tmp_mag_def));
  if (raw_mag_def != 0) {
    total_size += 1 + 4;
  }

  // float phy_dodge = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_dodge = this->_internal_phy_dodge();
  uint32_t raw_phy_dodge;
  memcpy(&raw_phy_dodge, &tmp_phy_dodge, sizeof(tmp_phy_dodge));
  if (raw_phy_dodge != 0) {
    total_size += 1 + 4;
  }

  // float mag_dodge = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_dodge = this->_internal_mag_dodge();
  uint32_t raw_mag_dodge;
  memcpy(&raw_mag_dodge, &tmp_mag_dodge, sizeof(tmp_mag_dodge));
  if (raw_mag_dodge != 0) {
    total_size += 1 + 4;
  }

  // float phy_hit = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_hit = this->_internal_phy_hit();
  uint32_t raw_phy_hit;
  memcpy(&raw_phy_hit, &tmp_phy_hit, sizeof(tmp_phy_hit));
  if (raw_phy_hit != 0) {
    total_size += 2 + 4;
  }

  // float mag_hit = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_hit = this->_internal_mag_hit();
  uint32_t raw_mag_hit;
  memcpy(&raw_mag_hit, &tmp_mag_hit, sizeof(tmp_mag_hit));
  if (raw_mag_hit != 0) {
    total_size += 2 + 4;
  }

  // float crit = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit = this->_internal_crit();
  uint32_t raw_crit;
  memcpy(&raw_crit, &tmp_crit, sizeof(tmp_crit));
  if (raw_crit != 0) {
    total_size += 2 + 4;
  }

  // float crit_def = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_def = this->_internal_crit_def();
  uint32_t raw_crit_def;
  memcpy(&raw_crit_def, &tmp_crit_def, sizeof(tmp_crit_def));
  if (raw_crit_def != 0) {
    total_size += 2 + 4;
  }

  // float hp_recover_percent = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp_recover_percent = this->_internal_hp_recover_percent();
  uint32_t raw_hp_recover_percent;
  memcpy(&raw_hp_recover_percent, &tmp_hp_recover_percent, sizeof(tmp_hp_recover_percent));
  if (raw_hp_recover_percent != 0) {
    total_size += 2 + 4;
  }

  // float mp_recover_percent = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp_recover_percent = this->_internal_mp_recover_percent();
  uint32_t raw_mp_recover_percent;
  memcpy(&raw_mp_recover_percent, &tmp_mp_recover_percent, sizeof(tmp_mp_recover_percent));
  if (raw_mp_recover_percent != 0) {
    total_size += 2 + 4;
  }

  // float crit_coef = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_coef = this->_internal_crit_coef();
  uint32_t raw_crit_coef;
  memcpy(&raw_crit_coef, &tmp_crit_coef, sizeof(tmp_crit_coef));
  if (raw_crit_coef != 0) {
    total_size += 2 + 4;
  }

  // float crit_block = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_block = this->_internal_crit_block();
  uint32_t raw_crit_block;
  memcpy(&raw_crit_block, &tmp_crit_block, sizeof(tmp_crit_block));
  if (raw_crit_block != 0) {
    total_size += 2 + 4;
  }

  // float crit_additional_damage = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_additional_damage = this->_internal_crit_additional_damage();
  uint32_t raw_crit_additional_damage;
  memcpy(&raw_crit_additional_damage, &tmp_crit_additional_damage, sizeof(tmp_crit_additional_damage));
  if (raw_crit_additional_damage != 0) {
    total_size += 2 + 4;
  }

  // float arena_money_add_percent = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_arena_money_add_percent = this->_internal_arena_money_add_percent();
  uint32_t raw_arena_money_add_percent;
  memcpy(&raw_arena_money_add_percent, &tmp_arena_money_add_percent, sizeof(tmp_arena_money_add_percent));
  if (raw_arena_money_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float mag_break = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_break = this->_internal_mag_break();
  uint32_t raw_mag_break;
  memcpy(&raw_mag_break, &tmp_mag_break, sizeof(tmp_mag_break));
  if (raw_mag_break != 0) {
    total_size += 2 + 4;
  }

  // float phy_break = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_break = this->_internal_phy_break();
  uint32_t raw_phy_break;
  memcpy(&raw_phy_break, &tmp_phy_break, sizeof(tmp_phy_break));
  if (raw_phy_break != 0) {
    total_size += 2 + 4;
  }

  // float mag_block = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_block = this->_internal_mag_block();
  uint32_t raw_mag_block;
  memcpy(&raw_mag_block, &tmp_mag_block, sizeof(tmp_mag_block));
  if (raw_mag_block != 0) {
    total_size += 2 + 4;
  }

  // float phy_block = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_block = this->_internal_phy_block();
  uint32_t raw_phy_block;
  memcpy(&raw_phy_block, &tmp_phy_block, sizeof(tmp_phy_block));
  if (raw_phy_block != 0) {
    total_size += 2 + 4;
  }

  // float fen_qi = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fen_qi = this->_internal_fen_qi();
  uint32_t raw_fen_qi;
  memcpy(&raw_fen_qi, &tmp_fen_qi, sizeof(tmp_fen_qi));
  if (raw_fen_qi != 0) {
    total_size += 2 + 4;
  }

  // float tuna_num = 200;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tuna_num = this->_internal_tuna_num();
  uint32_t raw_tuna_num;
  memcpy(&raw_tuna_num, &tmp_tuna_num, sizeof(tmp_tuna_num));
  if (raw_tuna_num != 0) {
    total_size += 2 + 4;
  }

  // float tuna_add_percent = 201;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tuna_add_percent = this->_internal_tuna_add_percent();
  uint32_t raw_tuna_add_percent;
  memcpy(&raw_tuna_add_percent, &tmp_tuna_add_percent, sizeof(tmp_tuna_add_percent));
  if (raw_tuna_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float medicine_num = 202;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_medicine_num = this->_internal_medicine_num();
  uint32_t raw_medicine_num;
  memcpy(&raw_medicine_num, &tmp_medicine_num, sizeof(tmp_medicine_num));
  if (raw_medicine_num != 0) {
    total_size += 2 + 4;
  }

  // float medicine_add_percent = 203;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_medicine_add_percent = this->_internal_medicine_add_percent();
  uint32_t raw_medicine_add_percent;
  memcpy(&raw_medicine_add_percent, &tmp_medicine_add_percent, sizeof(tmp_medicine_add_percent));
  if (raw_medicine_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float baseqi_add_percent = 204;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_baseqi_add_percent = this->_internal_baseqi_add_percent();
  uint32_t raw_baseqi_add_percent;
  memcpy(&raw_baseqi_add_percent, &tmp_baseqi_add_percent, sizeof(tmp_baseqi_add_percent));
  if (raw_baseqi_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float shen_tong_damage_to_player_add_percent = 205;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shen_tong_damage_to_player_add_percent = this->_internal_shen_tong_damage_to_player_add_percent();
  uint32_t raw_shen_tong_damage_to_player_add_percent;
  memcpy(&raw_shen_tong_damage_to_player_add_percent, &tmp_shen_tong_damage_to_player_add_percent, sizeof(tmp_shen_tong_damage_to_player_add_percent));
  if (raw_shen_tong_damage_to_player_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float shen_tong_damage_to_player_reduce_percent = 206;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shen_tong_damage_to_player_reduce_percent = this->_internal_shen_tong_damage_to_player_reduce_percent();
  uint32_t raw_shen_tong_damage_to_player_reduce_percent;
  memcpy(&raw_shen_tong_damage_to_player_reduce_percent, &tmp_shen_tong_damage_to_player_reduce_percent, sizeof(tmp_shen_tong_damage_to_player_reduce_percent));
  if (raw_shen_tong_damage_to_player_reduce_percent != 0) {
    total_size += 2 + 4;
  }

  // float fa_bao_damage_to_player_add_percent = 207;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fa_bao_damage_to_player_add_percent = this->_internal_fa_bao_damage_to_player_add_percent();
  uint32_t raw_fa_bao_damage_to_player_add_percent;
  memcpy(&raw_fa_bao_damage_to_player_add_percent, &tmp_fa_bao_damage_to_player_add_percent, sizeof(tmp_fa_bao_damage_to_player_add_percent));
  if (raw_fa_bao_damage_to_player_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float fa_bao_damage_to_player_reduce_percent = 208;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fa_bao_damage_to_player_reduce_percent = this->_internal_fa_bao_damage_to_player_reduce_percent();
  uint32_t raw_fa_bao_damage_to_player_reduce_percent;
  memcpy(&raw_fa_bao_damage_to_player_reduce_percent, &tmp_fa_bao_damage_to_player_reduce_percent, sizeof(tmp_fa_bao_damage_to_player_reduce_percent));
  if (raw_fa_bao_damage_to_player_reduce_percent != 0) {
    total_size += 2 + 4;
  }

  // float phy_damage_add_percent = 209;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage_add_percent = this->_internal_phy_damage_add_percent();
  uint32_t raw_phy_damage_add_percent;
  memcpy(&raw_phy_damage_add_percent, &tmp_phy_damage_add_percent, sizeof(tmp_phy_damage_add_percent));
  if (raw_phy_damage_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float mag_damage_add_percent = 210;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_damage_add_percent = this->_internal_mag_damage_add_percent();
  uint32_t raw_mag_damage_add_percent;
  memcpy(&raw_mag_damage_add_percent, &tmp_mag_damage_add_percent, sizeof(tmp_mag_damage_add_percent));
  if (raw_mag_damage_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float phy_damage_reduce_percent = 211;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage_reduce_percent = this->_internal_phy_damage_reduce_percent();
  uint32_t raw_phy_damage_reduce_percent;
  memcpy(&raw_phy_damage_reduce_percent, &tmp_phy_damage_reduce_percent, sizeof(tmp_phy_damage_reduce_percent));
  if (raw_phy_damage_reduce_percent != 0) {
    total_size += 2 + 4;
  }

  // float mag_damage_reduce_percent = 212;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_damage_reduce_percent = this->_internal_mag_damage_reduce_percent();
  uint32_t raw_mag_damage_reduce_percent;
  memcpy(&raw_mag_damage_reduce_percent, &tmp_mag_damage_reduce_percent, sizeof(tmp_mag_damage_reduce_percent));
  if (raw_mag_damage_reduce_percent != 0) {
    total_size += 2 + 4;
  }

  // float attack_monster_damage_add_percent = 213;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_monster_damage_add_percent = this->_internal_attack_monster_damage_add_percent();
  uint32_t raw_attack_monster_damage_add_percent;
  memcpy(&raw_attack_monster_damage_add_percent, &tmp_attack_monster_damage_add_percent, sizeof(tmp_attack_monster_damage_add_percent));
  if (raw_attack_monster_damage_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float take_monster_damage_reduce_percent = 214;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_take_monster_damage_reduce_percent = this->_internal_take_monster_damage_reduce_percent();
  uint32_t raw_take_monster_damage_reduce_percent;
  memcpy(&raw_take_monster_damage_reduce_percent, &tmp_take_monster_damage_reduce_percent, sizeof(tmp_take_monster_damage_reduce_percent));
  if (raw_take_monster_damage_reduce_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_hp_add_percent = 215;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_hp_add_percent = this->_internal_base_hp_add_percent();
  uint32_t raw_base_hp_add_percent;
  memcpy(&raw_base_hp_add_percent, &tmp_base_hp_add_percent, sizeof(tmp_base_hp_add_percent));
  if (raw_base_hp_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_mp_add_percent = 216;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mp_add_percent = this->_internal_base_mp_add_percent();
  uint32_t raw_base_mp_add_percent;
  memcpy(&raw_base_mp_add_percent, &tmp_base_mp_add_percent, sizeof(tmp_base_mp_add_percent));
  if (raw_base_mp_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_phy_att_add_percent = 217;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_att_add_percent = this->_internal_base_phy_att_add_percent();
  uint32_t raw_base_phy_att_add_percent;
  memcpy(&raw_base_phy_att_add_percent, &tmp_base_phy_att_add_percent, sizeof(tmp_base_phy_att_add_percent));
  if (raw_base_phy_att_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_mag_att_add_percent = 218;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_att_add_percent = this->_internal_base_mag_att_add_percent();
  uint32_t raw_base_mag_att_add_percent;
  memcpy(&raw_base_mag_att_add_percent, &tmp_base_mag_att_add_percent, sizeof(tmp_base_mag_att_add_percent));
  if (raw_base_mag_att_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_phy_def_add_percent = 219;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_def_add_percent = this->_internal_base_phy_def_add_percent();
  uint32_t raw_base_phy_def_add_percent;
  memcpy(&raw_base_phy_def_add_percent, &tmp_base_phy_def_add_percent, sizeof(tmp_base_phy_def_add_percent));
  if (raw_base_phy_def_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_mag_def_add_percent = 220;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_def_add_percent = this->_internal_base_mag_def_add_percent();
  uint32_t raw_base_mag_def_add_percent;
  memcpy(&raw_base_mag_def_add_percent, &tmp_base_mag_def_add_percent, sizeof(tmp_base_mag_def_add_percent));
  if (raw_base_mag_def_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_phy_hit_add_percent = 221;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_hit_add_percent = this->_internal_base_phy_hit_add_percent();
  uint32_t raw_base_phy_hit_add_percent;
  memcpy(&raw_base_phy_hit_add_percent, &tmp_base_phy_hit_add_percent, sizeof(tmp_base_phy_hit_add_percent));
  if (raw_base_phy_hit_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_mag_hit_add_percent = 222;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_hit_add_percent = this->_internal_base_mag_hit_add_percent();
  uint32_t raw_base_mag_hit_add_percent;
  memcpy(&raw_base_mag_hit_add_percent, &tmp_base_mag_hit_add_percent, sizeof(tmp_base_mag_hit_add_percent));
  if (raw_base_mag_hit_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_phy_dodge_add_percent = 223;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_dodge_add_percent = this->_internal_base_phy_dodge_add_percent();
  uint32_t raw_base_phy_dodge_add_percent;
  memcpy(&raw_base_phy_dodge_add_percent, &tmp_base_phy_dodge_add_percent, sizeof(tmp_base_phy_dodge_add_percent));
  if (raw_base_phy_dodge_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_mag_dodge_add_percent = 224;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_dodge_add_percent = this->_internal_base_mag_dodge_add_percent();
  uint32_t raw_base_mag_dodge_add_percent;
  memcpy(&raw_base_mag_dodge_add_percent, &tmp_base_mag_dodge_add_percent, sizeof(tmp_base_mag_dodge_add_percent));
  if (raw_base_mag_dodge_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_crit_add_percent = 225;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_crit_add_percent = this->_internal_base_crit_add_percent();
  uint32_t raw_base_crit_add_percent;
  memcpy(&raw_base_crit_add_percent, &tmp_base_crit_add_percent, sizeof(tmp_base_crit_add_percent));
  if (raw_base_crit_add_percent != 0) {
    total_size += 2 + 4;
  }

  // float base_crit_def_add_percent = 226;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_crit_def_add_percent = this->_internal_base_crit_def_add_percent();
  uint32_t raw_base_crit_def_add_percent;
  memcpy(&raw_base_crit_def_add_percent, &tmp_base_crit_def_add_percent, sizeof(tmp_base_crit_def_add_percent));
  if (raw_base_crit_def_add_percent != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleAttribute::GetClassData() const { return &_class_data_; }


void RoleAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleAttribute*>(&to_msg);
  auto& from = static_cast<const RoleAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_health = from._internal_health();
  uint32_t raw_health;
  memcpy(&raw_health, &tmp_health, sizeof(tmp_health));
  if (raw_health != 0) {
    _this->_internal_set_health(from._internal_health());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_health = from._internal_max_health();
  uint32_t raw_max_health;
  memcpy(&raw_max_health, &tmp_max_health, sizeof(tmp_max_health));
  if (raw_max_health != 0) {
    _this->_internal_set_max_health(from._internal_max_health());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mana = from._internal_mana();
  uint32_t raw_mana;
  memcpy(&raw_mana, &tmp_mana, sizeof(tmp_mana));
  if (raw_mana != 0) {
    _this->_internal_set_mana(from._internal_mana());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_mana = from._internal_max_mana();
  uint32_t raw_max_mana;
  memcpy(&raw_max_mana, &tmp_max_mana, sizeof(tmp_max_mana));
  if (raw_max_mana != 0) {
    _this->_internal_set_max_mana(from._internal_max_mana());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mind = from._internal_mind();
  uint32_t raw_mind;
  memcpy(&raw_mind, &tmp_mind, sizeof(tmp_mind));
  if (raw_mind != 0) {
    _this->_internal_set_mind(from._internal_mind());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strength = from._internal_strength();
  uint32_t raw_strength;
  memcpy(&raw_strength, &tmp_strength, sizeof(tmp_strength));
  if (raw_strength != 0) {
    _this->_internal_set_strength(from._internal_strength());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intellect = from._internal_intellect();
  uint32_t raw_intellect;
  memcpy(&raw_intellect, &tmp_intellect, sizeof(tmp_intellect));
  if (raw_intellect != 0) {
    _this->_internal_set_intellect(from._internal_intellect());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_agility = from._internal_agility();
  uint32_t raw_agility;
  memcpy(&raw_agility, &tmp_agility, sizeof(tmp_agility));
  if (raw_agility != 0) {
    _this->_internal_set_agility(from._internal_agility());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = from._internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    _this->_internal_set_move_speed(from._internal_move_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_att = from._internal_phy_att();
  uint32_t raw_phy_att;
  memcpy(&raw_phy_att, &tmp_phy_att, sizeof(tmp_phy_att));
  if (raw_phy_att != 0) {
    _this->_internal_set_phy_att(from._internal_phy_att());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_def = from._internal_phy_def();
  uint32_t raw_phy_def;
  memcpy(&raw_phy_def, &tmp_phy_def, sizeof(tmp_phy_def));
  if (raw_phy_def != 0) {
    _this->_internal_set_phy_def(from._internal_phy_def());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_att = from._internal_mag_att();
  uint32_t raw_mag_att;
  memcpy(&raw_mag_att, &tmp_mag_att, sizeof(tmp_mag_att));
  if (raw_mag_att != 0) {
    _this->_internal_set_mag_att(from._internal_mag_att());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_def = from._internal_mag_def();
  uint32_t raw_mag_def;
  memcpy(&raw_mag_def, &tmp_mag_def, sizeof(tmp_mag_def));
  if (raw_mag_def != 0) {
    _this->_internal_set_mag_def(from._internal_mag_def());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_dodge = from._internal_phy_dodge();
  uint32_t raw_phy_dodge;
  memcpy(&raw_phy_dodge, &tmp_phy_dodge, sizeof(tmp_phy_dodge));
  if (raw_phy_dodge != 0) {
    _this->_internal_set_phy_dodge(from._internal_phy_dodge());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_dodge = from._internal_mag_dodge();
  uint32_t raw_mag_dodge;
  memcpy(&raw_mag_dodge, &tmp_mag_dodge, sizeof(tmp_mag_dodge));
  if (raw_mag_dodge != 0) {
    _this->_internal_set_mag_dodge(from._internal_mag_dodge());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_hit = from._internal_phy_hit();
  uint32_t raw_phy_hit;
  memcpy(&raw_phy_hit, &tmp_phy_hit, sizeof(tmp_phy_hit));
  if (raw_phy_hit != 0) {
    _this->_internal_set_phy_hit(from._internal_phy_hit());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_hit = from._internal_mag_hit();
  uint32_t raw_mag_hit;
  memcpy(&raw_mag_hit, &tmp_mag_hit, sizeof(tmp_mag_hit));
  if (raw_mag_hit != 0) {
    _this->_internal_set_mag_hit(from._internal_mag_hit());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit = from._internal_crit();
  uint32_t raw_crit;
  memcpy(&raw_crit, &tmp_crit, sizeof(tmp_crit));
  if (raw_crit != 0) {
    _this->_internal_set_crit(from._internal_crit());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_def = from._internal_crit_def();
  uint32_t raw_crit_def;
  memcpy(&raw_crit_def, &tmp_crit_def, sizeof(tmp_crit_def));
  if (raw_crit_def != 0) {
    _this->_internal_set_crit_def(from._internal_crit_def());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp_recover_percent = from._internal_hp_recover_percent();
  uint32_t raw_hp_recover_percent;
  memcpy(&raw_hp_recover_percent, &tmp_hp_recover_percent, sizeof(tmp_hp_recover_percent));
  if (raw_hp_recover_percent != 0) {
    _this->_internal_set_hp_recover_percent(from._internal_hp_recover_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp_recover_percent = from._internal_mp_recover_percent();
  uint32_t raw_mp_recover_percent;
  memcpy(&raw_mp_recover_percent, &tmp_mp_recover_percent, sizeof(tmp_mp_recover_percent));
  if (raw_mp_recover_percent != 0) {
    _this->_internal_set_mp_recover_percent(from._internal_mp_recover_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_coef = from._internal_crit_coef();
  uint32_t raw_crit_coef;
  memcpy(&raw_crit_coef, &tmp_crit_coef, sizeof(tmp_crit_coef));
  if (raw_crit_coef != 0) {
    _this->_internal_set_crit_coef(from._internal_crit_coef());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_block = from._internal_crit_block();
  uint32_t raw_crit_block;
  memcpy(&raw_crit_block, &tmp_crit_block, sizeof(tmp_crit_block));
  if (raw_crit_block != 0) {
    _this->_internal_set_crit_block(from._internal_crit_block());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crit_additional_damage = from._internal_crit_additional_damage();
  uint32_t raw_crit_additional_damage;
  memcpy(&raw_crit_additional_damage, &tmp_crit_additional_damage, sizeof(tmp_crit_additional_damage));
  if (raw_crit_additional_damage != 0) {
    _this->_internal_set_crit_additional_damage(from._internal_crit_additional_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_arena_money_add_percent = from._internal_arena_money_add_percent();
  uint32_t raw_arena_money_add_percent;
  memcpy(&raw_arena_money_add_percent, &tmp_arena_money_add_percent, sizeof(tmp_arena_money_add_percent));
  if (raw_arena_money_add_percent != 0) {
    _this->_internal_set_arena_money_add_percent(from._internal_arena_money_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_break = from._internal_mag_break();
  uint32_t raw_mag_break;
  memcpy(&raw_mag_break, &tmp_mag_break, sizeof(tmp_mag_break));
  if (raw_mag_break != 0) {
    _this->_internal_set_mag_break(from._internal_mag_break());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_break = from._internal_phy_break();
  uint32_t raw_phy_break;
  memcpy(&raw_phy_break, &tmp_phy_break, sizeof(tmp_phy_break));
  if (raw_phy_break != 0) {
    _this->_internal_set_phy_break(from._internal_phy_break());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_block = from._internal_mag_block();
  uint32_t raw_mag_block;
  memcpy(&raw_mag_block, &tmp_mag_block, sizeof(tmp_mag_block));
  if (raw_mag_block != 0) {
    _this->_internal_set_mag_block(from._internal_mag_block());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_block = from._internal_phy_block();
  uint32_t raw_phy_block;
  memcpy(&raw_phy_block, &tmp_phy_block, sizeof(tmp_phy_block));
  if (raw_phy_block != 0) {
    _this->_internal_set_phy_block(from._internal_phy_block());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fen_qi = from._internal_fen_qi();
  uint32_t raw_fen_qi;
  memcpy(&raw_fen_qi, &tmp_fen_qi, sizeof(tmp_fen_qi));
  if (raw_fen_qi != 0) {
    _this->_internal_set_fen_qi(from._internal_fen_qi());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tuna_num = from._internal_tuna_num();
  uint32_t raw_tuna_num;
  memcpy(&raw_tuna_num, &tmp_tuna_num, sizeof(tmp_tuna_num));
  if (raw_tuna_num != 0) {
    _this->_internal_set_tuna_num(from._internal_tuna_num());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tuna_add_percent = from._internal_tuna_add_percent();
  uint32_t raw_tuna_add_percent;
  memcpy(&raw_tuna_add_percent, &tmp_tuna_add_percent, sizeof(tmp_tuna_add_percent));
  if (raw_tuna_add_percent != 0) {
    _this->_internal_set_tuna_add_percent(from._internal_tuna_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_medicine_num = from._internal_medicine_num();
  uint32_t raw_medicine_num;
  memcpy(&raw_medicine_num, &tmp_medicine_num, sizeof(tmp_medicine_num));
  if (raw_medicine_num != 0) {
    _this->_internal_set_medicine_num(from._internal_medicine_num());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_medicine_add_percent = from._internal_medicine_add_percent();
  uint32_t raw_medicine_add_percent;
  memcpy(&raw_medicine_add_percent, &tmp_medicine_add_percent, sizeof(tmp_medicine_add_percent));
  if (raw_medicine_add_percent != 0) {
    _this->_internal_set_medicine_add_percent(from._internal_medicine_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_baseqi_add_percent = from._internal_baseqi_add_percent();
  uint32_t raw_baseqi_add_percent;
  memcpy(&raw_baseqi_add_percent, &tmp_baseqi_add_percent, sizeof(tmp_baseqi_add_percent));
  if (raw_baseqi_add_percent != 0) {
    _this->_internal_set_baseqi_add_percent(from._internal_baseqi_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shen_tong_damage_to_player_add_percent = from._internal_shen_tong_damage_to_player_add_percent();
  uint32_t raw_shen_tong_damage_to_player_add_percent;
  memcpy(&raw_shen_tong_damage_to_player_add_percent, &tmp_shen_tong_damage_to_player_add_percent, sizeof(tmp_shen_tong_damage_to_player_add_percent));
  if (raw_shen_tong_damage_to_player_add_percent != 0) {
    _this->_internal_set_shen_tong_damage_to_player_add_percent(from._internal_shen_tong_damage_to_player_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shen_tong_damage_to_player_reduce_percent = from._internal_shen_tong_damage_to_player_reduce_percent();
  uint32_t raw_shen_tong_damage_to_player_reduce_percent;
  memcpy(&raw_shen_tong_damage_to_player_reduce_percent, &tmp_shen_tong_damage_to_player_reduce_percent, sizeof(tmp_shen_tong_damage_to_player_reduce_percent));
  if (raw_shen_tong_damage_to_player_reduce_percent != 0) {
    _this->_internal_set_shen_tong_damage_to_player_reduce_percent(from._internal_shen_tong_damage_to_player_reduce_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fa_bao_damage_to_player_add_percent = from._internal_fa_bao_damage_to_player_add_percent();
  uint32_t raw_fa_bao_damage_to_player_add_percent;
  memcpy(&raw_fa_bao_damage_to_player_add_percent, &tmp_fa_bao_damage_to_player_add_percent, sizeof(tmp_fa_bao_damage_to_player_add_percent));
  if (raw_fa_bao_damage_to_player_add_percent != 0) {
    _this->_internal_set_fa_bao_damage_to_player_add_percent(from._internal_fa_bao_damage_to_player_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fa_bao_damage_to_player_reduce_percent = from._internal_fa_bao_damage_to_player_reduce_percent();
  uint32_t raw_fa_bao_damage_to_player_reduce_percent;
  memcpy(&raw_fa_bao_damage_to_player_reduce_percent, &tmp_fa_bao_damage_to_player_reduce_percent, sizeof(tmp_fa_bao_damage_to_player_reduce_percent));
  if (raw_fa_bao_damage_to_player_reduce_percent != 0) {
    _this->_internal_set_fa_bao_damage_to_player_reduce_percent(from._internal_fa_bao_damage_to_player_reduce_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage_add_percent = from._internal_phy_damage_add_percent();
  uint32_t raw_phy_damage_add_percent;
  memcpy(&raw_phy_damage_add_percent, &tmp_phy_damage_add_percent, sizeof(tmp_phy_damage_add_percent));
  if (raw_phy_damage_add_percent != 0) {
    _this->_internal_set_phy_damage_add_percent(from._internal_phy_damage_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_damage_add_percent = from._internal_mag_damage_add_percent();
  uint32_t raw_mag_damage_add_percent;
  memcpy(&raw_mag_damage_add_percent, &tmp_mag_damage_add_percent, sizeof(tmp_mag_damage_add_percent));
  if (raw_mag_damage_add_percent != 0) {
    _this->_internal_set_mag_damage_add_percent(from._internal_mag_damage_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage_reduce_percent = from._internal_phy_damage_reduce_percent();
  uint32_t raw_phy_damage_reduce_percent;
  memcpy(&raw_phy_damage_reduce_percent, &tmp_phy_damage_reduce_percent, sizeof(tmp_phy_damage_reduce_percent));
  if (raw_phy_damage_reduce_percent != 0) {
    _this->_internal_set_phy_damage_reduce_percent(from._internal_phy_damage_reduce_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_damage_reduce_percent = from._internal_mag_damage_reduce_percent();
  uint32_t raw_mag_damage_reduce_percent;
  memcpy(&raw_mag_damage_reduce_percent, &tmp_mag_damage_reduce_percent, sizeof(tmp_mag_damage_reduce_percent));
  if (raw_mag_damage_reduce_percent != 0) {
    _this->_internal_set_mag_damage_reduce_percent(from._internal_mag_damage_reduce_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_monster_damage_add_percent = from._internal_attack_monster_damage_add_percent();
  uint32_t raw_attack_monster_damage_add_percent;
  memcpy(&raw_attack_monster_damage_add_percent, &tmp_attack_monster_damage_add_percent, sizeof(tmp_attack_monster_damage_add_percent));
  if (raw_attack_monster_damage_add_percent != 0) {
    _this->_internal_set_attack_monster_damage_add_percent(from._internal_attack_monster_damage_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_take_monster_damage_reduce_percent = from._internal_take_monster_damage_reduce_percent();
  uint32_t raw_take_monster_damage_reduce_percent;
  memcpy(&raw_take_monster_damage_reduce_percent, &tmp_take_monster_damage_reduce_percent, sizeof(tmp_take_monster_damage_reduce_percent));
  if (raw_take_monster_damage_reduce_percent != 0) {
    _this->_internal_set_take_monster_damage_reduce_percent(from._internal_take_monster_damage_reduce_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_hp_add_percent = from._internal_base_hp_add_percent();
  uint32_t raw_base_hp_add_percent;
  memcpy(&raw_base_hp_add_percent, &tmp_base_hp_add_percent, sizeof(tmp_base_hp_add_percent));
  if (raw_base_hp_add_percent != 0) {
    _this->_internal_set_base_hp_add_percent(from._internal_base_hp_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mp_add_percent = from._internal_base_mp_add_percent();
  uint32_t raw_base_mp_add_percent;
  memcpy(&raw_base_mp_add_percent, &tmp_base_mp_add_percent, sizeof(tmp_base_mp_add_percent));
  if (raw_base_mp_add_percent != 0) {
    _this->_internal_set_base_mp_add_percent(from._internal_base_mp_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_att_add_percent = from._internal_base_phy_att_add_percent();
  uint32_t raw_base_phy_att_add_percent;
  memcpy(&raw_base_phy_att_add_percent, &tmp_base_phy_att_add_percent, sizeof(tmp_base_phy_att_add_percent));
  if (raw_base_phy_att_add_percent != 0) {
    _this->_internal_set_base_phy_att_add_percent(from._internal_base_phy_att_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_att_add_percent = from._internal_base_mag_att_add_percent();
  uint32_t raw_base_mag_att_add_percent;
  memcpy(&raw_base_mag_att_add_percent, &tmp_base_mag_att_add_percent, sizeof(tmp_base_mag_att_add_percent));
  if (raw_base_mag_att_add_percent != 0) {
    _this->_internal_set_base_mag_att_add_percent(from._internal_base_mag_att_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_def_add_percent = from._internal_base_phy_def_add_percent();
  uint32_t raw_base_phy_def_add_percent;
  memcpy(&raw_base_phy_def_add_percent, &tmp_base_phy_def_add_percent, sizeof(tmp_base_phy_def_add_percent));
  if (raw_base_phy_def_add_percent != 0) {
    _this->_internal_set_base_phy_def_add_percent(from._internal_base_phy_def_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_def_add_percent = from._internal_base_mag_def_add_percent();
  uint32_t raw_base_mag_def_add_percent;
  memcpy(&raw_base_mag_def_add_percent, &tmp_base_mag_def_add_percent, sizeof(tmp_base_mag_def_add_percent));
  if (raw_base_mag_def_add_percent != 0) {
    _this->_internal_set_base_mag_def_add_percent(from._internal_base_mag_def_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_hit_add_percent = from._internal_base_phy_hit_add_percent();
  uint32_t raw_base_phy_hit_add_percent;
  memcpy(&raw_base_phy_hit_add_percent, &tmp_base_phy_hit_add_percent, sizeof(tmp_base_phy_hit_add_percent));
  if (raw_base_phy_hit_add_percent != 0) {
    _this->_internal_set_base_phy_hit_add_percent(from._internal_base_phy_hit_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_hit_add_percent = from._internal_base_mag_hit_add_percent();
  uint32_t raw_base_mag_hit_add_percent;
  memcpy(&raw_base_mag_hit_add_percent, &tmp_base_mag_hit_add_percent, sizeof(tmp_base_mag_hit_add_percent));
  if (raw_base_mag_hit_add_percent != 0) {
    _this->_internal_set_base_mag_hit_add_percent(from._internal_base_mag_hit_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_phy_dodge_add_percent = from._internal_base_phy_dodge_add_percent();
  uint32_t raw_base_phy_dodge_add_percent;
  memcpy(&raw_base_phy_dodge_add_percent, &tmp_base_phy_dodge_add_percent, sizeof(tmp_base_phy_dodge_add_percent));
  if (raw_base_phy_dodge_add_percent != 0) {
    _this->_internal_set_base_phy_dodge_add_percent(from._internal_base_phy_dodge_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_mag_dodge_add_percent = from._internal_base_mag_dodge_add_percent();
  uint32_t raw_base_mag_dodge_add_percent;
  memcpy(&raw_base_mag_dodge_add_percent, &tmp_base_mag_dodge_add_percent, sizeof(tmp_base_mag_dodge_add_percent));
  if (raw_base_mag_dodge_add_percent != 0) {
    _this->_internal_set_base_mag_dodge_add_percent(from._internal_base_mag_dodge_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_crit_add_percent = from._internal_base_crit_add_percent();
  uint32_t raw_base_crit_add_percent;
  memcpy(&raw_base_crit_add_percent, &tmp_base_crit_add_percent, sizeof(tmp_base_crit_add_percent));
  if (raw_base_crit_add_percent != 0) {
    _this->_internal_set_base_crit_add_percent(from._internal_base_crit_add_percent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_crit_def_add_percent = from._internal_base_crit_def_add_percent();
  uint32_t raw_base_crit_def_add_percent;
  memcpy(&raw_base_crit_def_add_percent, &tmp_base_crit_def_add_percent, sizeof(tmp_base_crit_def_add_percent));
  if (raw_base_crit_def_add_percent != 0) {
    _this->_internal_set_base_crit_def_add_percent(from._internal_base_crit_def_add_percent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleAttribute::CopyFrom(const RoleAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAttribute::IsInitialized() const {
  return true;
}

void RoleAttribute::InternalSwap(RoleAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleAttribute, _impl_.base_crit_def_add_percent_)
      + sizeof(RoleAttribute::_impl_.base_crit_def_add_percent_)
      - PROTOBUF_FIELD_OFFSET(RoleAttribute, _impl_.health_)>(
          reinterpret_cast<char*>(&_impl_.health_),
          reinterpret_cast<char*>(&other->_impl_.health_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[13]);
}

// ===================================================================

class RankData::_Internal {
 public:
};

RankData::RankData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RankData)
}
RankData::RankData(const RankData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RankData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.layer_){}
    , decltype(_impl_.stage_){}
    , decltype(_impl_.degree_){}
    , decltype(_impl_.breakthrough_type_){}
    , decltype(_impl_.lose_recover_timestamp_){}
    , decltype(_impl_.stage_add_att_){}
    , decltype(_impl_.lose_add_probability_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rank_, &from._impl_.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lose_add_probability_) -
    reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.lose_add_probability_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RankData)
}

inline void RankData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_){0}
    , decltype(_impl_.exp_){0}
    , decltype(_impl_.layer_){0}
    , decltype(_impl_.stage_){0}
    , decltype(_impl_.degree_){0}
    , decltype(_impl_.breakthrough_type_){0}
    , decltype(_impl_.lose_recover_timestamp_){int64_t{0}}
    , decltype(_impl_.stage_add_att_){int64_t{0}}
    , decltype(_impl_.lose_add_probability_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RankData::~RankData() {
  // @@protoc_insertion_point(destructor:idlepb.RankData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RankData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RankData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RankData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RankData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lose_add_probability_) -
      reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.lose_add_probability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 layer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 degree = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.BreakthroughType breakthrough_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_breakthrough_type(static_cast<::idlepb::BreakthroughType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 lose_add_probability = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.lose_add_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lose_recover_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.lose_recover_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 stage_add_att = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.stage_add_att_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RankData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RankData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // float exp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_exp(), target);
  }

  // int32 layer = 3;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_layer(), target);
  }

  // int32 stage = 4;
  if (this->_internal_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_stage(), target);
  }

  // int32 degree = 5;
  if (this->_internal_degree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_degree(), target);
  }

  // .idlepb.BreakthroughType breakthrough_type = 6;
  if (this->_internal_breakthrough_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_breakthrough_type(), target);
  }

  // int32 lose_add_probability = 7;
  if (this->_internal_lose_add_probability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_lose_add_probability(), target);
  }

  // int64 lose_recover_timestamp = 8;
  if (this->_internal_lose_recover_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_lose_recover_timestamp(), target);
  }

  // int64 stage_add_att = 9;
  if (this->_internal_stage_add_att() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_stage_add_att(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RankData)
  return target;
}

size_t RankData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RankData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  // float exp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    total_size += 1 + 4;
  }

  // int32 layer = 3;
  if (this->_internal_layer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_layer());
  }

  // int32 stage = 4;
  if (this->_internal_stage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stage());
  }

  // int32 degree = 5;
  if (this->_internal_degree() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_degree());
  }

  // .idlepb.BreakthroughType breakthrough_type = 6;
  if (this->_internal_breakthrough_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_breakthrough_type());
  }

  // int64 lose_recover_timestamp = 8;
  if (this->_internal_lose_recover_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lose_recover_timestamp());
  }

  // int64 stage_add_att = 9;
  if (this->_internal_stage_add_att() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stage_add_att());
  }

  // int32 lose_add_probability = 7;
  if (this->_internal_lose_add_probability() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lose_add_probability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RankData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RankData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RankData::GetClassData() const { return &_class_data_; }


void RankData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RankData*>(&to_msg);
  auto& from = static_cast<const RankData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RankData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = from._internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_layer() != 0) {
    _this->_internal_set_layer(from._internal_layer());
  }
  if (from._internal_stage() != 0) {
    _this->_internal_set_stage(from._internal_stage());
  }
  if (from._internal_degree() != 0) {
    _this->_internal_set_degree(from._internal_degree());
  }
  if (from._internal_breakthrough_type() != 0) {
    _this->_internal_set_breakthrough_type(from._internal_breakthrough_type());
  }
  if (from._internal_lose_recover_timestamp() != 0) {
    _this->_internal_set_lose_recover_timestamp(from._internal_lose_recover_timestamp());
  }
  if (from._internal_stage_add_att() != 0) {
    _this->_internal_set_stage_add_att(from._internal_stage_add_att());
  }
  if (from._internal_lose_add_probability() != 0) {
    _this->_internal_set_lose_add_probability(from._internal_lose_add_probability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RankData::CopyFrom(const RankData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RankData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankData::IsInitialized() const {
  return true;
}

void RankData::InternalSwap(RankData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RankData, _impl_.lose_add_probability_)
      + sizeof(RankData::_impl_.lose_add_probability_)
      - PROTOBUF_FIELD_OFFSET(RankData, _impl_.rank_)>(
          reinterpret_cast<char*>(&_impl_.rank_),
          reinterpret_cast<char*>(&other->_impl_.rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RankData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[14]);
}

// ===================================================================

class BreathingReward::_Internal {
 public:
};

BreathingReward::BreathingReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.BreathingReward)
}
BreathingReward::BreathingReward(const BreathingReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BreathingReward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){from._impl_.item_id_}
    , /*decltype(_impl_._item_id_cached_byte_size_)*/{0}
    , decltype(_impl_.num_){from._impl_.num_}
    , /*decltype(_impl_._num_cached_byte_size_)*/{0}
    , decltype(_impl_.index_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.received_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.received_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.received_));
  // @@protoc_insertion_point(copy_constructor:idlepb.BreathingReward)
}

inline void BreathingReward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){arena}
    , /*decltype(_impl_._item_id_cached_byte_size_)*/{0}
    , decltype(_impl_.num_){arena}
    , /*decltype(_impl_._num_cached_byte_size_)*/{0}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.received_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BreathingReward::~BreathingReward() {
  // @@protoc_insertion_point(destructor:idlepb.BreathingReward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BreathingReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_id_.~RepeatedField();
  _impl_.num_.~RepeatedField();
}

void BreathingReward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BreathingReward::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.BreathingReward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_.Clear();
  _impl_.num_.Clear();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.received_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.received_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BreathingReward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_item_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_item_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_num(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool received = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BreathingReward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.BreathingReward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // repeated int32 item_id = 2;
  {
    int byte_size = _impl_._item_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_item_id(), byte_size, target);
    }
  }

  // repeated int32 num = 3;
  {
    int byte_size = _impl_._num_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_num(), byte_size, target);
    }
  }

  // int32 dir = 4;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_dir(), target);
  }

  // bool received = 5;
  if (this->_internal_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_received(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.BreathingReward)
  return target;
}

size_t BreathingReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.BreathingReward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 item_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.item_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._item_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 num = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.num_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._num_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 dir = 4;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir());
  }

  // bool received = 5;
  if (this->_internal_received() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BreathingReward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BreathingReward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BreathingReward::GetClassData() const { return &_class_data_; }


void BreathingReward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BreathingReward*>(&to_msg);
  auto& from = static_cast<const BreathingReward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.BreathingReward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_id_.MergeFrom(from._impl_.item_id_);
  _this->_impl_.num_.MergeFrom(from._impl_.num_);
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  if (from._internal_received() != 0) {
    _this->_internal_set_received(from._internal_received());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BreathingReward::CopyFrom(const BreathingReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.BreathingReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreathingReward::IsInitialized() const {
  return true;
}

void BreathingReward::InternalSwap(BreathingReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_id_.InternalSwap(&other->_impl_.item_id_);
  _impl_.num_.InternalSwap(&other->_impl_.num_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BreathingReward, _impl_.received_)
      + sizeof(BreathingReward::_impl_.received_)
      - PROTOBUF_FIELD_OFFSET(BreathingReward, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BreathingReward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[15]);
}

// ===================================================================

class CommonCultivationData::_Internal {
 public:
};

CommonCultivationData::CommonCultivationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CommonCultivationData)
}
CommonCultivationData::CommonCultivationData(const CommonCultivationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommonCultivationData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.breathing_rewards_){from._impl_.breathing_rewards_}
    , decltype(_impl_.merge_breathing_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.merge_breathing_ = from._impl_.merge_breathing_;
  // @@protoc_insertion_point(copy_constructor:idlepb.CommonCultivationData)
}

inline void CommonCultivationData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.breathing_rewards_){arena}
    , decltype(_impl_.merge_breathing_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommonCultivationData::~CommonCultivationData() {
  // @@protoc_insertion_point(destructor:idlepb.CommonCultivationData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonCultivationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.breathing_rewards_.~RepeatedPtrField();
}

void CommonCultivationData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonCultivationData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CommonCultivationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.breathing_rewards_.Clear();
  _impl_.merge_breathing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonCultivationData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.BreathingReward breathing_rewards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_breathing_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool merge_breathing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.merge_breathing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonCultivationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CommonCultivationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.BreathingReward breathing_rewards = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_breathing_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_breathing_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool merge_breathing = 2;
  if (this->_internal_merge_breathing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_merge_breathing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CommonCultivationData)
  return target;
}

size_t CommonCultivationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CommonCultivationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.BreathingReward breathing_rewards = 1;
  total_size += 1UL * this->_internal_breathing_rewards_size();
  for (const auto& msg : this->_impl_.breathing_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool merge_breathing = 2;
  if (this->_internal_merge_breathing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonCultivationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommonCultivationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonCultivationData::GetClassData() const { return &_class_data_; }


void CommonCultivationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommonCultivationData*>(&to_msg);
  auto& from = static_cast<const CommonCultivationData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CommonCultivationData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.breathing_rewards_.MergeFrom(from._impl_.breathing_rewards_);
  if (from._internal_merge_breathing() != 0) {
    _this->_internal_set_merge_breathing(from._internal_merge_breathing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonCultivationData::CopyFrom(const CommonCultivationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CommonCultivationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonCultivationData::IsInitialized() const {
  return true;
}

void CommonCultivationData::InternalSwap(CommonCultivationData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.breathing_rewards_.InternalSwap(&other->_impl_.breathing_rewards_);
  swap(_impl_.merge_breathing_, other->_impl_.merge_breathing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonCultivationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[16]);
}

// ===================================================================

class CultivationData::_Internal {
 public:
  static const ::idlepb::RankData& rank_data(const CultivationData* msg);
};

const ::idlepb::RankData&
CultivationData::_Internal::rank_data(const CultivationData* msg) {
  return *msg->_impl_.rank_data_;
}
CultivationData::CultivationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CultivationData)
}
CultivationData::CultivationData(const CultivationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CultivationData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rank_data()) {
    _this->_impl_.rank_data_ = new ::idlepb::RankData(*from._impl_.rank_data_);
  }
  // @@protoc_insertion_point(copy_constructor:idlepb.CultivationData)
}

inline void CultivationData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CultivationData::~CultivationData() {
  // @@protoc_insertion_point(destructor:idlepb.CultivationData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CultivationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rank_data_;
}

void CultivationData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CultivationData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CultivationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.rank_data_ != nullptr) {
    delete _impl_.rank_data_;
  }
  _impl_.rank_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CultivationData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.RankData rank_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rank_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CultivationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CultivationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.RankData rank_data = 1;
  if (this->_internal_has_rank_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rank_data(this),
        _Internal::rank_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CultivationData)
  return target;
}

size_t CultivationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CultivationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.RankData rank_data = 1;
  if (this->_internal_has_rank_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rank_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CultivationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CultivationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CultivationData::GetClassData() const { return &_class_data_; }


void CultivationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CultivationData*>(&to_msg);
  auto& from = static_cast<const CultivationData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CultivationData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rank_data()) {
    _this->_internal_mutable_rank_data()->::idlepb::RankData::MergeFrom(
        from._internal_rank_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CultivationData::CopyFrom(const CultivationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CultivationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CultivationData::IsInitialized() const {
  return true;
}

void CultivationData::InternalSwap(CultivationData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.rank_data_, other->_impl_.rank_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CultivationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[17]);
}

// ===================================================================

class RoleDailyCounterEntry::_Internal {
 public:
};

RoleDailyCounterEntry::RoleDailyCounterEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleDailyCounterEntry)
}
RoleDailyCounterEntry::RoleDailyCounterEntry(const RoleDailyCounterEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleDailyCounterEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleDailyCounterEntry)
}

inline void RoleDailyCounterEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleDailyCounterEntry::~RoleDailyCounterEntry() {
  // @@protoc_insertion_point(destructor:idlepb.RoleDailyCounterEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleDailyCounterEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleDailyCounterEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleDailyCounterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleDailyCounterEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDailyCounterEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.RoleDailyCounterType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::idlepb::RoleDailyCounterType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleDailyCounterEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleDailyCounterEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.RoleDailyCounterType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleDailyCounterEntry)
  return target;
}

size_t RoleDailyCounterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleDailyCounterEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.RoleDailyCounterType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleDailyCounterEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleDailyCounterEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleDailyCounterEntry::GetClassData() const { return &_class_data_; }


void RoleDailyCounterEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleDailyCounterEntry*>(&to_msg);
  auto& from = static_cast<const RoleDailyCounterEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleDailyCounterEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleDailyCounterEntry::CopyFrom(const RoleDailyCounterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleDailyCounterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDailyCounterEntry::IsInitialized() const {
  return true;
}

void RoleDailyCounterEntry::InternalSwap(RoleDailyCounterEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleDailyCounterEntry, _impl_.num_)
      + sizeof(RoleDailyCounterEntry::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(RoleDailyCounterEntry, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDailyCounterEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[18]);
}

// ===================================================================

class RoleDailyCounter::_Internal {
 public:
};

RoleDailyCounter::RoleDailyCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleDailyCounter)
}
RoleDailyCounter::RoleDailyCounter(const RoleDailyCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleDailyCounter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.last_reset_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.last_reset_time_ = from._impl_.last_reset_time_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleDailyCounter)
}

inline void RoleDailyCounter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.last_reset_time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleDailyCounter::~RoleDailyCounter() {
  // @@protoc_insertion_point(destructor:idlepb.RoleDailyCounter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleDailyCounter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void RoleDailyCounter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleDailyCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleDailyCounter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.last_reset_time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDailyCounter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.RoleDailyCounterEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 last_reset_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_reset_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleDailyCounter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleDailyCounter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.RoleDailyCounterEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 last_reset_time = 4;
  if (this->_internal_last_reset_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_reset_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleDailyCounter)
  return target;
}

size_t RoleDailyCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleDailyCounter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.RoleDailyCounterEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 last_reset_time = 4;
  if (this->_internal_last_reset_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleDailyCounter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleDailyCounter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleDailyCounter::GetClassData() const { return &_class_data_; }


void RoleDailyCounter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleDailyCounter*>(&to_msg);
  auto& from = static_cast<const RoleDailyCounter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleDailyCounter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_last_reset_time() != 0) {
    _this->_internal_set_last_reset_time(from._internal_last_reset_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleDailyCounter::CopyFrom(const RoleDailyCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleDailyCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDailyCounter::IsInitialized() const {
  return true;
}

void RoleDailyCounter::InternalSwap(RoleDailyCounter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  swap(_impl_.last_reset_time_, other->_impl_.last_reset_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDailyCounter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[19]);
}

// ===================================================================

class RoleWeeklyCounterEntry::_Internal {
 public:
};

RoleWeeklyCounterEntry::RoleWeeklyCounterEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleWeeklyCounterEntry)
}
RoleWeeklyCounterEntry::RoleWeeklyCounterEntry(const RoleWeeklyCounterEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleWeeklyCounterEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleWeeklyCounterEntry)
}

inline void RoleWeeklyCounterEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleWeeklyCounterEntry::~RoleWeeklyCounterEntry() {
  // @@protoc_insertion_point(destructor:idlepb.RoleWeeklyCounterEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleWeeklyCounterEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleWeeklyCounterEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleWeeklyCounterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleWeeklyCounterEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleWeeklyCounterEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.RoleWeeklyCounterType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::idlepb::RoleWeeklyCounterType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleWeeklyCounterEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleWeeklyCounterEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.RoleWeeklyCounterType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleWeeklyCounterEntry)
  return target;
}

size_t RoleWeeklyCounterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleWeeklyCounterEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.RoleWeeklyCounterType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleWeeklyCounterEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleWeeklyCounterEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleWeeklyCounterEntry::GetClassData() const { return &_class_data_; }


void RoleWeeklyCounterEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleWeeklyCounterEntry*>(&to_msg);
  auto& from = static_cast<const RoleWeeklyCounterEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleWeeklyCounterEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleWeeklyCounterEntry::CopyFrom(const RoleWeeklyCounterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleWeeklyCounterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleWeeklyCounterEntry::IsInitialized() const {
  return true;
}

void RoleWeeklyCounterEntry::InternalSwap(RoleWeeklyCounterEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleWeeklyCounterEntry, _impl_.num_)
      + sizeof(RoleWeeklyCounterEntry::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(RoleWeeklyCounterEntry, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleWeeklyCounterEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[20]);
}

// ===================================================================

class RoleWeeklyCounter::_Internal {
 public:
};

RoleWeeklyCounter::RoleWeeklyCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleWeeklyCounter)
}
RoleWeeklyCounter::RoleWeeklyCounter(const RoleWeeklyCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleWeeklyCounter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.last_reset_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.last_reset_time_ = from._impl_.last_reset_time_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleWeeklyCounter)
}

inline void RoleWeeklyCounter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.last_reset_time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleWeeklyCounter::~RoleWeeklyCounter() {
  // @@protoc_insertion_point(destructor:idlepb.RoleWeeklyCounter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleWeeklyCounter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void RoleWeeklyCounter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleWeeklyCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleWeeklyCounter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.last_reset_time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleWeeklyCounter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.RoleWeeklyCounterEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 last_reset_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_reset_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleWeeklyCounter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleWeeklyCounter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.RoleWeeklyCounterEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 last_reset_time = 4;
  if (this->_internal_last_reset_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_reset_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleWeeklyCounter)
  return target;
}

size_t RoleWeeklyCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleWeeklyCounter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.RoleWeeklyCounterEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 last_reset_time = 4;
  if (this->_internal_last_reset_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleWeeklyCounter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleWeeklyCounter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleWeeklyCounter::GetClassData() const { return &_class_data_; }


void RoleWeeklyCounter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleWeeklyCounter*>(&to_msg);
  auto& from = static_cast<const RoleWeeklyCounter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleWeeklyCounter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_last_reset_time() != 0) {
    _this->_internal_set_last_reset_time(from._internal_last_reset_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleWeeklyCounter::CopyFrom(const RoleWeeklyCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleWeeklyCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleWeeklyCounter::IsInitialized() const {
  return true;
}

void RoleWeeklyCounter::InternalSwap(RoleWeeklyCounter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  swap(_impl_.last_reset_time_, other->_impl_.last_reset_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleWeeklyCounter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[21]);
}

// ===================================================================

class CurrencyEntry::_Internal {
 public:
};

CurrencyEntry::CurrencyEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CurrencyEntry)
}
CurrencyEntry::CurrencyEntry(const CurrencyEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CurrencyEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_, &from._impl_.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:idlepb.CurrencyEntry)
}

inline void CurrencyEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CurrencyEntry::~CurrencyEntry() {
  // @@protoc_insertion_point(destructor:idlepb.CurrencyEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrencyEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CurrencyEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurrencyEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CurrencyEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrencyEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.CurrencyType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::idlepb::CurrencyType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrencyEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CurrencyEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.CurrencyType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int64 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CurrencyEntry)
  return target;
}

size_t CurrencyEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CurrencyEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num());
  }

  // .idlepb.CurrencyType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrencyEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CurrencyEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrencyEntry::GetClassData() const { return &_class_data_; }


void CurrencyEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CurrencyEntry*>(&to_msg);
  auto& from = static_cast<const CurrencyEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CurrencyEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrencyEntry::CopyFrom(const CurrencyEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CurrencyEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyEntry::IsInitialized() const {
  return true;
}

void CurrencyEntry::InternalSwap(CurrencyEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CurrencyEntry, _impl_.type_)
      + sizeof(CurrencyEntry::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CurrencyEntry, _impl_.num_)>(
          reinterpret_cast<char*>(&_impl_.num_),
          reinterpret_cast<char*>(&other->_impl_.num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[22]);
}

// ===================================================================

class CurrencyData::_Internal {
 public:
};

CurrencyData::CurrencyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CurrencyData)
}
CurrencyData::CurrencyData(const CurrencyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CurrencyData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.currencies_){from._impl_.currencies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.CurrencyData)
}

inline void CurrencyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.currencies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CurrencyData::~CurrencyData() {
  // @@protoc_insertion_point(destructor:idlepb.CurrencyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrencyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currencies_.~RepeatedPtrField();
}

void CurrencyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurrencyData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CurrencyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.currencies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrencyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.CurrencyEntry currencies = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_currencies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrencyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CurrencyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.CurrencyEntry currencies = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_currencies_size()); i < n; i++) {
    const auto& repfield = this->_internal_currencies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CurrencyData)
  return target;
}

size_t CurrencyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CurrencyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.CurrencyEntry currencies = 10;
  total_size += 1UL * this->_internal_currencies_size();
  for (const auto& msg : this->_impl_.currencies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrencyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CurrencyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrencyData::GetClassData() const { return &_class_data_; }


void CurrencyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CurrencyData*>(&to_msg);
  auto& from = static_cast<const CurrencyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CurrencyData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.currencies_.MergeFrom(from._impl_.currencies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrencyData::CopyFrom(const CurrencyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CurrencyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyData::IsInitialized() const {
  return true;
}

void CurrencyData::InternalSwap(CurrencyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.currencies_.InternalSwap(&other->_impl_.currencies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[23]);
}

// ===================================================================

class EquipPerkEntry::_Internal {
 public:
};

EquipPerkEntry::EquipPerkEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.EquipPerkEntry)
}
EquipPerkEntry::EquipPerkEntry(const EquipPerkEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EquipPerkEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.EquipPerkEntry)
}

inline void EquipPerkEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EquipPerkEntry::~EquipPerkEntry() {
  // @@protoc_insertion_point(destructor:idlepb.EquipPerkEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EquipPerkEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EquipPerkEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EquipPerkEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.EquipPerkEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquipPerkEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ItemQuality quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::idlepb::ItemQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EquipPerkEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.EquipPerkEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .idlepb.ItemQuality quality = 2;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_quality(), target);
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.EquipPerkEntry)
  return target;
}

size_t EquipPerkEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.EquipPerkEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .idlepb.ItemQuality quality = 2;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EquipPerkEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EquipPerkEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EquipPerkEntry::GetClassData() const { return &_class_data_; }


void EquipPerkEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EquipPerkEntry*>(&to_msg);
  auto& from = static_cast<const EquipPerkEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.EquipPerkEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EquipPerkEntry::CopyFrom(const EquipPerkEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.EquipPerkEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipPerkEntry::IsInitialized() const {
  return true;
}

void EquipPerkEntry::InternalSwap(EquipPerkEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EquipPerkEntry, _impl_.num_)
      + sizeof(EquipPerkEntry::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(EquipPerkEntry, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipPerkEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[24]);
}

// ===================================================================

class SkillEquipmentAttributes::_Internal {
 public:
};

SkillEquipmentAttributes::SkillEquipmentAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SkillEquipmentAttributes)
}
SkillEquipmentAttributes::SkillEquipmentAttributes(const SkillEquipmentAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkillEquipmentAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.effects_){from._impl_.effects_}
    , decltype(_impl_.shield_effects_){from._impl_.shield_effects_}
    , decltype(_impl_.cool_down_){}
    , decltype(_impl_.target_num_){}
    , decltype(_impl_.attack_count_){}
    , decltype(_impl_.phy_coefficient_){}
    , decltype(_impl_.phy_damage_){}
    , decltype(_impl_.mag_coefficient_){}
    , decltype(_impl_.mag_damage_){}
    , decltype(_impl_.max_damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cool_down_, &from._impl_.cool_down_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_damage_) -
    reinterpret_cast<char*>(&_impl_.cool_down_)) + sizeof(_impl_.max_damage_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SkillEquipmentAttributes)
}

inline void SkillEquipmentAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.effects_){arena}
    , decltype(_impl_.shield_effects_){arena}
    , decltype(_impl_.cool_down_){0}
    , decltype(_impl_.target_num_){0}
    , decltype(_impl_.attack_count_){0}
    , decltype(_impl_.phy_coefficient_){0}
    , decltype(_impl_.phy_damage_){0}
    , decltype(_impl_.mag_coefficient_){0}
    , decltype(_impl_.mag_damage_){0}
    , decltype(_impl_.max_damage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SkillEquipmentAttributes::~SkillEquipmentAttributes() {
  // @@protoc_insertion_point(destructor:idlepb.SkillEquipmentAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillEquipmentAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.effects_.~RepeatedPtrField();
  _impl_.shield_effects_.~RepeatedPtrField();
}

void SkillEquipmentAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkillEquipmentAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SkillEquipmentAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effects_.Clear();
  _impl_.shield_effects_.Clear();
  ::memset(&_impl_.cool_down_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_damage_) -
      reinterpret_cast<char*>(&_impl_.cool_down_)) + sizeof(_impl_.max_damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillEquipmentAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float cool_down = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.cool_down_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 target_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attack_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.attack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float phy_coefficient = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.phy_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_damage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.phy_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_coefficient = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.mag_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_damage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.mag_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max_damage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.max_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.AbilityEffectData effects = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.AbilityEffectData shield_effects = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shield_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillEquipmentAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SkillEquipmentAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float cool_down = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cool_down = this->_internal_cool_down();
  uint32_t raw_cool_down;
  memcpy(&raw_cool_down, &tmp_cool_down, sizeof(tmp_cool_down));
  if (raw_cool_down != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_cool_down(), target);
  }

  // int32 target_num = 2;
  if (this->_internal_target_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_num(), target);
  }

  // int32 attack_count = 3;
  if (this->_internal_attack_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_attack_count(), target);
  }

  // float phy_coefficient = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_coefficient = this->_internal_phy_coefficient();
  uint32_t raw_phy_coefficient;
  memcpy(&raw_phy_coefficient, &tmp_phy_coefficient, sizeof(tmp_phy_coefficient));
  if (raw_phy_coefficient != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_phy_coefficient(), target);
  }

  // float phy_damage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage = this->_internal_phy_damage();
  uint32_t raw_phy_damage;
  memcpy(&raw_phy_damage, &tmp_phy_damage, sizeof(tmp_phy_damage));
  if (raw_phy_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_phy_damage(), target);
  }

  // float mag_coefficient = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_coefficient = this->_internal_mag_coefficient();
  uint32_t raw_mag_coefficient;
  memcpy(&raw_mag_coefficient, &tmp_mag_coefficient, sizeof(tmp_mag_coefficient));
  if (raw_mag_coefficient != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_mag_coefficient(), target);
  }

  // float mag_damage = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_damage = this->_internal_mag_damage();
  uint32_t raw_mag_damage;
  memcpy(&raw_mag_damage, &tmp_mag_damage, sizeof(tmp_mag_damage));
  if (raw_mag_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_mag_damage(), target);
  }

  // float max_damage = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_damage = this->_internal_max_damage();
  uint32_t raw_max_damage;
  memcpy(&raw_max_damage, &tmp_max_damage, sizeof(tmp_max_damage));
  if (raw_max_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_max_damage(), target);
  }

  // repeated .idlepb.AbilityEffectData effects = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_effects_size()); i < n; i++) {
    const auto& repfield = this->_internal_effects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.AbilityEffectData shield_effects = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shield_effects_size()); i < n; i++) {
    const auto& repfield = this->_internal_shield_effects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SkillEquipmentAttributes)
  return target;
}

size_t SkillEquipmentAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SkillEquipmentAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.AbilityEffectData effects = 9;
  total_size += 1UL * this->_internal_effects_size();
  for (const auto& msg : this->_impl_.effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.AbilityEffectData shield_effects = 10;
  total_size += 1UL * this->_internal_shield_effects_size();
  for (const auto& msg : this->_impl_.shield_effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float cool_down = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cool_down = this->_internal_cool_down();
  uint32_t raw_cool_down;
  memcpy(&raw_cool_down, &tmp_cool_down, sizeof(tmp_cool_down));
  if (raw_cool_down != 0) {
    total_size += 1 + 4;
  }

  // int32 target_num = 2;
  if (this->_internal_target_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_num());
  }

  // int32 attack_count = 3;
  if (this->_internal_attack_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attack_count());
  }

  // float phy_coefficient = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_coefficient = this->_internal_phy_coefficient();
  uint32_t raw_phy_coefficient;
  memcpy(&raw_phy_coefficient, &tmp_phy_coefficient, sizeof(tmp_phy_coefficient));
  if (raw_phy_coefficient != 0) {
    total_size += 1 + 4;
  }

  // float phy_damage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage = this->_internal_phy_damage();
  uint32_t raw_phy_damage;
  memcpy(&raw_phy_damage, &tmp_phy_damage, sizeof(tmp_phy_damage));
  if (raw_phy_damage != 0) {
    total_size += 1 + 4;
  }

  // float mag_coefficient = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_coefficient = this->_internal_mag_coefficient();
  uint32_t raw_mag_coefficient;
  memcpy(&raw_mag_coefficient, &tmp_mag_coefficient, sizeof(tmp_mag_coefficient));
  if (raw_mag_coefficient != 0) {
    total_size += 1 + 4;
  }

  // float mag_damage = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_damage = this->_internal_mag_damage();
  uint32_t raw_mag_damage;
  memcpy(&raw_mag_damage, &tmp_mag_damage, sizeof(tmp_mag_damage));
  if (raw_mag_damage != 0) {
    total_size += 1 + 4;
  }

  // float max_damage = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_damage = this->_internal_max_damage();
  uint32_t raw_max_damage;
  memcpy(&raw_max_damage, &tmp_max_damage, sizeof(tmp_max_damage));
  if (raw_max_damage != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillEquipmentAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkillEquipmentAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillEquipmentAttributes::GetClassData() const { return &_class_data_; }


void SkillEquipmentAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkillEquipmentAttributes*>(&to_msg);
  auto& from = static_cast<const SkillEquipmentAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SkillEquipmentAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.effects_.MergeFrom(from._impl_.effects_);
  _this->_impl_.shield_effects_.MergeFrom(from._impl_.shield_effects_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cool_down = from._internal_cool_down();
  uint32_t raw_cool_down;
  memcpy(&raw_cool_down, &tmp_cool_down, sizeof(tmp_cool_down));
  if (raw_cool_down != 0) {
    _this->_internal_set_cool_down(from._internal_cool_down());
  }
  if (from._internal_target_num() != 0) {
    _this->_internal_set_target_num(from._internal_target_num());
  }
  if (from._internal_attack_count() != 0) {
    _this->_internal_set_attack_count(from._internal_attack_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_coefficient = from._internal_phy_coefficient();
  uint32_t raw_phy_coefficient;
  memcpy(&raw_phy_coefficient, &tmp_phy_coefficient, sizeof(tmp_phy_coefficient));
  if (raw_phy_coefficient != 0) {
    _this->_internal_set_phy_coefficient(from._internal_phy_coefficient());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage = from._internal_phy_damage();
  uint32_t raw_phy_damage;
  memcpy(&raw_phy_damage, &tmp_phy_damage, sizeof(tmp_phy_damage));
  if (raw_phy_damage != 0) {
    _this->_internal_set_phy_damage(from._internal_phy_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_coefficient = from._internal_mag_coefficient();
  uint32_t raw_mag_coefficient;
  memcpy(&raw_mag_coefficient, &tmp_mag_coefficient, sizeof(tmp_mag_coefficient));
  if (raw_mag_coefficient != 0) {
    _this->_internal_set_mag_coefficient(from._internal_mag_coefficient());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_damage = from._internal_mag_damage();
  uint32_t raw_mag_damage;
  memcpy(&raw_mag_damage, &tmp_mag_damage, sizeof(tmp_mag_damage));
  if (raw_mag_damage != 0) {
    _this->_internal_set_mag_damage(from._internal_mag_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_damage = from._internal_max_damage();
  uint32_t raw_max_damage;
  memcpy(&raw_max_damage, &tmp_max_damage, sizeof(tmp_max_damage));
  if (raw_max_damage != 0) {
    _this->_internal_set_max_damage(from._internal_max_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillEquipmentAttributes::CopyFrom(const SkillEquipmentAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SkillEquipmentAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillEquipmentAttributes::IsInitialized() const {
  return true;
}

void SkillEquipmentAttributes::InternalSwap(SkillEquipmentAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.effects_.InternalSwap(&other->_impl_.effects_);
  _impl_.shield_effects_.InternalSwap(&other->_impl_.shield_effects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillEquipmentAttributes, _impl_.max_damage_)
      + sizeof(SkillEquipmentAttributes::_impl_.max_damage_)
      - PROTOBUF_FIELD_OFFSET(SkillEquipmentAttributes, _impl_.cool_down_)>(
          reinterpret_cast<char*>(&_impl_.cool_down_),
          reinterpret_cast<char*>(&other->_impl_.cool_down_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillEquipmentAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[25]);
}

// ===================================================================

class SkillEquipmentData::_Internal {
 public:
  static const ::idlepb::SkillEquipmentAttributes& attributes(const SkillEquipmentData* msg);
  static const ::idlepb::SkillEquipmentAttributes& reinforce_attributes(const SkillEquipmentData* msg);
  static const ::idlepb::SkillEquipmentAttributes& qiwen_attributes(const SkillEquipmentData* msg);
  static const ::idlepb::SkillEquipmentAttributes& jinglian_attributes(const SkillEquipmentData* msg);
};

const ::idlepb::SkillEquipmentAttributes&
SkillEquipmentData::_Internal::attributes(const SkillEquipmentData* msg) {
  return *msg->_impl_.attributes_;
}
const ::idlepb::SkillEquipmentAttributes&
SkillEquipmentData::_Internal::reinforce_attributes(const SkillEquipmentData* msg) {
  return *msg->_impl_.reinforce_attributes_;
}
const ::idlepb::SkillEquipmentAttributes&
SkillEquipmentData::_Internal::qiwen_attributes(const SkillEquipmentData* msg) {
  return *msg->_impl_.qiwen_attributes_;
}
const ::idlepb::SkillEquipmentAttributes&
SkillEquipmentData::_Internal::jinglian_attributes(const SkillEquipmentData* msg) {
  return *msg->_impl_.jinglian_attributes_;
}
SkillEquipmentData::SkillEquipmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SkillEquipmentData)
}
SkillEquipmentData::SkillEquipmentData(const SkillEquipmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkillEquipmentData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.reinforce_attributes_){nullptr}
    , decltype(_impl_.qiwen_attributes_){nullptr}
    , decltype(_impl_.jinglian_attributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::idlepb::SkillEquipmentAttributes(*from._impl_.attributes_);
  }
  if (from._internal_has_reinforce_attributes()) {
    _this->_impl_.reinforce_attributes_ = new ::idlepb::SkillEquipmentAttributes(*from._impl_.reinforce_attributes_);
  }
  if (from._internal_has_qiwen_attributes()) {
    _this->_impl_.qiwen_attributes_ = new ::idlepb::SkillEquipmentAttributes(*from._impl_.qiwen_attributes_);
  }
  if (from._internal_has_jinglian_attributes()) {
    _this->_impl_.jinglian_attributes_ = new ::idlepb::SkillEquipmentAttributes(*from._impl_.jinglian_attributes_);
  }
  // @@protoc_insertion_point(copy_constructor:idlepb.SkillEquipmentData)
}

inline void SkillEquipmentData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.reinforce_attributes_){nullptr}
    , decltype(_impl_.qiwen_attributes_){nullptr}
    , decltype(_impl_.jinglian_attributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SkillEquipmentData::~SkillEquipmentData() {
  // @@protoc_insertion_point(destructor:idlepb.SkillEquipmentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillEquipmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.attributes_;
  if (this != internal_default_instance()) delete _impl_.reinforce_attributes_;
  if (this != internal_default_instance()) delete _impl_.qiwen_attributes_;
  if (this != internal_default_instance()) delete _impl_.jinglian_attributes_;
}

void SkillEquipmentData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkillEquipmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SkillEquipmentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.attributes_ != nullptr) {
    delete _impl_.attributes_;
  }
  _impl_.attributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reinforce_attributes_ != nullptr) {
    delete _impl_.reinforce_attributes_;
  }
  _impl_.reinforce_attributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.qiwen_attributes_ != nullptr) {
    delete _impl_.qiwen_attributes_;
  }
  _impl_.qiwen_attributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.jinglian_attributes_ != nullptr) {
    delete _impl_.jinglian_attributes_;
  }
  _impl_.jinglian_attributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillEquipmentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.SkillEquipmentAttributes attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.SkillEquipmentAttributes reinforce_attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reinforce_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.SkillEquipmentAttributes qiwen_attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_qiwen_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.SkillEquipmentAttributes jinglian_attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_jinglian_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillEquipmentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SkillEquipmentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.SkillEquipmentAttributes attributes = 1;
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // .idlepb.SkillEquipmentAttributes reinforce_attributes = 2;
  if (this->_internal_has_reinforce_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::reinforce_attributes(this),
        _Internal::reinforce_attributes(this).GetCachedSize(), target, stream);
  }

  // .idlepb.SkillEquipmentAttributes qiwen_attributes = 3;
  if (this->_internal_has_qiwen_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::qiwen_attributes(this),
        _Internal::qiwen_attributes(this).GetCachedSize(), target, stream);
  }

  // .idlepb.SkillEquipmentAttributes jinglian_attributes = 4;
  if (this->_internal_has_jinglian_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::jinglian_attributes(this),
        _Internal::jinglian_attributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SkillEquipmentData)
  return target;
}

size_t SkillEquipmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SkillEquipmentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.SkillEquipmentAttributes attributes = 1;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }

  // .idlepb.SkillEquipmentAttributes reinforce_attributes = 2;
  if (this->_internal_has_reinforce_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reinforce_attributes_);
  }

  // .idlepb.SkillEquipmentAttributes qiwen_attributes = 3;
  if (this->_internal_has_qiwen_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.qiwen_attributes_);
  }

  // .idlepb.SkillEquipmentAttributes jinglian_attributes = 4;
  if (this->_internal_has_jinglian_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.jinglian_attributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillEquipmentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkillEquipmentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillEquipmentData::GetClassData() const { return &_class_data_; }


void SkillEquipmentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkillEquipmentData*>(&to_msg);
  auto& from = static_cast<const SkillEquipmentData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SkillEquipmentData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attributes()) {
    _this->_internal_mutable_attributes()->::idlepb::SkillEquipmentAttributes::MergeFrom(
        from._internal_attributes());
  }
  if (from._internal_has_reinforce_attributes()) {
    _this->_internal_mutable_reinforce_attributes()->::idlepb::SkillEquipmentAttributes::MergeFrom(
        from._internal_reinforce_attributes());
  }
  if (from._internal_has_qiwen_attributes()) {
    _this->_internal_mutable_qiwen_attributes()->::idlepb::SkillEquipmentAttributes::MergeFrom(
        from._internal_qiwen_attributes());
  }
  if (from._internal_has_jinglian_attributes()) {
    _this->_internal_mutable_jinglian_attributes()->::idlepb::SkillEquipmentAttributes::MergeFrom(
        from._internal_jinglian_attributes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillEquipmentData::CopyFrom(const SkillEquipmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SkillEquipmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillEquipmentData::IsInitialized() const {
  return true;
}

void SkillEquipmentData::InternalSwap(SkillEquipmentData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillEquipmentData, _impl_.jinglian_attributes_)
      + sizeof(SkillEquipmentData::_impl_.jinglian_attributes_)
      - PROTOBUF_FIELD_OFFSET(SkillEquipmentData, _impl_.attributes_)>(
          reinterpret_cast<char*>(&_impl_.attributes_),
          reinterpret_cast<char*>(&other->_impl_.attributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillEquipmentData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[26]);
}

// ===================================================================

class CollectionEntry::_Internal {
 public:
};

CollectionEntry::CollectionEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CollectionEntry)
}
CollectionEntry::CollectionEntry(const CollectionEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectionEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.star_){}
    , decltype(_impl_.is_activated_){}
    , decltype(_impl_.piece_num_){}
    , decltype(_impl_.life_num_){}
    , decltype(_impl_.combat_power_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.combat_power_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.combat_power_));
  // @@protoc_insertion_point(copy_constructor:idlepb.CollectionEntry)
}

inline void CollectionEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.star_){0}
    , decltype(_impl_.is_activated_){false}
    , decltype(_impl_.piece_num_){0}
    , decltype(_impl_.life_num_){0}
    , decltype(_impl_.combat_power_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectionEntry::~CollectionEntry() {
  // @@protoc_insertion_point(destructor:idlepb.CollectionEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollectionEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectionEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CollectionEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.combat_power_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.combat_power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_activated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 piece_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.piece_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 life_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.life_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float combat_power = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.combat_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CollectionEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 star = 3;
  if (this->_internal_star() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_star(), target);
  }

  // bool is_activated = 4;
  if (this->_internal_is_activated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_activated(), target);
  }

  // int32 piece_num = 5;
  if (this->_internal_piece_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_piece_num(), target);
  }

  // int32 life_num = 6;
  if (this->_internal_life_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_life_num(), target);
  }

  // float combat_power = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_combat_power = this->_internal_combat_power();
  uint32_t raw_combat_power;
  memcpy(&raw_combat_power, &tmp_combat_power, sizeof(tmp_combat_power));
  if (raw_combat_power != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_combat_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CollectionEntry)
  return target;
}

size_t CollectionEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CollectionEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 star = 3;
  if (this->_internal_star() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_star());
  }

  // bool is_activated = 4;
  if (this->_internal_is_activated() != 0) {
    total_size += 1 + 1;
  }

  // int32 piece_num = 5;
  if (this->_internal_piece_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_piece_num());
  }

  // int32 life_num = 6;
  if (this->_internal_life_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_life_num());
  }

  // float combat_power = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_combat_power = this->_internal_combat_power();
  uint32_t raw_combat_power;
  memcpy(&raw_combat_power, &tmp_combat_power, sizeof(tmp_combat_power));
  if (raw_combat_power != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectionEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionEntry::GetClassData() const { return &_class_data_; }


void CollectionEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectionEntry*>(&to_msg);
  auto& from = static_cast<const CollectionEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CollectionEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_star() != 0) {
    _this->_internal_set_star(from._internal_star());
  }
  if (from._internal_is_activated() != 0) {
    _this->_internal_set_is_activated(from._internal_is_activated());
  }
  if (from._internal_piece_num() != 0) {
    _this->_internal_set_piece_num(from._internal_piece_num());
  }
  if (from._internal_life_num() != 0) {
    _this->_internal_set_life_num(from._internal_life_num());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_combat_power = from._internal_combat_power();
  uint32_t raw_combat_power;
  memcpy(&raw_combat_power, &tmp_combat_power, sizeof(tmp_combat_power));
  if (raw_combat_power != 0) {
    _this->_internal_set_combat_power(from._internal_combat_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionEntry::CopyFrom(const CollectionEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CollectionEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionEntry::IsInitialized() const {
  return true;
}

void CollectionEntry::InternalSwap(CollectionEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectionEntry, _impl_.combat_power_)
      + sizeof(CollectionEntry::_impl_.combat_power_)
      - PROTOBUF_FIELD_OFFSET(CollectionEntry, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[27]);
}

// ===================================================================

class EquipmentData::_Internal {
 public:
  static const ::idlepb::SkillEquipmentData& skill_equipment_data(const EquipmentData* msg);
  static const ::idlepb::CollectionEntry& collection_data(const EquipmentData* msg);
  static const ::idlepb::GameStatsData& base_stats(const EquipmentData* msg);
  static const ::idlepb::GameStatsData& reinforce_stats(const EquipmentData* msg);
  static const ::idlepb::GameStatsData& qiwen_stats(const EquipmentData* msg);
  static const ::idlepb::GameStatsData& refine_stats(const EquipmentData* msg);
  static const ::idlepb::GameStatsData& perk_stats(const EquipmentData* msg);
  static const ::idlepb::GameStatsData& qiwen_resonance_stats(const EquipmentData* msg);
};

const ::idlepb::SkillEquipmentData&
EquipmentData::_Internal::skill_equipment_data(const EquipmentData* msg) {
  return *msg->_impl_.skill_equipment_data_;
}
const ::idlepb::CollectionEntry&
EquipmentData::_Internal::collection_data(const EquipmentData* msg) {
  return *msg->_impl_.collection_data_;
}
const ::idlepb::GameStatsData&
EquipmentData::_Internal::base_stats(const EquipmentData* msg) {
  return *msg->_impl_.base_stats_;
}
const ::idlepb::GameStatsData&
EquipmentData::_Internal::reinforce_stats(const EquipmentData* msg) {
  return *msg->_impl_.reinforce_stats_;
}
const ::idlepb::GameStatsData&
EquipmentData::_Internal::qiwen_stats(const EquipmentData* msg) {
  return *msg->_impl_.qiwen_stats_;
}
const ::idlepb::GameStatsData&
EquipmentData::_Internal::refine_stats(const EquipmentData* msg) {
  return *msg->_impl_.refine_stats_;
}
const ::idlepb::GameStatsData&
EquipmentData::_Internal::perk_stats(const EquipmentData* msg) {
  return *msg->_impl_.perk_stats_;
}
const ::idlepb::GameStatsData&
EquipmentData::_Internal::qiwen_resonance_stats(const EquipmentData* msg) {
  return *msg->_impl_.qiwen_resonance_stats_;
}
EquipmentData::EquipmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.EquipmentData)
}
EquipmentData::EquipmentData(const EquipmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EquipmentData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.perks_){from._impl_.perks_}
    , decltype(_impl_.maker_name_){}
    , decltype(_impl_.skill_equipment_data_){nullptr}
    , decltype(_impl_.collection_data_){nullptr}
    , decltype(_impl_.base_stats_){nullptr}
    , decltype(_impl_.reinforce_stats_){nullptr}
    , decltype(_impl_.qiwen_stats_){nullptr}
    , decltype(_impl_.refine_stats_){nullptr}
    , decltype(_impl_.perk_stats_){nullptr}
    , decltype(_impl_.qiwen_resonance_stats_){nullptr}
    , decltype(_impl_.combat_power_){}
    , decltype(_impl_.maker_roleid_){}
    , decltype(_impl_.slot_index_){}
    , decltype(_impl_.reinforce_level_){}
    , decltype(_impl_.refine_level_){}
    , decltype(_impl_.qiwen_a_level_){}
    , decltype(_impl_.qiwen_b_level_){}
    , decltype(_impl_.qiwen_c_level_){}
    , decltype(_impl_.qiwen_extra_effect_num_){}
    , decltype(_impl_.qiwen_moneycast_){}
    , decltype(_impl_.qiwen_current_exp_a_){}
    , decltype(_impl_.qiwen_current_exp_b_){}
    , decltype(_impl_.qiwen_current_exp_c_){}
    , decltype(_impl_.qiwen_total_exp_a_){}
    , decltype(_impl_.qiwen_total_exp_b_){}
    , decltype(_impl_.qiwen_total_exp_c_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.maker_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maker_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_name().empty()) {
    _this->_impl_.maker_name_.Set(from._internal_maker_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_skill_equipment_data()) {
    _this->_impl_.skill_equipment_data_ = new ::idlepb::SkillEquipmentData(*from._impl_.skill_equipment_data_);
  }
  if (from._internal_has_collection_data()) {
    _this->_impl_.collection_data_ = new ::idlepb::CollectionEntry(*from._impl_.collection_data_);
  }
  if (from._internal_has_base_stats()) {
    _this->_impl_.base_stats_ = new ::idlepb::GameStatsData(*from._impl_.base_stats_);
  }
  if (from._internal_has_reinforce_stats()) {
    _this->_impl_.reinforce_stats_ = new ::idlepb::GameStatsData(*from._impl_.reinforce_stats_);
  }
  if (from._internal_has_qiwen_stats()) {
    _this->_impl_.qiwen_stats_ = new ::idlepb::GameStatsData(*from._impl_.qiwen_stats_);
  }
  if (from._internal_has_refine_stats()) {
    _this->_impl_.refine_stats_ = new ::idlepb::GameStatsData(*from._impl_.refine_stats_);
  }
  if (from._internal_has_perk_stats()) {
    _this->_impl_.perk_stats_ = new ::idlepb::GameStatsData(*from._impl_.perk_stats_);
  }
  if (from._internal_has_qiwen_resonance_stats()) {
    _this->_impl_.qiwen_resonance_stats_ = new ::idlepb::GameStatsData(*from._impl_.qiwen_resonance_stats_);
  }
  ::memcpy(&_impl_.combat_power_, &from._impl_.combat_power_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.qiwen_total_exp_c_) -
    reinterpret_cast<char*>(&_impl_.combat_power_)) + sizeof(_impl_.qiwen_total_exp_c_));
  // @@protoc_insertion_point(copy_constructor:idlepb.EquipmentData)
}

inline void EquipmentData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.perks_){arena}
    , decltype(_impl_.maker_name_){}
    , decltype(_impl_.skill_equipment_data_){nullptr}
    , decltype(_impl_.collection_data_){nullptr}
    , decltype(_impl_.base_stats_){nullptr}
    , decltype(_impl_.reinforce_stats_){nullptr}
    , decltype(_impl_.qiwen_stats_){nullptr}
    , decltype(_impl_.refine_stats_){nullptr}
    , decltype(_impl_.perk_stats_){nullptr}
    , decltype(_impl_.qiwen_resonance_stats_){nullptr}
    , decltype(_impl_.combat_power_){int64_t{0}}
    , decltype(_impl_.maker_roleid_){int64_t{0}}
    , decltype(_impl_.slot_index_){0}
    , decltype(_impl_.reinforce_level_){0}
    , decltype(_impl_.refine_level_){0}
    , decltype(_impl_.qiwen_a_level_){0}
    , decltype(_impl_.qiwen_b_level_){0}
    , decltype(_impl_.qiwen_c_level_){0}
    , decltype(_impl_.qiwen_extra_effect_num_){0}
    , decltype(_impl_.qiwen_moneycast_){0}
    , decltype(_impl_.qiwen_current_exp_a_){0}
    , decltype(_impl_.qiwen_current_exp_b_){0}
    , decltype(_impl_.qiwen_current_exp_c_){0}
    , decltype(_impl_.qiwen_total_exp_a_){0}
    , decltype(_impl_.qiwen_total_exp_b_){0}
    , decltype(_impl_.qiwen_total_exp_c_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.maker_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maker_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EquipmentData::~EquipmentData() {
  // @@protoc_insertion_point(destructor:idlepb.EquipmentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EquipmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.perks_.~RepeatedPtrField();
  _impl_.maker_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.skill_equipment_data_;
  if (this != internal_default_instance()) delete _impl_.collection_data_;
  if (this != internal_default_instance()) delete _impl_.base_stats_;
  if (this != internal_default_instance()) delete _impl_.reinforce_stats_;
  if (this != internal_default_instance()) delete _impl_.qiwen_stats_;
  if (this != internal_default_instance()) delete _impl_.refine_stats_;
  if (this != internal_default_instance()) delete _impl_.perk_stats_;
  if (this != internal_default_instance()) delete _impl_.qiwen_resonance_stats_;
}

void EquipmentData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EquipmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.EquipmentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.perks_.Clear();
  _impl_.maker_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.skill_equipment_data_ != nullptr) {
    delete _impl_.skill_equipment_data_;
  }
  _impl_.skill_equipment_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.collection_data_ != nullptr) {
    delete _impl_.collection_data_;
  }
  _impl_.collection_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.base_stats_ != nullptr) {
    delete _impl_.base_stats_;
  }
  _impl_.base_stats_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reinforce_stats_ != nullptr) {
    delete _impl_.reinforce_stats_;
  }
  _impl_.reinforce_stats_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.qiwen_stats_ != nullptr) {
    delete _impl_.qiwen_stats_;
  }
  _impl_.qiwen_stats_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.refine_stats_ != nullptr) {
    delete _impl_.refine_stats_;
  }
  _impl_.refine_stats_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.perk_stats_ != nullptr) {
    delete _impl_.perk_stats_;
  }
  _impl_.perk_stats_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.qiwen_resonance_stats_ != nullptr) {
    delete _impl_.qiwen_resonance_stats_;
  }
  _impl_.qiwen_resonance_stats_ = nullptr;
  ::memset(&_impl_.combat_power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.qiwen_total_exp_c_) -
      reinterpret_cast<char*>(&_impl_.combat_power_)) + sizeof(_impl_.qiwen_total_exp_c_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquipmentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 slot_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.slot_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 combat_power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.combat_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string maker_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_maker_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.EquipmentData.maker_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 maker_roleid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.maker_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.EquipPerkEntry perks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.SkillEquipmentData skill_equipment_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_skill_equipment_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CollectionEntry collection_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_collection_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reinforce_level = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.reinforce_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 refine_level = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.refine_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qiwen_a_level = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.qiwen_a_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qiwen_b_level = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.qiwen_b_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qiwen_c_level = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.qiwen_c_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qiwen_extra_effect_num = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.qiwen_extra_effect_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qiwen_moneycast = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.qiwen_moneycast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qiwen_current_exp_a = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.qiwen_current_exp_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qiwen_current_exp_b = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.qiwen_current_exp_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qiwen_current_exp_c = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.qiwen_current_exp_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qiwen_total_exp_a = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.qiwen_total_exp_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qiwen_total_exp_b = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.qiwen_total_exp_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qiwen_total_exp_c = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.qiwen_total_exp_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GameStatsData base_stats = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GameStatsData reinforce_stats = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reinforce_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GameStatsData qiwen_stats = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_qiwen_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GameStatsData refine_stats = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_refine_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GameStatsData perk_stats = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_perk_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GameStatsData qiwen_resonance_stats = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_qiwen_resonance_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EquipmentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.EquipmentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slot_index = 1;
  if (this->_internal_slot_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_slot_index(), target);
  }

  // int64 combat_power = 3;
  if (this->_internal_combat_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_combat_power(), target);
  }

  // string maker_name = 4;
  if (!this->_internal_maker_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maker_name().data(), static_cast<int>(this->_internal_maker_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.EquipmentData.maker_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_maker_name(), target);
  }

  // int64 maker_roleid = 5;
  if (this->_internal_maker_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_maker_roleid(), target);
  }

  // repeated .idlepb.EquipPerkEntry perks = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_perks_size()); i < n; i++) {
    const auto& repfield = this->_internal_perks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .idlepb.SkillEquipmentData skill_equipment_data = 11;
  if (this->_internal_has_skill_equipment_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::skill_equipment_data(this),
        _Internal::skill_equipment_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.CollectionEntry collection_data = 12;
  if (this->_internal_has_collection_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::collection_data(this),
        _Internal::collection_data(this).GetCachedSize(), target, stream);
  }

  // int32 reinforce_level = 30;
  if (this->_internal_reinforce_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_reinforce_level(), target);
  }

  // int32 refine_level = 31;
  if (this->_internal_refine_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_refine_level(), target);
  }

  // int32 qiwen_a_level = 50;
  if (this->_internal_qiwen_a_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_qiwen_a_level(), target);
  }

  // int32 qiwen_b_level = 51;
  if (this->_internal_qiwen_b_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(51, this->_internal_qiwen_b_level(), target);
  }

  // int32 qiwen_c_level = 52;
  if (this->_internal_qiwen_c_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(52, this->_internal_qiwen_c_level(), target);
  }

  // int32 qiwen_extra_effect_num = 53;
  if (this->_internal_qiwen_extra_effect_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(53, this->_internal_qiwen_extra_effect_num(), target);
  }

  // int32 qiwen_moneycast = 54;
  if (this->_internal_qiwen_moneycast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(54, this->_internal_qiwen_moneycast(), target);
  }

  // int32 qiwen_current_exp_a = 55;
  if (this->_internal_qiwen_current_exp_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(55, this->_internal_qiwen_current_exp_a(), target);
  }

  // int32 qiwen_current_exp_b = 56;
  if (this->_internal_qiwen_current_exp_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(56, this->_internal_qiwen_current_exp_b(), target);
  }

  // int32 qiwen_current_exp_c = 57;
  if (this->_internal_qiwen_current_exp_c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(57, this->_internal_qiwen_current_exp_c(), target);
  }

  // int32 qiwen_total_exp_a = 58;
  if (this->_internal_qiwen_total_exp_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(58, this->_internal_qiwen_total_exp_a(), target);
  }

  // int32 qiwen_total_exp_b = 59;
  if (this->_internal_qiwen_total_exp_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(59, this->_internal_qiwen_total_exp_b(), target);
  }

  // int32 qiwen_total_exp_c = 60;
  if (this->_internal_qiwen_total_exp_c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(60, this->_internal_qiwen_total_exp_c(), target);
  }

  // .idlepb.GameStatsData base_stats = 100;
  if (this->_internal_has_base_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::base_stats(this),
        _Internal::base_stats(this).GetCachedSize(), target, stream);
  }

  // .idlepb.GameStatsData reinforce_stats = 101;
  if (this->_internal_has_reinforce_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::reinforce_stats(this),
        _Internal::reinforce_stats(this).GetCachedSize(), target, stream);
  }

  // .idlepb.GameStatsData qiwen_stats = 102;
  if (this->_internal_has_qiwen_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::qiwen_stats(this),
        _Internal::qiwen_stats(this).GetCachedSize(), target, stream);
  }

  // .idlepb.GameStatsData refine_stats = 103;
  if (this->_internal_has_refine_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, _Internal::refine_stats(this),
        _Internal::refine_stats(this).GetCachedSize(), target, stream);
  }

  // .idlepb.GameStatsData perk_stats = 104;
  if (this->_internal_has_perk_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(104, _Internal::perk_stats(this),
        _Internal::perk_stats(this).GetCachedSize(), target, stream);
  }

  // .idlepb.GameStatsData qiwen_resonance_stats = 105;
  if (this->_internal_has_qiwen_resonance_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(105, _Internal::qiwen_resonance_stats(this),
        _Internal::qiwen_resonance_stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.EquipmentData)
  return target;
}

size_t EquipmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.EquipmentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.EquipPerkEntry perks = 10;
  total_size += 1UL * this->_internal_perks_size();
  for (const auto& msg : this->_impl_.perks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string maker_name = 4;
  if (!this->_internal_maker_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maker_name());
  }

  // .idlepb.SkillEquipmentData skill_equipment_data = 11;
  if (this->_internal_has_skill_equipment_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skill_equipment_data_);
  }

  // .idlepb.CollectionEntry collection_data = 12;
  if (this->_internal_has_collection_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collection_data_);
  }

  // .idlepb.GameStatsData base_stats = 100;
  if (this->_internal_has_base_stats()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_stats_);
  }

  // .idlepb.GameStatsData reinforce_stats = 101;
  if (this->_internal_has_reinforce_stats()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reinforce_stats_);
  }

  // .idlepb.GameStatsData qiwen_stats = 102;
  if (this->_internal_has_qiwen_stats()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.qiwen_stats_);
  }

  // .idlepb.GameStatsData refine_stats = 103;
  if (this->_internal_has_refine_stats()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refine_stats_);
  }

  // .idlepb.GameStatsData perk_stats = 104;
  if (this->_internal_has_perk_stats()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.perk_stats_);
  }

  // .idlepb.GameStatsData qiwen_resonance_stats = 105;
  if (this->_internal_has_qiwen_resonance_stats()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.qiwen_resonance_stats_);
  }

  // int64 combat_power = 3;
  if (this->_internal_combat_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_combat_power());
  }

  // int64 maker_roleid = 5;
  if (this->_internal_maker_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_maker_roleid());
  }

  // int32 slot_index = 1;
  if (this->_internal_slot_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slot_index());
  }

  // int32 reinforce_level = 30;
  if (this->_internal_reinforce_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_reinforce_level());
  }

  // int32 refine_level = 31;
  if (this->_internal_refine_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_refine_level());
  }

  // int32 qiwen_a_level = 50;
  if (this->_internal_qiwen_a_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qiwen_a_level());
  }

  // int32 qiwen_b_level = 51;
  if (this->_internal_qiwen_b_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qiwen_b_level());
  }

  // int32 qiwen_c_level = 52;
  if (this->_internal_qiwen_c_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qiwen_c_level());
  }

  // int32 qiwen_extra_effect_num = 53;
  if (this->_internal_qiwen_extra_effect_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qiwen_extra_effect_num());
  }

  // int32 qiwen_moneycast = 54;
  if (this->_internal_qiwen_moneycast() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qiwen_moneycast());
  }

  // int32 qiwen_current_exp_a = 55;
  if (this->_internal_qiwen_current_exp_a() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qiwen_current_exp_a());
  }

  // int32 qiwen_current_exp_b = 56;
  if (this->_internal_qiwen_current_exp_b() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qiwen_current_exp_b());
  }

  // int32 qiwen_current_exp_c = 57;
  if (this->_internal_qiwen_current_exp_c() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qiwen_current_exp_c());
  }

  // int32 qiwen_total_exp_a = 58;
  if (this->_internal_qiwen_total_exp_a() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qiwen_total_exp_a());
  }

  // int32 qiwen_total_exp_b = 59;
  if (this->_internal_qiwen_total_exp_b() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qiwen_total_exp_b());
  }

  // int32 qiwen_total_exp_c = 60;
  if (this->_internal_qiwen_total_exp_c() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qiwen_total_exp_c());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EquipmentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EquipmentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EquipmentData::GetClassData() const { return &_class_data_; }


void EquipmentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EquipmentData*>(&to_msg);
  auto& from = static_cast<const EquipmentData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.EquipmentData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.perks_.MergeFrom(from._impl_.perks_);
  if (!from._internal_maker_name().empty()) {
    _this->_internal_set_maker_name(from._internal_maker_name());
  }
  if (from._internal_has_skill_equipment_data()) {
    _this->_internal_mutable_skill_equipment_data()->::idlepb::SkillEquipmentData::MergeFrom(
        from._internal_skill_equipment_data());
  }
  if (from._internal_has_collection_data()) {
    _this->_internal_mutable_collection_data()->::idlepb::CollectionEntry::MergeFrom(
        from._internal_collection_data());
  }
  if (from._internal_has_base_stats()) {
    _this->_internal_mutable_base_stats()->::idlepb::GameStatsData::MergeFrom(
        from._internal_base_stats());
  }
  if (from._internal_has_reinforce_stats()) {
    _this->_internal_mutable_reinforce_stats()->::idlepb::GameStatsData::MergeFrom(
        from._internal_reinforce_stats());
  }
  if (from._internal_has_qiwen_stats()) {
    _this->_internal_mutable_qiwen_stats()->::idlepb::GameStatsData::MergeFrom(
        from._internal_qiwen_stats());
  }
  if (from._internal_has_refine_stats()) {
    _this->_internal_mutable_refine_stats()->::idlepb::GameStatsData::MergeFrom(
        from._internal_refine_stats());
  }
  if (from._internal_has_perk_stats()) {
    _this->_internal_mutable_perk_stats()->::idlepb::GameStatsData::MergeFrom(
        from._internal_perk_stats());
  }
  if (from._internal_has_qiwen_resonance_stats()) {
    _this->_internal_mutable_qiwen_resonance_stats()->::idlepb::GameStatsData::MergeFrom(
        from._internal_qiwen_resonance_stats());
  }
  if (from._internal_combat_power() != 0) {
    _this->_internal_set_combat_power(from._internal_combat_power());
  }
  if (from._internal_maker_roleid() != 0) {
    _this->_internal_set_maker_roleid(from._internal_maker_roleid());
  }
  if (from._internal_slot_index() != 0) {
    _this->_internal_set_slot_index(from._internal_slot_index());
  }
  if (from._internal_reinforce_level() != 0) {
    _this->_internal_set_reinforce_level(from._internal_reinforce_level());
  }
  if (from._internal_refine_level() != 0) {
    _this->_internal_set_refine_level(from._internal_refine_level());
  }
  if (from._internal_qiwen_a_level() != 0) {
    _this->_internal_set_qiwen_a_level(from._internal_qiwen_a_level());
  }
  if (from._internal_qiwen_b_level() != 0) {
    _this->_internal_set_qiwen_b_level(from._internal_qiwen_b_level());
  }
  if (from._internal_qiwen_c_level() != 0) {
    _this->_internal_set_qiwen_c_level(from._internal_qiwen_c_level());
  }
  if (from._internal_qiwen_extra_effect_num() != 0) {
    _this->_internal_set_qiwen_extra_effect_num(from._internal_qiwen_extra_effect_num());
  }
  if (from._internal_qiwen_moneycast() != 0) {
    _this->_internal_set_qiwen_moneycast(from._internal_qiwen_moneycast());
  }
  if (from._internal_qiwen_current_exp_a() != 0) {
    _this->_internal_set_qiwen_current_exp_a(from._internal_qiwen_current_exp_a());
  }
  if (from._internal_qiwen_current_exp_b() != 0) {
    _this->_internal_set_qiwen_current_exp_b(from._internal_qiwen_current_exp_b());
  }
  if (from._internal_qiwen_current_exp_c() != 0) {
    _this->_internal_set_qiwen_current_exp_c(from._internal_qiwen_current_exp_c());
  }
  if (from._internal_qiwen_total_exp_a() != 0) {
    _this->_internal_set_qiwen_total_exp_a(from._internal_qiwen_total_exp_a());
  }
  if (from._internal_qiwen_total_exp_b() != 0) {
    _this->_internal_set_qiwen_total_exp_b(from._internal_qiwen_total_exp_b());
  }
  if (from._internal_qiwen_total_exp_c() != 0) {
    _this->_internal_set_qiwen_total_exp_c(from._internal_qiwen_total_exp_c());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EquipmentData::CopyFrom(const EquipmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.EquipmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentData::IsInitialized() const {
  return true;
}

void EquipmentData::InternalSwap(EquipmentData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.perks_.InternalSwap(&other->_impl_.perks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.maker_name_, lhs_arena,
      &other->_impl_.maker_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EquipmentData, _impl_.qiwen_total_exp_c_)
      + sizeof(EquipmentData::_impl_.qiwen_total_exp_c_)
      - PROTOBUF_FIELD_OFFSET(EquipmentData, _impl_.skill_equipment_data_)>(
          reinterpret_cast<char*>(&_impl_.skill_equipment_data_),
          reinterpret_cast<char*>(&other->_impl_.skill_equipment_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipmentData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[28]);
}

// ===================================================================

class ItemData::_Internal {
 public:
  static const ::idlepb::EquipmentData& equipment_data(const ItemData* msg);
};

const ::idlepb::EquipmentData&
ItemData::_Internal::equipment_data(const ItemData* msg) {
  return *msg->_impl_.equipment_data_;
}
ItemData::ItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ItemData)
}
ItemData::ItemData(const ItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equipment_data_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.cfg_id_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.locked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_equipment_data()) {
    _this->_impl_.equipment_data_ = new ::idlepb::EquipmentData(*from._impl_.equipment_data_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.locked_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.locked_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ItemData)
}

inline void ItemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equipment_data_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.cfg_id_){0}
    , decltype(_impl_.num_){0}
    , decltype(_impl_.locked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemData::~ItemData() {
  // @@protoc_insertion_point(destructor:idlepb.ItemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.equipment_data_;
}

void ItemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ItemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.equipment_data_ != nullptr) {
    delete _impl_.equipment_data_;
  }
  _impl_.equipment_data_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.locked_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.locked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cfg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool locked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.EquipmentData equipment_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipment_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ItemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 cfg_id = 2;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cfg_id(), target);
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  // bool locked = 4;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_locked(), target);
  }

  // .idlepb.EquipmentData equipment_data = 10;
  if (this->_internal_has_equipment_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::equipment_data(this),
        _Internal::equipment_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ItemData)
  return target;
}

size_t ItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ItemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.EquipmentData equipment_data = 10;
  if (this->_internal_has_equipment_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.equipment_data_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int32 cfg_id = 2;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  // bool locked = 4;
  if (this->_internal_locked() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemData::GetClassData() const { return &_class_data_; }


void ItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemData*>(&to_msg);
  auto& from = static_cast<const ItemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ItemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_equipment_data()) {
    _this->_internal_mutable_equipment_data()->::idlepb::EquipmentData::MergeFrom(
        from._internal_equipment_data());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_locked() != 0) {
    _this->_internal_set_locked(from._internal_locked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemData::CopyFrom(const ItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemData::IsInitialized() const {
  return true;
}

void ItemData::InternalSwap(ItemData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemData, _impl_.locked_)
      + sizeof(ItemData::_impl_.locked_)
      - PROTOBUF_FIELD_OFFSET(ItemData, _impl_.equipment_data_)>(
          reinterpret_cast<char*>(&_impl_.equipment_data_),
          reinterpret_cast<char*>(&other->_impl_.equipment_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[29]);
}

// ===================================================================

class SimpleItemData::_Internal {
 public:
};

SimpleItemData::SimpleItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SimpleItemData)
}
SimpleItemData::SimpleItemData(const SimpleItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleItemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cfg_id_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cfg_id_, &from._impl_.cfg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.cfg_id_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SimpleItemData)
}

inline void SimpleItemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cfg_id_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SimpleItemData::~SimpleItemData() {
  // @@protoc_insertion_point(destructor:idlepb.SimpleItemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimpleItemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SimpleItemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cfg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.cfg_id_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleItemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cfg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleItemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SimpleItemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cfg_id = 1;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cfg_id(), target);
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SimpleItemData)
  return target;
}

size_t SimpleItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SimpleItemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cfg_id = 1;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleItemData::GetClassData() const { return &_class_data_; }


void SimpleItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleItemData*>(&to_msg);
  auto& from = static_cast<const SimpleItemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SimpleItemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleItemData::CopyFrom(const SimpleItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SimpleItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleItemData::IsInitialized() const {
  return true;
}

void SimpleItemData::InternalSwap(SimpleItemData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleItemData, _impl_.num_)
      + sizeof(SimpleItemData::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(SimpleItemData, _impl_.cfg_id_)>(
          reinterpret_cast<char*>(&_impl_.cfg_id_),
          reinterpret_cast<char*>(&other->_impl_.cfg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleItemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[30]);
}

// ===================================================================

class TemporaryPackageItem::_Internal {
 public:
};

TemporaryPackageItem::TemporaryPackageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.TemporaryPackageItem)
}
TemporaryPackageItem::TemporaryPackageItem(const TemporaryPackageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TemporaryPackageItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.cfg_id_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.TemporaryPackageItem)
}

inline void TemporaryPackageItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.cfg_id_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TemporaryPackageItem::~TemporaryPackageItem() {
  // @@protoc_insertion_point(destructor:idlepb.TemporaryPackageItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TemporaryPackageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TemporaryPackageItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TemporaryPackageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.TemporaryPackageItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemporaryPackageItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cfg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TemporaryPackageItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.TemporaryPackageItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 cfg_id = 2;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cfg_id(), target);
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.TemporaryPackageItem)
  return target;
}

size_t TemporaryPackageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.TemporaryPackageItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int32 cfg_id = 2;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TemporaryPackageItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TemporaryPackageItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TemporaryPackageItem::GetClassData() const { return &_class_data_; }


void TemporaryPackageItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TemporaryPackageItem*>(&to_msg);
  auto& from = static_cast<const TemporaryPackageItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.TemporaryPackageItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TemporaryPackageItem::CopyFrom(const TemporaryPackageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.TemporaryPackageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemporaryPackageItem::IsInitialized() const {
  return true;
}

void TemporaryPackageItem::InternalSwap(TemporaryPackageItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TemporaryPackageItem, _impl_.num_)
      + sizeof(TemporaryPackageItem::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(TemporaryPackageItem, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TemporaryPackageItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[31]);
}

// ===================================================================

class ArenaExplorationStatisticalItem::_Internal {
 public:
};

ArenaExplorationStatisticalItem::ArenaExplorationStatisticalItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ArenaExplorationStatisticalItem)
}
ArenaExplorationStatisticalItem::ArenaExplorationStatisticalItem(const ArenaExplorationStatisticalItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArenaExplorationStatisticalItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapname_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.killnum_){}
    , decltype(_impl_.deathnum_){}
    , decltype(_impl_.itemnum_){}
    , decltype(_impl_.moneynum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mapname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapname().empty()) {
    _this->_impl_.mapname_.Set(from._internal_mapname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.moneynum_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.moneynum_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ArenaExplorationStatisticalItem)
}

inline void ArenaExplorationStatisticalItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapname_){}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.killnum_){0}
    , decltype(_impl_.deathnum_){0}
    , decltype(_impl_.itemnum_){int64_t{0}}
    , decltype(_impl_.moneynum_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mapname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ArenaExplorationStatisticalItem::~ArenaExplorationStatisticalItem() {
  // @@protoc_insertion_point(destructor:idlepb.ArenaExplorationStatisticalItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArenaExplorationStatisticalItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mapname_.Destroy();
}

void ArenaExplorationStatisticalItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArenaExplorationStatisticalItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ArenaExplorationStatisticalItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mapname_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.moneynum_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.moneynum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArenaExplorationStatisticalItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mapname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mapname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.ArenaExplorationStatisticalItem.mapname"));
        } else
          goto handle_unusual;
        continue;
      // int32 killnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.killnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 deathnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.deathnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 itemnum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.itemnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 moneynum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.moneynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArenaExplorationStatisticalItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ArenaExplorationStatisticalItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // string mapname = 2;
  if (!this->_internal_mapname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapname().data(), static_cast<int>(this->_internal_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.ArenaExplorationStatisticalItem.mapname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mapname(), target);
  }

  // int32 killnum = 3;
  if (this->_internal_killnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_killnum(), target);
  }

  // int32 deathnum = 4;
  if (this->_internal_deathnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_deathnum(), target);
  }

  // int64 itemnum = 5;
  if (this->_internal_itemnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_itemnum(), target);
  }

  // int64 moneynum = 6;
  if (this->_internal_moneynum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_moneynum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ArenaExplorationStatisticalItem)
  return target;
}

size_t ArenaExplorationStatisticalItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ArenaExplorationStatisticalItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mapname = 2;
  if (!this->_internal_mapname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapname());
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int32 killnum = 3;
  if (this->_internal_killnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_killnum());
  }

  // int32 deathnum = 4;
  if (this->_internal_deathnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deathnum());
  }

  // int64 itemnum = 5;
  if (this->_internal_itemnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_itemnum());
  }

  // int64 moneynum = 6;
  if (this->_internal_moneynum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_moneynum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArenaExplorationStatisticalItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArenaExplorationStatisticalItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArenaExplorationStatisticalItem::GetClassData() const { return &_class_data_; }


void ArenaExplorationStatisticalItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArenaExplorationStatisticalItem*>(&to_msg);
  auto& from = static_cast<const ArenaExplorationStatisticalItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ArenaExplorationStatisticalItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mapname().empty()) {
    _this->_internal_set_mapname(from._internal_mapname());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_killnum() != 0) {
    _this->_internal_set_killnum(from._internal_killnum());
  }
  if (from._internal_deathnum() != 0) {
    _this->_internal_set_deathnum(from._internal_deathnum());
  }
  if (from._internal_itemnum() != 0) {
    _this->_internal_set_itemnum(from._internal_itemnum());
  }
  if (from._internal_moneynum() != 0) {
    _this->_internal_set_moneynum(from._internal_moneynum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArenaExplorationStatisticalItem::CopyFrom(const ArenaExplorationStatisticalItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ArenaExplorationStatisticalItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaExplorationStatisticalItem::IsInitialized() const {
  return true;
}

void ArenaExplorationStatisticalItem::InternalSwap(ArenaExplorationStatisticalItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapname_, lhs_arena,
      &other->_impl_.mapname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArenaExplorationStatisticalItem, _impl_.moneynum_)
      + sizeof(ArenaExplorationStatisticalItem::_impl_.moneynum_)
      - PROTOBUF_FIELD_OFFSET(ArenaExplorationStatisticalItem, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArenaExplorationStatisticalItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[32]);
}

// ===================================================================

class ShopItemBase::_Internal {
 public:
};

ShopItemBase::ShopItemBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ShopItemBase)
}
ShopItemBase::ShopItemBase(const ShopItemBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShopItemBase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.bought_count_){}
    , decltype(_impl_.cfg_id_){}
    , decltype(_impl_.must_buy_){}
    , decltype(_impl_.discount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.discount_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.discount_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ShopItemBase)
}

inline void ShopItemBase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.item_id_){0}
    , decltype(_impl_.num_){0}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.bought_count_){0}
    , decltype(_impl_.cfg_id_){0}
    , decltype(_impl_.must_buy_){false}
    , decltype(_impl_.discount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShopItemBase::~ShopItemBase() {
  // @@protoc_insertion_point(destructor:idlepb.ShopItemBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShopItemBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShopItemBase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShopItemBase::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ShopItemBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.discount_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.discount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShopItemBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bought_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.bought_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cfg_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool must_buy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.must_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float discount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShopItemBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ShopItemBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_id(), target);
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  // int32 price = 4;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_price(), target);
  }

  // int32 count = 5;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_count(), target);
  }

  // int32 bought_count = 6;
  if (this->_internal_bought_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_bought_count(), target);
  }

  // int32 cfg_id = 7;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_cfg_id(), target);
  }

  // bool must_buy = 8;
  if (this->_internal_must_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_must_buy(), target);
  }

  // float discount = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_discount = this->_internal_discount();
  uint32_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_discount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ShopItemBase)
  return target;
}

size_t ShopItemBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ShopItemBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  // int32 price = 4;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  // int32 count = 5;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  // int32 bought_count = 6;
  if (this->_internal_bought_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bought_count());
  }

  // int32 cfg_id = 7;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  // bool must_buy = 8;
  if (this->_internal_must_buy() != 0) {
    total_size += 1 + 1;
  }

  // float discount = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_discount = this->_internal_discount();
  uint32_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShopItemBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShopItemBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShopItemBase::GetClassData() const { return &_class_data_; }


void ShopItemBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShopItemBase*>(&to_msg);
  auto& from = static_cast<const ShopItemBase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ShopItemBase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_bought_count() != 0) {
    _this->_internal_set_bought_count(from._internal_bought_count());
  }
  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  if (from._internal_must_buy() != 0) {
    _this->_internal_set_must_buy(from._internal_must_buy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_discount = from._internal_discount();
  uint32_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    _this->_internal_set_discount(from._internal_discount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShopItemBase::CopyFrom(const ShopItemBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ShopItemBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopItemBase::IsInitialized() const {
  return true;
}

void ShopItemBase::InternalSwap(ShopItemBase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShopItemBase, _impl_.discount_)
      + sizeof(ShopItemBase::_impl_.discount_)
      - PROTOBUF_FIELD_OFFSET(ShopItemBase, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShopItemBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[33]);
}

// ===================================================================

class ShopItem::_Internal {
 public:
  static const ::idlepb::ItemData& item_data(const ShopItem* msg);
};

const ::idlepb::ItemData&
ShopItem::_Internal::item_data(const ShopItem* msg) {
  return *msg->_impl_.item_data_;
}
ShopItem::ShopItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ShopItem)
}
ShopItem::ShopItem(const ShopItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShopItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_data_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.cfg_id_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.money_){}
    , decltype(_impl_.is_sold_out_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_data()) {
    _this->_impl_.item_data_ = new ::idlepb::ItemData(*from._impl_.item_data_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_sold_out_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.is_sold_out_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ShopItem)
}

inline void ShopItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_data_){nullptr}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.cfg_id_){0}
    , decltype(_impl_.num_){0}
    , decltype(_impl_.money_){0}
    , decltype(_impl_.is_sold_out_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShopItem::~ShopItem() {
  // @@protoc_insertion_point(destructor:idlepb.ShopItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShopItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_data_;
}

void ShopItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShopItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ShopItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_data_ != nullptr) {
    delete _impl_.item_data_;
  }
  _impl_.item_data_ = nullptr;
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_sold_out_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.is_sold_out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShopItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cfg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 money = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_sold_out = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_sold_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ItemData item_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShopItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ShopItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 cfg_id = 2;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cfg_id(), target);
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  // int32 money = 4;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_money(), target);
  }

  // bool is_sold_out = 5;
  if (this->_internal_is_sold_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_sold_out(), target);
  }

  // .idlepb.ItemData item_data = 6;
  if (this->_internal_has_item_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::item_data(this),
        _Internal::item_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ShopItem)
  return target;
}

size_t ShopItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ShopItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.ItemData item_data = 6;
  if (this->_internal_has_item_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_data_);
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 cfg_id = 2;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  // int32 money = 4;
  if (this->_internal_money() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_money());
  }

  // bool is_sold_out = 5;
  if (this->_internal_is_sold_out() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShopItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShopItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShopItem::GetClassData() const { return &_class_data_; }


void ShopItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShopItem*>(&to_msg);
  auto& from = static_cast<const ShopItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ShopItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_data()) {
    _this->_internal_mutable_item_data()->::idlepb::ItemData::MergeFrom(
        from._internal_item_data());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_money() != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  if (from._internal_is_sold_out() != 0) {
    _this->_internal_set_is_sold_out(from._internal_is_sold_out());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShopItem::CopyFrom(const ShopItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ShopItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopItem::IsInitialized() const {
  return true;
}

void ShopItem::InternalSwap(ShopItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShopItem, _impl_.is_sold_out_)
      + sizeof(ShopItem::_impl_.is_sold_out_)
      - PROTOBUF_FIELD_OFFSET(ShopItem, _impl_.item_data_)>(
          reinterpret_cast<char*>(&_impl_.item_data_),
          reinterpret_cast<char*>(&other->_impl_.item_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShopItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[34]);
}

// ===================================================================

class DeluxeShopItem::_Internal {
 public:
  static const ::idlepb::ItemData& item_data(const DeluxeShopItem* msg);
};

const ::idlepb::ItemData&
DeluxeShopItem::_Internal::item_data(const DeluxeShopItem* msg) {
  return *msg->_impl_.item_data_;
}
DeluxeShopItem::DeluxeShopItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.DeluxeShopItem)
}
DeluxeShopItem::DeluxeShopItem(const DeluxeShopItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeluxeShopItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_data_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.cfg_id_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.sellcount_){}
    , decltype(_impl_.discount_){}
    , decltype(_impl_.money_){}
    , decltype(_impl_.is_sold_out_){}
    , decltype(_impl_.must_buy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_data()) {
    _this->_impl_.item_data_ = new ::idlepb::ItemData(*from._impl_.item_data_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.must_buy_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.must_buy_));
  // @@protoc_insertion_point(copy_constructor:idlepb.DeluxeShopItem)
}

inline void DeluxeShopItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_data_){nullptr}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.cfg_id_){0}
    , decltype(_impl_.num_){0}
    , decltype(_impl_.sellcount_){0}
    , decltype(_impl_.discount_){0}
    , decltype(_impl_.money_){0}
    , decltype(_impl_.is_sold_out_){false}
    , decltype(_impl_.must_buy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeluxeShopItem::~DeluxeShopItem() {
  // @@protoc_insertion_point(destructor:idlepb.DeluxeShopItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeluxeShopItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_data_;
}

void DeluxeShopItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeluxeShopItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.DeluxeShopItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_data_ != nullptr) {
    delete _impl_.item_data_;
  }
  _impl_.item_data_ = nullptr;
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.must_buy_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.must_buy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeluxeShopItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cfg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sellcount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sellcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 discount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.discount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 money = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_sold_out = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_sold_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ItemData item_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool must_buy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.must_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeluxeShopItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.DeluxeShopItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 cfg_id = 2;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cfg_id(), target);
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  // int32 sellcount = 4;
  if (this->_internal_sellcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_sellcount(), target);
  }

  // int32 discount = 5;
  if (this->_internal_discount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_discount(), target);
  }

  // int32 money = 6;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_money(), target);
  }

  // bool is_sold_out = 7;
  if (this->_internal_is_sold_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_sold_out(), target);
  }

  // .idlepb.ItemData item_data = 8;
  if (this->_internal_has_item_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::item_data(this),
        _Internal::item_data(this).GetCachedSize(), target, stream);
  }

  // bool must_buy = 9;
  if (this->_internal_must_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_must_buy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.DeluxeShopItem)
  return target;
}

size_t DeluxeShopItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.DeluxeShopItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.ItemData item_data = 8;
  if (this->_internal_has_item_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_data_);
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 cfg_id = 2;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  // int32 sellcount = 4;
  if (this->_internal_sellcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sellcount());
  }

  // int32 discount = 5;
  if (this->_internal_discount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_discount());
  }

  // int32 money = 6;
  if (this->_internal_money() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_money());
  }

  // bool is_sold_out = 7;
  if (this->_internal_is_sold_out() != 0) {
    total_size += 1 + 1;
  }

  // bool must_buy = 9;
  if (this->_internal_must_buy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeluxeShopItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeluxeShopItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeluxeShopItem::GetClassData() const { return &_class_data_; }


void DeluxeShopItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeluxeShopItem*>(&to_msg);
  auto& from = static_cast<const DeluxeShopItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.DeluxeShopItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_data()) {
    _this->_internal_mutable_item_data()->::idlepb::ItemData::MergeFrom(
        from._internal_item_data());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_sellcount() != 0) {
    _this->_internal_set_sellcount(from._internal_sellcount());
  }
  if (from._internal_discount() != 0) {
    _this->_internal_set_discount(from._internal_discount());
  }
  if (from._internal_money() != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  if (from._internal_is_sold_out() != 0) {
    _this->_internal_set_is_sold_out(from._internal_is_sold_out());
  }
  if (from._internal_must_buy() != 0) {
    _this->_internal_set_must_buy(from._internal_must_buy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeluxeShopItem::CopyFrom(const DeluxeShopItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.DeluxeShopItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeluxeShopItem::IsInitialized() const {
  return true;
}

void DeluxeShopItem::InternalSwap(DeluxeShopItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeluxeShopItem, _impl_.must_buy_)
      + sizeof(DeluxeShopItem::_impl_.must_buy_)
      - PROTOBUF_FIELD_OFFSET(DeluxeShopItem, _impl_.item_data_)>(
          reinterpret_cast<char*>(&_impl_.item_data_),
          reinterpret_cast<char*>(&other->_impl_.item_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeluxeShopItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[35]);
}

// ===================================================================

class RoleVipShopData::_Internal {
 public:
};

RoleVipShopData::RoleVipShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleVipShopData)
}
RoleVipShopData::RoleVipShopData(const RoleVipShopData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleVipShopData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shop_items_){from._impl_.shop_items_}
    , decltype(_impl_.last_day_refresh_time_){}
    , decltype(_impl_.last_week_refresh_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.last_day_refresh_time_, &from._impl_.last_day_refresh_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_week_refresh_time_) -
    reinterpret_cast<char*>(&_impl_.last_day_refresh_time_)) + sizeof(_impl_.last_week_refresh_time_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleVipShopData)
}

inline void RoleVipShopData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shop_items_){arena}
    , decltype(_impl_.last_day_refresh_time_){int64_t{0}}
    , decltype(_impl_.last_week_refresh_time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleVipShopData::~RoleVipShopData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleVipShopData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleVipShopData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shop_items_.~RepeatedPtrField();
}

void RoleVipShopData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleVipShopData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleVipShopData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shop_items_.Clear();
  ::memset(&_impl_.last_day_refresh_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_week_refresh_time_) -
      reinterpret_cast<char*>(&_impl_.last_day_refresh_time_)) + sizeof(_impl_.last_week_refresh_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleVipShopData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.ShopItemBase shop_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shop_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 last_day_refresh_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.last_day_refresh_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_week_refresh_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_week_refresh_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleVipShopData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleVipShopData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.ShopItemBase shop_items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shop_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_shop_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 last_day_refresh_time = 2;
  if (this->_internal_last_day_refresh_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_day_refresh_time(), target);
  }

  // int64 last_week_refresh_time = 3;
  if (this->_internal_last_week_refresh_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_week_refresh_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleVipShopData)
  return target;
}

size_t RoleVipShopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleVipShopData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ShopItemBase shop_items = 1;
  total_size += 1UL * this->_internal_shop_items_size();
  for (const auto& msg : this->_impl_.shop_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 last_day_refresh_time = 2;
  if (this->_internal_last_day_refresh_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_day_refresh_time());
  }

  // int64 last_week_refresh_time = 3;
  if (this->_internal_last_week_refresh_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_week_refresh_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleVipShopData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleVipShopData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleVipShopData::GetClassData() const { return &_class_data_; }


void RoleVipShopData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleVipShopData*>(&to_msg);
  auto& from = static_cast<const RoleVipShopData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleVipShopData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shop_items_.MergeFrom(from._impl_.shop_items_);
  if (from._internal_last_day_refresh_time() != 0) {
    _this->_internal_set_last_day_refresh_time(from._internal_last_day_refresh_time());
  }
  if (from._internal_last_week_refresh_time() != 0) {
    _this->_internal_set_last_week_refresh_time(from._internal_last_week_refresh_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleVipShopData::CopyFrom(const RoleVipShopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleVipShopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleVipShopData::IsInitialized() const {
  return true;
}

void RoleVipShopData::InternalSwap(RoleVipShopData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shop_items_.InternalSwap(&other->_impl_.shop_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleVipShopData, _impl_.last_week_refresh_time_)
      + sizeof(RoleVipShopData::_impl_.last_week_refresh_time_)
      - PROTOBUF_FIELD_OFFSET(RoleVipShopData, _impl_.last_day_refresh_time_)>(
          reinterpret_cast<char*>(&_impl_.last_day_refresh_time_),
          reinterpret_cast<char*>(&other->_impl_.last_day_refresh_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleVipShopData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[36]);
}

// ===================================================================

class CharacterModelConfig::_Internal {
 public:
};

CharacterModelConfig::CharacterModelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CharacterModelConfig)
}
CharacterModelConfig::CharacterModelConfig(const CharacterModelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterModelConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_slots_){from._impl_.model_slots_}
    , /*decltype(_impl_._model_slots_cached_byte_size_)*/{0}
    , decltype(_impl_.skeleton_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.skeleton_type_ = from._impl_.skeleton_type_;
  // @@protoc_insertion_point(copy_constructor:idlepb.CharacterModelConfig)
}

inline void CharacterModelConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_slots_){arena}
    , /*decltype(_impl_._model_slots_cached_byte_size_)*/{0}
    , decltype(_impl_.skeleton_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CharacterModelConfig::~CharacterModelConfig() {
  // @@protoc_insertion_point(destructor:idlepb.CharacterModelConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterModelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_slots_.~RepeatedField();
}

void CharacterModelConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterModelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CharacterModelConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_slots_.Clear();
  _impl_.skeleton_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterModelConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 skeleton_type = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.skeleton_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 model_slots = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_model_slots(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 160) {
          _internal_add_model_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterModelConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CharacterModelConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skeleton_type = 51;
  if (this->_internal_skeleton_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(51, this->_internal_skeleton_type(), target);
  }

  // repeated int32 model_slots = 52;
  {
    int byte_size = _impl_._model_slots_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          52, _internal_model_slots(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CharacterModelConfig)
  return target;
}

size_t CharacterModelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CharacterModelConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 model_slots = 52;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.model_slots_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._model_slots_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 skeleton_type = 51;
  if (this->_internal_skeleton_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_skeleton_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterModelConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterModelConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterModelConfig::GetClassData() const { return &_class_data_; }


void CharacterModelConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterModelConfig*>(&to_msg);
  auto& from = static_cast<const CharacterModelConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CharacterModelConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.model_slots_.MergeFrom(from._impl_.model_slots_);
  if (from._internal_skeleton_type() != 0) {
    _this->_internal_set_skeleton_type(from._internal_skeleton_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterModelConfig::CopyFrom(const CharacterModelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CharacterModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterModelConfig::IsInitialized() const {
  return true;
}

void CharacterModelConfig::InternalSwap(CharacterModelConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.model_slots_.InternalSwap(&other->_impl_.model_slots_);
  swap(_impl_.skeleton_type_, other->_impl_.skeleton_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterModelConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[37]);
}

// ===================================================================

class RoleAppearanceShopData::_Internal {
 public:
};

RoleAppearanceShopData::RoleAppearanceShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleAppearanceShopData)
}
RoleAppearanceShopData::RoleAppearanceShopData(const RoleAppearanceShopData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleAppearanceShopData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.goods1_){from._impl_.goods1_}
    , decltype(_impl_.last_auto_refresh_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.last_auto_refresh_time_ = from._impl_.last_auto_refresh_time_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleAppearanceShopData)
}

inline void RoleAppearanceShopData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.goods1_){arena}
    , decltype(_impl_.last_auto_refresh_time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleAppearanceShopData::~RoleAppearanceShopData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleAppearanceShopData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleAppearanceShopData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.goods1_.~RepeatedPtrField();
}

void RoleAppearanceShopData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleAppearanceShopData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleAppearanceShopData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.goods1_.Clear();
  _impl_.last_auto_refresh_time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleAppearanceShopData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.ShopItemBase goods1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goods1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 last_auto_refresh_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.last_auto_refresh_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleAppearanceShopData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleAppearanceShopData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.ShopItemBase goods1 = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_goods1_size()); i < n; i++) {
    const auto& repfield = this->_internal_goods1(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 last_auto_refresh_time = 5;
  if (this->_internal_last_auto_refresh_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_last_auto_refresh_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleAppearanceShopData)
  return target;
}

size_t RoleAppearanceShopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleAppearanceShopData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ShopItemBase goods1 = 1;
  total_size += 1UL * this->_internal_goods1_size();
  for (const auto& msg : this->_impl_.goods1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 last_auto_refresh_time = 5;
  if (this->_internal_last_auto_refresh_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_auto_refresh_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleAppearanceShopData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleAppearanceShopData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleAppearanceShopData::GetClassData() const { return &_class_data_; }


void RoleAppearanceShopData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleAppearanceShopData*>(&to_msg);
  auto& from = static_cast<const RoleAppearanceShopData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleAppearanceShopData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.goods1_.MergeFrom(from._impl_.goods1_);
  if (from._internal_last_auto_refresh_time() != 0) {
    _this->_internal_set_last_auto_refresh_time(from._internal_last_auto_refresh_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleAppearanceShopData::CopyFrom(const RoleAppearanceShopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleAppearanceShopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAppearanceShopData::IsInitialized() const {
  return true;
}

void RoleAppearanceShopData::InternalSwap(RoleAppearanceShopData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.goods1_.InternalSwap(&other->_impl_.goods1_);
  swap(_impl_.last_auto_refresh_time_, other->_impl_.last_auto_refresh_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleAppearanceShopData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[38]);
}

// ===================================================================

class AppearanceCollection::_Internal {
 public:
};

AppearanceCollection::AppearanceCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AppearanceCollection)
}
AppearanceCollection::AppearanceCollection(const AppearanceCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppearanceCollection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.duration_){}
    , decltype(_impl_.begin_date_){}
    , decltype(_impl_.group_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AppearanceCollection)
}

inline void AppearanceCollection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.duration_){int64_t{0}}
    , decltype(_impl_.begin_date_){int64_t{0}}
    , decltype(_impl_.group_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppearanceCollection::~AppearanceCollection() {
  // @@protoc_insertion_point(destructor:idlepb.AppearanceCollection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppearanceCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppearanceCollection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppearanceCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AppearanceCollection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.group_id_) -
      reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.group_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceCollection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 begin_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.begin_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppearanceCollection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AppearanceCollection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_group_id(), target);
  }

  // int64 duration = 3;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_duration(), target);
  }

  // int64 begin_date = 4;
  if (this->_internal_begin_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_begin_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AppearanceCollection)
  return target;
}

size_t AppearanceCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AppearanceCollection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 duration = 3;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration());
  }

  // int64 begin_date = 4;
  if (this->_internal_begin_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_date());
  }

  // int32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppearanceCollection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppearanceCollection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppearanceCollection::GetClassData() const { return &_class_data_; }


void AppearanceCollection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppearanceCollection*>(&to_msg);
  auto& from = static_cast<const AppearanceCollection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AppearanceCollection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_begin_date() != 0) {
    _this->_internal_set_begin_date(from._internal_begin_date());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppearanceCollection::CopyFrom(const AppearanceCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AppearanceCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceCollection::IsInitialized() const {
  return true;
}

void AppearanceCollection::InternalSwap(AppearanceCollection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppearanceCollection, _impl_.group_id_)
      + sizeof(AppearanceCollection::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(AppearanceCollection, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceCollection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[39]);
}

// ===================================================================

class RoleAppearanceData::_Internal {
 public:
  static const ::idlepb::CharacterModelConfig& current_model(const RoleAppearanceData* msg);
  static const ::idlepb::RoleAppearanceShopData& shop_data(const RoleAppearanceData* msg);
};

const ::idlepb::CharacterModelConfig&
RoleAppearanceData::_Internal::current_model(const RoleAppearanceData* msg) {
  return *msg->_impl_.current_model_;
}
const ::idlepb::RoleAppearanceShopData&
RoleAppearanceData::_Internal::shop_data(const RoleAppearanceData* msg) {
  return *msg->_impl_.shop_data_;
}
RoleAppearanceData::RoleAppearanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleAppearanceData)
}
RoleAppearanceData::RoleAppearanceData(const RoleAppearanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleAppearanceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_){from._impl_.collection_}
    , decltype(_impl_.current_model_){nullptr}
    , decltype(_impl_.shop_data_){nullptr}
    , decltype(_impl_.last_change_skeleton_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_model()) {
    _this->_impl_.current_model_ = new ::idlepb::CharacterModelConfig(*from._impl_.current_model_);
  }
  if (from._internal_has_shop_data()) {
    _this->_impl_.shop_data_ = new ::idlepb::RoleAppearanceShopData(*from._impl_.shop_data_);
  }
  _this->_impl_.last_change_skeleton_time_ = from._impl_.last_change_skeleton_time_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleAppearanceData)
}

inline void RoleAppearanceData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_){arena}
    , decltype(_impl_.current_model_){nullptr}
    , decltype(_impl_.shop_data_){nullptr}
    , decltype(_impl_.last_change_skeleton_time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleAppearanceData::~RoleAppearanceData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleAppearanceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleAppearanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collection_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.current_model_;
  if (this != internal_default_instance()) delete _impl_.shop_data_;
}

void RoleAppearanceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleAppearanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleAppearanceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collection_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.current_model_ != nullptr) {
    delete _impl_.current_model_;
  }
  _impl_.current_model_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shop_data_ != nullptr) {
    delete _impl_.shop_data_;
  }
  _impl_.shop_data_ = nullptr;
  _impl_.last_change_skeleton_time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleAppearanceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 last_change_skeleton_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.last_change_skeleton_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.AppearanceCollection collection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CharacterModelConfig current_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleAppearanceShopData shop_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_shop_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleAppearanceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleAppearanceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_change_skeleton_time = 1;
  if (this->_internal_last_change_skeleton_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_change_skeleton_time(), target);
  }

  // repeated .idlepb.AppearanceCollection collection = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collection_size()); i < n; i++) {
    const auto& repfield = this->_internal_collection(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .idlepb.CharacterModelConfig current_model = 3;
  if (this->_internal_has_current_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::current_model(this),
        _Internal::current_model(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleAppearanceShopData shop_data = 11;
  if (this->_internal_has_shop_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::shop_data(this),
        _Internal::shop_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleAppearanceData)
  return target;
}

size_t RoleAppearanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleAppearanceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.AppearanceCollection collection = 2;
  total_size += 1UL * this->_internal_collection_size();
  for (const auto& msg : this->_impl_.collection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .idlepb.CharacterModelConfig current_model = 3;
  if (this->_internal_has_current_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_model_);
  }

  // .idlepb.RoleAppearanceShopData shop_data = 11;
  if (this->_internal_has_shop_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shop_data_);
  }

  // int64 last_change_skeleton_time = 1;
  if (this->_internal_last_change_skeleton_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_change_skeleton_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleAppearanceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleAppearanceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleAppearanceData::GetClassData() const { return &_class_data_; }


void RoleAppearanceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleAppearanceData*>(&to_msg);
  auto& from = static_cast<const RoleAppearanceData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleAppearanceData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collection_.MergeFrom(from._impl_.collection_);
  if (from._internal_has_current_model()) {
    _this->_internal_mutable_current_model()->::idlepb::CharacterModelConfig::MergeFrom(
        from._internal_current_model());
  }
  if (from._internal_has_shop_data()) {
    _this->_internal_mutable_shop_data()->::idlepb::RoleAppearanceShopData::MergeFrom(
        from._internal_shop_data());
  }
  if (from._internal_last_change_skeleton_time() != 0) {
    _this->_internal_set_last_change_skeleton_time(from._internal_last_change_skeleton_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleAppearanceData::CopyFrom(const RoleAppearanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleAppearanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAppearanceData::IsInitialized() const {
  return true;
}

void RoleAppearanceData::InternalSwap(RoleAppearanceData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collection_.InternalSwap(&other->_impl_.collection_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleAppearanceData, _impl_.last_change_skeleton_time_)
      + sizeof(RoleAppearanceData::_impl_.last_change_skeleton_time_)
      - PROTOBUF_FIELD_OFFSET(RoleAppearanceData, _impl_.current_model_)>(
          reinterpret_cast<char*>(&_impl_.current_model_),
          reinterpret_cast<char*>(&other->_impl_.current_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleAppearanceData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[40]);
}

// ===================================================================

class AlchemyPackageItem::_Internal {
 public:
};

AlchemyPackageItem::AlchemyPackageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AlchemyPackageItem)
}
AlchemyPackageItem::AlchemyPackageItem(const AlchemyPackageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlchemyPackageItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cfg_id_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cfg_id_, &from._impl_.cfg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.cfg_id_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AlchemyPackageItem)
}

inline void AlchemyPackageItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cfg_id_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlchemyPackageItem::~AlchemyPackageItem() {
  // @@protoc_insertion_point(destructor:idlepb.AlchemyPackageItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlchemyPackageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AlchemyPackageItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlchemyPackageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AlchemyPackageItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cfg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.cfg_id_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlchemyPackageItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cfg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlchemyPackageItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AlchemyPackageItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cfg_id = 1;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cfg_id(), target);
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AlchemyPackageItem)
  return target;
}

size_t AlchemyPackageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AlchemyPackageItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cfg_id = 1;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlchemyPackageItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlchemyPackageItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlchemyPackageItem::GetClassData() const { return &_class_data_; }


void AlchemyPackageItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlchemyPackageItem*>(&to_msg);
  auto& from = static_cast<const AlchemyPackageItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AlchemyPackageItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlchemyPackageItem::CopyFrom(const AlchemyPackageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AlchemyPackageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlchemyPackageItem::IsInitialized() const {
  return true;
}

void AlchemyPackageItem::InternalSwap(AlchemyPackageItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlchemyPackageItem, _impl_.num_)
      + sizeof(AlchemyPackageItem::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(AlchemyPackageItem, _impl_.cfg_id_)>(
          reinterpret_cast<char*>(&_impl_.cfg_id_),
          reinterpret_cast<char*>(&other->_impl_.cfg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlchemyPackageItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[41]);
}

// ===================================================================

class AlchemyMakeData::_Internal {
 public:
};

AlchemyMakeData::AlchemyMakeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AlchemyMakeData)
}
AlchemyMakeData::AlchemyMakeData(const AlchemyMakeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlchemyMakeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.recipe_id_){}
    , decltype(_impl_.recipe_degree_){}
    , decltype(_impl_.material_id_){}
    , decltype(_impl_.material_quality_){}
    , decltype(_impl_.target_num_){}
    , decltype(_impl_.cur_num_){}
    , decltype(_impl_.next_done_time_){}
    , decltype(_impl_.last_produce_item_cfg_id_){}
    , decltype(_impl_.last_produce_item_num_){}
    , decltype(_impl_.total_start_time_){}
    , decltype(_impl_.total_done_time_){}
    , decltype(_impl_.add_exp_){}
    , decltype(_impl_.cur_successed_num_){}
    , decltype(_impl_.cur_failed_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.recipe_id_, &from._impl_.recipe_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cur_failed_num_) -
    reinterpret_cast<char*>(&_impl_.recipe_id_)) + sizeof(_impl_.cur_failed_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AlchemyMakeData)
}

inline void AlchemyMakeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.recipe_id_){0}
    , decltype(_impl_.recipe_degree_){0}
    , decltype(_impl_.material_id_){0}
    , decltype(_impl_.material_quality_){0}
    , decltype(_impl_.target_num_){0}
    , decltype(_impl_.cur_num_){0}
    , decltype(_impl_.next_done_time_){int64_t{0}}
    , decltype(_impl_.last_produce_item_cfg_id_){0}
    , decltype(_impl_.last_produce_item_num_){0}
    , decltype(_impl_.total_start_time_){int64_t{0}}
    , decltype(_impl_.total_done_time_){int64_t{0}}
    , decltype(_impl_.add_exp_){0}
    , decltype(_impl_.cur_successed_num_){0}
    , decltype(_impl_.cur_failed_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlchemyMakeData::~AlchemyMakeData() {
  // @@protoc_insertion_point(destructor:idlepb.AlchemyMakeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlchemyMakeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void AlchemyMakeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlchemyMakeData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AlchemyMakeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.recipe_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cur_failed_num_) -
      reinterpret_cast<char*>(&_impl_.recipe_id_)) + sizeof(_impl_.cur_failed_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlchemyMakeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 recipe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.recipe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 recipe_degree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.recipe_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 material_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.material_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ItemQuality material_quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_material_quality(static_cast<::idlepb::ItemQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 target_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.target_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cur_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cur_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 next_done_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.next_done_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.AlchemyPackageItem items = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 last_produce_item_cfg_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.last_produce_item_cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 last_produce_item_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.last_produce_item_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_start_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.total_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_done_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.total_done_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 add_exp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.add_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cur_successed_num = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.cur_successed_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cur_failed_num = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.cur_failed_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlchemyMakeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AlchemyMakeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 recipe_id = 1;
  if (this->_internal_recipe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_recipe_id(), target);
  }

  // int32 recipe_degree = 2;
  if (this->_internal_recipe_degree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_recipe_degree(), target);
  }

  // int32 material_id = 3;
  if (this->_internal_material_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_material_id(), target);
  }

  // .idlepb.ItemQuality material_quality = 4;
  if (this->_internal_material_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_material_quality(), target);
  }

  // int32 target_num = 5;
  if (this->_internal_target_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_target_num(), target);
  }

  // int32 cur_num = 6;
  if (this->_internal_cur_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_cur_num(), target);
  }

  // int64 next_done_time = 7;
  if (this->_internal_next_done_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_next_done_time(), target);
  }

  // repeated .idlepb.AlchemyPackageItem items = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 last_produce_item_cfg_id = 10;
  if (this->_internal_last_produce_item_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_last_produce_item_cfg_id(), target);
  }

  // int32 last_produce_item_num = 11;
  if (this->_internal_last_produce_item_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_last_produce_item_num(), target);
  }

  // int64 total_start_time = 12;
  if (this->_internal_total_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_total_start_time(), target);
  }

  // int64 total_done_time = 13;
  if (this->_internal_total_done_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_total_done_time(), target);
  }

  // int32 add_exp = 14;
  if (this->_internal_add_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_add_exp(), target);
  }

  // int32 cur_successed_num = 15;
  if (this->_internal_cur_successed_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_cur_successed_num(), target);
  }

  // int32 cur_failed_num = 16;
  if (this->_internal_cur_failed_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_cur_failed_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AlchemyMakeData)
  return target;
}

size_t AlchemyMakeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AlchemyMakeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.AlchemyPackageItem items = 8;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 recipe_id = 1;
  if (this->_internal_recipe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recipe_id());
  }

  // int32 recipe_degree = 2;
  if (this->_internal_recipe_degree() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recipe_degree());
  }

  // int32 material_id = 3;
  if (this->_internal_material_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_material_id());
  }

  // .idlepb.ItemQuality material_quality = 4;
  if (this->_internal_material_quality() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_material_quality());
  }

  // int32 target_num = 5;
  if (this->_internal_target_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_num());
  }

  // int32 cur_num = 6;
  if (this->_internal_cur_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cur_num());
  }

  // int64 next_done_time = 7;
  if (this->_internal_next_done_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_done_time());
  }

  // int32 last_produce_item_cfg_id = 10;
  if (this->_internal_last_produce_item_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_produce_item_cfg_id());
  }

  // int32 last_produce_item_num = 11;
  if (this->_internal_last_produce_item_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_produce_item_num());
  }

  // int64 total_start_time = 12;
  if (this->_internal_total_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_start_time());
  }

  // int64 total_done_time = 13;
  if (this->_internal_total_done_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_done_time());
  }

  // int32 add_exp = 14;
  if (this->_internal_add_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_add_exp());
  }

  // int32 cur_successed_num = 15;
  if (this->_internal_cur_successed_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cur_successed_num());
  }

  // int32 cur_failed_num = 16;
  if (this->_internal_cur_failed_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_cur_failed_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlchemyMakeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlchemyMakeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlchemyMakeData::GetClassData() const { return &_class_data_; }


void AlchemyMakeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlchemyMakeData*>(&to_msg);
  auto& from = static_cast<const AlchemyMakeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AlchemyMakeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_recipe_id() != 0) {
    _this->_internal_set_recipe_id(from._internal_recipe_id());
  }
  if (from._internal_recipe_degree() != 0) {
    _this->_internal_set_recipe_degree(from._internal_recipe_degree());
  }
  if (from._internal_material_id() != 0) {
    _this->_internal_set_material_id(from._internal_material_id());
  }
  if (from._internal_material_quality() != 0) {
    _this->_internal_set_material_quality(from._internal_material_quality());
  }
  if (from._internal_target_num() != 0) {
    _this->_internal_set_target_num(from._internal_target_num());
  }
  if (from._internal_cur_num() != 0) {
    _this->_internal_set_cur_num(from._internal_cur_num());
  }
  if (from._internal_next_done_time() != 0) {
    _this->_internal_set_next_done_time(from._internal_next_done_time());
  }
  if (from._internal_last_produce_item_cfg_id() != 0) {
    _this->_internal_set_last_produce_item_cfg_id(from._internal_last_produce_item_cfg_id());
  }
  if (from._internal_last_produce_item_num() != 0) {
    _this->_internal_set_last_produce_item_num(from._internal_last_produce_item_num());
  }
  if (from._internal_total_start_time() != 0) {
    _this->_internal_set_total_start_time(from._internal_total_start_time());
  }
  if (from._internal_total_done_time() != 0) {
    _this->_internal_set_total_done_time(from._internal_total_done_time());
  }
  if (from._internal_add_exp() != 0) {
    _this->_internal_set_add_exp(from._internal_add_exp());
  }
  if (from._internal_cur_successed_num() != 0) {
    _this->_internal_set_cur_successed_num(from._internal_cur_successed_num());
  }
  if (from._internal_cur_failed_num() != 0) {
    _this->_internal_set_cur_failed_num(from._internal_cur_failed_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlchemyMakeData::CopyFrom(const AlchemyMakeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AlchemyMakeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlchemyMakeData::IsInitialized() const {
  return true;
}

void AlchemyMakeData::InternalSwap(AlchemyMakeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlchemyMakeData, _impl_.cur_failed_num_)
      + sizeof(AlchemyMakeData::_impl_.cur_failed_num_)
      - PROTOBUF_FIELD_OFFSET(AlchemyMakeData, _impl_.recipe_id_)>(
          reinterpret_cast<char*>(&_impl_.recipe_id_),
          reinterpret_cast<char*>(&other->_impl_.recipe_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlchemyMakeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[42]);
}

// ===================================================================

class AlchemyRecipeData::_Internal {
 public:
};

AlchemyRecipeData::AlchemyRecipeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AlchemyRecipeData)
}
AlchemyRecipeData::AlchemyRecipeData(const AlchemyRecipeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlchemyRecipeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recipe_id_){}
    , decltype(_impl_.big_chance_){}
    , decltype(_impl_.small_chance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.recipe_id_, &from._impl_.recipe_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.small_chance_) -
    reinterpret_cast<char*>(&_impl_.recipe_id_)) + sizeof(_impl_.small_chance_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AlchemyRecipeData)
}

inline void AlchemyRecipeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.recipe_id_){0}
    , decltype(_impl_.big_chance_){0}
    , decltype(_impl_.small_chance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlchemyRecipeData::~AlchemyRecipeData() {
  // @@protoc_insertion_point(destructor:idlepb.AlchemyRecipeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlchemyRecipeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AlchemyRecipeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlchemyRecipeData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AlchemyRecipeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.recipe_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.small_chance_) -
      reinterpret_cast<char*>(&_impl_.recipe_id_)) + sizeof(_impl_.small_chance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlchemyRecipeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 recipe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.recipe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 big_chance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.big_chance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 small_chance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.small_chance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlchemyRecipeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AlchemyRecipeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 recipe_id = 1;
  if (this->_internal_recipe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_recipe_id(), target);
  }

  // int32 big_chance = 2;
  if (this->_internal_big_chance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_chance(), target);
  }

  // int32 small_chance = 3;
  if (this->_internal_small_chance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_small_chance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AlchemyRecipeData)
  return target;
}

size_t AlchemyRecipeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AlchemyRecipeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 recipe_id = 1;
  if (this->_internal_recipe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recipe_id());
  }

  // int32 big_chance = 2;
  if (this->_internal_big_chance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_big_chance());
  }

  // int32 small_chance = 3;
  if (this->_internal_small_chance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_small_chance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlchemyRecipeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlchemyRecipeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlchemyRecipeData::GetClassData() const { return &_class_data_; }


void AlchemyRecipeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlchemyRecipeData*>(&to_msg);
  auto& from = static_cast<const AlchemyRecipeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AlchemyRecipeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_recipe_id() != 0) {
    _this->_internal_set_recipe_id(from._internal_recipe_id());
  }
  if (from._internal_big_chance() != 0) {
    _this->_internal_set_big_chance(from._internal_big_chance());
  }
  if (from._internal_small_chance() != 0) {
    _this->_internal_set_small_chance(from._internal_small_chance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlchemyRecipeData::CopyFrom(const AlchemyRecipeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AlchemyRecipeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlchemyRecipeData::IsInitialized() const {
  return true;
}

void AlchemyRecipeData::InternalSwap(AlchemyRecipeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlchemyRecipeData, _impl_.small_chance_)
      + sizeof(AlchemyRecipeData::_impl_.small_chance_)
      - PROTOBUF_FIELD_OFFSET(AlchemyRecipeData, _impl_.recipe_id_)>(
          reinterpret_cast<char*>(&_impl_.recipe_id_),
          reinterpret_cast<char*>(&other->_impl_.recipe_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlchemyRecipeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[43]);
}

// ===================================================================

class RoleAlchemyData::_Internal {
 public:
  static const ::idlepb::AlchemyMakeData& cur_make_data(const RoleAlchemyData* msg);
};

const ::idlepb::AlchemyMakeData&
RoleAlchemyData::_Internal::cur_make_data(const RoleAlchemyData* msg) {
  return *msg->_impl_.cur_make_data_;
}
RoleAlchemyData::RoleAlchemyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleAlchemyData)
}
RoleAlchemyData::RoleAlchemyData(const RoleAlchemyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleAlchemyData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.produce_quality_stats_){from._impl_.produce_quality_stats_}
    , /*decltype(_impl_._produce_quality_stats_cached_byte_size_)*/{0}
    , decltype(_impl_.recipes_){from._impl_.recipes_}
    , decltype(_impl_.cur_make_data_){nullptr}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.total_refine_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cur_make_data()) {
    _this->_impl_.cur_make_data_ = new ::idlepb::AlchemyMakeData(*from._impl_.cur_make_data_);
  }
  ::memcpy(&_impl_.rank_, &from._impl_.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_refine_num_) -
    reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.total_refine_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleAlchemyData)
}

inline void RoleAlchemyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.produce_quality_stats_){arena}
    , /*decltype(_impl_._produce_quality_stats_cached_byte_size_)*/{0}
    , decltype(_impl_.recipes_){arena}
    , decltype(_impl_.cur_make_data_){nullptr}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.exp_){0}
    , decltype(_impl_.total_refine_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleAlchemyData::~RoleAlchemyData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleAlchemyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleAlchemyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.produce_quality_stats_.~RepeatedField();
  _impl_.recipes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cur_make_data_;
}

void RoleAlchemyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleAlchemyData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleAlchemyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.produce_quality_stats_.Clear();
  _impl_.recipes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.cur_make_data_ != nullptr) {
    delete _impl_.cur_make_data_;
  }
  _impl_.cur_make_data_ = nullptr;
  ::memset(&_impl_.rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_refine_num_) -
      reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.total_refine_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleAlchemyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.AlchemyMakeData cur_make_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_make_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_refine_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.total_refine_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 produce_quality_stats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_produce_quality_stats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_produce_quality_stats(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.AlchemyRecipeData recipes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recipes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleAlchemyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleAlchemyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // int32 exp = 2;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_exp(), target);
  }

  // .idlepb.AlchemyMakeData cur_make_data = 4;
  if (this->_internal_has_cur_make_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cur_make_data(this),
        _Internal::cur_make_data(this).GetCachedSize(), target, stream);
  }

  // int32 total_refine_num = 7;
  if (this->_internal_total_refine_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_refine_num(), target);
  }

  // repeated int32 produce_quality_stats = 8;
  {
    int byte_size = _impl_._produce_quality_stats_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_produce_quality_stats(), byte_size, target);
    }
  }

  // repeated .idlepb.AlchemyRecipeData recipes = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_recipes_size()); i < n; i++) {
    const auto& repfield = this->_internal_recipes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleAlchemyData)
  return target;
}

size_t RoleAlchemyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleAlchemyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 produce_quality_stats = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.produce_quality_stats_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._produce_quality_stats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .idlepb.AlchemyRecipeData recipes = 9;
  total_size += 1UL * this->_internal_recipes_size();
  for (const auto& msg : this->_impl_.recipes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .idlepb.AlchemyMakeData cur_make_data = 4;
  if (this->_internal_has_cur_make_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cur_make_data_);
  }

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  // int32 exp = 2;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  // int32 total_refine_num = 7;
  if (this->_internal_total_refine_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_refine_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleAlchemyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleAlchemyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleAlchemyData::GetClassData() const { return &_class_data_; }


void RoleAlchemyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleAlchemyData*>(&to_msg);
  auto& from = static_cast<const RoleAlchemyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleAlchemyData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.produce_quality_stats_.MergeFrom(from._impl_.produce_quality_stats_);
  _this->_impl_.recipes_.MergeFrom(from._impl_.recipes_);
  if (from._internal_has_cur_make_data()) {
    _this->_internal_mutable_cur_make_data()->::idlepb::AlchemyMakeData::MergeFrom(
        from._internal_cur_make_data());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_total_refine_num() != 0) {
    _this->_internal_set_total_refine_num(from._internal_total_refine_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleAlchemyData::CopyFrom(const RoleAlchemyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleAlchemyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAlchemyData::IsInitialized() const {
  return true;
}

void RoleAlchemyData::InternalSwap(RoleAlchemyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.produce_quality_stats_.InternalSwap(&other->_impl_.produce_quality_stats_);
  _impl_.recipes_.InternalSwap(&other->_impl_.recipes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleAlchemyData, _impl_.total_refine_num_)
      + sizeof(RoleAlchemyData::_impl_.total_refine_num_)
      - PROTOBUF_FIELD_OFFSET(RoleAlchemyData, _impl_.cur_make_data_)>(
          reinterpret_cast<char*>(&_impl_.cur_make_data_),
          reinterpret_cast<char*>(&other->_impl_.cur_make_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleAlchemyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[44]);
}

// ===================================================================

class ForgePackageItem::_Internal {
 public:
};

ForgePackageItem::ForgePackageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ForgePackageItem)
}
ForgePackageItem::ForgePackageItem(const ForgePackageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForgePackageItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cfg_id_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cfg_id_, &from._impl_.cfg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.cfg_id_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ForgePackageItem)
}

inline void ForgePackageItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cfg_id_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ForgePackageItem::~ForgePackageItem() {
  // @@protoc_insertion_point(destructor:idlepb.ForgePackageItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForgePackageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ForgePackageItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForgePackageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ForgePackageItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cfg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.cfg_id_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForgePackageItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cfg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForgePackageItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ForgePackageItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cfg_id = 1;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cfg_id(), target);
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ForgePackageItem)
  return target;
}

size_t ForgePackageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ForgePackageItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cfg_id = 1;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForgePackageItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForgePackageItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForgePackageItem::GetClassData() const { return &_class_data_; }


void ForgePackageItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForgePackageItem*>(&to_msg);
  auto& from = static_cast<const ForgePackageItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ForgePackageItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForgePackageItem::CopyFrom(const ForgePackageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ForgePackageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForgePackageItem::IsInitialized() const {
  return true;
}

void ForgePackageItem::InternalSwap(ForgePackageItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForgePackageItem, _impl_.num_)
      + sizeof(ForgePackageItem::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(ForgePackageItem, _impl_.cfg_id_)>(
          reinterpret_cast<char*>(&_impl_.cfg_id_),
          reinterpret_cast<char*>(&other->_impl_.cfg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForgePackageItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[45]);
}

// ===================================================================

class ForgeMakeData::_Internal {
 public:
};

ForgeMakeData::ForgeMakeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ForgeMakeData)
}
ForgeMakeData::ForgeMakeData(const ForgeMakeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForgeMakeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.recipe_id_){}
    , decltype(_impl_.recipe_degree_){}
    , decltype(_impl_.material_id_){}
    , decltype(_impl_.material_quality_){}
    , decltype(_impl_.target_num_){}
    , decltype(_impl_.cur_num_){}
    , decltype(_impl_.next_done_time_){}
    , decltype(_impl_.last_produce_item_cfg_id_){}
    , decltype(_impl_.last_produce_item_num_){}
    , decltype(_impl_.total_start_time_){}
    , decltype(_impl_.total_done_time_){}
    , decltype(_impl_.add_exp_){}
    , decltype(_impl_.cur_successed_num_){}
    , decltype(_impl_.cur_failed_num_){}
    , decltype(_impl_.ext_material_id_){}
    , decltype(_impl_.auto_sell_poor_){}
    , decltype(_impl_.auto_sell_middle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.recipe_id_, &from._impl_.recipe_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auto_sell_middle_) -
    reinterpret_cast<char*>(&_impl_.recipe_id_)) + sizeof(_impl_.auto_sell_middle_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ForgeMakeData)
}

inline void ForgeMakeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.recipe_id_){0}
    , decltype(_impl_.recipe_degree_){0}
    , decltype(_impl_.material_id_){0}
    , decltype(_impl_.material_quality_){0}
    , decltype(_impl_.target_num_){0}
    , decltype(_impl_.cur_num_){0}
    , decltype(_impl_.next_done_time_){int64_t{0}}
    , decltype(_impl_.last_produce_item_cfg_id_){0}
    , decltype(_impl_.last_produce_item_num_){0}
    , decltype(_impl_.total_start_time_){int64_t{0}}
    , decltype(_impl_.total_done_time_){int64_t{0}}
    , decltype(_impl_.add_exp_){0}
    , decltype(_impl_.cur_successed_num_){0}
    , decltype(_impl_.cur_failed_num_){0}
    , decltype(_impl_.ext_material_id_){0}
    , decltype(_impl_.auto_sell_poor_){false}
    , decltype(_impl_.auto_sell_middle_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ForgeMakeData::~ForgeMakeData() {
  // @@protoc_insertion_point(destructor:idlepb.ForgeMakeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForgeMakeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ForgeMakeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForgeMakeData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ForgeMakeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.recipe_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.auto_sell_middle_) -
      reinterpret_cast<char*>(&_impl_.recipe_id_)) + sizeof(_impl_.auto_sell_middle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForgeMakeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 recipe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.recipe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 recipe_degree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.recipe_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 material_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.material_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ItemQuality material_quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_material_quality(static_cast<::idlepb::ItemQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 target_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.target_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cur_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cur_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 next_done_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.next_done_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ForgePackageItem items = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 last_produce_item_cfg_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.last_produce_item_cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 last_produce_item_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.last_produce_item_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_start_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.total_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_done_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.total_done_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 add_exp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.add_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cur_successed_num = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.cur_successed_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cur_failed_num = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.cur_failed_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ext_material_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.ext_material_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_sell_poor = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.auto_sell_poor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_sell_middle = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.auto_sell_middle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForgeMakeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ForgeMakeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 recipe_id = 1;
  if (this->_internal_recipe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_recipe_id(), target);
  }

  // int32 recipe_degree = 2;
  if (this->_internal_recipe_degree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_recipe_degree(), target);
  }

  // int32 material_id = 3;
  if (this->_internal_material_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_material_id(), target);
  }

  // .idlepb.ItemQuality material_quality = 4;
  if (this->_internal_material_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_material_quality(), target);
  }

  // int32 target_num = 5;
  if (this->_internal_target_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_target_num(), target);
  }

  // int32 cur_num = 6;
  if (this->_internal_cur_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_cur_num(), target);
  }

  // int64 next_done_time = 7;
  if (this->_internal_next_done_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_next_done_time(), target);
  }

  // repeated .idlepb.ForgePackageItem items = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 last_produce_item_cfg_id = 10;
  if (this->_internal_last_produce_item_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_last_produce_item_cfg_id(), target);
  }

  // int32 last_produce_item_num = 11;
  if (this->_internal_last_produce_item_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_last_produce_item_num(), target);
  }

  // int64 total_start_time = 12;
  if (this->_internal_total_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_total_start_time(), target);
  }

  // int64 total_done_time = 13;
  if (this->_internal_total_done_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_total_done_time(), target);
  }

  // int32 add_exp = 14;
  if (this->_internal_add_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_add_exp(), target);
  }

  // int32 cur_successed_num = 15;
  if (this->_internal_cur_successed_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_cur_successed_num(), target);
  }

  // int32 cur_failed_num = 16;
  if (this->_internal_cur_failed_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_cur_failed_num(), target);
  }

  // int32 ext_material_id = 17;
  if (this->_internal_ext_material_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_ext_material_id(), target);
  }

  // bool auto_sell_poor = 18;
  if (this->_internal_auto_sell_poor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_auto_sell_poor(), target);
  }

  // bool auto_sell_middle = 19;
  if (this->_internal_auto_sell_middle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_auto_sell_middle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ForgeMakeData)
  return target;
}

size_t ForgeMakeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ForgeMakeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ForgePackageItem items = 8;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 recipe_id = 1;
  if (this->_internal_recipe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recipe_id());
  }

  // int32 recipe_degree = 2;
  if (this->_internal_recipe_degree() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recipe_degree());
  }

  // int32 material_id = 3;
  if (this->_internal_material_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_material_id());
  }

  // .idlepb.ItemQuality material_quality = 4;
  if (this->_internal_material_quality() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_material_quality());
  }

  // int32 target_num = 5;
  if (this->_internal_target_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_num());
  }

  // int32 cur_num = 6;
  if (this->_internal_cur_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cur_num());
  }

  // int64 next_done_time = 7;
  if (this->_internal_next_done_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_done_time());
  }

  // int32 last_produce_item_cfg_id = 10;
  if (this->_internal_last_produce_item_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_produce_item_cfg_id());
  }

  // int32 last_produce_item_num = 11;
  if (this->_internal_last_produce_item_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_produce_item_num());
  }

  // int64 total_start_time = 12;
  if (this->_internal_total_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_start_time());
  }

  // int64 total_done_time = 13;
  if (this->_internal_total_done_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_done_time());
  }

  // int32 add_exp = 14;
  if (this->_internal_add_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_add_exp());
  }

  // int32 cur_successed_num = 15;
  if (this->_internal_cur_successed_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cur_successed_num());
  }

  // int32 cur_failed_num = 16;
  if (this->_internal_cur_failed_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_cur_failed_num());
  }

  // int32 ext_material_id = 17;
  if (this->_internal_ext_material_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_ext_material_id());
  }

  // bool auto_sell_poor = 18;
  if (this->_internal_auto_sell_poor() != 0) {
    total_size += 2 + 1;
  }

  // bool auto_sell_middle = 19;
  if (this->_internal_auto_sell_middle() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForgeMakeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForgeMakeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForgeMakeData::GetClassData() const { return &_class_data_; }


void ForgeMakeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForgeMakeData*>(&to_msg);
  auto& from = static_cast<const ForgeMakeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ForgeMakeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_recipe_id() != 0) {
    _this->_internal_set_recipe_id(from._internal_recipe_id());
  }
  if (from._internal_recipe_degree() != 0) {
    _this->_internal_set_recipe_degree(from._internal_recipe_degree());
  }
  if (from._internal_material_id() != 0) {
    _this->_internal_set_material_id(from._internal_material_id());
  }
  if (from._internal_material_quality() != 0) {
    _this->_internal_set_material_quality(from._internal_material_quality());
  }
  if (from._internal_target_num() != 0) {
    _this->_internal_set_target_num(from._internal_target_num());
  }
  if (from._internal_cur_num() != 0) {
    _this->_internal_set_cur_num(from._internal_cur_num());
  }
  if (from._internal_next_done_time() != 0) {
    _this->_internal_set_next_done_time(from._internal_next_done_time());
  }
  if (from._internal_last_produce_item_cfg_id() != 0) {
    _this->_internal_set_last_produce_item_cfg_id(from._internal_last_produce_item_cfg_id());
  }
  if (from._internal_last_produce_item_num() != 0) {
    _this->_internal_set_last_produce_item_num(from._internal_last_produce_item_num());
  }
  if (from._internal_total_start_time() != 0) {
    _this->_internal_set_total_start_time(from._internal_total_start_time());
  }
  if (from._internal_total_done_time() != 0) {
    _this->_internal_set_total_done_time(from._internal_total_done_time());
  }
  if (from._internal_add_exp() != 0) {
    _this->_internal_set_add_exp(from._internal_add_exp());
  }
  if (from._internal_cur_successed_num() != 0) {
    _this->_internal_set_cur_successed_num(from._internal_cur_successed_num());
  }
  if (from._internal_cur_failed_num() != 0) {
    _this->_internal_set_cur_failed_num(from._internal_cur_failed_num());
  }
  if (from._internal_ext_material_id() != 0) {
    _this->_internal_set_ext_material_id(from._internal_ext_material_id());
  }
  if (from._internal_auto_sell_poor() != 0) {
    _this->_internal_set_auto_sell_poor(from._internal_auto_sell_poor());
  }
  if (from._internal_auto_sell_middle() != 0) {
    _this->_internal_set_auto_sell_middle(from._internal_auto_sell_middle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForgeMakeData::CopyFrom(const ForgeMakeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ForgeMakeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForgeMakeData::IsInitialized() const {
  return true;
}

void ForgeMakeData::InternalSwap(ForgeMakeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForgeMakeData, _impl_.auto_sell_middle_)
      + sizeof(ForgeMakeData::_impl_.auto_sell_middle_)
      - PROTOBUF_FIELD_OFFSET(ForgeMakeData, _impl_.recipe_id_)>(
          reinterpret_cast<char*>(&_impl_.recipe_id_),
          reinterpret_cast<char*>(&other->_impl_.recipe_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForgeMakeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[46]);
}

// ===================================================================

class ForgeRecipeData::_Internal {
 public:
};

ForgeRecipeData::ForgeRecipeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ForgeRecipeData)
}
ForgeRecipeData::ForgeRecipeData(const ForgeRecipeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForgeRecipeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recipe_id_){}
    , decltype(_impl_.big_chance_){}
    , decltype(_impl_.small_chance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.recipe_id_, &from._impl_.recipe_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.small_chance_) -
    reinterpret_cast<char*>(&_impl_.recipe_id_)) + sizeof(_impl_.small_chance_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ForgeRecipeData)
}

inline void ForgeRecipeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.recipe_id_){0}
    , decltype(_impl_.big_chance_){0}
    , decltype(_impl_.small_chance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ForgeRecipeData::~ForgeRecipeData() {
  // @@protoc_insertion_point(destructor:idlepb.ForgeRecipeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForgeRecipeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ForgeRecipeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForgeRecipeData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ForgeRecipeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.recipe_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.small_chance_) -
      reinterpret_cast<char*>(&_impl_.recipe_id_)) + sizeof(_impl_.small_chance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForgeRecipeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 recipe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.recipe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 big_chance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.big_chance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 small_chance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.small_chance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForgeRecipeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ForgeRecipeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 recipe_id = 1;
  if (this->_internal_recipe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_recipe_id(), target);
  }

  // int32 big_chance = 2;
  if (this->_internal_big_chance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_chance(), target);
  }

  // int32 small_chance = 3;
  if (this->_internal_small_chance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_small_chance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ForgeRecipeData)
  return target;
}

size_t ForgeRecipeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ForgeRecipeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 recipe_id = 1;
  if (this->_internal_recipe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recipe_id());
  }

  // int32 big_chance = 2;
  if (this->_internal_big_chance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_big_chance());
  }

  // int32 small_chance = 3;
  if (this->_internal_small_chance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_small_chance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForgeRecipeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForgeRecipeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForgeRecipeData::GetClassData() const { return &_class_data_; }


void ForgeRecipeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForgeRecipeData*>(&to_msg);
  auto& from = static_cast<const ForgeRecipeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ForgeRecipeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_recipe_id() != 0) {
    _this->_internal_set_recipe_id(from._internal_recipe_id());
  }
  if (from._internal_big_chance() != 0) {
    _this->_internal_set_big_chance(from._internal_big_chance());
  }
  if (from._internal_small_chance() != 0) {
    _this->_internal_set_small_chance(from._internal_small_chance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForgeRecipeData::CopyFrom(const ForgeRecipeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ForgeRecipeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForgeRecipeData::IsInitialized() const {
  return true;
}

void ForgeRecipeData::InternalSwap(ForgeRecipeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForgeRecipeData, _impl_.small_chance_)
      + sizeof(ForgeRecipeData::_impl_.small_chance_)
      - PROTOBUF_FIELD_OFFSET(ForgeRecipeData, _impl_.recipe_id_)>(
          reinterpret_cast<char*>(&_impl_.recipe_id_),
          reinterpret_cast<char*>(&other->_impl_.recipe_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForgeRecipeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[47]);
}

// ===================================================================

class LostEquipmentData::_Internal {
 public:
  static const ::idlepb::ItemData& item_data(const LostEquipmentData* msg);
};

const ::idlepb::ItemData&
LostEquipmentData::_Internal::item_data(const LostEquipmentData* msg) {
  return *msg->_impl_.item_data_;
}
LostEquipmentData::LostEquipmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.LostEquipmentData)
}
LostEquipmentData::LostEquipmentData(const LostEquipmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LostEquipmentData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_data_){nullptr}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.lost_date_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_data()) {
    _this->_impl_.item_data_ = new ::idlepb::ItemData(*from._impl_.item_data_);
  }
  ::memcpy(&_impl_.uid_, &from._impl_.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lost_date_) -
    reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.lost_date_));
  // @@protoc_insertion_point(copy_constructor:idlepb.LostEquipmentData)
}

inline void LostEquipmentData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_data_){nullptr}
    , decltype(_impl_.uid_){0}
    , decltype(_impl_.tag_){0}
    , decltype(_impl_.lost_date_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LostEquipmentData::~LostEquipmentData() {
  // @@protoc_insertion_point(destructor:idlepb.LostEquipmentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LostEquipmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_data_;
}

void LostEquipmentData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LostEquipmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.LostEquipmentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_data_ != nullptr) {
    delete _impl_.item_data_;
  }
  _impl_.item_data_ = nullptr;
  ::memset(&_impl_.uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lost_date_) -
      reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.lost_date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LostEquipmentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lost_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lost_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ItemData item_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LostEquipmentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.LostEquipmentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 tag = 2;
  if (this->_internal_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tag(), target);
  }

  // int64 lost_date = 3;
  if (this->_internal_lost_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_lost_date(), target);
  }

  // .idlepb.ItemData item_data = 4;
  if (this->_internal_has_item_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::item_data(this),
        _Internal::item_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.LostEquipmentData)
  return target;
}

size_t LostEquipmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.LostEquipmentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.ItemData item_data = 4;
  if (this->_internal_has_item_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_data_);
  }

  // int32 uid = 1;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  // int32 tag = 2;
  if (this->_internal_tag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tag());
  }

  // int64 lost_date = 3;
  if (this->_internal_lost_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lost_date());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LostEquipmentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LostEquipmentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LostEquipmentData::GetClassData() const { return &_class_data_; }


void LostEquipmentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LostEquipmentData*>(&to_msg);
  auto& from = static_cast<const LostEquipmentData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.LostEquipmentData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_data()) {
    _this->_internal_mutable_item_data()->::idlepb::ItemData::MergeFrom(
        from._internal_item_data());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_tag() != 0) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (from._internal_lost_date() != 0) {
    _this->_internal_set_lost_date(from._internal_lost_date());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LostEquipmentData::CopyFrom(const LostEquipmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.LostEquipmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LostEquipmentData::IsInitialized() const {
  return true;
}

void LostEquipmentData::InternalSwap(LostEquipmentData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LostEquipmentData, _impl_.lost_date_)
      + sizeof(LostEquipmentData::_impl_.lost_date_)
      - PROTOBUF_FIELD_OFFSET(LostEquipmentData, _impl_.item_data_)>(
          reinterpret_cast<char*>(&_impl_.item_data_),
          reinterpret_cast<char*>(&other->_impl_.item_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LostEquipmentData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[48]);
}

// ===================================================================

class RoleForgeData::_Internal {
 public:
  static const ::idlepb::ForgeMakeData& cur_make_data(const RoleForgeData* msg);
};

const ::idlepb::ForgeMakeData&
RoleForgeData::_Internal::cur_make_data(const RoleForgeData* msg) {
  return *msg->_impl_.cur_make_data_;
}
RoleForgeData::RoleForgeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleForgeData)
}
RoleForgeData::RoleForgeData(const RoleForgeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleForgeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.produce_equip_quality_stats_){from._impl_.produce_equip_quality_stats_}
    , /*decltype(_impl_._produce_equip_quality_stats_cached_byte_size_)*/{0}
    , decltype(_impl_.produce_skillequip_quality_stats_){from._impl_.produce_skillequip_quality_stats_}
    , /*decltype(_impl_._produce_skillequip_quality_stats_cached_byte_size_)*/{0}
    , decltype(_impl_.recipes_){from._impl_.recipes_}
    , decltype(_impl_.lost_equipment_data_){from._impl_.lost_equipment_data_}
    , decltype(_impl_.cur_make_data_){nullptr}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.total_refine_num_){}
    , decltype(_impl_.destroy_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cur_make_data()) {
    _this->_impl_.cur_make_data_ = new ::idlepb::ForgeMakeData(*from._impl_.cur_make_data_);
  }
  ::memcpy(&_impl_.rank_, &from._impl_.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destroy_num_) -
    reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.destroy_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleForgeData)
}

inline void RoleForgeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.produce_equip_quality_stats_){arena}
    , /*decltype(_impl_._produce_equip_quality_stats_cached_byte_size_)*/{0}
    , decltype(_impl_.produce_skillequip_quality_stats_){arena}
    , /*decltype(_impl_._produce_skillequip_quality_stats_cached_byte_size_)*/{0}
    , decltype(_impl_.recipes_){arena}
    , decltype(_impl_.lost_equipment_data_){arena}
    , decltype(_impl_.cur_make_data_){nullptr}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.exp_){0}
    , decltype(_impl_.total_refine_num_){0}
    , decltype(_impl_.destroy_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleForgeData::~RoleForgeData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleForgeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleForgeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.produce_equip_quality_stats_.~RepeatedField();
  _impl_.produce_skillequip_quality_stats_.~RepeatedField();
  _impl_.recipes_.~RepeatedPtrField();
  _impl_.lost_equipment_data_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cur_make_data_;
}

void RoleForgeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleForgeData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleForgeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.produce_equip_quality_stats_.Clear();
  _impl_.produce_skillequip_quality_stats_.Clear();
  _impl_.recipes_.Clear();
  _impl_.lost_equipment_data_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.cur_make_data_ != nullptr) {
    delete _impl_.cur_make_data_;
  }
  _impl_.cur_make_data_ = nullptr;
  ::memset(&_impl_.rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.destroy_num_) -
      reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.destroy_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleForgeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ForgeMakeData cur_make_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_make_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_refine_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.total_refine_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 produce_equip_quality_stats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_produce_equip_quality_stats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_produce_equip_quality_stats(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 produce_skillequip_quality_stats = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_produce_skillequip_quality_stats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_produce_skillequip_quality_stats(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ForgeRecipeData recipes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recipes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.LostEquipmentData lost_equipment_data = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lost_equipment_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 destroy_num = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.destroy_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleForgeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleForgeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // int32 exp = 2;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_exp(), target);
  }

  // .idlepb.ForgeMakeData cur_make_data = 4;
  if (this->_internal_has_cur_make_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cur_make_data(this),
        _Internal::cur_make_data(this).GetCachedSize(), target, stream);
  }

  // int32 total_refine_num = 7;
  if (this->_internal_total_refine_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_refine_num(), target);
  }

  // repeated int32 produce_equip_quality_stats = 8;
  {
    int byte_size = _impl_._produce_equip_quality_stats_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_produce_equip_quality_stats(), byte_size, target);
    }
  }

  // repeated int32 produce_skillequip_quality_stats = 9;
  {
    int byte_size = _impl_._produce_skillequip_quality_stats_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_produce_skillequip_quality_stats(), byte_size, target);
    }
  }

  // repeated .idlepb.ForgeRecipeData recipes = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_recipes_size()); i < n; i++) {
    const auto& repfield = this->_internal_recipes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.LostEquipmentData lost_equipment_data = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lost_equipment_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_lost_equipment_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 destroy_num = 22;
  if (this->_internal_destroy_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_destroy_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleForgeData)
  return target;
}

size_t RoleForgeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleForgeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 produce_equip_quality_stats = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.produce_equip_quality_stats_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._produce_equip_quality_stats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 produce_skillequip_quality_stats = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.produce_skillequip_quality_stats_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._produce_skillequip_quality_stats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .idlepb.ForgeRecipeData recipes = 10;
  total_size += 1UL * this->_internal_recipes_size();
  for (const auto& msg : this->_impl_.recipes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.LostEquipmentData lost_equipment_data = 21;
  total_size += 2UL * this->_internal_lost_equipment_data_size();
  for (const auto& msg : this->_impl_.lost_equipment_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .idlepb.ForgeMakeData cur_make_data = 4;
  if (this->_internal_has_cur_make_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cur_make_data_);
  }

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  // int32 exp = 2;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  // int32 total_refine_num = 7;
  if (this->_internal_total_refine_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_refine_num());
  }

  // int32 destroy_num = 22;
  if (this->_internal_destroy_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_destroy_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleForgeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleForgeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleForgeData::GetClassData() const { return &_class_data_; }


void RoleForgeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleForgeData*>(&to_msg);
  auto& from = static_cast<const RoleForgeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleForgeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.produce_equip_quality_stats_.MergeFrom(from._impl_.produce_equip_quality_stats_);
  _this->_impl_.produce_skillequip_quality_stats_.MergeFrom(from._impl_.produce_skillequip_quality_stats_);
  _this->_impl_.recipes_.MergeFrom(from._impl_.recipes_);
  _this->_impl_.lost_equipment_data_.MergeFrom(from._impl_.lost_equipment_data_);
  if (from._internal_has_cur_make_data()) {
    _this->_internal_mutable_cur_make_data()->::idlepb::ForgeMakeData::MergeFrom(
        from._internal_cur_make_data());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_total_refine_num() != 0) {
    _this->_internal_set_total_refine_num(from._internal_total_refine_num());
  }
  if (from._internal_destroy_num() != 0) {
    _this->_internal_set_destroy_num(from._internal_destroy_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleForgeData::CopyFrom(const RoleForgeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleForgeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleForgeData::IsInitialized() const {
  return true;
}

void RoleForgeData::InternalSwap(RoleForgeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.produce_equip_quality_stats_.InternalSwap(&other->_impl_.produce_equip_quality_stats_);
  _impl_.produce_skillequip_quality_stats_.InternalSwap(&other->_impl_.produce_skillequip_quality_stats_);
  _impl_.recipes_.InternalSwap(&other->_impl_.recipes_);
  _impl_.lost_equipment_data_.InternalSwap(&other->_impl_.lost_equipment_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleForgeData, _impl_.destroy_num_)
      + sizeof(RoleForgeData::_impl_.destroy_num_)
      - PROTOBUF_FIELD_OFFSET(RoleForgeData, _impl_.cur_make_data_)>(
          reinterpret_cast<char*>(&_impl_.cur_make_data_),
          reinterpret_cast<char*>(&other->_impl_.cur_make_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleForgeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[49]);
}

// ===================================================================

class PillPropertyData::_Internal {
 public:
};

PillPropertyData::PillPropertyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PillPropertyData)
}
PillPropertyData::PillPropertyData(const PillPropertyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PillPropertyData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.consumed_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.consumed_num_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.consumed_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PillPropertyData)
}

inline void PillPropertyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0}
    , decltype(_impl_.consumed_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PillPropertyData::~PillPropertyData() {
  // @@protoc_insertion_point(destructor:idlepb.PillPropertyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PillPropertyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PillPropertyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PillPropertyData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PillPropertyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.consumed_num_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.consumed_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PillPropertyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 consumed_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.consumed_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PillPropertyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PillPropertyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // int32 consumed_num = 3;
  if (this->_internal_consumed_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_consumed_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PillPropertyData)
  return target;
}

size_t PillPropertyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PillPropertyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
  }

  // int32 consumed_num = 3;
  if (this->_internal_consumed_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_consumed_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PillPropertyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PillPropertyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PillPropertyData::GetClassData() const { return &_class_data_; }


void PillPropertyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PillPropertyData*>(&to_msg);
  auto& from = static_cast<const PillPropertyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PillPropertyData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_consumed_num() != 0) {
    _this->_internal_set_consumed_num(from._internal_consumed_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PillPropertyData::CopyFrom(const PillPropertyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PillPropertyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PillPropertyData::IsInitialized() const {
  return true;
}

void PillPropertyData::InternalSwap(PillPropertyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PillPropertyData, _impl_.consumed_num_)
      + sizeof(PillPropertyData::_impl_.consumed_num_)
      - PROTOBUF_FIELD_OFFSET(PillPropertyData, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PillPropertyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[50]);
}

// ===================================================================

class GongFaData::_Internal {
 public:
};

GongFaData::GongFaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.GongFaData)
}
GongFaData::GongFaData(const GongFaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GongFaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cfg_id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.begin_time_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.combat_power_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cfg_id_, &from._impl_.cfg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.combat_power_) -
    reinterpret_cast<char*>(&_impl_.cfg_id_)) + sizeof(_impl_.combat_power_));
  // @@protoc_insertion_point(copy_constructor:idlepb.GongFaData)
}

inline void GongFaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cfg_id_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.begin_time_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.combat_power_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GongFaData::~GongFaData() {
  // @@protoc_insertion_point(destructor:idlepb.GongFaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GongFaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GongFaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GongFaData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.GongFaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cfg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.combat_power_) -
      reinterpret_cast<char*>(&_impl_.cfg_id_)) + sizeof(_impl_.combat_power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GongFaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cfg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 begin_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GongFaState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::idlepb::GongFaState>(val));
        } else
          goto handle_unusual;
        continue;
      // float combat_power = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.combat_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GongFaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.GongFaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cfg_id = 1;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cfg_id(), target);
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int64 begin_time = 3;
  if (this->_internal_begin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_begin_time(), target);
  }

  // .idlepb.GongFaState state = 4;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // float combat_power = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_combat_power = this->_internal_combat_power();
  uint32_t raw_combat_power;
  memcpy(&raw_combat_power, &tmp_combat_power, sizeof(tmp_combat_power));
  if (raw_combat_power != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_combat_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.GongFaData)
  return target;
}

size_t GongFaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.GongFaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cfg_id = 1;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int64 begin_time = 3;
  if (this->_internal_begin_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_time());
  }

  // .idlepb.GongFaState state = 4;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // float combat_power = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_combat_power = this->_internal_combat_power();
  uint32_t raw_combat_power;
  memcpy(&raw_combat_power, &tmp_combat_power, sizeof(tmp_combat_power));
  if (raw_combat_power != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GongFaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GongFaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GongFaData::GetClassData() const { return &_class_data_; }


void GongFaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GongFaData*>(&to_msg);
  auto& from = static_cast<const GongFaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.GongFaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_begin_time() != 0) {
    _this->_internal_set_begin_time(from._internal_begin_time());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_combat_power = from._internal_combat_power();
  uint32_t raw_combat_power;
  memcpy(&raw_combat_power, &tmp_combat_power, sizeof(tmp_combat_power));
  if (raw_combat_power != 0) {
    _this->_internal_set_combat_power(from._internal_combat_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GongFaData::CopyFrom(const GongFaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.GongFaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GongFaData::IsInitialized() const {
  return true;
}

void GongFaData::InternalSwap(GongFaData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GongFaData, _impl_.combat_power_)
      + sizeof(GongFaData::_impl_.combat_power_)
      - PROTOBUF_FIELD_OFFSET(GongFaData, _impl_.cfg_id_)>(
          reinterpret_cast<char*>(&_impl_.cfg_id_),
          reinterpret_cast<char*>(&other->_impl_.cfg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GongFaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[51]);
}

// ===================================================================

class RoleGongFaData::_Internal {
 public:
};

RoleGongFaData::RoleGongFaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleGongFaData)
}
RoleGongFaData::RoleGongFaData(const RoleGongFaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleGongFaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.active_max_effect_){from._impl_.active_max_effect_}
    , /*decltype(_impl_._active_max_effect_cached_byte_size_)*/{0}
    , decltype(_impl_.gongfa_point_use_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gongfa_point_use_num_ = from._impl_.gongfa_point_use_num_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleGongFaData)
}

inline void RoleGongFaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.active_max_effect_){arena}
    , /*decltype(_impl_._active_max_effect_cached_byte_size_)*/{0}
    , decltype(_impl_.gongfa_point_use_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleGongFaData::~RoleGongFaData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleGongFaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleGongFaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
  _impl_.active_max_effect_.~RepeatedField();
}

void RoleGongFaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleGongFaData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleGongFaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.active_max_effect_.Clear();
  _impl_.gongfa_point_use_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleGongFaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.GongFaData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 active_max_effect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_active_max_effect(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_active_max_effect(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gongfa_point_use_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gongfa_point_use_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleGongFaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleGongFaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.GongFaData data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 active_max_effect = 2;
  {
    int byte_size = _impl_._active_max_effect_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_active_max_effect(), byte_size, target);
    }
  }

  // int32 gongfa_point_use_num = 3;
  if (this->_internal_gongfa_point_use_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_gongfa_point_use_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleGongFaData)
  return target;
}

size_t RoleGongFaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleGongFaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.GongFaData data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 active_max_effect = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.active_max_effect_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._active_max_effect_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 gongfa_point_use_num = 3;
  if (this->_internal_gongfa_point_use_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gongfa_point_use_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleGongFaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleGongFaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleGongFaData::GetClassData() const { return &_class_data_; }


void RoleGongFaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleGongFaData*>(&to_msg);
  auto& from = static_cast<const RoleGongFaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleGongFaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.active_max_effect_.MergeFrom(from._impl_.active_max_effect_);
  if (from._internal_gongfa_point_use_num() != 0) {
    _this->_internal_set_gongfa_point_use_num(from._internal_gongfa_point_use_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleGongFaData::CopyFrom(const RoleGongFaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleGongFaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleGongFaData::IsInitialized() const {
  return true;
}

void RoleGongFaData::InternalSwap(RoleGongFaData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.active_max_effect_.InternalSwap(&other->_impl_.active_max_effect_);
  swap(_impl_.gongfa_point_use_num_, other->_impl_.gongfa_point_use_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleGongFaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[52]);
}

// ===================================================================

class CollectionEntrySaveData::_Internal {
 public:
};

CollectionEntrySaveData::CollectionEntrySaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CollectionEntrySaveData)
}
CollectionEntrySaveData::CollectionEntrySaveData(const CollectionEntrySaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectionEntrySaveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.star_){}
    , decltype(_impl_.is_activated_){}
    , decltype(_impl_.piece_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.piece_num_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.piece_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.CollectionEntrySaveData)
}

inline void CollectionEntrySaveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.star_){0}
    , decltype(_impl_.is_activated_){false}
    , decltype(_impl_.piece_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectionEntrySaveData::~CollectionEntrySaveData() {
  // @@protoc_insertion_point(destructor:idlepb.CollectionEntrySaveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionEntrySaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollectionEntrySaveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectionEntrySaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CollectionEntrySaveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.piece_num_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.piece_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionEntrySaveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 star = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_activated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 piece_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.piece_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionEntrySaveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CollectionEntrySaveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 star = 3;
  if (this->_internal_star() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_star(), target);
  }

  // bool is_activated = 4;
  if (this->_internal_is_activated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_activated(), target);
  }

  // int32 piece_num = 5;
  if (this->_internal_piece_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_piece_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CollectionEntrySaveData)
  return target;
}

size_t CollectionEntrySaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CollectionEntrySaveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 star = 3;
  if (this->_internal_star() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_star());
  }

  // bool is_activated = 4;
  if (this->_internal_is_activated() != 0) {
    total_size += 1 + 1;
  }

  // int32 piece_num = 5;
  if (this->_internal_piece_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_piece_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionEntrySaveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectionEntrySaveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionEntrySaveData::GetClassData() const { return &_class_data_; }


void CollectionEntrySaveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectionEntrySaveData*>(&to_msg);
  auto& from = static_cast<const CollectionEntrySaveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CollectionEntrySaveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_star() != 0) {
    _this->_internal_set_star(from._internal_star());
  }
  if (from._internal_is_activated() != 0) {
    _this->_internal_set_is_activated(from._internal_is_activated());
  }
  if (from._internal_piece_num() != 0) {
    _this->_internal_set_piece_num(from._internal_piece_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionEntrySaveData::CopyFrom(const CollectionEntrySaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CollectionEntrySaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionEntrySaveData::IsInitialized() const {
  return true;
}

void CollectionEntrySaveData::InternalSwap(CollectionEntrySaveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectionEntrySaveData, _impl_.piece_num_)
      + sizeof(CollectionEntrySaveData::_impl_.piece_num_)
      - PROTOBUF_FIELD_OFFSET(CollectionEntrySaveData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionEntrySaveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[53]);
}

// ===================================================================

class CommonCollectionPieceData::_Internal {
 public:
};

CommonCollectionPieceData::CommonCollectionPieceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CommonCollectionPieceData)
}
CommonCollectionPieceData::CommonCollectionPieceData(const CommonCollectionPieceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommonCollectionPieceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quality_){}
    , decltype(_impl_.piece_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quality_, &from._impl_.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.piece_num_) -
    reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.piece_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.CommonCollectionPieceData)
}

inline void CommonCollectionPieceData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quality_){0}
    , decltype(_impl_.piece_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommonCollectionPieceData::~CommonCollectionPieceData() {
  // @@protoc_insertion_point(destructor:idlepb.CommonCollectionPieceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonCollectionPieceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommonCollectionPieceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonCollectionPieceData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CommonCollectionPieceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.piece_num_) -
      reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.piece_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonCollectionPieceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.ItemQuality quality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::idlepb::ItemQuality>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 piece_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.piece_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonCollectionPieceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CommonCollectionPieceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.ItemQuality quality = 1;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_quality(), target);
  }

  // int32 piece_num = 2;
  if (this->_internal_piece_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_piece_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CommonCollectionPieceData)
  return target;
}

size_t CommonCollectionPieceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CommonCollectionPieceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.ItemQuality quality = 1;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // int32 piece_num = 2;
  if (this->_internal_piece_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_piece_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonCollectionPieceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommonCollectionPieceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonCollectionPieceData::GetClassData() const { return &_class_data_; }


void CommonCollectionPieceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommonCollectionPieceData*>(&to_msg);
  auto& from = static_cast<const CommonCollectionPieceData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CommonCollectionPieceData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  if (from._internal_piece_num() != 0) {
    _this->_internal_set_piece_num(from._internal_piece_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonCollectionPieceData::CopyFrom(const CommonCollectionPieceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CommonCollectionPieceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonCollectionPieceData::IsInitialized() const {
  return true;
}

void CommonCollectionPieceData::InternalSwap(CommonCollectionPieceData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonCollectionPieceData, _impl_.piece_num_)
      + sizeof(CommonCollectionPieceData::_impl_.piece_num_)
      - PROTOBUF_FIELD_OFFSET(CommonCollectionPieceData, _impl_.quality_)>(
          reinterpret_cast<char*>(&_impl_.quality_),
          reinterpret_cast<char*>(&other->_impl_.quality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonCollectionPieceData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[54]);
}

// ===================================================================

class CollectionZoneActiveAwardData::_Internal {
 public:
};

CollectionZoneActiveAwardData::CollectionZoneActiveAwardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CollectionZoneActiveAwardData)
}
CollectionZoneActiveAwardData::CollectionZoneActiveAwardData(const CollectionZoneActiveAwardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectionZoneActiveAwardData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zone_type_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.zone_type_, &from._impl_.zone_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.zone_type_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.CollectionZoneActiveAwardData)
}

inline void CollectionZoneActiveAwardData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zone_type_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectionZoneActiveAwardData::~CollectionZoneActiveAwardData() {
  // @@protoc_insertion_point(destructor:idlepb.CollectionZoneActiveAwardData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionZoneActiveAwardData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollectionZoneActiveAwardData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectionZoneActiveAwardData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CollectionZoneActiveAwardData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.zone_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.zone_type_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionZoneActiveAwardData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.CollectionZoneType zone_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_zone_type(static_cast<::idlepb::CollectionZoneType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionZoneActiveAwardData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CollectionZoneActiveAwardData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.CollectionZoneType zone_type = 1;
  if (this->_internal_zone_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_zone_type(), target);
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CollectionZoneActiveAwardData)
  return target;
}

size_t CollectionZoneActiveAwardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CollectionZoneActiveAwardData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.CollectionZoneType zone_type = 1;
  if (this->_internal_zone_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_zone_type());
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionZoneActiveAwardData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectionZoneActiveAwardData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionZoneActiveAwardData::GetClassData() const { return &_class_data_; }


void CollectionZoneActiveAwardData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectionZoneActiveAwardData*>(&to_msg);
  auto& from = static_cast<const CollectionZoneActiveAwardData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CollectionZoneActiveAwardData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_zone_type() != 0) {
    _this->_internal_set_zone_type(from._internal_zone_type());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionZoneActiveAwardData::CopyFrom(const CollectionZoneActiveAwardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CollectionZoneActiveAwardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionZoneActiveAwardData::IsInitialized() const {
  return true;
}

void CollectionZoneActiveAwardData::InternalSwap(CollectionZoneActiveAwardData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectionZoneActiveAwardData, _impl_.num_)
      + sizeof(CollectionZoneActiveAwardData::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(CollectionZoneActiveAwardData, _impl_.zone_type_)>(
          reinterpret_cast<char*>(&_impl_.zone_type_),
          reinterpret_cast<char*>(&other->_impl_.zone_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionZoneActiveAwardData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[55]);
}

// ===================================================================

class RoleCollectionSaveData::_Internal {
 public:
};

RoleCollectionSaveData::RoleCollectionSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleCollectionSaveData)
}
RoleCollectionSaveData::RoleCollectionSaveData(const RoleCollectionSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleCollectionSaveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.all_entries_){from._impl_.all_entries_}
    , decltype(_impl_.common_pieces_){from._impl_.common_pieces_}
    , decltype(_impl_.draw_award_done_histories_){from._impl_.draw_award_done_histories_}
    , /*decltype(_impl_._draw_award_done_histories_cached_byte_size_)*/{0}
    , decltype(_impl_.zone_active_awards_){from._impl_.zone_active_awards_}
    , decltype(_impl_.next_reset_enhance_ticks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.next_reset_enhance_ticks_ = from._impl_.next_reset_enhance_ticks_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleCollectionSaveData)
}

inline void RoleCollectionSaveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.all_entries_){arena}
    , decltype(_impl_.common_pieces_){arena}
    , decltype(_impl_.draw_award_done_histories_){arena}
    , /*decltype(_impl_._draw_award_done_histories_cached_byte_size_)*/{0}
    , decltype(_impl_.zone_active_awards_){arena}
    , decltype(_impl_.next_reset_enhance_ticks_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleCollectionSaveData::~RoleCollectionSaveData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleCollectionSaveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleCollectionSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.all_entries_.~RepeatedPtrField();
  _impl_.common_pieces_.~RepeatedPtrField();
  _impl_.draw_award_done_histories_.~RepeatedField();
  _impl_.zone_active_awards_.~RepeatedPtrField();
}

void RoleCollectionSaveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleCollectionSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleCollectionSaveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.all_entries_.Clear();
  _impl_.common_pieces_.Clear();
  _impl_.draw_award_done_histories_.Clear();
  _impl_.zone_active_awards_.Clear();
  _impl_.next_reset_enhance_ticks_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleCollectionSaveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.CollectionEntrySaveData all_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.CommonCollectionPieceData common_pieces = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_common_pieces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 draw_award_done_histories = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_draw_award_done_histories(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_draw_award_done_histories(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.CollectionZoneActiveAwardData zone_active_awards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_zone_active_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 next_reset_enhance_ticks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.next_reset_enhance_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleCollectionSaveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleCollectionSaveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.CollectionEntrySaveData all_entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.CommonCollectionPieceData common_pieces = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_common_pieces_size()); i < n; i++) {
    const auto& repfield = this->_internal_common_pieces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 draw_award_done_histories = 3;
  {
    int byte_size = _impl_._draw_award_done_histories_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_draw_award_done_histories(), byte_size, target);
    }
  }

  // repeated .idlepb.CollectionZoneActiveAwardData zone_active_awards = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_zone_active_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_zone_active_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 next_reset_enhance_ticks = 5;
  if (this->_internal_next_reset_enhance_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_next_reset_enhance_ticks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleCollectionSaveData)
  return target;
}

size_t RoleCollectionSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleCollectionSaveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.CollectionEntrySaveData all_entries = 1;
  total_size += 1UL * this->_internal_all_entries_size();
  for (const auto& msg : this->_impl_.all_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.CommonCollectionPieceData common_pieces = 2;
  total_size += 1UL * this->_internal_common_pieces_size();
  for (const auto& msg : this->_impl_.common_pieces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 draw_award_done_histories = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.draw_award_done_histories_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._draw_award_done_histories_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .idlepb.CollectionZoneActiveAwardData zone_active_awards = 4;
  total_size += 1UL * this->_internal_zone_active_awards_size();
  for (const auto& msg : this->_impl_.zone_active_awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 next_reset_enhance_ticks = 5;
  if (this->_internal_next_reset_enhance_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_reset_enhance_ticks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleCollectionSaveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleCollectionSaveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleCollectionSaveData::GetClassData() const { return &_class_data_; }


void RoleCollectionSaveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleCollectionSaveData*>(&to_msg);
  auto& from = static_cast<const RoleCollectionSaveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleCollectionSaveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.all_entries_.MergeFrom(from._impl_.all_entries_);
  _this->_impl_.common_pieces_.MergeFrom(from._impl_.common_pieces_);
  _this->_impl_.draw_award_done_histories_.MergeFrom(from._impl_.draw_award_done_histories_);
  _this->_impl_.zone_active_awards_.MergeFrom(from._impl_.zone_active_awards_);
  if (from._internal_next_reset_enhance_ticks() != 0) {
    _this->_internal_set_next_reset_enhance_ticks(from._internal_next_reset_enhance_ticks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleCollectionSaveData::CopyFrom(const RoleCollectionSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleCollectionSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCollectionSaveData::IsInitialized() const {
  return true;
}

void RoleCollectionSaveData::InternalSwap(RoleCollectionSaveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.all_entries_.InternalSwap(&other->_impl_.all_entries_);
  _impl_.common_pieces_.InternalSwap(&other->_impl_.common_pieces_);
  _impl_.draw_award_done_histories_.InternalSwap(&other->_impl_.draw_award_done_histories_);
  _impl_.zone_active_awards_.InternalSwap(&other->_impl_.zone_active_awards_);
  swap(_impl_.next_reset_enhance_ticks_, other->_impl_.next_reset_enhance_ticks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleCollectionSaveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[56]);
}

// ===================================================================

class FuZengTuple::_Internal {
 public:
};

FuZengTuple::FuZengTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.FuZengTuple)
}
FuZengTuple::FuZengTuple(const FuZengTuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FuZengTuple* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){from._impl_.num_}
    , /*decltype(_impl_._num_cached_byte_size_)*/{0}
    , decltype(_impl_.cfg_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cfg_id_ = from._impl_.cfg_id_;
  // @@protoc_insertion_point(copy_constructor:idlepb.FuZengTuple)
}

inline void FuZengTuple::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){arena}
    , /*decltype(_impl_._num_cached_byte_size_)*/{0}
    , decltype(_impl_.cfg_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FuZengTuple::~FuZengTuple() {
  // @@protoc_insertion_point(destructor:idlepb.FuZengTuple)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FuZengTuple::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.num_.~RepeatedField();
}

void FuZengTuple::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FuZengTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.FuZengTuple)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.num_.Clear();
  _impl_.cfg_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuZengTuple::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cfg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_num(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FuZengTuple::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.FuZengTuple)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cfg_id = 1;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cfg_id(), target);
  }

  // repeated int64 num = 2;
  {
    int byte_size = _impl_._num_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_num(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.FuZengTuple)
  return target;
}

size_t FuZengTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.FuZengTuple)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 num = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.num_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._num_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 cfg_id = 1;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FuZengTuple::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FuZengTuple::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FuZengTuple::GetClassData() const { return &_class_data_; }


void FuZengTuple::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FuZengTuple*>(&to_msg);
  auto& from = static_cast<const FuZengTuple&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.FuZengTuple)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.num_.MergeFrom(from._impl_.num_);
  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FuZengTuple::CopyFrom(const FuZengTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.FuZengTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuZengTuple::IsInitialized() const {
  return true;
}

void FuZengTuple::InternalSwap(FuZengTuple* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.num_.InternalSwap(&other->_impl_.num_);
  swap(_impl_.cfg_id_, other->_impl_.cfg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FuZengTuple::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[57]);
}

// ===================================================================

class FuZengData::_Internal {
 public:
};

FuZengData::FuZengData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.FuZengData)
}
FuZengData::FuZengData(const FuZengData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FuZengData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.received_record_){from._impl_.received_record_}
    , decltype(_impl_.max_num_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_num_, &from._impl_.max_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.max_num_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:idlepb.FuZengData)
}

inline void FuZengData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.received_record_){arena}
    , decltype(_impl_.max_num_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FuZengData::~FuZengData() {
  // @@protoc_insertion_point(destructor:idlepb.FuZengData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FuZengData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.received_record_.~RepeatedPtrField();
}

void FuZengData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FuZengData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.FuZengData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.received_record_.Clear();
  ::memset(&_impl_.max_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.max_num_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuZengData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.FuZengType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::idlepb::FuZengType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.FuZengTuple received_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_received_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 max_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FuZengData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.FuZengData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.FuZengType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .idlepb.FuZengTuple received_record = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_received_record_size()); i < n; i++) {
    const auto& repfield = this->_internal_received_record(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 max_num = 3;
  if (this->_internal_max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.FuZengData)
  return target;
}

size_t FuZengData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.FuZengData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.FuZengTuple received_record = 2;
  total_size += 1UL * this->_internal_received_record_size();
  for (const auto& msg : this->_impl_.received_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 max_num = 3;
  if (this->_internal_max_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_num());
  }

  // .idlepb.FuZengType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FuZengData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FuZengData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FuZengData::GetClassData() const { return &_class_data_; }


void FuZengData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FuZengData*>(&to_msg);
  auto& from = static_cast<const FuZengData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.FuZengData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.received_record_.MergeFrom(from._impl_.received_record_);
  if (from._internal_max_num() != 0) {
    _this->_internal_set_max_num(from._internal_max_num());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FuZengData::CopyFrom(const FuZengData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.FuZengData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuZengData::IsInitialized() const {
  return true;
}

void FuZengData::InternalSwap(FuZengData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.received_record_.InternalSwap(&other->_impl_.received_record_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FuZengData, _impl_.type_)
      + sizeof(FuZengData::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(FuZengData, _impl_.max_num_)>(
          reinterpret_cast<char*>(&_impl_.max_num_),
          reinterpret_cast<char*>(&other->_impl_.max_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FuZengData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[58]);
}

// ===================================================================

class RoleFuZengData::_Internal {
 public:
};

RoleFuZengData::RoleFuZengData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleFuZengData)
}
RoleFuZengData::RoleFuZengData(const RoleFuZengData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleFuZengData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleFuZengData)
}

inline void RoleFuZengData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleFuZengData::~RoleFuZengData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleFuZengData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleFuZengData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void RoleFuZengData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleFuZengData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleFuZengData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleFuZengData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.FuZengData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleFuZengData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleFuZengData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.FuZengData data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleFuZengData)
  return target;
}

size_t RoleFuZengData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleFuZengData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.FuZengData data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleFuZengData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleFuZengData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleFuZengData::GetClassData() const { return &_class_data_; }


void RoleFuZengData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleFuZengData*>(&to_msg);
  auto& from = static_cast<const RoleFuZengData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleFuZengData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleFuZengData::CopyFrom(const RoleFuZengData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleFuZengData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFuZengData::IsInitialized() const {
  return true;
}

void RoleFuZengData::InternalSwap(RoleFuZengData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleFuZengData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[59]);
}

// ===================================================================

class RoleFightModeData::_Internal {
 public:
};

RoleFightModeData::RoleFightModeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleFightModeData)
}
RoleFightModeData::RoleFightModeData(const RoleFightModeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleFightModeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_attack_ticks_){}
    , decltype(_impl_.last_defence_ticks_){}
    , decltype(_impl_.cur_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.last_attack_ticks_, &from._impl_.last_attack_ticks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cur_mode_) -
    reinterpret_cast<char*>(&_impl_.last_attack_ticks_)) + sizeof(_impl_.cur_mode_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleFightModeData)
}

inline void RoleFightModeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_attack_ticks_){int64_t{0}}
    , decltype(_impl_.last_defence_ticks_){int64_t{0}}
    , decltype(_impl_.cur_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleFightModeData::~RoleFightModeData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleFightModeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleFightModeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleFightModeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleFightModeData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleFightModeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.last_attack_ticks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cur_mode_) -
      reinterpret_cast<char*>(&_impl_.last_attack_ticks_)) + sizeof(_impl_.cur_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleFightModeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.FightMode cur_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cur_mode(static_cast<::idlepb::FightMode>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 last_attack_ticks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.last_attack_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_defence_ticks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_defence_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleFightModeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleFightModeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.FightMode cur_mode = 1;
  if (this->_internal_cur_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cur_mode(), target);
  }

  // int64 last_attack_ticks = 2;
  if (this->_internal_last_attack_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_attack_ticks(), target);
  }

  // int64 last_defence_ticks = 3;
  if (this->_internal_last_defence_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_defence_ticks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleFightModeData)
  return target;
}

size_t RoleFightModeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleFightModeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 last_attack_ticks = 2;
  if (this->_internal_last_attack_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_attack_ticks());
  }

  // int64 last_defence_ticks = 3;
  if (this->_internal_last_defence_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_defence_ticks());
  }

  // .idlepb.FightMode cur_mode = 1;
  if (this->_internal_cur_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cur_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleFightModeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleFightModeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleFightModeData::GetClassData() const { return &_class_data_; }


void RoleFightModeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleFightModeData*>(&to_msg);
  auto& from = static_cast<const RoleFightModeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleFightModeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_last_attack_ticks() != 0) {
    _this->_internal_set_last_attack_ticks(from._internal_last_attack_ticks());
  }
  if (from._internal_last_defence_ticks() != 0) {
    _this->_internal_set_last_defence_ticks(from._internal_last_defence_ticks());
  }
  if (from._internal_cur_mode() != 0) {
    _this->_internal_set_cur_mode(from._internal_cur_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleFightModeData::CopyFrom(const RoleFightModeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleFightModeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFightModeData::IsInitialized() const {
  return true;
}

void RoleFightModeData::InternalSwap(RoleFightModeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleFightModeData, _impl_.cur_mode_)
      + sizeof(RoleFightModeData::_impl_.cur_mode_)
      - PROTOBUF_FIELD_OFFSET(RoleFightModeData, _impl_.last_attack_ticks_)>(
          reinterpret_cast<char*>(&_impl_.last_attack_ticks_),
          reinterpret_cast<char*>(&other->_impl_.last_attack_ticks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleFightModeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[60]);
}

// ===================================================================

class RoleNormalSettings::_Internal {
 public:
};

RoleNormalSettings::RoleNormalSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleNormalSettings)
}
RoleNormalSettings::RoleNormalSettings(const RoleNormalSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleNormalSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attack_lock_type_){}
    , decltype(_impl_.attack_unlock_type_){}
    , decltype(_impl_.show_unlock_button_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.attack_lock_type_, &from._impl_.attack_lock_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.show_unlock_button_) -
    reinterpret_cast<char*>(&_impl_.attack_lock_type_)) + sizeof(_impl_.show_unlock_button_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleNormalSettings)
}

inline void RoleNormalSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attack_lock_type_){0}
    , decltype(_impl_.attack_unlock_type_){0}
    , decltype(_impl_.show_unlock_button_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleNormalSettings::~RoleNormalSettings() {
  // @@protoc_insertion_point(destructor:idlepb.RoleNormalSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleNormalSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleNormalSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleNormalSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleNormalSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.attack_lock_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.show_unlock_button_) -
      reinterpret_cast<char*>(&_impl_.attack_lock_type_)) + sizeof(_impl_.show_unlock_button_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleNormalSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.AttackLockType attack_lock_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_attack_lock_type(static_cast<::idlepb::AttackLockType>(val));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.AttackUnlockType attack_unlock_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_attack_unlock_type(static_cast<::idlepb::AttackUnlockType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool show_unlock_button = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.show_unlock_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleNormalSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleNormalSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.AttackLockType attack_lock_type = 1;
  if (this->_internal_attack_lock_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_attack_lock_type(), target);
  }

  // .idlepb.AttackUnlockType attack_unlock_type = 2;
  if (this->_internal_attack_unlock_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_attack_unlock_type(), target);
  }

  // bool show_unlock_button = 3;
  if (this->_internal_show_unlock_button() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_show_unlock_button(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleNormalSettings)
  return target;
}

size_t RoleNormalSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleNormalSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.AttackLockType attack_lock_type = 1;
  if (this->_internal_attack_lock_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_attack_lock_type());
  }

  // .idlepb.AttackUnlockType attack_unlock_type = 2;
  if (this->_internal_attack_unlock_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_attack_unlock_type());
  }

  // bool show_unlock_button = 3;
  if (this->_internal_show_unlock_button() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleNormalSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleNormalSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleNormalSettings::GetClassData() const { return &_class_data_; }


void RoleNormalSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleNormalSettings*>(&to_msg);
  auto& from = static_cast<const RoleNormalSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleNormalSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_attack_lock_type() != 0) {
    _this->_internal_set_attack_lock_type(from._internal_attack_lock_type());
  }
  if (from._internal_attack_unlock_type() != 0) {
    _this->_internal_set_attack_unlock_type(from._internal_attack_unlock_type());
  }
  if (from._internal_show_unlock_button() != 0) {
    _this->_internal_set_show_unlock_button(from._internal_show_unlock_button());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleNormalSettings::CopyFrom(const RoleNormalSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleNormalSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleNormalSettings::IsInitialized() const {
  return true;
}

void RoleNormalSettings::InternalSwap(RoleNormalSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleNormalSettings, _impl_.show_unlock_button_)
      + sizeof(RoleNormalSettings::_impl_.show_unlock_button_)
      - PROTOBUF_FIELD_OFFSET(RoleNormalSettings, _impl_.attack_lock_type_)>(
          reinterpret_cast<char*>(&_impl_.attack_lock_type_),
          reinterpret_cast<char*>(&other->_impl_.attack_lock_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleNormalSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[61]);
}

// ===================================================================

class RoleData::_Internal {
 public:
  static const ::idlepb::CurrencyData& currency_data(const RoleData* msg);
  static const ::idlepb::CultivationData& physics_data(const RoleData* msg);
  static const ::idlepb::CultivationData& magic_data(const RoleData* msg);
  static const ::idlepb::RoleDailyCounter& daily_counter(const RoleData* msg);
  static const ::idlepb::CharacterModelConfig& model_config(const RoleData* msg);
  static const ::idlepb::Vector3& last_world_pos(const RoleData* msg);
  static const ::idlepb::RoleFightModeData& fight_mode(const RoleData* msg);
  static const ::idlepb::RoleNormalSettings& normal_settings(const RoleData* msg);
  static const ::idlepb::RoleWeeklyCounter& weekly_counter(const RoleData* msg);
  static const ::idlepb::Vector3& last_arena_world_pos(const RoleData* msg);
  static const ::idlepb::GameStatsData& game_stats(const RoleData* msg);
  static const ::idlepb::Vector3& last_all_arena_world_pos(const RoleData* msg);
};

const ::idlepb::CurrencyData&
RoleData::_Internal::currency_data(const RoleData* msg) {
  return *msg->_impl_.currency_data_;
}
const ::idlepb::CultivationData&
RoleData::_Internal::physics_data(const RoleData* msg) {
  return *msg->_impl_.physics_data_;
}
const ::idlepb::CultivationData&
RoleData::_Internal::magic_data(const RoleData* msg) {
  return *msg->_impl_.magic_data_;
}
const ::idlepb::RoleDailyCounter&
RoleData::_Internal::daily_counter(const RoleData* msg) {
  return *msg->_impl_.daily_counter_;
}
const ::idlepb::CharacterModelConfig&
RoleData::_Internal::model_config(const RoleData* msg) {
  return *msg->_impl_.model_config_;
}
const ::idlepb::Vector3&
RoleData::_Internal::last_world_pos(const RoleData* msg) {
  return *msg->_impl_.last_world_pos_;
}
const ::idlepb::RoleFightModeData&
RoleData::_Internal::fight_mode(const RoleData* msg) {
  return *msg->_impl_.fight_mode_;
}
const ::idlepb::RoleNormalSettings&
RoleData::_Internal::normal_settings(const RoleData* msg) {
  return *msg->_impl_.normal_settings_;
}
const ::idlepb::RoleWeeklyCounter&
RoleData::_Internal::weekly_counter(const RoleData* msg) {
  return *msg->_impl_.weekly_counter_;
}
const ::idlepb::Vector3&
RoleData::_Internal::last_arena_world_pos(const RoleData* msg) {
  return *msg->_impl_.last_arena_world_pos_;
}
const ::idlepb::GameStatsData&
RoleData::_Internal::game_stats(const RoleData* msg) {
  return *msg->_impl_.game_stats_;
}
const ::idlepb::Vector3&
RoleData::_Internal::last_all_arena_world_pos(const RoleData* msg) {
  return *msg->_impl_.last_all_arena_world_pos_;
}
RoleData::RoleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleData)
}
RoleData::RoleData(const RoleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unlocked_modules_){from._impl_.unlocked_modules_}
    , /*decltype(_impl_._unlocked_modules_cached_byte_size_)*/{0}
    , decltype(_impl_.pill_property_data_){from._impl_.pill_property_data_}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.currency_data_){nullptr}
    , decltype(_impl_.physics_data_){nullptr}
    , decltype(_impl_.magic_data_){nullptr}
    , decltype(_impl_.daily_counter_){nullptr}
    , decltype(_impl_.model_config_){nullptr}
    , decltype(_impl_.last_world_pos_){nullptr}
    , decltype(_impl_.fight_mode_){nullptr}
    , decltype(_impl_.normal_settings_){nullptr}
    , decltype(_impl_.weekly_counter_){nullptr}
    , decltype(_impl_.last_arena_world_pos_){nullptr}
    , decltype(_impl_.game_stats_){nullptr}
    , decltype(_impl_.last_all_arena_world_pos_){nullptr}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.last_exp_cycle_timestamp_){}
    , decltype(_impl_.cultivation_dir_){}
    , decltype(_impl_.last_world_cfgid_){}
    , decltype(_impl_.next_teleport_time_){}
    , decltype(_impl_.combat_power_){}
    , decltype(_impl_.last_unlock_arena_id_){}
    , decltype(_impl_.login_count_){}
    , decltype(_impl_.create_time_){}
    , decltype(_impl_.qi_collector_rank_){}
    , decltype(_impl_.last_arena_world_cfgid_){}
    , decltype(_impl_.offline_time_){}
    , decltype(_impl_.last_all_arena_world_cfgid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_currency_data()) {
    _this->_impl_.currency_data_ = new ::idlepb::CurrencyData(*from._impl_.currency_data_);
  }
  if (from._internal_has_physics_data()) {
    _this->_impl_.physics_data_ = new ::idlepb::CultivationData(*from._impl_.physics_data_);
  }
  if (from._internal_has_magic_data()) {
    _this->_impl_.magic_data_ = new ::idlepb::CultivationData(*from._impl_.magic_data_);
  }
  if (from._internal_has_daily_counter()) {
    _this->_impl_.daily_counter_ = new ::idlepb::RoleDailyCounter(*from._impl_.daily_counter_);
  }
  if (from._internal_has_model_config()) {
    _this->_impl_.model_config_ = new ::idlepb::CharacterModelConfig(*from._impl_.model_config_);
  }
  if (from._internal_has_last_world_pos()) {
    _this->_impl_.last_world_pos_ = new ::idlepb::Vector3(*from._impl_.last_world_pos_);
  }
  if (from._internal_has_fight_mode()) {
    _this->_impl_.fight_mode_ = new ::idlepb::RoleFightModeData(*from._impl_.fight_mode_);
  }
  if (from._internal_has_normal_settings()) {
    _this->_impl_.normal_settings_ = new ::idlepb::RoleNormalSettings(*from._impl_.normal_settings_);
  }
  if (from._internal_has_weekly_counter()) {
    _this->_impl_.weekly_counter_ = new ::idlepb::RoleWeeklyCounter(*from._impl_.weekly_counter_);
  }
  if (from._internal_has_last_arena_world_pos()) {
    _this->_impl_.last_arena_world_pos_ = new ::idlepb::Vector3(*from._impl_.last_arena_world_pos_);
  }
  if (from._internal_has_game_stats()) {
    _this->_impl_.game_stats_ = new ::idlepb::GameStatsData(*from._impl_.game_stats_);
  }
  if (from._internal_has_last_all_arena_world_pos()) {
    _this->_impl_.last_all_arena_world_pos_ = new ::idlepb::Vector3(*from._impl_.last_all_arena_world_pos_);
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_all_arena_world_cfgid_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.last_all_arena_world_cfgid_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleData)
}

inline void RoleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unlocked_modules_){arena}
    , /*decltype(_impl_._unlocked_modules_cached_byte_size_)*/{0}
    , decltype(_impl_.pill_property_data_){arena}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.currency_data_){nullptr}
    , decltype(_impl_.physics_data_){nullptr}
    , decltype(_impl_.magic_data_){nullptr}
    , decltype(_impl_.daily_counter_){nullptr}
    , decltype(_impl_.model_config_){nullptr}
    , decltype(_impl_.last_world_pos_){nullptr}
    , decltype(_impl_.fight_mode_){nullptr}
    , decltype(_impl_.normal_settings_){nullptr}
    , decltype(_impl_.weekly_counter_){nullptr}
    , decltype(_impl_.last_arena_world_pos_){nullptr}
    , decltype(_impl_.game_stats_){nullptr}
    , decltype(_impl_.last_all_arena_world_pos_){nullptr}
    , decltype(_impl_.user_id_){uint64_t{0u}}
    , decltype(_impl_.role_id_){uint64_t{0u}}
    , decltype(_impl_.last_exp_cycle_timestamp_){int64_t{0}}
    , decltype(_impl_.cultivation_dir_){0}
    , decltype(_impl_.last_world_cfgid_){0}
    , decltype(_impl_.next_teleport_time_){int64_t{0}}
    , decltype(_impl_.combat_power_){int64_t{0}}
    , decltype(_impl_.last_unlock_arena_id_){0}
    , decltype(_impl_.login_count_){0}
    , decltype(_impl_.create_time_){int64_t{0}}
    , decltype(_impl_.qi_collector_rank_){0}
    , decltype(_impl_.last_arena_world_cfgid_){0}
    , decltype(_impl_.offline_time_){int64_t{0}}
    , decltype(_impl_.last_all_arena_world_cfgid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleData::~RoleData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unlocked_modules_.~RepeatedField();
  _impl_.pill_property_data_.~RepeatedPtrField();
  _impl_.role_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.currency_data_;
  if (this != internal_default_instance()) delete _impl_.physics_data_;
  if (this != internal_default_instance()) delete _impl_.magic_data_;
  if (this != internal_default_instance()) delete _impl_.daily_counter_;
  if (this != internal_default_instance()) delete _impl_.model_config_;
  if (this != internal_default_instance()) delete _impl_.last_world_pos_;
  if (this != internal_default_instance()) delete _impl_.fight_mode_;
  if (this != internal_default_instance()) delete _impl_.normal_settings_;
  if (this != internal_default_instance()) delete _impl_.weekly_counter_;
  if (this != internal_default_instance()) delete _impl_.last_arena_world_pos_;
  if (this != internal_default_instance()) delete _impl_.game_stats_;
  if (this != internal_default_instance()) delete _impl_.last_all_arena_world_pos_;
}

void RoleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unlocked_modules_.Clear();
  _impl_.pill_property_data_.Clear();
  _impl_.role_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.currency_data_ != nullptr) {
    delete _impl_.currency_data_;
  }
  _impl_.currency_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.physics_data_ != nullptr) {
    delete _impl_.physics_data_;
  }
  _impl_.physics_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.magic_data_ != nullptr) {
    delete _impl_.magic_data_;
  }
  _impl_.magic_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.daily_counter_ != nullptr) {
    delete _impl_.daily_counter_;
  }
  _impl_.daily_counter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_config_ != nullptr) {
    delete _impl_.model_config_;
  }
  _impl_.model_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_world_pos_ != nullptr) {
    delete _impl_.last_world_pos_;
  }
  _impl_.last_world_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fight_mode_ != nullptr) {
    delete _impl_.fight_mode_;
  }
  _impl_.fight_mode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.normal_settings_ != nullptr) {
    delete _impl_.normal_settings_;
  }
  _impl_.normal_settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.weekly_counter_ != nullptr) {
    delete _impl_.weekly_counter_;
  }
  _impl_.weekly_counter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_arena_world_pos_ != nullptr) {
    delete _impl_.last_arena_world_pos_;
  }
  _impl_.last_arena_world_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.game_stats_ != nullptr) {
    delete _impl_.game_stats_;
  }
  _impl_.game_stats_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_all_arena_world_pos_ != nullptr) {
    delete _impl_.last_all_arena_world_pos_;
  }
  _impl_.last_all_arena_world_pos_ = nullptr;
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_all_arena_world_cfgid_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.last_all_arena_world_cfgid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.RoleData.role_name"));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CurrencyData currency_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_currency_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CultivationData physics_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_physics_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CultivationData magic_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_magic_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CultivationDirection cultivation_dir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cultivation_dir(static_cast<::idlepb::CultivationDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 last_exp_cycle_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.last_exp_cycle_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleDailyCounter daily_counter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_daily_counter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CharacterModelConfig model_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 last_world_cfgid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.last_world_cfgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.Vector3 last_world_pos = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_world_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 next_teleport_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.next_teleport_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 last_unlock_arena_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.last_unlock_arena_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 combat_power = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.combat_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 login_count = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.login_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 unlocked_modules = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unlocked_modules(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 144) {
          _internal_add_unlocked_modules(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 create_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.PillPropertyData pill_property_data = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pill_property_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleFightModeData fight_mode = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_fight_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qi_collector_rank = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.qi_collector_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleNormalSettings normal_settings = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offline_time = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.offline_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleWeeklyCounter weekly_counter = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_weekly_counter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 last_arena_world_cfgid = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.last_arena_world_cfgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.Vector3 last_arena_world_pos = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_arena_world_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GameStatsData game_stats = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 last_all_arena_world_cfgid = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.last_all_arena_world_cfgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.Vector3 last_all_arena_world_pos = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_all_arena_world_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 role_id = 2;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // string role_name = 3;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.RoleData.role_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_role_name(), target);
  }

  // .idlepb.CurrencyData currency_data = 4;
  if (this->_internal_has_currency_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::currency_data(this),
        _Internal::currency_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.CultivationData physics_data = 5;
  if (this->_internal_has_physics_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::physics_data(this),
        _Internal::physics_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.CultivationData magic_data = 6;
  if (this->_internal_has_magic_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::magic_data(this),
        _Internal::magic_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.CultivationDirection cultivation_dir = 7;
  if (this->_internal_cultivation_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_cultivation_dir(), target);
  }

  // int64 last_exp_cycle_timestamp = 8;
  if (this->_internal_last_exp_cycle_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_last_exp_cycle_timestamp(), target);
  }

  // .idlepb.RoleDailyCounter daily_counter = 9;
  if (this->_internal_has_daily_counter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::daily_counter(this),
        _Internal::daily_counter(this).GetCachedSize(), target, stream);
  }

  // .idlepb.CharacterModelConfig model_config = 10;
  if (this->_internal_has_model_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::model_config(this),
        _Internal::model_config(this).GetCachedSize(), target, stream);
  }

  // int32 last_world_cfgid = 11;
  if (this->_internal_last_world_cfgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_last_world_cfgid(), target);
  }

  // .idlepb.Vector3 last_world_pos = 12;
  if (this->_internal_has_last_world_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::last_world_pos(this),
        _Internal::last_world_pos(this).GetCachedSize(), target, stream);
  }

  // int64 next_teleport_time = 14;
  if (this->_internal_next_teleport_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_next_teleport_time(), target);
  }

  // int32 last_unlock_arena_id = 15;
  if (this->_internal_last_unlock_arena_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_last_unlock_arena_id(), target);
  }

  // int64 combat_power = 16;
  if (this->_internal_combat_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_combat_power(), target);
  }

  // int32 login_count = 17;
  if (this->_internal_login_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_login_count(), target);
  }

  // repeated int32 unlocked_modules = 18;
  {
    int byte_size = _impl_._unlocked_modules_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          18, _internal_unlocked_modules(), byte_size, target);
    }
  }

  // int64 create_time = 19;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_create_time(), target);
  }

  // repeated .idlepb.PillPropertyData pill_property_data = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pill_property_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_pill_property_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .idlepb.RoleFightModeData fight_mode = 22;
  if (this->_internal_has_fight_mode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::fight_mode(this),
        _Internal::fight_mode(this).GetCachedSize(), target, stream);
  }

  // int32 qi_collector_rank = 23;
  if (this->_internal_qi_collector_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_qi_collector_rank(), target);
  }

  // .idlepb.RoleNormalSettings normal_settings = 26;
  if (this->_internal_has_normal_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::normal_settings(this),
        _Internal::normal_settings(this).GetCachedSize(), target, stream);
  }

  // int64 offline_time = 27;
  if (this->_internal_offline_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(27, this->_internal_offline_time(), target);
  }

  // .idlepb.RoleWeeklyCounter weekly_counter = 28;
  if (this->_internal_has_weekly_counter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::weekly_counter(this),
        _Internal::weekly_counter(this).GetCachedSize(), target, stream);
  }

  // int32 last_arena_world_cfgid = 29;
  if (this->_internal_last_arena_world_cfgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_last_arena_world_cfgid(), target);
  }

  // .idlepb.Vector3 last_arena_world_pos = 30;
  if (this->_internal_has_last_arena_world_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::last_arena_world_pos(this),
        _Internal::last_arena_world_pos(this).GetCachedSize(), target, stream);
  }

  // .idlepb.GameStatsData game_stats = 31;
  if (this->_internal_has_game_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::game_stats(this),
        _Internal::game_stats(this).GetCachedSize(), target, stream);
  }

  // int32 last_all_arena_world_cfgid = 32;
  if (this->_internal_last_all_arena_world_cfgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_last_all_arena_world_cfgid(), target);
  }

  // .idlepb.Vector3 last_all_arena_world_pos = 33;
  if (this->_internal_has_last_all_arena_world_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::last_all_arena_world_pos(this),
        _Internal::last_all_arena_world_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleData)
  return target;
}

size_t RoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 unlocked_modules = 18;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.unlocked_modules_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._unlocked_modules_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .idlepb.PillPropertyData pill_property_data = 21;
  total_size += 2UL * this->_internal_pill_property_data_size();
  for (const auto& msg : this->_impl_.pill_property_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string role_name = 3;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .idlepb.CurrencyData currency_data = 4;
  if (this->_internal_has_currency_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.currency_data_);
  }

  // .idlepb.CultivationData physics_data = 5;
  if (this->_internal_has_physics_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.physics_data_);
  }

  // .idlepb.CultivationData magic_data = 6;
  if (this->_internal_has_magic_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.magic_data_);
  }

  // .idlepb.RoleDailyCounter daily_counter = 9;
  if (this->_internal_has_daily_counter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.daily_counter_);
  }

  // .idlepb.CharacterModelConfig model_config = 10;
  if (this->_internal_has_model_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_config_);
  }

  // .idlepb.Vector3 last_world_pos = 12;
  if (this->_internal_has_last_world_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_world_pos_);
  }

  // .idlepb.RoleFightModeData fight_mode = 22;
  if (this->_internal_has_fight_mode()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fight_mode_);
  }

  // .idlepb.RoleNormalSettings normal_settings = 26;
  if (this->_internal_has_normal_settings()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.normal_settings_);
  }

  // .idlepb.RoleWeeklyCounter weekly_counter = 28;
  if (this->_internal_has_weekly_counter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weekly_counter_);
  }

  // .idlepb.Vector3 last_arena_world_pos = 30;
  if (this->_internal_has_last_arena_world_pos()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_arena_world_pos_);
  }

  // .idlepb.GameStatsData game_stats = 31;
  if (this->_internal_has_game_stats()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_stats_);
  }

  // .idlepb.Vector3 last_all_arena_world_pos = 33;
  if (this->_internal_has_last_all_arena_world_pos()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_all_arena_world_pos_);
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 role_id = 2;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
  }

  // int64 last_exp_cycle_timestamp = 8;
  if (this->_internal_last_exp_cycle_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_exp_cycle_timestamp());
  }

  // .idlepb.CultivationDirection cultivation_dir = 7;
  if (this->_internal_cultivation_dir() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cultivation_dir());
  }

  // int32 last_world_cfgid = 11;
  if (this->_internal_last_world_cfgid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_world_cfgid());
  }

  // int64 next_teleport_time = 14;
  if (this->_internal_next_teleport_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_teleport_time());
  }

  // int64 combat_power = 16;
  if (this->_internal_combat_power() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_combat_power());
  }

  // int32 last_unlock_arena_id = 15;
  if (this->_internal_last_unlock_arena_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_unlock_arena_id());
  }

  // int32 login_count = 17;
  if (this->_internal_login_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_login_count());
  }

  // int64 create_time = 19;
  if (this->_internal_create_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_create_time());
  }

  // int32 qi_collector_rank = 23;
  if (this->_internal_qi_collector_rank() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_qi_collector_rank());
  }

  // int32 last_arena_world_cfgid = 29;
  if (this->_internal_last_arena_world_cfgid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_last_arena_world_cfgid());
  }

  // int64 offline_time = 27;
  if (this->_internal_offline_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_offline_time());
  }

  // int32 last_all_arena_world_cfgid = 32;
  if (this->_internal_last_all_arena_world_cfgid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_last_all_arena_world_cfgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleData::GetClassData() const { return &_class_data_; }


void RoleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleData*>(&to_msg);
  auto& from = static_cast<const RoleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unlocked_modules_.MergeFrom(from._impl_.unlocked_modules_);
  _this->_impl_.pill_property_data_.MergeFrom(from._impl_.pill_property_data_);
  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (from._internal_has_currency_data()) {
    _this->_internal_mutable_currency_data()->::idlepb::CurrencyData::MergeFrom(
        from._internal_currency_data());
  }
  if (from._internal_has_physics_data()) {
    _this->_internal_mutable_physics_data()->::idlepb::CultivationData::MergeFrom(
        from._internal_physics_data());
  }
  if (from._internal_has_magic_data()) {
    _this->_internal_mutable_magic_data()->::idlepb::CultivationData::MergeFrom(
        from._internal_magic_data());
  }
  if (from._internal_has_daily_counter()) {
    _this->_internal_mutable_daily_counter()->::idlepb::RoleDailyCounter::MergeFrom(
        from._internal_daily_counter());
  }
  if (from._internal_has_model_config()) {
    _this->_internal_mutable_model_config()->::idlepb::CharacterModelConfig::MergeFrom(
        from._internal_model_config());
  }
  if (from._internal_has_last_world_pos()) {
    _this->_internal_mutable_last_world_pos()->::idlepb::Vector3::MergeFrom(
        from._internal_last_world_pos());
  }
  if (from._internal_has_fight_mode()) {
    _this->_internal_mutable_fight_mode()->::idlepb::RoleFightModeData::MergeFrom(
        from._internal_fight_mode());
  }
  if (from._internal_has_normal_settings()) {
    _this->_internal_mutable_normal_settings()->::idlepb::RoleNormalSettings::MergeFrom(
        from._internal_normal_settings());
  }
  if (from._internal_has_weekly_counter()) {
    _this->_internal_mutable_weekly_counter()->::idlepb::RoleWeeklyCounter::MergeFrom(
        from._internal_weekly_counter());
  }
  if (from._internal_has_last_arena_world_pos()) {
    _this->_internal_mutable_last_arena_world_pos()->::idlepb::Vector3::MergeFrom(
        from._internal_last_arena_world_pos());
  }
  if (from._internal_has_game_stats()) {
    _this->_internal_mutable_game_stats()->::idlepb::GameStatsData::MergeFrom(
        from._internal_game_stats());
  }
  if (from._internal_has_last_all_arena_world_pos()) {
    _this->_internal_mutable_last_all_arena_world_pos()->::idlepb::Vector3::MergeFrom(
        from._internal_last_all_arena_world_pos());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_last_exp_cycle_timestamp() != 0) {
    _this->_internal_set_last_exp_cycle_timestamp(from._internal_last_exp_cycle_timestamp());
  }
  if (from._internal_cultivation_dir() != 0) {
    _this->_internal_set_cultivation_dir(from._internal_cultivation_dir());
  }
  if (from._internal_last_world_cfgid() != 0) {
    _this->_internal_set_last_world_cfgid(from._internal_last_world_cfgid());
  }
  if (from._internal_next_teleport_time() != 0) {
    _this->_internal_set_next_teleport_time(from._internal_next_teleport_time());
  }
  if (from._internal_combat_power() != 0) {
    _this->_internal_set_combat_power(from._internal_combat_power());
  }
  if (from._internal_last_unlock_arena_id() != 0) {
    _this->_internal_set_last_unlock_arena_id(from._internal_last_unlock_arena_id());
  }
  if (from._internal_login_count() != 0) {
    _this->_internal_set_login_count(from._internal_login_count());
  }
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_qi_collector_rank() != 0) {
    _this->_internal_set_qi_collector_rank(from._internal_qi_collector_rank());
  }
  if (from._internal_last_arena_world_cfgid() != 0) {
    _this->_internal_set_last_arena_world_cfgid(from._internal_last_arena_world_cfgid());
  }
  if (from._internal_offline_time() != 0) {
    _this->_internal_set_offline_time(from._internal_offline_time());
  }
  if (from._internal_last_all_arena_world_cfgid() != 0) {
    _this->_internal_set_last_all_arena_world_cfgid(from._internal_last_all_arena_world_cfgid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleData::CopyFrom(const RoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleData::IsInitialized() const {
  return true;
}

void RoleData::InternalSwap(RoleData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.unlocked_modules_.InternalSwap(&other->_impl_.unlocked_modules_);
  _impl_.pill_property_data_.InternalSwap(&other->_impl_.pill_property_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleData, _impl_.last_all_arena_world_cfgid_)
      + sizeof(RoleData::_impl_.last_all_arena_world_cfgid_)
      - PROTOBUF_FIELD_OFFSET(RoleData, _impl_.currency_data_)>(
          reinterpret_cast<char*>(&_impl_.currency_data_),
          reinterpret_cast<char*>(&other->_impl_.currency_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[62]);
}

// ===================================================================

class SimpleAbilityData::_Internal {
 public:
};

SimpleAbilityData::SimpleAbilityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SimpleAbilityData)
}
SimpleAbilityData::SimpleAbilityData(const SimpleAbilityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleAbilityData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.grade_){}
    , decltype(_impl_.study_grade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.study_grade_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.study_grade_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SimpleAbilityData)
}

inline void SimpleAbilityData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.grade_){0}
    , decltype(_impl_.study_grade_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SimpleAbilityData::~SimpleAbilityData() {
  // @@protoc_insertion_point(destructor:idlepb.SimpleAbilityData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleAbilityData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimpleAbilityData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleAbilityData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SimpleAbilityData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.study_grade_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.study_grade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleAbilityData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 grade = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 study_grade = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.study_grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleAbilityData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SimpleAbilityData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 grade = 2;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_grade(), target);
  }

  // int32 study_grade = 3;
  if (this->_internal_study_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_study_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SimpleAbilityData)
  return target;
}

size_t SimpleAbilityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SimpleAbilityData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 grade = 2;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grade());
  }

  // int32 study_grade = 3;
  if (this->_internal_study_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_study_grade());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleAbilityData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleAbilityData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleAbilityData::GetClassData() const { return &_class_data_; }


void SimpleAbilityData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleAbilityData*>(&to_msg);
  auto& from = static_cast<const SimpleAbilityData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SimpleAbilityData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  if (from._internal_study_grade() != 0) {
    _this->_internal_set_study_grade(from._internal_study_grade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleAbilityData::CopyFrom(const SimpleAbilityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SimpleAbilityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleAbilityData::IsInitialized() const {
  return true;
}

void SimpleAbilityData::InternalSwap(SimpleAbilityData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleAbilityData, _impl_.study_grade_)
      + sizeof(SimpleAbilityData::_impl_.study_grade_)
      - PROTOBUF_FIELD_OFFSET(SimpleAbilityData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleAbilityData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[63]);
}

// ===================================================================

class SimpleGongFaData::_Internal {
 public:
};

SimpleGongFaData::SimpleGongFaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SimpleGongFaData)
}
SimpleGongFaData::SimpleGongFaData(const SimpleGongFaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleGongFaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.is_full_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_full_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_full_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SimpleGongFaData)
}

inline void SimpleGongFaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.is_full_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SimpleGongFaData::~SimpleGongFaData() {
  // @@protoc_insertion_point(destructor:idlepb.SimpleGongFaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleGongFaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimpleGongFaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleGongFaData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SimpleGongFaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_full_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_full_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleGongFaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_full = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleGongFaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SimpleGongFaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // bool is_full = 3;
  if (this->_internal_is_full() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_full(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SimpleGongFaData)
  return target;
}

size_t SimpleGongFaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SimpleGongFaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // bool is_full = 3;
  if (this->_internal_is_full() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleGongFaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleGongFaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleGongFaData::GetClassData() const { return &_class_data_; }


void SimpleGongFaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleGongFaData*>(&to_msg);
  auto& from = static_cast<const SimpleGongFaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SimpleGongFaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_is_full() != 0) {
    _this->_internal_set_is_full(from._internal_is_full());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleGongFaData::CopyFrom(const SimpleGongFaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SimpleGongFaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleGongFaData::IsInitialized() const {
  return true;
}

void SimpleGongFaData::InternalSwap(SimpleGongFaData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleGongFaData, _impl_.is_full_)
      + sizeof(SimpleGongFaData::_impl_.is_full_)
      - PROTOBUF_FIELD_OFFSET(SimpleGongFaData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleGongFaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[64]);
}

// ===================================================================

class RoleInfo::_Internal {
 public:
  static const ::idlepb::CharacterModelConfig& character_model(const RoleInfo* msg);
  static const ::idlepb::GameStatsAllModuleData& all_stats_data(const RoleInfo* msg);
};

const ::idlepb::CharacterModelConfig&
RoleInfo::_Internal::character_model(const RoleInfo* msg) {
  return *msg->_impl_.character_model_;
}
const ::idlepb::GameStatsAllModuleData&
RoleInfo::_Internal::all_stats_data(const RoleInfo* msg) {
  return *msg->_impl_.all_stats_data_;
}
RoleInfo::RoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleInfo)
}
RoleInfo::RoleInfo(const RoleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){from._impl_.title_}
    , /*decltype(_impl_._title_cached_byte_size_)*/{0}
    , decltype(_impl_.equipments_){from._impl_.equipments_}
    , decltype(_impl_.unlocked_equipment_slots_){from._impl_.unlocked_equipment_slots_}
    , /*decltype(_impl_._unlocked_equipment_slots_cached_byte_size_)*/{0}
    , decltype(_impl_.slotted_abilities_){from._impl_.slotted_abilities_}
    , decltype(_impl_.unslotted_abilities_){from._impl_.unslotted_abilities_}
    , decltype(_impl_.gong_fa_entries_){from._impl_.gong_fa_entries_}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.sept_name_){}
    , decltype(_impl_.character_model_){nullptr}
    , decltype(_impl_.all_stats_data_){nullptr}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.create_time_){}
    , decltype(_impl_.cultivation_main_dir_){}
    , decltype(_impl_.cultivation_main_rank_){}
    , decltype(_impl_.cultivation_second_dir_){}
    , decltype(_impl_.cultivation_second_rank_){}
    , decltype(_impl_.combat_power_){}
    , decltype(_impl_.sept_id_){}
    , decltype(_impl_.sept_position_){}
    , decltype(_impl_.sept_logo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sept_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sept_name().empty()) {
    _this->_impl_.sept_name_.Set(from._internal_sept_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_character_model()) {
    _this->_impl_.character_model_ = new ::idlepb::CharacterModelConfig(*from._impl_.character_model_);
  }
  if (from._internal_has_all_stats_data()) {
    _this->_impl_.all_stats_data_ = new ::idlepb::GameStatsAllModuleData(*from._impl_.all_stats_data_);
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sept_logo_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.sept_logo_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleInfo)
}

inline void RoleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){arena}
    , /*decltype(_impl_._title_cached_byte_size_)*/{0}
    , decltype(_impl_.equipments_){arena}
    , decltype(_impl_.unlocked_equipment_slots_){arena}
    , /*decltype(_impl_._unlocked_equipment_slots_cached_byte_size_)*/{0}
    , decltype(_impl_.slotted_abilities_){arena}
    , decltype(_impl_.unslotted_abilities_){arena}
    , decltype(_impl_.gong_fa_entries_){arena}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.sept_name_){}
    , decltype(_impl_.character_model_){nullptr}
    , decltype(_impl_.all_stats_data_){nullptr}
    , decltype(_impl_.user_id_){uint64_t{0u}}
    , decltype(_impl_.role_id_){uint64_t{0u}}
    , decltype(_impl_.create_time_){int64_t{0}}
    , decltype(_impl_.cultivation_main_dir_){0}
    , decltype(_impl_.cultivation_main_rank_){0}
    , decltype(_impl_.cultivation_second_dir_){0}
    , decltype(_impl_.cultivation_second_rank_){0}
    , decltype(_impl_.combat_power_){int64_t{0}}
    , decltype(_impl_.sept_id_){uint64_t{0u}}
    , decltype(_impl_.sept_position_){0}
    , decltype(_impl_.sept_logo_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sept_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleInfo::~RoleInfo() {
  // @@protoc_insertion_point(destructor:idlepb.RoleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.~RepeatedField();
  _impl_.equipments_.~RepeatedPtrField();
  _impl_.unlocked_equipment_slots_.~RepeatedField();
  _impl_.slotted_abilities_.~RepeatedPtrField();
  _impl_.unslotted_abilities_.~RepeatedPtrField();
  _impl_.gong_fa_entries_.~RepeatedPtrField();
  _impl_.role_name_.Destroy();
  _impl_.sept_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.character_model_;
  if (this != internal_default_instance()) delete _impl_.all_stats_data_;
}

void RoleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.Clear();
  _impl_.equipments_.Clear();
  _impl_.unlocked_equipment_slots_.Clear();
  _impl_.slotted_abilities_.Clear();
  _impl_.unslotted_abilities_.Clear();
  _impl_.gong_fa_entries_.Clear();
  _impl_.role_name_.ClearToEmpty();
  _impl_.sept_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.character_model_ != nullptr) {
    delete _impl_.character_model_;
  }
  _impl_.character_model_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.all_stats_data_ != nullptr) {
    delete _impl_.all_stats_data_;
  }
  _impl_.all_stats_data_ = nullptr;
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sept_logo_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.sept_logo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.RoleInfo.role_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 create_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CultivationDirection cultivation_main_dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cultivation_main_dir(static_cast<::idlepb::CultivationDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 cultivation_main_rank = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cultivation_main_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CultivationDirection cultivation_second_dir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cultivation_second_dir(static_cast<::idlepb::CultivationDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 cultivation_second_rank = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.cultivation_second_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CharacterModelConfig character_model = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 title = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_title(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_title(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 combat_power = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.combat_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ItemData equipments = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equipments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 unlocked_equipment_slots = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unlocked_equipment_slots(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_unlocked_equipment_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sept_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.sept_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.SeptPosition sept_position = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sept_position(static_cast<::idlepb::SeptPosition>(val));
        } else
          goto handle_unusual;
        continue;
      // string sept_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_sept_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.RoleInfo.sept_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 sept_logo = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.sept_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GameStatsAllModuleData all_stats_data = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_stats_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.SimpleAbilityData slotted_abilities = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_slotted_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.SimpleAbilityData unslotted_abilities = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_unslotted_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.SimpleGongFaData gong_fa_entries = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gong_fa_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 role_id = 2;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // string role_name = 3;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.RoleInfo.role_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_role_name(), target);
  }

  // int64 create_time = 4;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_create_time(), target);
  }

  // .idlepb.CultivationDirection cultivation_main_dir = 5;
  if (this->_internal_cultivation_main_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_cultivation_main_dir(), target);
  }

  // int32 cultivation_main_rank = 6;
  if (this->_internal_cultivation_main_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_cultivation_main_rank(), target);
  }

  // .idlepb.CultivationDirection cultivation_second_dir = 7;
  if (this->_internal_cultivation_second_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_cultivation_second_dir(), target);
  }

  // int32 cultivation_second_rank = 8;
  if (this->_internal_cultivation_second_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_cultivation_second_rank(), target);
  }

  // .idlepb.CharacterModelConfig character_model = 10;
  if (this->_internal_has_character_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::character_model(this),
        _Internal::character_model(this).GetCachedSize(), target, stream);
  }

  // repeated int32 title = 11;
  {
    int byte_size = _impl_._title_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          11, _internal_title(), byte_size, target);
    }
  }

  // int64 combat_power = 12;
  if (this->_internal_combat_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_combat_power(), target);
  }

  // repeated .idlepb.ItemData equipments = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equipments_size()); i < n; i++) {
    const auto& repfield = this->_internal_equipments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 unlocked_equipment_slots = 14;
  {
    int byte_size = _impl_._unlocked_equipment_slots_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          14, _internal_unlocked_equipment_slots(), byte_size, target);
    }
  }

  // uint64 sept_id = 15;
  if (this->_internal_sept_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_sept_id(), target);
  }

  // .idlepb.SeptPosition sept_position = 16;
  if (this->_internal_sept_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_sept_position(), target);
  }

  // string sept_name = 17;
  if (!this->_internal_sept_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sept_name().data(), static_cast<int>(this->_internal_sept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.RoleInfo.sept_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_sept_name(), target);
  }

  // int32 sept_logo = 18;
  if (this->_internal_sept_logo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_sept_logo(), target);
  }

  // .idlepb.GameStatsAllModuleData all_stats_data = 19;
  if (this->_internal_has_all_stats_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::all_stats_data(this),
        _Internal::all_stats_data(this).GetCachedSize(), target, stream);
  }

  // repeated .idlepb.SimpleAbilityData slotted_abilities = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slotted_abilities_size()); i < n; i++) {
    const auto& repfield = this->_internal_slotted_abilities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.SimpleAbilityData unslotted_abilities = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unslotted_abilities_size()); i < n; i++) {
    const auto& repfield = this->_internal_unslotted_abilities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.SimpleGongFaData gong_fa_entries = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gong_fa_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_gong_fa_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleInfo)
  return target;
}

size_t RoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 title = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.title_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._title_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .idlepb.ItemData equipments = 13;
  total_size += 1UL * this->_internal_equipments_size();
  for (const auto& msg : this->_impl_.equipments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 unlocked_equipment_slots = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.unlocked_equipment_slots_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._unlocked_equipment_slots_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .idlepb.SimpleAbilityData slotted_abilities = 20;
  total_size += 2UL * this->_internal_slotted_abilities_size();
  for (const auto& msg : this->_impl_.slotted_abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.SimpleAbilityData unslotted_abilities = 21;
  total_size += 2UL * this->_internal_unslotted_abilities_size();
  for (const auto& msg : this->_impl_.unslotted_abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.SimpleGongFaData gong_fa_entries = 22;
  total_size += 2UL * this->_internal_gong_fa_entries_size();
  for (const auto& msg : this->_impl_.gong_fa_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string role_name = 3;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // string sept_name = 17;
  if (!this->_internal_sept_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sept_name());
  }

  // .idlepb.CharacterModelConfig character_model = 10;
  if (this->_internal_has_character_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_model_);
  }

  // .idlepb.GameStatsAllModuleData all_stats_data = 19;
  if (this->_internal_has_all_stats_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.all_stats_data_);
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 role_id = 2;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
  }

  // int64 create_time = 4;
  if (this->_internal_create_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time());
  }

  // .idlepb.CultivationDirection cultivation_main_dir = 5;
  if (this->_internal_cultivation_main_dir() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cultivation_main_dir());
  }

  // int32 cultivation_main_rank = 6;
  if (this->_internal_cultivation_main_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cultivation_main_rank());
  }

  // .idlepb.CultivationDirection cultivation_second_dir = 7;
  if (this->_internal_cultivation_second_dir() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cultivation_second_dir());
  }

  // int32 cultivation_second_rank = 8;
  if (this->_internal_cultivation_second_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cultivation_second_rank());
  }

  // int64 combat_power = 12;
  if (this->_internal_combat_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_combat_power());
  }

  // uint64 sept_id = 15;
  if (this->_internal_sept_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sept_id());
  }

  // .idlepb.SeptPosition sept_position = 16;
  if (this->_internal_sept_position() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sept_position());
  }

  // int32 sept_logo = 18;
  if (this->_internal_sept_logo() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sept_logo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleInfo::GetClassData() const { return &_class_data_; }


void RoleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleInfo*>(&to_msg);
  auto& from = static_cast<const RoleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.title_.MergeFrom(from._impl_.title_);
  _this->_impl_.equipments_.MergeFrom(from._impl_.equipments_);
  _this->_impl_.unlocked_equipment_slots_.MergeFrom(from._impl_.unlocked_equipment_slots_);
  _this->_impl_.slotted_abilities_.MergeFrom(from._impl_.slotted_abilities_);
  _this->_impl_.unslotted_abilities_.MergeFrom(from._impl_.unslotted_abilities_);
  _this->_impl_.gong_fa_entries_.MergeFrom(from._impl_.gong_fa_entries_);
  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (!from._internal_sept_name().empty()) {
    _this->_internal_set_sept_name(from._internal_sept_name());
  }
  if (from._internal_has_character_model()) {
    _this->_internal_mutable_character_model()->::idlepb::CharacterModelConfig::MergeFrom(
        from._internal_character_model());
  }
  if (from._internal_has_all_stats_data()) {
    _this->_internal_mutable_all_stats_data()->::idlepb::GameStatsAllModuleData::MergeFrom(
        from._internal_all_stats_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_cultivation_main_dir() != 0) {
    _this->_internal_set_cultivation_main_dir(from._internal_cultivation_main_dir());
  }
  if (from._internal_cultivation_main_rank() != 0) {
    _this->_internal_set_cultivation_main_rank(from._internal_cultivation_main_rank());
  }
  if (from._internal_cultivation_second_dir() != 0) {
    _this->_internal_set_cultivation_second_dir(from._internal_cultivation_second_dir());
  }
  if (from._internal_cultivation_second_rank() != 0) {
    _this->_internal_set_cultivation_second_rank(from._internal_cultivation_second_rank());
  }
  if (from._internal_combat_power() != 0) {
    _this->_internal_set_combat_power(from._internal_combat_power());
  }
  if (from._internal_sept_id() != 0) {
    _this->_internal_set_sept_id(from._internal_sept_id());
  }
  if (from._internal_sept_position() != 0) {
    _this->_internal_set_sept_position(from._internal_sept_position());
  }
  if (from._internal_sept_logo() != 0) {
    _this->_internal_set_sept_logo(from._internal_sept_logo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleInfo::CopyFrom(const RoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfo::IsInitialized() const {
  return true;
}

void RoleInfo::InternalSwap(RoleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.title_.InternalSwap(&other->_impl_.title_);
  _impl_.equipments_.InternalSwap(&other->_impl_.equipments_);
  _impl_.unlocked_equipment_slots_.InternalSwap(&other->_impl_.unlocked_equipment_slots_);
  _impl_.slotted_abilities_.InternalSwap(&other->_impl_.slotted_abilities_);
  _impl_.unslotted_abilities_.InternalSwap(&other->_impl_.unslotted_abilities_);
  _impl_.gong_fa_entries_.InternalSwap(&other->_impl_.gong_fa_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sept_name_, lhs_arena,
      &other->_impl_.sept_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleInfo, _impl_.sept_logo_)
      + sizeof(RoleInfo::_impl_.sept_logo_)
      - PROTOBUF_FIELD_OFFSET(RoleInfo, _impl_.character_model_)>(
          reinterpret_cast<char*>(&_impl_.character_model_),
          reinterpret_cast<char*>(&other->_impl_.character_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[65]);
}

// ===================================================================

class RoleInventoryData::_Internal {
 public:
};

RoleInventoryData::RoleInventoryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleInventoryData)
}
RoleInventoryData::RoleInventoryData(const RoleInventoryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleInventoryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.unlocked_equipment_slots_){from._impl_.unlocked_equipment_slots_}
    , /*decltype(_impl_._unlocked_equipment_slots_cached_byte_size_)*/{0}
    , decltype(_impl_.next_item_id_){}
    , decltype(_impl_.hp_pill_cooldown_expire_time_){}
    , decltype(_impl_.mp_pill_cooldown_expire_time_){}
    , decltype(_impl_.inventory_space_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.next_item_id_, &from._impl_.next_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inventory_space_num_) -
    reinterpret_cast<char*>(&_impl_.next_item_id_)) + sizeof(_impl_.inventory_space_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleInventoryData)
}

inline void RoleInventoryData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.unlocked_equipment_slots_){arena}
    , /*decltype(_impl_._unlocked_equipment_slots_cached_byte_size_)*/{0}
    , decltype(_impl_.next_item_id_){int64_t{0}}
    , decltype(_impl_.hp_pill_cooldown_expire_time_){int64_t{0}}
    , decltype(_impl_.mp_pill_cooldown_expire_time_){int64_t{0}}
    , decltype(_impl_.inventory_space_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleInventoryData::~RoleInventoryData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleInventoryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleInventoryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.unlocked_equipment_slots_.~RepeatedField();
}

void RoleInventoryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleInventoryData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleInventoryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.unlocked_equipment_slots_.Clear();
  ::memset(&_impl_.next_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.inventory_space_num_) -
      reinterpret_cast<char*>(&_impl_.next_item_id_)) + sizeof(_impl_.inventory_space_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleInventoryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 next_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.next_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ItemData items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 hp_pill_cooldown_expire_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hp_pill_cooldown_expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 mp_pill_cooldown_expire_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.mp_pill_cooldown_expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 unlocked_equipment_slots = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unlocked_equipment_slots(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_unlocked_equipment_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inventory_space_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.inventory_space_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleInventoryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleInventoryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 next_item_id = 2;
  if (this->_internal_next_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_next_item_id(), target);
  }

  // repeated .idlepb.ItemData items = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 hp_pill_cooldown_expire_time = 4;
  if (this->_internal_hp_pill_cooldown_expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_hp_pill_cooldown_expire_time(), target);
  }

  // int64 mp_pill_cooldown_expire_time = 5;
  if (this->_internal_mp_pill_cooldown_expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_mp_pill_cooldown_expire_time(), target);
  }

  // repeated int32 unlocked_equipment_slots = 6;
  {
    int byte_size = _impl_._unlocked_equipment_slots_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_unlocked_equipment_slots(), byte_size, target);
    }
  }

  // int32 inventory_space_num = 7;
  if (this->_internal_inventory_space_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_inventory_space_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleInventoryData)
  return target;
}

size_t RoleInventoryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleInventoryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ItemData items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 unlocked_equipment_slots = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.unlocked_equipment_slots_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._unlocked_equipment_slots_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 next_item_id = 2;
  if (this->_internal_next_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_item_id());
  }

  // int64 hp_pill_cooldown_expire_time = 4;
  if (this->_internal_hp_pill_cooldown_expire_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_hp_pill_cooldown_expire_time());
  }

  // int64 mp_pill_cooldown_expire_time = 5;
  if (this->_internal_mp_pill_cooldown_expire_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mp_pill_cooldown_expire_time());
  }

  // int32 inventory_space_num = 7;
  if (this->_internal_inventory_space_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inventory_space_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleInventoryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleInventoryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleInventoryData::GetClassData() const { return &_class_data_; }


void RoleInventoryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleInventoryData*>(&to_msg);
  auto& from = static_cast<const RoleInventoryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleInventoryData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_impl_.unlocked_equipment_slots_.MergeFrom(from._impl_.unlocked_equipment_slots_);
  if (from._internal_next_item_id() != 0) {
    _this->_internal_set_next_item_id(from._internal_next_item_id());
  }
  if (from._internal_hp_pill_cooldown_expire_time() != 0) {
    _this->_internal_set_hp_pill_cooldown_expire_time(from._internal_hp_pill_cooldown_expire_time());
  }
  if (from._internal_mp_pill_cooldown_expire_time() != 0) {
    _this->_internal_set_mp_pill_cooldown_expire_time(from._internal_mp_pill_cooldown_expire_time());
  }
  if (from._internal_inventory_space_num() != 0) {
    _this->_internal_set_inventory_space_num(from._internal_inventory_space_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleInventoryData::CopyFrom(const RoleInventoryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleInventoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInventoryData::IsInitialized() const {
  return true;
}

void RoleInventoryData::InternalSwap(RoleInventoryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  _impl_.unlocked_equipment_slots_.InternalSwap(&other->_impl_.unlocked_equipment_slots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleInventoryData, _impl_.inventory_space_num_)
      + sizeof(RoleInventoryData::_impl_.inventory_space_num_)
      - PROTOBUF_FIELD_OFFSET(RoleInventoryData, _impl_.next_item_id_)>(
          reinterpret_cast<char*>(&_impl_.next_item_id_),
          reinterpret_cast<char*>(&other->_impl_.next_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleInventoryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[66]);
}

// ===================================================================

class RoleTemporaryPackageData::_Internal {
 public:
};

RoleTemporaryPackageData::RoleTemporaryPackageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleTemporaryPackageData)
}
RoleTemporaryPackageData::RoleTemporaryPackageData(const RoleTemporaryPackageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleTemporaryPackageData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.last_extract_time_){}
    , decltype(_impl_.next_item_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.last_extract_time_, &from._impl_.last_extract_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.next_item_id_) -
    reinterpret_cast<char*>(&_impl_.last_extract_time_)) + sizeof(_impl_.next_item_id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleTemporaryPackageData)
}

inline void RoleTemporaryPackageData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.last_extract_time_){int64_t{0}}
    , decltype(_impl_.next_item_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleTemporaryPackageData::~RoleTemporaryPackageData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleTemporaryPackageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleTemporaryPackageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RoleTemporaryPackageData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleTemporaryPackageData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleTemporaryPackageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.last_extract_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.next_item_id_) -
      reinterpret_cast<char*>(&_impl_.last_extract_time_)) + sizeof(_impl_.next_item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleTemporaryPackageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.TemporaryPackageItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 last_extract_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.last_extract_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 next_item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.next_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleTemporaryPackageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleTemporaryPackageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.TemporaryPackageItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 last_extract_time = 2;
  if (this->_internal_last_extract_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_extract_time(), target);
  }

  // int64 next_item_id = 3;
  if (this->_internal_next_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_next_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleTemporaryPackageData)
  return target;
}

size_t RoleTemporaryPackageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleTemporaryPackageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.TemporaryPackageItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 last_extract_time = 2;
  if (this->_internal_last_extract_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_extract_time());
  }

  // int64 next_item_id = 3;
  if (this->_internal_next_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleTemporaryPackageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleTemporaryPackageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleTemporaryPackageData::GetClassData() const { return &_class_data_; }


void RoleTemporaryPackageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleTemporaryPackageData*>(&to_msg);
  auto& from = static_cast<const RoleTemporaryPackageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleTemporaryPackageData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_last_extract_time() != 0) {
    _this->_internal_set_last_extract_time(from._internal_last_extract_time());
  }
  if (from._internal_next_item_id() != 0) {
    _this->_internal_set_next_item_id(from._internal_next_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleTemporaryPackageData::CopyFrom(const RoleTemporaryPackageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleTemporaryPackageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTemporaryPackageData::IsInitialized() const {
  return true;
}

void RoleTemporaryPackageData::InternalSwap(RoleTemporaryPackageData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleTemporaryPackageData, _impl_.next_item_id_)
      + sizeof(RoleTemporaryPackageData::_impl_.next_item_id_)
      - PROTOBUF_FIELD_OFFSET(RoleTemporaryPackageData, _impl_.last_extract_time_)>(
          reinterpret_cast<char*>(&_impl_.last_extract_time_),
          reinterpret_cast<char*>(&other->_impl_.last_extract_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleTemporaryPackageData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[67]);
}

// ===================================================================

class RoleArenaExplorationStatisticalData::_Internal {
 public:
};

RoleArenaExplorationStatisticalData::RoleArenaExplorationStatisticalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleArenaExplorationStatisticalData)
}
RoleArenaExplorationStatisticalData::RoleArenaExplorationStatisticalData(const RoleArenaExplorationStatisticalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleArenaExplorationStatisticalData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleArenaExplorationStatisticalData)
}

inline void RoleArenaExplorationStatisticalData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleArenaExplorationStatisticalData::~RoleArenaExplorationStatisticalData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleArenaExplorationStatisticalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleArenaExplorationStatisticalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RoleArenaExplorationStatisticalData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleArenaExplorationStatisticalData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleArenaExplorationStatisticalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleArenaExplorationStatisticalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.ArenaExplorationStatisticalItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleArenaExplorationStatisticalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleArenaExplorationStatisticalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.ArenaExplorationStatisticalItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleArenaExplorationStatisticalData)
  return target;
}

size_t RoleArenaExplorationStatisticalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleArenaExplorationStatisticalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ArenaExplorationStatisticalItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleArenaExplorationStatisticalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleArenaExplorationStatisticalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleArenaExplorationStatisticalData::GetClassData() const { return &_class_data_; }


void RoleArenaExplorationStatisticalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleArenaExplorationStatisticalData*>(&to_msg);
  auto& from = static_cast<const RoleArenaExplorationStatisticalData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleArenaExplorationStatisticalData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleArenaExplorationStatisticalData::CopyFrom(const RoleArenaExplorationStatisticalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleArenaExplorationStatisticalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleArenaExplorationStatisticalData::IsInitialized() const {
  return true;
}

void RoleArenaExplorationStatisticalData::InternalSwap(RoleArenaExplorationStatisticalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleArenaExplorationStatisticalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[68]);
}

// ===================================================================

class QuestProgress::_Internal {
 public:
};

QuestProgress::QuestProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.QuestProgress)
}
QuestProgress::QuestProgress(const QuestProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuestProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.progress_){from._impl_.progress_}
    , /*decltype(_impl_._progress_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:idlepb.QuestProgress)
}

inline void QuestProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.progress_){arena}
    , /*decltype(_impl_._progress_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuestProgress::~QuestProgress() {
  // @@protoc_insertion_point(destructor:idlepb.QuestProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuestProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.progress_.~RepeatedField();
}

void QuestProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuestProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.QuestProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.progress_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuestProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_progress(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_progress(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuestProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.QuestProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated int32 progress = 2;
  {
    int byte_size = _impl_._progress_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_progress(), byte_size, target);
    }
  }

  // int32 state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.QuestProgress)
  return target;
}

size_t QuestProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.QuestProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 progress = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.progress_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._progress_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 state = 3;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuestProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuestProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuestProgress::GetClassData() const { return &_class_data_; }


void QuestProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuestProgress*>(&to_msg);
  auto& from = static_cast<const QuestProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.QuestProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.progress_.MergeFrom(from._impl_.progress_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuestProgress::CopyFrom(const QuestProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.QuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestProgress::IsInitialized() const {
  return true;
}

void QuestProgress::InternalSwap(QuestProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.progress_.InternalSwap(&other->_impl_.progress_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuestProgress, _impl_.state_)
      + sizeof(QuestProgress::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(QuestProgress, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuestProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[69]);
}

// ===================================================================

class RoleQuestData::_Internal {
 public:
};

RoleQuestData::RoleQuestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleQuestData)
}
RoleQuestData::RoleQuestData(const RoleQuestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleQuestData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accepted_quests_){from._impl_.accepted_quests_}
    , /*decltype(_impl_._accepted_quests_cached_byte_size_)*/{0}
    , decltype(_impl_.finished_quests_){from._impl_.finished_quests_}
    , /*decltype(_impl_._finished_quests_cached_byte_size_)*/{0}
    , decltype(_impl_.quests_progress_){from._impl_.quests_progress_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleQuestData)
}

inline void RoleQuestData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accepted_quests_){arena}
    , /*decltype(_impl_._accepted_quests_cached_byte_size_)*/{0}
    , decltype(_impl_.finished_quests_){arena}
    , /*decltype(_impl_._finished_quests_cached_byte_size_)*/{0}
    , decltype(_impl_.quests_progress_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleQuestData::~RoleQuestData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleQuestData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleQuestData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accepted_quests_.~RepeatedField();
  _impl_.finished_quests_.~RepeatedField();
  _impl_.quests_progress_.~RepeatedPtrField();
}

void RoleQuestData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleQuestData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleQuestData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accepted_quests_.Clear();
  _impl_.finished_quests_.Clear();
  _impl_.quests_progress_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleQuestData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 accepted_quests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_accepted_quests(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_accepted_quests(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 finished_quests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_finished_quests(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_finished_quests(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.QuestProgress quests_progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quests_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleQuestData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleQuestData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 accepted_quests = 1;
  {
    int byte_size = _impl_._accepted_quests_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_accepted_quests(), byte_size, target);
    }
  }

  // repeated int32 finished_quests = 2;
  {
    int byte_size = _impl_._finished_quests_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_finished_quests(), byte_size, target);
    }
  }

  // repeated .idlepb.QuestProgress quests_progress = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quests_progress_size()); i < n; i++) {
    const auto& repfield = this->_internal_quests_progress(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleQuestData)
  return target;
}

size_t RoleQuestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleQuestData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 accepted_quests = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.accepted_quests_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._accepted_quests_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 finished_quests = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.finished_quests_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._finished_quests_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .idlepb.QuestProgress quests_progress = 3;
  total_size += 1UL * this->_internal_quests_progress_size();
  for (const auto& msg : this->_impl_.quests_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleQuestData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleQuestData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleQuestData::GetClassData() const { return &_class_data_; }


void RoleQuestData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleQuestData*>(&to_msg);
  auto& from = static_cast<const RoleQuestData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleQuestData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accepted_quests_.MergeFrom(from._impl_.accepted_quests_);
  _this->_impl_.finished_quests_.MergeFrom(from._impl_.finished_quests_);
  _this->_impl_.quests_progress_.MergeFrom(from._impl_.quests_progress_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleQuestData::CopyFrom(const RoleQuestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleQuestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleQuestData::IsInitialized() const {
  return true;
}

void RoleQuestData::InternalSwap(RoleQuestData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accepted_quests_.InternalSwap(&other->_impl_.accepted_quests_);
  _impl_.finished_quests_.InternalSwap(&other->_impl_.finished_quests_);
  _impl_.quests_progress_.InternalSwap(&other->_impl_.quests_progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleQuestData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[70]);
}

// ===================================================================

class RoleShopData::_Internal {
 public:
};

RoleShopData::RoleShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleShopData)
}
RoleShopData::RoleShopData(const RoleShopData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleShopData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.last_auto_refresh_time_){}
    , decltype(_impl_.today_manual_refresh_num_){}
    , decltype(_impl_.guarantee_refresh_num_){}
    , decltype(_impl_.last_reset_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.last_auto_refresh_time_, &from._impl_.last_auto_refresh_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_reset_time_) -
    reinterpret_cast<char*>(&_impl_.last_auto_refresh_time_)) + sizeof(_impl_.last_reset_time_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleShopData)
}

inline void RoleShopData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.last_auto_refresh_time_){int64_t{0}}
    , decltype(_impl_.today_manual_refresh_num_){0}
    , decltype(_impl_.guarantee_refresh_num_){0}
    , decltype(_impl_.last_reset_time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleShopData::~RoleShopData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleShopData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleShopData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RoleShopData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleShopData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleShopData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.last_auto_refresh_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_reset_time_) -
      reinterpret_cast<char*>(&_impl_.last_auto_refresh_time_)) + sizeof(_impl_.last_reset_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleShopData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.ShopItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 today_manual_refresh_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.today_manual_refresh_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_auto_refresh_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_auto_refresh_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_reset_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.last_reset_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 guarantee_refresh_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.guarantee_refresh_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleShopData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleShopData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.ShopItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 today_manual_refresh_num = 3;
  if (this->_internal_today_manual_refresh_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_today_manual_refresh_num(), target);
  }

  // int64 last_auto_refresh_time = 4;
  if (this->_internal_last_auto_refresh_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_auto_refresh_time(), target);
  }

  // int64 last_reset_time = 5;
  if (this->_internal_last_reset_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_last_reset_time(), target);
  }

  // int32 guarantee_refresh_num = 6;
  if (this->_internal_guarantee_refresh_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_guarantee_refresh_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleShopData)
  return target;
}

size_t RoleShopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleShopData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ShopItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 last_auto_refresh_time = 4;
  if (this->_internal_last_auto_refresh_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_auto_refresh_time());
  }

  // int32 today_manual_refresh_num = 3;
  if (this->_internal_today_manual_refresh_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_today_manual_refresh_num());
  }

  // int32 guarantee_refresh_num = 6;
  if (this->_internal_guarantee_refresh_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_guarantee_refresh_num());
  }

  // int64 last_reset_time = 5;
  if (this->_internal_last_reset_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleShopData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleShopData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleShopData::GetClassData() const { return &_class_data_; }


void RoleShopData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleShopData*>(&to_msg);
  auto& from = static_cast<const RoleShopData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleShopData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_last_auto_refresh_time() != 0) {
    _this->_internal_set_last_auto_refresh_time(from._internal_last_auto_refresh_time());
  }
  if (from._internal_today_manual_refresh_num() != 0) {
    _this->_internal_set_today_manual_refresh_num(from._internal_today_manual_refresh_num());
  }
  if (from._internal_guarantee_refresh_num() != 0) {
    _this->_internal_set_guarantee_refresh_num(from._internal_guarantee_refresh_num());
  }
  if (from._internal_last_reset_time() != 0) {
    _this->_internal_set_last_reset_time(from._internal_last_reset_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleShopData::CopyFrom(const RoleShopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleShopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleShopData::IsInitialized() const {
  return true;
}

void RoleShopData::InternalSwap(RoleShopData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleShopData, _impl_.last_reset_time_)
      + sizeof(RoleShopData::_impl_.last_reset_time_)
      - PROTOBUF_FIELD_OFFSET(RoleShopData, _impl_.last_auto_refresh_time_)>(
          reinterpret_cast<char*>(&_impl_.last_auto_refresh_time_),
          reinterpret_cast<char*>(&other->_impl_.last_auto_refresh_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleShopData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[71]);
}

// ===================================================================

class RoleDeluxeShopData::_Internal {
 public:
};

RoleDeluxeShopData::RoleDeluxeShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleDeluxeShopData)
}
RoleDeluxeShopData::RoleDeluxeShopData(const RoleDeluxeShopData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleDeluxeShopData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.today_manual_refresh_num_item_){}
    , decltype(_impl_.today_manual_refresh_num_gold_){}
    , decltype(_impl_.last_auto_refresh_time_){}
    , decltype(_impl_.last_reset_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.today_manual_refresh_num_item_, &from._impl_.today_manual_refresh_num_item_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_reset_time_) -
    reinterpret_cast<char*>(&_impl_.today_manual_refresh_num_item_)) + sizeof(_impl_.last_reset_time_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleDeluxeShopData)
}

inline void RoleDeluxeShopData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.today_manual_refresh_num_item_){0}
    , decltype(_impl_.today_manual_refresh_num_gold_){0}
    , decltype(_impl_.last_auto_refresh_time_){int64_t{0}}
    , decltype(_impl_.last_reset_time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleDeluxeShopData::~RoleDeluxeShopData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleDeluxeShopData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleDeluxeShopData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RoleDeluxeShopData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleDeluxeShopData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleDeluxeShopData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.today_manual_refresh_num_item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_reset_time_) -
      reinterpret_cast<char*>(&_impl_.today_manual_refresh_num_item_)) + sizeof(_impl_.last_reset_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDeluxeShopData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.DeluxeShopItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 today_manual_refresh_num_item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.today_manual_refresh_num_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 today_manual_refresh_num_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.today_manual_refresh_num_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_auto_refresh_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.last_auto_refresh_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_reset_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.last_reset_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleDeluxeShopData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleDeluxeShopData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.DeluxeShopItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 today_manual_refresh_num_item = 3;
  if (this->_internal_today_manual_refresh_num_item() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_today_manual_refresh_num_item(), target);
  }

  // int32 today_manual_refresh_num_gold = 4;
  if (this->_internal_today_manual_refresh_num_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_today_manual_refresh_num_gold(), target);
  }

  // int64 last_auto_refresh_time = 5;
  if (this->_internal_last_auto_refresh_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_last_auto_refresh_time(), target);
  }

  // int64 last_reset_time = 6;
  if (this->_internal_last_reset_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_last_reset_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleDeluxeShopData)
  return target;
}

size_t RoleDeluxeShopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleDeluxeShopData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.DeluxeShopItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 today_manual_refresh_num_item = 3;
  if (this->_internal_today_manual_refresh_num_item() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_today_manual_refresh_num_item());
  }

  // int32 today_manual_refresh_num_gold = 4;
  if (this->_internal_today_manual_refresh_num_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_today_manual_refresh_num_gold());
  }

  // int64 last_auto_refresh_time = 5;
  if (this->_internal_last_auto_refresh_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_auto_refresh_time());
  }

  // int64 last_reset_time = 6;
  if (this->_internal_last_reset_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleDeluxeShopData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleDeluxeShopData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleDeluxeShopData::GetClassData() const { return &_class_data_; }


void RoleDeluxeShopData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleDeluxeShopData*>(&to_msg);
  auto& from = static_cast<const RoleDeluxeShopData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleDeluxeShopData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_today_manual_refresh_num_item() != 0) {
    _this->_internal_set_today_manual_refresh_num_item(from._internal_today_manual_refresh_num_item());
  }
  if (from._internal_today_manual_refresh_num_gold() != 0) {
    _this->_internal_set_today_manual_refresh_num_gold(from._internal_today_manual_refresh_num_gold());
  }
  if (from._internal_last_auto_refresh_time() != 0) {
    _this->_internal_set_last_auto_refresh_time(from._internal_last_auto_refresh_time());
  }
  if (from._internal_last_reset_time() != 0) {
    _this->_internal_set_last_reset_time(from._internal_last_reset_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleDeluxeShopData::CopyFrom(const RoleDeluxeShopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleDeluxeShopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDeluxeShopData::IsInitialized() const {
  return true;
}

void RoleDeluxeShopData::InternalSwap(RoleDeluxeShopData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleDeluxeShopData, _impl_.last_reset_time_)
      + sizeof(RoleDeluxeShopData::_impl_.last_reset_time_)
      - PROTOBUF_FIELD_OFFSET(RoleDeluxeShopData, _impl_.today_manual_refresh_num_item_)>(
          reinterpret_cast<char*>(&_impl_.today_manual_refresh_num_item_),
          reinterpret_cast<char*>(&other->_impl_.today_manual_refresh_num_item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDeluxeShopData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[72]);
}

// ===================================================================

class MailAttachment::_Internal {
 public:
};

MailAttachment::MailAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.MailAttachment)
}
MailAttachment::MailAttachment(const MailAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MailAttachment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.received_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.received_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.received_));
  // @@protoc_insertion_point(copy_constructor:idlepb.MailAttachment)
}

inline void MailAttachment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.num_){0}
    , decltype(_impl_.received_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MailAttachment::~MailAttachment() {
  // @@protoc_insertion_point(destructor:idlepb.MailAttachment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MailAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MailAttachment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MailAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.MailAttachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.received_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.received_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailAttachment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool received = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MailAttachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.MailAttachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // bool received = 3;
  if (this->_internal_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_received(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.MailAttachment)
  return target;
}

size_t MailAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.MailAttachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  // bool received = 3;
  if (this->_internal_received() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MailAttachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MailAttachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MailAttachment::GetClassData() const { return &_class_data_; }


void MailAttachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MailAttachment*>(&to_msg);
  auto& from = static_cast<const MailAttachment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.MailAttachment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_received() != 0) {
    _this->_internal_set_received(from._internal_received());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MailAttachment::CopyFrom(const MailAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.MailAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailAttachment::IsInitialized() const {
  return true;
}

void MailAttachment::InternalSwap(MailAttachment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MailAttachment, _impl_.received_)
      + sizeof(MailAttachment::_impl_.received_)
      - PROTOBUF_FIELD_OFFSET(MailAttachment, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MailAttachment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[73]);
}

// ===================================================================

class Mail::_Internal {
 public:
};

Mail::Mail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.Mail)
}
Mail::Mail(const Mail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attachments_){from._impl_.attachments_}
    , decltype(_impl_.equipments_){from._impl_.equipments_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subtitle_){}
    , decltype(_impl_.body_text_){}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.begin_date_){}
    , decltype(_impl_.keep_time_){}
    , decltype(_impl_.is_read_){}
    , decltype(_impl_.is_received_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subtitle().empty()) {
    _this->_impl_.subtitle_.Set(from._internal_subtitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body_text().empty()) {
    _this->_impl_.body_text_.Set(from._internal_body_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_received_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_received_));
  // @@protoc_insertion_point(copy_constructor:idlepb.Mail)
}

inline void Mail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attachments_){arena}
    , decltype(_impl_.equipments_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subtitle_){}
    , decltype(_impl_.body_text_){}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.begin_date_){int64_t{0}}
    , decltype(_impl_.keep_time_){0}
    , decltype(_impl_.is_read_){false}
    , decltype(_impl_.is_received_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Mail::~Mail() {
  // @@protoc_insertion_point(destructor:idlepb.Mail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attachments_.~RepeatedPtrField();
  _impl_.equipments_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.subtitle_.Destroy();
  _impl_.body_text_.Destroy();
  _impl_.sender_.Destroy();
}

void Mail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mail::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.Mail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attachments_.Clear();
  _impl_.equipments_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.subtitle_.ClearToEmpty();
  _impl_.body_text_.ClearToEmpty();
  _impl_.sender_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_received_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_received_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.MailType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::idlepb::MailType>(val));
        } else
          goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.Mail.title"));
        } else
          goto handle_unusual;
        continue;
      // string subtitle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_subtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.Mail.subtitle"));
        } else
          goto handle_unusual;
        continue;
      // string body_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_body_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.Mail.body_text"));
        } else
          goto handle_unusual;
        continue;
      // string sender = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.Mail.sender"));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.MailAttachment attachments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 begin_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.begin_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 keep_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.keep_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_read = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.is_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_received = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ItemData equipments = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equipments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.Mail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .idlepb.MailType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.Mail.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string subtitle = 4;
  if (!this->_internal_subtitle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subtitle().data(), static_cast<int>(this->_internal_subtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.Mail.subtitle");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_subtitle(), target);
  }

  // string body_text = 5;
  if (!this->_internal_body_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body_text().data(), static_cast<int>(this->_internal_body_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.Mail.body_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_body_text(), target);
  }

  // string sender = 6;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.Mail.sender");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sender(), target);
  }

  // repeated .idlepb.MailAttachment attachments = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attachments_size()); i < n; i++) {
    const auto& repfield = this->_internal_attachments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 begin_date = 8;
  if (this->_internal_begin_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_begin_date(), target);
  }

  // int32 keep_time = 9;
  if (this->_internal_keep_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_keep_time(), target);
  }

  // bool is_read = 10;
  if (this->_internal_is_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_read(), target);
  }

  // bool is_received = 11;
  if (this->_internal_is_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_received(), target);
  }

  // repeated .idlepb.ItemData equipments = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equipments_size()); i < n; i++) {
    const auto& repfield = this->_internal_equipments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.Mail)
  return target;
}

size_t Mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.Mail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.MailAttachment attachments = 7;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->_impl_.attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.ItemData equipments = 12;
  total_size += 1UL * this->_internal_equipments_size();
  for (const auto& msg : this->_impl_.equipments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subtitle = 4;
  if (!this->_internal_subtitle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subtitle());
  }

  // string body_text = 5;
  if (!this->_internal_body_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body_text());
  }

  // string sender = 6;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .idlepb.MailType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int64 begin_date = 8;
  if (this->_internal_begin_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_date());
  }

  // int32 keep_time = 9;
  if (this->_internal_keep_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_keep_time());
  }

  // bool is_read = 10;
  if (this->_internal_is_read() != 0) {
    total_size += 1 + 1;
  }

  // bool is_received = 11;
  if (this->_internal_is_received() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mail::GetClassData() const { return &_class_data_; }


void Mail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mail*>(&to_msg);
  auto& from = static_cast<const Mail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.Mail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attachments_.MergeFrom(from._impl_.attachments_);
  _this->_impl_.equipments_.MergeFrom(from._impl_.equipments_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_subtitle().empty()) {
    _this->_internal_set_subtitle(from._internal_subtitle());
  }
  if (!from._internal_body_text().empty()) {
    _this->_internal_set_body_text(from._internal_body_text());
  }
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_begin_date() != 0) {
    _this->_internal_set_begin_date(from._internal_begin_date());
  }
  if (from._internal_keep_time() != 0) {
    _this->_internal_set_keep_time(from._internal_keep_time());
  }
  if (from._internal_is_read() != 0) {
    _this->_internal_set_is_read(from._internal_is_read());
  }
  if (from._internal_is_received() != 0) {
    _this->_internal_set_is_received(from._internal_is_received());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mail::CopyFrom(const Mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.Mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail::IsInitialized() const {
  return true;
}

void Mail::InternalSwap(Mail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
  _impl_.equipments_.InternalSwap(&other->_impl_.equipments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subtitle_, lhs_arena,
      &other->_impl_.subtitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_text_, lhs_arena,
      &other->_impl_.body_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mail, _impl_.is_received_)
      + sizeof(Mail::_impl_.is_received_)
      - PROTOBUF_FIELD_OFFSET(Mail, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[74]);
}

// ===================================================================

class RoleMailData::_Internal {
 public:
};

RoleMailData::RoleMailData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleMailData)
}
RoleMailData::RoleMailData(const RoleMailData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleMailData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mail_box_){from._impl_.mail_box_}
    , decltype(_impl_.system_mail_counter_){from._impl_.system_mail_counter_}
    , decltype(_impl_.total_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_num_ = from._impl_.total_num_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleMailData)
}

inline void RoleMailData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mail_box_){arena}
    , decltype(_impl_.system_mail_counter_){arena}
    , decltype(_impl_.total_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleMailData::~RoleMailData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleMailData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleMailData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mail_box_.~RepeatedPtrField();
  _impl_.system_mail_counter_.~RepeatedPtrField();
}

void RoleMailData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleMailData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleMailData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mail_box_.Clear();
  _impl_.system_mail_counter_.Clear();
  _impl_.total_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleMailData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.Mail mail_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mail_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 total_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.MapValueInt32 system_mail_counter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_system_mail_counter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleMailData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleMailData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.Mail mail_box = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mail_box_size()); i < n; i++) {
    const auto& repfield = this->_internal_mail_box(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 total_num = 3;
  if (this->_internal_total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_num(), target);
  }

  // repeated .idlepb.MapValueInt32 system_mail_counter = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_system_mail_counter_size()); i < n; i++) {
    const auto& repfield = this->_internal_system_mail_counter(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleMailData)
  return target;
}

size_t RoleMailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleMailData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.Mail mail_box = 1;
  total_size += 1UL * this->_internal_mail_box_size();
  for (const auto& msg : this->_impl_.mail_box_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.MapValueInt32 system_mail_counter = 4;
  total_size += 1UL * this->_internal_system_mail_counter_size();
  for (const auto& msg : this->_impl_.system_mail_counter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_num = 3;
  if (this->_internal_total_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleMailData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleMailData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleMailData::GetClassData() const { return &_class_data_; }


void RoleMailData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleMailData*>(&to_msg);
  auto& from = static_cast<const RoleMailData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleMailData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mail_box_.MergeFrom(from._impl_.mail_box_);
  _this->_impl_.system_mail_counter_.MergeFrom(from._impl_.system_mail_counter_);
  if (from._internal_total_num() != 0) {
    _this->_internal_set_total_num(from._internal_total_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleMailData::CopyFrom(const RoleMailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMailData::IsInitialized() const {
  return true;
}

void RoleMailData::InternalSwap(RoleMailData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mail_box_.InternalSwap(&other->_impl_.mail_box_);
  _impl_.system_mail_counter_.InternalSwap(&other->_impl_.system_mail_counter_);
  swap(_impl_.total_num_, other->_impl_.total_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleMailData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[75]);
}

// ===================================================================

class OfflineAwardSummary::_Internal {
 public:
};

OfflineAwardSummary::OfflineAwardSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.OfflineAwardSummary)
}
OfflineAwardSummary::OfflineAwardSummary(const OfflineAwardSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OfflineAwardSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_during_){}
    , decltype(_impl_.add_exp_){}
    , decltype(_impl_.add_attr_){}
    , decltype(_impl_.dir_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_during_, &from._impl_.time_during_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dir_) -
    reinterpret_cast<char*>(&_impl_.time_during_)) + sizeof(_impl_.dir_));
  // @@protoc_insertion_point(copy_constructor:idlepb.OfflineAwardSummary)
}

inline void OfflineAwardSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_during_){int64_t{0}}
    , decltype(_impl_.add_exp_){int64_t{0}}
    , decltype(_impl_.add_attr_){int64_t{0}}
    , decltype(_impl_.dir_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OfflineAwardSummary::~OfflineAwardSummary() {
  // @@protoc_insertion_point(destructor:idlepb.OfflineAwardSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OfflineAwardSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OfflineAwardSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OfflineAwardSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.OfflineAwardSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_during_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dir_) -
      reinterpret_cast<char*>(&_impl_.time_during_)) + sizeof(_impl_.dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OfflineAwardSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.CultivationDirection dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dir(static_cast<::idlepb::CultivationDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 time_during = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_during_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 add_exp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.add_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 add_attr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.add_attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OfflineAwardSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.OfflineAwardSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.CultivationDirection dir = 1;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dir(), target);
  }

  // int64 time_during = 2;
  if (this->_internal_time_during() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_during(), target);
  }

  // int64 add_exp = 3;
  if (this->_internal_add_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_add_exp(), target);
  }

  // int64 add_attr = 4;
  if (this->_internal_add_attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_add_attr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.OfflineAwardSummary)
  return target;
}

size_t OfflineAwardSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.OfflineAwardSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time_during = 2;
  if (this->_internal_time_during() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_during());
  }

  // int64 add_exp = 3;
  if (this->_internal_add_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_add_exp());
  }

  // int64 add_attr = 4;
  if (this->_internal_add_attr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_add_attr());
  }

  // .idlepb.CultivationDirection dir = 1;
  if (this->_internal_dir() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OfflineAwardSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OfflineAwardSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OfflineAwardSummary::GetClassData() const { return &_class_data_; }


void OfflineAwardSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OfflineAwardSummary*>(&to_msg);
  auto& from = static_cast<const OfflineAwardSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.OfflineAwardSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time_during() != 0) {
    _this->_internal_set_time_during(from._internal_time_during());
  }
  if (from._internal_add_exp() != 0) {
    _this->_internal_set_add_exp(from._internal_add_exp());
  }
  if (from._internal_add_attr() != 0) {
    _this->_internal_set_add_attr(from._internal_add_attr());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OfflineAwardSummary::CopyFrom(const OfflineAwardSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.OfflineAwardSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineAwardSummary::IsInitialized() const {
  return true;
}

void OfflineAwardSummary::InternalSwap(OfflineAwardSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OfflineAwardSummary, _impl_.dir_)
      + sizeof(OfflineAwardSummary::_impl_.dir_)
      - PROTOBUF_FIELD_OFFSET(OfflineAwardSummary, _impl_.time_during_)>(
          reinterpret_cast<char*>(&_impl_.time_during_),
          reinterpret_cast<char*>(&other->_impl_.time_during_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OfflineAwardSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[76]);
}

// ===================================================================

class RoleOfflineData::_Internal {
 public:
  static const ::idlepb::OfflineAwardSummary& last_award_summary(const RoleOfflineData* msg);
};

const ::idlepb::OfflineAwardSummary&
RoleOfflineData::_Internal::last_award_summary(const RoleOfflineData* msg) {
  return *msg->_impl_.last_award_summary_;
}
RoleOfflineData::RoleOfflineData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleOfflineData)
}
RoleOfflineData::RoleOfflineData(const RoleOfflineData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleOfflineData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_award_summary_){nullptr}
    , decltype(_impl_.last_exp_value_){}
    , decltype(_impl_.last_attr_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_award_summary()) {
    _this->_impl_.last_award_summary_ = new ::idlepb::OfflineAwardSummary(*from._impl_.last_award_summary_);
  }
  ::memcpy(&_impl_.last_exp_value_, &from._impl_.last_exp_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_attr_value_) -
    reinterpret_cast<char*>(&_impl_.last_exp_value_)) + sizeof(_impl_.last_attr_value_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleOfflineData)
}

inline void RoleOfflineData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_award_summary_){nullptr}
    , decltype(_impl_.last_exp_value_){int64_t{0}}
    , decltype(_impl_.last_attr_value_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleOfflineData::~RoleOfflineData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleOfflineData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleOfflineData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.last_award_summary_;
}

void RoleOfflineData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleOfflineData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleOfflineData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.last_award_summary_ != nullptr) {
    delete _impl_.last_award_summary_;
  }
  _impl_.last_award_summary_ = nullptr;
  ::memset(&_impl_.last_exp_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_attr_value_) -
      reinterpret_cast<char*>(&_impl_.last_exp_value_)) + sizeof(_impl_.last_attr_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleOfflineData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 last_exp_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.last_exp_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_attr_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.last_attr_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.OfflineAwardSummary last_award_summary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_award_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleOfflineData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleOfflineData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_exp_value = 1;
  if (this->_internal_last_exp_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_exp_value(), target);
  }

  // int64 last_attr_value = 2;
  if (this->_internal_last_attr_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_attr_value(), target);
  }

  // .idlepb.OfflineAwardSummary last_award_summary = 3;
  if (this->_internal_has_last_award_summary()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last_award_summary(this),
        _Internal::last_award_summary(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleOfflineData)
  return target;
}

size_t RoleOfflineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleOfflineData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.OfflineAwardSummary last_award_summary = 3;
  if (this->_internal_has_last_award_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_award_summary_);
  }

  // int64 last_exp_value = 1;
  if (this->_internal_last_exp_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_exp_value());
  }

  // int64 last_attr_value = 2;
  if (this->_internal_last_attr_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_attr_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleOfflineData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleOfflineData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleOfflineData::GetClassData() const { return &_class_data_; }


void RoleOfflineData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleOfflineData*>(&to_msg);
  auto& from = static_cast<const RoleOfflineData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleOfflineData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_last_award_summary()) {
    _this->_internal_mutable_last_award_summary()->::idlepb::OfflineAwardSummary::MergeFrom(
        from._internal_last_award_summary());
  }
  if (from._internal_last_exp_value() != 0) {
    _this->_internal_set_last_exp_value(from._internal_last_exp_value());
  }
  if (from._internal_last_attr_value() != 0) {
    _this->_internal_set_last_attr_value(from._internal_last_attr_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleOfflineData::CopyFrom(const RoleOfflineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleOfflineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOfflineData::IsInitialized() const {
  return true;
}

void RoleOfflineData::InternalSwap(RoleOfflineData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleOfflineData, _impl_.last_attr_value_)
      + sizeof(RoleOfflineData::_impl_.last_attr_value_)
      - PROTOBUF_FIELD_OFFSET(RoleOfflineData, _impl_.last_award_summary_)>(
          reinterpret_cast<char*>(&_impl_.last_award_summary_),
          reinterpret_cast<char*>(&other->_impl_.last_award_summary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleOfflineData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[77]);
}

// ===================================================================

class PillElixirData::_Internal {
 public:
};

PillElixirData::PillElixirData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PillElixirData)
}
PillElixirData::PillElixirData(const PillElixirData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PillElixirData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.holding_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.holding_num_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.holding_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PillElixirData)
}

inline void PillElixirData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0}
    , decltype(_impl_.holding_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PillElixirData::~PillElixirData() {
  // @@protoc_insertion_point(destructor:idlepb.PillElixirData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PillElixirData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PillElixirData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PillElixirData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PillElixirData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.holding_num_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.holding_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PillElixirData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 holding_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.holding_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PillElixirData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PillElixirData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // int32 holding_num = 2;
  if (this->_internal_holding_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_holding_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PillElixirData)
  return target;
}

size_t PillElixirData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PillElixirData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
  }

  // int32 holding_num = 2;
  if (this->_internal_holding_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_holding_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PillElixirData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PillElixirData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PillElixirData::GetClassData() const { return &_class_data_; }


void PillElixirData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PillElixirData*>(&to_msg);
  auto& from = static_cast<const PillElixirData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PillElixirData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_holding_num() != 0) {
    _this->_internal_set_holding_num(from._internal_holding_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PillElixirData::CopyFrom(const PillElixirData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PillElixirData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PillElixirData::IsInitialized() const {
  return true;
}

void PillElixirData::InternalSwap(PillElixirData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PillElixirData, _impl_.holding_num_)
      + sizeof(PillElixirData::_impl_.holding_num_)
      - PROTOBUF_FIELD_OFFSET(PillElixirData, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PillElixirData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[78]);
}

// ===================================================================

class RolePillElixirData::_Internal {
 public:
};

RolePillElixirData::RolePillElixirData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RolePillElixirData)
}
RolePillElixirData::RolePillElixirData(const RolePillElixirData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RolePillElixirData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pill_data_){from._impl_.pill_data_}
    , decltype(_impl_.limit_double_){}
    , decltype(_impl_.limit_exp_){}
    , decltype(_impl_.limit_property_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.limit_double_, &from._impl_.limit_double_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_property_) -
    reinterpret_cast<char*>(&_impl_.limit_double_)) + sizeof(_impl_.limit_property_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RolePillElixirData)
}

inline void RolePillElixirData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pill_data_){arena}
    , decltype(_impl_.limit_double_){0}
    , decltype(_impl_.limit_exp_){0}
    , decltype(_impl_.limit_property_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RolePillElixirData::~RolePillElixirData() {
  // @@protoc_insertion_point(destructor:idlepb.RolePillElixirData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RolePillElixirData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pill_data_.~RepeatedPtrField();
}

void RolePillElixirData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RolePillElixirData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RolePillElixirData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pill_data_.Clear();
  ::memset(&_impl_.limit_double_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_property_) -
      reinterpret_cast<char*>(&_impl_.limit_double_)) + sizeof(_impl_.limit_property_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RolePillElixirData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.PillElixirData pill_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pill_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 limit_double = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.limit_double_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 limit_exp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.limit_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 limit_property = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.limit_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RolePillElixirData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RolePillElixirData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.PillElixirData pill_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pill_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_pill_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 limit_double = 2;
  if (this->_internal_limit_double() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit_double(), target);
  }

  // int32 limit_exp = 3;
  if (this->_internal_limit_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_limit_exp(), target);
  }

  // int32 limit_property = 4;
  if (this->_internal_limit_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_limit_property(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RolePillElixirData)
  return target;
}

size_t RolePillElixirData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RolePillElixirData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.PillElixirData pill_data = 1;
  total_size += 1UL * this->_internal_pill_data_size();
  for (const auto& msg : this->_impl_.pill_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 limit_double = 2;
  if (this->_internal_limit_double() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit_double());
  }

  // int32 limit_exp = 3;
  if (this->_internal_limit_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit_exp());
  }

  // int32 limit_property = 4;
  if (this->_internal_limit_property() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit_property());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RolePillElixirData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RolePillElixirData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RolePillElixirData::GetClassData() const { return &_class_data_; }


void RolePillElixirData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RolePillElixirData*>(&to_msg);
  auto& from = static_cast<const RolePillElixirData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RolePillElixirData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pill_data_.MergeFrom(from._impl_.pill_data_);
  if (from._internal_limit_double() != 0) {
    _this->_internal_set_limit_double(from._internal_limit_double());
  }
  if (from._internal_limit_exp() != 0) {
    _this->_internal_set_limit_exp(from._internal_limit_exp());
  }
  if (from._internal_limit_property() != 0) {
    _this->_internal_set_limit_property(from._internal_limit_property());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RolePillElixirData::CopyFrom(const RolePillElixirData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RolePillElixirData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolePillElixirData::IsInitialized() const {
  return true;
}

void RolePillElixirData::InternalSwap(RolePillElixirData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pill_data_.InternalSwap(&other->_impl_.pill_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RolePillElixirData, _impl_.limit_property_)
      + sizeof(RolePillElixirData::_impl_.limit_property_)
      - PROTOBUF_FIELD_OFFSET(RolePillElixirData, _impl_.limit_double_)>(
          reinterpret_cast<char*>(&_impl_.limit_double_),
          reinterpret_cast<char*>(&other->_impl_.limit_double_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RolePillElixirData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[79]);
}

// ===================================================================

class AbilityEffectDefData::_Internal {
 public:
};

AbilityEffectDefData::AbilityEffectDefData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AbilityEffectDefData)
}
AbilityEffectDefData::AbilityEffectDefData(const AbilityEffectDefData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbilityEffectDefData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.period_){}
    , decltype(_impl_.duration_policy_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.m_){}
    , decltype(_impl_.n_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.n_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.n_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AbilityEffectDefData)
}

inline void AbilityEffectDefData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.period_){0}
    , decltype(_impl_.duration_policy_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.m_){0}
    , decltype(_impl_.n_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AbilityEffectDefData::~AbilityEffectDefData() {
  // @@protoc_insertion_point(destructor:idlepb.AbilityEffectDefData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbilityEffectDefData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AbilityEffectDefData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbilityEffectDefData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AbilityEffectDefData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.n_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.n_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbilityEffectDefData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 duration_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.duration_policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float m = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float n = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbilityEffectDefData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AbilityEffectDefData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // float duration = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // float period = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_period = this->_internal_period();
  uint32_t raw_period;
  memcpy(&raw_period, &tmp_period, sizeof(tmp_period));
  if (raw_period != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_period(), target);
  }

  // int32 duration_policy = 4;
  if (this->_internal_duration_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_duration_policy(), target);
  }

  // float x = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_x(), target);
  }

  // float y = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_y(), target);
  }

  // float z = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_z(), target);
  }

  // float m = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_m = this->_internal_m();
  uint32_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_m(), target);
  }

  // float n = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_n = this->_internal_n();
  uint32_t raw_n;
  memcpy(&raw_n, &tmp_n, sizeof(tmp_n));
  if (raw_n != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AbilityEffectDefData)
  return target;
}

size_t AbilityEffectDefData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AbilityEffectDefData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // float duration = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 1 + 4;
  }

  // float period = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_period = this->_internal_period();
  uint32_t raw_period;
  memcpy(&raw_period, &tmp_period, sizeof(tmp_period));
  if (raw_period != 0) {
    total_size += 1 + 4;
  }

  // int32 duration_policy = 4;
  if (this->_internal_duration_policy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration_policy());
  }

  // float x = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float m = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_m = this->_internal_m();
  uint32_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    total_size += 1 + 4;
  }

  // float n = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_n = this->_internal_n();
  uint32_t raw_n;
  memcpy(&raw_n, &tmp_n, sizeof(tmp_n));
  if (raw_n != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbilityEffectDefData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbilityEffectDefData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbilityEffectDefData::GetClassData() const { return &_class_data_; }


void AbilityEffectDefData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbilityEffectDefData*>(&to_msg);
  auto& from = static_cast<const AbilityEffectDefData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AbilityEffectDefData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = from._internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_period = from._internal_period();
  uint32_t raw_period;
  memcpy(&raw_period, &tmp_period, sizeof(tmp_period));
  if (raw_period != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  if (from._internal_duration_policy() != 0) {
    _this->_internal_set_duration_policy(from._internal_duration_policy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_m = from._internal_m();
  uint32_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    _this->_internal_set_m(from._internal_m());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_n = from._internal_n();
  uint32_t raw_n;
  memcpy(&raw_n, &tmp_n, sizeof(tmp_n));
  if (raw_n != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbilityEffectDefData::CopyFrom(const AbilityEffectDefData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AbilityEffectDefData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityEffectDefData::IsInitialized() const {
  return true;
}

void AbilityEffectDefData::InternalSwap(AbilityEffectDefData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbilityEffectDefData, _impl_.n_)
      + sizeof(AbilityEffectDefData::_impl_.n_)
      - PROTOBUF_FIELD_OFFSET(AbilityEffectDefData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbilityEffectDefData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[80]);
}

// ===================================================================

class AbilityData::_Internal {
 public:
};

AbilityData::AbilityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AbilityData)
}
AbilityData::AbilityData(const AbilityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbilityData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.effect_defs_){from._impl_.effect_defs_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.grade_){}
    , decltype(_impl_.activetime_utc_){}
    , decltype(_impl_.activetime_world_){}
    , decltype(_impl_.unique_id_){}
    , decltype(_impl_.study_grade_){}
    , decltype(_impl_.cooldown_){}
    , decltype(_impl_.target_num_){}
    , decltype(_impl_.target_distance_){}
    , decltype(_impl_.target_catchdistance_){}
    , decltype(_impl_.attack_count_){}
    , decltype(_impl_.phy_coefficient_){}
    , decltype(_impl_.phy_damage_){}
    , decltype(_impl_.mana_coefficient_){}
    , decltype(_impl_.mana_damage_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.item_maxdamage_){}
    , decltype(_impl_.item_cfgid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_cfgid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.item_cfgid_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AbilityData)
}

inline void AbilityData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.effect_defs_){arena}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.grade_){0}
    , decltype(_impl_.activetime_utc_){int64_t{0}}
    , decltype(_impl_.activetime_world_){0}
    , decltype(_impl_.unique_id_){0}
    , decltype(_impl_.study_grade_){0}
    , decltype(_impl_.cooldown_){0}
    , decltype(_impl_.target_num_){0}
    , decltype(_impl_.target_distance_){0}
    , decltype(_impl_.target_catchdistance_){0}
    , decltype(_impl_.attack_count_){0}
    , decltype(_impl_.phy_coefficient_){0}
    , decltype(_impl_.phy_damage_){0}
    , decltype(_impl_.mana_coefficient_){0}
    , decltype(_impl_.mana_damage_){0}
    , decltype(_impl_.item_id_){int64_t{0}}
    , decltype(_impl_.item_maxdamage_){0}
    , decltype(_impl_.item_cfgid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AbilityData::~AbilityData() {
  // @@protoc_insertion_point(destructor:idlepb.AbilityData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbilityData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.effect_defs_.~RepeatedPtrField();
}

void AbilityData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbilityData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AbilityData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effect_defs_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_cfgid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.item_cfgid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbilityData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 grade = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 activetime_utc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.activetime_utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float activetime_world = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.activetime_world_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 unique_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 study_grade = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.study_grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cooldown = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float target_num = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.target_num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float target_distance = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.target_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float target_catchdistance = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.target_catchdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attack_count = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.attack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_coefficient = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.phy_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float phy_damage = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.phy_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mana_coefficient = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.mana_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mana_damage = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.mana_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 item_id = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float item_maxdamage = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.item_maxdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 item_cfgid = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.item_cfgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.AbilityEffectDefData effect_defs = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_effect_defs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1602>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbilityData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AbilityData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 grade = 2;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_grade(), target);
  }

  // int64 activetime_utc = 3;
  if (this->_internal_activetime_utc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_activetime_utc(), target);
  }

  // float activetime_world = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_activetime_world = this->_internal_activetime_world();
  uint32_t raw_activetime_world;
  memcpy(&raw_activetime_world, &tmp_activetime_world, sizeof(tmp_activetime_world));
  if (raw_activetime_world != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_activetime_world(), target);
  }

  // int32 unique_id = 5;
  if (this->_internal_unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_unique_id(), target);
  }

  // int32 study_grade = 6;
  if (this->_internal_study_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_study_grade(), target);
  }

  // float cooldown = 100;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cooldown = this->_internal_cooldown();
  uint32_t raw_cooldown;
  memcpy(&raw_cooldown, &tmp_cooldown, sizeof(tmp_cooldown));
  if (raw_cooldown != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(100, this->_internal_cooldown(), target);
  }

  // float target_num = 101;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_num = this->_internal_target_num();
  uint32_t raw_target_num;
  memcpy(&raw_target_num, &tmp_target_num, sizeof(tmp_target_num));
  if (raw_target_num != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(101, this->_internal_target_num(), target);
  }

  // float target_distance = 102;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_distance = this->_internal_target_distance();
  uint32_t raw_target_distance;
  memcpy(&raw_target_distance, &tmp_target_distance, sizeof(tmp_target_distance));
  if (raw_target_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(102, this->_internal_target_distance(), target);
  }

  // float target_catchdistance = 103;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_catchdistance = this->_internal_target_catchdistance();
  uint32_t raw_target_catchdistance;
  memcpy(&raw_target_catchdistance, &tmp_target_catchdistance, sizeof(tmp_target_catchdistance));
  if (raw_target_catchdistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(103, this->_internal_target_catchdistance(), target);
  }

  // float attack_count = 104;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_count = this->_internal_attack_count();
  uint32_t raw_attack_count;
  memcpy(&raw_attack_count, &tmp_attack_count, sizeof(tmp_attack_count));
  if (raw_attack_count != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(104, this->_internal_attack_count(), target);
  }

  // float phy_coefficient = 105;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_coefficient = this->_internal_phy_coefficient();
  uint32_t raw_phy_coefficient;
  memcpy(&raw_phy_coefficient, &tmp_phy_coefficient, sizeof(tmp_phy_coefficient));
  if (raw_phy_coefficient != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(105, this->_internal_phy_coefficient(), target);
  }

  // float phy_damage = 106;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage = this->_internal_phy_damage();
  uint32_t raw_phy_damage;
  memcpy(&raw_phy_damage, &tmp_phy_damage, sizeof(tmp_phy_damage));
  if (raw_phy_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(106, this->_internal_phy_damage(), target);
  }

  // float mana_coefficient = 107;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mana_coefficient = this->_internal_mana_coefficient();
  uint32_t raw_mana_coefficient;
  memcpy(&raw_mana_coefficient, &tmp_mana_coefficient, sizeof(tmp_mana_coefficient));
  if (raw_mana_coefficient != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(107, this->_internal_mana_coefficient(), target);
  }

  // float mana_damage = 108;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mana_damage = this->_internal_mana_damage();
  uint32_t raw_mana_damage;
  memcpy(&raw_mana_damage, &tmp_mana_damage, sizeof(tmp_mana_damage));
  if (raw_mana_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(108, this->_internal_mana_damage(), target);
  }

  // int64 item_id = 109;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(109, this->_internal_item_id(), target);
  }

  // float item_maxdamage = 110;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_item_maxdamage = this->_internal_item_maxdamage();
  uint32_t raw_item_maxdamage;
  memcpy(&raw_item_maxdamage, &tmp_item_maxdamage, sizeof(tmp_item_maxdamage));
  if (raw_item_maxdamage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(110, this->_internal_item_maxdamage(), target);
  }

  // int32 item_cfgid = 111;
  if (this->_internal_item_cfgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(111, this->_internal_item_cfgid(), target);
  }

  // repeated .idlepb.AbilityEffectDefData effect_defs = 200;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_effect_defs_size()); i < n; i++) {
    const auto& repfield = this->_internal_effect_defs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(200, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AbilityData)
  return target;
}

size_t AbilityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AbilityData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.AbilityEffectDefData effect_defs = 200;
  total_size += 2UL * this->_internal_effect_defs_size();
  for (const auto& msg : this->_impl_.effect_defs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 grade = 2;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grade());
  }

  // int64 activetime_utc = 3;
  if (this->_internal_activetime_utc() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_activetime_utc());
  }

  // float activetime_world = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_activetime_world = this->_internal_activetime_world();
  uint32_t raw_activetime_world;
  memcpy(&raw_activetime_world, &tmp_activetime_world, sizeof(tmp_activetime_world));
  if (raw_activetime_world != 0) {
    total_size += 1 + 4;
  }

  // int32 unique_id = 5;
  if (this->_internal_unique_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unique_id());
  }

  // int32 study_grade = 6;
  if (this->_internal_study_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_study_grade());
  }

  // float cooldown = 100;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cooldown = this->_internal_cooldown();
  uint32_t raw_cooldown;
  memcpy(&raw_cooldown, &tmp_cooldown, sizeof(tmp_cooldown));
  if (raw_cooldown != 0) {
    total_size += 2 + 4;
  }

  // float target_num = 101;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_num = this->_internal_target_num();
  uint32_t raw_target_num;
  memcpy(&raw_target_num, &tmp_target_num, sizeof(tmp_target_num));
  if (raw_target_num != 0) {
    total_size += 2 + 4;
  }

  // float target_distance = 102;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_distance = this->_internal_target_distance();
  uint32_t raw_target_distance;
  memcpy(&raw_target_distance, &tmp_target_distance, sizeof(tmp_target_distance));
  if (raw_target_distance != 0) {
    total_size += 2 + 4;
  }

  // float target_catchdistance = 103;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_catchdistance = this->_internal_target_catchdistance();
  uint32_t raw_target_catchdistance;
  memcpy(&raw_target_catchdistance, &tmp_target_catchdistance, sizeof(tmp_target_catchdistance));
  if (raw_target_catchdistance != 0) {
    total_size += 2 + 4;
  }

  // float attack_count = 104;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_count = this->_internal_attack_count();
  uint32_t raw_attack_count;
  memcpy(&raw_attack_count, &tmp_attack_count, sizeof(tmp_attack_count));
  if (raw_attack_count != 0) {
    total_size += 2 + 4;
  }

  // float phy_coefficient = 105;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_coefficient = this->_internal_phy_coefficient();
  uint32_t raw_phy_coefficient;
  memcpy(&raw_phy_coefficient, &tmp_phy_coefficient, sizeof(tmp_phy_coefficient));
  if (raw_phy_coefficient != 0) {
    total_size += 2 + 4;
  }

  // float phy_damage = 106;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage = this->_internal_phy_damage();
  uint32_t raw_phy_damage;
  memcpy(&raw_phy_damage, &tmp_phy_damage, sizeof(tmp_phy_damage));
  if (raw_phy_damage != 0) {
    total_size += 2 + 4;
  }

  // float mana_coefficient = 107;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mana_coefficient = this->_internal_mana_coefficient();
  uint32_t raw_mana_coefficient;
  memcpy(&raw_mana_coefficient, &tmp_mana_coefficient, sizeof(tmp_mana_coefficient));
  if (raw_mana_coefficient != 0) {
    total_size += 2 + 4;
  }

  // float mana_damage = 108;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mana_damage = this->_internal_mana_damage();
  uint32_t raw_mana_damage;
  memcpy(&raw_mana_damage, &tmp_mana_damage, sizeof(tmp_mana_damage));
  if (raw_mana_damage != 0) {
    total_size += 2 + 4;
  }

  // int64 item_id = 109;
  if (this->_internal_item_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_item_id());
  }

  // float item_maxdamage = 110;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_item_maxdamage = this->_internal_item_maxdamage();
  uint32_t raw_item_maxdamage;
  memcpy(&raw_item_maxdamage, &tmp_item_maxdamage, sizeof(tmp_item_maxdamage));
  if (raw_item_maxdamage != 0) {
    total_size += 2 + 4;
  }

  // int32 item_cfgid = 111;
  if (this->_internal_item_cfgid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_item_cfgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbilityData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbilityData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbilityData::GetClassData() const { return &_class_data_; }


void AbilityData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbilityData*>(&to_msg);
  auto& from = static_cast<const AbilityData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AbilityData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.effect_defs_.MergeFrom(from._impl_.effect_defs_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  if (from._internal_activetime_utc() != 0) {
    _this->_internal_set_activetime_utc(from._internal_activetime_utc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_activetime_world = from._internal_activetime_world();
  uint32_t raw_activetime_world;
  memcpy(&raw_activetime_world, &tmp_activetime_world, sizeof(tmp_activetime_world));
  if (raw_activetime_world != 0) {
    _this->_internal_set_activetime_world(from._internal_activetime_world());
  }
  if (from._internal_unique_id() != 0) {
    _this->_internal_set_unique_id(from._internal_unique_id());
  }
  if (from._internal_study_grade() != 0) {
    _this->_internal_set_study_grade(from._internal_study_grade());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cooldown = from._internal_cooldown();
  uint32_t raw_cooldown;
  memcpy(&raw_cooldown, &tmp_cooldown, sizeof(tmp_cooldown));
  if (raw_cooldown != 0) {
    _this->_internal_set_cooldown(from._internal_cooldown());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_num = from._internal_target_num();
  uint32_t raw_target_num;
  memcpy(&raw_target_num, &tmp_target_num, sizeof(tmp_target_num));
  if (raw_target_num != 0) {
    _this->_internal_set_target_num(from._internal_target_num());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_distance = from._internal_target_distance();
  uint32_t raw_target_distance;
  memcpy(&raw_target_distance, &tmp_target_distance, sizeof(tmp_target_distance));
  if (raw_target_distance != 0) {
    _this->_internal_set_target_distance(from._internal_target_distance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_catchdistance = from._internal_target_catchdistance();
  uint32_t raw_target_catchdistance;
  memcpy(&raw_target_catchdistance, &tmp_target_catchdistance, sizeof(tmp_target_catchdistance));
  if (raw_target_catchdistance != 0) {
    _this->_internal_set_target_catchdistance(from._internal_target_catchdistance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_count = from._internal_attack_count();
  uint32_t raw_attack_count;
  memcpy(&raw_attack_count, &tmp_attack_count, sizeof(tmp_attack_count));
  if (raw_attack_count != 0) {
    _this->_internal_set_attack_count(from._internal_attack_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_coefficient = from._internal_phy_coefficient();
  uint32_t raw_phy_coefficient;
  memcpy(&raw_phy_coefficient, &tmp_phy_coefficient, sizeof(tmp_phy_coefficient));
  if (raw_phy_coefficient != 0) {
    _this->_internal_set_phy_coefficient(from._internal_phy_coefficient());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_phy_damage = from._internal_phy_damage();
  uint32_t raw_phy_damage;
  memcpy(&raw_phy_damage, &tmp_phy_damage, sizeof(tmp_phy_damage));
  if (raw_phy_damage != 0) {
    _this->_internal_set_phy_damage(from._internal_phy_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mana_coefficient = from._internal_mana_coefficient();
  uint32_t raw_mana_coefficient;
  memcpy(&raw_mana_coefficient, &tmp_mana_coefficient, sizeof(tmp_mana_coefficient));
  if (raw_mana_coefficient != 0) {
    _this->_internal_set_mana_coefficient(from._internal_mana_coefficient());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mana_damage = from._internal_mana_damage();
  uint32_t raw_mana_damage;
  memcpy(&raw_mana_damage, &tmp_mana_damage, sizeof(tmp_mana_damage));
  if (raw_mana_damage != 0) {
    _this->_internal_set_mana_damage(from._internal_mana_damage());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_item_maxdamage = from._internal_item_maxdamage();
  uint32_t raw_item_maxdamage;
  memcpy(&raw_item_maxdamage, &tmp_item_maxdamage, sizeof(tmp_item_maxdamage));
  if (raw_item_maxdamage != 0) {
    _this->_internal_set_item_maxdamage(from._internal_item_maxdamage());
  }
  if (from._internal_item_cfgid() != 0) {
    _this->_internal_set_item_cfgid(from._internal_item_cfgid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbilityData::CopyFrom(const AbilityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AbilityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityData::IsInitialized() const {
  return true;
}

void AbilityData::InternalSwap(AbilityData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.effect_defs_.InternalSwap(&other->_impl_.effect_defs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbilityData, _impl_.item_cfgid_)
      + sizeof(AbilityData::_impl_.item_cfgid_)
      - PROTOBUF_FIELD_OFFSET(AbilityData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbilityData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[81]);
}

// ===================================================================

class PlayerAbilityData::_Internal {
 public:
};

PlayerAbilityData::PlayerAbilityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PlayerAbilityData)
}
PlayerAbilityData::PlayerAbilityData(const PlayerAbilityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerAbilityData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.abilities_){from._impl_.abilities_}
    , decltype(_impl_.slotted_abilites_){from._impl_.slotted_abilites_}
    , decltype(_impl_.active_queue_){from._impl_.active_queue_}
    , /*decltype(_impl_._active_queue_cached_byte_size_)*/{0}
    , decltype(_impl_.revert_all_skill_cooldown_){}
    , decltype(_impl_.is_shiled_first_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.revert_all_skill_cooldown_, &from._impl_.revert_all_skill_cooldown_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_shiled_first_) -
    reinterpret_cast<char*>(&_impl_.revert_all_skill_cooldown_)) + sizeof(_impl_.is_shiled_first_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PlayerAbilityData)
}

inline void PlayerAbilityData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.abilities_){arena}
    , decltype(_impl_.slotted_abilites_){arena}
    , decltype(_impl_.active_queue_){arena}
    , /*decltype(_impl_._active_queue_cached_byte_size_)*/{0}
    , decltype(_impl_.revert_all_skill_cooldown_){int64_t{0}}
    , decltype(_impl_.is_shiled_first_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerAbilityData::~PlayerAbilityData() {
  // @@protoc_insertion_point(destructor:idlepb.PlayerAbilityData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerAbilityData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.abilities_.~RepeatedPtrField();
  _impl_.slotted_abilites_.~RepeatedPtrField();
  _impl_.active_queue_.~RepeatedField();
}

void PlayerAbilityData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerAbilityData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PlayerAbilityData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.abilities_.Clear();
  _impl_.slotted_abilites_.Clear();
  _impl_.active_queue_.Clear();
  ::memset(&_impl_.revert_all_skill_cooldown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_shiled_first_) -
      reinterpret_cast<char*>(&_impl_.revert_all_skill_cooldown_)) + sizeof(_impl_.is_shiled_first_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerAbilityData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.AbilityData abilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.MapValueInt32 slotted_abilites = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slotted_abilites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 active_queue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_active_queue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_active_queue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_shiled_first = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_shiled_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 revert_all_skill_cooldown = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.revert_all_skill_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerAbilityData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PlayerAbilityData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.AbilityData abilities = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_abilities_size()); i < n; i++) {
    const auto& repfield = this->_internal_abilities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.MapValueInt32 slotted_abilites = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slotted_abilites_size()); i < n; i++) {
    const auto& repfield = this->_internal_slotted_abilites(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 active_queue = 3;
  {
    int byte_size = _impl_._active_queue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_active_queue(), byte_size, target);
    }
  }

  // bool is_shiled_first = 4;
  if (this->_internal_is_shiled_first() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_shiled_first(), target);
  }

  // int64 revert_all_skill_cooldown = 5;
  if (this->_internal_revert_all_skill_cooldown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_revert_all_skill_cooldown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PlayerAbilityData)
  return target;
}

size_t PlayerAbilityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PlayerAbilityData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.AbilityData abilities = 1;
  total_size += 1UL * this->_internal_abilities_size();
  for (const auto& msg : this->_impl_.abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.MapValueInt32 slotted_abilites = 2;
  total_size += 1UL * this->_internal_slotted_abilites_size();
  for (const auto& msg : this->_impl_.slotted_abilites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 active_queue = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.active_queue_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._active_queue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 revert_all_skill_cooldown = 5;
  if (this->_internal_revert_all_skill_cooldown() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_revert_all_skill_cooldown());
  }

  // bool is_shiled_first = 4;
  if (this->_internal_is_shiled_first() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerAbilityData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerAbilityData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerAbilityData::GetClassData() const { return &_class_data_; }


void PlayerAbilityData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerAbilityData*>(&to_msg);
  auto& from = static_cast<const PlayerAbilityData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PlayerAbilityData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.abilities_.MergeFrom(from._impl_.abilities_);
  _this->_impl_.slotted_abilites_.MergeFrom(from._impl_.slotted_abilites_);
  _this->_impl_.active_queue_.MergeFrom(from._impl_.active_queue_);
  if (from._internal_revert_all_skill_cooldown() != 0) {
    _this->_internal_set_revert_all_skill_cooldown(from._internal_revert_all_skill_cooldown());
  }
  if (from._internal_is_shiled_first() != 0) {
    _this->_internal_set_is_shiled_first(from._internal_is_shiled_first());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerAbilityData::CopyFrom(const PlayerAbilityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PlayerAbilityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAbilityData::IsInitialized() const {
  return true;
}

void PlayerAbilityData::InternalSwap(PlayerAbilityData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.abilities_.InternalSwap(&other->_impl_.abilities_);
  _impl_.slotted_abilites_.InternalSwap(&other->_impl_.slotted_abilites_);
  _impl_.active_queue_.InternalSwap(&other->_impl_.active_queue_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerAbilityData, _impl_.is_shiled_first_)
      + sizeof(PlayerAbilityData::_impl_.is_shiled_first_)
      - PROTOBUF_FIELD_OFFSET(PlayerAbilityData, _impl_.revert_all_skill_cooldown_)>(
          reinterpret_cast<char*>(&_impl_.revert_all_skill_cooldown_),
          reinterpret_cast<char*>(&other->_impl_.revert_all_skill_cooldown_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerAbilityData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[82]);
}

// ===================================================================

class RoleZasData::_Internal {
 public:
  static const ::idlepb::PlayerAbilityData& zas_ability(const RoleZasData* msg);
};

const ::idlepb::PlayerAbilityData&
RoleZasData::_Internal::zas_ability(const RoleZasData* msg) {
  return *msg->_impl_.zas_ability_;
}
RoleZasData::RoleZasData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleZasData)
}
RoleZasData::RoleZasData(const RoleZasData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleZasData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zas_ability_){nullptr}
    , decltype(_impl_.zas_version_){}
    , decltype(_impl_.shentong_upgrade_point_use_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_zas_ability()) {
    _this->_impl_.zas_ability_ = new ::idlepb::PlayerAbilityData(*from._impl_.zas_ability_);
  }
  ::memcpy(&_impl_.zas_version_, &from._impl_.zas_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shentong_upgrade_point_use_num_) -
    reinterpret_cast<char*>(&_impl_.zas_version_)) + sizeof(_impl_.shentong_upgrade_point_use_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleZasData)
}

inline void RoleZasData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zas_ability_){nullptr}
    , decltype(_impl_.zas_version_){0}
    , decltype(_impl_.shentong_upgrade_point_use_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleZasData::~RoleZasData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleZasData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleZasData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.zas_ability_;
}

void RoleZasData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleZasData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleZasData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.zas_ability_ != nullptr) {
    delete _impl_.zas_ability_;
  }
  _impl_.zas_ability_ = nullptr;
  ::memset(&_impl_.zas_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shentong_upgrade_point_use_num_) -
      reinterpret_cast<char*>(&_impl_.zas_version_)) + sizeof(_impl_.shentong_upgrade_point_use_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleZasData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 zas_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zas_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.PlayerAbilityData zas_ability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_zas_ability(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shentong_upgrade_point_use_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.shentong_upgrade_point_use_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleZasData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleZasData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 zas_version = 1;
  if (this->_internal_zas_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_zas_version(), target);
  }

  // .idlepb.PlayerAbilityData zas_ability = 2;
  if (this->_internal_has_zas_ability()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::zas_ability(this),
        _Internal::zas_ability(this).GetCachedSize(), target, stream);
  }

  // int32 shentong_upgrade_point_use_num = 11;
  if (this->_internal_shentong_upgrade_point_use_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_shentong_upgrade_point_use_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleZasData)
  return target;
}

size_t RoleZasData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleZasData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.PlayerAbilityData zas_ability = 2;
  if (this->_internal_has_zas_ability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.zas_ability_);
  }

  // int32 zas_version = 1;
  if (this->_internal_zas_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zas_version());
  }

  // int32 shentong_upgrade_point_use_num = 11;
  if (this->_internal_shentong_upgrade_point_use_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shentong_upgrade_point_use_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleZasData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleZasData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleZasData::GetClassData() const { return &_class_data_; }


void RoleZasData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleZasData*>(&to_msg);
  auto& from = static_cast<const RoleZasData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleZasData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_zas_ability()) {
    _this->_internal_mutable_zas_ability()->::idlepb::PlayerAbilityData::MergeFrom(
        from._internal_zas_ability());
  }
  if (from._internal_zas_version() != 0) {
    _this->_internal_set_zas_version(from._internal_zas_version());
  }
  if (from._internal_shentong_upgrade_point_use_num() != 0) {
    _this->_internal_set_shentong_upgrade_point_use_num(from._internal_shentong_upgrade_point_use_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleZasData::CopyFrom(const RoleZasData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleZasData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleZasData::IsInitialized() const {
  return true;
}

void RoleZasData::InternalSwap(RoleZasData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleZasData, _impl_.shentong_upgrade_point_use_num_)
      + sizeof(RoleZasData::_impl_.shentong_upgrade_point_use_num_)
      - PROTOBUF_FIELD_OFFSET(RoleZasData, _impl_.zas_ability_)>(
          reinterpret_cast<char*>(&_impl_.zas_ability_),
          reinterpret_cast<char*>(&other->_impl_.zas_ability_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleZasData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[83]);
}

// ===================================================================

class AbilityPKResult::_Internal {
 public:
};

AbilityPKResult::AbilityPKResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AbilityPKResult)
}
AbilityPKResult::AbilityPKResult(const AbilityPKResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbilityPKResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instigator_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.additional_damage_){}
    , decltype(_impl_.is_hit_){}
    , decltype(_impl_.is_critical_){}
    , decltype(_impl_.is_countered_){}
    , decltype(_impl_.is_extremedamage_){}
    , decltype(_impl_.countereddamage_){}
    , decltype(_impl_.currentattackcount_){}
    , decltype(_impl_.shield_suckdamage_){}
    , decltype(_impl_.is_countered_critical_){}
    , decltype(_impl_.countered_shield_suckdamage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.instigator_, &from._impl_.instigator_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.countered_shield_suckdamage_) -
    reinterpret_cast<char*>(&_impl_.instigator_)) + sizeof(_impl_.countered_shield_suckdamage_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AbilityPKResult)
}

inline void AbilityPKResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instigator_){uint64_t{0u}}
    , decltype(_impl_.target_){uint64_t{0u}}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.additional_damage_){0}
    , decltype(_impl_.is_hit_){false}
    , decltype(_impl_.is_critical_){false}
    , decltype(_impl_.is_countered_){false}
    , decltype(_impl_.is_extremedamage_){false}
    , decltype(_impl_.countereddamage_){0}
    , decltype(_impl_.currentattackcount_){0}
    , decltype(_impl_.shield_suckdamage_){0}
    , decltype(_impl_.is_countered_critical_){false}
    , decltype(_impl_.countered_shield_suckdamage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AbilityPKResult::~AbilityPKResult() {
  // @@protoc_insertion_point(destructor:idlepb.AbilityPKResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbilityPKResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AbilityPKResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbilityPKResult::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AbilityPKResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.instigator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.countered_shield_suckdamage_) -
      reinterpret_cast<char*>(&_impl_.instigator_)) + sizeof(_impl_.countered_shield_suckdamage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbilityPKResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 instigator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.instigator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float damage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float additional_damage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.additional_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool is_hit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_critical = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.is_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_countered = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.is_countered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_extremedamage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.is_extremedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float countereddamage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.countereddamage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 currentattackcount = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.currentattackcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float shield_suckdamage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _impl_.shield_suckdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool is_countered_critical = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.is_countered_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float countered_shield_suckdamage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _impl_.countered_shield_suckdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbilityPKResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AbilityPKResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 instigator = 1;
  if (this->_internal_instigator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_instigator(), target);
  }

  // uint64 target = 2;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target(), target);
  }

  // float damage = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_damage(), target);
  }

  // float additional_damage = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_additional_damage = this->_internal_additional_damage();
  uint32_t raw_additional_damage;
  memcpy(&raw_additional_damage, &tmp_additional_damage, sizeof(tmp_additional_damage));
  if (raw_additional_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_additional_damage(), target);
  }

  // bool is_hit = 12;
  if (this->_internal_is_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_hit(), target);
  }

  // bool is_critical = 13;
  if (this->_internal_is_critical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_critical(), target);
  }

  // bool is_countered = 14;
  if (this->_internal_is_countered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_is_countered(), target);
  }

  // bool is_extremedamage = 15;
  if (this->_internal_is_extremedamage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_is_extremedamage(), target);
  }

  // float countereddamage = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_countereddamage = this->_internal_countereddamage();
  uint32_t raw_countereddamage;
  memcpy(&raw_countereddamage, &tmp_countereddamage, sizeof(tmp_countereddamage));
  if (raw_countereddamage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_countereddamage(), target);
  }

  // int32 currentattackcount = 17;
  if (this->_internal_currentattackcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_currentattackcount(), target);
  }

  // float shield_suckdamage = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shield_suckdamage = this->_internal_shield_suckdamage();
  uint32_t raw_shield_suckdamage;
  memcpy(&raw_shield_suckdamage, &tmp_shield_suckdamage, sizeof(tmp_shield_suckdamage));
  if (raw_shield_suckdamage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_shield_suckdamage(), target);
  }

  // bool is_countered_critical = 19;
  if (this->_internal_is_countered_critical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_is_countered_critical(), target);
  }

  // float countered_shield_suckdamage = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_countered_shield_suckdamage = this->_internal_countered_shield_suckdamage();
  uint32_t raw_countered_shield_suckdamage;
  memcpy(&raw_countered_shield_suckdamage, &tmp_countered_shield_suckdamage, sizeof(tmp_countered_shield_suckdamage));
  if (raw_countered_shield_suckdamage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_countered_shield_suckdamage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AbilityPKResult)
  return target;
}

size_t AbilityPKResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AbilityPKResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 instigator = 1;
  if (this->_internal_instigator() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_instigator());
  }

  // uint64 target = 2;
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_target());
  }

  // float damage = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    total_size += 1 + 4;
  }

  // float additional_damage = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_additional_damage = this->_internal_additional_damage();
  uint32_t raw_additional_damage;
  memcpy(&raw_additional_damage, &tmp_additional_damage, sizeof(tmp_additional_damage));
  if (raw_additional_damage != 0) {
    total_size += 1 + 4;
  }

  // bool is_hit = 12;
  if (this->_internal_is_hit() != 0) {
    total_size += 1 + 1;
  }

  // bool is_critical = 13;
  if (this->_internal_is_critical() != 0) {
    total_size += 1 + 1;
  }

  // bool is_countered = 14;
  if (this->_internal_is_countered() != 0) {
    total_size += 1 + 1;
  }

  // bool is_extremedamage = 15;
  if (this->_internal_is_extremedamage() != 0) {
    total_size += 1 + 1;
  }

  // float countereddamage = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_countereddamage = this->_internal_countereddamage();
  uint32_t raw_countereddamage;
  memcpy(&raw_countereddamage, &tmp_countereddamage, sizeof(tmp_countereddamage));
  if (raw_countereddamage != 0) {
    total_size += 2 + 4;
  }

  // int32 currentattackcount = 17;
  if (this->_internal_currentattackcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_currentattackcount());
  }

  // float shield_suckdamage = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shield_suckdamage = this->_internal_shield_suckdamage();
  uint32_t raw_shield_suckdamage;
  memcpy(&raw_shield_suckdamage, &tmp_shield_suckdamage, sizeof(tmp_shield_suckdamage));
  if (raw_shield_suckdamage != 0) {
    total_size += 2 + 4;
  }

  // bool is_countered_critical = 19;
  if (this->_internal_is_countered_critical() != 0) {
    total_size += 2 + 1;
  }

  // float countered_shield_suckdamage = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_countered_shield_suckdamage = this->_internal_countered_shield_suckdamage();
  uint32_t raw_countered_shield_suckdamage;
  memcpy(&raw_countered_shield_suckdamage, &tmp_countered_shield_suckdamage, sizeof(tmp_countered_shield_suckdamage));
  if (raw_countered_shield_suckdamage != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbilityPKResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbilityPKResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbilityPKResult::GetClassData() const { return &_class_data_; }


void AbilityPKResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbilityPKResult*>(&to_msg);
  auto& from = static_cast<const AbilityPKResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AbilityPKResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instigator() != 0) {
    _this->_internal_set_instigator(from._internal_instigator());
  }
  if (from._internal_target() != 0) {
    _this->_internal_set_target(from._internal_target());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = from._internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_additional_damage = from._internal_additional_damage();
  uint32_t raw_additional_damage;
  memcpy(&raw_additional_damage, &tmp_additional_damage, sizeof(tmp_additional_damage));
  if (raw_additional_damage != 0) {
    _this->_internal_set_additional_damage(from._internal_additional_damage());
  }
  if (from._internal_is_hit() != 0) {
    _this->_internal_set_is_hit(from._internal_is_hit());
  }
  if (from._internal_is_critical() != 0) {
    _this->_internal_set_is_critical(from._internal_is_critical());
  }
  if (from._internal_is_countered() != 0) {
    _this->_internal_set_is_countered(from._internal_is_countered());
  }
  if (from._internal_is_extremedamage() != 0) {
    _this->_internal_set_is_extremedamage(from._internal_is_extremedamage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_countereddamage = from._internal_countereddamage();
  uint32_t raw_countereddamage;
  memcpy(&raw_countereddamage, &tmp_countereddamage, sizeof(tmp_countereddamage));
  if (raw_countereddamage != 0) {
    _this->_internal_set_countereddamage(from._internal_countereddamage());
  }
  if (from._internal_currentattackcount() != 0) {
    _this->_internal_set_currentattackcount(from._internal_currentattackcount());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shield_suckdamage = from._internal_shield_suckdamage();
  uint32_t raw_shield_suckdamage;
  memcpy(&raw_shield_suckdamage, &tmp_shield_suckdamage, sizeof(tmp_shield_suckdamage));
  if (raw_shield_suckdamage != 0) {
    _this->_internal_set_shield_suckdamage(from._internal_shield_suckdamage());
  }
  if (from._internal_is_countered_critical() != 0) {
    _this->_internal_set_is_countered_critical(from._internal_is_countered_critical());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_countered_shield_suckdamage = from._internal_countered_shield_suckdamage();
  uint32_t raw_countered_shield_suckdamage;
  memcpy(&raw_countered_shield_suckdamage, &tmp_countered_shield_suckdamage, sizeof(tmp_countered_shield_suckdamage));
  if (raw_countered_shield_suckdamage != 0) {
    _this->_internal_set_countered_shield_suckdamage(from._internal_countered_shield_suckdamage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbilityPKResult::CopyFrom(const AbilityPKResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AbilityPKResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityPKResult::IsInitialized() const {
  return true;
}

void AbilityPKResult::InternalSwap(AbilityPKResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbilityPKResult, _impl_.countered_shield_suckdamage_)
      + sizeof(AbilityPKResult::_impl_.countered_shield_suckdamage_)
      - PROTOBUF_FIELD_OFFSET(AbilityPKResult, _impl_.instigator_)>(
          reinterpret_cast<char*>(&_impl_.instigator_),
          reinterpret_cast<char*>(&other->_impl_.instigator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbilityPKResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[84]);
}

// ===================================================================

class AbilityActiveResult::_Internal {
 public:
};

AbilityActiveResult::AbilityActiveResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.AbilityActiveResult)
}
AbilityActiveResult::AbilityActiveResult(const AbilityActiveResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbilityActiveResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.effects_){from._impl_.effects_}
    , /*decltype(_impl_._effects_cached_byte_size_)*/{0}
    , decltype(_impl_.eid_){}
    , decltype(_impl_.ability_){}
    , decltype(_impl_.ability_unique_id_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.eid_, &from._impl_.eid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.eid_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:idlepb.AbilityActiveResult)
}

inline void AbilityActiveResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.effects_){arena}
    , /*decltype(_impl_._effects_cached_byte_size_)*/{0}
    , decltype(_impl_.eid_){uint64_t{0u}}
    , decltype(_impl_.ability_){0}
    , decltype(_impl_.ability_unique_id_){0}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AbilityActiveResult::~AbilityActiveResult() {
  // @@protoc_insertion_point(destructor:idlepb.AbilityActiveResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbilityActiveResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.effects_.~RepeatedField();
}

void AbilityActiveResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbilityActiveResult::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.AbilityActiveResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _impl_.effects_.Clear();
  ::memset(&_impl_.eid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.eid_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbilityActiveResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 eid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.eid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ability_unique_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ability_unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.AbilityActiveErrorCode error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::idlepb::AbilityActiveErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.AbilityPKResult results = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 effects = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_effects(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_effects(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbilityActiveResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.AbilityActiveResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 eid = 1;
  if (this->_internal_eid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_eid(), target);
  }

  // int32 ability = 2;
  if (this->_internal_ability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ability(), target);
  }

  // int32 ability_unique_id = 3;
  if (this->_internal_ability_unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ability_unique_id(), target);
  }

  // .idlepb.AbilityActiveErrorCode error = 4;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_error(), target);
  }

  // repeated .idlepb.AbilityPKResult results = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 effects = 6;
  {
    int byte_size = _impl_._effects_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_effects(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.AbilityActiveResult)
  return target;
}

size_t AbilityActiveResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.AbilityActiveResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.AbilityPKResult results = 5;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 effects = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.effects_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._effects_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 eid = 1;
  if (this->_internal_eid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_eid());
  }

  // int32 ability = 2;
  if (this->_internal_ability() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability());
  }

  // int32 ability_unique_id = 3;
  if (this->_internal_ability_unique_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_unique_id());
  }

  // .idlepb.AbilityActiveErrorCode error = 4;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbilityActiveResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbilityActiveResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbilityActiveResult::GetClassData() const { return &_class_data_; }


void AbilityActiveResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbilityActiveResult*>(&to_msg);
  auto& from = static_cast<const AbilityActiveResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.AbilityActiveResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  _this->_impl_.effects_.MergeFrom(from._impl_.effects_);
  if (from._internal_eid() != 0) {
    _this->_internal_set_eid(from._internal_eid());
  }
  if (from._internal_ability() != 0) {
    _this->_internal_set_ability(from._internal_ability());
  }
  if (from._internal_ability_unique_id() != 0) {
    _this->_internal_set_ability_unique_id(from._internal_ability_unique_id());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbilityActiveResult::CopyFrom(const AbilityActiveResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.AbilityActiveResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityActiveResult::IsInitialized() const {
  return true;
}

void AbilityActiveResult::InternalSwap(AbilityActiveResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  _impl_.effects_.InternalSwap(&other->_impl_.effects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbilityActiveResult, _impl_.error_)
      + sizeof(AbilityActiveResult::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(AbilityActiveResult, _impl_.eid_)>(
          reinterpret_cast<char*>(&_impl_.eid_),
          reinterpret_cast<char*>(&other->_impl_.eid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbilityActiveResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[85]);
}

// ===================================================================

class ShanhetuItem::_Internal {
 public:
};

ShanhetuItem::ShanhetuItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ShanhetuItem)
}
ShanhetuItem::ShanhetuItem(const ShanhetuItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShanhetuItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ShanhetuItem)
}

inline void ShanhetuItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0}
    , decltype(_impl_.num_){0}
    , decltype(_impl_.weight_){0}
    , decltype(_impl_.score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShanhetuItem::~ShanhetuItem() {
  // @@protoc_insertion_point(destructor:idlepb.ShanhetuItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShanhetuItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShanhetuItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShanhetuItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ShanhetuItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.score_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShanhetuItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShanhetuItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ShanhetuItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // int32 weight = 3;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_weight(), target);
  }

  // int32 score = 4;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ShanhetuItem)
  return target;
}

size_t ShanhetuItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ShanhetuItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  // int32 weight = 3;
  if (this->_internal_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_weight());
  }

  // int32 score = 4;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShanhetuItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShanhetuItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShanhetuItem::GetClassData() const { return &_class_data_; }


void ShanhetuItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShanhetuItem*>(&to_msg);
  auto& from = static_cast<const ShanhetuItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ShanhetuItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_weight() != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShanhetuItem::CopyFrom(const ShanhetuItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ShanhetuItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShanhetuItem::IsInitialized() const {
  return true;
}

void ShanhetuItem::InternalSwap(ShanhetuItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShanhetuItem, _impl_.score_)
      + sizeof(ShanhetuItem::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(ShanhetuItem, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShanhetuItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[86]);
}

// ===================================================================

class ShanhetuRecord::_Internal {
 public:
};

ShanhetuRecord::ShanhetuRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ShanhetuRecord)
}
ShanhetuRecord::ShanhetuRecord(const ShanhetuRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShanhetuRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.scale_id_){}
    , decltype(_impl_.use_time_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.uid_, &from._impl_.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ShanhetuRecord)
}

inline void ShanhetuRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.uid_){int64_t{0}}
    , decltype(_impl_.item_id_){0}
    , decltype(_impl_.scale_id_){0}
    , decltype(_impl_.use_time_){int64_t{0}}
    , decltype(_impl_.score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShanhetuRecord::~ShanhetuRecord() {
  // @@protoc_insertion_point(destructor:idlepb.ShanhetuRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShanhetuRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ShanhetuRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShanhetuRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ShanhetuRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.score_) -
      reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShanhetuRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scale_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.scale_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ShanhetuItem items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 use_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.use_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShanhetuRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ShanhetuRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uid = 1;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_uid(), target);
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_id(), target);
  }

  // int32 scale_id = 3;
  if (this->_internal_scale_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_scale_id(), target);
  }

  // int32 score = 4;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_score(), target);
  }

  // repeated .idlepb.ShanhetuItem items = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 use_time = 6;
  if (this->_internal_use_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_use_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ShanhetuRecord)
  return target;
}

size_t ShanhetuRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ShanhetuRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ShanhetuItem items = 5;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 uid = 1;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uid());
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
  }

  // int32 scale_id = 3;
  if (this->_internal_scale_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scale_id());
  }

  // int64 use_time = 6;
  if (this->_internal_use_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_use_time());
  }

  // int32 score = 4;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShanhetuRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShanhetuRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShanhetuRecord::GetClassData() const { return &_class_data_; }


void ShanhetuRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShanhetuRecord*>(&to_msg);
  auto& from = static_cast<const ShanhetuRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ShanhetuRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_scale_id() != 0) {
    _this->_internal_set_scale_id(from._internal_scale_id());
  }
  if (from._internal_use_time() != 0) {
    _this->_internal_set_use_time(from._internal_use_time());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShanhetuRecord::CopyFrom(const ShanhetuRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ShanhetuRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShanhetuRecord::IsInitialized() const {
  return true;
}

void ShanhetuRecord::InternalSwap(ShanhetuRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShanhetuRecord, _impl_.score_)
      + sizeof(ShanhetuRecord::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(ShanhetuRecord, _impl_.uid_)>(
          reinterpret_cast<char*>(&_impl_.uid_),
          reinterpret_cast<char*>(&other->_impl_.uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShanhetuRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[87]);
}

// ===================================================================

class ShanhetuBlock::_Internal {
 public:
  static const ::idlepb::ShanhetuItem& item(const ShanhetuBlock* msg);
};

const ::idlepb::ShanhetuItem&
ShanhetuBlock::_Internal::item(const ShanhetuBlock* msg) {
  return *msg->_impl_.item_;
}
ShanhetuBlock::ShanhetuBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ShanhetuBlock)
}
ShanhetuBlock::ShanhetuBlock(const ShanhetuBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShanhetuBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.event_cfg_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::idlepb::ShanhetuItem(*from._impl_.item_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_cfg_id_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.event_cfg_id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ShanhetuBlock)
}

inline void ShanhetuBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.event_cfg_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShanhetuBlock::~ShanhetuBlock() {
  // @@protoc_insertion_point(destructor:idlepb.ShanhetuBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShanhetuBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void ShanhetuBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShanhetuBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ShanhetuBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.event_cfg_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.event_cfg_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShanhetuBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ShanhetuItem item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 event_cfg_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.event_cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShanhetuBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ShanhetuBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 quality = 2;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_quality(), target);
  }

  // .idlepb.ShanhetuItem item = 3;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // int32 event_cfg_id = 11;
  if (this->_internal_event_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_event_cfg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ShanhetuBlock)
  return target;
}

size_t ShanhetuBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ShanhetuBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.ShanhetuItem item = 3;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 quality = 2;
  if (this->_internal_quality() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
  }

  // int32 event_cfg_id = 11;
  if (this->_internal_event_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_cfg_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShanhetuBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShanhetuBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShanhetuBlock::GetClassData() const { return &_class_data_; }


void ShanhetuBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShanhetuBlock*>(&to_msg);
  auto& from = static_cast<const ShanhetuBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ShanhetuBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::idlepb::ShanhetuItem::MergeFrom(
        from._internal_item());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  if (from._internal_event_cfg_id() != 0) {
    _this->_internal_set_event_cfg_id(from._internal_event_cfg_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShanhetuBlock::CopyFrom(const ShanhetuBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ShanhetuBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShanhetuBlock::IsInitialized() const {
  return true;
}

void ShanhetuBlock::InternalSwap(ShanhetuBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShanhetuBlock, _impl_.event_cfg_id_)
      + sizeof(ShanhetuBlock::_impl_.event_cfg_id_)
      - PROTOBUF_FIELD_OFFSET(ShanhetuBlock, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShanhetuBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[88]);
}

// ===================================================================

class ShanhetuBlockRow::_Internal {
 public:
};

ShanhetuBlockRow::ShanhetuBlockRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ShanhetuBlockRow)
}
ShanhetuBlockRow::ShanhetuBlockRow(const ShanhetuBlockRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShanhetuBlockRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){from._impl_.blocks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.ShanhetuBlockRow)
}

inline void ShanhetuBlockRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShanhetuBlockRow::~ShanhetuBlockRow() {
  // @@protoc_insertion_point(destructor:idlepb.ShanhetuBlockRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShanhetuBlockRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedPtrField();
}

void ShanhetuBlockRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShanhetuBlockRow::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ShanhetuBlockRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShanhetuBlockRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.ShanhetuBlock blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShanhetuBlockRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ShanhetuBlockRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.ShanhetuBlock blocks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ShanhetuBlockRow)
  return target;
}

size_t ShanhetuBlockRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ShanhetuBlockRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ShanhetuBlock blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShanhetuBlockRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShanhetuBlockRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShanhetuBlockRow::GetClassData() const { return &_class_data_; }


void ShanhetuBlockRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShanhetuBlockRow*>(&to_msg);
  auto& from = static_cast<const ShanhetuBlockRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ShanhetuBlockRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShanhetuBlockRow::CopyFrom(const ShanhetuBlockRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ShanhetuBlockRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShanhetuBlockRow::IsInitialized() const {
  return true;
}

void ShanhetuBlockRow::InternalSwap(ShanhetuBlockRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShanhetuBlockRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[89]);
}

// ===================================================================

class ShanhetuMap::_Internal {
 public:
  static const ::idlepb::ShanhetuRecord& record(const ShanhetuMap* msg);
};

const ::idlepb::ShanhetuRecord&
ShanhetuMap::_Internal::record(const ShanhetuMap* msg) {
  return *msg->_impl_.record_;
}
ShanhetuMap::ShanhetuMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ShanhetuMap)
}
ShanhetuMap::ShanhetuMap(const ShanhetuMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShanhetuMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_){from._impl_.map_}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.done_){}
    , decltype(_impl_.current_row_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_record()) {
    _this->_impl_.record_ = new ::idlepb::ShanhetuRecord(*from._impl_.record_);
  }
  ::memcpy(&_impl_.done_, &from._impl_.done_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_row_) -
    reinterpret_cast<char*>(&_impl_.done_)) + sizeof(_impl_.current_row_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ShanhetuMap)
}

inline void ShanhetuMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_){arena}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.done_){false}
    , decltype(_impl_.current_row_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShanhetuMap::~ShanhetuMap() {
  // @@protoc_insertion_point(destructor:idlepb.ShanhetuMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShanhetuMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.record_;
}

void ShanhetuMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShanhetuMap::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ShanhetuMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
  ::memset(&_impl_.done_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.current_row_) -
      reinterpret_cast<char*>(&_impl_.done_)) + sizeof(_impl_.current_row_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShanhetuMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool done = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 current_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.current_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ShanhetuRecord record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ShanhetuBlockRow map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShanhetuMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ShanhetuMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool done = 1;
  if (this->_internal_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_done(), target);
  }

  // int32 current_row = 2;
  if (this->_internal_current_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_row(), target);
  }

  // .idlepb.ShanhetuRecord record = 3;
  if (this->_internal_has_record()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::record(this),
        _Internal::record(this).GetCachedSize(), target, stream);
  }

  // repeated .idlepb.ShanhetuBlockRow map = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ShanhetuMap)
  return target;
}

size_t ShanhetuMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ShanhetuMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ShanhetuBlockRow map = 4;
  total_size += 1UL * this->_internal_map_size();
  for (const auto& msg : this->_impl_.map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .idlepb.ShanhetuRecord record = 3;
  if (this->_internal_has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.record_);
  }

  // bool done = 1;
  if (this->_internal_done() != 0) {
    total_size += 1 + 1;
  }

  // int32 current_row = 2;
  if (this->_internal_current_row() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_row());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShanhetuMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShanhetuMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShanhetuMap::GetClassData() const { return &_class_data_; }


void ShanhetuMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShanhetuMap*>(&to_msg);
  auto& from = static_cast<const ShanhetuMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ShanhetuMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_.MergeFrom(from._impl_.map_);
  if (from._internal_has_record()) {
    _this->_internal_mutable_record()->::idlepb::ShanhetuRecord::MergeFrom(
        from._internal_record());
  }
  if (from._internal_done() != 0) {
    _this->_internal_set_done(from._internal_done());
  }
  if (from._internal_current_row() != 0) {
    _this->_internal_set_current_row(from._internal_current_row());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShanhetuMap::CopyFrom(const ShanhetuMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ShanhetuMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShanhetuMap::IsInitialized() const {
  return true;
}

void ShanhetuMap::InternalSwap(ShanhetuMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_.InternalSwap(&other->_impl_.map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShanhetuMap, _impl_.current_row_)
      + sizeof(ShanhetuMap::_impl_.current_row_)
      - PROTOBUF_FIELD_OFFSET(ShanhetuMap, _impl_.record_)>(
          reinterpret_cast<char*>(&_impl_.record_),
          reinterpret_cast<char*>(&other->_impl_.record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShanhetuMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[90]);
}

// ===================================================================

class RoleShanhetuData::_Internal {
 public:
  static const ::idlepb::ShanhetuMap& current_map(const RoleShanhetuData* msg);
};

const ::idlepb::ShanhetuMap&
RoleShanhetuData::_Internal::current_map(const RoleShanhetuData* msg) {
  return *msg->_impl_.current_map_;
}
RoleShanhetuData::RoleShanhetuData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleShanhetuData)
}
RoleShanhetuData::RoleShanhetuData(const RoleShanhetuData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleShanhetuData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){from._impl_.records_}
    , decltype(_impl_.current_map_){nullptr}
    , decltype(_impl_.auto_skip_green_){}
    , decltype(_impl_.auto_skip_blue_){}
    , decltype(_impl_.auto_skip_perpo_){}
    , decltype(_impl_.auto_skip_gold_){}
    , decltype(_impl_.auto_skip_red_){}
    , decltype(_impl_.total_num_){}
    , decltype(_impl_.last_update_date_){}
    , decltype(_impl_.auto_select_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_map()) {
    _this->_impl_.current_map_ = new ::idlepb::ShanhetuMap(*from._impl_.current_map_);
  }
  ::memcpy(&_impl_.auto_skip_green_, &from._impl_.auto_skip_green_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auto_select_) -
    reinterpret_cast<char*>(&_impl_.auto_skip_green_)) + sizeof(_impl_.auto_select_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleShanhetuData)
}

inline void RoleShanhetuData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){arena}
    , decltype(_impl_.current_map_){nullptr}
    , decltype(_impl_.auto_skip_green_){false}
    , decltype(_impl_.auto_skip_blue_){false}
    , decltype(_impl_.auto_skip_perpo_){false}
    , decltype(_impl_.auto_skip_gold_){false}
    , decltype(_impl_.auto_skip_red_){false}
    , decltype(_impl_.total_num_){int64_t{0}}
    , decltype(_impl_.last_update_date_){int64_t{0}}
    , decltype(_impl_.auto_select_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleShanhetuData::~RoleShanhetuData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleShanhetuData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleShanhetuData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.records_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.current_map_;
}

void RoleShanhetuData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleShanhetuData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleShanhetuData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.records_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.current_map_ != nullptr) {
    delete _impl_.current_map_;
  }
  _impl_.current_map_ = nullptr;
  ::memset(&_impl_.auto_skip_green_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.auto_select_) -
      reinterpret_cast<char*>(&_impl_.auto_skip_green_)) + sizeof(_impl_.auto_select_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleShanhetuData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool auto_skip_green = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.auto_skip_green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_skip_blue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.auto_skip_blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_skip_perpo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.auto_skip_perpo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_skip_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.auto_skip_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_skip_red = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.auto_skip_red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 auto_select = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.auto_select_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ShanhetuMap current_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ShanhetuRecord records = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 last_update_date = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.last_update_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleShanhetuData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleShanhetuData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool auto_skip_green = 1;
  if (this->_internal_auto_skip_green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_auto_skip_green(), target);
  }

  // bool auto_skip_blue = 2;
  if (this->_internal_auto_skip_blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_auto_skip_blue(), target);
  }

  // bool auto_skip_perpo = 3;
  if (this->_internal_auto_skip_perpo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_auto_skip_perpo(), target);
  }

  // bool auto_skip_gold = 4;
  if (this->_internal_auto_skip_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_skip_gold(), target);
  }

  // bool auto_skip_red = 5;
  if (this->_internal_auto_skip_red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_auto_skip_red(), target);
  }

  // int32 auto_select = 6;
  if (this->_internal_auto_select() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_auto_select(), target);
  }

  // .idlepb.ShanhetuMap current_map = 7;
  if (this->_internal_has_current_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::current_map(this),
        _Internal::current_map(this).GetCachedSize(), target, stream);
  }

  // int64 total_num = 8;
  if (this->_internal_total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_total_num(), target);
  }

  // repeated .idlepb.ShanhetuRecord records = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 last_update_date = 12;
  if (this->_internal_last_update_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_last_update_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleShanhetuData)
  return target;
}

size_t RoleShanhetuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleShanhetuData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ShanhetuRecord records = 9;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->_impl_.records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .idlepb.ShanhetuMap current_map = 7;
  if (this->_internal_has_current_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_map_);
  }

  // bool auto_skip_green = 1;
  if (this->_internal_auto_skip_green() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_skip_blue = 2;
  if (this->_internal_auto_skip_blue() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_skip_perpo = 3;
  if (this->_internal_auto_skip_perpo() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_skip_gold = 4;
  if (this->_internal_auto_skip_gold() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_skip_red = 5;
  if (this->_internal_auto_skip_red() != 0) {
    total_size += 1 + 1;
  }

  // int64 total_num = 8;
  if (this->_internal_total_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_num());
  }

  // int64 last_update_date = 12;
  if (this->_internal_last_update_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_update_date());
  }

  // int32 auto_select = 6;
  if (this->_internal_auto_select() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_auto_select());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleShanhetuData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleShanhetuData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleShanhetuData::GetClassData() const { return &_class_data_; }


void RoleShanhetuData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleShanhetuData*>(&to_msg);
  auto& from = static_cast<const RoleShanhetuData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleShanhetuData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.records_.MergeFrom(from._impl_.records_);
  if (from._internal_has_current_map()) {
    _this->_internal_mutable_current_map()->::idlepb::ShanhetuMap::MergeFrom(
        from._internal_current_map());
  }
  if (from._internal_auto_skip_green() != 0) {
    _this->_internal_set_auto_skip_green(from._internal_auto_skip_green());
  }
  if (from._internal_auto_skip_blue() != 0) {
    _this->_internal_set_auto_skip_blue(from._internal_auto_skip_blue());
  }
  if (from._internal_auto_skip_perpo() != 0) {
    _this->_internal_set_auto_skip_perpo(from._internal_auto_skip_perpo());
  }
  if (from._internal_auto_skip_gold() != 0) {
    _this->_internal_set_auto_skip_gold(from._internal_auto_skip_gold());
  }
  if (from._internal_auto_skip_red() != 0) {
    _this->_internal_set_auto_skip_red(from._internal_auto_skip_red());
  }
  if (from._internal_total_num() != 0) {
    _this->_internal_set_total_num(from._internal_total_num());
  }
  if (from._internal_last_update_date() != 0) {
    _this->_internal_set_last_update_date(from._internal_last_update_date());
  }
  if (from._internal_auto_select() != 0) {
    _this->_internal_set_auto_select(from._internal_auto_select());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleShanhetuData::CopyFrom(const RoleShanhetuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleShanhetuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleShanhetuData::IsInitialized() const {
  return true;
}

void RoleShanhetuData::InternalSwap(RoleShanhetuData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.records_.InternalSwap(&other->_impl_.records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleShanhetuData, _impl_.auto_select_)
      + sizeof(RoleShanhetuData::_impl_.auto_select_)
      - PROTOBUF_FIELD_OFFSET(RoleShanhetuData, _impl_.current_map_)>(
          reinterpret_cast<char*>(&_impl_.current_map_),
          reinterpret_cast<char*>(&other->_impl_.current_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleShanhetuData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[91]);
}

// ===================================================================

class RoleLeaderboardData::_Internal {
 public:
  static const ::idlepb::ItemData& weapon(const RoleLeaderboardData* msg);
  static const ::idlepb::ItemData& ammor(const RoleLeaderboardData* msg);
  static const ::idlepb::ItemData& jewlery(const RoleLeaderboardData* msg);
  static const ::idlepb::ItemData& skill_weapon(const RoleLeaderboardData* msg);
  static const ::idlepb::ShanhetuRecord& shanhetu_history(const RoleLeaderboardData* msg);
  static const ::idlepb::ShanhetuRecord& shanhetu_week(const RoleLeaderboardData* msg);
};

const ::idlepb::ItemData&
RoleLeaderboardData::_Internal::weapon(const RoleLeaderboardData* msg) {
  return *msg->_impl_.weapon_;
}
const ::idlepb::ItemData&
RoleLeaderboardData::_Internal::ammor(const RoleLeaderboardData* msg) {
  return *msg->_impl_.ammor_;
}
const ::idlepb::ItemData&
RoleLeaderboardData::_Internal::jewlery(const RoleLeaderboardData* msg) {
  return *msg->_impl_.jewlery_;
}
const ::idlepb::ItemData&
RoleLeaderboardData::_Internal::skill_weapon(const RoleLeaderboardData* msg) {
  return *msg->_impl_.skill_weapon_;
}
const ::idlepb::ShanhetuRecord&
RoleLeaderboardData::_Internal::shanhetu_history(const RoleLeaderboardData* msg) {
  return *msg->_impl_.shanhetu_history_;
}
const ::idlepb::ShanhetuRecord&
RoleLeaderboardData::_Internal::shanhetu_week(const RoleLeaderboardData* msg) {
  return *msg->_impl_.shanhetu_week_;
}
RoleLeaderboardData::RoleLeaderboardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleLeaderboardData)
}
RoleLeaderboardData::RoleLeaderboardData(const RoleLeaderboardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleLeaderboardData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.has_received_challange_reward_){from._impl_.has_received_challange_reward_}
    , /*decltype(_impl_._has_received_challange_reward_cached_byte_size_)*/{0}
    , decltype(_impl_.rank_message_){}
    , decltype(_impl_.weapon_){nullptr}
    , decltype(_impl_.ammor_){nullptr}
    , decltype(_impl_.jewlery_){nullptr}
    , decltype(_impl_.skill_weapon_){nullptr}
    , decltype(_impl_.shanhetu_history_){nullptr}
    , decltype(_impl_.shanhetu_week_){nullptr}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.last_reset_time_){}
    , decltype(_impl_.blike_num_){}
    , decltype(_impl_.monster_tower_blike_num_){}
    , decltype(_impl_.fuze_rank_){}
    , decltype(_impl_.fuze_days_){}
    , decltype(_impl_.fuze_exp_){}
    , decltype(_impl_.fuze_leaderboard_rank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rank_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rank_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rank_message().empty()) {
    _this->_impl_.rank_message_.Set(from._internal_rank_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_weapon()) {
    _this->_impl_.weapon_ = new ::idlepb::ItemData(*from._impl_.weapon_);
  }
  if (from._internal_has_ammor()) {
    _this->_impl_.ammor_ = new ::idlepb::ItemData(*from._impl_.ammor_);
  }
  if (from._internal_has_jewlery()) {
    _this->_impl_.jewlery_ = new ::idlepb::ItemData(*from._impl_.jewlery_);
  }
  if (from._internal_has_skill_weapon()) {
    _this->_impl_.skill_weapon_ = new ::idlepb::ItemData(*from._impl_.skill_weapon_);
  }
  if (from._internal_has_shanhetu_history()) {
    _this->_impl_.shanhetu_history_ = new ::idlepb::ShanhetuRecord(*from._impl_.shanhetu_history_);
  }
  if (from._internal_has_shanhetu_week()) {
    _this->_impl_.shanhetu_week_ = new ::idlepb::ShanhetuRecord(*from._impl_.shanhetu_week_);
  }
  ::memcpy(&_impl_.role_id_, &from._impl_.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fuze_leaderboard_rank_) -
    reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.fuze_leaderboard_rank_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleLeaderboardData)
}

inline void RoleLeaderboardData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.has_received_challange_reward_){arena}
    , /*decltype(_impl_._has_received_challange_reward_cached_byte_size_)*/{0}
    , decltype(_impl_.rank_message_){}
    , decltype(_impl_.weapon_){nullptr}
    , decltype(_impl_.ammor_){nullptr}
    , decltype(_impl_.jewlery_){nullptr}
    , decltype(_impl_.skill_weapon_){nullptr}
    , decltype(_impl_.shanhetu_history_){nullptr}
    , decltype(_impl_.shanhetu_week_){nullptr}
    , decltype(_impl_.role_id_){int64_t{0}}
    , decltype(_impl_.last_reset_time_){int64_t{0}}
    , decltype(_impl_.blike_num_){0}
    , decltype(_impl_.monster_tower_blike_num_){0}
    , decltype(_impl_.fuze_rank_){0}
    , decltype(_impl_.fuze_days_){0}
    , decltype(_impl_.fuze_exp_){int64_t{0}}
    , decltype(_impl_.fuze_leaderboard_rank_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rank_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rank_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleLeaderboardData::~RoleLeaderboardData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleLeaderboardData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleLeaderboardData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.has_received_challange_reward_.~RepeatedField();
  _impl_.rank_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.weapon_;
  if (this != internal_default_instance()) delete _impl_.ammor_;
  if (this != internal_default_instance()) delete _impl_.jewlery_;
  if (this != internal_default_instance()) delete _impl_.skill_weapon_;
  if (this != internal_default_instance()) delete _impl_.shanhetu_history_;
  if (this != internal_default_instance()) delete _impl_.shanhetu_week_;
}

void RoleLeaderboardData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleLeaderboardData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleLeaderboardData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.has_received_challange_reward_.Clear();
  _impl_.rank_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.weapon_ != nullptr) {
    delete _impl_.weapon_;
  }
  _impl_.weapon_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ammor_ != nullptr) {
    delete _impl_.ammor_;
  }
  _impl_.ammor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.jewlery_ != nullptr) {
    delete _impl_.jewlery_;
  }
  _impl_.jewlery_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.skill_weapon_ != nullptr) {
    delete _impl_.skill_weapon_;
  }
  _impl_.skill_weapon_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shanhetu_history_ != nullptr) {
    delete _impl_.shanhetu_history_;
  }
  _impl_.shanhetu_history_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shanhetu_week_ != nullptr) {
    delete _impl_.shanhetu_week_;
  }
  _impl_.shanhetu_week_ = nullptr;
  ::memset(&_impl_.role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fuze_leaderboard_rank_) -
      reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.fuze_leaderboard_rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleLeaderboardData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 blike_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.blike_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_reset_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_reset_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rank_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rank_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.RoleLeaderboardData.rank_message"));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ItemData weapon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_weapon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ItemData ammor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ammor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ItemData jewlery = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_jewlery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ItemData skill_weapon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_skill_weapon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ShanhetuRecord shanhetu_history = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_shanhetu_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ShanhetuRecord shanhetu_week = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_shanhetu_week(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 monster_tower_blike_num = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.monster_tower_blike_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 has_received_challange_reward = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_has_received_challange_reward(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 184) {
          _internal_add_has_received_challange_reward(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fuze_rank = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.fuze_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fuze_days = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.fuze_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fuze_exp = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.fuze_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fuze_leaderboard_rank = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.fuze_leaderboard_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleLeaderboardData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleLeaderboardData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  // int32 blike_num = 2;
  if (this->_internal_blike_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_blike_num(), target);
  }

  // int64 last_reset_time = 4;
  if (this->_internal_last_reset_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_reset_time(), target);
  }

  // string rank_message = 5;
  if (!this->_internal_rank_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rank_message().data(), static_cast<int>(this->_internal_rank_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.RoleLeaderboardData.rank_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rank_message(), target);
  }

  // .idlepb.ItemData weapon = 6;
  if (this->_internal_has_weapon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::weapon(this),
        _Internal::weapon(this).GetCachedSize(), target, stream);
  }

  // .idlepb.ItemData ammor = 7;
  if (this->_internal_has_ammor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ammor(this),
        _Internal::ammor(this).GetCachedSize(), target, stream);
  }

  // .idlepb.ItemData jewlery = 8;
  if (this->_internal_has_jewlery()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::jewlery(this),
        _Internal::jewlery(this).GetCachedSize(), target, stream);
  }

  // .idlepb.ItemData skill_weapon = 9;
  if (this->_internal_has_skill_weapon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::skill_weapon(this),
        _Internal::skill_weapon(this).GetCachedSize(), target, stream);
  }

  // .idlepb.ShanhetuRecord shanhetu_history = 10;
  if (this->_internal_has_shanhetu_history()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::shanhetu_history(this),
        _Internal::shanhetu_history(this).GetCachedSize(), target, stream);
  }

  // .idlepb.ShanhetuRecord shanhetu_week = 11;
  if (this->_internal_has_shanhetu_week()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::shanhetu_week(this),
        _Internal::shanhetu_week(this).GetCachedSize(), target, stream);
  }

  // int32 monster_tower_blike_num = 22;
  if (this->_internal_monster_tower_blike_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_monster_tower_blike_num(), target);
  }

  // repeated int32 has_received_challange_reward = 23;
  {
    int byte_size = _impl_._has_received_challange_reward_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          23, _internal_has_received_challange_reward(), byte_size, target);
    }
  }

  // int32 fuze_rank = 24;
  if (this->_internal_fuze_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_fuze_rank(), target);
  }

  // int32 fuze_days = 25;
  if (this->_internal_fuze_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_fuze_days(), target);
  }

  // int64 fuze_exp = 26;
  if (this->_internal_fuze_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_fuze_exp(), target);
  }

  // int32 fuze_leaderboard_rank = 27;
  if (this->_internal_fuze_leaderboard_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_fuze_leaderboard_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleLeaderboardData)
  return target;
}

size_t RoleLeaderboardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleLeaderboardData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 has_received_challange_reward = 23;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.has_received_challange_reward_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._has_received_challange_reward_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string rank_message = 5;
  if (!this->_internal_rank_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rank_message());
  }

  // .idlepb.ItemData weapon = 6;
  if (this->_internal_has_weapon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weapon_);
  }

  // .idlepb.ItemData ammor = 7;
  if (this->_internal_has_ammor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ammor_);
  }

  // .idlepb.ItemData jewlery = 8;
  if (this->_internal_has_jewlery()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.jewlery_);
  }

  // .idlepb.ItemData skill_weapon = 9;
  if (this->_internal_has_skill_weapon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skill_weapon_);
  }

  // .idlepb.ShanhetuRecord shanhetu_history = 10;
  if (this->_internal_has_shanhetu_history()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shanhetu_history_);
  }

  // .idlepb.ShanhetuRecord shanhetu_week = 11;
  if (this->_internal_has_shanhetu_week()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shanhetu_week_);
  }

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_role_id());
  }

  // int64 last_reset_time = 4;
  if (this->_internal_last_reset_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_time());
  }

  // int32 blike_num = 2;
  if (this->_internal_blike_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_blike_num());
  }

  // int32 monster_tower_blike_num = 22;
  if (this->_internal_monster_tower_blike_num() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_monster_tower_blike_num());
  }

  // int32 fuze_rank = 24;
  if (this->_internal_fuze_rank() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_fuze_rank());
  }

  // int32 fuze_days = 25;
  if (this->_internal_fuze_days() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_fuze_days());
  }

  // int64 fuze_exp = 26;
  if (this->_internal_fuze_exp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_fuze_exp());
  }

  // int32 fuze_leaderboard_rank = 27;
  if (this->_internal_fuze_leaderboard_rank() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_fuze_leaderboard_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleLeaderboardData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleLeaderboardData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleLeaderboardData::GetClassData() const { return &_class_data_; }


void RoleLeaderboardData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleLeaderboardData*>(&to_msg);
  auto& from = static_cast<const RoleLeaderboardData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleLeaderboardData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.has_received_challange_reward_.MergeFrom(from._impl_.has_received_challange_reward_);
  if (!from._internal_rank_message().empty()) {
    _this->_internal_set_rank_message(from._internal_rank_message());
  }
  if (from._internal_has_weapon()) {
    _this->_internal_mutable_weapon()->::idlepb::ItemData::MergeFrom(
        from._internal_weapon());
  }
  if (from._internal_has_ammor()) {
    _this->_internal_mutable_ammor()->::idlepb::ItemData::MergeFrom(
        from._internal_ammor());
  }
  if (from._internal_has_jewlery()) {
    _this->_internal_mutable_jewlery()->::idlepb::ItemData::MergeFrom(
        from._internal_jewlery());
  }
  if (from._internal_has_skill_weapon()) {
    _this->_internal_mutable_skill_weapon()->::idlepb::ItemData::MergeFrom(
        from._internal_skill_weapon());
  }
  if (from._internal_has_shanhetu_history()) {
    _this->_internal_mutable_shanhetu_history()->::idlepb::ShanhetuRecord::MergeFrom(
        from._internal_shanhetu_history());
  }
  if (from._internal_has_shanhetu_week()) {
    _this->_internal_mutable_shanhetu_week()->::idlepb::ShanhetuRecord::MergeFrom(
        from._internal_shanhetu_week());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_last_reset_time() != 0) {
    _this->_internal_set_last_reset_time(from._internal_last_reset_time());
  }
  if (from._internal_blike_num() != 0) {
    _this->_internal_set_blike_num(from._internal_blike_num());
  }
  if (from._internal_monster_tower_blike_num() != 0) {
    _this->_internal_set_monster_tower_blike_num(from._internal_monster_tower_blike_num());
  }
  if (from._internal_fuze_rank() != 0) {
    _this->_internal_set_fuze_rank(from._internal_fuze_rank());
  }
  if (from._internal_fuze_days() != 0) {
    _this->_internal_set_fuze_days(from._internal_fuze_days());
  }
  if (from._internal_fuze_exp() != 0) {
    _this->_internal_set_fuze_exp(from._internal_fuze_exp());
  }
  if (from._internal_fuze_leaderboard_rank() != 0) {
    _this->_internal_set_fuze_leaderboard_rank(from._internal_fuze_leaderboard_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleLeaderboardData::CopyFrom(const RoleLeaderboardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleLeaderboardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLeaderboardData::IsInitialized() const {
  return true;
}

void RoleLeaderboardData::InternalSwap(RoleLeaderboardData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.has_received_challange_reward_.InternalSwap(&other->_impl_.has_received_challange_reward_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rank_message_, lhs_arena,
      &other->_impl_.rank_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleLeaderboardData, _impl_.fuze_leaderboard_rank_)
      + sizeof(RoleLeaderboardData::_impl_.fuze_leaderboard_rank_)
      - PROTOBUF_FIELD_OFFSET(RoleLeaderboardData, _impl_.weapon_)>(
          reinterpret_cast<char*>(&_impl_.weapon_),
          reinterpret_cast<char*>(&other->_impl_.weapon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleLeaderboardData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[92]);
}

// ===================================================================

class RoleMonsterTowerData::_Internal {
 public:
};

RoleMonsterTowerData::RoleMonsterTowerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleMonsterTowerData)
}
RoleMonsterTowerData::RoleMonsterTowerData(const RoleMonsterTowerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleMonsterTowerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.idle_during_ticks_){}
    , decltype(_impl_.last_floor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.idle_during_ticks_, &from._impl_.idle_during_ticks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_floor_) -
    reinterpret_cast<char*>(&_impl_.idle_during_ticks_)) + sizeof(_impl_.last_floor_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleMonsterTowerData)
}

inline void RoleMonsterTowerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.idle_during_ticks_){int64_t{0}}
    , decltype(_impl_.last_floor_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleMonsterTowerData::~RoleMonsterTowerData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleMonsterTowerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleMonsterTowerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleMonsterTowerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleMonsterTowerData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleMonsterTowerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.idle_during_ticks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_floor_) -
      reinterpret_cast<char*>(&_impl_.idle_during_ticks_)) + sizeof(_impl_.last_floor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleMonsterTowerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 last_floor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.last_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 idle_during_ticks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.idle_during_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleMonsterTowerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleMonsterTowerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 last_floor = 1;
  if (this->_internal_last_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_last_floor(), target);
  }

  // int64 idle_during_ticks = 2;
  if (this->_internal_idle_during_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_idle_during_ticks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleMonsterTowerData)
  return target;
}

size_t RoleMonsterTowerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleMonsterTowerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 idle_during_ticks = 2;
  if (this->_internal_idle_during_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_idle_during_ticks());
  }

  // int32 last_floor = 1;
  if (this->_internal_last_floor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_floor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleMonsterTowerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleMonsterTowerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleMonsterTowerData::GetClassData() const { return &_class_data_; }


void RoleMonsterTowerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleMonsterTowerData*>(&to_msg);
  auto& from = static_cast<const RoleMonsterTowerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleMonsterTowerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_idle_during_ticks() != 0) {
    _this->_internal_set_idle_during_ticks(from._internal_idle_during_ticks());
  }
  if (from._internal_last_floor() != 0) {
    _this->_internal_set_last_floor(from._internal_last_floor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleMonsterTowerData::CopyFrom(const RoleMonsterTowerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleMonsterTowerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMonsterTowerData::IsInitialized() const {
  return true;
}

void RoleMonsterTowerData::InternalSwap(RoleMonsterTowerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleMonsterTowerData, _impl_.last_floor_)
      + sizeof(RoleMonsterTowerData::_impl_.last_floor_)
      - PROTOBUF_FIELD_OFFSET(RoleMonsterTowerData, _impl_.idle_during_ticks_)>(
          reinterpret_cast<char*>(&_impl_.idle_during_ticks_),
          reinterpret_cast<char*>(&other->_impl_.idle_during_ticks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleMonsterTowerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[93]);
}

// ===================================================================

class RoleDungeonKillAllData::_Internal {
 public:
};

RoleDungeonKillAllData::RoleDungeonKillAllData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleDungeonKillAllData)
}
RoleDungeonKillAllData::RoleDungeonKillAllData(const RoleDungeonKillAllData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleDungeonKillAllData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.done_uid_){from._impl_.done_uid_}
    , /*decltype(_impl_._done_uid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleDungeonKillAllData)
}

inline void RoleDungeonKillAllData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.done_uid_){arena}
    , /*decltype(_impl_._done_uid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleDungeonKillAllData::~RoleDungeonKillAllData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleDungeonKillAllData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleDungeonKillAllData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.done_uid_.~RepeatedField();
}

void RoleDungeonKillAllData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleDungeonKillAllData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleDungeonKillAllData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.done_uid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDungeonKillAllData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 done_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_done_uid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_done_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleDungeonKillAllData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleDungeonKillAllData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 done_uid = 1;
  {
    int byte_size = _impl_._done_uid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_done_uid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleDungeonKillAllData)
  return target;
}

size_t RoleDungeonKillAllData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleDungeonKillAllData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 done_uid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.done_uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._done_uid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleDungeonKillAllData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleDungeonKillAllData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleDungeonKillAllData::GetClassData() const { return &_class_data_; }


void RoleDungeonKillAllData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleDungeonKillAllData*>(&to_msg);
  auto& from = static_cast<const RoleDungeonKillAllData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleDungeonKillAllData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.done_uid_.MergeFrom(from._impl_.done_uid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleDungeonKillAllData::CopyFrom(const RoleDungeonKillAllData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleDungeonKillAllData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDungeonKillAllData::IsInitialized() const {
  return true;
}

void RoleDungeonKillAllData::InternalSwap(RoleDungeonKillAllData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.done_uid_.InternalSwap(&other->_impl_.done_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDungeonKillAllData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[94]);
}

// ===================================================================

class RoleDungeonSurviveData::_Internal {
 public:
};

RoleDungeonSurviveData::RoleDungeonSurviveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleDungeonSurviveData)
}
RoleDungeonSurviveData::RoleDungeonSurviveData(const RoleDungeonSurviveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleDungeonSurviveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.done_uid_){from._impl_.done_uid_}
    , /*decltype(_impl_._done_uid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleDungeonSurviveData)
}

inline void RoleDungeonSurviveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.done_uid_){arena}
    , /*decltype(_impl_._done_uid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleDungeonSurviveData::~RoleDungeonSurviveData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleDungeonSurviveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleDungeonSurviveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.done_uid_.~RepeatedField();
}

void RoleDungeonSurviveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleDungeonSurviveData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleDungeonSurviveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.done_uid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDungeonSurviveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 done_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_done_uid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_done_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleDungeonSurviveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleDungeonSurviveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 done_uid = 1;
  {
    int byte_size = _impl_._done_uid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_done_uid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleDungeonSurviveData)
  return target;
}

size_t RoleDungeonSurviveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleDungeonSurviveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 done_uid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.done_uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._done_uid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleDungeonSurviveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleDungeonSurviveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleDungeonSurviveData::GetClassData() const { return &_class_data_; }


void RoleDungeonSurviveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleDungeonSurviveData*>(&to_msg);
  auto& from = static_cast<const RoleDungeonSurviveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleDungeonSurviveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.done_uid_.MergeFrom(from._impl_.done_uid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleDungeonSurviveData::CopyFrom(const RoleDungeonSurviveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleDungeonSurviveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDungeonSurviveData::IsInitialized() const {
  return true;
}

void RoleDungeonSurviveData::InternalSwap(RoleDungeonSurviveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.done_uid_.InternalSwap(&other->_impl_.done_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDungeonSurviveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[95]);
}

// ===================================================================

class BossInvasionRewardEntry::_Internal {
 public:
};

BossInvasionRewardEntry::BossInvasionRewardEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.BossInvasionRewardEntry)
}
BossInvasionRewardEntry::BossInvasionRewardEntry(const BossInvasionRewardEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BossInvasionRewardEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unique_id_){}
    , decltype(_impl_.arena_cfg_id_){}
    , decltype(_impl_.rank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.unique_id_, &from._impl_.unique_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rank_) -
    reinterpret_cast<char*>(&_impl_.unique_id_)) + sizeof(_impl_.rank_));
  // @@protoc_insertion_point(copy_constructor:idlepb.BossInvasionRewardEntry)
}

inline void BossInvasionRewardEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unique_id_){int64_t{0}}
    , decltype(_impl_.arena_cfg_id_){0}
    , decltype(_impl_.rank_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BossInvasionRewardEntry::~BossInvasionRewardEntry() {
  // @@protoc_insertion_point(destructor:idlepb.BossInvasionRewardEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BossInvasionRewardEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BossInvasionRewardEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BossInvasionRewardEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.BossInvasionRewardEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.unique_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rank_) -
      reinterpret_cast<char*>(&_impl_.unique_id_)) + sizeof(_impl_.rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BossInvasionRewardEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 arena_cfg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.arena_cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BossInvasionRewardEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.BossInvasionRewardEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 unique_id = 1;
  if (this->_internal_unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_unique_id(), target);
  }

  // int32 arena_cfg_id = 2;
  if (this->_internal_arena_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_arena_cfg_id(), target);
  }

  // int32 rank = 3;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.BossInvasionRewardEntry)
  return target;
}

size_t BossInvasionRewardEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.BossInvasionRewardEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 unique_id = 1;
  if (this->_internal_unique_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unique_id());
  }

  // int32 arena_cfg_id = 2;
  if (this->_internal_arena_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_arena_cfg_id());
  }

  // int32 rank = 3;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BossInvasionRewardEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BossInvasionRewardEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BossInvasionRewardEntry::GetClassData() const { return &_class_data_; }


void BossInvasionRewardEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BossInvasionRewardEntry*>(&to_msg);
  auto& from = static_cast<const BossInvasionRewardEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.BossInvasionRewardEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_unique_id() != 0) {
    _this->_internal_set_unique_id(from._internal_unique_id());
  }
  if (from._internal_arena_cfg_id() != 0) {
    _this->_internal_set_arena_cfg_id(from._internal_arena_cfg_id());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BossInvasionRewardEntry::CopyFrom(const BossInvasionRewardEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.BossInvasionRewardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossInvasionRewardEntry::IsInitialized() const {
  return true;
}

void BossInvasionRewardEntry::InternalSwap(BossInvasionRewardEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BossInvasionRewardEntry, _impl_.rank_)
      + sizeof(BossInvasionRewardEntry::_impl_.rank_)
      - PROTOBUF_FIELD_OFFSET(BossInvasionRewardEntry, _impl_.unique_id_)>(
          reinterpret_cast<char*>(&_impl_.unique_id_),
          reinterpret_cast<char*>(&other->_impl_.unique_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BossInvasionRewardEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[96]);
}

// ===================================================================

class BossInvasionKillRewardData::_Internal {
 public:
};

BossInvasionKillRewardData::BossInvasionKillRewardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.BossInvasionKillRewardData)
}
BossInvasionKillRewardData::BossInvasionKillRewardData(const BossInvasionKillRewardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BossInvasionKillRewardData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rewards_){from._impl_.rewards_}
    , decltype(_impl_.start_ticks_){}
    , decltype(_impl_.drawed_unique_id_){}
    , decltype(_impl_.is_draw_done_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_ticks_, &from._impl_.start_ticks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_draw_done_) -
    reinterpret_cast<char*>(&_impl_.start_ticks_)) + sizeof(_impl_.is_draw_done_));
  // @@protoc_insertion_point(copy_constructor:idlepb.BossInvasionKillRewardData)
}

inline void BossInvasionKillRewardData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rewards_){arena}
    , decltype(_impl_.start_ticks_){int64_t{0}}
    , decltype(_impl_.drawed_unique_id_){int64_t{0}}
    , decltype(_impl_.is_draw_done_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BossInvasionKillRewardData::~BossInvasionKillRewardData() {
  // @@protoc_insertion_point(destructor:idlepb.BossInvasionKillRewardData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BossInvasionKillRewardData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rewards_.~RepeatedPtrField();
}

void BossInvasionKillRewardData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BossInvasionKillRewardData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.BossInvasionKillRewardData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rewards_.Clear();
  ::memset(&_impl_.start_ticks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_draw_done_) -
      reinterpret_cast<char*>(&_impl_.start_ticks_)) + sizeof(_impl_.is_draw_done_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BossInvasionKillRewardData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_ticks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.BossInvasionRewardEntry rewards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_draw_done = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_draw_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 drawed_unique_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.drawed_unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BossInvasionKillRewardData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.BossInvasionKillRewardData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_ticks = 1;
  if (this->_internal_start_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_ticks(), target);
  }

  // repeated .idlepb.BossInvasionRewardEntry rewards = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_draw_done = 3;
  if (this->_internal_is_draw_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_draw_done(), target);
  }

  // int64 drawed_unique_id = 4;
  if (this->_internal_drawed_unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_drawed_unique_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.BossInvasionKillRewardData)
  return target;
}

size_t BossInvasionKillRewardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.BossInvasionKillRewardData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.BossInvasionRewardEntry rewards = 2;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->_impl_.rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 start_ticks = 1;
  if (this->_internal_start_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_ticks());
  }

  // int64 drawed_unique_id = 4;
  if (this->_internal_drawed_unique_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_drawed_unique_id());
  }

  // bool is_draw_done = 3;
  if (this->_internal_is_draw_done() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BossInvasionKillRewardData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BossInvasionKillRewardData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BossInvasionKillRewardData::GetClassData() const { return &_class_data_; }


void BossInvasionKillRewardData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BossInvasionKillRewardData*>(&to_msg);
  auto& from = static_cast<const BossInvasionKillRewardData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.BossInvasionKillRewardData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rewards_.MergeFrom(from._impl_.rewards_);
  if (from._internal_start_ticks() != 0) {
    _this->_internal_set_start_ticks(from._internal_start_ticks());
  }
  if (from._internal_drawed_unique_id() != 0) {
    _this->_internal_set_drawed_unique_id(from._internal_drawed_unique_id());
  }
  if (from._internal_is_draw_done() != 0) {
    _this->_internal_set_is_draw_done(from._internal_is_draw_done());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BossInvasionKillRewardData::CopyFrom(const BossInvasionKillRewardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.BossInvasionKillRewardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossInvasionKillRewardData::IsInitialized() const {
  return true;
}

void BossInvasionKillRewardData::InternalSwap(BossInvasionKillRewardData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rewards_.InternalSwap(&other->_impl_.rewards_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BossInvasionKillRewardData, _impl_.is_draw_done_)
      + sizeof(BossInvasionKillRewardData::_impl_.is_draw_done_)
      - PROTOBUF_FIELD_OFFSET(BossInvasionKillRewardData, _impl_.start_ticks_)>(
          reinterpret_cast<char*>(&_impl_.start_ticks_),
          reinterpret_cast<char*>(&other->_impl_.start_ticks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BossInvasionKillRewardData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[97]);
}

// ===================================================================

class BossInvasionDamageRewardData::_Internal {
 public:
};

BossInvasionDamageRewardData::BossInvasionDamageRewardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.BossInvasionDamageRewardData)
}
BossInvasionDamageRewardData::BossInvasionDamageRewardData(const BossInvasionDamageRewardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BossInvasionDamageRewardData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rewards_){from._impl_.rewards_}
    , decltype(_impl_.start_ticks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.start_ticks_ = from._impl_.start_ticks_;
  // @@protoc_insertion_point(copy_constructor:idlepb.BossInvasionDamageRewardData)
}

inline void BossInvasionDamageRewardData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rewards_){arena}
    , decltype(_impl_.start_ticks_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BossInvasionDamageRewardData::~BossInvasionDamageRewardData() {
  // @@protoc_insertion_point(destructor:idlepb.BossInvasionDamageRewardData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BossInvasionDamageRewardData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rewards_.~RepeatedPtrField();
}

void BossInvasionDamageRewardData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BossInvasionDamageRewardData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.BossInvasionDamageRewardData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rewards_.Clear();
  _impl_.start_ticks_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BossInvasionDamageRewardData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_ticks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.BossInvasionRewardEntry rewards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BossInvasionDamageRewardData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.BossInvasionDamageRewardData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_ticks = 1;
  if (this->_internal_start_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_ticks(), target);
  }

  // repeated .idlepb.BossInvasionRewardEntry rewards = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.BossInvasionDamageRewardData)
  return target;
}

size_t BossInvasionDamageRewardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.BossInvasionDamageRewardData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.BossInvasionRewardEntry rewards = 2;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->_impl_.rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 start_ticks = 1;
  if (this->_internal_start_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_ticks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BossInvasionDamageRewardData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BossInvasionDamageRewardData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BossInvasionDamageRewardData::GetClassData() const { return &_class_data_; }


void BossInvasionDamageRewardData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BossInvasionDamageRewardData*>(&to_msg);
  auto& from = static_cast<const BossInvasionDamageRewardData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.BossInvasionDamageRewardData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rewards_.MergeFrom(from._impl_.rewards_);
  if (from._internal_start_ticks() != 0) {
    _this->_internal_set_start_ticks(from._internal_start_ticks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BossInvasionDamageRewardData::CopyFrom(const BossInvasionDamageRewardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.BossInvasionDamageRewardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossInvasionDamageRewardData::IsInitialized() const {
  return true;
}

void BossInvasionDamageRewardData::InternalSwap(BossInvasionDamageRewardData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rewards_.InternalSwap(&other->_impl_.rewards_);
  swap(_impl_.start_ticks_, other->_impl_.start_ticks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BossInvasionDamageRewardData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[98]);
}

// ===================================================================

class RoleBossInvasionData::_Internal {
 public:
  static const ::idlepb::BossInvasionKillRewardData& kill_reward(const RoleBossInvasionData* msg);
};

const ::idlepb::BossInvasionKillRewardData&
RoleBossInvasionData::_Internal::kill_reward(const RoleBossInvasionData* msg) {
  return *msg->_impl_.kill_reward_;
}
RoleBossInvasionData::RoleBossInvasionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleBossInvasionData)
}
RoleBossInvasionData::RoleBossInvasionData(const RoleBossInvasionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleBossInvasionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.damage_reward_){from._impl_.damage_reward_}
    , decltype(_impl_.kill_reward_){nullptr}
    , decltype(_impl_.last_reset_ticks_){}
    , decltype(_impl_.drawed_unique_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kill_reward()) {
    _this->_impl_.kill_reward_ = new ::idlepb::BossInvasionKillRewardData(*from._impl_.kill_reward_);
  }
  ::memcpy(&_impl_.last_reset_ticks_, &from._impl_.last_reset_ticks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.drawed_unique_id_) -
    reinterpret_cast<char*>(&_impl_.last_reset_ticks_)) + sizeof(_impl_.drawed_unique_id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleBossInvasionData)
}

inline void RoleBossInvasionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.damage_reward_){arena}
    , decltype(_impl_.kill_reward_){nullptr}
    , decltype(_impl_.last_reset_ticks_){int64_t{0}}
    , decltype(_impl_.drawed_unique_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleBossInvasionData::~RoleBossInvasionData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleBossInvasionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleBossInvasionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.damage_reward_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.kill_reward_;
}

void RoleBossInvasionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleBossInvasionData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleBossInvasionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.damage_reward_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.kill_reward_ != nullptr) {
    delete _impl_.kill_reward_;
  }
  _impl_.kill_reward_ = nullptr;
  ::memset(&_impl_.last_reset_ticks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.drawed_unique_id_) -
      reinterpret_cast<char*>(&_impl_.last_reset_ticks_)) + sizeof(_impl_.drawed_unique_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleBossInvasionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 last_reset_ticks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.last_reset_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.BossInvasionKillRewardData kill_reward = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_kill_reward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.BossInvasionDamageRewardData damage_reward = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_damage_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 drawed_unique_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.drawed_unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleBossInvasionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleBossInvasionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_reset_ticks = 1;
  if (this->_internal_last_reset_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_reset_ticks(), target);
  }

  // .idlepb.BossInvasionKillRewardData kill_reward = 10;
  if (this->_internal_has_kill_reward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::kill_reward(this),
        _Internal::kill_reward(this).GetCachedSize(), target, stream);
  }

  // repeated .idlepb.BossInvasionDamageRewardData damage_reward = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_damage_reward_size()); i < n; i++) {
    const auto& repfield = this->_internal_damage_reward(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 drawed_unique_id = 14;
  if (this->_internal_drawed_unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_drawed_unique_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleBossInvasionData)
  return target;
}

size_t RoleBossInvasionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleBossInvasionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.BossInvasionDamageRewardData damage_reward = 12;
  total_size += 1UL * this->_internal_damage_reward_size();
  for (const auto& msg : this->_impl_.damage_reward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .idlepb.BossInvasionKillRewardData kill_reward = 10;
  if (this->_internal_has_kill_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kill_reward_);
  }

  // int64 last_reset_ticks = 1;
  if (this->_internal_last_reset_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_ticks());
  }

  // int64 drawed_unique_id = 14;
  if (this->_internal_drawed_unique_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_drawed_unique_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleBossInvasionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleBossInvasionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleBossInvasionData::GetClassData() const { return &_class_data_; }


void RoleBossInvasionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleBossInvasionData*>(&to_msg);
  auto& from = static_cast<const RoleBossInvasionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleBossInvasionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.damage_reward_.MergeFrom(from._impl_.damage_reward_);
  if (from._internal_has_kill_reward()) {
    _this->_internal_mutable_kill_reward()->::idlepb::BossInvasionKillRewardData::MergeFrom(
        from._internal_kill_reward());
  }
  if (from._internal_last_reset_ticks() != 0) {
    _this->_internal_set_last_reset_ticks(from._internal_last_reset_ticks());
  }
  if (from._internal_drawed_unique_id() != 0) {
    _this->_internal_set_drawed_unique_id(from._internal_drawed_unique_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleBossInvasionData::CopyFrom(const RoleBossInvasionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleBossInvasionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBossInvasionData::IsInitialized() const {
  return true;
}

void RoleBossInvasionData::InternalSwap(RoleBossInvasionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.damage_reward_.InternalSwap(&other->_impl_.damage_reward_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleBossInvasionData, _impl_.drawed_unique_id_)
      + sizeof(RoleBossInvasionData::_impl_.drawed_unique_id_)
      - PROTOBUF_FIELD_OFFSET(RoleBossInvasionData, _impl_.kill_reward_)>(
          reinterpret_cast<char*>(&_impl_.kill_reward_),
          reinterpret_cast<char*>(&other->_impl_.kill_reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleBossInvasionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[99]);
}

// ===================================================================

class RoleMasiveData::_Internal {
 public:
};

RoleMasiveData::RoleMasiveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleMasiveData)
}
RoleMasiveData::RoleMasiveData(const RoleMasiveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleMasiveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_vars_){from._impl_.user_vars_}
    , decltype(_impl_.next_self_unique_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.next_self_unique_id_ = from._impl_.next_self_unique_id_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleMasiveData)
}

inline void RoleMasiveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_vars_){arena}
    , decltype(_impl_.next_self_unique_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleMasiveData::~RoleMasiveData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleMasiveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleMasiveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_vars_.~RepeatedPtrField();
}

void RoleMasiveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleMasiveData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleMasiveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_vars_.Clear();
  _impl_.next_self_unique_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleMasiveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.StringKeyInt32ValueEntry user_vars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 next_self_unique_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.next_self_unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleMasiveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleMasiveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.StringKeyInt32ValueEntry user_vars = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_vars_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_vars(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 next_self_unique_id = 2;
  if (this->_internal_next_self_unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_next_self_unique_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleMasiveData)
  return target;
}

size_t RoleMasiveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleMasiveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.StringKeyInt32ValueEntry user_vars = 1;
  total_size += 1UL * this->_internal_user_vars_size();
  for (const auto& msg : this->_impl_.user_vars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 next_self_unique_id = 2;
  if (this->_internal_next_self_unique_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_self_unique_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleMasiveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleMasiveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleMasiveData::GetClassData() const { return &_class_data_; }


void RoleMasiveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleMasiveData*>(&to_msg);
  auto& from = static_cast<const RoleMasiveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleMasiveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_vars_.MergeFrom(from._impl_.user_vars_);
  if (from._internal_next_self_unique_id() != 0) {
    _this->_internal_set_next_self_unique_id(from._internal_next_self_unique_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleMasiveData::CopyFrom(const RoleMasiveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleMasiveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMasiveData::IsInitialized() const {
  return true;
}

void RoleMasiveData::InternalSwap(RoleMasiveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_vars_.InternalSwap(&other->_impl_.user_vars_);
  swap(_impl_.next_self_unique_id_, other->_impl_.next_self_unique_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleMasiveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[100]);
}

// ===================================================================

class CheckTask::_Internal {
 public:
};

CheckTask::CheckTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CheckTask)
}
CheckTask::CheckTask(const CheckTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.need_num_){}
    , decltype(_impl_.point_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.is_submitted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.task_id_, &from._impl_.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_submitted_) -
    reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.is_submitted_));
  // @@protoc_insertion_point(copy_constructor:idlepb.CheckTask)
}

inline void CheckTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.need_num_){0}
    , decltype(_impl_.point_){0}
    , decltype(_impl_.progress_){0}
    , decltype(_impl_.is_submitted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CheckTask::~CheckTask() {
  // @@protoc_insertion_point(destructor:idlepb.CheckTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CheckTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckTask::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CheckTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_submitted_) -
      reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.is_submitted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 need_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.need_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 progress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_submitted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_submitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CheckTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_task_id(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 need_num = 3;
  if (this->_internal_need_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_need_num(), target);
  }

  // int32 point = 4;
  if (this->_internal_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_point(), target);
  }

  // int32 progress = 5;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_progress(), target);
  }

  // bool is_submitted = 6;
  if (this->_internal_is_submitted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_submitted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CheckTask)
  return target;
}

size_t CheckTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CheckTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 need_num = 3;
  if (this->_internal_need_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_need_num());
  }

  // int32 point = 4;
  if (this->_internal_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_point());
  }

  // int32 progress = 5;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
  }

  // bool is_submitted = 6;
  if (this->_internal_is_submitted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckTask::GetClassData() const { return &_class_data_; }


void CheckTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckTask*>(&to_msg);
  auto& from = static_cast<const CheckTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CheckTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_task_id() != 0) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_need_num() != 0) {
    _this->_internal_set_need_num(from._internal_need_num());
  }
  if (from._internal_point() != 0) {
    _this->_internal_set_point(from._internal_point());
  }
  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_is_submitted() != 0) {
    _this->_internal_set_is_submitted(from._internal_is_submitted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckTask::CopyFrom(const CheckTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CheckTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckTask::IsInitialized() const {
  return true;
}

void CheckTask::InternalSwap(CheckTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckTask, _impl_.is_submitted_)
      + sizeof(CheckTask::_impl_.is_submitted_)
      - PROTOBUF_FIELD_OFFSET(CheckTask, _impl_.task_id_)>(
          reinterpret_cast<char*>(&_impl_.task_id_),
          reinterpret_cast<char*>(&other->_impl_.task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[101]);
}

// ===================================================================

class RoleChecklistData::_Internal {
 public:
};

RoleChecklistData::RoleChecklistData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleChecklistData)
}
RoleChecklistData::RoleChecklistData(const RoleChecklistData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleChecklistData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.day_tasks_){from._impl_.day_tasks_}
    , decltype(_impl_.week_tasks_){from._impl_.week_tasks_}
    , decltype(_impl_.day_point_){}
    , decltype(_impl_.week_point_){}
    , decltype(_impl_.day_received_time_){}
    , decltype(_impl_.week_received_time_){}
    , decltype(_impl_.last_reset_day_time_){}
    , decltype(_impl_.last_reset_week_time_){}
    , decltype(_impl_.boss_invasion_time_){}
    , decltype(_impl_.degree_locked_day_){}
    , decltype(_impl_.degree_locked_week_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.day_point_, &from._impl_.day_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.degree_locked_week_) -
    reinterpret_cast<char*>(&_impl_.day_point_)) + sizeof(_impl_.degree_locked_week_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleChecklistData)
}

inline void RoleChecklistData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.day_tasks_){arena}
    , decltype(_impl_.week_tasks_){arena}
    , decltype(_impl_.day_point_){0}
    , decltype(_impl_.week_point_){0}
    , decltype(_impl_.day_received_time_){0}
    , decltype(_impl_.week_received_time_){0}
    , decltype(_impl_.last_reset_day_time_){int64_t{0}}
    , decltype(_impl_.last_reset_week_time_){int64_t{0}}
    , decltype(_impl_.boss_invasion_time_){int64_t{0}}
    , decltype(_impl_.degree_locked_day_){0}
    , decltype(_impl_.degree_locked_week_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleChecklistData::~RoleChecklistData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleChecklistData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleChecklistData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.day_tasks_.~RepeatedPtrField();
  _impl_.week_tasks_.~RepeatedPtrField();
}

void RoleChecklistData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleChecklistData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleChecklistData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.day_tasks_.Clear();
  _impl_.week_tasks_.Clear();
  ::memset(&_impl_.day_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.degree_locked_week_) -
      reinterpret_cast<char*>(&_impl_.day_point_)) + sizeof(_impl_.degree_locked_week_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleChecklistData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 day_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.day_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 week_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.week_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.CheckTask day_tasks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_day_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.CheckTask week_tasks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_week_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 day_received_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.day_received_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 week_received_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.week_received_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_reset_day_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.last_reset_day_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_reset_week_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.last_reset_week_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 boss_invasion_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.boss_invasion_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 degree_locked_day = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.degree_locked_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 degree_locked_week = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.degree_locked_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleChecklistData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleChecklistData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 day_point = 1;
  if (this->_internal_day_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_day_point(), target);
  }

  // int32 week_point = 2;
  if (this->_internal_week_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_week_point(), target);
  }

  // repeated .idlepb.CheckTask day_tasks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_day_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_day_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.CheckTask week_tasks = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_week_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_week_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 day_received_time = 5;
  if (this->_internal_day_received_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_day_received_time(), target);
  }

  // int32 week_received_time = 6;
  if (this->_internal_week_received_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_week_received_time(), target);
  }

  // int64 last_reset_day_time = 7;
  if (this->_internal_last_reset_day_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_last_reset_day_time(), target);
  }

  // int64 last_reset_week_time = 8;
  if (this->_internal_last_reset_week_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_last_reset_week_time(), target);
  }

  // int64 boss_invasion_time = 9;
  if (this->_internal_boss_invasion_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_boss_invasion_time(), target);
  }

  // int32 degree_locked_day = 10;
  if (this->_internal_degree_locked_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_degree_locked_day(), target);
  }

  // int32 degree_locked_week = 11;
  if (this->_internal_degree_locked_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_degree_locked_week(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleChecklistData)
  return target;
}

size_t RoleChecklistData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleChecklistData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.CheckTask day_tasks = 3;
  total_size += 1UL * this->_internal_day_tasks_size();
  for (const auto& msg : this->_impl_.day_tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.CheckTask week_tasks = 4;
  total_size += 1UL * this->_internal_week_tasks_size();
  for (const auto& msg : this->_impl_.week_tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 day_point = 1;
  if (this->_internal_day_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_day_point());
  }

  // int32 week_point = 2;
  if (this->_internal_week_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_week_point());
  }

  // int32 day_received_time = 5;
  if (this->_internal_day_received_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_day_received_time());
  }

  // int32 week_received_time = 6;
  if (this->_internal_week_received_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_week_received_time());
  }

  // int64 last_reset_day_time = 7;
  if (this->_internal_last_reset_day_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_day_time());
  }

  // int64 last_reset_week_time = 8;
  if (this->_internal_last_reset_week_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_week_time());
  }

  // int64 boss_invasion_time = 9;
  if (this->_internal_boss_invasion_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_boss_invasion_time());
  }

  // int32 degree_locked_day = 10;
  if (this->_internal_degree_locked_day() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_degree_locked_day());
  }

  // int32 degree_locked_week = 11;
  if (this->_internal_degree_locked_week() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_degree_locked_week());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleChecklistData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleChecklistData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleChecklistData::GetClassData() const { return &_class_data_; }


void RoleChecklistData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleChecklistData*>(&to_msg);
  auto& from = static_cast<const RoleChecklistData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleChecklistData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.day_tasks_.MergeFrom(from._impl_.day_tasks_);
  _this->_impl_.week_tasks_.MergeFrom(from._impl_.week_tasks_);
  if (from._internal_day_point() != 0) {
    _this->_internal_set_day_point(from._internal_day_point());
  }
  if (from._internal_week_point() != 0) {
    _this->_internal_set_week_point(from._internal_week_point());
  }
  if (from._internal_day_received_time() != 0) {
    _this->_internal_set_day_received_time(from._internal_day_received_time());
  }
  if (from._internal_week_received_time() != 0) {
    _this->_internal_set_week_received_time(from._internal_week_received_time());
  }
  if (from._internal_last_reset_day_time() != 0) {
    _this->_internal_set_last_reset_day_time(from._internal_last_reset_day_time());
  }
  if (from._internal_last_reset_week_time() != 0) {
    _this->_internal_set_last_reset_week_time(from._internal_last_reset_week_time());
  }
  if (from._internal_boss_invasion_time() != 0) {
    _this->_internal_set_boss_invasion_time(from._internal_boss_invasion_time());
  }
  if (from._internal_degree_locked_day() != 0) {
    _this->_internal_set_degree_locked_day(from._internal_degree_locked_day());
  }
  if (from._internal_degree_locked_week() != 0) {
    _this->_internal_set_degree_locked_week(from._internal_degree_locked_week());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleChecklistData::CopyFrom(const RoleChecklistData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleChecklistData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleChecklistData::IsInitialized() const {
  return true;
}

void RoleChecklistData::InternalSwap(RoleChecklistData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.day_tasks_.InternalSwap(&other->_impl_.day_tasks_);
  _impl_.week_tasks_.InternalSwap(&other->_impl_.week_tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleChecklistData, _impl_.degree_locked_week_)
      + sizeof(RoleChecklistData::_impl_.degree_locked_week_)
      - PROTOBUF_FIELD_OFFSET(RoleChecklistData, _impl_.day_point_)>(
          reinterpret_cast<char*>(&_impl_.day_point_),
          reinterpret_cast<char*>(&other->_impl_.day_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleChecklistData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[102]);
}

// ===================================================================

class RoleCommonItemExchangeData::_Internal {
 public:
};

RoleCommonItemExchangeData::RoleCommonItemExchangeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleCommonItemExchangeData)
}
RoleCommonItemExchangeData::RoleCommonItemExchangeData(const RoleCommonItemExchangeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleCommonItemExchangeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_exchange_day_){from._impl_.item_exchange_day_}
    , decltype(_impl_.item_exchange_week_){from._impl_.item_exchange_week_}
    , decltype(_impl_.last_reset_day_){}
    , decltype(_impl_.last_reset_week_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.last_reset_day_, &from._impl_.last_reset_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_reset_week_) -
    reinterpret_cast<char*>(&_impl_.last_reset_day_)) + sizeof(_impl_.last_reset_week_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleCommonItemExchangeData)
}

inline void RoleCommonItemExchangeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_exchange_day_){arena}
    , decltype(_impl_.item_exchange_week_){arena}
    , decltype(_impl_.last_reset_day_){int64_t{0}}
    , decltype(_impl_.last_reset_week_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleCommonItemExchangeData::~RoleCommonItemExchangeData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleCommonItemExchangeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleCommonItemExchangeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_exchange_day_.~RepeatedPtrField();
  _impl_.item_exchange_week_.~RepeatedPtrField();
}

void RoleCommonItemExchangeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleCommonItemExchangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleCommonItemExchangeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_exchange_day_.Clear();
  _impl_.item_exchange_week_.Clear();
  ::memset(&_impl_.last_reset_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_reset_week_) -
      reinterpret_cast<char*>(&_impl_.last_reset_day_)) + sizeof(_impl_.last_reset_week_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleCommonItemExchangeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 last_reset_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.last_reset_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_reset_week = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_reset_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.MapValueInt32 item_exchange_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_exchange_day(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.MapValueInt32 item_exchange_week = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_exchange_week(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleCommonItemExchangeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleCommonItemExchangeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_reset_day = 2;
  if (this->_internal_last_reset_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_reset_day(), target);
  }

  // int64 last_reset_week = 3;
  if (this->_internal_last_reset_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_reset_week(), target);
  }

  // repeated .idlepb.MapValueInt32 item_exchange_day = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_exchange_day_size()); i < n; i++) {
    const auto& repfield = this->_internal_item_exchange_day(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.MapValueInt32 item_exchange_week = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_exchange_week_size()); i < n; i++) {
    const auto& repfield = this->_internal_item_exchange_week(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleCommonItemExchangeData)
  return target;
}

size_t RoleCommonItemExchangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleCommonItemExchangeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.MapValueInt32 item_exchange_day = 4;
  total_size += 1UL * this->_internal_item_exchange_day_size();
  for (const auto& msg : this->_impl_.item_exchange_day_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.MapValueInt32 item_exchange_week = 5;
  total_size += 1UL * this->_internal_item_exchange_week_size();
  for (const auto& msg : this->_impl_.item_exchange_week_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 last_reset_day = 2;
  if (this->_internal_last_reset_day() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_day());
  }

  // int64 last_reset_week = 3;
  if (this->_internal_last_reset_week() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_week());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleCommonItemExchangeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleCommonItemExchangeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleCommonItemExchangeData::GetClassData() const { return &_class_data_; }


void RoleCommonItemExchangeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleCommonItemExchangeData*>(&to_msg);
  auto& from = static_cast<const RoleCommonItemExchangeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleCommonItemExchangeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_exchange_day_.MergeFrom(from._impl_.item_exchange_day_);
  _this->_impl_.item_exchange_week_.MergeFrom(from._impl_.item_exchange_week_);
  if (from._internal_last_reset_day() != 0) {
    _this->_internal_set_last_reset_day(from._internal_last_reset_day());
  }
  if (from._internal_last_reset_week() != 0) {
    _this->_internal_set_last_reset_week(from._internal_last_reset_week());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleCommonItemExchangeData::CopyFrom(const RoleCommonItemExchangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleCommonItemExchangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCommonItemExchangeData::IsInitialized() const {
  return true;
}

void RoleCommonItemExchangeData::InternalSwap(RoleCommonItemExchangeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_exchange_day_.InternalSwap(&other->_impl_.item_exchange_day_);
  _impl_.item_exchange_week_.InternalSwap(&other->_impl_.item_exchange_week_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleCommonItemExchangeData, _impl_.last_reset_week_)
      + sizeof(RoleCommonItemExchangeData::_impl_.last_reset_week_)
      - PROTOBUF_FIELD_OFFSET(RoleCommonItemExchangeData, _impl_.last_reset_day_)>(
          reinterpret_cast<char*>(&_impl_.last_reset_day_),
          reinterpret_cast<char*>(&other->_impl_.last_reset_day_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleCommonItemExchangeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[103]);
}

// ===================================================================

class RoleTreasuryChestData::_Internal {
 public:
};

RoleTreasuryChestData::RoleTreasuryChestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleTreasuryChestData)
}
RoleTreasuryChestData::RoleTreasuryChestData(const RoleTreasuryChestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleTreasuryChestData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.today_open_times_){from._impl_.today_open_times_}
    , /*decltype(_impl_._today_open_times_cached_byte_size_)*/{0}
    , decltype(_impl_.guarantee_count_){from._impl_.guarantee_count_}
    , /*decltype(_impl_._guarantee_count_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleTreasuryChestData)
}

inline void RoleTreasuryChestData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.today_open_times_){arena}
    , /*decltype(_impl_._today_open_times_cached_byte_size_)*/{0}
    , decltype(_impl_.guarantee_count_){arena}
    , /*decltype(_impl_._guarantee_count_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleTreasuryChestData::~RoleTreasuryChestData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleTreasuryChestData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleTreasuryChestData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.today_open_times_.~RepeatedField();
  _impl_.guarantee_count_.~RepeatedField();
}

void RoleTreasuryChestData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleTreasuryChestData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleTreasuryChestData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.today_open_times_.Clear();
  _impl_.guarantee_count_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleTreasuryChestData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 today_open_times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_today_open_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_today_open_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 guarantee_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_guarantee_count(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_guarantee_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleTreasuryChestData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleTreasuryChestData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 today_open_times = 1;
  {
    int byte_size = _impl_._today_open_times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_today_open_times(), byte_size, target);
    }
  }

  // repeated int32 guarantee_count = 2;
  {
    int byte_size = _impl_._guarantee_count_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_guarantee_count(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleTreasuryChestData)
  return target;
}

size_t RoleTreasuryChestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleTreasuryChestData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 today_open_times = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.today_open_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._today_open_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 guarantee_count = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.guarantee_count_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._guarantee_count_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleTreasuryChestData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleTreasuryChestData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleTreasuryChestData::GetClassData() const { return &_class_data_; }


void RoleTreasuryChestData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleTreasuryChestData*>(&to_msg);
  auto& from = static_cast<const RoleTreasuryChestData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleTreasuryChestData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.today_open_times_.MergeFrom(from._impl_.today_open_times_);
  _this->_impl_.guarantee_count_.MergeFrom(from._impl_.guarantee_count_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleTreasuryChestData::CopyFrom(const RoleTreasuryChestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleTreasuryChestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTreasuryChestData::IsInitialized() const {
  return true;
}

void RoleTreasuryChestData::InternalSwap(RoleTreasuryChestData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.today_open_times_.InternalSwap(&other->_impl_.today_open_times_);
  _impl_.guarantee_count_.InternalSwap(&other->_impl_.guarantee_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleTreasuryChestData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[104]);
}

// ===================================================================

class RoleTreasuryGachaData::_Internal {
 public:
};

RoleTreasuryGachaData::RoleTreasuryGachaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleTreasuryGachaData)
}
RoleTreasuryGachaData::RoleTreasuryGachaData(const RoleTreasuryGachaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleTreasuryGachaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.today_open_times_){from._impl_.today_open_times_}
    , /*decltype(_impl_._today_open_times_cached_byte_size_)*/{0}
    , decltype(_impl_.free_open_times_){from._impl_.free_open_times_}
    , /*decltype(_impl_._free_open_times_cached_byte_size_)*/{0}
    , decltype(_impl_.guarantee_count_){from._impl_.guarantee_count_}
    , /*decltype(_impl_._guarantee_count_cached_byte_size_)*/{0}
    , decltype(_impl_.total_open_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_open_time_ = from._impl_.total_open_time_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleTreasuryGachaData)
}

inline void RoleTreasuryGachaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.today_open_times_){arena}
    , /*decltype(_impl_._today_open_times_cached_byte_size_)*/{0}
    , decltype(_impl_.free_open_times_){arena}
    , /*decltype(_impl_._free_open_times_cached_byte_size_)*/{0}
    , decltype(_impl_.guarantee_count_){arena}
    , /*decltype(_impl_._guarantee_count_cached_byte_size_)*/{0}
    , decltype(_impl_.total_open_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleTreasuryGachaData::~RoleTreasuryGachaData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleTreasuryGachaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleTreasuryGachaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.today_open_times_.~RepeatedField();
  _impl_.free_open_times_.~RepeatedField();
  _impl_.guarantee_count_.~RepeatedField();
}

void RoleTreasuryGachaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleTreasuryGachaData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleTreasuryGachaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.today_open_times_.Clear();
  _impl_.free_open_times_.Clear();
  _impl_.guarantee_count_.Clear();
  _impl_.total_open_time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleTreasuryGachaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 today_open_times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_today_open_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_today_open_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 free_open_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_free_open_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_free_open_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 guarantee_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_guarantee_count(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_guarantee_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_open_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.total_open_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleTreasuryGachaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleTreasuryGachaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 today_open_times = 1;
  {
    int byte_size = _impl_._today_open_times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_today_open_times(), byte_size, target);
    }
  }

  // repeated int32 free_open_times = 2;
  {
    int byte_size = _impl_._free_open_times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_free_open_times(), byte_size, target);
    }
  }

  // repeated int32 guarantee_count = 3;
  {
    int byte_size = _impl_._guarantee_count_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_guarantee_count(), byte_size, target);
    }
  }

  // int32 total_open_time = 6;
  if (this->_internal_total_open_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_open_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleTreasuryGachaData)
  return target;
}

size_t RoleTreasuryGachaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleTreasuryGachaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 today_open_times = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.today_open_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._today_open_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 free_open_times = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.free_open_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._free_open_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 guarantee_count = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.guarantee_count_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._guarantee_count_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 total_open_time = 6;
  if (this->_internal_total_open_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_open_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleTreasuryGachaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleTreasuryGachaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleTreasuryGachaData::GetClassData() const { return &_class_data_; }


void RoleTreasuryGachaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleTreasuryGachaData*>(&to_msg);
  auto& from = static_cast<const RoleTreasuryGachaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleTreasuryGachaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.today_open_times_.MergeFrom(from._impl_.today_open_times_);
  _this->_impl_.free_open_times_.MergeFrom(from._impl_.free_open_times_);
  _this->_impl_.guarantee_count_.MergeFrom(from._impl_.guarantee_count_);
  if (from._internal_total_open_time() != 0) {
    _this->_internal_set_total_open_time(from._internal_total_open_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleTreasuryGachaData::CopyFrom(const RoleTreasuryGachaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleTreasuryGachaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTreasuryGachaData::IsInitialized() const {
  return true;
}

void RoleTreasuryGachaData::InternalSwap(RoleTreasuryGachaData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.today_open_times_.InternalSwap(&other->_impl_.today_open_times_);
  _impl_.free_open_times_.InternalSwap(&other->_impl_.free_open_times_);
  _impl_.guarantee_count_.InternalSwap(&other->_impl_.guarantee_count_);
  swap(_impl_.total_open_time_, other->_impl_.total_open_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleTreasuryGachaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[105]);
}

// ===================================================================

class TreasuryShopItem::_Internal {
 public:
};

TreasuryShopItem::TreasuryShopItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.TreasuryShopItem)
}
TreasuryShopItem::TreasuryShopItem(const TreasuryShopItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TreasuryShopItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.bought_count_){}
    , decltype(_impl_.cfg_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cfg_id_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.cfg_id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.TreasuryShopItem)
}

inline void TreasuryShopItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.item_id_){0}
    , decltype(_impl_.num_){0}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.bought_count_){0}
    , decltype(_impl_.cfg_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TreasuryShopItem::~TreasuryShopItem() {
  // @@protoc_insertion_point(destructor:idlepb.TreasuryShopItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TreasuryShopItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TreasuryShopItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TreasuryShopItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.TreasuryShopItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cfg_id_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.cfg_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TreasuryShopItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bought_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.bought_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cfg_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TreasuryShopItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.TreasuryShopItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_id(), target);
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  // int32 price = 4;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_price(), target);
  }

  // int32 count = 5;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_count(), target);
  }

  // int32 bought_count = 6;
  if (this->_internal_bought_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_bought_count(), target);
  }

  // int32 cfg_id = 7;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_cfg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.TreasuryShopItem)
  return target;
}

size_t TreasuryShopItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.TreasuryShopItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
  }

  // int32 num = 3;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  // int32 price = 4;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  // int32 count = 5;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  // int32 bought_count = 6;
  if (this->_internal_bought_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bought_count());
  }

  // int32 cfg_id = 7;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TreasuryShopItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TreasuryShopItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TreasuryShopItem::GetClassData() const { return &_class_data_; }


void TreasuryShopItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TreasuryShopItem*>(&to_msg);
  auto& from = static_cast<const TreasuryShopItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.TreasuryShopItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_bought_count() != 0) {
    _this->_internal_set_bought_count(from._internal_bought_count());
  }
  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TreasuryShopItem::CopyFrom(const TreasuryShopItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.TreasuryShopItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasuryShopItem::IsInitialized() const {
  return true;
}

void TreasuryShopItem::InternalSwap(TreasuryShopItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreasuryShopItem, _impl_.cfg_id_)
      + sizeof(TreasuryShopItem::_impl_.cfg_id_)
      - PROTOBUF_FIELD_OFFSET(TreasuryShopItem, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TreasuryShopItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[106]);
}

// ===================================================================

class RoleTreasuryShopData::_Internal {
 public:
};

RoleTreasuryShopData::RoleTreasuryShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleTreasuryShopData)
}
RoleTreasuryShopData::RoleTreasuryShopData(const RoleTreasuryShopData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleTreasuryShopData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shop_items_){from._impl_.shop_items_}
    , decltype(_impl_.today_refresh_time_){}
    , decltype(_impl_.shop_refresh_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.today_refresh_time_, &from._impl_.today_refresh_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shop_refresh_flag_) -
    reinterpret_cast<char*>(&_impl_.today_refresh_time_)) + sizeof(_impl_.shop_refresh_flag_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleTreasuryShopData)
}

inline void RoleTreasuryShopData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shop_items_){arena}
    , decltype(_impl_.today_refresh_time_){0}
    , decltype(_impl_.shop_refresh_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleTreasuryShopData::~RoleTreasuryShopData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleTreasuryShopData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleTreasuryShopData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shop_items_.~RepeatedPtrField();
}

void RoleTreasuryShopData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleTreasuryShopData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleTreasuryShopData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shop_items_.Clear();
  ::memset(&_impl_.today_refresh_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shop_refresh_flag_) -
      reinterpret_cast<char*>(&_impl_.today_refresh_time_)) + sizeof(_impl_.shop_refresh_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleTreasuryShopData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.TreasuryShopItem shop_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shop_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 today_refresh_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.today_refresh_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool shop_refresh_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.shop_refresh_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleTreasuryShopData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleTreasuryShopData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.TreasuryShopItem shop_items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shop_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_shop_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 today_refresh_time = 2;
  if (this->_internal_today_refresh_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_today_refresh_time(), target);
  }

  // bool shop_refresh_flag = 3;
  if (this->_internal_shop_refresh_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_shop_refresh_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleTreasuryShopData)
  return target;
}

size_t RoleTreasuryShopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleTreasuryShopData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.TreasuryShopItem shop_items = 1;
  total_size += 1UL * this->_internal_shop_items_size();
  for (const auto& msg : this->_impl_.shop_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 today_refresh_time = 2;
  if (this->_internal_today_refresh_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_today_refresh_time());
  }

  // bool shop_refresh_flag = 3;
  if (this->_internal_shop_refresh_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleTreasuryShopData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleTreasuryShopData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleTreasuryShopData::GetClassData() const { return &_class_data_; }


void RoleTreasuryShopData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleTreasuryShopData*>(&to_msg);
  auto& from = static_cast<const RoleTreasuryShopData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleTreasuryShopData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shop_items_.MergeFrom(from._impl_.shop_items_);
  if (from._internal_today_refresh_time() != 0) {
    _this->_internal_set_today_refresh_time(from._internal_today_refresh_time());
  }
  if (from._internal_shop_refresh_flag() != 0) {
    _this->_internal_set_shop_refresh_flag(from._internal_shop_refresh_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleTreasuryShopData::CopyFrom(const RoleTreasuryShopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleTreasuryShopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTreasuryShopData::IsInitialized() const {
  return true;
}

void RoleTreasuryShopData::InternalSwap(RoleTreasuryShopData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shop_items_.InternalSwap(&other->_impl_.shop_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleTreasuryShopData, _impl_.shop_refresh_flag_)
      + sizeof(RoleTreasuryShopData::_impl_.shop_refresh_flag_)
      - PROTOBUF_FIELD_OFFSET(RoleTreasuryShopData, _impl_.today_refresh_time_)>(
          reinterpret_cast<char*>(&_impl_.today_refresh_time_),
          reinterpret_cast<char*>(&other->_impl_.today_refresh_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleTreasuryShopData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[107]);
}

// ===================================================================

class RoleTreasurySaveData::_Internal {
 public:
  static const ::idlepb::RoleTreasuryChestData& treasury_chest_data(const RoleTreasurySaveData* msg);
  static const ::idlepb::RoleTreasuryGachaData& treasury_gacha_data(const RoleTreasurySaveData* msg);
  static const ::idlepb::RoleTreasuryShopData& treasury_shop_data(const RoleTreasurySaveData* msg);
};

const ::idlepb::RoleTreasuryChestData&
RoleTreasurySaveData::_Internal::treasury_chest_data(const RoleTreasurySaveData* msg) {
  return *msg->_impl_.treasury_chest_data_;
}
const ::idlepb::RoleTreasuryGachaData&
RoleTreasurySaveData::_Internal::treasury_gacha_data(const RoleTreasurySaveData* msg) {
  return *msg->_impl_.treasury_gacha_data_;
}
const ::idlepb::RoleTreasuryShopData&
RoleTreasurySaveData::_Internal::treasury_shop_data(const RoleTreasurySaveData* msg) {
  return *msg->_impl_.treasury_shop_data_;
}
RoleTreasurySaveData::RoleTreasurySaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleTreasurySaveData)
}
RoleTreasurySaveData::RoleTreasurySaveData(const RoleTreasurySaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleTreasurySaveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.treasury_chest_data_){nullptr}
    , decltype(_impl_.treasury_gacha_data_){nullptr}
    , decltype(_impl_.treasury_shop_data_){nullptr}
    , decltype(_impl_.last_reset_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_treasury_chest_data()) {
    _this->_impl_.treasury_chest_data_ = new ::idlepb::RoleTreasuryChestData(*from._impl_.treasury_chest_data_);
  }
  if (from._internal_has_treasury_gacha_data()) {
    _this->_impl_.treasury_gacha_data_ = new ::idlepb::RoleTreasuryGachaData(*from._impl_.treasury_gacha_data_);
  }
  if (from._internal_has_treasury_shop_data()) {
    _this->_impl_.treasury_shop_data_ = new ::idlepb::RoleTreasuryShopData(*from._impl_.treasury_shop_data_);
  }
  _this->_impl_.last_reset_time_ = from._impl_.last_reset_time_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleTreasurySaveData)
}

inline void RoleTreasurySaveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.treasury_chest_data_){nullptr}
    , decltype(_impl_.treasury_gacha_data_){nullptr}
    , decltype(_impl_.treasury_shop_data_){nullptr}
    , decltype(_impl_.last_reset_time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleTreasurySaveData::~RoleTreasurySaveData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleTreasurySaveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleTreasurySaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.treasury_chest_data_;
  if (this != internal_default_instance()) delete _impl_.treasury_gacha_data_;
  if (this != internal_default_instance()) delete _impl_.treasury_shop_data_;
}

void RoleTreasurySaveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleTreasurySaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleTreasurySaveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.treasury_chest_data_ != nullptr) {
    delete _impl_.treasury_chest_data_;
  }
  _impl_.treasury_chest_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.treasury_gacha_data_ != nullptr) {
    delete _impl_.treasury_gacha_data_;
  }
  _impl_.treasury_gacha_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.treasury_shop_data_ != nullptr) {
    delete _impl_.treasury_shop_data_;
  }
  _impl_.treasury_shop_data_ = nullptr;
  _impl_.last_reset_time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleTreasurySaveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.RoleTreasuryChestData treasury_chest_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_treasury_chest_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleTreasuryGachaData treasury_gacha_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_treasury_gacha_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleTreasuryShopData treasury_shop_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_treasury_shop_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_reset_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.last_reset_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleTreasurySaveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleTreasurySaveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.RoleTreasuryChestData treasury_chest_data = 1;
  if (this->_internal_has_treasury_chest_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::treasury_chest_data(this),
        _Internal::treasury_chest_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleTreasuryGachaData treasury_gacha_data = 2;
  if (this->_internal_has_treasury_gacha_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::treasury_gacha_data(this),
        _Internal::treasury_gacha_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleTreasuryShopData treasury_shop_data = 3;
  if (this->_internal_has_treasury_shop_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::treasury_shop_data(this),
        _Internal::treasury_shop_data(this).GetCachedSize(), target, stream);
  }

  // int64 last_reset_time = 6;
  if (this->_internal_last_reset_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_last_reset_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleTreasurySaveData)
  return target;
}

size_t RoleTreasurySaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleTreasurySaveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.RoleTreasuryChestData treasury_chest_data = 1;
  if (this->_internal_has_treasury_chest_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.treasury_chest_data_);
  }

  // .idlepb.RoleTreasuryGachaData treasury_gacha_data = 2;
  if (this->_internal_has_treasury_gacha_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.treasury_gacha_data_);
  }

  // .idlepb.RoleTreasuryShopData treasury_shop_data = 3;
  if (this->_internal_has_treasury_shop_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.treasury_shop_data_);
  }

  // int64 last_reset_time = 6;
  if (this->_internal_last_reset_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleTreasurySaveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleTreasurySaveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleTreasurySaveData::GetClassData() const { return &_class_data_; }


void RoleTreasurySaveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleTreasurySaveData*>(&to_msg);
  auto& from = static_cast<const RoleTreasurySaveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleTreasurySaveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_treasury_chest_data()) {
    _this->_internal_mutable_treasury_chest_data()->::idlepb::RoleTreasuryChestData::MergeFrom(
        from._internal_treasury_chest_data());
  }
  if (from._internal_has_treasury_gacha_data()) {
    _this->_internal_mutable_treasury_gacha_data()->::idlepb::RoleTreasuryGachaData::MergeFrom(
        from._internal_treasury_gacha_data());
  }
  if (from._internal_has_treasury_shop_data()) {
    _this->_internal_mutable_treasury_shop_data()->::idlepb::RoleTreasuryShopData::MergeFrom(
        from._internal_treasury_shop_data());
  }
  if (from._internal_last_reset_time() != 0) {
    _this->_internal_set_last_reset_time(from._internal_last_reset_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleTreasurySaveData::CopyFrom(const RoleTreasurySaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleTreasurySaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTreasurySaveData::IsInitialized() const {
  return true;
}

void RoleTreasurySaveData::InternalSwap(RoleTreasurySaveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleTreasurySaveData, _impl_.last_reset_time_)
      + sizeof(RoleTreasurySaveData::_impl_.last_reset_time_)
      - PROTOBUF_FIELD_OFFSET(RoleTreasurySaveData, _impl_.treasury_chest_data_)>(
          reinterpret_cast<char*>(&_impl_.treasury_chest_data_),
          reinterpret_cast<char*>(&other->_impl_.treasury_chest_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleTreasurySaveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[108]);
}

// ===================================================================

class ArenaCheckListData::_Internal {
 public:
};

ArenaCheckListData::ArenaCheckListData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ArenaCheckListData)
}
ArenaCheckListData::ArenaCheckListData(const ArenaCheckListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArenaCheckListData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.checklist_id_){}
    , decltype(_impl_.checklist_num_){}
    , decltype(_impl_.checklist_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.checklist_id_, &from._impl_.checklist_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.checklist_state_) -
    reinterpret_cast<char*>(&_impl_.checklist_id_)) + sizeof(_impl_.checklist_state_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ArenaCheckListData)
}

inline void ArenaCheckListData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.checklist_id_){0}
    , decltype(_impl_.checklist_num_){0}
    , decltype(_impl_.checklist_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ArenaCheckListData::~ArenaCheckListData() {
  // @@protoc_insertion_point(destructor:idlepb.ArenaCheckListData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArenaCheckListData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ArenaCheckListData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArenaCheckListData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ArenaCheckListData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.checklist_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.checklist_state_) -
      reinterpret_cast<char*>(&_impl_.checklist_id_)) + sizeof(_impl_.checklist_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArenaCheckListData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 checklist_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.checklist_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 checklist_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.checklist_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ArenaCheckListState checklist_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_checklist_state(static_cast<::idlepb::ArenaCheckListState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArenaCheckListData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ArenaCheckListData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 checklist_id = 1;
  if (this->_internal_checklist_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_checklist_id(), target);
  }

  // int32 checklist_num = 2;
  if (this->_internal_checklist_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_checklist_num(), target);
  }

  // .idlepb.ArenaCheckListState checklist_state = 3;
  if (this->_internal_checklist_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_checklist_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ArenaCheckListData)
  return target;
}

size_t ArenaCheckListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ArenaCheckListData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 checklist_id = 1;
  if (this->_internal_checklist_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_checklist_id());
  }

  // int32 checklist_num = 2;
  if (this->_internal_checklist_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_checklist_num());
  }

  // .idlepb.ArenaCheckListState checklist_state = 3;
  if (this->_internal_checklist_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_checklist_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArenaCheckListData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArenaCheckListData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArenaCheckListData::GetClassData() const { return &_class_data_; }


void ArenaCheckListData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArenaCheckListData*>(&to_msg);
  auto& from = static_cast<const ArenaCheckListData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ArenaCheckListData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_checklist_id() != 0) {
    _this->_internal_set_checklist_id(from._internal_checklist_id());
  }
  if (from._internal_checklist_num() != 0) {
    _this->_internal_set_checklist_num(from._internal_checklist_num());
  }
  if (from._internal_checklist_state() != 0) {
    _this->_internal_set_checklist_state(from._internal_checklist_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArenaCheckListData::CopyFrom(const ArenaCheckListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ArenaCheckListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaCheckListData::IsInitialized() const {
  return true;
}

void ArenaCheckListData::InternalSwap(ArenaCheckListData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArenaCheckListData, _impl_.checklist_state_)
      + sizeof(ArenaCheckListData::_impl_.checklist_state_)
      - PROTOBUF_FIELD_OFFSET(ArenaCheckListData, _impl_.checklist_id_)>(
          reinterpret_cast<char*>(&_impl_.checklist_id_),
          reinterpret_cast<char*>(&other->_impl_.checklist_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArenaCheckListData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[109]);
}

// ===================================================================

class ArenaCheckListRewardData::_Internal {
 public:
};

ArenaCheckListRewardData::ArenaCheckListRewardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ArenaCheckListRewardData)
}
ArenaCheckListRewardData::ArenaCheckListRewardData(const ArenaCheckListRewardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArenaCheckListRewardData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reward_id_){}
    , decltype(_impl_.reward_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.reward_id_, &from._impl_.reward_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reward_state_) -
    reinterpret_cast<char*>(&_impl_.reward_id_)) + sizeof(_impl_.reward_state_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ArenaCheckListRewardData)
}

inline void ArenaCheckListRewardData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reward_id_){0}
    , decltype(_impl_.reward_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ArenaCheckListRewardData::~ArenaCheckListRewardData() {
  // @@protoc_insertion_point(destructor:idlepb.ArenaCheckListRewardData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArenaCheckListRewardData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ArenaCheckListRewardData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArenaCheckListRewardData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ArenaCheckListRewardData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.reward_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reward_state_) -
      reinterpret_cast<char*>(&_impl_.reward_id_)) + sizeof(_impl_.reward_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArenaCheckListRewardData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 reward_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.reward_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ArenaCheckListRewardState reward_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reward_state(static_cast<::idlepb::ArenaCheckListRewardState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArenaCheckListRewardData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ArenaCheckListRewardData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reward_id = 1;
  if (this->_internal_reward_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_reward_id(), target);
  }

  // .idlepb.ArenaCheckListRewardState reward_state = 2;
  if (this->_internal_reward_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reward_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ArenaCheckListRewardData)
  return target;
}

size_t ArenaCheckListRewardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ArenaCheckListRewardData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 reward_id = 1;
  if (this->_internal_reward_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reward_id());
  }

  // .idlepb.ArenaCheckListRewardState reward_state = 2;
  if (this->_internal_reward_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reward_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArenaCheckListRewardData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArenaCheckListRewardData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArenaCheckListRewardData::GetClassData() const { return &_class_data_; }


void ArenaCheckListRewardData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArenaCheckListRewardData*>(&to_msg);
  auto& from = static_cast<const ArenaCheckListRewardData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ArenaCheckListRewardData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reward_id() != 0) {
    _this->_internal_set_reward_id(from._internal_reward_id());
  }
  if (from._internal_reward_state() != 0) {
    _this->_internal_set_reward_state(from._internal_reward_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArenaCheckListRewardData::CopyFrom(const ArenaCheckListRewardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ArenaCheckListRewardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaCheckListRewardData::IsInitialized() const {
  return true;
}

void ArenaCheckListRewardData::InternalSwap(ArenaCheckListRewardData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArenaCheckListRewardData, _impl_.reward_state_)
      + sizeof(ArenaCheckListRewardData::_impl_.reward_state_)
      - PROTOBUF_FIELD_OFFSET(ArenaCheckListRewardData, _impl_.reward_id_)>(
          reinterpret_cast<char*>(&_impl_.reward_id_),
          reinterpret_cast<char*>(&other->_impl_.reward_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArenaCheckListRewardData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[110]);
}

// ===================================================================

class RoleArenaCheckListData::_Internal {
 public:
};

RoleArenaCheckListData::RoleArenaCheckListData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleArenaCheckListData)
}
RoleArenaCheckListData::RoleArenaCheckListData(const RoleArenaCheckListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleArenaCheckListData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arena_check_data_){from._impl_.arena_check_data_}
    , decltype(_impl_.check_reward_data_){from._impl_.check_reward_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleArenaCheckListData)
}

inline void RoleArenaCheckListData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arena_check_data_){arena}
    , decltype(_impl_.check_reward_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleArenaCheckListData::~RoleArenaCheckListData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleArenaCheckListData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleArenaCheckListData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arena_check_data_.~RepeatedPtrField();
  _impl_.check_reward_data_.~RepeatedPtrField();
}

void RoleArenaCheckListData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleArenaCheckListData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleArenaCheckListData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arena_check_data_.Clear();
  _impl_.check_reward_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleArenaCheckListData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.ArenaCheckListData arena_check_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arena_check_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ArenaCheckListRewardData check_reward_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_check_reward_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleArenaCheckListData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleArenaCheckListData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.ArenaCheckListData arena_check_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arena_check_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_arena_check_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.ArenaCheckListRewardData check_reward_data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_check_reward_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_check_reward_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleArenaCheckListData)
  return target;
}

size_t RoleArenaCheckListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleArenaCheckListData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ArenaCheckListData arena_check_data = 1;
  total_size += 1UL * this->_internal_arena_check_data_size();
  for (const auto& msg : this->_impl_.arena_check_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.ArenaCheckListRewardData check_reward_data = 2;
  total_size += 1UL * this->_internal_check_reward_data_size();
  for (const auto& msg : this->_impl_.check_reward_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleArenaCheckListData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleArenaCheckListData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleArenaCheckListData::GetClassData() const { return &_class_data_; }


void RoleArenaCheckListData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleArenaCheckListData*>(&to_msg);
  auto& from = static_cast<const RoleArenaCheckListData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleArenaCheckListData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arena_check_data_.MergeFrom(from._impl_.arena_check_data_);
  _this->_impl_.check_reward_data_.MergeFrom(from._impl_.check_reward_data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleArenaCheckListData::CopyFrom(const RoleArenaCheckListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleArenaCheckListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleArenaCheckListData::IsInitialized() const {
  return true;
}

void RoleArenaCheckListData::InternalSwap(RoleArenaCheckListData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arena_check_data_.InternalSwap(&other->_impl_.arena_check_data_);
  _impl_.check_reward_data_.InternalSwap(&other->_impl_.check_reward_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleArenaCheckListData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[111]);
}

// ===================================================================

class RoleSeptInviteEntry::_Internal {
 public:
};

RoleSeptInviteEntry::RoleSeptInviteEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleSeptInviteEntry)
}
RoleSeptInviteEntry::RoleSeptInviteEntry(const RoleSeptInviteEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleSeptInviteEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.position_, &from._impl_.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleSeptInviteEntry)
}

inline void RoleSeptInviteEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleSeptInviteEntry::~RoleSeptInviteEntry() {
  // @@protoc_insertion_point(destructor:idlepb.RoleSeptInviteEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleSeptInviteEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleSeptInviteEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleSeptInviteEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleSeptInviteEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleSeptInviteEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.SeptPosition position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::idlepb::SeptPosition>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleSeptInviteEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleSeptInviteEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.SeptPosition position = 1;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_position(), target);
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleSeptInviteEntry)
  return target;
}

size_t RoleSeptInviteEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleSeptInviteEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.SeptPosition position = 1;
  if (this->_internal_position() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_position());
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleSeptInviteEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleSeptInviteEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleSeptInviteEntry::GetClassData() const { return &_class_data_; }


void RoleSeptInviteEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleSeptInviteEntry*>(&to_msg);
  auto& from = static_cast<const RoleSeptInviteEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleSeptInviteEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleSeptInviteEntry::CopyFrom(const RoleSeptInviteEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleSeptInviteEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSeptInviteEntry::IsInitialized() const {
  return true;
}

void RoleSeptInviteEntry::InternalSwap(RoleSeptInviteEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleSeptInviteEntry, _impl_.num_)
      + sizeof(RoleSeptInviteEntry::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(RoleSeptInviteEntry, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleSeptInviteEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[112]);
}

// ===================================================================

class SeptQuest::_Internal {
 public:
};

SeptQuest::SeptQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SeptQuest)
}
SeptQuest::SeptQuest(const SeptQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeptQuest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.begin_time_){}
    , decltype(_impl_.quest_id_){}
    , decltype(_impl_.received_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.money_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.begin_time_, &from._impl_.begin_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.money_num_) -
    reinterpret_cast<char*>(&_impl_.begin_time_)) + sizeof(_impl_.money_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SeptQuest)
}

inline void SeptQuest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.begin_time_){int64_t{0}}
    , decltype(_impl_.quest_id_){0}
    , decltype(_impl_.received_){false}
    , decltype(_impl_.uid_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.money_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SeptQuest::~SeptQuest() {
  // @@protoc_insertion_point(destructor:idlepb.SeptQuest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeptQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SeptQuest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeptQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SeptQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.begin_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.money_num_) -
      reinterpret_cast<char*>(&_impl_.begin_time_)) + sizeof(_impl_.money_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeptQuest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 begin_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool received = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 money_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.money_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeptQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SeptQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 quest_id = 1;
  if (this->_internal_quest_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_quest_id(), target);
  }

  // int64 begin_time = 2;
  if (this->_internal_begin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_begin_time(), target);
  }

  // bool received = 3;
  if (this->_internal_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_received(), target);
  }

  // int32 uid = 4;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_uid(), target);
  }

  // int32 level = 11;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_level(), target);
  }

  // int32 money_num = 12;
  if (this->_internal_money_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_money_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SeptQuest)
  return target;
}

size_t SeptQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SeptQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 begin_time = 2;
  if (this->_internal_begin_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_time());
  }

  // int32 quest_id = 1;
  if (this->_internal_quest_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quest_id());
  }

  // bool received = 3;
  if (this->_internal_received() != 0) {
    total_size += 1 + 1;
  }

  // int32 uid = 4;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  // int32 level = 11;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 money_num = 12;
  if (this->_internal_money_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_money_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeptQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeptQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeptQuest::GetClassData() const { return &_class_data_; }


void SeptQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeptQuest*>(&to_msg);
  auto& from = static_cast<const SeptQuest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SeptQuest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_begin_time() != 0) {
    _this->_internal_set_begin_time(from._internal_begin_time());
  }
  if (from._internal_quest_id() != 0) {
    _this->_internal_set_quest_id(from._internal_quest_id());
  }
  if (from._internal_received() != 0) {
    _this->_internal_set_received(from._internal_received());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_money_num() != 0) {
    _this->_internal_set_money_num(from._internal_money_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeptQuest::CopyFrom(const SeptQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SeptQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeptQuest::IsInitialized() const {
  return true;
}

void SeptQuest::InternalSwap(SeptQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeptQuest, _impl_.money_num_)
      + sizeof(SeptQuest::_impl_.money_num_)
      - PROTOBUF_FIELD_OFFSET(SeptQuest, _impl_.begin_time_)>(
          reinterpret_cast<char*>(&_impl_.begin_time_),
          reinterpret_cast<char*>(&other->_impl_.begin_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SeptQuest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[113]);
}

// ===================================================================

class RoleSeptQuestData::_Internal {
 public:
};

RoleSeptQuestData::RoleSeptQuestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleSeptQuestData)
}
RoleSeptQuestData::RoleSeptQuestData(const RoleSeptQuestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleSeptQuestData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quests_){from._impl_.quests_}
    , decltype(_impl_.today_manual_refresh_num_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.current_exp_){}
    , decltype(_impl_.total_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.today_manual_refresh_num_, &from._impl_.today_manual_refresh_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_num_) -
    reinterpret_cast<char*>(&_impl_.today_manual_refresh_num_)) + sizeof(_impl_.total_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleSeptQuestData)
}

inline void RoleSeptQuestData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quests_){arena}
    , decltype(_impl_.today_manual_refresh_num_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.current_exp_){0}
    , decltype(_impl_.total_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleSeptQuestData::~RoleSeptQuestData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleSeptQuestData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleSeptQuestData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quests_.~RepeatedPtrField();
}

void RoleSeptQuestData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleSeptQuestData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleSeptQuestData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quests_.Clear();
  ::memset(&_impl_.today_manual_refresh_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_num_) -
      reinterpret_cast<char*>(&_impl_.today_manual_refresh_num_)) + sizeof(_impl_.total_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleSeptQuestData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.SeptQuest quests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 today_manual_refresh_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.today_manual_refresh_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 current_exp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.current_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleSeptQuestData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleSeptQuestData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.SeptQuest quests = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quests_size()); i < n; i++) {
    const auto& repfield = this->_internal_quests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 today_manual_refresh_num = 2;
  if (this->_internal_today_manual_refresh_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_today_manual_refresh_num(), target);
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // int32 current_exp = 4;
  if (this->_internal_current_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_current_exp(), target);
  }

  // int32 total_num = 5;
  if (this->_internal_total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleSeptQuestData)
  return target;
}

size_t RoleSeptQuestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleSeptQuestData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.SeptQuest quests = 1;
  total_size += 1UL * this->_internal_quests_size();
  for (const auto& msg : this->_impl_.quests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 today_manual_refresh_num = 2;
  if (this->_internal_today_manual_refresh_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_today_manual_refresh_num());
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 current_exp = 4;
  if (this->_internal_current_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_exp());
  }

  // int32 total_num = 5;
  if (this->_internal_total_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleSeptQuestData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleSeptQuestData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleSeptQuestData::GetClassData() const { return &_class_data_; }


void RoleSeptQuestData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleSeptQuestData*>(&to_msg);
  auto& from = static_cast<const RoleSeptQuestData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleSeptQuestData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.quests_.MergeFrom(from._impl_.quests_);
  if (from._internal_today_manual_refresh_num() != 0) {
    _this->_internal_set_today_manual_refresh_num(from._internal_today_manual_refresh_num());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_current_exp() != 0) {
    _this->_internal_set_current_exp(from._internal_current_exp());
  }
  if (from._internal_total_num() != 0) {
    _this->_internal_set_total_num(from._internal_total_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleSeptQuestData::CopyFrom(const RoleSeptQuestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleSeptQuestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSeptQuestData::IsInitialized() const {
  return true;
}

void RoleSeptQuestData::InternalSwap(RoleSeptQuestData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.quests_.InternalSwap(&other->_impl_.quests_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleSeptQuestData, _impl_.total_num_)
      + sizeof(RoleSeptQuestData::_impl_.total_num_)
      - PROTOBUF_FIELD_OFFSET(RoleSeptQuestData, _impl_.today_manual_refresh_num_)>(
          reinterpret_cast<char*>(&_impl_.today_manual_refresh_num_),
          reinterpret_cast<char*>(&other->_impl_.today_manual_refresh_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleSeptQuestData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[114]);
}

// ===================================================================

class RoleSeptShopData::_Internal {
 public:
};

RoleSeptShopData::RoleSeptShopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleSeptShopData)
}
RoleSeptShopData::RoleSeptShopData(const RoleSeptShopData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleSeptShopData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_history_){from._impl_.exchange_history_}
    , decltype(_impl_.last_reset_time_sept_shop_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.last_reset_time_sept_shop_ = from._impl_.last_reset_time_sept_shop_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleSeptShopData)
}

inline void RoleSeptShopData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_history_){arena}
    , decltype(_impl_.last_reset_time_sept_shop_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleSeptShopData::~RoleSeptShopData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleSeptShopData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleSeptShopData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchange_history_.~RepeatedPtrField();
}

void RoleSeptShopData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleSeptShopData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleSeptShopData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_history_.Clear();
  _impl_.last_reset_time_sept_shop_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleSeptShopData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 last_reset_time_sept_shop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.last_reset_time_sept_shop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.SimpleItemData exchange_history = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exchange_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleSeptShopData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleSeptShopData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_reset_time_sept_shop = 1;
  if (this->_internal_last_reset_time_sept_shop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_reset_time_sept_shop(), target);
  }

  // repeated .idlepb.SimpleItemData exchange_history = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exchange_history_size()); i < n; i++) {
    const auto& repfield = this->_internal_exchange_history(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleSeptShopData)
  return target;
}

size_t RoleSeptShopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleSeptShopData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.SimpleItemData exchange_history = 2;
  total_size += 1UL * this->_internal_exchange_history_size();
  for (const auto& msg : this->_impl_.exchange_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 last_reset_time_sept_shop = 1;
  if (this->_internal_last_reset_time_sept_shop() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_reset_time_sept_shop());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleSeptShopData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleSeptShopData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleSeptShopData::GetClassData() const { return &_class_data_; }


void RoleSeptShopData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleSeptShopData*>(&to_msg);
  auto& from = static_cast<const RoleSeptShopData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleSeptShopData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exchange_history_.MergeFrom(from._impl_.exchange_history_);
  if (from._internal_last_reset_time_sept_shop() != 0) {
    _this->_internal_set_last_reset_time_sept_shop(from._internal_last_reset_time_sept_shop());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleSeptShopData::CopyFrom(const RoleSeptShopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleSeptShopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSeptShopData::IsInitialized() const {
  return true;
}

void RoleSeptShopData::InternalSwap(RoleSeptShopData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exchange_history_.InternalSwap(&other->_impl_.exchange_history_);
  swap(_impl_.last_reset_time_sept_shop_, other->_impl_.last_reset_time_sept_shop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleSeptShopData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[115]);
}

// ===================================================================

class RoleSeptData::_Internal {
 public:
  static const ::idlepb::RoleSeptShopData& sept_shop_data(const RoleSeptData* msg);
  static const ::idlepb::RoleSeptQuestData& sept_quest_data(const RoleSeptData* msg);
};

const ::idlepb::RoleSeptShopData&
RoleSeptData::_Internal::sept_shop_data(const RoleSeptData* msg) {
  return *msg->_impl_.sept_shop_data_;
}
const ::idlepb::RoleSeptQuestData&
RoleSeptData::_Internal::sept_quest_data(const RoleSeptData* msg) {
  return *msg->_impl_.sept_quest_data_;
}
RoleSeptData::RoleSeptData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleSeptData)
}
RoleSeptData::RoleSeptData(const RoleSeptData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleSeptData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.daily_invite_entries_){from._impl_.daily_invite_entries_}
    , decltype(_impl_.sept_demon_damage_reward_received_){from._impl_.sept_demon_damage_reward_received_}
    , /*decltype(_impl_._sept_demon_damage_reward_received_cached_byte_size_)*/{0}
    , decltype(_impl_.sept_demon_damage_reward_finished_){from._impl_.sept_demon_damage_reward_finished_}
    , /*decltype(_impl_._sept_demon_damage_reward_finished_cached_byte_size_)*/{0}
    , decltype(_impl_.sept_shop_data_){nullptr}
    , decltype(_impl_.sept_quest_data_){nullptr}
    , decltype(_impl_.next_join_ticks_){}
    , decltype(_impl_.sept_demon_cumulative_time_){}
    , decltype(_impl_.sept_demon_stage_reward_num_){}
    , decltype(_impl_.sept_demon_stage_reward_use_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sept_shop_data()) {
    _this->_impl_.sept_shop_data_ = new ::idlepb::RoleSeptShopData(*from._impl_.sept_shop_data_);
  }
  if (from._internal_has_sept_quest_data()) {
    _this->_impl_.sept_quest_data_ = new ::idlepb::RoleSeptQuestData(*from._impl_.sept_quest_data_);
  }
  ::memcpy(&_impl_.next_join_ticks_, &from._impl_.next_join_ticks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sept_demon_stage_reward_use_num_) -
    reinterpret_cast<char*>(&_impl_.next_join_ticks_)) + sizeof(_impl_.sept_demon_stage_reward_use_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleSeptData)
}

inline void RoleSeptData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.daily_invite_entries_){arena}
    , decltype(_impl_.sept_demon_damage_reward_received_){arena}
    , /*decltype(_impl_._sept_demon_damage_reward_received_cached_byte_size_)*/{0}
    , decltype(_impl_.sept_demon_damage_reward_finished_){arena}
    , /*decltype(_impl_._sept_demon_damage_reward_finished_cached_byte_size_)*/{0}
    , decltype(_impl_.sept_shop_data_){nullptr}
    , decltype(_impl_.sept_quest_data_){nullptr}
    , decltype(_impl_.next_join_ticks_){int64_t{0}}
    , decltype(_impl_.sept_demon_cumulative_time_){0}
    , decltype(_impl_.sept_demon_stage_reward_num_){0}
    , decltype(_impl_.sept_demon_stage_reward_use_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleSeptData::~RoleSeptData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleSeptData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleSeptData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.daily_invite_entries_.~RepeatedPtrField();
  _impl_.sept_demon_damage_reward_received_.~RepeatedField();
  _impl_.sept_demon_damage_reward_finished_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.sept_shop_data_;
  if (this != internal_default_instance()) delete _impl_.sept_quest_data_;
}

void RoleSeptData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleSeptData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleSeptData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.daily_invite_entries_.Clear();
  _impl_.sept_demon_damage_reward_received_.Clear();
  _impl_.sept_demon_damage_reward_finished_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.sept_shop_data_ != nullptr) {
    delete _impl_.sept_shop_data_;
  }
  _impl_.sept_shop_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sept_quest_data_ != nullptr) {
    delete _impl_.sept_quest_data_;
  }
  _impl_.sept_quest_data_ = nullptr;
  ::memset(&_impl_.next_join_ticks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sept_demon_stage_reward_use_num_) -
      reinterpret_cast<char*>(&_impl_.next_join_ticks_)) + sizeof(_impl_.sept_demon_stage_reward_use_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleSeptData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 next_join_ticks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.next_join_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.RoleSeptInviteEntry daily_invite_entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_daily_invite_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleSeptShopData sept_shop_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sept_shop_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleSeptQuestData sept_quest_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sept_quest_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sept_demon_cumulative_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.sept_demon_cumulative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sept_demon_stage_reward_num = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.sept_demon_stage_reward_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sept_demon_stage_reward_use_num = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.sept_demon_stage_reward_use_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 sept_demon_damage_reward_received = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sept_demon_damage_reward_received(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          _internal_add_sept_demon_damage_reward_received(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 sept_demon_damage_reward_finished = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sept_demon_damage_reward_finished(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          _internal_add_sept_demon_damage_reward_finished(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleSeptData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleSeptData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 next_join_ticks = 1;
  if (this->_internal_next_join_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_next_join_ticks(), target);
  }

  // repeated .idlepb.RoleSeptInviteEntry daily_invite_entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_daily_invite_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_daily_invite_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .idlepb.RoleSeptShopData sept_shop_data = 6;
  if (this->_internal_has_sept_shop_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sept_shop_data(this),
        _Internal::sept_shop_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleSeptQuestData sept_quest_data = 11;
  if (this->_internal_has_sept_quest_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::sept_quest_data(this),
        _Internal::sept_quest_data(this).GetCachedSize(), target, stream);
  }

  // int32 sept_demon_cumulative_time = 12;
  if (this->_internal_sept_demon_cumulative_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_sept_demon_cumulative_time(), target);
  }

  // int32 sept_demon_stage_reward_num = 13;
  if (this->_internal_sept_demon_stage_reward_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_sept_demon_stage_reward_num(), target);
  }

  // int32 sept_demon_stage_reward_use_num = 14;
  if (this->_internal_sept_demon_stage_reward_use_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_sept_demon_stage_reward_use_num(), target);
  }

  // repeated int32 sept_demon_damage_reward_received = 15;
  {
    int byte_size = _impl_._sept_demon_damage_reward_received_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_sept_demon_damage_reward_received(), byte_size, target);
    }
  }

  // repeated int32 sept_demon_damage_reward_finished = 16;
  {
    int byte_size = _impl_._sept_demon_damage_reward_finished_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          16, _internal_sept_demon_damage_reward_finished(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleSeptData)
  return target;
}

size_t RoleSeptData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleSeptData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.RoleSeptInviteEntry daily_invite_entries = 2;
  total_size += 1UL * this->_internal_daily_invite_entries_size();
  for (const auto& msg : this->_impl_.daily_invite_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 sept_demon_damage_reward_received = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.sept_demon_damage_reward_received_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sept_demon_damage_reward_received_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 sept_demon_damage_reward_finished = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.sept_demon_damage_reward_finished_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sept_demon_damage_reward_finished_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .idlepb.RoleSeptShopData sept_shop_data = 6;
  if (this->_internal_has_sept_shop_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sept_shop_data_);
  }

  // .idlepb.RoleSeptQuestData sept_quest_data = 11;
  if (this->_internal_has_sept_quest_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sept_quest_data_);
  }

  // int64 next_join_ticks = 1;
  if (this->_internal_next_join_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_join_ticks());
  }

  // int32 sept_demon_cumulative_time = 12;
  if (this->_internal_sept_demon_cumulative_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sept_demon_cumulative_time());
  }

  // int32 sept_demon_stage_reward_num = 13;
  if (this->_internal_sept_demon_stage_reward_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sept_demon_stage_reward_num());
  }

  // int32 sept_demon_stage_reward_use_num = 14;
  if (this->_internal_sept_demon_stage_reward_use_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sept_demon_stage_reward_use_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleSeptData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleSeptData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleSeptData::GetClassData() const { return &_class_data_; }


void RoleSeptData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleSeptData*>(&to_msg);
  auto& from = static_cast<const RoleSeptData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleSeptData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.daily_invite_entries_.MergeFrom(from._impl_.daily_invite_entries_);
  _this->_impl_.sept_demon_damage_reward_received_.MergeFrom(from._impl_.sept_demon_damage_reward_received_);
  _this->_impl_.sept_demon_damage_reward_finished_.MergeFrom(from._impl_.sept_demon_damage_reward_finished_);
  if (from._internal_has_sept_shop_data()) {
    _this->_internal_mutable_sept_shop_data()->::idlepb::RoleSeptShopData::MergeFrom(
        from._internal_sept_shop_data());
  }
  if (from._internal_has_sept_quest_data()) {
    _this->_internal_mutable_sept_quest_data()->::idlepb::RoleSeptQuestData::MergeFrom(
        from._internal_sept_quest_data());
  }
  if (from._internal_next_join_ticks() != 0) {
    _this->_internal_set_next_join_ticks(from._internal_next_join_ticks());
  }
  if (from._internal_sept_demon_cumulative_time() != 0) {
    _this->_internal_set_sept_demon_cumulative_time(from._internal_sept_demon_cumulative_time());
  }
  if (from._internal_sept_demon_stage_reward_num() != 0) {
    _this->_internal_set_sept_demon_stage_reward_num(from._internal_sept_demon_stage_reward_num());
  }
  if (from._internal_sept_demon_stage_reward_use_num() != 0) {
    _this->_internal_set_sept_demon_stage_reward_use_num(from._internal_sept_demon_stage_reward_use_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleSeptData::CopyFrom(const RoleSeptData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleSeptData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSeptData::IsInitialized() const {
  return true;
}

void RoleSeptData::InternalSwap(RoleSeptData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.daily_invite_entries_.InternalSwap(&other->_impl_.daily_invite_entries_);
  _impl_.sept_demon_damage_reward_received_.InternalSwap(&other->_impl_.sept_demon_damage_reward_received_);
  _impl_.sept_demon_damage_reward_finished_.InternalSwap(&other->_impl_.sept_demon_damage_reward_finished_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleSeptData, _impl_.sept_demon_stage_reward_use_num_)
      + sizeof(RoleSeptData::_impl_.sept_demon_stage_reward_use_num_)
      - PROTOBUF_FIELD_OFFSET(RoleSeptData, _impl_.sept_shop_data_)>(
          reinterpret_cast<char*>(&_impl_.sept_shop_data_),
          reinterpret_cast<char*>(&other->_impl_.sept_shop_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleSeptData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[116]);
}

// ===================================================================

class SeptDemonWorldData::_Internal {
 public:
};

SeptDemonWorldData::SeptDemonWorldData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SeptDemonWorldData)
}
SeptDemonWorldData::SeptDemonWorldData(const SeptDemonWorldData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeptDemonWorldData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_ids_){from._impl_.player_ids_}
    , /*decltype(_impl_._player_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.cur_end_ticks_){}
    , decltype(_impl_.is_started_){}
    , decltype(_impl_.cur_stage_){}
    , decltype(_impl_.next_open_ticks_){}
    , decltype(_impl_.cur_stage_hp_){}
    , decltype(_impl_.cur_stage_maxhp_){}
    , decltype(_impl_.last_stage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cur_end_ticks_, &from._impl_.cur_end_ticks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_stage_) -
    reinterpret_cast<char*>(&_impl_.cur_end_ticks_)) + sizeof(_impl_.last_stage_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SeptDemonWorldData)
}

inline void SeptDemonWorldData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_ids_){arena}
    , /*decltype(_impl_._player_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.cur_end_ticks_){int64_t{0}}
    , decltype(_impl_.is_started_){false}
    , decltype(_impl_.cur_stage_){0}
    , decltype(_impl_.next_open_ticks_){int64_t{0}}
    , decltype(_impl_.cur_stage_hp_){0}
    , decltype(_impl_.cur_stage_maxhp_){0}
    , decltype(_impl_.last_stage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SeptDemonWorldData::~SeptDemonWorldData() {
  // @@protoc_insertion_point(destructor:idlepb.SeptDemonWorldData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeptDemonWorldData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_ids_.~RepeatedField();
}

void SeptDemonWorldData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeptDemonWorldData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SeptDemonWorldData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_ids_.Clear();
  ::memset(&_impl_.cur_end_ticks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_stage_) -
      reinterpret_cast<char*>(&_impl_.cur_end_ticks_)) + sizeof(_impl_.last_stage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeptDemonWorldData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_started = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cur_end_ticks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cur_end_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 next_open_ticks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.next_open_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cur_stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cur_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cur_stage_hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.cur_stage_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cur_stage_maxhp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.cur_stage_maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 last_stage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.last_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 player_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_player_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_player_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeptDemonWorldData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SeptDemonWorldData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_started = 1;
  if (this->_internal_is_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_started(), target);
  }

  // int64 cur_end_ticks = 2;
  if (this->_internal_cur_end_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_cur_end_ticks(), target);
  }

  // int64 next_open_ticks = 3;
  if (this->_internal_next_open_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_next_open_ticks(), target);
  }

  // int32 cur_stage = 4;
  if (this->_internal_cur_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cur_stage(), target);
  }

  // float cur_stage_hp = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cur_stage_hp = this->_internal_cur_stage_hp();
  uint32_t raw_cur_stage_hp;
  memcpy(&raw_cur_stage_hp, &tmp_cur_stage_hp, sizeof(tmp_cur_stage_hp));
  if (raw_cur_stage_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_cur_stage_hp(), target);
  }

  // float cur_stage_maxhp = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cur_stage_maxhp = this->_internal_cur_stage_maxhp();
  uint32_t raw_cur_stage_maxhp;
  memcpy(&raw_cur_stage_maxhp, &tmp_cur_stage_maxhp, sizeof(tmp_cur_stage_maxhp));
  if (raw_cur_stage_maxhp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_cur_stage_maxhp(), target);
  }

  // int32 last_stage = 7;
  if (this->_internal_last_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_last_stage(), target);
  }

  // repeated int64 player_ids = 8;
  {
    int byte_size = _impl_._player_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_player_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SeptDemonWorldData)
  return target;
}

size_t SeptDemonWorldData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SeptDemonWorldData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 player_ids = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.player_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._player_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 cur_end_ticks = 2;
  if (this->_internal_cur_end_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cur_end_ticks());
  }

  // bool is_started = 1;
  if (this->_internal_is_started() != 0) {
    total_size += 1 + 1;
  }

  // int32 cur_stage = 4;
  if (this->_internal_cur_stage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cur_stage());
  }

  // int64 next_open_ticks = 3;
  if (this->_internal_next_open_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_open_ticks());
  }

  // float cur_stage_hp = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cur_stage_hp = this->_internal_cur_stage_hp();
  uint32_t raw_cur_stage_hp;
  memcpy(&raw_cur_stage_hp, &tmp_cur_stage_hp, sizeof(tmp_cur_stage_hp));
  if (raw_cur_stage_hp != 0) {
    total_size += 1 + 4;
  }

  // float cur_stage_maxhp = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cur_stage_maxhp = this->_internal_cur_stage_maxhp();
  uint32_t raw_cur_stage_maxhp;
  memcpy(&raw_cur_stage_maxhp, &tmp_cur_stage_maxhp, sizeof(tmp_cur_stage_maxhp));
  if (raw_cur_stage_maxhp != 0) {
    total_size += 1 + 4;
  }

  // int32 last_stage = 7;
  if (this->_internal_last_stage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_stage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeptDemonWorldData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeptDemonWorldData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeptDemonWorldData::GetClassData() const { return &_class_data_; }


void SeptDemonWorldData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeptDemonWorldData*>(&to_msg);
  auto& from = static_cast<const SeptDemonWorldData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SeptDemonWorldData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_ids_.MergeFrom(from._impl_.player_ids_);
  if (from._internal_cur_end_ticks() != 0) {
    _this->_internal_set_cur_end_ticks(from._internal_cur_end_ticks());
  }
  if (from._internal_is_started() != 0) {
    _this->_internal_set_is_started(from._internal_is_started());
  }
  if (from._internal_cur_stage() != 0) {
    _this->_internal_set_cur_stage(from._internal_cur_stage());
  }
  if (from._internal_next_open_ticks() != 0) {
    _this->_internal_set_next_open_ticks(from._internal_next_open_ticks());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cur_stage_hp = from._internal_cur_stage_hp();
  uint32_t raw_cur_stage_hp;
  memcpy(&raw_cur_stage_hp, &tmp_cur_stage_hp, sizeof(tmp_cur_stage_hp));
  if (raw_cur_stage_hp != 0) {
    _this->_internal_set_cur_stage_hp(from._internal_cur_stage_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cur_stage_maxhp = from._internal_cur_stage_maxhp();
  uint32_t raw_cur_stage_maxhp;
  memcpy(&raw_cur_stage_maxhp, &tmp_cur_stage_maxhp, sizeof(tmp_cur_stage_maxhp));
  if (raw_cur_stage_maxhp != 0) {
    _this->_internal_set_cur_stage_maxhp(from._internal_cur_stage_maxhp());
  }
  if (from._internal_last_stage() != 0) {
    _this->_internal_set_last_stage(from._internal_last_stage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeptDemonWorldData::CopyFrom(const SeptDemonWorldData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SeptDemonWorldData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeptDemonWorldData::IsInitialized() const {
  return true;
}

void SeptDemonWorldData::InternalSwap(SeptDemonWorldData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.player_ids_.InternalSwap(&other->_impl_.player_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeptDemonWorldData, _impl_.last_stage_)
      + sizeof(SeptDemonWorldData::_impl_.last_stage_)
      - PROTOBUF_FIELD_OFFSET(SeptDemonWorldData, _impl_.cur_end_ticks_)>(
          reinterpret_cast<char*>(&_impl_.cur_end_ticks_),
          reinterpret_cast<char*>(&other->_impl_.cur_end_ticks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SeptDemonWorldData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[117]);
}

// ===================================================================

class SimpleCounter::_Internal {
 public:
};

SimpleCounter::SimpleCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SimpleCounter)
}
SimpleCounter::SimpleCounter(const SimpleCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleCounter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_, &from._impl_.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SimpleCounter)
}

inline void SimpleCounter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){int64_t{0}}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SimpleCounter::~SimpleCounter() {
  // @@protoc_insertion_point(destructor:idlepb.SimpleCounter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleCounter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimpleCounter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SimpleCounter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleCounter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleCounter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SimpleCounter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int64 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SimpleCounter)
  return target;
}

size_t SimpleCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SimpleCounter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleCounter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleCounter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleCounter::GetClassData() const { return &_class_data_; }


void SimpleCounter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleCounter*>(&to_msg);
  auto& from = static_cast<const SimpleCounter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SimpleCounter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleCounter::CopyFrom(const SimpleCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SimpleCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleCounter::IsInitialized() const {
  return true;
}

void SimpleCounter::InternalSwap(SimpleCounter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleCounter, _impl_.id_)
      + sizeof(SimpleCounter::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(SimpleCounter, _impl_.num_)>(
          reinterpret_cast<char*>(&_impl_.num_),
          reinterpret_cast<char*>(&other->_impl_.num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleCounter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[118]);
}

// ===================================================================

class FunctionCounter::_Internal {
 public:
};

FunctionCounter::FunctionCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.FunctionCounter)
}
FunctionCounter::FunctionCounter(const FunctionCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionCounter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.counters_){from._impl_.counters_}
    , decltype(_impl_.function_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.function_type_ = from._impl_.function_type_;
  // @@protoc_insertion_point(copy_constructor:idlepb.FunctionCounter)
}

inline void FunctionCounter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.counters_){arena}
    , decltype(_impl_.function_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FunctionCounter::~FunctionCounter() {
  // @@protoc_insertion_point(destructor:idlepb.FunctionCounter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionCounter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.counters_.~RepeatedPtrField();
}

void FunctionCounter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.FunctionCounter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.counters_.Clear();
  _impl_.function_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCounter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 function_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.function_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.SimpleCounter counters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCounter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.FunctionCounter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 function_type = 1;
  if (this->_internal_function_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_function_type(), target);
  }

  // repeated .idlepb.SimpleCounter counters = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_counters_size()); i < n; i++) {
    const auto& repfield = this->_internal_counters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.FunctionCounter)
  return target;
}

size_t FunctionCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.FunctionCounter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.SimpleCounter counters = 2;
  total_size += 1UL * this->_internal_counters_size();
  for (const auto& msg : this->_impl_.counters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 function_type = 1;
  if (this->_internal_function_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_function_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCounter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionCounter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCounter::GetClassData() const { return &_class_data_; }


void FunctionCounter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionCounter*>(&to_msg);
  auto& from = static_cast<const FunctionCounter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.FunctionCounter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.counters_.MergeFrom(from._impl_.counters_);
  if (from._internal_function_type() != 0) {
    _this->_internal_set_function_type(from._internal_function_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCounter::CopyFrom(const FunctionCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.FunctionCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCounter::IsInitialized() const {
  return true;
}

void FunctionCounter::InternalSwap(FunctionCounter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.counters_.InternalSwap(&other->_impl_.counters_);
  swap(_impl_.function_type_, other->_impl_.function_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCounter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[119]);
}

// ===================================================================

class RoleLifeCounterData::_Internal {
 public:
};

RoleLifeCounterData::RoleLifeCounterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleLifeCounterData)
}
RoleLifeCounterData::RoleLifeCounterData(const RoleLifeCounterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleLifeCounterData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.function_counter_){from._impl_.function_counter_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleLifeCounterData)
}

inline void RoleLifeCounterData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.function_counter_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleLifeCounterData::~RoleLifeCounterData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleLifeCounterData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleLifeCounterData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.function_counter_.~RepeatedPtrField();
}

void RoleLifeCounterData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleLifeCounterData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleLifeCounterData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.function_counter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleLifeCounterData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.FunctionCounter function_counter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_function_counter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleLifeCounterData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleLifeCounterData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.FunctionCounter function_counter = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_function_counter_size()); i < n; i++) {
    const auto& repfield = this->_internal_function_counter(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleLifeCounterData)
  return target;
}

size_t RoleLifeCounterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleLifeCounterData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.FunctionCounter function_counter = 2;
  total_size += 1UL * this->_internal_function_counter_size();
  for (const auto& msg : this->_impl_.function_counter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleLifeCounterData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleLifeCounterData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleLifeCounterData::GetClassData() const { return &_class_data_; }


void RoleLifeCounterData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleLifeCounterData*>(&to_msg);
  auto& from = static_cast<const RoleLifeCounterData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleLifeCounterData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.function_counter_.MergeFrom(from._impl_.function_counter_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleLifeCounterData::CopyFrom(const RoleLifeCounterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleLifeCounterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLifeCounterData::IsInitialized() const {
  return true;
}

void RoleLifeCounterData::InternalSwap(RoleLifeCounterData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.function_counter_.InternalSwap(&other->_impl_.function_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleLifeCounterData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[120]);
}

// ===================================================================

class FarmlandManagementInfo::_Internal {
 public:
};

FarmlandManagementInfo::FarmlandManagementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.FarmlandManagementInfo)
}
FarmlandManagementInfo::FarmlandManagementInfo(const FarmlandManagementInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FarmlandManagementInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plant_uid_){}
    , decltype(_impl_.target_stage_){}
    , decltype(_impl_.auto_seed_){}
    , decltype(_impl_.auto_harvest_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.plant_uid_, &from._impl_.plant_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auto_harvest_) -
    reinterpret_cast<char*>(&_impl_.plant_uid_)) + sizeof(_impl_.auto_harvest_));
  // @@protoc_insertion_point(copy_constructor:idlepb.FarmlandManagementInfo)
}

inline void FarmlandManagementInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plant_uid_){0}
    , decltype(_impl_.target_stage_){0}
    , decltype(_impl_.auto_seed_){false}
    , decltype(_impl_.auto_harvest_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FarmlandManagementInfo::~FarmlandManagementInfo() {
  // @@protoc_insertion_point(destructor:idlepb.FarmlandManagementInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FarmlandManagementInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FarmlandManagementInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FarmlandManagementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.FarmlandManagementInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.plant_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.auto_harvest_) -
      reinterpret_cast<char*>(&_impl_.plant_uid_)) + sizeof(_impl_.auto_harvest_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FarmlandManagementInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 plant_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.plant_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_stage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.auto_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_harvest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.auto_harvest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FarmlandManagementInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.FarmlandManagementInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 plant_uid = 1;
  if (this->_internal_plant_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_plant_uid(), target);
  }

  // int32 target_stage = 2;
  if (this->_internal_target_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_stage(), target);
  }

  // bool auto_seed = 3;
  if (this->_internal_auto_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_auto_seed(), target);
  }

  // bool auto_harvest = 4;
  if (this->_internal_auto_harvest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_harvest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.FarmlandManagementInfo)
  return target;
}

size_t FarmlandManagementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.FarmlandManagementInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 plant_uid = 1;
  if (this->_internal_plant_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plant_uid());
  }

  // int32 target_stage = 2;
  if (this->_internal_target_stage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_stage());
  }

  // bool auto_seed = 3;
  if (this->_internal_auto_seed() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_harvest = 4;
  if (this->_internal_auto_harvest() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FarmlandManagementInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FarmlandManagementInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FarmlandManagementInfo::GetClassData() const { return &_class_data_; }


void FarmlandManagementInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FarmlandManagementInfo*>(&to_msg);
  auto& from = static_cast<const FarmlandManagementInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.FarmlandManagementInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_plant_uid() != 0) {
    _this->_internal_set_plant_uid(from._internal_plant_uid());
  }
  if (from._internal_target_stage() != 0) {
    _this->_internal_set_target_stage(from._internal_target_stage());
  }
  if (from._internal_auto_seed() != 0) {
    _this->_internal_set_auto_seed(from._internal_auto_seed());
  }
  if (from._internal_auto_harvest() != 0) {
    _this->_internal_set_auto_harvest(from._internal_auto_harvest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FarmlandManagementInfo::CopyFrom(const FarmlandManagementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.FarmlandManagementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FarmlandManagementInfo::IsInitialized() const {
  return true;
}

void FarmlandManagementInfo::InternalSwap(FarmlandManagementInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FarmlandManagementInfo, _impl_.auto_harvest_)
      + sizeof(FarmlandManagementInfo::_impl_.auto_harvest_)
      - PROTOBUF_FIELD_OFFSET(FarmlandManagementInfo, _impl_.plant_uid_)>(
          reinterpret_cast<char*>(&_impl_.plant_uid_),
          reinterpret_cast<char*>(&other->_impl_.plant_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FarmlandManagementInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[121]);
}

// ===================================================================

class FarmlandPlantData::_Internal {
 public:
};

FarmlandPlantData::FarmlandPlantData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.FarmlandPlantData)
}
FarmlandPlantData::FarmlandPlantData(const FarmlandPlantData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FarmlandPlantData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plant_uid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.rotation_){}
    , decltype(_impl_.config_id_){}
    , decltype(_impl_.shenling_){}
    , decltype(_impl_.begin_date_){}
    , decltype(_impl_.speed_up_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.plant_uid_, &from._impl_.plant_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_up_) -
    reinterpret_cast<char*>(&_impl_.plant_uid_)) + sizeof(_impl_.speed_up_));
  // @@protoc_insertion_point(copy_constructor:idlepb.FarmlandPlantData)
}

inline void FarmlandPlantData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plant_uid_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.rotation_){0}
    , decltype(_impl_.config_id_){0}
    , decltype(_impl_.shenling_){0}
    , decltype(_impl_.begin_date_){int64_t{0}}
    , decltype(_impl_.speed_up_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FarmlandPlantData::~FarmlandPlantData() {
  // @@protoc_insertion_point(destructor:idlepb.FarmlandPlantData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FarmlandPlantData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FarmlandPlantData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FarmlandPlantData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.FarmlandPlantData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.plant_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.speed_up_) -
      reinterpret_cast<char*>(&_impl_.plant_uid_)) + sizeof(_impl_.speed_up_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FarmlandPlantData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 plant_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.plant_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 config_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.config_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shenling = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.shenling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 begin_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.begin_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speed_up = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.speed_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FarmlandPlantData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.FarmlandPlantData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 plant_uid = 1;
  if (this->_internal_plant_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_plant_uid(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // int32 rotation = 4;
  if (this->_internal_rotation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_rotation(), target);
  }

  // int32 config_id = 5;
  if (this->_internal_config_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_config_id(), target);
  }

  // int32 shenling = 6;
  if (this->_internal_shenling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_shenling(), target);
  }

  // int64 begin_date = 7;
  if (this->_internal_begin_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_begin_date(), target);
  }

  // int32 speed_up = 8;
  if (this->_internal_speed_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_speed_up(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.FarmlandPlantData)
  return target;
}

size_t FarmlandPlantData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.FarmlandPlantData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 plant_uid = 1;
  if (this->_internal_plant_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plant_uid());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 rotation = 4;
  if (this->_internal_rotation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rotation());
  }

  // int32 config_id = 5;
  if (this->_internal_config_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_config_id());
  }

  // int32 shenling = 6;
  if (this->_internal_shenling() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shenling());
  }

  // int64 begin_date = 7;
  if (this->_internal_begin_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_date());
  }

  // int32 speed_up = 8;
  if (this->_internal_speed_up() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed_up());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FarmlandPlantData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FarmlandPlantData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FarmlandPlantData::GetClassData() const { return &_class_data_; }


void FarmlandPlantData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FarmlandPlantData*>(&to_msg);
  auto& from = static_cast<const FarmlandPlantData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.FarmlandPlantData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_plant_uid() != 0) {
    _this->_internal_set_plant_uid(from._internal_plant_uid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_rotation() != 0) {
    _this->_internal_set_rotation(from._internal_rotation());
  }
  if (from._internal_config_id() != 0) {
    _this->_internal_set_config_id(from._internal_config_id());
  }
  if (from._internal_shenling() != 0) {
    _this->_internal_set_shenling(from._internal_shenling());
  }
  if (from._internal_begin_date() != 0) {
    _this->_internal_set_begin_date(from._internal_begin_date());
  }
  if (from._internal_speed_up() != 0) {
    _this->_internal_set_speed_up(from._internal_speed_up());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FarmlandPlantData::CopyFrom(const FarmlandPlantData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.FarmlandPlantData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FarmlandPlantData::IsInitialized() const {
  return true;
}

void FarmlandPlantData::InternalSwap(FarmlandPlantData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FarmlandPlantData, _impl_.speed_up_)
      + sizeof(FarmlandPlantData::_impl_.speed_up_)
      - PROTOBUF_FIELD_OFFSET(FarmlandPlantData, _impl_.plant_uid_)>(
          reinterpret_cast<char*>(&_impl_.plant_uid_),
          reinterpret_cast<char*>(&other->_impl_.plant_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FarmlandPlantData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[122]);
}

// ===================================================================

class RoleFarmlandData::_Internal {
 public:
};

RoleFarmlandData::RoleFarmlandData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleFarmlandData)
}
RoleFarmlandData::RoleFarmlandData(const RoleFarmlandData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleFarmlandData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_plants_){from._impl_.current_plants_}
    , decltype(_impl_.managment_plan_){from._impl_.managment_plan_}
    , decltype(_impl_.unlock_blocks_){from._impl_.unlock_blocks_}
    , decltype(_impl_.ripe_items_){from._impl_.ripe_items_}
    , decltype(_impl_.farmer_grade_){}
    , decltype(_impl_.farmer_friendship_exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.farmer_grade_, &from._impl_.farmer_grade_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.farmer_friendship_exp_) -
    reinterpret_cast<char*>(&_impl_.farmer_grade_)) + sizeof(_impl_.farmer_friendship_exp_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleFarmlandData)
}

inline void RoleFarmlandData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_plants_){arena}
    , decltype(_impl_.managment_plan_){arena}
    , decltype(_impl_.unlock_blocks_){arena}
    , decltype(_impl_.ripe_items_){arena}
    , decltype(_impl_.farmer_grade_){0}
    , decltype(_impl_.farmer_friendship_exp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleFarmlandData::~RoleFarmlandData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleFarmlandData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleFarmlandData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.current_plants_.~RepeatedPtrField();
  _impl_.managment_plan_.~RepeatedPtrField();
  _impl_.unlock_blocks_.~RepeatedPtrField();
  _impl_.ripe_items_.~RepeatedPtrField();
}

void RoleFarmlandData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleFarmlandData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleFarmlandData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_plants_.Clear();
  _impl_.managment_plan_.Clear();
  _impl_.unlock_blocks_.Clear();
  _impl_.ripe_items_.Clear();
  ::memset(&_impl_.farmer_grade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.farmer_friendship_exp_) -
      reinterpret_cast<char*>(&_impl_.farmer_grade_)) + sizeof(_impl_.farmer_friendship_exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleFarmlandData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.FarmlandPlantData current_plants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_current_plants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.FarmlandManagementInfo managment_plan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_managment_plan(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.Vector2 unlock_blocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unlock_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 farmer_grade = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.farmer_grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 farmer_friendship_exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.farmer_friendship_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.SimpleItemData ripe_items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ripe_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleFarmlandData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleFarmlandData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.FarmlandPlantData current_plants = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_current_plants_size()); i < n; i++) {
    const auto& repfield = this->_internal_current_plants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.FarmlandManagementInfo managment_plan = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_managment_plan_size()); i < n; i++) {
    const auto& repfield = this->_internal_managment_plan(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.Vector2 unlock_blocks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unlock_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_unlock_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 farmer_grade = 4;
  if (this->_internal_farmer_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_farmer_grade(), target);
  }

  // int32 farmer_friendship_exp = 5;
  if (this->_internal_farmer_friendship_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_farmer_friendship_exp(), target);
  }

  // repeated .idlepb.SimpleItemData ripe_items = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ripe_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_ripe_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleFarmlandData)
  return target;
}

size_t RoleFarmlandData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleFarmlandData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.FarmlandPlantData current_plants = 1;
  total_size += 1UL * this->_internal_current_plants_size();
  for (const auto& msg : this->_impl_.current_plants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.FarmlandManagementInfo managment_plan = 2;
  total_size += 1UL * this->_internal_managment_plan_size();
  for (const auto& msg : this->_impl_.managment_plan_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.Vector2 unlock_blocks = 3;
  total_size += 1UL * this->_internal_unlock_blocks_size();
  for (const auto& msg : this->_impl_.unlock_blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.SimpleItemData ripe_items = 6;
  total_size += 1UL * this->_internal_ripe_items_size();
  for (const auto& msg : this->_impl_.ripe_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 farmer_grade = 4;
  if (this->_internal_farmer_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_farmer_grade());
  }

  // int32 farmer_friendship_exp = 5;
  if (this->_internal_farmer_friendship_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_farmer_friendship_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleFarmlandData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleFarmlandData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleFarmlandData::GetClassData() const { return &_class_data_; }


void RoleFarmlandData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleFarmlandData*>(&to_msg);
  auto& from = static_cast<const RoleFarmlandData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleFarmlandData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.current_plants_.MergeFrom(from._impl_.current_plants_);
  _this->_impl_.managment_plan_.MergeFrom(from._impl_.managment_plan_);
  _this->_impl_.unlock_blocks_.MergeFrom(from._impl_.unlock_blocks_);
  _this->_impl_.ripe_items_.MergeFrom(from._impl_.ripe_items_);
  if (from._internal_farmer_grade() != 0) {
    _this->_internal_set_farmer_grade(from._internal_farmer_grade());
  }
  if (from._internal_farmer_friendship_exp() != 0) {
    _this->_internal_set_farmer_friendship_exp(from._internal_farmer_friendship_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleFarmlandData::CopyFrom(const RoleFarmlandData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleFarmlandData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFarmlandData::IsInitialized() const {
  return true;
}

void RoleFarmlandData::InternalSwap(RoleFarmlandData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.current_plants_.InternalSwap(&other->_impl_.current_plants_);
  _impl_.managment_plan_.InternalSwap(&other->_impl_.managment_plan_);
  _impl_.unlock_blocks_.InternalSwap(&other->_impl_.unlock_blocks_);
  _impl_.ripe_items_.InternalSwap(&other->_impl_.ripe_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleFarmlandData, _impl_.farmer_friendship_exp_)
      + sizeof(RoleFarmlandData::_impl_.farmer_friendship_exp_)
      - PROTOBUF_FIELD_OFFSET(RoleFarmlandData, _impl_.farmer_grade_)>(
          reinterpret_cast<char*>(&_impl_.farmer_grade_),
          reinterpret_cast<char*>(&other->_impl_.farmer_grade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleFarmlandData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[123]);
}

// ===================================================================

class RoleAvatarData::_Internal {
 public:
};

RoleAvatarData::RoleAvatarData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleAvatarData)
}
RoleAvatarData::RoleAvatarData(const RoleAvatarData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleAvatarData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.temp_package_){from._impl_.temp_package_}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.current_world_index_){}
    , decltype(_impl_.begin_time_){}
    , decltype(_impl_.last_draw_time_){}
    , decltype(_impl_.last_wrold_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rank_, &from._impl_.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_wrold_index_) -
    reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.last_wrold_index_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleAvatarData)
}

inline void RoleAvatarData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.temp_package_){arena}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.current_world_index_){0}
    , decltype(_impl_.begin_time_){int64_t{0}}
    , decltype(_impl_.last_draw_time_){int64_t{0}}
    , decltype(_impl_.last_wrold_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleAvatarData::~RoleAvatarData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleAvatarData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleAvatarData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.temp_package_.~RepeatedPtrField();
}

void RoleAvatarData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleAvatarData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleAvatarData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.temp_package_.Clear();
  ::memset(&_impl_.rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_wrold_index_) -
      reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.last_wrold_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleAvatarData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 current_world_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.current_world_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 begin_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_draw_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_draw_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.SimpleItemData temp_package = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_temp_package(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 last_wrold_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.last_wrold_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleAvatarData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleAvatarData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // int32 current_world_index = 2;
  if (this->_internal_current_world_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_world_index(), target);
  }

  // int64 begin_time = 3;
  if (this->_internal_begin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_begin_time(), target);
  }

  // int64 last_draw_time = 4;
  if (this->_internal_last_draw_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_draw_time(), target);
  }

  // repeated .idlepb.SimpleItemData temp_package = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_temp_package_size()); i < n; i++) {
    const auto& repfield = this->_internal_temp_package(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 last_wrold_index = 6;
  if (this->_internal_last_wrold_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_last_wrold_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleAvatarData)
  return target;
}

size_t RoleAvatarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleAvatarData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.SimpleItemData temp_package = 5;
  total_size += 1UL * this->_internal_temp_package_size();
  for (const auto& msg : this->_impl_.temp_package_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  // int32 current_world_index = 2;
  if (this->_internal_current_world_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_world_index());
  }

  // int64 begin_time = 3;
  if (this->_internal_begin_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_time());
  }

  // int64 last_draw_time = 4;
  if (this->_internal_last_draw_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_draw_time());
  }

  // int32 last_wrold_index = 6;
  if (this->_internal_last_wrold_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_wrold_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleAvatarData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleAvatarData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleAvatarData::GetClassData() const { return &_class_data_; }


void RoleAvatarData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleAvatarData*>(&to_msg);
  auto& from = static_cast<const RoleAvatarData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleAvatarData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.temp_package_.MergeFrom(from._impl_.temp_package_);
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_current_world_index() != 0) {
    _this->_internal_set_current_world_index(from._internal_current_world_index());
  }
  if (from._internal_begin_time() != 0) {
    _this->_internal_set_begin_time(from._internal_begin_time());
  }
  if (from._internal_last_draw_time() != 0) {
    _this->_internal_set_last_draw_time(from._internal_last_draw_time());
  }
  if (from._internal_last_wrold_index() != 0) {
    _this->_internal_set_last_wrold_index(from._internal_last_wrold_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleAvatarData::CopyFrom(const RoleAvatarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleAvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAvatarData::IsInitialized() const {
  return true;
}

void RoleAvatarData::InternalSwap(RoleAvatarData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.temp_package_.InternalSwap(&other->_impl_.temp_package_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleAvatarData, _impl_.last_wrold_index_)
      + sizeof(RoleAvatarData::_impl_.last_wrold_index_)
      - PROTOBUF_FIELD_OFFSET(RoleAvatarData, _impl_.rank_)>(
          reinterpret_cast<char*>(&_impl_.rank_),
          reinterpret_cast<char*>(&other->_impl_.rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleAvatarData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[124]);
}

// ===================================================================

class BiographyRoleLog::_Internal {
 public:
};

BiographyRoleLog::BiographyRoleLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.BiographyRoleLog)
}
BiographyRoleLog::BiographyRoleLog(const BiographyRoleLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BiographyRoleLog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zone_name_){}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.dao_year_){}
    , decltype(_impl_.log_type_){}
    , decltype(_impl_.poem_seed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.zone_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zone_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_zone_name().empty()) {
    _this->_impl_.zone_name_.Set(from._internal_zone_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dao_year_, &from._impl_.dao_year_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.poem_seed_) -
    reinterpret_cast<char*>(&_impl_.dao_year_)) + sizeof(_impl_.poem_seed_));
  // @@protoc_insertion_point(copy_constructor:idlepb.BiographyRoleLog)
}

inline void BiographyRoleLog::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zone_name_){}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.dao_year_){0}
    , decltype(_impl_.log_type_){0}
    , decltype(_impl_.poem_seed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.zone_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zone_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BiographyRoleLog::~BiographyRoleLog() {
  // @@protoc_insertion_point(destructor:idlepb.BiographyRoleLog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiographyRoleLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zone_name_.Destroy();
  _impl_.role_name_.Destroy();
  _impl_.content_.Destroy();
}

void BiographyRoleLog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiographyRoleLog::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.BiographyRoleLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zone_name_.ClearToEmpty();
  _impl_.role_name_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.dao_year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.poem_seed_) -
      reinterpret_cast<char*>(&_impl_.dao_year_)) + sizeof(_impl_.poem_seed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiographyRoleLog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 dao_year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dao_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 log_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.log_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 poem_seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.poem_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string zone_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_zone_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.BiographyRoleLog.zone_name"));
        } else
          goto handle_unusual;
        continue;
      // string role_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.BiographyRoleLog.role_name"));
        } else
          goto handle_unusual;
        continue;
      // string content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.BiographyRoleLog.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiographyRoleLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.BiographyRoleLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dao_year = 1;
  if (this->_internal_dao_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dao_year(), target);
  }

  // int32 log_type = 2;
  if (this->_internal_log_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_log_type(), target);
  }

  // int32 poem_seed = 3;
  if (this->_internal_poem_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_poem_seed(), target);
  }

  // string zone_name = 4;
  if (!this->_internal_zone_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_zone_name().data(), static_cast<int>(this->_internal_zone_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.BiographyRoleLog.zone_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_zone_name(), target);
  }

  // string role_name = 5;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.BiographyRoleLog.role_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_role_name(), target);
  }

  // string content = 6;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.BiographyRoleLog.content");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.BiographyRoleLog)
  return target;
}

size_t BiographyRoleLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.BiographyRoleLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string zone_name = 4;
  if (!this->_internal_zone_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zone_name());
  }

  // string role_name = 5;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // string content = 6;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 dao_year = 1;
  if (this->_internal_dao_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dao_year());
  }

  // int32 log_type = 2;
  if (this->_internal_log_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_log_type());
  }

  // int32 poem_seed = 3;
  if (this->_internal_poem_seed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_poem_seed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiographyRoleLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiographyRoleLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiographyRoleLog::GetClassData() const { return &_class_data_; }


void BiographyRoleLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BiographyRoleLog*>(&to_msg);
  auto& from = static_cast<const BiographyRoleLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.BiographyRoleLog)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_zone_name().empty()) {
    _this->_internal_set_zone_name(from._internal_zone_name());
  }
  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_dao_year() != 0) {
    _this->_internal_set_dao_year(from._internal_dao_year());
  }
  if (from._internal_log_type() != 0) {
    _this->_internal_set_log_type(from._internal_log_type());
  }
  if (from._internal_poem_seed() != 0) {
    _this->_internal_set_poem_seed(from._internal_poem_seed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiographyRoleLog::CopyFrom(const BiographyRoleLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.BiographyRoleLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiographyRoleLog::IsInitialized() const {
  return true;
}

void BiographyRoleLog::InternalSwap(BiographyRoleLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.zone_name_, lhs_arena,
      &other->_impl_.zone_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiographyRoleLog, _impl_.poem_seed_)
      + sizeof(BiographyRoleLog::_impl_.poem_seed_)
      - PROTOBUF_FIELD_OFFSET(BiographyRoleLog, _impl_.dao_year_)>(
          reinterpret_cast<char*>(&_impl_.dao_year_),
          reinterpret_cast<char*>(&other->_impl_.dao_year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiographyRoleLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[125]);
}

// ===================================================================

class RoleBiographyData::_Internal {
 public:
};

RoleBiographyData::RoleBiographyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleBiographyData)
}
RoleBiographyData::RoleBiographyData(const RoleBiographyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleBiographyData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.received_cfg_ids_){from._impl_.received_cfg_ids_}
    , /*decltype(_impl_._received_cfg_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.received_event_cfg_ids_){from._impl_.received_event_cfg_ids_}
    , /*decltype(_impl_._received_event_cfg_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.role_logs_){from._impl_.role_logs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleBiographyData)
}

inline void RoleBiographyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.received_cfg_ids_){arena}
    , /*decltype(_impl_._received_cfg_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.received_event_cfg_ids_){arena}
    , /*decltype(_impl_._received_event_cfg_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.role_logs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleBiographyData::~RoleBiographyData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleBiographyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleBiographyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.received_cfg_ids_.~RepeatedField();
  _impl_.received_event_cfg_ids_.~RepeatedField();
  _impl_.role_logs_.~RepeatedPtrField();
}

void RoleBiographyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleBiographyData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleBiographyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.received_cfg_ids_.Clear();
  _impl_.received_event_cfg_ids_.Clear();
  _impl_.role_logs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleBiographyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 received_cfg_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_received_cfg_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_received_cfg_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 received_event_cfg_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_received_event_cfg_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_received_event_cfg_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.BiographyRoleLog role_logs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleBiographyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleBiographyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 received_cfg_ids = 1;
  {
    int byte_size = _impl_._received_cfg_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_received_cfg_ids(), byte_size, target);
    }
  }

  // repeated int32 received_event_cfg_ids = 2;
  {
    int byte_size = _impl_._received_event_cfg_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_received_event_cfg_ids(), byte_size, target);
    }
  }

  // repeated .idlepb.BiographyRoleLog role_logs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_role_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_role_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleBiographyData)
  return target;
}

size_t RoleBiographyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleBiographyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 received_cfg_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.received_cfg_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._received_cfg_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 received_event_cfg_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.received_event_cfg_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._received_event_cfg_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .idlepb.BiographyRoleLog role_logs = 3;
  total_size += 1UL * this->_internal_role_logs_size();
  for (const auto& msg : this->_impl_.role_logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleBiographyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleBiographyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleBiographyData::GetClassData() const { return &_class_data_; }


void RoleBiographyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleBiographyData*>(&to_msg);
  auto& from = static_cast<const RoleBiographyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleBiographyData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.received_cfg_ids_.MergeFrom(from._impl_.received_cfg_ids_);
  _this->_impl_.received_event_cfg_ids_.MergeFrom(from._impl_.received_event_cfg_ids_);
  _this->_impl_.role_logs_.MergeFrom(from._impl_.role_logs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleBiographyData::CopyFrom(const RoleBiographyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleBiographyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBiographyData::IsInitialized() const {
  return true;
}

void RoleBiographyData::InternalSwap(RoleBiographyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.received_cfg_ids_.InternalSwap(&other->_impl_.received_cfg_ids_);
  _impl_.received_event_cfg_ids_.InternalSwap(&other->_impl_.received_event_cfg_ids_);
  _impl_.role_logs_.InternalSwap(&other->_impl_.role_logs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleBiographyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[126]);
}

// ===================================================================

class SimpleRoleInfo::_Internal {
 public:
  static const ::idlepb::CharacterModelConfig& model_config(const SimpleRoleInfo* msg);
};

const ::idlepb::CharacterModelConfig&
SimpleRoleInfo::_Internal::model_config(const SimpleRoleInfo* msg) {
  return *msg->_impl_.model_config_;
}
SimpleRoleInfo::SimpleRoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SimpleRoleInfo)
}
SimpleRoleInfo::SimpleRoleInfo(const SimpleRoleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleRoleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.sept_name_){}
    , decltype(_impl_.model_config_){nullptr}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.role_cultivation_direction_){}
    , decltype(_impl_.last_online_timespan_){}
    , decltype(_impl_.server_id_){}
    , decltype(_impl_.sept_position_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sept_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sept_name().empty()) {
    _this->_impl_.sept_name_.Set(from._internal_sept_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_model_config()) {
    _this->_impl_.model_config_ = new ::idlepb::CharacterModelConfig(*from._impl_.model_config_);
  }
  ::memcpy(&_impl_.role_id_, &from._impl_.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sept_position_) -
    reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.sept_position_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SimpleRoleInfo)
}

inline void SimpleRoleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.sept_name_){}
    , decltype(_impl_.model_config_){nullptr}
    , decltype(_impl_.role_id_){uint64_t{0u}}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.role_cultivation_direction_){0}
    , decltype(_impl_.last_online_timespan_){int64_t{0}}
    , decltype(_impl_.server_id_){int64_t{0}}
    , decltype(_impl_.sept_position_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sept_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimpleRoleInfo::~SimpleRoleInfo() {
  // @@protoc_insertion_point(destructor:idlepb.SimpleRoleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleRoleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_name_.Destroy();
  _impl_.sept_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.model_config_;
}

void SimpleRoleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleRoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SimpleRoleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_name_.ClearToEmpty();
  _impl_.sept_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.model_config_ != nullptr) {
    delete _impl_.model_config_;
  }
  _impl_.model_config_ = nullptr;
  ::memset(&_impl_.role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sept_position_) -
      reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.sept_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleRoleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.SimpleRoleInfo.role_name"));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CharacterModelConfig model_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CultivationDirection role_cultivation_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role_cultivation_direction(static_cast<::idlepb::CultivationDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // string sept_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sept_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.SimpleRoleInfo.sept_name"));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.SeptPosition sept_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sept_position(static_cast<::idlepb::SeptPosition>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 last_online_timespan = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.last_online_timespan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 server_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleRoleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SimpleRoleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_role_id(), target);
  }

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.SimpleRoleInfo.role_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_name(), target);
  }

  // .idlepb.CharacterModelConfig model_config = 3;
  if (this->_internal_has_model_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::model_config(this),
        _Internal::model_config(this).GetCachedSize(), target, stream);
  }

  // int32 rank = 4;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_rank(), target);
  }

  // .idlepb.CultivationDirection role_cultivation_direction = 5;
  if (this->_internal_role_cultivation_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_role_cultivation_direction(), target);
  }

  // string sept_name = 6;
  if (!this->_internal_sept_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sept_name().data(), static_cast<int>(this->_internal_sept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.SimpleRoleInfo.sept_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sept_name(), target);
  }

  // .idlepb.SeptPosition sept_position = 7;
  if (this->_internal_sept_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_sept_position(), target);
  }

  // int64 last_online_timespan = 21;
  if (this->_internal_last_online_timespan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_last_online_timespan(), target);
  }

  // int64 server_id = 22;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SimpleRoleInfo)
  return target;
}

size_t SimpleRoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SimpleRoleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // string sept_name = 6;
  if (!this->_internal_sept_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sept_name());
  }

  // .idlepb.CharacterModelConfig model_config = 3;
  if (this->_internal_has_model_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_config_);
  }

  // uint64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
  }

  // int32 rank = 4;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  // .idlepb.CultivationDirection role_cultivation_direction = 5;
  if (this->_internal_role_cultivation_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role_cultivation_direction());
  }

  // int64 last_online_timespan = 21;
  if (this->_internal_last_online_timespan() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_last_online_timespan());
  }

  // int64 server_id = 22;
  if (this->_internal_server_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_server_id());
  }

  // .idlepb.SeptPosition sept_position = 7;
  if (this->_internal_sept_position() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sept_position());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleRoleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleRoleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleRoleInfo::GetClassData() const { return &_class_data_; }


void SimpleRoleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleRoleInfo*>(&to_msg);
  auto& from = static_cast<const SimpleRoleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SimpleRoleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (!from._internal_sept_name().empty()) {
    _this->_internal_set_sept_name(from._internal_sept_name());
  }
  if (from._internal_has_model_config()) {
    _this->_internal_mutable_model_config()->::idlepb::CharacterModelConfig::MergeFrom(
        from._internal_model_config());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_role_cultivation_direction() != 0) {
    _this->_internal_set_role_cultivation_direction(from._internal_role_cultivation_direction());
  }
  if (from._internal_last_online_timespan() != 0) {
    _this->_internal_set_last_online_timespan(from._internal_last_online_timespan());
  }
  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  if (from._internal_sept_position() != 0) {
    _this->_internal_set_sept_position(from._internal_sept_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleRoleInfo::CopyFrom(const SimpleRoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SimpleRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleRoleInfo::IsInitialized() const {
  return true;
}

void SimpleRoleInfo::InternalSwap(SimpleRoleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sept_name_, lhs_arena,
      &other->_impl_.sept_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleRoleInfo, _impl_.sept_position_)
      + sizeof(SimpleRoleInfo::_impl_.sept_position_)
      - PROTOBUF_FIELD_OFFSET(SimpleRoleInfo, _impl_.model_config_)>(
          reinterpret_cast<char*>(&_impl_.model_config_),
          reinterpret_cast<char*>(&other->_impl_.model_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleRoleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[127]);
}

// ===================================================================

class ChatMessage::_Internal {
 public:
  static const ::idlepb::SimpleRoleInfo& role_info(const ChatMessage* msg);
};

const ::idlepb::SimpleRoleInfo&
ChatMessage::_Internal::role_info(const ChatMessage* msg) {
  return *msg->_impl_.role_info_;
}
ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.role_info_){nullptr}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_role_info()) {
    _this->_impl_.role_info_ = new ::idlepb::SimpleRoleInfo(*from._impl_.role_info_);
  }
  ::memcpy(&_impl_.role_id_, &from._impl_.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:idlepb.ChatMessage)
}

inline void ChatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.role_info_){nullptr}
    , decltype(_impl_.role_id_){uint64_t{0u}}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:idlepb.ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.role_info_;
}

void ChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.role_info_ != nullptr) {
    delete _impl_.role_info_;
  }
  _impl_.role_info_ = nullptr;
  ::memset(&_impl_.role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.ChatMessage.text"));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.SimpleRoleInfo role_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ChatMessageType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::idlepb::ChatMessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_role_id(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.ChatMessage.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // .idlepb.SimpleRoleInfo role_info = 3;
  if (this->_internal_has_role_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::role_info(this),
        _Internal::role_info(this).GetCachedSize(), target, stream);
  }

  // .idlepb.ChatMessageType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // int64 time = 5;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ChatMessage)
  return target;
}

size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .idlepb.SimpleRoleInfo role_info = 3;
  if (this->_internal_has_role_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.role_info_);
  }

  // uint64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
  }

  // int64 time = 5;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // .idlepb.ChatMessageType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }


void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ChatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_role_info()) {
    _this->_internal_mutable_role_info()->::idlepb::SimpleRoleInfo::MergeFrom(
        from._internal_role_info());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.type_)
      + sizeof(ChatMessage::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.role_info_)>(
          reinterpret_cast<char*>(&_impl_.role_info_),
          reinterpret_cast<char*>(&other->_impl_.role_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[128]);
}

// ===================================================================

class PrivateChatRecord::_Internal {
 public:
};

PrivateChatRecord::PrivateChatRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.PrivateChatRecord)
}
PrivateChatRecord::PrivateChatRecord(const PrivateChatRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrivateChatRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_record_){from._impl_.chat_record_}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.unread_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.role_id_, &from._impl_.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unread_num_) -
    reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.unread_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.PrivateChatRecord)
}

inline void PrivateChatRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_record_){arena}
    , decltype(_impl_.role_id_){uint64_t{0u}}
    , decltype(_impl_.unread_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrivateChatRecord::~PrivateChatRecord() {
  // @@protoc_insertion_point(destructor:idlepb.PrivateChatRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateChatRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chat_record_.~RepeatedPtrField();
}

void PrivateChatRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivateChatRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.PrivateChatRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chat_record_.Clear();
  ::memset(&_impl_.role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unread_num_) -
      reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.unread_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrivateChatRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ChatMessage chat_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chat_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 unread_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.unread_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateChatRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.PrivateChatRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_role_id(), target);
  }

  // repeated .idlepb.ChatMessage chat_record = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chat_record_size()); i < n; i++) {
    const auto& repfield = this->_internal_chat_record(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 unread_num = 3;
  if (this->_internal_unread_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_unread_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.PrivateChatRecord)
  return target;
}

size_t PrivateChatRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.PrivateChatRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ChatMessage chat_record = 2;
  total_size += 1UL * this->_internal_chat_record_size();
  for (const auto& msg : this->_impl_.chat_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
  }

  // int32 unread_num = 3;
  if (this->_internal_unread_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unread_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrivateChatRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrivateChatRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrivateChatRecord::GetClassData() const { return &_class_data_; }


void PrivateChatRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrivateChatRecord*>(&to_msg);
  auto& from = static_cast<const PrivateChatRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.PrivateChatRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chat_record_.MergeFrom(from._impl_.chat_record_);
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_unread_num() != 0) {
    _this->_internal_set_unread_num(from._internal_unread_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrivateChatRecord::CopyFrom(const PrivateChatRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.PrivateChatRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateChatRecord::IsInitialized() const {
  return true;
}

void PrivateChatRecord::InternalSwap(PrivateChatRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chat_record_.InternalSwap(&other->_impl_.chat_record_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateChatRecord, _impl_.unread_num_)
      + sizeof(PrivateChatRecord::_impl_.unread_num_)
      - PROTOBUF_FIELD_OFFSET(PrivateChatRecord, _impl_.role_id_)>(
          reinterpret_cast<char*>(&_impl_.role_id_),
          reinterpret_cast<char*>(&other->_impl_.role_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivateChatRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[129]);
}

// ===================================================================

class RolePrivateChatRecord::_Internal {
 public:
};

RolePrivateChatRecord::RolePrivateChatRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RolePrivateChatRecord)
}
RolePrivateChatRecord::RolePrivateChatRecord(const RolePrivateChatRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RolePrivateChatRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.role_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.role_id_ = from._impl_.role_id_;
  // @@protoc_insertion_point(copy_constructor:idlepb.RolePrivateChatRecord)
}

inline void RolePrivateChatRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.role_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RolePrivateChatRecord::~RolePrivateChatRecord() {
  // @@protoc_insertion_point(destructor:idlepb.RolePrivateChatRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RolePrivateChatRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void RolePrivateChatRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RolePrivateChatRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RolePrivateChatRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.role_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RolePrivateChatRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.PrivateChatRecord data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RolePrivateChatRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RolePrivateChatRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_role_id(), target);
  }

  // repeated .idlepb.PrivateChatRecord data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RolePrivateChatRecord)
  return target;
}

size_t RolePrivateChatRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RolePrivateChatRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.PrivateChatRecord data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RolePrivateChatRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RolePrivateChatRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RolePrivateChatRecord::GetClassData() const { return &_class_data_; }


void RolePrivateChatRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RolePrivateChatRecord*>(&to_msg);
  auto& from = static_cast<const RolePrivateChatRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RolePrivateChatRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RolePrivateChatRecord::CopyFrom(const RolePrivateChatRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RolePrivateChatRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolePrivateChatRecord::IsInitialized() const {
  return true;
}

void RolePrivateChatRecord::InternalSwap(RolePrivateChatRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  swap(_impl_.role_id_, other->_impl_.role_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RolePrivateChatRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[130]);
}

// ===================================================================

class ChatData::_Internal {
 public:
};

ChatData::ChatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ChatData)
}
ChatData::ChatData(const ChatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.colony_servers_){from._impl_.colony_servers_}
    , decltype(_impl_.quad_servers_){from._impl_.quad_servers_}
    , decltype(_impl_.local_server_){from._impl_.local_server_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.ChatData)
}

inline void ChatData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.colony_servers_){arena}
    , decltype(_impl_.quad_servers_){arena}
    , decltype(_impl_.local_server_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChatData::~ChatData() {
  // @@protoc_insertion_point(destructor:idlepb.ChatData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.colony_servers_.~RepeatedPtrField();
  _impl_.quad_servers_.~RepeatedPtrField();
  _impl_.local_server_.~RepeatedPtrField();
}

void ChatData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ChatData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.colony_servers_.Clear();
  _impl_.quad_servers_.Clear();
  _impl_.local_server_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.ChatMessage colony_servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colony_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ChatMessage quad_servers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quad_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.ChatMessage local_server = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_local_server(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ChatData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.ChatMessage colony_servers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colony_servers_size()); i < n; i++) {
    const auto& repfield = this->_internal_colony_servers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.ChatMessage quad_servers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quad_servers_size()); i < n; i++) {
    const auto& repfield = this->_internal_quad_servers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.ChatMessage local_server = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_local_server_size()); i < n; i++) {
    const auto& repfield = this->_internal_local_server(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ChatData)
  return target;
}

size_t ChatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ChatData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.ChatMessage colony_servers = 1;
  total_size += 1UL * this->_internal_colony_servers_size();
  for (const auto& msg : this->_impl_.colony_servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.ChatMessage quad_servers = 2;
  total_size += 1UL * this->_internal_quad_servers_size();
  for (const auto& msg : this->_impl_.quad_servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.ChatMessage local_server = 3;
  total_size += 1UL * this->_internal_local_server_size();
  for (const auto& msg : this->_impl_.local_server_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatData::GetClassData() const { return &_class_data_; }


void ChatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatData*>(&to_msg);
  auto& from = static_cast<const ChatData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ChatData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.colony_servers_.MergeFrom(from._impl_.colony_servers_);
  _this->_impl_.quad_servers_.MergeFrom(from._impl_.quad_servers_);
  _this->_impl_.local_server_.MergeFrom(from._impl_.local_server_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatData::CopyFrom(const ChatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ChatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatData::IsInitialized() const {
  return true;
}

void ChatData::InternalSwap(ChatData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.colony_servers_.InternalSwap(&other->_impl_.colony_servers_);
  _impl_.quad_servers_.InternalSwap(&other->_impl_.quad_servers_);
  _impl_.local_server_.InternalSwap(&other->_impl_.local_server_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[131]);
}

// ===================================================================

class FriendListItem::_Internal {
 public:
};

FriendListItem::FriendListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.FriendListItem)
}
FriendListItem::FriendListItem(const FriendListItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendListItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_id_){}
    , decltype(_impl_.relationship_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.role_id_, &from._impl_.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:idlepb.FriendListItem)
}

inline void FriendListItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_id_){int64_t{0}}
    , decltype(_impl_.relationship_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FriendListItem::~FriendListItem() {
  // @@protoc_insertion_point(destructor:idlepb.FriendListItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendListItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendListItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.FriendListItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendListItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 relationship = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.FriendRelationshipType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::idlepb::FriendRelationshipType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendListItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.FriendListItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  // int32 relationship = 2;
  if (this->_internal_relationship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_relationship(), target);
  }

  // .idlepb.FriendRelationshipType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.FriendListItem)
  return target;
}

size_t FriendListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.FriendListItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_role_id());
  }

  // int32 relationship = 2;
  if (this->_internal_relationship() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_relationship());
  }

  // .idlepb.FriendRelationshipType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendListItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendListItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendListItem::GetClassData() const { return &_class_data_; }


void FriendListItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendListItem*>(&to_msg);
  auto& from = static_cast<const FriendListItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.FriendListItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_relationship() != 0) {
    _this->_internal_set_relationship(from._internal_relationship());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendListItem::CopyFrom(const FriendListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.FriendListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListItem::IsInitialized() const {
  return true;
}

void FriendListItem::InternalSwap(FriendListItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendListItem, _impl_.type_)
      + sizeof(FriendListItem::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(FriendListItem, _impl_.role_id_)>(
          reinterpret_cast<char*>(&_impl_.role_id_),
          reinterpret_cast<char*>(&other->_impl_.role_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendListItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[132]);
}

// ===================================================================

class RoleFriendData::_Internal {
 public:
};

RoleFriendData::RoleFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleFriendData)
}
RoleFriendData::RoleFriendData(const RoleFriendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleFriendData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.friend_list_){from._impl_.friend_list_}
    , decltype(_impl_.request_list_){from._impl_.request_list_}
    , /*decltype(_impl_._request_list_cached_byte_size_)*/{0}
    , decltype(_impl_.block_list_){from._impl_.block_list_}
    , /*decltype(_impl_._block_list_cached_byte_size_)*/{0}
    , decltype(_impl_.my_request_){from._impl_.my_request_}
    , /*decltype(_impl_._my_request_cached_byte_size_)*/{0}
    , decltype(_impl_.history_list_){from._impl_.history_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleFriendData)
}

inline void RoleFriendData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.friend_list_){arena}
    , decltype(_impl_.request_list_){arena}
    , /*decltype(_impl_._request_list_cached_byte_size_)*/{0}
    , decltype(_impl_.block_list_){arena}
    , /*decltype(_impl_._block_list_cached_byte_size_)*/{0}
    , decltype(_impl_.my_request_){arena}
    , /*decltype(_impl_._my_request_cached_byte_size_)*/{0}
    , decltype(_impl_.history_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleFriendData::~RoleFriendData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleFriendData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleFriendData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.friend_list_.~RepeatedPtrField();
  _impl_.request_list_.~RepeatedField();
  _impl_.block_list_.~RepeatedField();
  _impl_.my_request_.~RepeatedField();
  _impl_.history_list_.~RepeatedPtrField();
}

void RoleFriendData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleFriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleFriendData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friend_list_.Clear();
  _impl_.request_list_.Clear();
  _impl_.block_list_.Clear();
  _impl_.my_request_.Clear();
  _impl_.history_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleFriendData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.FriendListItem friend_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friend_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 request_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_request_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_request_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 block_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_block_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_block_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 my_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_my_request(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_my_request(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.FriendListItem history_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleFriendData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleFriendData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.FriendListItem friend_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_friend_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_friend_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 request_list = 2;
  {
    int byte_size = _impl_._request_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_request_list(), byte_size, target);
    }
  }

  // repeated int64 block_list = 3;
  {
    int byte_size = _impl_._block_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_block_list(), byte_size, target);
    }
  }

  // repeated int64 my_request = 4;
  {
    int byte_size = _impl_._my_request_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_my_request(), byte_size, target);
    }
  }

  // repeated .idlepb.FriendListItem history_list = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_history_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_history_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleFriendData)
  return target;
}

size_t RoleFriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleFriendData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.FriendListItem friend_list = 1;
  total_size += 1UL * this->_internal_friend_list_size();
  for (const auto& msg : this->_impl_.friend_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 request_list = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.request_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._request_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 block_list = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.block_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._block_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 my_request = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.my_request_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._my_request_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .idlepb.FriendListItem history_list = 5;
  total_size += 1UL * this->_internal_history_list_size();
  for (const auto& msg : this->_impl_.history_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleFriendData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleFriendData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleFriendData::GetClassData() const { return &_class_data_; }


void RoleFriendData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleFriendData*>(&to_msg);
  auto& from = static_cast<const RoleFriendData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleFriendData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.friend_list_.MergeFrom(from._impl_.friend_list_);
  _this->_impl_.request_list_.MergeFrom(from._impl_.request_list_);
  _this->_impl_.block_list_.MergeFrom(from._impl_.block_list_);
  _this->_impl_.my_request_.MergeFrom(from._impl_.my_request_);
  _this->_impl_.history_list_.MergeFrom(from._impl_.history_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleFriendData::CopyFrom(const RoleFriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFriendData::IsInitialized() const {
  return true;
}

void RoleFriendData::InternalSwap(RoleFriendData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.friend_list_.InternalSwap(&other->_impl_.friend_list_);
  _impl_.request_list_.InternalSwap(&other->_impl_.request_list_);
  _impl_.block_list_.InternalSwap(&other->_impl_.block_list_);
  _impl_.my_request_.InternalSwap(&other->_impl_.my_request_);
  _impl_.history_list_.InternalSwap(&other->_impl_.history_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleFriendData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[133]);
}

// ===================================================================

class RoleOfflineFunctionData::_Internal {
 public:
  static const ::idlepb::RoleFriendData& friend_data(const RoleOfflineFunctionData* msg);
  static const ::idlepb::RoleLeaderboardData& leaderboard_data(const RoleOfflineFunctionData* msg);
};

const ::idlepb::RoleFriendData&
RoleOfflineFunctionData::_Internal::friend_data(const RoleOfflineFunctionData* msg) {
  return *msg->_impl_.friend_data_;
}
const ::idlepb::RoleLeaderboardData&
RoleOfflineFunctionData::_Internal::leaderboard_data(const RoleOfflineFunctionData* msg) {
  return *msg->_impl_.leaderboard_data_;
}
RoleOfflineFunctionData::RoleOfflineFunctionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleOfflineFunctionData)
}
RoleOfflineFunctionData::RoleOfflineFunctionData(const RoleOfflineFunctionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleOfflineFunctionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mails_){from._impl_.mails_}
    , decltype(_impl_.private_chat_data_){from._impl_.private_chat_data_}
    , decltype(_impl_.role_logs_){from._impl_.role_logs_}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.friend_data_){nullptr}
    , decltype(_impl_.leaderboard_data_){nullptr}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.degree_){}
    , decltype(_impl_.total_exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_friend_data()) {
    _this->_impl_.friend_data_ = new ::idlepb::RoleFriendData(*from._impl_.friend_data_);
  }
  if (from._internal_has_leaderboard_data()) {
    _this->_impl_.leaderboard_data_ = new ::idlepb::RoleLeaderboardData(*from._impl_.leaderboard_data_);
  }
  ::memcpy(&_impl_.role_id_, &from._impl_.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_exp_) -
    reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.total_exp_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleOfflineFunctionData)
}

inline void RoleOfflineFunctionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mails_){arena}
    , decltype(_impl_.private_chat_data_){arena}
    , decltype(_impl_.role_logs_){arena}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.friend_data_){nullptr}
    , decltype(_impl_.leaderboard_data_){nullptr}
    , decltype(_impl_.role_id_){int64_t{0}}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.degree_){0}
    , decltype(_impl_.total_exp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleOfflineFunctionData::~RoleOfflineFunctionData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleOfflineFunctionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleOfflineFunctionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mails_.~RepeatedPtrField();
  _impl_.private_chat_data_.~RepeatedPtrField();
  _impl_.role_logs_.~RepeatedPtrField();
  _impl_.role_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.friend_data_;
  if (this != internal_default_instance()) delete _impl_.leaderboard_data_;
}

void RoleOfflineFunctionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleOfflineFunctionData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleOfflineFunctionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mails_.Clear();
  _impl_.private_chat_data_.Clear();
  _impl_.role_logs_.Clear();
  _impl_.role_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.friend_data_ != nullptr) {
    delete _impl_.friend_data_;
  }
  _impl_.friend_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.leaderboard_data_ != nullptr) {
    delete _impl_.leaderboard_data_;
  }
  _impl_.leaderboard_data_ = nullptr;
  ::memset(&_impl_.role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_exp_) -
      reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.total_exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleOfflineFunctionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.Mail mails = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleFriendData friend_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.PrivateChatRecord private_chat_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_private_chat_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.BiographyRoleLog role_logs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleLeaderboardData leaderboard_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaderboard_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.RoleOfflineFunctionData.role_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 rank = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 degree = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_exp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.total_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleOfflineFunctionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleOfflineFunctionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  // repeated .idlepb.Mail mails = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mails_size()); i < n; i++) {
    const auto& repfield = this->_internal_mails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .idlepb.RoleFriendData friend_data = 3;
  if (this->_internal_has_friend_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::friend_data(this),
        _Internal::friend_data(this).GetCachedSize(), target, stream);
  }

  // repeated .idlepb.PrivateChatRecord private_chat_data = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_private_chat_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_private_chat_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.BiographyRoleLog role_logs = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_role_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_role_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .idlepb.RoleLeaderboardData leaderboard_data = 6;
  if (this->_internal_has_leaderboard_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::leaderboard_data(this),
        _Internal::leaderboard_data(this).GetCachedSize(), target, stream);
  }

  // string role_name = 11;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.RoleOfflineFunctionData.role_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_role_name(), target);
  }

  // int32 rank = 12;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_rank(), target);
  }

  // int32 degree = 13;
  if (this->_internal_degree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_degree(), target);
  }

  // int64 total_exp = 14;
  if (this->_internal_total_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_total_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleOfflineFunctionData)
  return target;
}

size_t RoleOfflineFunctionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleOfflineFunctionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.Mail mails = 2;
  total_size += 1UL * this->_internal_mails_size();
  for (const auto& msg : this->_impl_.mails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.PrivateChatRecord private_chat_data = 4;
  total_size += 1UL * this->_internal_private_chat_data_size();
  for (const auto& msg : this->_impl_.private_chat_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.BiographyRoleLog role_logs = 5;
  total_size += 1UL * this->_internal_role_logs_size();
  for (const auto& msg : this->_impl_.role_logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string role_name = 11;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .idlepb.RoleFriendData friend_data = 3;
  if (this->_internal_has_friend_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.friend_data_);
  }

  // .idlepb.RoleLeaderboardData leaderboard_data = 6;
  if (this->_internal_has_leaderboard_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leaderboard_data_);
  }

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_role_id());
  }

  // int32 rank = 12;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  // int32 degree = 13;
  if (this->_internal_degree() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_degree());
  }

  // int64 total_exp = 14;
  if (this->_internal_total_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleOfflineFunctionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleOfflineFunctionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleOfflineFunctionData::GetClassData() const { return &_class_data_; }


void RoleOfflineFunctionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleOfflineFunctionData*>(&to_msg);
  auto& from = static_cast<const RoleOfflineFunctionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleOfflineFunctionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mails_.MergeFrom(from._impl_.mails_);
  _this->_impl_.private_chat_data_.MergeFrom(from._impl_.private_chat_data_);
  _this->_impl_.role_logs_.MergeFrom(from._impl_.role_logs_);
  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (from._internal_has_friend_data()) {
    _this->_internal_mutable_friend_data()->::idlepb::RoleFriendData::MergeFrom(
        from._internal_friend_data());
  }
  if (from._internal_has_leaderboard_data()) {
    _this->_internal_mutable_leaderboard_data()->::idlepb::RoleLeaderboardData::MergeFrom(
        from._internal_leaderboard_data());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_degree() != 0) {
    _this->_internal_set_degree(from._internal_degree());
  }
  if (from._internal_total_exp() != 0) {
    _this->_internal_set_total_exp(from._internal_total_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleOfflineFunctionData::CopyFrom(const RoleOfflineFunctionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleOfflineFunctionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOfflineFunctionData::IsInitialized() const {
  return true;
}

void RoleOfflineFunctionData::InternalSwap(RoleOfflineFunctionData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mails_.InternalSwap(&other->_impl_.mails_);
  _impl_.private_chat_data_.InternalSwap(&other->_impl_.private_chat_data_);
  _impl_.role_logs_.InternalSwap(&other->_impl_.role_logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleOfflineFunctionData, _impl_.total_exp_)
      + sizeof(RoleOfflineFunctionData::_impl_.total_exp_)
      - PROTOBUF_FIELD_OFFSET(RoleOfflineFunctionData, _impl_.friend_data_)>(
          reinterpret_cast<char*>(&_impl_.friend_data_),
          reinterpret_cast<char*>(&other->_impl_.friend_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleOfflineFunctionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[134]);
}

// ===================================================================

class ServerCounterData::_Internal {
 public:
};

ServerCounterData::ServerCounterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.ServerCounterData)
}
ServerCounterData::ServerCounterData(const ServerCounterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerCounterData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.function_counter_){from._impl_.function_counter_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.ServerCounterData)
}

inline void ServerCounterData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.function_counter_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerCounterData::~ServerCounterData() {
  // @@protoc_insertion_point(destructor:idlepb.ServerCounterData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerCounterData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.function_counter_.~RepeatedPtrField();
}

void ServerCounterData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerCounterData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.ServerCounterData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.function_counter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerCounterData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.FunctionCounter function_counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_function_counter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerCounterData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.ServerCounterData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.FunctionCounter function_counter = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_function_counter_size()); i < n; i++) {
    const auto& repfield = this->_internal_function_counter(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.ServerCounterData)
  return target;
}

size_t ServerCounterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.ServerCounterData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.FunctionCounter function_counter = 1;
  total_size += 1UL * this->_internal_function_counter_size();
  for (const auto& msg : this->_impl_.function_counter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerCounterData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerCounterData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerCounterData::GetClassData() const { return &_class_data_; }


void ServerCounterData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerCounterData*>(&to_msg);
  auto& from = static_cast<const ServerCounterData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.ServerCounterData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.function_counter_.MergeFrom(from._impl_.function_counter_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerCounterData::CopyFrom(const ServerCounterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.ServerCounterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCounterData::IsInitialized() const {
  return true;
}

void ServerCounterData::InternalSwap(ServerCounterData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.function_counter_.InternalSwap(&other->_impl_.function_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerCounterData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[135]);
}

// ===================================================================

class SocialFunctionCommonSaveData::_Internal {
 public:
  static const ::idlepb::ServerCounterData& server_counter_data(const SocialFunctionCommonSaveData* msg);
};

const ::idlepb::ServerCounterData&
SocialFunctionCommonSaveData::_Internal::server_counter_data(const SocialFunctionCommonSaveData* msg) {
  return *msg->_impl_.server_counter_data_;
}
SocialFunctionCommonSaveData::SocialFunctionCommonSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SocialFunctionCommonSaveData)
}
SocialFunctionCommonSaveData::SocialFunctionCommonSaveData(const SocialFunctionCommonSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SocialFunctionCommonSaveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offline_role_datas_){from._impl_.offline_role_datas_}
    , decltype(_impl_.role_list_){from._impl_.role_list_}
    , decltype(_impl_.server_counter_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_counter_data()) {
    _this->_impl_.server_counter_data_ = new ::idlepb::ServerCounterData(*from._impl_.server_counter_data_);
  }
  // @@protoc_insertion_point(copy_constructor:idlepb.SocialFunctionCommonSaveData)
}

inline void SocialFunctionCommonSaveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offline_role_datas_){arena}
    , decltype(_impl_.role_list_){arena}
    , decltype(_impl_.server_counter_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SocialFunctionCommonSaveData::~SocialFunctionCommonSaveData() {
  // @@protoc_insertion_point(destructor:idlepb.SocialFunctionCommonSaveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SocialFunctionCommonSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.offline_role_datas_.~RepeatedPtrField();
  _impl_.role_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.server_counter_data_;
}

void SocialFunctionCommonSaveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SocialFunctionCommonSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SocialFunctionCommonSaveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.offline_role_datas_.Clear();
  _impl_.role_list_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.server_counter_data_ != nullptr) {
    delete _impl_.server_counter_data_;
  }
  _impl_.server_counter_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocialFunctionCommonSaveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.RoleOfflineFunctionData offline_role_datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_offline_role_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.ServerCounterData server_counter_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_counter_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.StringInt64Pair role_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SocialFunctionCommonSaveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SocialFunctionCommonSaveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.RoleOfflineFunctionData offline_role_datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_offline_role_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_offline_role_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .idlepb.ServerCounterData server_counter_data = 2;
  if (this->_internal_has_server_counter_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::server_counter_data(this),
        _Internal::server_counter_data(this).GetCachedSize(), target, stream);
  }

  // repeated .idlepb.StringInt64Pair role_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_role_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_role_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SocialFunctionCommonSaveData)
  return target;
}

size_t SocialFunctionCommonSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SocialFunctionCommonSaveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.RoleOfflineFunctionData offline_role_datas = 1;
  total_size += 1UL * this->_internal_offline_role_datas_size();
  for (const auto& msg : this->_impl_.offline_role_datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.StringInt64Pair role_list = 3;
  total_size += 1UL * this->_internal_role_list_size();
  for (const auto& msg : this->_impl_.role_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .idlepb.ServerCounterData server_counter_data = 2;
  if (this->_internal_has_server_counter_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_counter_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocialFunctionCommonSaveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SocialFunctionCommonSaveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocialFunctionCommonSaveData::GetClassData() const { return &_class_data_; }


void SocialFunctionCommonSaveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SocialFunctionCommonSaveData*>(&to_msg);
  auto& from = static_cast<const SocialFunctionCommonSaveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SocialFunctionCommonSaveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.offline_role_datas_.MergeFrom(from._impl_.offline_role_datas_);
  _this->_impl_.role_list_.MergeFrom(from._impl_.role_list_);
  if (from._internal_has_server_counter_data()) {
    _this->_internal_mutable_server_counter_data()->::idlepb::ServerCounterData::MergeFrom(
        from._internal_server_counter_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocialFunctionCommonSaveData::CopyFrom(const SocialFunctionCommonSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SocialFunctionCommonSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialFunctionCommonSaveData::IsInitialized() const {
  return true;
}

void SocialFunctionCommonSaveData::InternalSwap(SocialFunctionCommonSaveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.offline_role_datas_.InternalSwap(&other->_impl_.offline_role_datas_);
  _impl_.role_list_.InternalSwap(&other->_impl_.role_list_);
  swap(_impl_.server_counter_data_, other->_impl_.server_counter_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocialFunctionCommonSaveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[136]);
}

// ===================================================================

class RoleSaveData::_Internal {
 public:
  static const ::idlepb::RoleData& role_data(const RoleSaveData* msg);
  static const ::idlepb::GameStatsAllModuleData& all_stats_data(const RoleSaveData* msg);
  static const ::idlepb::RoleQuestData& quest(const RoleSaveData* msg);
  static const ::idlepb::RoleShopData& shop(const RoleSaveData* msg);
  static const ::idlepb::RoleTemporaryPackageData& temporary_package(const RoleSaveData* msg);
  static const ::idlepb::RoleInventoryData& inventory(const RoleSaveData* msg);
  static const ::idlepb::RoleOfflineData& offline_data(const RoleSaveData* msg);
  static const ::idlepb::RoleAlchemyData& alchemy_data(const RoleSaveData* msg);
  static const ::idlepb::RoleDeluxeShopData& deluxe_shop(const RoleSaveData* msg);
  static const ::idlepb::RoleLeaderboardData& leaderboard_data(const RoleSaveData* msg);
  static const ::idlepb::RoleMailData& mail_data(const RoleSaveData* msg);
  static const ::idlepb::RoleForgeData& forge_data(const RoleSaveData* msg);
  static const ::idlepb::RolePillElixirData& pillelixir_data(const RoleSaveData* msg);
  static const ::idlepb::CommonCultivationData& common_cultivation_data(const RoleSaveData* msg);
  static const ::idlepb::RoleZasData& zas_data(const RoleSaveData* msg);
  static const ::idlepb::RoleMonsterTowerData& monster_tower_data(const RoleSaveData* msg);
  static const ::idlepb::RoleShanhetuData& shanhetu_data(const RoleSaveData* msg);
  static const ::idlepb::RoleBossInvasionData& boss_invasion_data(const RoleSaveData* msg);
  static const ::idlepb::RoleMasiveData& massive_data(const RoleSaveData* msg);
  static const ::idlepb::RoleChecklistData& checklist_data(const RoleSaveData* msg);
  static const ::idlepb::RoleCommonItemExchangeData& common_item_exchange_data(const RoleSaveData* msg);
  static const ::idlepb::RoleSeptData& sept_data(const RoleSaveData* msg);
  static const ::idlepb::RoleTreasurySaveData& treasury_chest_data(const RoleSaveData* msg);
  static const ::idlepb::RoleGongFaData& gongfa_data(const RoleSaveData* msg);
  static const ::idlepb::RoleFuZengData& fuzeng_data(const RoleSaveData* msg);
  static const ::idlepb::RoleCollectionSaveData& collection_data(const RoleSaveData* msg);
  static const ::idlepb::RoleLifeCounterData& life_counter_data(const RoleSaveData* msg);
  static const ::idlepb::RoleAppearanceData& appearance_data(const RoleSaveData* msg);
  static const ::idlepb::RoleArenaCheckListData& arena_check_list_data(const RoleSaveData* msg);
  static const ::idlepb::RoleDungeonKillAllData& dungeon_kill_all_data(const RoleSaveData* msg);
  static const ::idlepb::RoleFarmlandData& farmland_data(const RoleSaveData* msg);
  static const ::idlepb::RoleDungeonSurviveData& dungeon_survive_data(const RoleSaveData* msg);
  static const ::idlepb::RoleFriendData& friend_data(const RoleSaveData* msg);
  static const ::idlepb::RoleAvatarData& avatar_data(const RoleSaveData* msg);
  static const ::idlepb::RoleArenaExplorationStatisticalData& arena_statistical_data(const RoleSaveData* msg);
  static const ::idlepb::RoleBiographyData& biography_data(const RoleSaveData* msg);
  static const ::idlepb::RoleVipShopData& vip_shop_data(const RoleSaveData* msg);
};

const ::idlepb::RoleData&
RoleSaveData::_Internal::role_data(const RoleSaveData* msg) {
  return *msg->_impl_.role_data_;
}
const ::idlepb::GameStatsAllModuleData&
RoleSaveData::_Internal::all_stats_data(const RoleSaveData* msg) {
  return *msg->_impl_.all_stats_data_;
}
const ::idlepb::RoleQuestData&
RoleSaveData::_Internal::quest(const RoleSaveData* msg) {
  return *msg->_impl_.quest_;
}
const ::idlepb::RoleShopData&
RoleSaveData::_Internal::shop(const RoleSaveData* msg) {
  return *msg->_impl_.shop_;
}
const ::idlepb::RoleTemporaryPackageData&
RoleSaveData::_Internal::temporary_package(const RoleSaveData* msg) {
  return *msg->_impl_.temporary_package_;
}
const ::idlepb::RoleInventoryData&
RoleSaveData::_Internal::inventory(const RoleSaveData* msg) {
  return *msg->_impl_.inventory_;
}
const ::idlepb::RoleOfflineData&
RoleSaveData::_Internal::offline_data(const RoleSaveData* msg) {
  return *msg->_impl_.offline_data_;
}
const ::idlepb::RoleAlchemyData&
RoleSaveData::_Internal::alchemy_data(const RoleSaveData* msg) {
  return *msg->_impl_.alchemy_data_;
}
const ::idlepb::RoleDeluxeShopData&
RoleSaveData::_Internal::deluxe_shop(const RoleSaveData* msg) {
  return *msg->_impl_.deluxe_shop_;
}
const ::idlepb::RoleLeaderboardData&
RoleSaveData::_Internal::leaderboard_data(const RoleSaveData* msg) {
  return *msg->_impl_.leaderboard_data_;
}
const ::idlepb::RoleMailData&
RoleSaveData::_Internal::mail_data(const RoleSaveData* msg) {
  return *msg->_impl_.mail_data_;
}
const ::idlepb::RoleForgeData&
RoleSaveData::_Internal::forge_data(const RoleSaveData* msg) {
  return *msg->_impl_.forge_data_;
}
const ::idlepb::RolePillElixirData&
RoleSaveData::_Internal::pillelixir_data(const RoleSaveData* msg) {
  return *msg->_impl_.pillelixir_data_;
}
const ::idlepb::CommonCultivationData&
RoleSaveData::_Internal::common_cultivation_data(const RoleSaveData* msg) {
  return *msg->_impl_.common_cultivation_data_;
}
const ::idlepb::RoleZasData&
RoleSaveData::_Internal::zas_data(const RoleSaveData* msg) {
  return *msg->_impl_.zas_data_;
}
const ::idlepb::RoleMonsterTowerData&
RoleSaveData::_Internal::monster_tower_data(const RoleSaveData* msg) {
  return *msg->_impl_.monster_tower_data_;
}
const ::idlepb::RoleShanhetuData&
RoleSaveData::_Internal::shanhetu_data(const RoleSaveData* msg) {
  return *msg->_impl_.shanhetu_data_;
}
const ::idlepb::RoleBossInvasionData&
RoleSaveData::_Internal::boss_invasion_data(const RoleSaveData* msg) {
  return *msg->_impl_.boss_invasion_data_;
}
const ::idlepb::RoleMasiveData&
RoleSaveData::_Internal::massive_data(const RoleSaveData* msg) {
  return *msg->_impl_.massive_data_;
}
const ::idlepb::RoleChecklistData&
RoleSaveData::_Internal::checklist_data(const RoleSaveData* msg) {
  return *msg->_impl_.checklist_data_;
}
const ::idlepb::RoleCommonItemExchangeData&
RoleSaveData::_Internal::common_item_exchange_data(const RoleSaveData* msg) {
  return *msg->_impl_.common_item_exchange_data_;
}
const ::idlepb::RoleSeptData&
RoleSaveData::_Internal::sept_data(const RoleSaveData* msg) {
  return *msg->_impl_.sept_data_;
}
const ::idlepb::RoleTreasurySaveData&
RoleSaveData::_Internal::treasury_chest_data(const RoleSaveData* msg) {
  return *msg->_impl_.treasury_chest_data_;
}
const ::idlepb::RoleGongFaData&
RoleSaveData::_Internal::gongfa_data(const RoleSaveData* msg) {
  return *msg->_impl_.gongfa_data_;
}
const ::idlepb::RoleFuZengData&
RoleSaveData::_Internal::fuzeng_data(const RoleSaveData* msg) {
  return *msg->_impl_.fuzeng_data_;
}
const ::idlepb::RoleCollectionSaveData&
RoleSaveData::_Internal::collection_data(const RoleSaveData* msg) {
  return *msg->_impl_.collection_data_;
}
const ::idlepb::RoleLifeCounterData&
RoleSaveData::_Internal::life_counter_data(const RoleSaveData* msg) {
  return *msg->_impl_.life_counter_data_;
}
const ::idlepb::RoleAppearanceData&
RoleSaveData::_Internal::appearance_data(const RoleSaveData* msg) {
  return *msg->_impl_.appearance_data_;
}
const ::idlepb::RoleArenaCheckListData&
RoleSaveData::_Internal::arena_check_list_data(const RoleSaveData* msg) {
  return *msg->_impl_.arena_check_list_data_;
}
const ::idlepb::RoleDungeonKillAllData&
RoleSaveData::_Internal::dungeon_kill_all_data(const RoleSaveData* msg) {
  return *msg->_impl_.dungeon_kill_all_data_;
}
const ::idlepb::RoleFarmlandData&
RoleSaveData::_Internal::farmland_data(const RoleSaveData* msg) {
  return *msg->_impl_.farmland_data_;
}
const ::idlepb::RoleDungeonSurviveData&
RoleSaveData::_Internal::dungeon_survive_data(const RoleSaveData* msg) {
  return *msg->_impl_.dungeon_survive_data_;
}
const ::idlepb::RoleFriendData&
RoleSaveData::_Internal::friend_data(const RoleSaveData* msg) {
  return *msg->_impl_.friend_data_;
}
const ::idlepb::RoleAvatarData&
RoleSaveData::_Internal::avatar_data(const RoleSaveData* msg) {
  return *msg->_impl_.avatar_data_;
}
const ::idlepb::RoleArenaExplorationStatisticalData&
RoleSaveData::_Internal::arena_statistical_data(const RoleSaveData* msg) {
  return *msg->_impl_.arena_statistical_data_;
}
const ::idlepb::RoleBiographyData&
RoleSaveData::_Internal::biography_data(const RoleSaveData* msg) {
  return *msg->_impl_.biography_data_;
}
const ::idlepb::RoleVipShopData&
RoleSaveData::_Internal::vip_shop_data(const RoleSaveData* msg) {
  return *msg->_impl_.vip_shop_data_;
}
RoleSaveData::RoleSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleSaveData)
}
RoleSaveData::RoleSaveData(const RoleSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleSaveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_data_){nullptr}
    , decltype(_impl_.all_stats_data_){nullptr}
    , decltype(_impl_.quest_){nullptr}
    , decltype(_impl_.shop_){nullptr}
    , decltype(_impl_.temporary_package_){nullptr}
    , decltype(_impl_.inventory_){nullptr}
    , decltype(_impl_.offline_data_){nullptr}
    , decltype(_impl_.alchemy_data_){nullptr}
    , decltype(_impl_.deluxe_shop_){nullptr}
    , decltype(_impl_.leaderboard_data_){nullptr}
    , decltype(_impl_.mail_data_){nullptr}
    , decltype(_impl_.forge_data_){nullptr}
    , decltype(_impl_.pillelixir_data_){nullptr}
    , decltype(_impl_.common_cultivation_data_){nullptr}
    , decltype(_impl_.zas_data_){nullptr}
    , decltype(_impl_.monster_tower_data_){nullptr}
    , decltype(_impl_.shanhetu_data_){nullptr}
    , decltype(_impl_.boss_invasion_data_){nullptr}
    , decltype(_impl_.massive_data_){nullptr}
    , decltype(_impl_.checklist_data_){nullptr}
    , decltype(_impl_.common_item_exchange_data_){nullptr}
    , decltype(_impl_.sept_data_){nullptr}
    , decltype(_impl_.treasury_chest_data_){nullptr}
    , decltype(_impl_.gongfa_data_){nullptr}
    , decltype(_impl_.fuzeng_data_){nullptr}
    , decltype(_impl_.collection_data_){nullptr}
    , decltype(_impl_.life_counter_data_){nullptr}
    , decltype(_impl_.appearance_data_){nullptr}
    , decltype(_impl_.arena_check_list_data_){nullptr}
    , decltype(_impl_.dungeon_kill_all_data_){nullptr}
    , decltype(_impl_.farmland_data_){nullptr}
    , decltype(_impl_.dungeon_survive_data_){nullptr}
    , decltype(_impl_.friend_data_){nullptr}
    , decltype(_impl_.avatar_data_){nullptr}
    , decltype(_impl_.arena_statistical_data_){nullptr}
    , decltype(_impl_.biography_data_){nullptr}
    , decltype(_impl_.vip_shop_data_){nullptr}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.mp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role_data()) {
    _this->_impl_.role_data_ = new ::idlepb::RoleData(*from._impl_.role_data_);
  }
  if (from._internal_has_all_stats_data()) {
    _this->_impl_.all_stats_data_ = new ::idlepb::GameStatsAllModuleData(*from._impl_.all_stats_data_);
  }
  if (from._internal_has_quest()) {
    _this->_impl_.quest_ = new ::idlepb::RoleQuestData(*from._impl_.quest_);
  }
  if (from._internal_has_shop()) {
    _this->_impl_.shop_ = new ::idlepb::RoleShopData(*from._impl_.shop_);
  }
  if (from._internal_has_temporary_package()) {
    _this->_impl_.temporary_package_ = new ::idlepb::RoleTemporaryPackageData(*from._impl_.temporary_package_);
  }
  if (from._internal_has_inventory()) {
    _this->_impl_.inventory_ = new ::idlepb::RoleInventoryData(*from._impl_.inventory_);
  }
  if (from._internal_has_offline_data()) {
    _this->_impl_.offline_data_ = new ::idlepb::RoleOfflineData(*from._impl_.offline_data_);
  }
  if (from._internal_has_alchemy_data()) {
    _this->_impl_.alchemy_data_ = new ::idlepb::RoleAlchemyData(*from._impl_.alchemy_data_);
  }
  if (from._internal_has_deluxe_shop()) {
    _this->_impl_.deluxe_shop_ = new ::idlepb::RoleDeluxeShopData(*from._impl_.deluxe_shop_);
  }
  if (from._internal_has_leaderboard_data()) {
    _this->_impl_.leaderboard_data_ = new ::idlepb::RoleLeaderboardData(*from._impl_.leaderboard_data_);
  }
  if (from._internal_has_mail_data()) {
    _this->_impl_.mail_data_ = new ::idlepb::RoleMailData(*from._impl_.mail_data_);
  }
  if (from._internal_has_forge_data()) {
    _this->_impl_.forge_data_ = new ::idlepb::RoleForgeData(*from._impl_.forge_data_);
  }
  if (from._internal_has_pillelixir_data()) {
    _this->_impl_.pillelixir_data_ = new ::idlepb::RolePillElixirData(*from._impl_.pillelixir_data_);
  }
  if (from._internal_has_common_cultivation_data()) {
    _this->_impl_.common_cultivation_data_ = new ::idlepb::CommonCultivationData(*from._impl_.common_cultivation_data_);
  }
  if (from._internal_has_zas_data()) {
    _this->_impl_.zas_data_ = new ::idlepb::RoleZasData(*from._impl_.zas_data_);
  }
  if (from._internal_has_monster_tower_data()) {
    _this->_impl_.monster_tower_data_ = new ::idlepb::RoleMonsterTowerData(*from._impl_.monster_tower_data_);
  }
  if (from._internal_has_shanhetu_data()) {
    _this->_impl_.shanhetu_data_ = new ::idlepb::RoleShanhetuData(*from._impl_.shanhetu_data_);
  }
  if (from._internal_has_boss_invasion_data()) {
    _this->_impl_.boss_invasion_data_ = new ::idlepb::RoleBossInvasionData(*from._impl_.boss_invasion_data_);
  }
  if (from._internal_has_massive_data()) {
    _this->_impl_.massive_data_ = new ::idlepb::RoleMasiveData(*from._impl_.massive_data_);
  }
  if (from._internal_has_checklist_data()) {
    _this->_impl_.checklist_data_ = new ::idlepb::RoleChecklistData(*from._impl_.checklist_data_);
  }
  if (from._internal_has_common_item_exchange_data()) {
    _this->_impl_.common_item_exchange_data_ = new ::idlepb::RoleCommonItemExchangeData(*from._impl_.common_item_exchange_data_);
  }
  if (from._internal_has_sept_data()) {
    _this->_impl_.sept_data_ = new ::idlepb::RoleSeptData(*from._impl_.sept_data_);
  }
  if (from._internal_has_treasury_chest_data()) {
    _this->_impl_.treasury_chest_data_ = new ::idlepb::RoleTreasurySaveData(*from._impl_.treasury_chest_data_);
  }
  if (from._internal_has_gongfa_data()) {
    _this->_impl_.gongfa_data_ = new ::idlepb::RoleGongFaData(*from._impl_.gongfa_data_);
  }
  if (from._internal_has_fuzeng_data()) {
    _this->_impl_.fuzeng_data_ = new ::idlepb::RoleFuZengData(*from._impl_.fuzeng_data_);
  }
  if (from._internal_has_collection_data()) {
    _this->_impl_.collection_data_ = new ::idlepb::RoleCollectionSaveData(*from._impl_.collection_data_);
  }
  if (from._internal_has_life_counter_data()) {
    _this->_impl_.life_counter_data_ = new ::idlepb::RoleLifeCounterData(*from._impl_.life_counter_data_);
  }
  if (from._internal_has_appearance_data()) {
    _this->_impl_.appearance_data_ = new ::idlepb::RoleAppearanceData(*from._impl_.appearance_data_);
  }
  if (from._internal_has_arena_check_list_data()) {
    _this->_impl_.arena_check_list_data_ = new ::idlepb::RoleArenaCheckListData(*from._impl_.arena_check_list_data_);
  }
  if (from._internal_has_dungeon_kill_all_data()) {
    _this->_impl_.dungeon_kill_all_data_ = new ::idlepb::RoleDungeonKillAllData(*from._impl_.dungeon_kill_all_data_);
  }
  if (from._internal_has_farmland_data()) {
    _this->_impl_.farmland_data_ = new ::idlepb::RoleFarmlandData(*from._impl_.farmland_data_);
  }
  if (from._internal_has_dungeon_survive_data()) {
    _this->_impl_.dungeon_survive_data_ = new ::idlepb::RoleDungeonSurviveData(*from._impl_.dungeon_survive_data_);
  }
  if (from._internal_has_friend_data()) {
    _this->_impl_.friend_data_ = new ::idlepb::RoleFriendData(*from._impl_.friend_data_);
  }
  if (from._internal_has_avatar_data()) {
    _this->_impl_.avatar_data_ = new ::idlepb::RoleAvatarData(*from._impl_.avatar_data_);
  }
  if (from._internal_has_arena_statistical_data()) {
    _this->_impl_.arena_statistical_data_ = new ::idlepb::RoleArenaExplorationStatisticalData(*from._impl_.arena_statistical_data_);
  }
  if (from._internal_has_biography_data()) {
    _this->_impl_.biography_data_ = new ::idlepb::RoleBiographyData(*from._impl_.biography_data_);
  }
  if (from._internal_has_vip_shop_data()) {
    _this->_impl_.vip_shop_data_ = new ::idlepb::RoleVipShopData(*from._impl_.vip_shop_data_);
  }
  ::memcpy(&_impl_.hp_, &from._impl_.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mp_) -
    reinterpret_cast<char*>(&_impl_.hp_)) + sizeof(_impl_.mp_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleSaveData)
}

inline void RoleSaveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_data_){nullptr}
    , decltype(_impl_.all_stats_data_){nullptr}
    , decltype(_impl_.quest_){nullptr}
    , decltype(_impl_.shop_){nullptr}
    , decltype(_impl_.temporary_package_){nullptr}
    , decltype(_impl_.inventory_){nullptr}
    , decltype(_impl_.offline_data_){nullptr}
    , decltype(_impl_.alchemy_data_){nullptr}
    , decltype(_impl_.deluxe_shop_){nullptr}
    , decltype(_impl_.leaderboard_data_){nullptr}
    , decltype(_impl_.mail_data_){nullptr}
    , decltype(_impl_.forge_data_){nullptr}
    , decltype(_impl_.pillelixir_data_){nullptr}
    , decltype(_impl_.common_cultivation_data_){nullptr}
    , decltype(_impl_.zas_data_){nullptr}
    , decltype(_impl_.monster_tower_data_){nullptr}
    , decltype(_impl_.shanhetu_data_){nullptr}
    , decltype(_impl_.boss_invasion_data_){nullptr}
    , decltype(_impl_.massive_data_){nullptr}
    , decltype(_impl_.checklist_data_){nullptr}
    , decltype(_impl_.common_item_exchange_data_){nullptr}
    , decltype(_impl_.sept_data_){nullptr}
    , decltype(_impl_.treasury_chest_data_){nullptr}
    , decltype(_impl_.gongfa_data_){nullptr}
    , decltype(_impl_.fuzeng_data_){nullptr}
    , decltype(_impl_.collection_data_){nullptr}
    , decltype(_impl_.life_counter_data_){nullptr}
    , decltype(_impl_.appearance_data_){nullptr}
    , decltype(_impl_.arena_check_list_data_){nullptr}
    , decltype(_impl_.dungeon_kill_all_data_){nullptr}
    , decltype(_impl_.farmland_data_){nullptr}
    , decltype(_impl_.dungeon_survive_data_){nullptr}
    , decltype(_impl_.friend_data_){nullptr}
    , decltype(_impl_.avatar_data_){nullptr}
    , decltype(_impl_.arena_statistical_data_){nullptr}
    , decltype(_impl_.biography_data_){nullptr}
    , decltype(_impl_.vip_shop_data_){nullptr}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.mp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleSaveData::~RoleSaveData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleSaveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.role_data_;
  if (this != internal_default_instance()) delete _impl_.all_stats_data_;
  if (this != internal_default_instance()) delete _impl_.quest_;
  if (this != internal_default_instance()) delete _impl_.shop_;
  if (this != internal_default_instance()) delete _impl_.temporary_package_;
  if (this != internal_default_instance()) delete _impl_.inventory_;
  if (this != internal_default_instance()) delete _impl_.offline_data_;
  if (this != internal_default_instance()) delete _impl_.alchemy_data_;
  if (this != internal_default_instance()) delete _impl_.deluxe_shop_;
  if (this != internal_default_instance()) delete _impl_.leaderboard_data_;
  if (this != internal_default_instance()) delete _impl_.mail_data_;
  if (this != internal_default_instance()) delete _impl_.forge_data_;
  if (this != internal_default_instance()) delete _impl_.pillelixir_data_;
  if (this != internal_default_instance()) delete _impl_.common_cultivation_data_;
  if (this != internal_default_instance()) delete _impl_.zas_data_;
  if (this != internal_default_instance()) delete _impl_.monster_tower_data_;
  if (this != internal_default_instance()) delete _impl_.shanhetu_data_;
  if (this != internal_default_instance()) delete _impl_.boss_invasion_data_;
  if (this != internal_default_instance()) delete _impl_.massive_data_;
  if (this != internal_default_instance()) delete _impl_.checklist_data_;
  if (this != internal_default_instance()) delete _impl_.common_item_exchange_data_;
  if (this != internal_default_instance()) delete _impl_.sept_data_;
  if (this != internal_default_instance()) delete _impl_.treasury_chest_data_;
  if (this != internal_default_instance()) delete _impl_.gongfa_data_;
  if (this != internal_default_instance()) delete _impl_.fuzeng_data_;
  if (this != internal_default_instance()) delete _impl_.collection_data_;
  if (this != internal_default_instance()) delete _impl_.life_counter_data_;
  if (this != internal_default_instance()) delete _impl_.appearance_data_;
  if (this != internal_default_instance()) delete _impl_.arena_check_list_data_;
  if (this != internal_default_instance()) delete _impl_.dungeon_kill_all_data_;
  if (this != internal_default_instance()) delete _impl_.farmland_data_;
  if (this != internal_default_instance()) delete _impl_.dungeon_survive_data_;
  if (this != internal_default_instance()) delete _impl_.friend_data_;
  if (this != internal_default_instance()) delete _impl_.avatar_data_;
  if (this != internal_default_instance()) delete _impl_.arena_statistical_data_;
  if (this != internal_default_instance()) delete _impl_.biography_data_;
  if (this != internal_default_instance()) delete _impl_.vip_shop_data_;
}

void RoleSaveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleSaveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.role_data_ != nullptr) {
    delete _impl_.role_data_;
  }
  _impl_.role_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.all_stats_data_ != nullptr) {
    delete _impl_.all_stats_data_;
  }
  _impl_.all_stats_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.quest_ != nullptr) {
    delete _impl_.quest_;
  }
  _impl_.quest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shop_ != nullptr) {
    delete _impl_.shop_;
  }
  _impl_.shop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.temporary_package_ != nullptr) {
    delete _impl_.temporary_package_;
  }
  _impl_.temporary_package_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inventory_ != nullptr) {
    delete _impl_.inventory_;
  }
  _impl_.inventory_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.offline_data_ != nullptr) {
    delete _impl_.offline_data_;
  }
  _impl_.offline_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.alchemy_data_ != nullptr) {
    delete _impl_.alchemy_data_;
  }
  _impl_.alchemy_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.deluxe_shop_ != nullptr) {
    delete _impl_.deluxe_shop_;
  }
  _impl_.deluxe_shop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.leaderboard_data_ != nullptr) {
    delete _impl_.leaderboard_data_;
  }
  _impl_.leaderboard_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mail_data_ != nullptr) {
    delete _impl_.mail_data_;
  }
  _impl_.mail_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forge_data_ != nullptr) {
    delete _impl_.forge_data_;
  }
  _impl_.forge_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pillelixir_data_ != nullptr) {
    delete _impl_.pillelixir_data_;
  }
  _impl_.pillelixir_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.common_cultivation_data_ != nullptr) {
    delete _impl_.common_cultivation_data_;
  }
  _impl_.common_cultivation_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.zas_data_ != nullptr) {
    delete _impl_.zas_data_;
  }
  _impl_.zas_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.monster_tower_data_ != nullptr) {
    delete _impl_.monster_tower_data_;
  }
  _impl_.monster_tower_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shanhetu_data_ != nullptr) {
    delete _impl_.shanhetu_data_;
  }
  _impl_.shanhetu_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.boss_invasion_data_ != nullptr) {
    delete _impl_.boss_invasion_data_;
  }
  _impl_.boss_invasion_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.massive_data_ != nullptr) {
    delete _impl_.massive_data_;
  }
  _impl_.massive_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.checklist_data_ != nullptr) {
    delete _impl_.checklist_data_;
  }
  _impl_.checklist_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.common_item_exchange_data_ != nullptr) {
    delete _impl_.common_item_exchange_data_;
  }
  _impl_.common_item_exchange_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sept_data_ != nullptr) {
    delete _impl_.sept_data_;
  }
  _impl_.sept_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.treasury_chest_data_ != nullptr) {
    delete _impl_.treasury_chest_data_;
  }
  _impl_.treasury_chest_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gongfa_data_ != nullptr) {
    delete _impl_.gongfa_data_;
  }
  _impl_.gongfa_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fuzeng_data_ != nullptr) {
    delete _impl_.fuzeng_data_;
  }
  _impl_.fuzeng_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.collection_data_ != nullptr) {
    delete _impl_.collection_data_;
  }
  _impl_.collection_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.life_counter_data_ != nullptr) {
    delete _impl_.life_counter_data_;
  }
  _impl_.life_counter_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.appearance_data_ != nullptr) {
    delete _impl_.appearance_data_;
  }
  _impl_.appearance_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arena_check_list_data_ != nullptr) {
    delete _impl_.arena_check_list_data_;
  }
  _impl_.arena_check_list_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dungeon_kill_all_data_ != nullptr) {
    delete _impl_.dungeon_kill_all_data_;
  }
  _impl_.dungeon_kill_all_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.farmland_data_ != nullptr) {
    delete _impl_.farmland_data_;
  }
  _impl_.farmland_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dungeon_survive_data_ != nullptr) {
    delete _impl_.dungeon_survive_data_;
  }
  _impl_.dungeon_survive_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.friend_data_ != nullptr) {
    delete _impl_.friend_data_;
  }
  _impl_.friend_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.avatar_data_ != nullptr) {
    delete _impl_.avatar_data_;
  }
  _impl_.avatar_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arena_statistical_data_ != nullptr) {
    delete _impl_.arena_statistical_data_;
  }
  _impl_.arena_statistical_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.biography_data_ != nullptr) {
    delete _impl_.biography_data_;
  }
  _impl_.biography_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vip_shop_data_ != nullptr) {
    delete _impl_.vip_shop_data_;
  }
  _impl_.vip_shop_data_ = nullptr;
  ::memset(&_impl_.hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mp_) -
      reinterpret_cast<char*>(&_impl_.hp_)) + sizeof(_impl_.mp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleSaveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.RoleData role_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GameStatsAllModuleData all_stats_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_stats_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.mp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleQuestData quest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_quest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleShopData shop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_shop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleTemporaryPackageData temporary_package = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_temporary_package(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleInventoryData inventory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inventory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleOfflineData offline_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_offline_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleAlchemyData alchemy_data = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_alchemy_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleDeluxeShopData deluxe_shop = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_deluxe_shop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleLeaderboardData leaderboard_data = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaderboard_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleMailData mail_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleForgeData forge_data = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_forge_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RolePillElixirData pillelixir_data = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_pillelixir_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CommonCultivationData common_cultivation_data = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_common_cultivation_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleZasData zas_data = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_zas_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleMonsterTowerData monster_tower_data = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_monster_tower_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleShanhetuData shanhetu_data = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_shanhetu_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleBossInvasionData boss_invasion_data = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_boss_invasion_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleMasiveData massive_data = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_massive_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleChecklistData checklist_data = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_checklist_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleCommonItemExchangeData common_item_exchange_data = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_common_item_exchange_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleSeptData sept_data = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_sept_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleTreasurySaveData treasury_chest_data = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_treasury_chest_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleGongFaData gongfa_data = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gongfa_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleFuZengData fuzeng_data = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fuzeng_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleCollectionSaveData collection_data = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_collection_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleLifeCounterData life_counter_data = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_life_counter_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleAppearanceData appearance_data = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_appearance_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleArenaCheckListData arena_check_list_data = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_arena_check_list_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleDungeonKillAllData dungeon_kill_all_data = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dungeon_kill_all_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleFarmlandData farmland_data = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_farmland_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleDungeonSurviveData dungeon_survive_data = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dungeon_survive_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleFriendData friend_data = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleAvatarData avatar_data = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleArenaExplorationStatisticalData arena_statistical_data = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_arena_statistical_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleBiographyData biography_data = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_biography_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleVipShopData vip_shop_data = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_vip_shop_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleSaveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleSaveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.RoleData role_data = 1;
  if (this->_internal_has_role_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::role_data(this),
        _Internal::role_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.GameStatsAllModuleData all_stats_data = 2;
  if (this->_internal_has_all_stats_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::all_stats_data(this),
        _Internal::all_stats_data(this).GetCachedSize(), target, stream);
  }

  // float hp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_hp(), target);
  }

  // float mp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = this->_internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_mp(), target);
  }

  // .idlepb.RoleQuestData quest = 5;
  if (this->_internal_has_quest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::quest(this),
        _Internal::quest(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleShopData shop = 6;
  if (this->_internal_has_shop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::shop(this),
        _Internal::shop(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleTemporaryPackageData temporary_package = 7;
  if (this->_internal_has_temporary_package()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::temporary_package(this),
        _Internal::temporary_package(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleInventoryData inventory = 8;
  if (this->_internal_has_inventory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::inventory(this),
        _Internal::inventory(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleOfflineData offline_data = 16;
  if (this->_internal_has_offline_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::offline_data(this),
        _Internal::offline_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleAlchemyData alchemy_data = 17;
  if (this->_internal_has_alchemy_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::alchemy_data(this),
        _Internal::alchemy_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleDeluxeShopData deluxe_shop = 18;
  if (this->_internal_has_deluxe_shop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::deluxe_shop(this),
        _Internal::deluxe_shop(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleLeaderboardData leaderboard_data = 19;
  if (this->_internal_has_leaderboard_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::leaderboard_data(this),
        _Internal::leaderboard_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleMailData mail_data = 20;
  if (this->_internal_has_mail_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::mail_data(this),
        _Internal::mail_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleForgeData forge_data = 21;
  if (this->_internal_has_forge_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::forge_data(this),
        _Internal::forge_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RolePillElixirData pillelixir_data = 22;
  if (this->_internal_has_pillelixir_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::pillelixir_data(this),
        _Internal::pillelixir_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.CommonCultivationData common_cultivation_data = 23;
  if (this->_internal_has_common_cultivation_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::common_cultivation_data(this),
        _Internal::common_cultivation_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleZasData zas_data = 24;
  if (this->_internal_has_zas_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::zas_data(this),
        _Internal::zas_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleMonsterTowerData monster_tower_data = 25;
  if (this->_internal_has_monster_tower_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::monster_tower_data(this),
        _Internal::monster_tower_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleShanhetuData shanhetu_data = 26;
  if (this->_internal_has_shanhetu_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::shanhetu_data(this),
        _Internal::shanhetu_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleBossInvasionData boss_invasion_data = 27;
  if (this->_internal_has_boss_invasion_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::boss_invasion_data(this),
        _Internal::boss_invasion_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleMasiveData massive_data = 28;
  if (this->_internal_has_massive_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::massive_data(this),
        _Internal::massive_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleChecklistData checklist_data = 29;
  if (this->_internal_has_checklist_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::checklist_data(this),
        _Internal::checklist_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleCommonItemExchangeData common_item_exchange_data = 30;
  if (this->_internal_has_common_item_exchange_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::common_item_exchange_data(this),
        _Internal::common_item_exchange_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleSeptData sept_data = 31;
  if (this->_internal_has_sept_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::sept_data(this),
        _Internal::sept_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleTreasurySaveData treasury_chest_data = 33;
  if (this->_internal_has_treasury_chest_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::treasury_chest_data(this),
        _Internal::treasury_chest_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleGongFaData gongfa_data = 34;
  if (this->_internal_has_gongfa_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::gongfa_data(this),
        _Internal::gongfa_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleFuZengData fuzeng_data = 35;
  if (this->_internal_has_fuzeng_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::fuzeng_data(this),
        _Internal::fuzeng_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleCollectionSaveData collection_data = 36;
  if (this->_internal_has_collection_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::collection_data(this),
        _Internal::collection_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleLifeCounterData life_counter_data = 37;
  if (this->_internal_has_life_counter_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::life_counter_data(this),
        _Internal::life_counter_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleAppearanceData appearance_data = 38;
  if (this->_internal_has_appearance_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::appearance_data(this),
        _Internal::appearance_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleArenaCheckListData arena_check_list_data = 39;
  if (this->_internal_has_arena_check_list_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::arena_check_list_data(this),
        _Internal::arena_check_list_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleDungeonKillAllData dungeon_kill_all_data = 40;
  if (this->_internal_has_dungeon_kill_all_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::dungeon_kill_all_data(this),
        _Internal::dungeon_kill_all_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleFarmlandData farmland_data = 41;
  if (this->_internal_has_farmland_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::farmland_data(this),
        _Internal::farmland_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleDungeonSurviveData dungeon_survive_data = 42;
  if (this->_internal_has_dungeon_survive_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::dungeon_survive_data(this),
        _Internal::dungeon_survive_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleFriendData friend_data = 43;
  if (this->_internal_has_friend_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::friend_data(this),
        _Internal::friend_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleAvatarData avatar_data = 44;
  if (this->_internal_has_avatar_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::avatar_data(this),
        _Internal::avatar_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleArenaExplorationStatisticalData arena_statistical_data = 45;
  if (this->_internal_has_arena_statistical_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::arena_statistical_data(this),
        _Internal::arena_statistical_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleBiographyData biography_data = 46;
  if (this->_internal_has_biography_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::biography_data(this),
        _Internal::biography_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RoleVipShopData vip_shop_data = 47;
  if (this->_internal_has_vip_shop_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::vip_shop_data(this),
        _Internal::vip_shop_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleSaveData)
  return target;
}

size_t RoleSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleSaveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.RoleData role_data = 1;
  if (this->_internal_has_role_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.role_data_);
  }

  // .idlepb.GameStatsAllModuleData all_stats_data = 2;
  if (this->_internal_has_all_stats_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.all_stats_data_);
  }

  // .idlepb.RoleQuestData quest = 5;
  if (this->_internal_has_quest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quest_);
  }

  // .idlepb.RoleShopData shop = 6;
  if (this->_internal_has_shop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shop_);
  }

  // .idlepb.RoleTemporaryPackageData temporary_package = 7;
  if (this->_internal_has_temporary_package()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.temporary_package_);
  }

  // .idlepb.RoleInventoryData inventory = 8;
  if (this->_internal_has_inventory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inventory_);
  }

  // .idlepb.RoleOfflineData offline_data = 16;
  if (this->_internal_has_offline_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offline_data_);
  }

  // .idlepb.RoleAlchemyData alchemy_data = 17;
  if (this->_internal_has_alchemy_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.alchemy_data_);
  }

  // .idlepb.RoleDeluxeShopData deluxe_shop = 18;
  if (this->_internal_has_deluxe_shop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deluxe_shop_);
  }

  // .idlepb.RoleLeaderboardData leaderboard_data = 19;
  if (this->_internal_has_leaderboard_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leaderboard_data_);
  }

  // .idlepb.RoleMailData mail_data = 20;
  if (this->_internal_has_mail_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mail_data_);
  }

  // .idlepb.RoleForgeData forge_data = 21;
  if (this->_internal_has_forge_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forge_data_);
  }

  // .idlepb.RolePillElixirData pillelixir_data = 22;
  if (this->_internal_has_pillelixir_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pillelixir_data_);
  }

  // .idlepb.CommonCultivationData common_cultivation_data = 23;
  if (this->_internal_has_common_cultivation_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_cultivation_data_);
  }

  // .idlepb.RoleZasData zas_data = 24;
  if (this->_internal_has_zas_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.zas_data_);
  }

  // .idlepb.RoleMonsterTowerData monster_tower_data = 25;
  if (this->_internal_has_monster_tower_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.monster_tower_data_);
  }

  // .idlepb.RoleShanhetuData shanhetu_data = 26;
  if (this->_internal_has_shanhetu_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shanhetu_data_);
  }

  // .idlepb.RoleBossInvasionData boss_invasion_data = 27;
  if (this->_internal_has_boss_invasion_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.boss_invasion_data_);
  }

  // .idlepb.RoleMasiveData massive_data = 28;
  if (this->_internal_has_massive_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.massive_data_);
  }

  // .idlepb.RoleChecklistData checklist_data = 29;
  if (this->_internal_has_checklist_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.checklist_data_);
  }

  // .idlepb.RoleCommonItemExchangeData common_item_exchange_data = 30;
  if (this->_internal_has_common_item_exchange_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_item_exchange_data_);
  }

  // .idlepb.RoleSeptData sept_data = 31;
  if (this->_internal_has_sept_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sept_data_);
  }

  // .idlepb.RoleTreasurySaveData treasury_chest_data = 33;
  if (this->_internal_has_treasury_chest_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.treasury_chest_data_);
  }

  // .idlepb.RoleGongFaData gongfa_data = 34;
  if (this->_internal_has_gongfa_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gongfa_data_);
  }

  // .idlepb.RoleFuZengData fuzeng_data = 35;
  if (this->_internal_has_fuzeng_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fuzeng_data_);
  }

  // .idlepb.RoleCollectionSaveData collection_data = 36;
  if (this->_internal_has_collection_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collection_data_);
  }

  // .idlepb.RoleLifeCounterData life_counter_data = 37;
  if (this->_internal_has_life_counter_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.life_counter_data_);
  }

  // .idlepb.RoleAppearanceData appearance_data = 38;
  if (this->_internal_has_appearance_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.appearance_data_);
  }

  // .idlepb.RoleArenaCheckListData arena_check_list_data = 39;
  if (this->_internal_has_arena_check_list_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arena_check_list_data_);
  }

  // .idlepb.RoleDungeonKillAllData dungeon_kill_all_data = 40;
  if (this->_internal_has_dungeon_kill_all_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dungeon_kill_all_data_);
  }

  // .idlepb.RoleFarmlandData farmland_data = 41;
  if (this->_internal_has_farmland_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.farmland_data_);
  }

  // .idlepb.RoleDungeonSurviveData dungeon_survive_data = 42;
  if (this->_internal_has_dungeon_survive_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dungeon_survive_data_);
  }

  // .idlepb.RoleFriendData friend_data = 43;
  if (this->_internal_has_friend_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.friend_data_);
  }

  // .idlepb.RoleAvatarData avatar_data = 44;
  if (this->_internal_has_avatar_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.avatar_data_);
  }

  // .idlepb.RoleArenaExplorationStatisticalData arena_statistical_data = 45;
  if (this->_internal_has_arena_statistical_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arena_statistical_data_);
  }

  // .idlepb.RoleBiographyData biography_data = 46;
  if (this->_internal_has_biography_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.biography_data_);
  }

  // .idlepb.RoleVipShopData vip_shop_data = 47;
  if (this->_internal_has_vip_shop_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vip_shop_data_);
  }

  // float hp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  // float mp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = this->_internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleSaveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleSaveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleSaveData::GetClassData() const { return &_class_data_; }


void RoleSaveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleSaveData*>(&to_msg);
  auto& from = static_cast<const RoleSaveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleSaveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role_data()) {
    _this->_internal_mutable_role_data()->::idlepb::RoleData::MergeFrom(
        from._internal_role_data());
  }
  if (from._internal_has_all_stats_data()) {
    _this->_internal_mutable_all_stats_data()->::idlepb::GameStatsAllModuleData::MergeFrom(
        from._internal_all_stats_data());
  }
  if (from._internal_has_quest()) {
    _this->_internal_mutable_quest()->::idlepb::RoleQuestData::MergeFrom(
        from._internal_quest());
  }
  if (from._internal_has_shop()) {
    _this->_internal_mutable_shop()->::idlepb::RoleShopData::MergeFrom(
        from._internal_shop());
  }
  if (from._internal_has_temporary_package()) {
    _this->_internal_mutable_temporary_package()->::idlepb::RoleTemporaryPackageData::MergeFrom(
        from._internal_temporary_package());
  }
  if (from._internal_has_inventory()) {
    _this->_internal_mutable_inventory()->::idlepb::RoleInventoryData::MergeFrom(
        from._internal_inventory());
  }
  if (from._internal_has_offline_data()) {
    _this->_internal_mutable_offline_data()->::idlepb::RoleOfflineData::MergeFrom(
        from._internal_offline_data());
  }
  if (from._internal_has_alchemy_data()) {
    _this->_internal_mutable_alchemy_data()->::idlepb::RoleAlchemyData::MergeFrom(
        from._internal_alchemy_data());
  }
  if (from._internal_has_deluxe_shop()) {
    _this->_internal_mutable_deluxe_shop()->::idlepb::RoleDeluxeShopData::MergeFrom(
        from._internal_deluxe_shop());
  }
  if (from._internal_has_leaderboard_data()) {
    _this->_internal_mutable_leaderboard_data()->::idlepb::RoleLeaderboardData::MergeFrom(
        from._internal_leaderboard_data());
  }
  if (from._internal_has_mail_data()) {
    _this->_internal_mutable_mail_data()->::idlepb::RoleMailData::MergeFrom(
        from._internal_mail_data());
  }
  if (from._internal_has_forge_data()) {
    _this->_internal_mutable_forge_data()->::idlepb::RoleForgeData::MergeFrom(
        from._internal_forge_data());
  }
  if (from._internal_has_pillelixir_data()) {
    _this->_internal_mutable_pillelixir_data()->::idlepb::RolePillElixirData::MergeFrom(
        from._internal_pillelixir_data());
  }
  if (from._internal_has_common_cultivation_data()) {
    _this->_internal_mutable_common_cultivation_data()->::idlepb::CommonCultivationData::MergeFrom(
        from._internal_common_cultivation_data());
  }
  if (from._internal_has_zas_data()) {
    _this->_internal_mutable_zas_data()->::idlepb::RoleZasData::MergeFrom(
        from._internal_zas_data());
  }
  if (from._internal_has_monster_tower_data()) {
    _this->_internal_mutable_monster_tower_data()->::idlepb::RoleMonsterTowerData::MergeFrom(
        from._internal_monster_tower_data());
  }
  if (from._internal_has_shanhetu_data()) {
    _this->_internal_mutable_shanhetu_data()->::idlepb::RoleShanhetuData::MergeFrom(
        from._internal_shanhetu_data());
  }
  if (from._internal_has_boss_invasion_data()) {
    _this->_internal_mutable_boss_invasion_data()->::idlepb::RoleBossInvasionData::MergeFrom(
        from._internal_boss_invasion_data());
  }
  if (from._internal_has_massive_data()) {
    _this->_internal_mutable_massive_data()->::idlepb::RoleMasiveData::MergeFrom(
        from._internal_massive_data());
  }
  if (from._internal_has_checklist_data()) {
    _this->_internal_mutable_checklist_data()->::idlepb::RoleChecklistData::MergeFrom(
        from._internal_checklist_data());
  }
  if (from._internal_has_common_item_exchange_data()) {
    _this->_internal_mutable_common_item_exchange_data()->::idlepb::RoleCommonItemExchangeData::MergeFrom(
        from._internal_common_item_exchange_data());
  }
  if (from._internal_has_sept_data()) {
    _this->_internal_mutable_sept_data()->::idlepb::RoleSeptData::MergeFrom(
        from._internal_sept_data());
  }
  if (from._internal_has_treasury_chest_data()) {
    _this->_internal_mutable_treasury_chest_data()->::idlepb::RoleTreasurySaveData::MergeFrom(
        from._internal_treasury_chest_data());
  }
  if (from._internal_has_gongfa_data()) {
    _this->_internal_mutable_gongfa_data()->::idlepb::RoleGongFaData::MergeFrom(
        from._internal_gongfa_data());
  }
  if (from._internal_has_fuzeng_data()) {
    _this->_internal_mutable_fuzeng_data()->::idlepb::RoleFuZengData::MergeFrom(
        from._internal_fuzeng_data());
  }
  if (from._internal_has_collection_data()) {
    _this->_internal_mutable_collection_data()->::idlepb::RoleCollectionSaveData::MergeFrom(
        from._internal_collection_data());
  }
  if (from._internal_has_life_counter_data()) {
    _this->_internal_mutable_life_counter_data()->::idlepb::RoleLifeCounterData::MergeFrom(
        from._internal_life_counter_data());
  }
  if (from._internal_has_appearance_data()) {
    _this->_internal_mutable_appearance_data()->::idlepb::RoleAppearanceData::MergeFrom(
        from._internal_appearance_data());
  }
  if (from._internal_has_arena_check_list_data()) {
    _this->_internal_mutable_arena_check_list_data()->::idlepb::RoleArenaCheckListData::MergeFrom(
        from._internal_arena_check_list_data());
  }
  if (from._internal_has_dungeon_kill_all_data()) {
    _this->_internal_mutable_dungeon_kill_all_data()->::idlepb::RoleDungeonKillAllData::MergeFrom(
        from._internal_dungeon_kill_all_data());
  }
  if (from._internal_has_farmland_data()) {
    _this->_internal_mutable_farmland_data()->::idlepb::RoleFarmlandData::MergeFrom(
        from._internal_farmland_data());
  }
  if (from._internal_has_dungeon_survive_data()) {
    _this->_internal_mutable_dungeon_survive_data()->::idlepb::RoleDungeonSurviveData::MergeFrom(
        from._internal_dungeon_survive_data());
  }
  if (from._internal_has_friend_data()) {
    _this->_internal_mutable_friend_data()->::idlepb::RoleFriendData::MergeFrom(
        from._internal_friend_data());
  }
  if (from._internal_has_avatar_data()) {
    _this->_internal_mutable_avatar_data()->::idlepb::RoleAvatarData::MergeFrom(
        from._internal_avatar_data());
  }
  if (from._internal_has_arena_statistical_data()) {
    _this->_internal_mutable_arena_statistical_data()->::idlepb::RoleArenaExplorationStatisticalData::MergeFrom(
        from._internal_arena_statistical_data());
  }
  if (from._internal_has_biography_data()) {
    _this->_internal_mutable_biography_data()->::idlepb::RoleBiographyData::MergeFrom(
        from._internal_biography_data());
  }
  if (from._internal_has_vip_shop_data()) {
    _this->_internal_mutable_vip_shop_data()->::idlepb::RoleVipShopData::MergeFrom(
        from._internal_vip_shop_data());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mp = from._internal_mp();
  uint32_t raw_mp;
  memcpy(&raw_mp, &tmp_mp, sizeof(tmp_mp));
  if (raw_mp != 0) {
    _this->_internal_set_mp(from._internal_mp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleSaveData::CopyFrom(const RoleSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSaveData::IsInitialized() const {
  return true;
}

void RoleSaveData::InternalSwap(RoleSaveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleSaveData, _impl_.mp_)
      + sizeof(RoleSaveData::_impl_.mp_)
      - PROTOBUF_FIELD_OFFSET(RoleSaveData, _impl_.role_data_)>(
          reinterpret_cast<char*>(&_impl_.role_data_),
          reinterpret_cast<char*>(&other->_impl_.role_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleSaveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[137]);
}

// ===================================================================

class BattleHistoryRecord::_Internal {
 public:
};

BattleHistoryRecord::BattleHistoryRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.BattleHistoryRecord)
}
BattleHistoryRecord::BattleHistoryRecord(const BattleHistoryRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BattleHistoryRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_body_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.world_seconds_){}
    , decltype(_impl_.source_entity_id_){}
    , decltype(_impl_.target_entity_id_){}
    , decltype(_impl_.message_type_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_body().empty()) {
    _this->_impl_.message_body_.Set(from._internal_message_body(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_type_id_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.message_type_id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.BattleHistoryRecord)
}

inline void BattleHistoryRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_body_){}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.world_seconds_){0}
    , decltype(_impl_.source_entity_id_){uint64_t{0u}}
    , decltype(_impl_.target_entity_id_){uint64_t{0u}}
    , decltype(_impl_.message_type_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BattleHistoryRecord::~BattleHistoryRecord() {
  // @@protoc_insertion_point(destructor:idlepb.BattleHistoryRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BattleHistoryRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_body_.Destroy();
}

void BattleHistoryRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BattleHistoryRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.BattleHistoryRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_body_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.message_type_id_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.message_type_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleHistoryRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float world_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.world_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 source_entity_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.source_entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 target_entity_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.target_entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 message_type_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.message_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message_body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_message_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BattleHistoryRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.BattleHistoryRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // float world_seconds = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_seconds = this->_internal_world_seconds();
  uint32_t raw_world_seconds;
  memcpy(&raw_world_seconds, &tmp_world_seconds, sizeof(tmp_world_seconds));
  if (raw_world_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_world_seconds(), target);
  }

  // uint64 source_entity_id = 3;
  if (this->_internal_source_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_source_entity_id(), target);
  }

  // uint64 target_entity_id = 4;
  if (this->_internal_target_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_target_entity_id(), target);
  }

  // uint64 message_type_id = 5;
  if (this->_internal_message_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_message_type_id(), target);
  }

  // bytes message_body = 6;
  if (!this->_internal_message_body().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_message_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.BattleHistoryRecord)
  return target;
}

size_t BattleHistoryRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.BattleHistoryRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message_body = 6;
  if (!this->_internal_message_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message_body());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // float world_seconds = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_seconds = this->_internal_world_seconds();
  uint32_t raw_world_seconds;
  memcpy(&raw_world_seconds, &tmp_world_seconds, sizeof(tmp_world_seconds));
  if (raw_world_seconds != 0) {
    total_size += 1 + 4;
  }

  // uint64 source_entity_id = 3;
  if (this->_internal_source_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_entity_id());
  }

  // uint64 target_entity_id = 4;
  if (this->_internal_target_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_target_entity_id());
  }

  // uint64 message_type_id = 5;
  if (this->_internal_message_type_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_message_type_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BattleHistoryRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BattleHistoryRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BattleHistoryRecord::GetClassData() const { return &_class_data_; }


void BattleHistoryRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BattleHistoryRecord*>(&to_msg);
  auto& from = static_cast<const BattleHistoryRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.BattleHistoryRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_body().empty()) {
    _this->_internal_set_message_body(from._internal_message_body());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_seconds = from._internal_world_seconds();
  uint32_t raw_world_seconds;
  memcpy(&raw_world_seconds, &tmp_world_seconds, sizeof(tmp_world_seconds));
  if (raw_world_seconds != 0) {
    _this->_internal_set_world_seconds(from._internal_world_seconds());
  }
  if (from._internal_source_entity_id() != 0) {
    _this->_internal_set_source_entity_id(from._internal_source_entity_id());
  }
  if (from._internal_target_entity_id() != 0) {
    _this->_internal_set_target_entity_id(from._internal_target_entity_id());
  }
  if (from._internal_message_type_id() != 0) {
    _this->_internal_set_message_type_id(from._internal_message_type_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BattleHistoryRecord::CopyFrom(const BattleHistoryRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.BattleHistoryRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleHistoryRecord::IsInitialized() const {
  return true;
}

void BattleHistoryRecord::InternalSwap(BattleHistoryRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_body_, lhs_arena,
      &other->_impl_.message_body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleHistoryRecord, _impl_.message_type_id_)
      + sizeof(BattleHistoryRecord::_impl_.message_type_id_)
      - PROTOBUF_FIELD_OFFSET(BattleHistoryRecord, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleHistoryRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[138]);
}

// ===================================================================

class BattleRoleInfo::_Internal {
 public:
  static const ::idlepb::CharacterModelConfig& model_config(const BattleRoleInfo* msg);
};

const ::idlepb::CharacterModelConfig&
BattleRoleInfo::_Internal::model_config(const BattleRoleInfo* msg) {
  return *msg->_impl_.model_config_;
}
BattleRoleInfo::BattleRoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.BattleRoleInfo)
}
BattleRoleInfo::BattleRoleInfo(const BattleRoleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BattleRoleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.model_config_){nullptr}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.zone_id_){}
    , decltype(_impl_.score_delta_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.rank_delta_){}
    , decltype(_impl_.combat_power_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.cultivation_main_dir_){}
    , decltype(_impl_.cultivation_main_rank_){}
    , decltype(_impl_.npc_cfg_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_model_config()) {
    _this->_impl_.model_config_ = new ::idlepb::CharacterModelConfig(*from._impl_.model_config_);
  }
  ::memcpy(&_impl_.role_id_, &from._impl_.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.npc_cfg_id_) -
    reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.npc_cfg_id_));
  // @@protoc_insertion_point(copy_constructor:idlepb.BattleRoleInfo)
}

inline void BattleRoleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.model_config_){nullptr}
    , decltype(_impl_.role_id_){int64_t{0}}
    , decltype(_impl_.zone_id_){0}
    , decltype(_impl_.score_delta_){0}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.rank_delta_){0}
    , decltype(_impl_.combat_power_){int64_t{0}}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.cultivation_main_dir_){0}
    , decltype(_impl_.cultivation_main_rank_){0}
    , decltype(_impl_.npc_cfg_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BattleRoleInfo::~BattleRoleInfo() {
  // @@protoc_insertion_point(destructor:idlepb.BattleRoleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BattleRoleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.model_config_;
}

void BattleRoleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BattleRoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.BattleRoleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.model_config_ != nullptr) {
    delete _impl_.model_config_;
  }
  _impl_.model_config_ = nullptr;
  ::memset(&_impl_.role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.npc_cfg_id_) -
      reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.npc_cfg_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleRoleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.BattleRoleInfo.role_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 zone_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.zone_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 score_delta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.score_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rank_delta = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.rank_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rank = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 combat_power = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.combat_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CharacterModelConfig model_config = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CultivationDirection cultivation_main_dir = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cultivation_main_dir(static_cast<::idlepb::CultivationDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 cultivation_main_rank = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.cultivation_main_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 npc_cfg_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.npc_cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BattleRoleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.BattleRoleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.BattleRoleInfo.role_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_name(), target);
  }

  // int32 zone_id = 3;
  if (this->_internal_zone_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_zone_id(), target);
  }

  // int32 score_delta = 8;
  if (this->_internal_score_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_score_delta(), target);
  }

  // int32 score = 9;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_score(), target);
  }

  // int32 rank_delta = 10;
  if (this->_internal_rank_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_rank_delta(), target);
  }

  // int32 rank = 11;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_rank(), target);
  }

  // int64 combat_power = 12;
  if (this->_internal_combat_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_combat_power(), target);
  }

  // .idlepb.CharacterModelConfig model_config = 13;
  if (this->_internal_has_model_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::model_config(this),
        _Internal::model_config(this).GetCachedSize(), target, stream);
  }

  // .idlepb.CultivationDirection cultivation_main_dir = 14;
  if (this->_internal_cultivation_main_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_cultivation_main_dir(), target);
  }

  // int32 cultivation_main_rank = 15;
  if (this->_internal_cultivation_main_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_cultivation_main_rank(), target);
  }

  // int32 npc_cfg_id = 16;
  if (this->_internal_npc_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_npc_cfg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.BattleRoleInfo)
  return target;
}

size_t BattleRoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.BattleRoleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .idlepb.CharacterModelConfig model_config = 13;
  if (this->_internal_has_model_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_config_);
  }

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_role_id());
  }

  // int32 zone_id = 3;
  if (this->_internal_zone_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zone_id());
  }

  // int32 score_delta = 8;
  if (this->_internal_score_delta() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score_delta());
  }

  // int32 score = 9;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
  }

  // int32 rank_delta = 10;
  if (this->_internal_rank_delta() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank_delta());
  }

  // int64 combat_power = 12;
  if (this->_internal_combat_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_combat_power());
  }

  // int32 rank = 11;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  // .idlepb.CultivationDirection cultivation_main_dir = 14;
  if (this->_internal_cultivation_main_dir() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cultivation_main_dir());
  }

  // int32 cultivation_main_rank = 15;
  if (this->_internal_cultivation_main_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cultivation_main_rank());
  }

  // int32 npc_cfg_id = 16;
  if (this->_internal_npc_cfg_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_npc_cfg_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BattleRoleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BattleRoleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BattleRoleInfo::GetClassData() const { return &_class_data_; }


void BattleRoleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BattleRoleInfo*>(&to_msg);
  auto& from = static_cast<const BattleRoleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.BattleRoleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (from._internal_has_model_config()) {
    _this->_internal_mutable_model_config()->::idlepb::CharacterModelConfig::MergeFrom(
        from._internal_model_config());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_zone_id() != 0) {
    _this->_internal_set_zone_id(from._internal_zone_id());
  }
  if (from._internal_score_delta() != 0) {
    _this->_internal_set_score_delta(from._internal_score_delta());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_rank_delta() != 0) {
    _this->_internal_set_rank_delta(from._internal_rank_delta());
  }
  if (from._internal_combat_power() != 0) {
    _this->_internal_set_combat_power(from._internal_combat_power());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_cultivation_main_dir() != 0) {
    _this->_internal_set_cultivation_main_dir(from._internal_cultivation_main_dir());
  }
  if (from._internal_cultivation_main_rank() != 0) {
    _this->_internal_set_cultivation_main_rank(from._internal_cultivation_main_rank());
  }
  if (from._internal_npc_cfg_id() != 0) {
    _this->_internal_set_npc_cfg_id(from._internal_npc_cfg_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BattleRoleInfo::CopyFrom(const BattleRoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.BattleRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRoleInfo::IsInitialized() const {
  return true;
}

void BattleRoleInfo::InternalSwap(BattleRoleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleRoleInfo, _impl_.npc_cfg_id_)
      + sizeof(BattleRoleInfo::_impl_.npc_cfg_id_)
      - PROTOBUF_FIELD_OFFSET(BattleRoleInfo, _impl_.model_config_)>(
          reinterpret_cast<char*>(&_impl_.model_config_),
          reinterpret_cast<char*>(&other->_impl_.model_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleRoleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[139]);
}

// ===================================================================

class BattleInfo::_Internal {
 public:
  static const ::idlepb::BattleRoleInfo& attacker(const BattleInfo* msg);
  static const ::idlepb::BattleRoleInfo& defender(const BattleInfo* msg);
};

const ::idlepb::BattleRoleInfo&
BattleInfo::_Internal::attacker(const BattleInfo* msg) {
  return *msg->_impl_.attacker_;
}
const ::idlepb::BattleRoleInfo&
BattleInfo::_Internal::defender(const BattleInfo* msg) {
  return *msg->_impl_.defender_;
}
BattleInfo::BattleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.BattleInfo)
}
BattleInfo::BattleInfo(const BattleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BattleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attacker_){nullptr}
    , decltype(_impl_.defender_){nullptr}
    , decltype(_impl_.world_id_){}
    , decltype(_impl_.attacker_win_){}
    , decltype(_impl_.solo_type_){}
    , decltype(_impl_.begin_ticks_){}
    , decltype(_impl_.end_ticks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attacker()) {
    _this->_impl_.attacker_ = new ::idlepb::BattleRoleInfo(*from._impl_.attacker_);
  }
  if (from._internal_has_defender()) {
    _this->_impl_.defender_ = new ::idlepb::BattleRoleInfo(*from._impl_.defender_);
  }
  ::memcpy(&_impl_.world_id_, &from._impl_.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_ticks_) -
    reinterpret_cast<char*>(&_impl_.world_id_)) + sizeof(_impl_.end_ticks_));
  // @@protoc_insertion_point(copy_constructor:idlepb.BattleInfo)
}

inline void BattleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attacker_){nullptr}
    , decltype(_impl_.defender_){nullptr}
    , decltype(_impl_.world_id_){int64_t{0}}
    , decltype(_impl_.attacker_win_){false}
    , decltype(_impl_.solo_type_){0}
    , decltype(_impl_.begin_ticks_){int64_t{0}}
    , decltype(_impl_.end_ticks_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BattleInfo::~BattleInfo() {
  // @@protoc_insertion_point(destructor:idlepb.BattleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BattleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.attacker_;
  if (this != internal_default_instance()) delete _impl_.defender_;
}

void BattleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BattleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.BattleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.attacker_ != nullptr) {
    delete _impl_.attacker_;
  }
  _impl_.attacker_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.defender_ != nullptr) {
    delete _impl_.defender_;
  }
  _impl_.defender_ = nullptr;
  ::memset(&_impl_.world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_ticks_) -
      reinterpret_cast<char*>(&_impl_.world_id_)) + sizeof(_impl_.end_ticks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool attacker_win = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.attacker_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.BattleRoleInfo attacker = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.BattleRoleInfo defender = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_defender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 begin_ticks = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.begin_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_ticks = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.end_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.SoloType solo_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_solo_type(static_cast<::idlepb::SoloType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BattleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.BattleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 world_id = 1;
  if (this->_internal_world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_world_id(), target);
  }

  // bool attacker_win = 2;
  if (this->_internal_attacker_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_attacker_win(), target);
  }

  // .idlepb.BattleRoleInfo attacker = 10;
  if (this->_internal_has_attacker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::attacker(this),
        _Internal::attacker(this).GetCachedSize(), target, stream);
  }

  // .idlepb.BattleRoleInfo defender = 11;
  if (this->_internal_has_defender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::defender(this),
        _Internal::defender(this).GetCachedSize(), target, stream);
  }

  // int64 begin_ticks = 12;
  if (this->_internal_begin_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_begin_ticks(), target);
  }

  // int64 end_ticks = 13;
  if (this->_internal_end_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_end_ticks(), target);
  }

  // .idlepb.SoloType solo_type = 14;
  if (this->_internal_solo_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_solo_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.BattleInfo)
  return target;
}

size_t BattleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.BattleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.BattleRoleInfo attacker = 10;
  if (this->_internal_has_attacker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attacker_);
  }

  // .idlepb.BattleRoleInfo defender = 11;
  if (this->_internal_has_defender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.defender_);
  }

  // int64 world_id = 1;
  if (this->_internal_world_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_world_id());
  }

  // bool attacker_win = 2;
  if (this->_internal_attacker_win() != 0) {
    total_size += 1 + 1;
  }

  // .idlepb.SoloType solo_type = 14;
  if (this->_internal_solo_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_solo_type());
  }

  // int64 begin_ticks = 12;
  if (this->_internal_begin_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_ticks());
  }

  // int64 end_ticks = 13;
  if (this->_internal_end_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_ticks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BattleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BattleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BattleInfo::GetClassData() const { return &_class_data_; }


void BattleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BattleInfo*>(&to_msg);
  auto& from = static_cast<const BattleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.BattleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attacker()) {
    _this->_internal_mutable_attacker()->::idlepb::BattleRoleInfo::MergeFrom(
        from._internal_attacker());
  }
  if (from._internal_has_defender()) {
    _this->_internal_mutable_defender()->::idlepb::BattleRoleInfo::MergeFrom(
        from._internal_defender());
  }
  if (from._internal_world_id() != 0) {
    _this->_internal_set_world_id(from._internal_world_id());
  }
  if (from._internal_attacker_win() != 0) {
    _this->_internal_set_attacker_win(from._internal_attacker_win());
  }
  if (from._internal_solo_type() != 0) {
    _this->_internal_set_solo_type(from._internal_solo_type());
  }
  if (from._internal_begin_ticks() != 0) {
    _this->_internal_set_begin_ticks(from._internal_begin_ticks());
  }
  if (from._internal_end_ticks() != 0) {
    _this->_internal_set_end_ticks(from._internal_end_ticks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BattleInfo::CopyFrom(const BattleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.BattleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInfo::IsInitialized() const {
  return true;
}

void BattleInfo::InternalSwap(BattleInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleInfo, _impl_.end_ticks_)
      + sizeof(BattleInfo::_impl_.end_ticks_)
      - PROTOBUF_FIELD_OFFSET(BattleInfo, _impl_.attacker_)>(
          reinterpret_cast<char*>(&_impl_.attacker_),
          reinterpret_cast<char*>(&other->_impl_.attacker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[140]);
}

// ===================================================================

class BattleHistory::_Internal {
 public:
  static const ::idlepb::BattleInfo& info(const BattleHistory* msg);
};

const ::idlepb::BattleInfo&
BattleHistory::_Internal::info(const BattleHistory* msg) {
  return *msg->_impl_.info_;
}
BattleHistory::BattleHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.BattleHistory)
}
BattleHistory::BattleHistory(const BattleHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BattleHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){from._impl_.records_}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::idlepb::BattleInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:idlepb.BattleHistory)
}

inline void BattleHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){arena}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BattleHistory::~BattleHistory() {
  // @@protoc_insertion_point(destructor:idlepb.BattleHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BattleHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.records_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void BattleHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BattleHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.BattleHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.records_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.BattleInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.BattleHistoryRecord records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BattleHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.BattleHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.BattleInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // repeated .idlepb.BattleHistoryRecord records = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.BattleHistory)
  return target;
}

size_t BattleHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.BattleHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.BattleHistoryRecord records = 4;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->_impl_.records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .idlepb.BattleInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BattleHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BattleHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BattleHistory::GetClassData() const { return &_class_data_; }


void BattleHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BattleHistory*>(&to_msg);
  auto& from = static_cast<const BattleHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.BattleHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.records_.MergeFrom(from._impl_.records_);
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::idlepb::BattleInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BattleHistory::CopyFrom(const BattleHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.BattleHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleHistory::IsInitialized() const {
  return true;
}

void BattleHistory::InternalSwap(BattleHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.records_.InternalSwap(&other->_impl_.records_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[141]);
}

// ===================================================================

class RoleBattleInfo::_Internal {
 public:
  static const ::idlepb::BattleInfo& base(const RoleBattleInfo* msg);
};

const ::idlepb::BattleInfo&
RoleBattleInfo::_Internal::base(const RoleBattleInfo* msg) {
  return *msg->_impl_.base_;
}
RoleBattleInfo::RoleBattleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleBattleInfo)
}
RoleBattleInfo::RoleBattleInfo(const RoleBattleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleBattleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.can_revenge_){}
    , decltype(_impl_.round_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::idlepb::BattleInfo(*from._impl_.base_);
  }
  ::memcpy(&_impl_.can_revenge_, &from._impl_.can_revenge_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.round_num_) -
    reinterpret_cast<char*>(&_impl_.can_revenge_)) + sizeof(_impl_.round_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleBattleInfo)
}

inline void RoleBattleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.base_){nullptr}
    , decltype(_impl_.can_revenge_){false}
    , decltype(_impl_.round_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleBattleInfo::~RoleBattleInfo() {
  // @@protoc_insertion_point(destructor:idlepb.RoleBattleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleBattleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
}

void RoleBattleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleBattleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleBattleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  ::memset(&_impl_.can_revenge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.round_num_) -
      reinterpret_cast<char*>(&_impl_.can_revenge_)) + sizeof(_impl_.round_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleBattleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.BattleInfo base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_revenge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.can_revenge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.round_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleBattleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleBattleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.BattleInfo base = 1;
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // bool can_revenge = 2;
  if (this->_internal_can_revenge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_can_revenge(), target);
  }

  // int32 round_num = 3;
  if (this->_internal_round_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_round_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleBattleInfo)
  return target;
}

size_t RoleBattleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleBattleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.BattleInfo base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // bool can_revenge = 2;
  if (this->_internal_can_revenge() != 0) {
    total_size += 1 + 1;
  }

  // int32 round_num = 3;
  if (this->_internal_round_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_round_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleBattleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleBattleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleBattleInfo::GetClassData() const { return &_class_data_; }


void RoleBattleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleBattleInfo*>(&to_msg);
  auto& from = static_cast<const RoleBattleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleBattleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::idlepb::BattleInfo::MergeFrom(
        from._internal_base());
  }
  if (from._internal_can_revenge() != 0) {
    _this->_internal_set_can_revenge(from._internal_can_revenge());
  }
  if (from._internal_round_num() != 0) {
    _this->_internal_set_round_num(from._internal_round_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleBattleInfo::CopyFrom(const RoleBattleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleBattleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBattleInfo::IsInitialized() const {
  return true;
}

void RoleBattleInfo::InternalSwap(RoleBattleInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleBattleInfo, _impl_.round_num_)
      + sizeof(RoleBattleInfo::_impl_.round_num_)
      - PROTOBUF_FIELD_OFFSET(RoleBattleInfo, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleBattleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[142]);
}

// ===================================================================

class RoleBattleHistorySaveData::_Internal {
 public:
};

RoleBattleHistorySaveData::RoleBattleHistorySaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.RoleBattleHistorySaveData)
}
RoleBattleHistorySaveData::RoleBattleHistorySaveData(const RoleBattleHistorySaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleBattleHistorySaveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.histories_){from._impl_.histories_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.RoleBattleHistorySaveData)
}

inline void RoleBattleHistorySaveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.histories_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleBattleHistorySaveData::~RoleBattleHistorySaveData() {
  // @@protoc_insertion_point(destructor:idlepb.RoleBattleHistorySaveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleBattleHistorySaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.histories_.~RepeatedPtrField();
}

void RoleBattleHistorySaveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleBattleHistorySaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.RoleBattleHistorySaveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.histories_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleBattleHistorySaveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.RoleBattleInfo histories = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_histories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleBattleHistorySaveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.RoleBattleHistorySaveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.RoleBattleInfo histories = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_histories_size()); i < n; i++) {
    const auto& repfield = this->_internal_histories(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.RoleBattleHistorySaveData)
  return target;
}

size_t RoleBattleHistorySaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.RoleBattleHistorySaveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.RoleBattleInfo histories = 5;
  total_size += 1UL * this->_internal_histories_size();
  for (const auto& msg : this->_impl_.histories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleBattleHistorySaveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleBattleHistorySaveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleBattleHistorySaveData::GetClassData() const { return &_class_data_; }


void RoleBattleHistorySaveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleBattleHistorySaveData*>(&to_msg);
  auto& from = static_cast<const RoleBattleHistorySaveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.RoleBattleHistorySaveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.histories_.MergeFrom(from._impl_.histories_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleBattleHistorySaveData::CopyFrom(const RoleBattleHistorySaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.RoleBattleHistorySaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBattleHistorySaveData::IsInitialized() const {
  return true;
}

void RoleBattleHistorySaveData::InternalSwap(RoleBattleHistorySaveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.histories_.InternalSwap(&other->_impl_.histories_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleBattleHistorySaveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[143]);
}

// ===================================================================

class CompressedData::_Internal {
 public:
};

CompressedData::CompressedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CompressedData)
}
CompressedData::CompressedData(const CompressedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompressedData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compressed_data_){}
    , decltype(_impl_.original_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.compressed_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compressed_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_compressed_data().empty()) {
    _this->_impl_.compressed_data_.Set(from._internal_compressed_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.original_size_ = from._impl_.original_size_;
  // @@protoc_insertion_point(copy_constructor:idlepb.CompressedData)
}

inline void CompressedData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compressed_data_){}
    , decltype(_impl_.original_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.compressed_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compressed_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompressedData::~CompressedData() {
  // @@protoc_insertion_point(destructor:idlepb.CompressedData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompressedData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.compressed_data_.Destroy();
}

void CompressedData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompressedData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CompressedData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compressed_data_.ClearToEmpty();
  _impl_.original_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompressedData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 original_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.original_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes compressed_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_compressed_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompressedData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CompressedData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 original_size = 1;
  if (this->_internal_original_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_original_size(), target);
  }

  // bytes compressed_data = 2;
  if (!this->_internal_compressed_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_compressed_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CompressedData)
  return target;
}

size_t CompressedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CompressedData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes compressed_data = 2;
  if (!this->_internal_compressed_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_compressed_data());
  }

  // int32 original_size = 1;
  if (this->_internal_original_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_original_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompressedData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompressedData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompressedData::GetClassData() const { return &_class_data_; }


void CompressedData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompressedData*>(&to_msg);
  auto& from = static_cast<const CompressedData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CompressedData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_compressed_data().empty()) {
    _this->_internal_set_compressed_data(from._internal_compressed_data());
  }
  if (from._internal_original_size() != 0) {
    _this->_internal_set_original_size(from._internal_original_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompressedData::CopyFrom(const CompressedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CompressedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedData::IsInitialized() const {
  return true;
}

void CompressedData::InternalSwap(CompressedData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.compressed_data_, lhs_arena,
      &other->_impl_.compressed_data_, rhs_arena
  );
  swap(_impl_.original_size_, other->_impl_.original_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompressedData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[144]);
}

// ===================================================================

class DoBreathingExerciseResult::_Internal {
 public:
};

DoBreathingExerciseResult::DoBreathingExerciseResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.DoBreathingExerciseResult)
}
DoBreathingExerciseResult::DoBreathingExerciseResult(const DoBreathingExerciseResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DoBreathingExerciseResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ok_){}
    , decltype(_impl_.perfect_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ok_, &from._impl_.ok_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rate_) -
    reinterpret_cast<char*>(&_impl_.ok_)) + sizeof(_impl_.rate_));
  // @@protoc_insertion_point(copy_constructor:idlepb.DoBreathingExerciseResult)
}

inline void DoBreathingExerciseResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ok_){false}
    , decltype(_impl_.perfect_){false}
    , decltype(_impl_.exp_){0}
    , decltype(_impl_.rate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DoBreathingExerciseResult::~DoBreathingExerciseResult() {
  // @@protoc_insertion_point(destructor:idlepb.DoBreathingExerciseResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoBreathingExerciseResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DoBreathingExerciseResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DoBreathingExerciseResult::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.DoBreathingExerciseResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rate_) -
      reinterpret_cast<char*>(&_impl_.ok_)) + sizeof(_impl_.rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoBreathingExerciseResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool perfect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.perfect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float exp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoBreathingExerciseResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.DoBreathingExerciseResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // bool perfect = 2;
  if (this->_internal_perfect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_perfect(), target);
  }

  // float exp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_exp(), target);
  }

  // int32 rate = 4;
  if (this->_internal_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.DoBreathingExerciseResult)
  return target;
}

size_t DoBreathingExerciseResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.DoBreathingExerciseResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool perfect = 2;
  if (this->_internal_perfect() != 0) {
    total_size += 1 + 1;
  }

  // float exp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    total_size += 1 + 4;
  }

  // int32 rate = 4;
  if (this->_internal_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoBreathingExerciseResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DoBreathingExerciseResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoBreathingExerciseResult::GetClassData() const { return &_class_data_; }


void DoBreathingExerciseResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DoBreathingExerciseResult*>(&to_msg);
  auto& from = static_cast<const DoBreathingExerciseResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.DoBreathingExerciseResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  if (from._internal_perfect() != 0) {
    _this->_internal_set_perfect(from._internal_perfect());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = from._internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_rate() != 0) {
    _this->_internal_set_rate(from._internal_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoBreathingExerciseResult::CopyFrom(const DoBreathingExerciseResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.DoBreathingExerciseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoBreathingExerciseResult::IsInitialized() const {
  return true;
}

void DoBreathingExerciseResult::InternalSwap(DoBreathingExerciseResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoBreathingExerciseResult, _impl_.rate_)
      + sizeof(DoBreathingExerciseResult::_impl_.rate_)
      - PROTOBUF_FIELD_OFFSET(DoBreathingExerciseResult, _impl_.ok_)>(
          reinterpret_cast<char*>(&_impl_.ok_),
          reinterpret_cast<char*>(&other->_impl_.ok_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoBreathingExerciseResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[145]);
}

// ===================================================================

class SystemNoticeParams::_Internal {
 public:
};

SystemNoticeParams::SystemNoticeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SystemNoticeParams)
}
SystemNoticeParams::SystemNoticeParams(const SystemNoticeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemNoticeParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.s1_){}
    , decltype(_impl_.s2_){}
    , decltype(_impl_.s3_){}
    , decltype(_impl_.s4_){}
    , decltype(_impl_.n1_){}
    , decltype(_impl_.n2_){}
    , decltype(_impl_.n3_){}
    , decltype(_impl_.n4_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s1().empty()) {
    _this->_impl_.s1_.Set(from._internal_s1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s2().empty()) {
    _this->_impl_.s2_.Set(from._internal_s2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s3().empty()) {
    _this->_impl_.s3_.Set(from._internal_s3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s4().empty()) {
    _this->_impl_.s4_.Set(from._internal_s4(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.n1_, &from._impl_.n1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.n4_) -
    reinterpret_cast<char*>(&_impl_.n1_)) + sizeof(_impl_.n4_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SystemNoticeParams)
}

inline void SystemNoticeParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.s1_){}
    , decltype(_impl_.s2_){}
    , decltype(_impl_.s3_){}
    , decltype(_impl_.s4_){}
    , decltype(_impl_.n1_){int64_t{0}}
    , decltype(_impl_.n2_){int64_t{0}}
    , decltype(_impl_.n3_){int64_t{0}}
    , decltype(_impl_.n4_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemNoticeParams::~SystemNoticeParams() {
  // @@protoc_insertion_point(destructor:idlepb.SystemNoticeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemNoticeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s1_.Destroy();
  _impl_.s2_.Destroy();
  _impl_.s3_.Destroy();
  _impl_.s4_.Destroy();
}

void SystemNoticeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemNoticeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SystemNoticeParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s1_.ClearToEmpty();
  _impl_.s2_.ClearToEmpty();
  _impl_.s3_.ClearToEmpty();
  _impl_.s4_.ClearToEmpty();
  ::memset(&_impl_.n1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.n4_) -
      reinterpret_cast<char*>(&_impl_.n1_)) + sizeof(_impl_.n4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemNoticeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.SystemNoticeParams.s1"));
        } else
          goto handle_unusual;
        continue;
      // string s2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_s2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.SystemNoticeParams.s2"));
        } else
          goto handle_unusual;
        continue;
      // string s3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_s3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.SystemNoticeParams.s3"));
        } else
          goto handle_unusual;
        continue;
      // string s4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_s4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.SystemNoticeParams.s4"));
        } else
          goto handle_unusual;
        continue;
      // int64 n1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.n1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 n2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.n2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 n3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.n3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 n4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.n4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemNoticeParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SystemNoticeParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s1 = 1;
  if (!this->_internal_s1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s1().data(), static_cast<int>(this->_internal_s1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.SystemNoticeParams.s1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s1(), target);
  }

  // string s2 = 2;
  if (!this->_internal_s2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s2().data(), static_cast<int>(this->_internal_s2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.SystemNoticeParams.s2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_s2(), target);
  }

  // string s3 = 3;
  if (!this->_internal_s3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s3().data(), static_cast<int>(this->_internal_s3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.SystemNoticeParams.s3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_s3(), target);
  }

  // string s4 = 4;
  if (!this->_internal_s4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s4().data(), static_cast<int>(this->_internal_s4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.SystemNoticeParams.s4");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_s4(), target);
  }

  // int64 n1 = 5;
  if (this->_internal_n1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_n1(), target);
  }

  // int64 n2 = 6;
  if (this->_internal_n2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_n2(), target);
  }

  // int64 n3 = 7;
  if (this->_internal_n3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_n3(), target);
  }

  // int64 n4 = 8;
  if (this->_internal_n4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_n4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SystemNoticeParams)
  return target;
}

size_t SystemNoticeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SystemNoticeParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s1 = 1;
  if (!this->_internal_s1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s1());
  }

  // string s2 = 2;
  if (!this->_internal_s2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2());
  }

  // string s3 = 3;
  if (!this->_internal_s3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s3());
  }

  // string s4 = 4;
  if (!this->_internal_s4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s4());
  }

  // int64 n1 = 5;
  if (this->_internal_n1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_n1());
  }

  // int64 n2 = 6;
  if (this->_internal_n2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_n2());
  }

  // int64 n3 = 7;
  if (this->_internal_n3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_n3());
  }

  // int64 n4 = 8;
  if (this->_internal_n4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_n4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemNoticeParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemNoticeParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemNoticeParams::GetClassData() const { return &_class_data_; }


void SystemNoticeParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemNoticeParams*>(&to_msg);
  auto& from = static_cast<const SystemNoticeParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SystemNoticeParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s1().empty()) {
    _this->_internal_set_s1(from._internal_s1());
  }
  if (!from._internal_s2().empty()) {
    _this->_internal_set_s2(from._internal_s2());
  }
  if (!from._internal_s3().empty()) {
    _this->_internal_set_s3(from._internal_s3());
  }
  if (!from._internal_s4().empty()) {
    _this->_internal_set_s4(from._internal_s4());
  }
  if (from._internal_n1() != 0) {
    _this->_internal_set_n1(from._internal_n1());
  }
  if (from._internal_n2() != 0) {
    _this->_internal_set_n2(from._internal_n2());
  }
  if (from._internal_n3() != 0) {
    _this->_internal_set_n3(from._internal_n3());
  }
  if (from._internal_n4() != 0) {
    _this->_internal_set_n4(from._internal_n4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemNoticeParams::CopyFrom(const SystemNoticeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SystemNoticeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemNoticeParams::IsInitialized() const {
  return true;
}

void SystemNoticeParams::InternalSwap(SystemNoticeParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s1_, lhs_arena,
      &other->_impl_.s1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s2_, lhs_arena,
      &other->_impl_.s2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s3_, lhs_arena,
      &other->_impl_.s3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s4_, lhs_arena,
      &other->_impl_.s4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemNoticeParams, _impl_.n4_)
      + sizeof(SystemNoticeParams::_impl_.n4_)
      - PROTOBUF_FIELD_OFFSET(SystemNoticeParams, _impl_.n1_)>(
          reinterpret_cast<char*>(&_impl_.n1_),
          reinterpret_cast<char*>(&other->_impl_.n1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemNoticeParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[146]);
}

// ===================================================================

class DropItem::_Internal {
 public:
};

DropItem::DropItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.DropItem)
}
DropItem::DropItem(const DropItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.item_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_num_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.item_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.DropItem)
}

inline void DropItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0}
    , decltype(_impl_.item_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropItem::~DropItem() {
  // @@protoc_insertion_point(destructor:idlepb.DropItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DropItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.DropItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_num_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.item_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.DropItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // int32 item_num = 2;
  if (this->_internal_item_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.DropItem)
  return target;
}

size_t DropItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.DropItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
  }

  // int32 item_num = 2;
  if (this->_internal_item_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropItem::GetClassData() const { return &_class_data_; }


void DropItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropItem*>(&to_msg);
  auto& from = static_cast<const DropItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.DropItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_item_num() != 0) {
    _this->_internal_set_item_num(from._internal_item_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropItem::CopyFrom(const DropItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.DropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropItem::IsInitialized() const {
  return true;
}

void DropItem::InternalSwap(DropItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropItem, _impl_.item_num_)
      + sizeof(DropItem::_impl_.item_num_)
      - PROTOBUF_FIELD_OFFSET(DropItem, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[147]);
}

// ===================================================================

class BiographyEventLeaderboardItem::_Internal {
 public:
};

BiographyEventLeaderboardItem::BiographyEventLeaderboardItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.BiographyEventLeaderboardItem)
}
BiographyEventLeaderboardItem::BiographyEventLeaderboardItem(const BiographyEventLeaderboardItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BiographyEventLeaderboardItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_n1_){from._impl_.params_n1_}
    , /*decltype(_impl_._params_n1_cached_byte_size_)*/{0}
    , decltype(_impl_.params_d1_){from._impl_.params_d1_}
    , /*decltype(_impl_._params_d1_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.param_n1_){}
    , decltype(_impl_.param_d1_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uid_, &from._impl_.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.param_d1_) -
    reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.param_d1_));
  // @@protoc_insertion_point(copy_constructor:idlepb.BiographyEventLeaderboardItem)
}

inline void BiographyEventLeaderboardItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_n1_){arena}
    , /*decltype(_impl_._params_n1_cached_byte_size_)*/{0}
    , decltype(_impl_.params_d1_){arena}
    , /*decltype(_impl_._params_d1_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){int64_t{0}}
    , decltype(_impl_.param_n1_){int64_t{0}}
    , decltype(_impl_.param_d1_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BiographyEventLeaderboardItem::~BiographyEventLeaderboardItem() {
  // @@protoc_insertion_point(destructor:idlepb.BiographyEventLeaderboardItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiographyEventLeaderboardItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_n1_.~RepeatedField();
  _impl_.params_d1_.~RepeatedField();
  _impl_.name_.Destroy();
}

void BiographyEventLeaderboardItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiographyEventLeaderboardItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.BiographyEventLeaderboardItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_n1_.Clear();
  _impl_.params_d1_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.param_d1_) -
      reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.param_d1_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiographyEventLeaderboardItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.BiographyEventLeaderboardItem.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 param_d1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.param_d1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 param_n1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.param_n1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 params_n1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_params_n1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_params_n1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 params_d1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_params_d1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_params_d1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiographyEventLeaderboardItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.BiographyEventLeaderboardItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uid = 1;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_uid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.BiographyEventLeaderboardItem.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 param_d1 = 6;
  if (this->_internal_param_d1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_param_d1(), target);
  }

  // int64 param_n1 = 7;
  if (this->_internal_param_n1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_param_n1(), target);
  }

  // repeated int64 params_n1 = 8;
  {
    int byte_size = _impl_._params_n1_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_params_n1(), byte_size, target);
    }
  }

  // repeated int32 params_d1 = 9;
  {
    int byte_size = _impl_._params_d1_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_params_d1(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.BiographyEventLeaderboardItem)
  return target;
}

size_t BiographyEventLeaderboardItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.BiographyEventLeaderboardItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 params_n1 = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.params_n1_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._params_n1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 params_d1 = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.params_d1_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._params_d1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 uid = 1;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uid());
  }

  // int64 param_n1 = 7;
  if (this->_internal_param_n1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_param_n1());
  }

  // int32 param_d1 = 6;
  if (this->_internal_param_d1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_param_d1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiographyEventLeaderboardItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiographyEventLeaderboardItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiographyEventLeaderboardItem::GetClassData() const { return &_class_data_; }


void BiographyEventLeaderboardItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BiographyEventLeaderboardItem*>(&to_msg);
  auto& from = static_cast<const BiographyEventLeaderboardItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.BiographyEventLeaderboardItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_n1_.MergeFrom(from._impl_.params_n1_);
  _this->_impl_.params_d1_.MergeFrom(from._impl_.params_d1_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_param_n1() != 0) {
    _this->_internal_set_param_n1(from._internal_param_n1());
  }
  if (from._internal_param_d1() != 0) {
    _this->_internal_set_param_d1(from._internal_param_d1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiographyEventLeaderboardItem::CopyFrom(const BiographyEventLeaderboardItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.BiographyEventLeaderboardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiographyEventLeaderboardItem::IsInitialized() const {
  return true;
}

void BiographyEventLeaderboardItem::InternalSwap(BiographyEventLeaderboardItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_n1_.InternalSwap(&other->_impl_.params_n1_);
  _impl_.params_d1_.InternalSwap(&other->_impl_.params_d1_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiographyEventLeaderboardItem, _impl_.param_d1_)
      + sizeof(BiographyEventLeaderboardItem::_impl_.param_d1_)
      - PROTOBUF_FIELD_OFFSET(BiographyEventLeaderboardItem, _impl_.uid_)>(
          reinterpret_cast<char*>(&_impl_.uid_),
          reinterpret_cast<char*>(&other->_impl_.uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiographyEventLeaderboardItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[148]);
}

// ===================================================================

class BiographyEventLeaderboardList::_Internal {
 public:
};

BiographyEventLeaderboardList::BiographyEventLeaderboardList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.BiographyEventLeaderboardList)
}
BiographyEventLeaderboardList::BiographyEventLeaderboardList(const BiographyEventLeaderboardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BiographyEventLeaderboardList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_data_){from._impl_.list_data_}
    , decltype(_impl_.begin_date_){}
    , decltype(_impl_.cfg_id_){}
    , decltype(_impl_.finished_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.begin_date_, &from._impl_.begin_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.finished_) -
    reinterpret_cast<char*>(&_impl_.begin_date_)) + sizeof(_impl_.finished_));
  // @@protoc_insertion_point(copy_constructor:idlepb.BiographyEventLeaderboardList)
}

inline void BiographyEventLeaderboardList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_data_){arena}
    , decltype(_impl_.begin_date_){int64_t{0}}
    , decltype(_impl_.cfg_id_){0}
    , decltype(_impl_.finished_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BiographyEventLeaderboardList::~BiographyEventLeaderboardList() {
  // @@protoc_insertion_point(destructor:idlepb.BiographyEventLeaderboardList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiographyEventLeaderboardList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_data_.~RepeatedPtrField();
}

void BiographyEventLeaderboardList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiographyEventLeaderboardList::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.BiographyEventLeaderboardList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_data_.Clear();
  ::memset(&_impl_.begin_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.finished_) -
      reinterpret_cast<char*>(&_impl_.begin_date_)) + sizeof(_impl_.finished_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiographyEventLeaderboardList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.BiographyEventLeaderboardItem list_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 cfg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cfg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 begin_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.begin_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool finished = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiographyEventLeaderboardList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.BiographyEventLeaderboardList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.BiographyEventLeaderboardItem list_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_list_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 cfg_id = 2;
  if (this->_internal_cfg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cfg_id(), target);
  }

  // int64 begin_date = 3;
  if (this->_internal_begin_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_begin_date(), target);
  }

  // bool finished = 4;
  if (this->_internal_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_finished(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.BiographyEventLeaderboardList)
  return target;
}

size_t BiographyEventLeaderboardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.BiographyEventLeaderboardList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.BiographyEventLeaderboardItem list_data = 1;
  total_size += 1UL * this->_internal_list_data_size();
  for (const auto& msg : this->_impl_.list_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 begin_date = 3;
  if (this->_internal_begin_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_date());
  }

  // int32 cfg_id = 2;
  if (this->_internal_cfg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cfg_id());
  }

  // bool finished = 4;
  if (this->_internal_finished() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiographyEventLeaderboardList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiographyEventLeaderboardList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiographyEventLeaderboardList::GetClassData() const { return &_class_data_; }


void BiographyEventLeaderboardList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BiographyEventLeaderboardList*>(&to_msg);
  auto& from = static_cast<const BiographyEventLeaderboardList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.BiographyEventLeaderboardList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_data_.MergeFrom(from._impl_.list_data_);
  if (from._internal_begin_date() != 0) {
    _this->_internal_set_begin_date(from._internal_begin_date());
  }
  if (from._internal_cfg_id() != 0) {
    _this->_internal_set_cfg_id(from._internal_cfg_id());
  }
  if (from._internal_finished() != 0) {
    _this->_internal_set_finished(from._internal_finished());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiographyEventLeaderboardList::CopyFrom(const BiographyEventLeaderboardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.BiographyEventLeaderboardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiographyEventLeaderboardList::IsInitialized() const {
  return true;
}

void BiographyEventLeaderboardList::InternalSwap(BiographyEventLeaderboardList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_data_.InternalSwap(&other->_impl_.list_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiographyEventLeaderboardList, _impl_.finished_)
      + sizeof(BiographyEventLeaderboardList::_impl_.finished_)
      - PROTOBUF_FIELD_OFFSET(BiographyEventLeaderboardList, _impl_.begin_date_)>(
          reinterpret_cast<char*>(&_impl_.begin_date_),
          reinterpret_cast<char*>(&other->_impl_.begin_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiographyEventLeaderboardList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[149]);
}

// ===================================================================

class LeaderboardListItem::_Internal {
 public:
};

LeaderboardListItem::LeaderboardListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.LeaderboardListItem)
}
LeaderboardListItem::LeaderboardListItem(const LeaderboardListItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaderboardListItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.property_num_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.d1_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.role_id_, &from._impl_.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.d1_) -
    reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.d1_));
  // @@protoc_insertion_point(copy_constructor:idlepb.LeaderboardListItem)
}

inline void LeaderboardListItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.role_id_){int64_t{0}}
    , decltype(_impl_.property_num_){int64_t{0}}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.d1_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LeaderboardListItem::~LeaderboardListItem() {
  // @@protoc_insertion_point(destructor:idlepb.LeaderboardListItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaderboardListItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void LeaderboardListItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaderboardListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.LeaderboardListItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  ::memset(&_impl_.role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.d1_) -
      reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.d1_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardListItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.LeaderboardListItem.user_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 property_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.property_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 d1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.d1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaderboardListItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.LeaderboardListItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.LeaderboardListItem.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // int64 property_num = 3;
  if (this->_internal_property_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_property_num(), target);
  }

  // int64 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  // int32 d1 = 5;
  if (this->_internal_d1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_d1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.LeaderboardListItem)
  return target;
}

size_t LeaderboardListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.LeaderboardListItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_role_id());
  }

  // int64 property_num = 3;
  if (this->_internal_property_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_property_num());
  }

  // int64 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int32 d1 = 5;
  if (this->_internal_d1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_d1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaderboardListItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaderboardListItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaderboardListItem::GetClassData() const { return &_class_data_; }


void LeaderboardListItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaderboardListItem*>(&to_msg);
  auto& from = static_cast<const LeaderboardListItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.LeaderboardListItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_property_num() != 0) {
    _this->_internal_set_property_num(from._internal_property_num());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_d1() != 0) {
    _this->_internal_set_d1(from._internal_d1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaderboardListItem::CopyFrom(const LeaderboardListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.LeaderboardListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardListItem::IsInitialized() const {
  return true;
}

void LeaderboardListItem::InternalSwap(LeaderboardListItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaderboardListItem, _impl_.d1_)
      + sizeof(LeaderboardListItem::_impl_.d1_)
      - PROTOBUF_FIELD_OFFSET(LeaderboardListItem, _impl_.role_id_)>(
          reinterpret_cast<char*>(&_impl_.role_id_),
          reinterpret_cast<char*>(&other->_impl_.role_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardListItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[150]);
}

// ===================================================================

class SeptDataOnLeaderboard::_Internal {
 public:
};

SeptDataOnLeaderboard::SeptDataOnLeaderboard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SeptDataOnLeaderboard)
}
SeptDataOnLeaderboard::SeptDataOnLeaderboard(const SeptDataOnLeaderboard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeptDataOnLeaderboard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sept_name_){}
    , decltype(_impl_.sept_id_){}
    , decltype(_impl_.property_num_){}
    , decltype(_impl_.logo_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sept_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sept_name().empty()) {
    _this->_impl_.sept_name_.Set(from._internal_sept_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sept_id_, &from._impl_.sept_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.logo_index_) -
    reinterpret_cast<char*>(&_impl_.sept_id_)) + sizeof(_impl_.logo_index_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SeptDataOnLeaderboard)
}

inline void SeptDataOnLeaderboard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sept_name_){}
    , decltype(_impl_.sept_id_){int64_t{0}}
    , decltype(_impl_.property_num_){int64_t{0}}
    , decltype(_impl_.logo_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sept_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SeptDataOnLeaderboard::~SeptDataOnLeaderboard() {
  // @@protoc_insertion_point(destructor:idlepb.SeptDataOnLeaderboard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeptDataOnLeaderboard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sept_name_.Destroy();
}

void SeptDataOnLeaderboard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeptDataOnLeaderboard::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SeptDataOnLeaderboard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sept_name_.ClearToEmpty();
  ::memset(&_impl_.sept_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.logo_index_) -
      reinterpret_cast<char*>(&_impl_.sept_id_)) + sizeof(_impl_.logo_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeptDataOnLeaderboard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sept_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sept_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sept_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sept_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.SeptDataOnLeaderboard.sept_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 logo_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.logo_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 property_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.property_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeptDataOnLeaderboard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SeptDataOnLeaderboard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sept_id = 1;
  if (this->_internal_sept_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sept_id(), target);
  }

  // string sept_name = 2;
  if (!this->_internal_sept_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sept_name().data(), static_cast<int>(this->_internal_sept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.SeptDataOnLeaderboard.sept_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sept_name(), target);
  }

  // int32 logo_index = 3;
  if (this->_internal_logo_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_logo_index(), target);
  }

  // int64 property_num = 4;
  if (this->_internal_property_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_property_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SeptDataOnLeaderboard)
  return target;
}

size_t SeptDataOnLeaderboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SeptDataOnLeaderboard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sept_name = 2;
  if (!this->_internal_sept_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sept_name());
  }

  // int64 sept_id = 1;
  if (this->_internal_sept_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sept_id());
  }

  // int64 property_num = 4;
  if (this->_internal_property_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_property_num());
  }

  // int32 logo_index = 3;
  if (this->_internal_logo_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logo_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeptDataOnLeaderboard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeptDataOnLeaderboard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeptDataOnLeaderboard::GetClassData() const { return &_class_data_; }


void SeptDataOnLeaderboard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeptDataOnLeaderboard*>(&to_msg);
  auto& from = static_cast<const SeptDataOnLeaderboard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SeptDataOnLeaderboard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sept_name().empty()) {
    _this->_internal_set_sept_name(from._internal_sept_name());
  }
  if (from._internal_sept_id() != 0) {
    _this->_internal_set_sept_id(from._internal_sept_id());
  }
  if (from._internal_property_num() != 0) {
    _this->_internal_set_property_num(from._internal_property_num());
  }
  if (from._internal_logo_index() != 0) {
    _this->_internal_set_logo_index(from._internal_logo_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeptDataOnLeaderboard::CopyFrom(const SeptDataOnLeaderboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SeptDataOnLeaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeptDataOnLeaderboard::IsInitialized() const {
  return true;
}

void SeptDataOnLeaderboard::InternalSwap(SeptDataOnLeaderboard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sept_name_, lhs_arena,
      &other->_impl_.sept_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeptDataOnLeaderboard, _impl_.logo_index_)
      + sizeof(SeptDataOnLeaderboard::_impl_.logo_index_)
      - PROTOBUF_FIELD_OFFSET(SeptDataOnLeaderboard, _impl_.sept_id_)>(
          reinterpret_cast<char*>(&_impl_.sept_id_),
          reinterpret_cast<char*>(&other->_impl_.sept_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SeptDataOnLeaderboard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[151]);
}

// ===================================================================

class LeaderboardList::_Internal {
 public:
};

LeaderboardList::LeaderboardList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.LeaderboardList)
}
LeaderboardList::LeaderboardList(const LeaderboardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaderboardList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_data_){from._impl_.list_data_}
    , decltype(_impl_.type_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_id_ = from._impl_.type_id_;
  // @@protoc_insertion_point(copy_constructor:idlepb.LeaderboardList)
}

inline void LeaderboardList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_data_){arena}
    , decltype(_impl_.type_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeaderboardList::~LeaderboardList() {
  // @@protoc_insertion_point(destructor:idlepb.LeaderboardList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaderboardList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_data_.~RepeatedPtrField();
}

void LeaderboardList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaderboardList::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.LeaderboardList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_data_.Clear();
  _impl_.type_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.LeaderboardListItem list_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaderboardList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.LeaderboardList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.LeaderboardListItem list_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_list_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 type_id = 2;
  if (this->_internal_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.LeaderboardList)
  return target;
}

size_t LeaderboardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.LeaderboardList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.LeaderboardListItem list_data = 1;
  total_size += 1UL * this->_internal_list_data_size();
  for (const auto& msg : this->_impl_.list_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type_id = 2;
  if (this->_internal_type_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaderboardList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaderboardList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaderboardList::GetClassData() const { return &_class_data_; }


void LeaderboardList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaderboardList*>(&to_msg);
  auto& from = static_cast<const LeaderboardList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.LeaderboardList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_data_.MergeFrom(from._impl_.list_data_);
  if (from._internal_type_id() != 0) {
    _this->_internal_set_type_id(from._internal_type_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaderboardList::CopyFrom(const LeaderboardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.LeaderboardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardList::IsInitialized() const {
  return true;
}

void LeaderboardList::InternalSwap(LeaderboardList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_data_.InternalSwap(&other->_impl_.list_data_);
  swap(_impl_.type_id_, other->_impl_.type_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[152]);
}

// ===================================================================

class LeaderboardSaveData::_Internal {
 public:
};

LeaderboardSaveData::LeaderboardSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.LeaderboardSaveData)
}
LeaderboardSaveData::LeaderboardSaveData(const LeaderboardSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaderboardSaveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lists_data_){from._impl_.lists_data_}
    , decltype(_impl_.sept_list_){from._impl_.sept_list_}
    , decltype(_impl_.monster_tower_challange_){from._impl_.monster_tower_challange_}
    , decltype(_impl_.biography_lists_){from._impl_.biography_lists_}
    , decltype(_impl_.fuze_mail_list_){from._impl_.fuze_mail_list_}
    , /*decltype(_impl_._fuze_mail_list_cached_byte_size_)*/{0}
    , decltype(_impl_.last_reset_week_time_){}
    , decltype(_impl_.last_reset_day_time_){}
    , decltype(_impl_.fuze_exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.last_reset_week_time_, &from._impl_.last_reset_week_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fuze_exp_) -
    reinterpret_cast<char*>(&_impl_.last_reset_week_time_)) + sizeof(_impl_.fuze_exp_));
  // @@protoc_insertion_point(copy_constructor:idlepb.LeaderboardSaveData)
}

inline void LeaderboardSaveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lists_data_){arena}
    , decltype(_impl_.sept_list_){arena}
    , decltype(_impl_.monster_tower_challange_){arena}
    , decltype(_impl_.biography_lists_){arena}
    , decltype(_impl_.fuze_mail_list_){arena}
    , /*decltype(_impl_._fuze_mail_list_cached_byte_size_)*/{0}
    , decltype(_impl_.last_reset_week_time_){int64_t{0}}
    , decltype(_impl_.last_reset_day_time_){int64_t{0}}
    , decltype(_impl_.fuze_exp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeaderboardSaveData::~LeaderboardSaveData() {
  // @@protoc_insertion_point(destructor:idlepb.LeaderboardSaveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaderboardSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lists_data_.~RepeatedPtrField();
  _impl_.sept_list_.~RepeatedPtrField();
  _impl_.monster_tower_challange_.~RepeatedPtrField();
  _impl_.biography_lists_.~RepeatedPtrField();
  _impl_.fuze_mail_list_.~RepeatedField();
}

void LeaderboardSaveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaderboardSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.LeaderboardSaveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lists_data_.Clear();
  _impl_.sept_list_.Clear();
  _impl_.monster_tower_challange_.Clear();
  _impl_.biography_lists_.Clear();
  _impl_.fuze_mail_list_.Clear();
  ::memset(&_impl_.last_reset_week_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fuze_exp_) -
      reinterpret_cast<char*>(&_impl_.last_reset_week_time_)) + sizeof(_impl_.fuze_exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardSaveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.LeaderboardList lists_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lists_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.SeptDataOnLeaderboard sept_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sept_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.LeaderboardList monster_tower_challange = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monster_tower_challange(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 last_reset_week_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.last_reset_week_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_reset_day_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.last_reset_day_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.BiographyEventLeaderboardList biography_lists = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_biography_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 fuze_exp = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.fuze_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 fuze_mail_list = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_fuze_mail_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_fuze_mail_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaderboardSaveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.LeaderboardSaveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.LeaderboardList lists_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lists_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_lists_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.SeptDataOnLeaderboard sept_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sept_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_sept_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .idlepb.LeaderboardList monster_tower_challange = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_monster_tower_challange_size()); i < n; i++) {
    const auto& repfield = this->_internal_monster_tower_challange(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 last_reset_week_time = 21;
  if (this->_internal_last_reset_week_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_last_reset_week_time(), target);
  }

  // int64 last_reset_day_time = 22;
  if (this->_internal_last_reset_day_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_last_reset_day_time(), target);
  }

  // repeated .idlepb.BiographyEventLeaderboardList biography_lists = 31;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_biography_lists_size()); i < n; i++) {
    const auto& repfield = this->_internal_biography_lists(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 fuze_exp = 32;
  if (this->_internal_fuze_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_fuze_exp(), target);
  }

  // repeated int64 fuze_mail_list = 33;
  {
    int byte_size = _impl_._fuze_mail_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          33, _internal_fuze_mail_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.LeaderboardSaveData)
  return target;
}

size_t LeaderboardSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.LeaderboardSaveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.LeaderboardList lists_data = 1;
  total_size += 1UL * this->_internal_lists_data_size();
  for (const auto& msg : this->_impl_.lists_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.SeptDataOnLeaderboard sept_list = 3;
  total_size += 1UL * this->_internal_sept_list_size();
  for (const auto& msg : this->_impl_.sept_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.LeaderboardList monster_tower_challange = 11;
  total_size += 1UL * this->_internal_monster_tower_challange_size();
  for (const auto& msg : this->_impl_.monster_tower_challange_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idlepb.BiographyEventLeaderboardList biography_lists = 31;
  total_size += 2UL * this->_internal_biography_lists_size();
  for (const auto& msg : this->_impl_.biography_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 fuze_mail_list = 33;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.fuze_mail_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._fuze_mail_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 last_reset_week_time = 21;
  if (this->_internal_last_reset_week_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_last_reset_week_time());
  }

  // int64 last_reset_day_time = 22;
  if (this->_internal_last_reset_day_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_last_reset_day_time());
  }

  // int64 fuze_exp = 32;
  if (this->_internal_fuze_exp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_fuze_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaderboardSaveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaderboardSaveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaderboardSaveData::GetClassData() const { return &_class_data_; }


void LeaderboardSaveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaderboardSaveData*>(&to_msg);
  auto& from = static_cast<const LeaderboardSaveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.LeaderboardSaveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lists_data_.MergeFrom(from._impl_.lists_data_);
  _this->_impl_.sept_list_.MergeFrom(from._impl_.sept_list_);
  _this->_impl_.monster_tower_challange_.MergeFrom(from._impl_.monster_tower_challange_);
  _this->_impl_.biography_lists_.MergeFrom(from._impl_.biography_lists_);
  _this->_impl_.fuze_mail_list_.MergeFrom(from._impl_.fuze_mail_list_);
  if (from._internal_last_reset_week_time() != 0) {
    _this->_internal_set_last_reset_week_time(from._internal_last_reset_week_time());
  }
  if (from._internal_last_reset_day_time() != 0) {
    _this->_internal_set_last_reset_day_time(from._internal_last_reset_day_time());
  }
  if (from._internal_fuze_exp() != 0) {
    _this->_internal_set_fuze_exp(from._internal_fuze_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaderboardSaveData::CopyFrom(const LeaderboardSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.LeaderboardSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardSaveData::IsInitialized() const {
  return true;
}

void LeaderboardSaveData::InternalSwap(LeaderboardSaveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lists_data_.InternalSwap(&other->_impl_.lists_data_);
  _impl_.sept_list_.InternalSwap(&other->_impl_.sept_list_);
  _impl_.monster_tower_challange_.InternalSwap(&other->_impl_.monster_tower_challange_);
  _impl_.biography_lists_.InternalSwap(&other->_impl_.biography_lists_);
  _impl_.fuze_mail_list_.InternalSwap(&other->_impl_.fuze_mail_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaderboardSaveData, _impl_.fuze_exp_)
      + sizeof(LeaderboardSaveData::_impl_.fuze_exp_)
      - PROTOBUF_FIELD_OFFSET(LeaderboardSaveData, _impl_.last_reset_week_time_)>(
          reinterpret_cast<char*>(&_impl_.last_reset_week_time_),
          reinterpret_cast<char*>(&other->_impl_.last_reset_week_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardSaveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[153]);
}

// ===================================================================

class SeptDemonDamageHistoryEntry::_Internal {
 public:
  static const ::idlepb::CharacterModelConfig& role_model(const SeptDemonDamageHistoryEntry* msg);
};

const ::idlepb::CharacterModelConfig&
SeptDemonDamageHistoryEntry::_Internal::role_model(const SeptDemonDamageHistoryEntry* msg) {
  return *msg->_impl_.role_model_;
}
SeptDemonDamageHistoryEntry::SeptDemonDamageHistoryEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SeptDemonDamageHistoryEntry)
}
SeptDemonDamageHistoryEntry::SeptDemonDamageHistoryEntry(const SeptDemonDamageHistoryEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeptDemonDamageHistoryEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.role_model_){nullptr}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.total_damage_){}
    , decltype(_impl_.rank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_role_model()) {
    _this->_impl_.role_model_ = new ::idlepb::CharacterModelConfig(*from._impl_.role_model_);
  }
  ::memcpy(&_impl_.role_id_, &from._impl_.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rank_) -
    reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.rank_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SeptDemonDamageHistoryEntry)
}

inline void SeptDemonDamageHistoryEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.role_model_){nullptr}
    , decltype(_impl_.role_id_){int64_t{0}}
    , decltype(_impl_.total_damage_){0}
    , decltype(_impl_.rank_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SeptDemonDamageHistoryEntry::~SeptDemonDamageHistoryEntry() {
  // @@protoc_insertion_point(destructor:idlepb.SeptDemonDamageHistoryEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeptDemonDamageHistoryEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.role_model_;
}

void SeptDemonDamageHistoryEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeptDemonDamageHistoryEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SeptDemonDamageHistoryEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.role_model_ != nullptr) {
    delete _impl_.role_model_;
  }
  _impl_.role_model_ = nullptr;
  ::memset(&_impl_.role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rank_) -
      reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeptDemonDamageHistoryEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.SeptDemonDamageHistoryEntry.role_name"));
        } else
          goto handle_unusual;
        continue;
      // float total_damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.total_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CharacterModelConfig role_model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeptDemonDamageHistoryEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SeptDemonDamageHistoryEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.SeptDemonDamageHistoryEntry.role_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_name(), target);
  }

  // float total_damage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_damage = this->_internal_total_damage();
  uint32_t raw_total_damage;
  memcpy(&raw_total_damage, &tmp_total_damage, sizeof(tmp_total_damage));
  if (raw_total_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_total_damage(), target);
  }

  // int32 rank = 4;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_rank(), target);
  }

  // .idlepb.CharacterModelConfig role_model = 5;
  if (this->_internal_has_role_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::role_model(this),
        _Internal::role_model(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SeptDemonDamageHistoryEntry)
  return target;
}

size_t SeptDemonDamageHistoryEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SeptDemonDamageHistoryEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .idlepb.CharacterModelConfig role_model = 5;
  if (this->_internal_has_role_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.role_model_);
  }

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_role_id());
  }

  // float total_damage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_damage = this->_internal_total_damage();
  uint32_t raw_total_damage;
  memcpy(&raw_total_damage, &tmp_total_damage, sizeof(tmp_total_damage));
  if (raw_total_damage != 0) {
    total_size += 1 + 4;
  }

  // int32 rank = 4;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeptDemonDamageHistoryEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeptDemonDamageHistoryEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeptDemonDamageHistoryEntry::GetClassData() const { return &_class_data_; }


void SeptDemonDamageHistoryEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeptDemonDamageHistoryEntry*>(&to_msg);
  auto& from = static_cast<const SeptDemonDamageHistoryEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SeptDemonDamageHistoryEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (from._internal_has_role_model()) {
    _this->_internal_mutable_role_model()->::idlepb::CharacterModelConfig::MergeFrom(
        from._internal_role_model());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_total_damage = from._internal_total_damage();
  uint32_t raw_total_damage;
  memcpy(&raw_total_damage, &tmp_total_damage, sizeof(tmp_total_damage));
  if (raw_total_damage != 0) {
    _this->_internal_set_total_damage(from._internal_total_damage());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeptDemonDamageHistoryEntry::CopyFrom(const SeptDemonDamageHistoryEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SeptDemonDamageHistoryEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeptDemonDamageHistoryEntry::IsInitialized() const {
  return true;
}

void SeptDemonDamageHistoryEntry::InternalSwap(SeptDemonDamageHistoryEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeptDemonDamageHistoryEntry, _impl_.rank_)
      + sizeof(SeptDemonDamageHistoryEntry::_impl_.rank_)
      - PROTOBUF_FIELD_OFFSET(SeptDemonDamageHistoryEntry, _impl_.role_model_)>(
          reinterpret_cast<char*>(&_impl_.role_model_),
          reinterpret_cast<char*>(&other->_impl_.role_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SeptDemonDamageHistoryEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[154]);
}

// ===================================================================

class SeptDemonDamageHistoryData::_Internal {
 public:
};

SeptDemonDamageHistoryData::SeptDemonDamageHistoryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SeptDemonDamageHistoryData)
}
SeptDemonDamageHistoryData::SeptDemonDamageHistoryData(const SeptDemonDamageHistoryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeptDemonDamageHistoryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.all_entries_){from._impl_.all_entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idlepb.SeptDemonDamageHistoryData)
}

inline void SeptDemonDamageHistoryData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.all_entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SeptDemonDamageHistoryData::~SeptDemonDamageHistoryData() {
  // @@protoc_insertion_point(destructor:idlepb.SeptDemonDamageHistoryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeptDemonDamageHistoryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.all_entries_.~RepeatedPtrField();
}

void SeptDemonDamageHistoryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeptDemonDamageHistoryData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SeptDemonDamageHistoryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.all_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeptDemonDamageHistoryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.SeptDemonDamageHistoryEntry all_entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeptDemonDamageHistoryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SeptDemonDamageHistoryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.SeptDemonDamageHistoryEntry all_entries = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SeptDemonDamageHistoryData)
  return target;
}

size_t SeptDemonDamageHistoryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SeptDemonDamageHistoryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.SeptDemonDamageHistoryEntry all_entries = 4;
  total_size += 1UL * this->_internal_all_entries_size();
  for (const auto& msg : this->_impl_.all_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeptDemonDamageHistoryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeptDemonDamageHistoryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeptDemonDamageHistoryData::GetClassData() const { return &_class_data_; }


void SeptDemonDamageHistoryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeptDemonDamageHistoryData*>(&to_msg);
  auto& from = static_cast<const SeptDemonDamageHistoryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SeptDemonDamageHistoryData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.all_entries_.MergeFrom(from._impl_.all_entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeptDemonDamageHistoryData::CopyFrom(const SeptDemonDamageHistoryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SeptDemonDamageHistoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeptDemonDamageHistoryData::IsInitialized() const {
  return true;
}

void SeptDemonDamageHistoryData::InternalSwap(SeptDemonDamageHistoryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.all_entries_.InternalSwap(&other->_impl_.all_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeptDemonDamageHistoryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[155]);
}

// ===================================================================

class SelfSeptInfo::_Internal {
 public:
};

SelfSeptInfo::SelfSeptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SelfSeptInfo)
}
SelfSeptInfo::SelfSeptInfo(const SelfSeptInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelfSeptInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sept_name_){}
    , decltype(_impl_.sept_id_){}
    , decltype(_impl_.next_join_ticks_){}
    , decltype(_impl_.sept_position_){}
    , decltype(_impl_.land_fighting_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sept_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sept_name().empty()) {
    _this->_impl_.sept_name_.Set(from._internal_sept_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sept_id_, &from._impl_.sept_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.land_fighting_) -
    reinterpret_cast<char*>(&_impl_.sept_id_)) + sizeof(_impl_.land_fighting_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SelfSeptInfo)
}

inline void SelfSeptInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sept_name_){}
    , decltype(_impl_.sept_id_){int64_t{0}}
    , decltype(_impl_.next_join_ticks_){int64_t{0}}
    , decltype(_impl_.sept_position_){0}
    , decltype(_impl_.land_fighting_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sept_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sept_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelfSeptInfo::~SelfSeptInfo() {
  // @@protoc_insertion_point(destructor:idlepb.SelfSeptInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelfSeptInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sept_name_.Destroy();
}

void SelfSeptInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelfSeptInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SelfSeptInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sept_name_.ClearToEmpty();
  ::memset(&_impl_.sept_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.land_fighting_) -
      reinterpret_cast<char*>(&_impl_.sept_id_)) + sizeof(_impl_.land_fighting_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelfSeptInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sept_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sept_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sept_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sept_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.SelfSeptInfo.sept_name"));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.SeptPosition sept_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sept_position(static_cast<::idlepb::SeptPosition>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 next_join_ticks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.next_join_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool land_fighting = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.land_fighting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelfSeptInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SelfSeptInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sept_id = 1;
  if (this->_internal_sept_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sept_id(), target);
  }

  // string sept_name = 2;
  if (!this->_internal_sept_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sept_name().data(), static_cast<int>(this->_internal_sept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.SelfSeptInfo.sept_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sept_name(), target);
  }

  // .idlepb.SeptPosition sept_position = 3;
  if (this->_internal_sept_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_sept_position(), target);
  }

  // int64 next_join_ticks = 4;
  if (this->_internal_next_join_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_next_join_ticks(), target);
  }

  // bool land_fighting = 5;
  if (this->_internal_land_fighting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_land_fighting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SelfSeptInfo)
  return target;
}

size_t SelfSeptInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SelfSeptInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sept_name = 2;
  if (!this->_internal_sept_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sept_name());
  }

  // int64 sept_id = 1;
  if (this->_internal_sept_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sept_id());
  }

  // int64 next_join_ticks = 4;
  if (this->_internal_next_join_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_join_ticks());
  }

  // .idlepb.SeptPosition sept_position = 3;
  if (this->_internal_sept_position() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sept_position());
  }

  // bool land_fighting = 5;
  if (this->_internal_land_fighting() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelfSeptInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelfSeptInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelfSeptInfo::GetClassData() const { return &_class_data_; }


void SelfSeptInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelfSeptInfo*>(&to_msg);
  auto& from = static_cast<const SelfSeptInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SelfSeptInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sept_name().empty()) {
    _this->_internal_set_sept_name(from._internal_sept_name());
  }
  if (from._internal_sept_id() != 0) {
    _this->_internal_set_sept_id(from._internal_sept_id());
  }
  if (from._internal_next_join_ticks() != 0) {
    _this->_internal_set_next_join_ticks(from._internal_next_join_ticks());
  }
  if (from._internal_sept_position() != 0) {
    _this->_internal_set_sept_position(from._internal_sept_position());
  }
  if (from._internal_land_fighting() != 0) {
    _this->_internal_set_land_fighting(from._internal_land_fighting());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelfSeptInfo::CopyFrom(const SelfSeptInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SelfSeptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfSeptInfo::IsInitialized() const {
  return true;
}

void SelfSeptInfo::InternalSwap(SelfSeptInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sept_name_, lhs_arena,
      &other->_impl_.sept_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelfSeptInfo, _impl_.land_fighting_)
      + sizeof(SelfSeptInfo::_impl_.land_fighting_)
      - PROTOBUF_FIELD_OFFSET(SelfSeptInfo, _impl_.sept_id_)>(
          reinterpret_cast<char*>(&_impl_.sept_id_),
          reinterpret_cast<char*>(&other->_impl_.sept_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelfSeptInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[156]);
}

// ===================================================================

class CreatePlayerParams::_Internal {
 public:
  static const ::idlepb::RankData& physics_rank_data(const CreatePlayerParams* msg);
  static const ::idlepb::RankData& magic_rank_data(const CreatePlayerParams* msg);
  static const ::idlepb::CharacterModelConfig& model_config(const CreatePlayerParams* msg);
  static const ::idlepb::PlayerAbilityData& ability_data(const CreatePlayerParams* msg);
  static const ::idlepb::RoleNormalSettings& normal_settings(const CreatePlayerParams* msg);
  static const ::idlepb::SelfSeptInfo& self_sept_info(const CreatePlayerParams* msg);
  static const ::idlepb::GameStatsAllModuleData& all_stats_data(const CreatePlayerParams* msg);
};

const ::idlepb::RankData&
CreatePlayerParams::_Internal::physics_rank_data(const CreatePlayerParams* msg) {
  return *msg->_impl_.physics_rank_data_;
}
const ::idlepb::RankData&
CreatePlayerParams::_Internal::magic_rank_data(const CreatePlayerParams* msg) {
  return *msg->_impl_.magic_rank_data_;
}
const ::idlepb::CharacterModelConfig&
CreatePlayerParams::_Internal::model_config(const CreatePlayerParams* msg) {
  return *msg->_impl_.model_config_;
}
const ::idlepb::PlayerAbilityData&
CreatePlayerParams::_Internal::ability_data(const CreatePlayerParams* msg) {
  return *msg->_impl_.ability_data_;
}
const ::idlepb::RoleNormalSettings&
CreatePlayerParams::_Internal::normal_settings(const CreatePlayerParams* msg) {
  return *msg->_impl_.normal_settings_;
}
const ::idlepb::SelfSeptInfo&
CreatePlayerParams::_Internal::self_sept_info(const CreatePlayerParams* msg) {
  return *msg->_impl_.self_sept_info_;
}
const ::idlepb::GameStatsAllModuleData&
CreatePlayerParams::_Internal::all_stats_data(const CreatePlayerParams* msg) {
  return *msg->_impl_.all_stats_data_;
}
CreatePlayerParams::CreatePlayerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.CreatePlayerParams)
}
CreatePlayerParams::CreatePlayerParams(const CreatePlayerParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreatePlayerParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.physics_rank_data_){nullptr}
    , decltype(_impl_.magic_rank_data_){nullptr}
    , decltype(_impl_.model_config_){nullptr}
    , decltype(_impl_.ability_data_){nullptr}
    , decltype(_impl_.normal_settings_){nullptr}
    , decltype(_impl_.self_sept_info_){nullptr}
    , decltype(_impl_.all_stats_data_){nullptr}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.fight_mode_){}
    , decltype(_impl_.is_dummy_){}
    , decltype(_impl_.combat_power_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_physics_rank_data()) {
    _this->_impl_.physics_rank_data_ = new ::idlepb::RankData(*from._impl_.physics_rank_data_);
  }
  if (from._internal_has_magic_rank_data()) {
    _this->_impl_.magic_rank_data_ = new ::idlepb::RankData(*from._impl_.magic_rank_data_);
  }
  if (from._internal_has_model_config()) {
    _this->_impl_.model_config_ = new ::idlepb::CharacterModelConfig(*from._impl_.model_config_);
  }
  if (from._internal_has_ability_data()) {
    _this->_impl_.ability_data_ = new ::idlepb::PlayerAbilityData(*from._impl_.ability_data_);
  }
  if (from._internal_has_normal_settings()) {
    _this->_impl_.normal_settings_ = new ::idlepb::RoleNormalSettings(*from._impl_.normal_settings_);
  }
  if (from._internal_has_self_sept_info()) {
    _this->_impl_.self_sept_info_ = new ::idlepb::SelfSeptInfo(*from._impl_.self_sept_info_);
  }
  if (from._internal_has_all_stats_data()) {
    _this->_impl_.all_stats_data_ = new ::idlepb::GameStatsAllModuleData(*from._impl_.all_stats_data_);
  }
  ::memcpy(&_impl_.role_id_, &from._impl_.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.combat_power_) -
    reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.combat_power_));
  // @@protoc_insertion_point(copy_constructor:idlepb.CreatePlayerParams)
}

inline void CreatePlayerParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.physics_rank_data_){nullptr}
    , decltype(_impl_.magic_rank_data_){nullptr}
    , decltype(_impl_.model_config_){nullptr}
    , decltype(_impl_.ability_data_){nullptr}
    , decltype(_impl_.normal_settings_){nullptr}
    , decltype(_impl_.self_sept_info_){nullptr}
    , decltype(_impl_.all_stats_data_){nullptr}
    , decltype(_impl_.role_id_){int64_t{0}}
    , decltype(_impl_.fight_mode_){0}
    , decltype(_impl_.is_dummy_){false}
    , decltype(_impl_.combat_power_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreatePlayerParams::~CreatePlayerParams() {
  // @@protoc_insertion_point(destructor:idlepb.CreatePlayerParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreatePlayerParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.physics_rank_data_;
  if (this != internal_default_instance()) delete _impl_.magic_rank_data_;
  if (this != internal_default_instance()) delete _impl_.model_config_;
  if (this != internal_default_instance()) delete _impl_.ability_data_;
  if (this != internal_default_instance()) delete _impl_.normal_settings_;
  if (this != internal_default_instance()) delete _impl_.self_sept_info_;
  if (this != internal_default_instance()) delete _impl_.all_stats_data_;
}

void CreatePlayerParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreatePlayerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.CreatePlayerParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.physics_rank_data_ != nullptr) {
    delete _impl_.physics_rank_data_;
  }
  _impl_.physics_rank_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.magic_rank_data_ != nullptr) {
    delete _impl_.magic_rank_data_;
  }
  _impl_.magic_rank_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_config_ != nullptr) {
    delete _impl_.model_config_;
  }
  _impl_.model_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ability_data_ != nullptr) {
    delete _impl_.ability_data_;
  }
  _impl_.ability_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.normal_settings_ != nullptr) {
    delete _impl_.normal_settings_;
  }
  _impl_.normal_settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.self_sept_info_ != nullptr) {
    delete _impl_.self_sept_info_;
  }
  _impl_.self_sept_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.all_stats_data_ != nullptr) {
    delete _impl_.all_stats_data_;
  }
  _impl_.all_stats_data_ = nullptr;
  ::memset(&_impl_.role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.combat_power_) -
      reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.combat_power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePlayerParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.CreatePlayerParams.role_name"));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RankData physics_rank_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_physics_rank_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RankData magic_rank_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_magic_rank_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CharacterModelConfig model_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.PlayerAbilityData ability_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ability_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.FightMode fight_mode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fight_mode(static_cast<::idlepb::FightMode>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_dummy = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.is_dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.RoleNormalSettings normal_settings = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.SelfSeptInfo self_sept_info = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_self_sept_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 combat_power = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.combat_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.GameStatsAllModuleData all_stats_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_stats_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatePlayerParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.CreatePlayerParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.CreatePlayerParams.role_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_name(), target);
  }

  // .idlepb.RankData physics_rank_data = 3;
  if (this->_internal_has_physics_rank_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::physics_rank_data(this),
        _Internal::physics_rank_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.RankData magic_rank_data = 4;
  if (this->_internal_has_magic_rank_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::magic_rank_data(this),
        _Internal::magic_rank_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.CharacterModelConfig model_config = 5;
  if (this->_internal_has_model_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::model_config(this),
        _Internal::model_config(this).GetCachedSize(), target, stream);
  }

  // .idlepb.PlayerAbilityData ability_data = 12;
  if (this->_internal_has_ability_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::ability_data(this),
        _Internal::ability_data(this).GetCachedSize(), target, stream);
  }

  // .idlepb.FightMode fight_mode = 13;
  if (this->_internal_fight_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_fight_mode(), target);
  }

  // bool is_dummy = 14;
  if (this->_internal_is_dummy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_is_dummy(), target);
  }

  // .idlepb.RoleNormalSettings normal_settings = 15;
  if (this->_internal_has_normal_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::normal_settings(this),
        _Internal::normal_settings(this).GetCachedSize(), target, stream);
  }

  // .idlepb.SelfSeptInfo self_sept_info = 16;
  if (this->_internal_has_self_sept_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::self_sept_info(this),
        _Internal::self_sept_info(this).GetCachedSize(), target, stream);
  }

  // int64 combat_power = 17;
  if (this->_internal_combat_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_combat_power(), target);
  }

  // .idlepb.GameStatsAllModuleData all_stats_data = 20;
  if (this->_internal_has_all_stats_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::all_stats_data(this),
        _Internal::all_stats_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.CreatePlayerParams)
  return target;
}

size_t CreatePlayerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.CreatePlayerParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .idlepb.RankData physics_rank_data = 3;
  if (this->_internal_has_physics_rank_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.physics_rank_data_);
  }

  // .idlepb.RankData magic_rank_data = 4;
  if (this->_internal_has_magic_rank_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.magic_rank_data_);
  }

  // .idlepb.CharacterModelConfig model_config = 5;
  if (this->_internal_has_model_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_config_);
  }

  // .idlepb.PlayerAbilityData ability_data = 12;
  if (this->_internal_has_ability_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ability_data_);
  }

  // .idlepb.RoleNormalSettings normal_settings = 15;
  if (this->_internal_has_normal_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.normal_settings_);
  }

  // .idlepb.SelfSeptInfo self_sept_info = 16;
  if (this->_internal_has_self_sept_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.self_sept_info_);
  }

  // .idlepb.GameStatsAllModuleData all_stats_data = 20;
  if (this->_internal_has_all_stats_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.all_stats_data_);
  }

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_role_id());
  }

  // .idlepb.FightMode fight_mode = 13;
  if (this->_internal_fight_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fight_mode());
  }

  // bool is_dummy = 14;
  if (this->_internal_is_dummy() != 0) {
    total_size += 1 + 1;
  }

  // int64 combat_power = 17;
  if (this->_internal_combat_power() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_combat_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatePlayerParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreatePlayerParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatePlayerParams::GetClassData() const { return &_class_data_; }


void CreatePlayerParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreatePlayerParams*>(&to_msg);
  auto& from = static_cast<const CreatePlayerParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.CreatePlayerParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (from._internal_has_physics_rank_data()) {
    _this->_internal_mutable_physics_rank_data()->::idlepb::RankData::MergeFrom(
        from._internal_physics_rank_data());
  }
  if (from._internal_has_magic_rank_data()) {
    _this->_internal_mutable_magic_rank_data()->::idlepb::RankData::MergeFrom(
        from._internal_magic_rank_data());
  }
  if (from._internal_has_model_config()) {
    _this->_internal_mutable_model_config()->::idlepb::CharacterModelConfig::MergeFrom(
        from._internal_model_config());
  }
  if (from._internal_has_ability_data()) {
    _this->_internal_mutable_ability_data()->::idlepb::PlayerAbilityData::MergeFrom(
        from._internal_ability_data());
  }
  if (from._internal_has_normal_settings()) {
    _this->_internal_mutable_normal_settings()->::idlepb::RoleNormalSettings::MergeFrom(
        from._internal_normal_settings());
  }
  if (from._internal_has_self_sept_info()) {
    _this->_internal_mutable_self_sept_info()->::idlepb::SelfSeptInfo::MergeFrom(
        from._internal_self_sept_info());
  }
  if (from._internal_has_all_stats_data()) {
    _this->_internal_mutable_all_stats_data()->::idlepb::GameStatsAllModuleData::MergeFrom(
        from._internal_all_stats_data());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_fight_mode() != 0) {
    _this->_internal_set_fight_mode(from._internal_fight_mode());
  }
  if (from._internal_is_dummy() != 0) {
    _this->_internal_set_is_dummy(from._internal_is_dummy());
  }
  if (from._internal_combat_power() != 0) {
    _this->_internal_set_combat_power(from._internal_combat_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatePlayerParams::CopyFrom(const CreatePlayerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.CreatePlayerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlayerParams::IsInitialized() const {
  return true;
}

void CreatePlayerParams::InternalSwap(CreatePlayerParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreatePlayerParams, _impl_.combat_power_)
      + sizeof(CreatePlayerParams::_impl_.combat_power_)
      - PROTOBUF_FIELD_OFFSET(CreatePlayerParams, _impl_.physics_rank_data_)>(
          reinterpret_cast<char*>(&_impl_.physics_rank_data_),
          reinterpret_cast<char*>(&other->_impl_.physics_rank_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePlayerParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[157]);
}

// ===================================================================

class WorldRuntimeData::_Internal {
 public:
};

WorldRuntimeData::WorldRuntimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.WorldRuntimeData)
}
WorldRuntimeData::WorldRuntimeData(const WorldRuntimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorldRuntimeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.world_id_){}
    , decltype(_impl_.world_seconds_){}
    , decltype(_impl_.time_dilation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.world_id_, &from._impl_.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_dilation_) -
    reinterpret_cast<char*>(&_impl_.world_id_)) + sizeof(_impl_.time_dilation_));
  // @@protoc_insertion_point(copy_constructor:idlepb.WorldRuntimeData)
}

inline void WorldRuntimeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.world_id_){uint64_t{0u}}
    , decltype(_impl_.world_seconds_){0}
    , decltype(_impl_.time_dilation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorldRuntimeData::~WorldRuntimeData() {
  // @@protoc_insertion_point(destructor:idlepb.WorldRuntimeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorldRuntimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorldRuntimeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorldRuntimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.WorldRuntimeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_dilation_) -
      reinterpret_cast<char*>(&_impl_.world_id_)) + sizeof(_impl_.time_dilation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldRuntimeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float world_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.world_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float time_dilation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.time_dilation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorldRuntimeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.WorldRuntimeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 world_id = 1;
  if (this->_internal_world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_world_id(), target);
  }

  // float world_seconds = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_seconds = this->_internal_world_seconds();
  uint32_t raw_world_seconds;
  memcpy(&raw_world_seconds, &tmp_world_seconds, sizeof(tmp_world_seconds));
  if (raw_world_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_world_seconds(), target);
  }

  // float time_dilation = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time_dilation = this->_internal_time_dilation();
  uint32_t raw_time_dilation;
  memcpy(&raw_time_dilation, &tmp_time_dilation, sizeof(tmp_time_dilation));
  if (raw_time_dilation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_time_dilation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.WorldRuntimeData)
  return target;
}

size_t WorldRuntimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.WorldRuntimeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 world_id = 1;
  if (this->_internal_world_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_world_id());
  }

  // float world_seconds = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_seconds = this->_internal_world_seconds();
  uint32_t raw_world_seconds;
  memcpy(&raw_world_seconds, &tmp_world_seconds, sizeof(tmp_world_seconds));
  if (raw_world_seconds != 0) {
    total_size += 1 + 4;
  }

  // float time_dilation = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time_dilation = this->_internal_time_dilation();
  uint32_t raw_time_dilation;
  memcpy(&raw_time_dilation, &tmp_time_dilation, sizeof(tmp_time_dilation));
  if (raw_time_dilation != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorldRuntimeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorldRuntimeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorldRuntimeData::GetClassData() const { return &_class_data_; }


void WorldRuntimeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorldRuntimeData*>(&to_msg);
  auto& from = static_cast<const WorldRuntimeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.WorldRuntimeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_world_id() != 0) {
    _this->_internal_set_world_id(from._internal_world_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_seconds = from._internal_world_seconds();
  uint32_t raw_world_seconds;
  memcpy(&raw_world_seconds, &tmp_world_seconds, sizeof(tmp_world_seconds));
  if (raw_world_seconds != 0) {
    _this->_internal_set_world_seconds(from._internal_world_seconds());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time_dilation = from._internal_time_dilation();
  uint32_t raw_time_dilation;
  memcpy(&raw_time_dilation, &tmp_time_dilation, sizeof(tmp_time_dilation));
  if (raw_time_dilation != 0) {
    _this->_internal_set_time_dilation(from._internal_time_dilation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorldRuntimeData::CopyFrom(const WorldRuntimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.WorldRuntimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldRuntimeData::IsInitialized() const {
  return true;
}

void WorldRuntimeData::InternalSwap(WorldRuntimeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorldRuntimeData, _impl_.time_dilation_)
      + sizeof(WorldRuntimeData::_impl_.time_dilation_)
      - PROTOBUF_FIELD_OFFSET(WorldRuntimeData, _impl_.world_id_)>(
          reinterpret_cast<char*>(&_impl_.world_id_),
          reinterpret_cast<char*>(&other->_impl_.world_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldRuntimeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[158]);
}

// ===================================================================

class NotifyGiftPackageResult::_Internal {
 public:
};

NotifyGiftPackageResult::NotifyGiftPackageResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.NotifyGiftPackageResult)
}
NotifyGiftPackageResult::NotifyGiftPackageResult(const NotifyGiftPackageResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyGiftPackageResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.config_id_){from._impl_.config_id_}
    , /*decltype(_impl_._config_id_cached_byte_size_)*/{0}
    , decltype(_impl_.gift_item_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gift_item_id_ = from._impl_.gift_item_id_;
  // @@protoc_insertion_point(copy_constructor:idlepb.NotifyGiftPackageResult)
}

inline void NotifyGiftPackageResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.config_id_){arena}
    , /*decltype(_impl_._config_id_cached_byte_size_)*/{0}
    , decltype(_impl_.gift_item_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NotifyGiftPackageResult::~NotifyGiftPackageResult() {
  // @@protoc_insertion_point(destructor:idlepb.NotifyGiftPackageResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyGiftPackageResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.config_id_.~RepeatedField();
}

void NotifyGiftPackageResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyGiftPackageResult::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.NotifyGiftPackageResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.config_id_.Clear();
  _impl_.gift_item_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyGiftPackageResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idlepb.SimpleItemData items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 gift_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gift_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 config_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_config_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_config_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyGiftPackageResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.NotifyGiftPackageResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idlepb.SimpleItemData items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 gift_item_id = 2;
  if (this->_internal_gift_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_gift_item_id(), target);
  }

  // repeated int32 config_id = 6;
  {
    int byte_size = _impl_._config_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_config_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.NotifyGiftPackageResult)
  return target;
}

size_t NotifyGiftPackageResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.NotifyGiftPackageResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.SimpleItemData items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 config_id = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.config_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._config_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 gift_item_id = 2;
  if (this->_internal_gift_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gift_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyGiftPackageResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyGiftPackageResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyGiftPackageResult::GetClassData() const { return &_class_data_; }


void NotifyGiftPackageResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyGiftPackageResult*>(&to_msg);
  auto& from = static_cast<const NotifyGiftPackageResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.NotifyGiftPackageResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_impl_.config_id_.MergeFrom(from._impl_.config_id_);
  if (from._internal_gift_item_id() != 0) {
    _this->_internal_set_gift_item_id(from._internal_gift_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyGiftPackageResult::CopyFrom(const NotifyGiftPackageResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.NotifyGiftPackageResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGiftPackageResult::IsInitialized() const {
  return true;
}

void NotifyGiftPackageResult::InternalSwap(NotifyGiftPackageResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  _impl_.config_id_.InternalSwap(&other->_impl_.config_id_);
  swap(_impl_.gift_item_id_, other->_impl_.gift_item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyGiftPackageResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[159]);
}

// ===================================================================

class NotifyUsePillProperty::_Internal {
 public:
};

NotifyUsePillProperty::NotifyUsePillProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.NotifyUsePillProperty)
}
NotifyUsePillProperty::NotifyUsePillProperty(const NotifyUsePillProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyUsePillProperty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.property_type_){}
    , decltype(_impl_.property_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.property_num_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.property_num_));
  // @@protoc_insertion_point(copy_constructor:idlepb.NotifyUsePillProperty)
}

inline void NotifyUsePillProperty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0}
    , decltype(_impl_.num_){0}
    , decltype(_impl_.property_type_){0}
    , decltype(_impl_.property_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NotifyUsePillProperty::~NotifyUsePillProperty() {
  // @@protoc_insertion_point(destructor:idlepb.NotifyUsePillProperty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyUsePillProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NotifyUsePillProperty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyUsePillProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.NotifyUsePillProperty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.property_num_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.property_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyUsePillProperty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 property_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.property_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float property_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.property_num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyUsePillProperty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.NotifyUsePillProperty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // int32 property_type = 3;
  if (this->_internal_property_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_property_type(), target);
  }

  // float property_num = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_property_num = this->_internal_property_num();
  uint32_t raw_property_num;
  memcpy(&raw_property_num, &tmp_property_num, sizeof(tmp_property_num));
  if (raw_property_num != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_property_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.NotifyUsePillProperty)
  return target;
}

size_t NotifyUsePillProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.NotifyUsePillProperty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
  }

  // int32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  // int32 property_type = 3;
  if (this->_internal_property_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_property_type());
  }

  // float property_num = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_property_num = this->_internal_property_num();
  uint32_t raw_property_num;
  memcpy(&raw_property_num, &tmp_property_num, sizeof(tmp_property_num));
  if (raw_property_num != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyUsePillProperty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyUsePillProperty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyUsePillProperty::GetClassData() const { return &_class_data_; }


void NotifyUsePillProperty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyUsePillProperty*>(&to_msg);
  auto& from = static_cast<const NotifyUsePillProperty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.NotifyUsePillProperty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_property_type() != 0) {
    _this->_internal_set_property_type(from._internal_property_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_property_num = from._internal_property_num();
  uint32_t raw_property_num;
  memcpy(&raw_property_num, &tmp_property_num, sizeof(tmp_property_num));
  if (raw_property_num != 0) {
    _this->_internal_set_property_num(from._internal_property_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyUsePillProperty::CopyFrom(const NotifyUsePillProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.NotifyUsePillProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUsePillProperty::IsInitialized() const {
  return true;
}

void NotifyUsePillProperty::InternalSwap(NotifyUsePillProperty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotifyUsePillProperty, _impl_.property_num_)
      + sizeof(NotifyUsePillProperty::_impl_.property_num_)
      - PROTOBUF_FIELD_OFFSET(NotifyUsePillProperty, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyUsePillProperty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[160]);
}

// ===================================================================

class EntityCultivationDirData::_Internal {
 public:
};

EntityCultivationDirData::EntityCultivationDirData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.EntityCultivationDirData)
}
EntityCultivationDirData::EntityCultivationDirData(const EntityCultivationDirData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityCultivationDirData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dir_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.layer_){}
    , decltype(_impl_.stage_){}
    , decltype(_impl_.degree_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dir_, &from._impl_.dir_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.degree_) -
    reinterpret_cast<char*>(&_impl_.dir_)) + sizeof(_impl_.degree_));
  // @@protoc_insertion_point(copy_constructor:idlepb.EntityCultivationDirData)
}

inline void EntityCultivationDirData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dir_){0}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.layer_){0}
    , decltype(_impl_.stage_){0}
    , decltype(_impl_.degree_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EntityCultivationDirData::~EntityCultivationDirData() {
  // @@protoc_insertion_point(destructor:idlepb.EntityCultivationDirData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityCultivationDirData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EntityCultivationDirData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityCultivationDirData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.EntityCultivationDirData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.degree_) -
      reinterpret_cast<char*>(&_impl_.dir_)) + sizeof(_impl_.degree_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityCultivationDirData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.CultivationDirection dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dir(static_cast<::idlepb::CultivationDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 layer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 degree = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityCultivationDirData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.EntityCultivationDirData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.CultivationDirection dir = 1;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dir(), target);
  }

  // int32 rank = 2;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_rank(), target);
  }

  // int32 layer = 3;
  if (this->_internal_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_layer(), target);
  }

  // int32 stage = 4;
  if (this->_internal_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_stage(), target);
  }

  // int32 degree = 5;
  if (this->_internal_degree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_degree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.EntityCultivationDirData)
  return target;
}

size_t EntityCultivationDirData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.EntityCultivationDirData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.CultivationDirection dir = 1;
  if (this->_internal_dir() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dir());
  }

  // int32 rank = 2;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  // int32 layer = 3;
  if (this->_internal_layer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_layer());
  }

  // int32 stage = 4;
  if (this->_internal_stage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stage());
  }

  // int32 degree = 5;
  if (this->_internal_degree() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_degree());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityCultivationDirData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityCultivationDirData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityCultivationDirData::GetClassData() const { return &_class_data_; }


void EntityCultivationDirData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityCultivationDirData*>(&to_msg);
  auto& from = static_cast<const EntityCultivationDirData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.EntityCultivationDirData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_layer() != 0) {
    _this->_internal_set_layer(from._internal_layer());
  }
  if (from._internal_stage() != 0) {
    _this->_internal_set_stage(from._internal_stage());
  }
  if (from._internal_degree() != 0) {
    _this->_internal_set_degree(from._internal_degree());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityCultivationDirData::CopyFrom(const EntityCultivationDirData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.EntityCultivationDirData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityCultivationDirData::IsInitialized() const {
  return true;
}

void EntityCultivationDirData::InternalSwap(EntityCultivationDirData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityCultivationDirData, _impl_.degree_)
      + sizeof(EntityCultivationDirData::_impl_.degree_)
      - PROTOBUF_FIELD_OFFSET(EntityCultivationDirData, _impl_.dir_)>(
          reinterpret_cast<char*>(&_impl_.dir_),
          reinterpret_cast<char*>(&other->_impl_.dir_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityCultivationDirData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[161]);
}

// ===================================================================

class EntityCultivationData::_Internal {
 public:
  static const ::idlepb::EntityCultivationDirData& major(const EntityCultivationData* msg);
  static const ::idlepb::EntityCultivationDirData& minor(const EntityCultivationData* msg);
};

const ::idlepb::EntityCultivationDirData&
EntityCultivationData::_Internal::major(const EntityCultivationData* msg) {
  return *msg->_impl_.major_;
}
const ::idlepb::EntityCultivationDirData&
EntityCultivationData::_Internal::minor(const EntityCultivationData* msg) {
  return *msg->_impl_.minor_;
}
EntityCultivationData::EntityCultivationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.EntityCultivationData)
}
EntityCultivationData::EntityCultivationData(const EntityCultivationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityCultivationData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){nullptr}
    , decltype(_impl_.minor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_major()) {
    _this->_impl_.major_ = new ::idlepb::EntityCultivationDirData(*from._impl_.major_);
  }
  if (from._internal_has_minor()) {
    _this->_impl_.minor_ = new ::idlepb::EntityCultivationDirData(*from._impl_.minor_);
  }
  // @@protoc_insertion_point(copy_constructor:idlepb.EntityCultivationData)
}

inline void EntityCultivationData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){nullptr}
    , decltype(_impl_.minor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EntityCultivationData::~EntityCultivationData() {
  // @@protoc_insertion_point(destructor:idlepb.EntityCultivationData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityCultivationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.major_;
  if (this != internal_default_instance()) delete _impl_.minor_;
}

void EntityCultivationData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityCultivationData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.EntityCultivationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.major_ != nullptr) {
    delete _impl_.major_;
  }
  _impl_.major_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.minor_ != nullptr) {
    delete _impl_.minor_;
  }
  _impl_.minor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityCultivationData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idlepb.EntityCultivationDirData major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_major(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .idlepb.EntityCultivationDirData minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_minor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityCultivationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.EntityCultivationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idlepb.EntityCultivationDirData major = 1;
  if (this->_internal_has_major()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::major(this),
        _Internal::major(this).GetCachedSize(), target, stream);
  }

  // .idlepb.EntityCultivationDirData minor = 2;
  if (this->_internal_has_minor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::minor(this),
        _Internal::minor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.EntityCultivationData)
  return target;
}

size_t EntityCultivationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.EntityCultivationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idlepb.EntityCultivationDirData major = 1;
  if (this->_internal_has_major()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.major_);
  }

  // .idlepb.EntityCultivationDirData minor = 2;
  if (this->_internal_has_minor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.minor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityCultivationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityCultivationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityCultivationData::GetClassData() const { return &_class_data_; }


void EntityCultivationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityCultivationData*>(&to_msg);
  auto& from = static_cast<const EntityCultivationData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.EntityCultivationData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_major()) {
    _this->_internal_mutable_major()->::idlepb::EntityCultivationDirData::MergeFrom(
        from._internal_major());
  }
  if (from._internal_has_minor()) {
    _this->_internal_mutable_minor()->::idlepb::EntityCultivationDirData::MergeFrom(
        from._internal_minor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityCultivationData::CopyFrom(const EntityCultivationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.EntityCultivationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityCultivationData::IsInitialized() const {
  return true;
}

void EntityCultivationData::InternalSwap(EntityCultivationData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityCultivationData, _impl_.minor_)
      + sizeof(EntityCultivationData::_impl_.minor_)
      - PROTOBUF_FIELD_OFFSET(EntityCultivationData, _impl_.major_)>(
          reinterpret_cast<char*>(&_impl_.major_),
          reinterpret_cast<char*>(&other->_impl_.major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityCultivationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[162]);
}

// ===================================================================

class SwordPkTopListEntry::_Internal {
 public:
  static const ::idlepb::CharacterModelConfig& role_model(const SwordPkTopListEntry* msg);
};

const ::idlepb::CharacterModelConfig&
SwordPkTopListEntry::_Internal::role_model(const SwordPkTopListEntry* msg) {
  return *msg->_impl_.role_model_;
}
SwordPkTopListEntry::SwordPkTopListEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SwordPkTopListEntry)
}
SwordPkTopListEntry::SwordPkTopListEntry(const SwordPkTopListEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwordPkTopListEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.role_model_){nullptr}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.score_update_ticks_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.combat_power_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_role_model()) {
    _this->_impl_.role_model_ = new ::idlepb::CharacterModelConfig(*from._impl_.role_model_);
  }
  ::memcpy(&_impl_.role_id_, &from._impl_.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.combat_power_) -
    reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.combat_power_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SwordPkTopListEntry)
}

inline void SwordPkTopListEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_name_){}
    , decltype(_impl_.role_model_){nullptr}
    , decltype(_impl_.role_id_){int64_t{0}}
    , decltype(_impl_.score_update_ticks_){int64_t{0}}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.combat_power_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SwordPkTopListEntry::~SwordPkTopListEntry() {
  // @@protoc_insertion_point(destructor:idlepb.SwordPkTopListEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwordPkTopListEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.role_model_;
}

void SwordPkTopListEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwordPkTopListEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SwordPkTopListEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.role_model_ != nullptr) {
    delete _impl_.role_model_;
  }
  _impl_.role_model_ = nullptr;
  ::memset(&_impl_.role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.combat_power_) -
      reinterpret_cast<char*>(&_impl_.role_id_)) + sizeof(_impl_.combat_power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwordPkTopListEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idlepb.SwordPkTopListEntry.role_name"));
        } else
          goto handle_unusual;
        continue;
      // .idlepb.CharacterModelConfig role_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 score_update_ticks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.score_update_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rank = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 combat_power = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.combat_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwordPkTopListEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SwordPkTopListEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idlepb.SwordPkTopListEntry.role_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_name(), target);
  }

  // .idlepb.CharacterModelConfig role_model = 3;
  if (this->_internal_has_role_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::role_model(this),
        _Internal::role_model(this).GetCachedSize(), target, stream);
  }

  // int32 score = 4;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_score(), target);
  }

  // int64 score_update_ticks = 5;
  if (this->_internal_score_update_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_score_update_ticks(), target);
  }

  // int32 rank = 6;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_rank(), target);
  }

  // int64 combat_power = 7;
  if (this->_internal_combat_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_combat_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SwordPkTopListEntry)
  return target;
}

size_t SwordPkTopListEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SwordPkTopListEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .idlepb.CharacterModelConfig role_model = 3;
  if (this->_internal_has_role_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.role_model_);
  }

  // int64 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_role_id());
  }

  // int64 score_update_ticks = 5;
  if (this->_internal_score_update_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_score_update_ticks());
  }

  // int32 score = 4;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
  }

  // int32 rank = 6;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  // int64 combat_power = 7;
  if (this->_internal_combat_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_combat_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwordPkTopListEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwordPkTopListEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwordPkTopListEntry::GetClassData() const { return &_class_data_; }


void SwordPkTopListEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwordPkTopListEntry*>(&to_msg);
  auto& from = static_cast<const SwordPkTopListEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SwordPkTopListEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (from._internal_has_role_model()) {
    _this->_internal_mutable_role_model()->::idlepb::CharacterModelConfig::MergeFrom(
        from._internal_role_model());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_score_update_ticks() != 0) {
    _this->_internal_set_score_update_ticks(from._internal_score_update_ticks());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_combat_power() != 0) {
    _this->_internal_set_combat_power(from._internal_combat_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwordPkTopListEntry::CopyFrom(const SwordPkTopListEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SwordPkTopListEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwordPkTopListEntry::IsInitialized() const {
  return true;
}

void SwordPkTopListEntry::InternalSwap(SwordPkTopListEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwordPkTopListEntry, _impl_.combat_power_)
      + sizeof(SwordPkTopListEntry::_impl_.combat_power_)
      - PROTOBUF_FIELD_OFFSET(SwordPkTopListEntry, _impl_.role_model_)>(
          reinterpret_cast<char*>(&_impl_.role_model_),
          reinterpret_cast<char*>(&other->_impl_.role_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwordPkTopListEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[163]);
}

// ===================================================================

class SwordPkGlobalSaveData::_Internal {
 public:
};

SwordPkGlobalSaveData::SwordPkGlobalSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idlepb.SwordPkGlobalSaveData)
}
SwordPkGlobalSaveData::SwordPkGlobalSaveData(const SwordPkGlobalSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwordPkGlobalSaveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.top_list_){from._impl_.top_list_}
    , decltype(_impl_.begin_local_ticks_){}
    , decltype(_impl_.round_num_){}
    , decltype(_impl_.is_over_){}
    , decltype(_impl_.end_local_ticks_){}
    , decltype(_impl_.next_daily_reward_local_ticks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.begin_local_ticks_, &from._impl_.begin_local_ticks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.next_daily_reward_local_ticks_) -
    reinterpret_cast<char*>(&_impl_.begin_local_ticks_)) + sizeof(_impl_.next_daily_reward_local_ticks_));
  // @@protoc_insertion_point(copy_constructor:idlepb.SwordPkGlobalSaveData)
}

inline void SwordPkGlobalSaveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.top_list_){arena}
    , decltype(_impl_.begin_local_ticks_){int64_t{0}}
    , decltype(_impl_.round_num_){0}
    , decltype(_impl_.is_over_){false}
    , decltype(_impl_.end_local_ticks_){int64_t{0}}
    , decltype(_impl_.next_daily_reward_local_ticks_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwordPkGlobalSaveData::~SwordPkGlobalSaveData() {
  // @@protoc_insertion_point(destructor:idlepb.SwordPkGlobalSaveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwordPkGlobalSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.top_list_.~RepeatedPtrField();
}

void SwordPkGlobalSaveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwordPkGlobalSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:idlepb.SwordPkGlobalSaveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.top_list_.Clear();
  ::memset(&_impl_.begin_local_ticks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.next_daily_reward_local_ticks_) -
      reinterpret_cast<char*>(&_impl_.begin_local_ticks_)) + sizeof(_impl_.next_daily_reward_local_ticks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwordPkGlobalSaveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 round_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.round_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 begin_local_ticks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.begin_local_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_local_ticks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.end_local_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_over = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_over_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 next_daily_reward_local_ticks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.next_daily_reward_local_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .idlepb.SwordPkTopListEntry top_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwordPkGlobalSaveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idlepb.SwordPkGlobalSaveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 round_num = 1;
  if (this->_internal_round_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_round_num(), target);
  }

  // int64 begin_local_ticks = 2;
  if (this->_internal_begin_local_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_begin_local_ticks(), target);
  }

  // int64 end_local_ticks = 3;
  if (this->_internal_end_local_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_end_local_ticks(), target);
  }

  // bool is_over = 4;
  if (this->_internal_is_over() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_over(), target);
  }

  // int64 next_daily_reward_local_ticks = 5;
  if (this->_internal_next_daily_reward_local_ticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_next_daily_reward_local_ticks(), target);
  }

  // repeated .idlepb.SwordPkTopListEntry top_list = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_top_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_top_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idlepb.SwordPkGlobalSaveData)
  return target;
}

size_t SwordPkGlobalSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idlepb.SwordPkGlobalSaveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idlepb.SwordPkTopListEntry top_list = 6;
  total_size += 1UL * this->_internal_top_list_size();
  for (const auto& msg : this->_impl_.top_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 begin_local_ticks = 2;
  if (this->_internal_begin_local_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_local_ticks());
  }

  // int32 round_num = 1;
  if (this->_internal_round_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_round_num());
  }

  // bool is_over = 4;
  if (this->_internal_is_over() != 0) {
    total_size += 1 + 1;
  }

  // int64 end_local_ticks = 3;
  if (this->_internal_end_local_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_local_ticks());
  }

  // int64 next_daily_reward_local_ticks = 5;
  if (this->_internal_next_daily_reward_local_ticks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_daily_reward_local_ticks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwordPkGlobalSaveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwordPkGlobalSaveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwordPkGlobalSaveData::GetClassData() const { return &_class_data_; }


void SwordPkGlobalSaveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwordPkGlobalSaveData*>(&to_msg);
  auto& from = static_cast<const SwordPkGlobalSaveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idlepb.SwordPkGlobalSaveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.top_list_.MergeFrom(from._impl_.top_list_);
  if (from._internal_begin_local_ticks() != 0) {
    _this->_internal_set_begin_local_ticks(from._internal_begin_local_ticks());
  }
  if (from._internal_round_num() != 0) {
    _this->_internal_set_round_num(from._internal_round_num());
  }
  if (from._internal_is_over() != 0) {
    _this->_internal_set_is_over(from._internal_is_over());
  }
  if (from._internal_end_local_ticks() != 0) {
    _this->_internal_set_end_local_ticks(from._internal_end_local_ticks());
  }
  if (from._internal_next_daily_reward_local_ticks() != 0) {
    _this->_internal_set_next_daily_reward_local_ticks(from._internal_next_daily_reward_local_ticks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwordPkGlobalSaveData::CopyFrom(const SwordPkGlobalSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idlepb.SwordPkGlobalSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwordPkGlobalSaveData::IsInitialized() const {
  return true;
}

void SwordPkGlobalSaveData::InternalSwap(SwordPkGlobalSaveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.top_list_.InternalSwap(&other->_impl_.top_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwordPkGlobalSaveData, _impl_.next_daily_reward_local_ticks_)
      + sizeof(SwordPkGlobalSaveData::_impl_.next_daily_reward_local_ticks_)
      - PROTOBUF_FIELD_OFFSET(SwordPkGlobalSaveData, _impl_.begin_local_ticks_)>(
          reinterpret_cast<char*>(&_impl_.begin_local_ticks_),
          reinterpret_cast<char*>(&other->_impl_.begin_local_ticks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwordPkGlobalSaveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[164]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace idlepb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::idlepb::Int64Data*
Arena::CreateMaybeMessage< ::idlepb::Int64Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::Int64Data >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::Vector2*
Arena::CreateMaybeMessage< ::idlepb::Vector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::Vector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::Vector3*
Arena::CreateMaybeMessage< ::idlepb::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::Color*
Arena::CreateMaybeMessage< ::idlepb::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::Int64Pair*
Arena::CreateMaybeMessage< ::idlepb::Int64Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::Int64Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::StringKeyInt32ValueEntry*
Arena::CreateMaybeMessage< ::idlepb::StringKeyInt32ValueEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::StringKeyInt32ValueEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::MapValueInt32*
Arena::CreateMaybeMessage< ::idlepb::MapValueInt32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::MapValueInt32 >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::StringInt64Pair*
Arena::CreateMaybeMessage< ::idlepb::StringInt64Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::StringInt64Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AbilityEffectData*
Arena::CreateMaybeMessage< ::idlepb::AbilityEffectData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AbilityEffectData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::GameStatData*
Arena::CreateMaybeMessage< ::idlepb::GameStatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::GameStatData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::GameStatsData*
Arena::CreateMaybeMessage< ::idlepb::GameStatsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::GameStatsData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::GameStatsModuleData*
Arena::CreateMaybeMessage< ::idlepb::GameStatsModuleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::GameStatsModuleData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::GameStatsAllModuleData*
Arena::CreateMaybeMessage< ::idlepb::GameStatsAllModuleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::GameStatsAllModuleData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleAttribute*
Arena::CreateMaybeMessage< ::idlepb::RoleAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RankData*
Arena::CreateMaybeMessage< ::idlepb::RankData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RankData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::BreathingReward*
Arena::CreateMaybeMessage< ::idlepb::BreathingReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::BreathingReward >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CommonCultivationData*
Arena::CreateMaybeMessage< ::idlepb::CommonCultivationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CommonCultivationData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CultivationData*
Arena::CreateMaybeMessage< ::idlepb::CultivationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CultivationData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleDailyCounterEntry*
Arena::CreateMaybeMessage< ::idlepb::RoleDailyCounterEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleDailyCounterEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleDailyCounter*
Arena::CreateMaybeMessage< ::idlepb::RoleDailyCounter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleDailyCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleWeeklyCounterEntry*
Arena::CreateMaybeMessage< ::idlepb::RoleWeeklyCounterEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleWeeklyCounterEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleWeeklyCounter*
Arena::CreateMaybeMessage< ::idlepb::RoleWeeklyCounter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleWeeklyCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CurrencyEntry*
Arena::CreateMaybeMessage< ::idlepb::CurrencyEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CurrencyEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CurrencyData*
Arena::CreateMaybeMessage< ::idlepb::CurrencyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CurrencyData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::EquipPerkEntry*
Arena::CreateMaybeMessage< ::idlepb::EquipPerkEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::EquipPerkEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SkillEquipmentAttributes*
Arena::CreateMaybeMessage< ::idlepb::SkillEquipmentAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SkillEquipmentAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SkillEquipmentData*
Arena::CreateMaybeMessage< ::idlepb::SkillEquipmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SkillEquipmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CollectionEntry*
Arena::CreateMaybeMessage< ::idlepb::CollectionEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CollectionEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::EquipmentData*
Arena::CreateMaybeMessage< ::idlepb::EquipmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::EquipmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ItemData*
Arena::CreateMaybeMessage< ::idlepb::ItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SimpleItemData*
Arena::CreateMaybeMessage< ::idlepb::SimpleItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SimpleItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::TemporaryPackageItem*
Arena::CreateMaybeMessage< ::idlepb::TemporaryPackageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::TemporaryPackageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ArenaExplorationStatisticalItem*
Arena::CreateMaybeMessage< ::idlepb::ArenaExplorationStatisticalItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ArenaExplorationStatisticalItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ShopItemBase*
Arena::CreateMaybeMessage< ::idlepb::ShopItemBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ShopItemBase >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ShopItem*
Arena::CreateMaybeMessage< ::idlepb::ShopItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ShopItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::DeluxeShopItem*
Arena::CreateMaybeMessage< ::idlepb::DeluxeShopItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::DeluxeShopItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleVipShopData*
Arena::CreateMaybeMessage< ::idlepb::RoleVipShopData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleVipShopData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CharacterModelConfig*
Arena::CreateMaybeMessage< ::idlepb::CharacterModelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CharacterModelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleAppearanceShopData*
Arena::CreateMaybeMessage< ::idlepb::RoleAppearanceShopData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleAppearanceShopData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AppearanceCollection*
Arena::CreateMaybeMessage< ::idlepb::AppearanceCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AppearanceCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleAppearanceData*
Arena::CreateMaybeMessage< ::idlepb::RoleAppearanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleAppearanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AlchemyPackageItem*
Arena::CreateMaybeMessage< ::idlepb::AlchemyPackageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AlchemyPackageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AlchemyMakeData*
Arena::CreateMaybeMessage< ::idlepb::AlchemyMakeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AlchemyMakeData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AlchemyRecipeData*
Arena::CreateMaybeMessage< ::idlepb::AlchemyRecipeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AlchemyRecipeData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleAlchemyData*
Arena::CreateMaybeMessage< ::idlepb::RoleAlchemyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleAlchemyData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ForgePackageItem*
Arena::CreateMaybeMessage< ::idlepb::ForgePackageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ForgePackageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ForgeMakeData*
Arena::CreateMaybeMessage< ::idlepb::ForgeMakeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ForgeMakeData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ForgeRecipeData*
Arena::CreateMaybeMessage< ::idlepb::ForgeRecipeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ForgeRecipeData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::LostEquipmentData*
Arena::CreateMaybeMessage< ::idlepb::LostEquipmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::LostEquipmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleForgeData*
Arena::CreateMaybeMessage< ::idlepb::RoleForgeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleForgeData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PillPropertyData*
Arena::CreateMaybeMessage< ::idlepb::PillPropertyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PillPropertyData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::GongFaData*
Arena::CreateMaybeMessage< ::idlepb::GongFaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::GongFaData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleGongFaData*
Arena::CreateMaybeMessage< ::idlepb::RoleGongFaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleGongFaData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CollectionEntrySaveData*
Arena::CreateMaybeMessage< ::idlepb::CollectionEntrySaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CollectionEntrySaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CommonCollectionPieceData*
Arena::CreateMaybeMessage< ::idlepb::CommonCollectionPieceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CommonCollectionPieceData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CollectionZoneActiveAwardData*
Arena::CreateMaybeMessage< ::idlepb::CollectionZoneActiveAwardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CollectionZoneActiveAwardData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleCollectionSaveData*
Arena::CreateMaybeMessage< ::idlepb::RoleCollectionSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleCollectionSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::FuZengTuple*
Arena::CreateMaybeMessage< ::idlepb::FuZengTuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::FuZengTuple >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::FuZengData*
Arena::CreateMaybeMessage< ::idlepb::FuZengData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::FuZengData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleFuZengData*
Arena::CreateMaybeMessage< ::idlepb::RoleFuZengData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleFuZengData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleFightModeData*
Arena::CreateMaybeMessage< ::idlepb::RoleFightModeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleFightModeData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleNormalSettings*
Arena::CreateMaybeMessage< ::idlepb::RoleNormalSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleNormalSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleData*
Arena::CreateMaybeMessage< ::idlepb::RoleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SimpleAbilityData*
Arena::CreateMaybeMessage< ::idlepb::SimpleAbilityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SimpleAbilityData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SimpleGongFaData*
Arena::CreateMaybeMessage< ::idlepb::SimpleGongFaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SimpleGongFaData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleInfo*
Arena::CreateMaybeMessage< ::idlepb::RoleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleInventoryData*
Arena::CreateMaybeMessage< ::idlepb::RoleInventoryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleInventoryData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleTemporaryPackageData*
Arena::CreateMaybeMessage< ::idlepb::RoleTemporaryPackageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleTemporaryPackageData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleArenaExplorationStatisticalData*
Arena::CreateMaybeMessage< ::idlepb::RoleArenaExplorationStatisticalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleArenaExplorationStatisticalData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::QuestProgress*
Arena::CreateMaybeMessage< ::idlepb::QuestProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::QuestProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleQuestData*
Arena::CreateMaybeMessage< ::idlepb::RoleQuestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleQuestData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleShopData*
Arena::CreateMaybeMessage< ::idlepb::RoleShopData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleShopData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleDeluxeShopData*
Arena::CreateMaybeMessage< ::idlepb::RoleDeluxeShopData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleDeluxeShopData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::MailAttachment*
Arena::CreateMaybeMessage< ::idlepb::MailAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::MailAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::Mail*
Arena::CreateMaybeMessage< ::idlepb::Mail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::Mail >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleMailData*
Arena::CreateMaybeMessage< ::idlepb::RoleMailData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleMailData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::OfflineAwardSummary*
Arena::CreateMaybeMessage< ::idlepb::OfflineAwardSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::OfflineAwardSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleOfflineData*
Arena::CreateMaybeMessage< ::idlepb::RoleOfflineData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleOfflineData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PillElixirData*
Arena::CreateMaybeMessage< ::idlepb::PillElixirData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PillElixirData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RolePillElixirData*
Arena::CreateMaybeMessage< ::idlepb::RolePillElixirData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RolePillElixirData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AbilityEffectDefData*
Arena::CreateMaybeMessage< ::idlepb::AbilityEffectDefData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AbilityEffectDefData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AbilityData*
Arena::CreateMaybeMessage< ::idlepb::AbilityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AbilityData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PlayerAbilityData*
Arena::CreateMaybeMessage< ::idlepb::PlayerAbilityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PlayerAbilityData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleZasData*
Arena::CreateMaybeMessage< ::idlepb::RoleZasData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleZasData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AbilityPKResult*
Arena::CreateMaybeMessage< ::idlepb::AbilityPKResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AbilityPKResult >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::AbilityActiveResult*
Arena::CreateMaybeMessage< ::idlepb::AbilityActiveResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::AbilityActiveResult >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ShanhetuItem*
Arena::CreateMaybeMessage< ::idlepb::ShanhetuItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ShanhetuItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ShanhetuRecord*
Arena::CreateMaybeMessage< ::idlepb::ShanhetuRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ShanhetuRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ShanhetuBlock*
Arena::CreateMaybeMessage< ::idlepb::ShanhetuBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ShanhetuBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ShanhetuBlockRow*
Arena::CreateMaybeMessage< ::idlepb::ShanhetuBlockRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ShanhetuBlockRow >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ShanhetuMap*
Arena::CreateMaybeMessage< ::idlepb::ShanhetuMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ShanhetuMap >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleShanhetuData*
Arena::CreateMaybeMessage< ::idlepb::RoleShanhetuData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleShanhetuData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleLeaderboardData*
Arena::CreateMaybeMessage< ::idlepb::RoleLeaderboardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleLeaderboardData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleMonsterTowerData*
Arena::CreateMaybeMessage< ::idlepb::RoleMonsterTowerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleMonsterTowerData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleDungeonKillAllData*
Arena::CreateMaybeMessage< ::idlepb::RoleDungeonKillAllData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleDungeonKillAllData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleDungeonSurviveData*
Arena::CreateMaybeMessage< ::idlepb::RoleDungeonSurviveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleDungeonSurviveData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::BossInvasionRewardEntry*
Arena::CreateMaybeMessage< ::idlepb::BossInvasionRewardEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::BossInvasionRewardEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::BossInvasionKillRewardData*
Arena::CreateMaybeMessage< ::idlepb::BossInvasionKillRewardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::BossInvasionKillRewardData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::BossInvasionDamageRewardData*
Arena::CreateMaybeMessage< ::idlepb::BossInvasionDamageRewardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::BossInvasionDamageRewardData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleBossInvasionData*
Arena::CreateMaybeMessage< ::idlepb::RoleBossInvasionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleBossInvasionData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleMasiveData*
Arena::CreateMaybeMessage< ::idlepb::RoleMasiveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleMasiveData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CheckTask*
Arena::CreateMaybeMessage< ::idlepb::CheckTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CheckTask >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleChecklistData*
Arena::CreateMaybeMessage< ::idlepb::RoleChecklistData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleChecklistData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleCommonItemExchangeData*
Arena::CreateMaybeMessage< ::idlepb::RoleCommonItemExchangeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleCommonItemExchangeData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleTreasuryChestData*
Arena::CreateMaybeMessage< ::idlepb::RoleTreasuryChestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleTreasuryChestData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleTreasuryGachaData*
Arena::CreateMaybeMessage< ::idlepb::RoleTreasuryGachaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleTreasuryGachaData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::TreasuryShopItem*
Arena::CreateMaybeMessage< ::idlepb::TreasuryShopItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::TreasuryShopItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleTreasuryShopData*
Arena::CreateMaybeMessage< ::idlepb::RoleTreasuryShopData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleTreasuryShopData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleTreasurySaveData*
Arena::CreateMaybeMessage< ::idlepb::RoleTreasurySaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleTreasurySaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ArenaCheckListData*
Arena::CreateMaybeMessage< ::idlepb::ArenaCheckListData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ArenaCheckListData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ArenaCheckListRewardData*
Arena::CreateMaybeMessage< ::idlepb::ArenaCheckListRewardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ArenaCheckListRewardData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleArenaCheckListData*
Arena::CreateMaybeMessage< ::idlepb::RoleArenaCheckListData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleArenaCheckListData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleSeptInviteEntry*
Arena::CreateMaybeMessage< ::idlepb::RoleSeptInviteEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleSeptInviteEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SeptQuest*
Arena::CreateMaybeMessage< ::idlepb::SeptQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SeptQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleSeptQuestData*
Arena::CreateMaybeMessage< ::idlepb::RoleSeptQuestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleSeptQuestData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleSeptShopData*
Arena::CreateMaybeMessage< ::idlepb::RoleSeptShopData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleSeptShopData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleSeptData*
Arena::CreateMaybeMessage< ::idlepb::RoleSeptData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleSeptData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SeptDemonWorldData*
Arena::CreateMaybeMessage< ::idlepb::SeptDemonWorldData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SeptDemonWorldData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SimpleCounter*
Arena::CreateMaybeMessage< ::idlepb::SimpleCounter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SimpleCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::FunctionCounter*
Arena::CreateMaybeMessage< ::idlepb::FunctionCounter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::FunctionCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleLifeCounterData*
Arena::CreateMaybeMessage< ::idlepb::RoleLifeCounterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleLifeCounterData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::FarmlandManagementInfo*
Arena::CreateMaybeMessage< ::idlepb::FarmlandManagementInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::FarmlandManagementInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::FarmlandPlantData*
Arena::CreateMaybeMessage< ::idlepb::FarmlandPlantData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::FarmlandPlantData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleFarmlandData*
Arena::CreateMaybeMessage< ::idlepb::RoleFarmlandData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleFarmlandData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleAvatarData*
Arena::CreateMaybeMessage< ::idlepb::RoleAvatarData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleAvatarData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::BiographyRoleLog*
Arena::CreateMaybeMessage< ::idlepb::BiographyRoleLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::BiographyRoleLog >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleBiographyData*
Arena::CreateMaybeMessage< ::idlepb::RoleBiographyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleBiographyData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SimpleRoleInfo*
Arena::CreateMaybeMessage< ::idlepb::SimpleRoleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SimpleRoleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ChatMessage*
Arena::CreateMaybeMessage< ::idlepb::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::PrivateChatRecord*
Arena::CreateMaybeMessage< ::idlepb::PrivateChatRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::PrivateChatRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RolePrivateChatRecord*
Arena::CreateMaybeMessage< ::idlepb::RolePrivateChatRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RolePrivateChatRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ChatData*
Arena::CreateMaybeMessage< ::idlepb::ChatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ChatData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::FriendListItem*
Arena::CreateMaybeMessage< ::idlepb::FriendListItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::FriendListItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleFriendData*
Arena::CreateMaybeMessage< ::idlepb::RoleFriendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleFriendData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleOfflineFunctionData*
Arena::CreateMaybeMessage< ::idlepb::RoleOfflineFunctionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleOfflineFunctionData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::ServerCounterData*
Arena::CreateMaybeMessage< ::idlepb::ServerCounterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::ServerCounterData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SocialFunctionCommonSaveData*
Arena::CreateMaybeMessage< ::idlepb::SocialFunctionCommonSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SocialFunctionCommonSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleSaveData*
Arena::CreateMaybeMessage< ::idlepb::RoleSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::BattleHistoryRecord*
Arena::CreateMaybeMessage< ::idlepb::BattleHistoryRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::BattleHistoryRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::BattleRoleInfo*
Arena::CreateMaybeMessage< ::idlepb::BattleRoleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::BattleRoleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::BattleInfo*
Arena::CreateMaybeMessage< ::idlepb::BattleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::BattleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::BattleHistory*
Arena::CreateMaybeMessage< ::idlepb::BattleHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::BattleHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleBattleInfo*
Arena::CreateMaybeMessage< ::idlepb::RoleBattleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleBattleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::RoleBattleHistorySaveData*
Arena::CreateMaybeMessage< ::idlepb::RoleBattleHistorySaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::RoleBattleHistorySaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CompressedData*
Arena::CreateMaybeMessage< ::idlepb::CompressedData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CompressedData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::DoBreathingExerciseResult*
Arena::CreateMaybeMessage< ::idlepb::DoBreathingExerciseResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::DoBreathingExerciseResult >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SystemNoticeParams*
Arena::CreateMaybeMessage< ::idlepb::SystemNoticeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SystemNoticeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::DropItem*
Arena::CreateMaybeMessage< ::idlepb::DropItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::DropItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::BiographyEventLeaderboardItem*
Arena::CreateMaybeMessage< ::idlepb::BiographyEventLeaderboardItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::BiographyEventLeaderboardItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::BiographyEventLeaderboardList*
Arena::CreateMaybeMessage< ::idlepb::BiographyEventLeaderboardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::BiographyEventLeaderboardList >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::LeaderboardListItem*
Arena::CreateMaybeMessage< ::idlepb::LeaderboardListItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::LeaderboardListItem >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SeptDataOnLeaderboard*
Arena::CreateMaybeMessage< ::idlepb::SeptDataOnLeaderboard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SeptDataOnLeaderboard >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::LeaderboardList*
Arena::CreateMaybeMessage< ::idlepb::LeaderboardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::LeaderboardList >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::LeaderboardSaveData*
Arena::CreateMaybeMessage< ::idlepb::LeaderboardSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::LeaderboardSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SeptDemonDamageHistoryEntry*
Arena::CreateMaybeMessage< ::idlepb::SeptDemonDamageHistoryEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SeptDemonDamageHistoryEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SeptDemonDamageHistoryData*
Arena::CreateMaybeMessage< ::idlepb::SeptDemonDamageHistoryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SeptDemonDamageHistoryData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SelfSeptInfo*
Arena::CreateMaybeMessage< ::idlepb::SelfSeptInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SelfSeptInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::CreatePlayerParams*
Arena::CreateMaybeMessage< ::idlepb::CreatePlayerParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::CreatePlayerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::WorldRuntimeData*
Arena::CreateMaybeMessage< ::idlepb::WorldRuntimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::WorldRuntimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::NotifyGiftPackageResult*
Arena::CreateMaybeMessage< ::idlepb::NotifyGiftPackageResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::NotifyGiftPackageResult >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::NotifyUsePillProperty*
Arena::CreateMaybeMessage< ::idlepb::NotifyUsePillProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::NotifyUsePillProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::EntityCultivationDirData*
Arena::CreateMaybeMessage< ::idlepb::EntityCultivationDirData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::EntityCultivationDirData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::EntityCultivationData*
Arena::CreateMaybeMessage< ::idlepb::EntityCultivationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::EntityCultivationData >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SwordPkTopListEntry*
Arena::CreateMaybeMessage< ::idlepb::SwordPkTopListEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SwordPkTopListEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::idlepb::SwordPkGlobalSaveData*
Arena::CreateMaybeMessage< ::idlepb::SwordPkGlobalSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idlepb::SwordPkGlobalSaveData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
