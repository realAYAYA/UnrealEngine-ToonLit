// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: defines.proto

#include "defines.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace idlezt {
}  // namespace idlezt
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_defines_2eproto[44];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_defines_2eproto = nullptr;
const uint32_t TableStruct_defines_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_defines_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rdefines.proto\022\006idlezt*m\n\013ItemQuality\022\013"
  "\n\007EQ_None\020\000\022\014\n\010EQ_White\020\001\022\014\n\010EQ_Green\020\002\022"
  "\013\n\007EQ_Blue\020\003\022\r\n\tEQ_Purple\020\004\022\r\n\tEQ_Orange"
  "\020\005\022\n\n\006EQ_Red\020\006*\215\001\n\014ItemShowType\022\025\n\021ItemS"
  "howType_None\020\000\022\032\n\026ItemShowType_Equipment"
  "\020\001\022\025\n\021ItemShowType_Pill\020\002\022\031\n\025ItemShowTyp"
  "e_Material\020\003\022\030\n\024ItemShowType_Special\020\004*\276"
  "\004\n\010ItemType\022\021\n\rItemType_None\020\000\022\024\n\020ItemTy"
  "pe_ExpPill\020\001\022\023\n\017ItemType_Weapon\020\002\022\025\n\021Ite"
  "mType_CLOTHING\020\003\022\024\n\020ItemType_JEWELRY\020\004\022\033"
  "\n\027ItemType_SkillEquipment\020\005\022\030\n\024ItemType_"
  "RecoverPill\020\006\022\026\n\022ItemType_SkillBook\020\007\022\027\n"
  "\023ItemType_SecretPill\020\010\022\025\n\021ItemType_AttrP"
  "ill\020\t\022\035\n\031ItemType_BreakthroughPill\020\n\022\031\n\025"
  "ItemType_PillMaterial\020\013\022\033\n\027ItemType_Weap"
  "onMaterial\020\014\022\027\n\023ItemType_PillRecipe\020\r\022\030\n"
  "\024ItemType_EquipRecipe\020\016\022\032\n\026ItemType_Forg"
  "eMaterial\020\017\022\030\n\024ItemType_GiftPackage\020\020\022\032\n"
  "\026ItemType_SpaceMaterial\020\021\022\025\n\021ItemType_Sh"
  "anHeTu\020\024\022\022\n\016ItemType_QiWen\020\025\022\023\n\017ItemType"
  "_QiLing\020\026\022\030\n\024ItemType_QiLingSkill\020\031\022\022\n\016I"
  "temType_Token\020d*\336\001\n\021EquipmentMainType\022\032\n"
  "\026EquipmentMainType_None\020\000\022\034\n\030EquipmentMa"
  "inType_Weapon\020\001\022\036\n\032EquipmentMainType_CLO"
  "THING\020\002\022\035\n\031EquipmentMainType_JEWELRY\020\003\022\'"
  "\n#EquipmentMainType_AttSkillEquipment\020\004\022"
  "\'\n#EquipmentMainType_DefSkillEquipment\020\005"
  "*a\n\020PerkValueAddType\022\031\n\025PerkValueAddType"
  "_None\020\000\022\030\n\024PerkValueAddType_Add\020\001\022\030\n\024Per"
  "kValueAddType_Sub\020\002*\307\003\n\023PerkValueEffectT"
  "ype\022\034\n\030PerkValueEffectType_None\020\000\022/\n+Per"
  "kValueEffectType_EquipmentBasicAttribute"
  "\020\001\022\036\n\032PerkValueEffectType_Attack\020\002\022\034\n\030Pe"
  "rkValueEffectType_HpMp\020\003\022\037\n\033PerkValueEff"
  "ectType_Defence\020\004\022&\n\"PerkValueEffectType"
  "_CritAndCritDef\020\005\022!\n\035PerkValueEffectType"
  "_CritCoeff\020\006\022)\n%PerkValueEffectType_Stre"
  "ngthIntellect\020\007\022&\n\"PerkValueEffectType_R"
  "ecoverPercent\020\010\022\037\n\033PerkValueEffectType_A"
  "gility\020\t\022 \n\034PerkValueEffectType_DodgeHit"
  "\020\n\022!\n\035PerkValueEffectType_MoveSpeed\020\013*\323\004"
  "\n\014PerkIdConsts\022\025\n\021PerkIdConsts_None\020\000\022(\n"
  "$PerkIdConsts_EquipmentBasicAttribute\020\001\022"
  "\032\n\026PerkIdConsts_MagAttack\020\002\022\032\n\026PerkIdCon"
  "sts_PhyAttack\020\003\022\023\n\017PerkIdConsts_Hp\020\004\022\023\n\017"
  "PerkIdConsts_Mp\020\005\022\033\n\027PerkIdConsts_PhyDef"
  "ence\020\006\022\033\n\027PerkIdConsts_MagDefence\020\007\022\025\n\021P"
  "erkIdConsts_Crit\020\010\022\032\n\026PerkIdConsts_CritC"
  "oeff\020\t\022\031\n\025PerkIdConsts_Strength\020\013\022\032\n\026Per"
  "kIdConsts_Intellect\020\014\022!\n\035PerkIdConsts_Mp"
  "RecoverPercent\020\r\022!\n\035PerkIdConsts_HpRecov"
  "erPercent\020\016\022\030\n\024PerkIdConsts_Agility\020\017\022\031\n"
  "\025PerkIdConsts_MagDodge\020\020\022\031\n\025PerkIdConsts"
  "_PhyDodge\020\021\022\030\n\024PerkIdConsts_CritDef\020\022\022\027\n"
  "\023PerkIdConsts_PhyHit\020\023\022\027\n\023PerkIdConsts_M"
  "agHit\020\024\022\032\n\026PerkIdConsts_MoveSpeed\020\031*\303\001\n\022"
  "EquipmentSlotState\022\035\n\031EquipmentSlotState"
  "_Locked\020\000\022\037\n\033EquipmentSlotState_ToUnlock"
  "\020\001\022$\n EquipmentSlotState_UnlockNoEquip\020\002"
  "\022\'\n#EquipmentSlotState_UnlockEquipInBag\020"
  "\003\022\036\n\032EquipmentSlotState_Slotted\020\004*i\n\021Alc"
  "hemyChanceType\022\034\n\030AlchemyChanceType_Norm"
  "al\020\000\022\033\n\027AlchemyChanceType_Small\020\001\022\031\n\025Alc"
  "hemyChanceType_Big\020\002*\?\n\010PillType\022\021\n\rPill"
  "Type_None\020\000\022\017\n\013PillType_Hp\020\001\022\017\n\013PillType"
  "_Mp\020\002*@\n\024CultivationDirection\022\013\n\007CD_None"
  "\020\000\022\r\n\tCD_Physic\020\001\022\014\n\010CD_Magic\020\002*J\n\020Break"
  "throughType\022\013\n\007BT_None\020\000\022\014\n\010BT_Layer\020\001\022\014"
  "\n\010BT_Stage\020\002\022\r\n\tBT_Degree\020\003*\177\n\tWorldType"
  "\022\013\n\007WT_None\020\000\022\021\n\rWT_ClientOnly\020\001\022\014\n\010WT_A"
  "rena\020\002\022\013\n\007WT_Door\020\003\022\023\n\017WT_MonsterTower\020\004"
  "\022\020\n\014WT_SoloArena\020\005\022\020\n\014WT_SeptArena\020\006*7\n\n"
  "EntityType\022\016\n\nET_Unknown\020\000\022\r\n\tET_Player\020"
  "\001\022\n\n\006ET_Npc\020\002*T\n\013EntityState\022\013\n\007ES_None\020"
  "\000\022\013\n\007ES_Init\020\001\022\r\n\tES_Normal\020\002\022\014\n\010ES_Deat"
  "h\020\003\022\016\n\nES_Recycle\020\004*]\n\007NpcType\022\020\n\014NpcTyp"
  "e_None\020\000\022\024\n\020NpcType_Function\020\001\022\023\n\017NpcTyp"
  "e_Monster\020\002\022\025\n\021NpcType_SeptStone\020\003*\204\001\n\013M"
  "onsterType\022\024\n\020MonsterType_None\020\000\022\026\n\022Mons"
  "terType_Normal\020\001\022\025\n\021MonsterType_Elite\020\002\022"
  "\025\n\021MonsterType_Chief\020\003\022\031\n\025MonsterType_Su"
  "perBoss\020\004*\370\003\n\014CurrencyType\022\025\n\021CurrencyTy"
  "pe_None\020\000\022\026\n\022CurrencyType_Money\020\001\022\025\n\021Cur"
  "rencyType_Soul\020\002\022\025\n\021CurrencyType_Gold\020\003\022"
  "\025\n\021CurrencyType_Item\020\004\022#\n\037CurrencyType_A"
  "bilityActivePoint\020\005\022$\n CurrencyType_Abil"
  "ityUpgradePoint\020\006\022\034\n\030CurrencyType_Kungfu"
  "Point\020\007\022\036\n\032CurrencyType_TreasureToken\020\010\022"
  "\033\n\027CurrencyType_ChaosStone\020\t\022\033\n\027Currency"
  "Type_StudyPoint\020\n\022\033\n\027CurrencyType_NingWe"
  "nGem\020\013\022\031\n\025CurrencyType_HeroCard\020\014\022\035\n\031Cur"
  "rencyType_SeptDonation\020\r\022\032\n\026CurrencyType"
  "_SeptStone\020\016\022\035\n\031CurrencyType_SeptQuestEx"
  "p\020\017\022\037\n\033CurrencyType_SeptQuestToken\020\020*\210\001\n"
  "\010SoloType\022\021\n\rSoloType_None\020\000\022\027\n\023SoloType"
  "_FriendlyPk\020\001\022\024\n\020SoloType_SwordPk\020\002\022\033\n\027S"
  "oloType_SwordPkRevenge\020\003\022\035\n\031SoloType_Rob"
  "berySeptStone\020\004*\352\001\n\024QuestRequirementType"
  "\022\013\n\007QT_Kill\020\000\022\n\n\006QT_Get\020\001\022\r\n\tQT_Submit\020\002"
  "\022\013\n\007QT_Rank\020\003\022\014\n\010QT_Event\020\004\022\016\n\nQT_Alchem"
  "y\020\005\022\022\n\016QT_AlchemyRank\020\006\022\020\n\014QT_SkillRank\020"
  "\007\022\014\n\010QT_Forge\020\010\022\020\n\014QT_ForgeRank\020\t\022\020\n\014QT_"
  "ArenaDoor\020\n\022\023\n\017QT_MonsterTower\020\013\022\022\n\016QT_Q"
  "iCollector\020\014*-\n\013QuestOpType\022\016\n\nQOp_Accep"
  "t\020\000\022\016\n\nQOp_Finish\020\001*\341\001\n\017LeaderboardType\022"
  "\016\n\nLBT_Combat\020\000\022\r\n\tLBT_Magic\020\001\022\013\n\007LBT_Ph"
  "y\020\002\022\014\n\010LBT_Rich\020\003\022\013\n\007LBT_Pet\020\004\022\014\n\010LBT_Se"
  "ct\020\005\022\016\n\nLBT_Weapon\020\006\022\r\n\tLBT_Armor\020\007\022\017\n\013L"
  "BT_Jewelry\020\010\022\020\n\014LBT_Treasure\020\t\022\020\n\014LBT_Sh"
  "anhetu\020\n\022\025\n\021LBT_Shanhetu_Week\020\013\022\016\n\nLBT_M"
  "axNum\020\014*V\n\014AlchemyState\022\025\n\021AlchemyState_"
  "None\020\000\022\030\n\024AlchemyState_Running\020\001\022\025\n\021Alch"
  "emyState_Done\020\002*U\n\nWorldState\022\013\n\007WS_None"
  "\020\000\022\013\n\007WS_Init\020\001\022\r\n\tWS_Normal\020\002\022\016\n\nWS_Clo"
  "sing\020\003\022\016\n\nWS_Recycle\020\004*V\n\023FunctionModule"
  "State\022\014\n\010FMS_Hide\020\000\022\014\n\010FMS_Show\020\001\022\021\n\rFMS"
  "_CanUnlock\020\002\022\020\n\014FMS_Unlocked\020\003*\320\002\n\022Funct"
  "ionModuleType\022\014\n\010FMT_None\020\000\022\017\n\013FMT_Alche"
  "my\020\001\022\014\n\010FMT_Shop\020\002\022\021\n\rFMT_DeluxShop\020\003\022\023\n"
  "\017FMT_Leaderboard\020\004\022\014\n\010FMT_Mail\020\005\022\r\n\tFMT_"
  "Forge\020\006\022\024\n\020FMT_MonsterTower\020\007\022\022\n\016FMT_Pil"
  "lElixir\020\010\022\017\n\013FMT_Ability\020\t\022\r\n\tFMT_GuBao\020"
  "\n\022\016\n\nFMT_GongFa\020\013\022\r\n\tFMT_Share\020\014\022\023\n\017FMT_"
  "HuangZhuang\020\r\022\021\n\rFMT_ZhuangPei\020\016\022\023\n\017FMT_"
  "QiCollector\020\017\022\021\n\rFMT_Checklist\020\020\022\017\n\013FMT_"
  "SwordPk\020\021*>\n\010MailType\022\r\n\tMT_System\020\000\022\022\n\016"
  "MT_Maintenance\020\001\022\017\n\013MT_Official\020\002*D\n\rMai"
  "lOperation\022\014\n\010MOP_Fail\020\000\022\014\n\010MOP_Done\020\001\022\027"
  "\n\023MOP_InventoryIsFull\020\002*7\n\017ChatMessageTy"
  "pe\022\016\n\nCMT_Normal\020\000\022\024\n\020CMT_SystemNotice\020\001"
  "*|\n\022ChatMessageChannel\022\025\n\021CMC_ColonyServ"
  "ers\020\000\022\023\n\017CMC_QuadServers\020\001\022\023\n\017CMC_LocalS"
  "erver\020\002\022\024\n\020CMC_Organization\020\003\022\017\n\013CMC_Pri"
  "vate\020\004*a\n\017ForgeChanceType\022\032\n\026ForgeChance"
  "Type_Normal\020\000\022\031\n\025ForgeChanceType_Small\020\001"
  "\022\027\n\023ForgeChanceType_Big\020\002*N\n\nForgeState\022"
  "\023\n\017ForgeState_None\020\000\022\026\n\022ForgeState_Runni"
  "ng\020\001\022\023\n\017ForgeState_Done\020\002*z\n\016PillElixirT"
  "ype\022\030\n\024PillElixirType_Other\020\000\022\026\n\022PillEli"
  "xirType_Exp\020\001\022\033\n\027PillElixirType_Property"
  "\020\002\022\031\n\025PillElixirType_Double\020\003*\323\002\n\023PillEl"
  "ixrEffectType\022\034\n\030PillElixrEffectType_Non"
  "e\020\000\022\036\n\032PillElixrEffectType_PhyExp\020\001\022 \n\034P"
  "illElixrEffectType_MagicExp\020\002\022&\n\"PillEli"
  "xrEffectType_CriticalResist\020\003\022 \n\034PillEli"
  "xrEffectType_Critical\020\004\022\"\n\036PillElixrEffe"
  "ctType_MagicDodge\020\005\022&\n\"PillElixrEffectTy"
  "pe_MagicAccuraccy\020\006\022 \n\034PillElixrEffectTy"
  "pe_PhyDodge\020\007\022$\n PillElixrEffectType_Phy"
  "Accuraccy\020\010*\371\002\n\031PlayerAbilityActionResul"
  "t\022\037\n\033PlayerAbilityAction_Success\020\000\022\037\n\033Pl"
  "ayerAbilityAction_Timeout\020\001\022&\n\"PlayerAbi"
  "lityAction_InvalidAbility\020\002\022/\n+PlayerAbi"
  "lityAction_GiveFailed_ExistAlready\020\n\022.\n*"
  "PlayerAbilityAction_GiveFailed_OwnerFail"
  "ed\020\013\022.\n*PlayerAbilityAction_UpgradeFaile"
  "d_NonExist\020\024\022.\n*PlayerAbilityAction_Upgr"
  "adeFailed_MaxGrade\020\025\0221\n-PlayerAbilityAct"
  "ion_UpgradeFailed_OwnerFailed\020\026*3\n\tFight"
  "Mode\022\023\n\017FightMode_Peace\020\000\022\021\n\rFightMode_A"
  "ll\020\001*n\n\016AttackLockType\022\036\n\032AttackLockType"
  "_MinDistance\020\000\022\033\n\027AttackLockType_LowHpPc"
  "t\020\001\022\037\n\033AttackLockType_LowHpMpValue\020\002*t\n\020"
  "AttackUnlockType\022 \n\034AttackUnlockType_Max"
  "Distance\020\000\022!\n\035AttackUnlockType_NearDista"
  "nce\020\001\022\033\n\027AttackUnlockType_Screen\020\002*\242\001\n\021B"
  "ossInvasionState\022\032\n\026BossInvasionState_No"
  "ne\020\000\022\032\n\026BossInvasionState_Wait\020\001\022\035\n\031Boss"
  "InvasionState_Prepare\020\002\022\033\n\027BossInvasionS"
  "tate_Fight\020\003\022\031\n\025BossInvasionState_End\020\004*"
  "\225\001\n\014SwordPkState\022\025\n\021SwordPkState_None\020\000\022"
  "\025\n\021SwordPkState_Init\020\001\022\034\n\030SwordPkState_S"
  "easonBegin\020\002\022\035\n\031SwordPkState_SeasonDurin"
  "g\020\003\022\032\n\026SwordPkState_SeasonEnd\020\004*\330\003\n\021Chec"
  "kListTaskType\022\r\n\tCLTT_None\020\000\022\016\n\nCLTT_Log"
  "in\020\001\022\020\n\014CLTT_EatPill\020\002\022\021\n\rCLTT_Practice\020"
  "\003\022\024\n\020CLTT_BuyInMarket\020\004\022\021\n\rCLTT_MakePill"
  "\020\005\022\021\n\rCLTT_Training\020\006\022\025\n\021CLTT_MonsterTow"
  "er\020\007\022\017\n\013CLTT_Portal\020\010\022\016\n\nCLTT_Plant\020\t\022\016\n"
  "\nCLTT_Forge\020\n\022\013\n\007CLTT_Ad\020\013\022\020\n\014CLTT_Abili"
  "ty\020\014\022\020\n\014CLTT_LocalPk\020\r\022\017\n\013CLTT_Bounty\020\016\022"
  "\022\n\016CLTT_Reinforce\020\017\022\021\n\rCLTT_CommonPk\020\020\022\027"
  "\n\023CLTT_BuyInDeluxShop\020\021\022\030\n\024CLTT_MonsterI"
  "nvasion\020\022\022\026\n\022CLTT_WorldInvasion\020\023\022\r\n\tCLT"
  "T_Mine\020\024\022\031\n\025CLTT_SectContribution\020\025\022\r\n\tC"
  "LTT_Quiz\020\026\022\016\n\nCLTT_Share\020\027*\254\001\n\014SeptPosit"
  "ion\022\025\n\021SeptPosition_None\020\000\022\027\n\023SeptPositi"
  "on_Normal\020\001\022\030\n\024SeptPosition_Manager\020\002\022\030\n"
  "\024SeptPosition_Senator\020\003\022\035\n\031SeptPosition_"
  "ViceChairman\020\004\022\031\n\025SeptPosition_Chairman\020"
  "\005*^\n\013SeptLogType\022\014\n\010SLT_None\020\000\022\014\n\010SLT_Jo"
  "in\020\001\022\r\n\tSLT_Leave\020\002\022\020\n\014SLT_ChangeUp\020\003\022\022\n"
  "\016SLT_ChangeDown\020\004*\263\001\n\022SeptArenaStoneType"
  "\022\033\n\027SeptArenaStoneType_None\020\000\022\036\n\032SeptAre"
  "naStoneType_Primary\020\001\022#\n\037SeptArenaStoneT"
  "ype_Intermediate\020\002\022\037\n\033SeptArenaStoneType"
  "_Advanced\020\003\022\032\n\026SeptArenaStoneType_Top\020\004b"
  "\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_defines_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_defines_2eproto = {
  false, false, 7887, descriptor_table_protodef_defines_2eproto, "defines.proto", 
  &descriptor_table_defines_2eproto_once, nullptr, 0, 0,
  schemas, file_default_instances, TableStruct_defines_2eproto::offsets,
  nullptr, file_level_enum_descriptors_defines_2eproto, file_level_service_descriptors_defines_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_defines_2eproto_getter() {
  return &descriptor_table_defines_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_defines_2eproto(&descriptor_table_defines_2eproto);
namespace idlezt {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[0];
}
bool ItemQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemShowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[1];
}
bool ItemShowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[2];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 20:
    case 21:
    case 22:
    case 25:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EquipmentMainType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[3];
}
bool EquipmentMainType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerkValueAddType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[4];
}
bool PerkValueAddType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerkValueEffectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[5];
}
bool PerkValueEffectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerkIdConsts_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[6];
}
bool PerkIdConsts_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EquipmentSlotState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[7];
}
bool EquipmentSlotState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlchemyChanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[8];
}
bool AlchemyChanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PillType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[9];
}
bool PillType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CultivationDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[10];
}
bool CultivationDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BreakthroughType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[11];
}
bool BreakthroughType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[12];
}
bool WorldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[13];
}
bool EntityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[14];
}
bool EntityState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NpcType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[15];
}
bool NpcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[16];
}
bool MonsterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CurrencyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[17];
}
bool CurrencyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SoloType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[18];
}
bool SoloType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestRequirementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[19];
}
bool QuestRequirementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestOpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[20];
}
bool QuestOpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LeaderboardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[21];
}
bool LeaderboardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlchemyState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[22];
}
bool AlchemyState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[23];
}
bool WorldState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionModuleState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[24];
}
bool FunctionModuleState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FunctionModuleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[25];
}
bool FunctionModuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MailType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[26];
}
bool MailType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MailOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[27];
}
bool MailOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[28];
}
bool ChatMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatMessageChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[29];
}
bool ChatMessageChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForgeChanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[30];
}
bool ForgeChanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForgeState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[31];
}
bool ForgeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PillElixirType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[32];
}
bool PillElixirType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PillElixrEffectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[33];
}
bool PillElixrEffectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerAbilityActionResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[34];
}
bool PlayerAbilityActionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FightMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[35];
}
bool FightMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttackLockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[36];
}
bool AttackLockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttackUnlockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[37];
}
bool AttackUnlockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BossInvasionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[38];
}
bool BossInvasionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwordPkState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[39];
}
bool SwordPkState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckListTaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[40];
}
bool CheckListTaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeptPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[41];
}
bool SeptPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeptLogType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[42];
}
bool SeptLogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeptArenaStoneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defines_2eproto);
  return file_level_enum_descriptors_defines_2eproto[43];
}
bool SeptArenaStoneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace idlezt
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
