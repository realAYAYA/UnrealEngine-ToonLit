// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "UObject/ObjectMacros.h"
#include "EdGraph/EdGraphSchema.h"
#include "ConnectionDrawingPolicy.h"
#include "NiagaraActions.h"

#include "EdGraphSchema_Niagara.generated.h"

class UEdGraph;
struct FNiagaraVariable;
struct FNiagaraVariableInfo;
struct FNiagaraTypeDefinition;
enum class ENiagaraDataType : uint8;

/** Action to add a node to the graph */
USTRUCT()
struct NIAGARAEDITOR_API FNiagaraSchemaAction_NewNode : public FEdGraphSchemaAction
{
	GENERATED_USTRUCT_BODY();

	/** Template of node we want to create */
	UPROPERTY()
	TObjectPtr<class UEdGraphNode> NodeTemplate;

	UPROPERTY()
	FName InternalName;

	FNiagaraSchemaAction_NewNode() 
		: FEdGraphSchemaAction()
		, NodeTemplate(nullptr)
	{}

	FNiagaraSchemaAction_NewNode(FText InNodeCategory, FText InMenuDesc, FName InInternalName, FText InToolTip, const int32 InGrouping, FText InKeywords = FText(), int32 InSectionID = 0)
		: FEdGraphSchemaAction(MoveTemp(InNodeCategory), MoveTemp(InMenuDesc), MoveTemp(InToolTip), InGrouping, InKeywords, InSectionID)
		, NodeTemplate(nullptr), InternalName(InInternalName)
	{}

	//~ Begin FEdGraphSchemaAction Interface
	virtual UEdGraphNode* PerformAction(class UEdGraph* ParentGraph, UEdGraphPin* FromPin, const FVector2D Location, bool bSelectNewNode = true) override;
	virtual UEdGraphNode* PerformAction(class UEdGraph* ParentGraph, TArray<UEdGraphPin*>& FromPins, const FVector2D Location, bool bSelectNewNode = true) override;
	virtual void AddReferencedObjects( FReferenceCollector& Collector ) override;
	//~ End FEdGraphSchemaAction Interface

	template <typename NodeType>
	static NodeType* SpawnNodeFromTemplate(class UEdGraph* ParentGraph, NodeType* InTemplateNode, const FVector2D Location, bool bSelectNewNode = true)
	{
		FNiagaraSchemaAction_NewNode Action;
		Action.NodeTemplate = InTemplateNode;

		return Cast<NodeType>(Action.PerformAction(ParentGraph, NULL, Location, bSelectNewNode));
	}
};

USTRUCT()
struct NIAGARAEDITOR_API FNiagaraSchemaAction_NewComment : public FEdGraphSchemaAction
{
public:
	GENERATED_USTRUCT_BODY();

	FNiagaraSchemaAction_NewComment()
		: FEdGraphSchemaAction()
		, GraphEditor(nullptr)
	{}

	FNiagaraSchemaAction_NewComment(const TSharedPtr<SGraphEditor>& InGraphEditor)
		: FEdGraphSchemaAction()
		, GraphEditor(InGraphEditor)
	{}

	//~ Begin FEdGraphSchemaAction Interface
	virtual UEdGraphNode* PerformAction(class UEdGraph* ParentGraph, UEdGraphPin* FromPin, const FVector2D Location, bool bSelectNewNode = true) override;
	//~ End FEdGraphSchemaAction Interface

private:
	/** SGraphEditor to use for getting new comment boxes dimensions */
	TSharedPtr<SGraphEditor> GraphEditor;
};

UCLASS()
class NIAGARAEDITOR_API UEdGraphSchema_Niagara : public UEdGraphSchema
{
	GENERATED_UCLASS_BODY()

	// Allowable PinType.PinCategory values
	static const FName PinCategoryType;
	static const FName PinCategoryMisc;
	static const FName PinCategoryClass;
	static const FName PinCategoryEnum;
	static const FName PinCategoryStaticType;
	static const FName PinCategoryStaticClass;
	static const FName PinCategoryStaticEnum;

	static bool IsStaticPin(const UEdGraphPin* Pin);

	//~ Begin EdGraphSchema Interface
	virtual void GetContextMenuActions(class UToolMenu* Menu, class UGraphNodeContextMenuContext* Context) const override;
	virtual const FPinConnectionResponse CanCreateConnection(const UEdGraphPin* A, const UEdGraphPin* B) const override;
	virtual FLinearColor GetPinTypeColor(const FEdGraphPinType& PinType) const override;
	virtual bool ShouldHidePinDefaultValue(UEdGraphPin* Pin) const override;
	virtual bool TryCreateConnection(UEdGraphPin* A, UEdGraphPin* B) const override;
	virtual void BreakSinglePinLink(UEdGraphPin* SourcePin, UEdGraphPin* TargetPin) const override;
	virtual void BreakPinLinks(UEdGraphPin& TargetPin, bool bSendsNodeNotification) const override;
	virtual FConnectionDrawingPolicy* CreateConnectionDrawingPolicy(int32 InBackLayerID, int32 InFrontLayerID, float InZoomFactor, const FSlateRect& InClippingRect, class FSlateWindowElementList& InDrawElements, class UEdGraph* InGraphObj) const override;
	virtual void ResetPinToAutogeneratedDefaultValue(UEdGraphPin* Pin, bool bCallModifyCallbacks = true) const override;
	virtual void OnPinConnectionDoubleCicked(UEdGraphPin* PinA, UEdGraphPin* PinB, const FVector2D& GraphPosition) const override; 
	virtual bool ShouldAlwaysPurgeOnModification() const override { return false; }
	virtual void DroppedAssetsOnGraph(const TArray<FAssetData>& Assets, const FVector2D& GraphPosition, UEdGraph* Graph) const override;
	virtual void GetAssetsGraphHoverMessage(const TArray<FAssetData>& Assets, const UEdGraph* HoverGraph, FString& OutTooltipText, bool& OutOkIcon) const override;

	/**
	* Sets the string to the specified pin; even if it is invalid it is still set.
	*
	* @param	Pin			   	The pin on which to set the default value.
	* @param	NewDefaultValue	The new default value.
	* @param   bMarkAsModified Marks the container of the value as modified. For Niagara Schema, whether or not to notify the Node owning the Pin that the Pin has changed.
	*/
	virtual void TrySetDefaultValue(UEdGraphPin& Pin, const FString& NewDefaultValue, bool bMarkAsModified = true) const override;

	//~ End EdGraphSchema Interface

	static FLinearColor GetTypeColor(const FNiagaraTypeDefinition& Type);

	TArray<TSharedPtr<FNiagaraAction_NewNode>> GetGraphActions(const UEdGraph* CurrentGraph, const UEdGraphPin* FromPin, UEdGraph* OwnerOfTemporaries) const;
	void PromoteSinglePinToParameter(UEdGraphPin* SourcePin);
	static bool CanPromoteSinglePinToParameter(const UEdGraphPin* SourcePin);
	void ToggleNodeEnabledState(class UNiagaraNode* InNode) const;
	void RefreshNode(UNiagaraNode* InNode) const;

	/** 
	  * Creates a niagara variable using the name, type, and default value stored on an ed graph pin.
	  * Pin The pin to create a variable from.
	  * bNeedsValue Whether or not the returned variable must be allocated to a valid value. When true if the pin doesn't have a valid default value itself the variable will be reset to default before return.
	  * returns The newly created variable.
	  */
	static FNiagaraVariable PinToNiagaraVariable(const UEdGraphPin* Pin, bool bNeedsValue=false, ENiagaraStructConversion StructConversion = ENiagaraStructConversion::UserFacing);

	/** 
	  * Tries to get a default value string for a graph pin from a niagara variable.
	  * @param Variable The variable to get a default pin value for.
	  * @param OutPinDefaultValue The pin default value string if this call was successful, otherwise empty.
	  * @returns Whether or not we could get a default value form the supplied variable.
	  */
	bool TryGetPinDefaultValueFromNiagaraVariable(const FNiagaraVariable& Variable, FString& OutPinDefaultValue) const;

	static void ConvertIllegalPinsInPlace(UEdGraphPin* Pin);
	static FNiagaraTypeDefinition PinToTypeDefinition(const UEdGraphPin* Pin, ENiagaraStructConversion StructConversion = ENiagaraStructConversion::UserFacing);
	static FNiagaraTypeDefinition PinTypeToTypeDefinition(const FEdGraphPinType& PinType);
	static FEdGraphPinType TypeDefinitionToPinType(FNiagaraTypeDefinition TypeDef);
	
	static bool IsPinWildcard(const UEdGraphPin* Pin);
	
	// Fast path helper to skip doing full type conversion
	static bool IsPinStatic(const UEdGraphPin* Pin);
	static FPinConnectionResponse GetWildcardConnectionResponse(const UEdGraphPin* PinA, const UEdGraphPin* PinB);
	
	bool IsSystemConstant(const FNiagaraVariable& Variable)const;

	class UNiagaraParameterCollection* VariableIsFromParameterCollection(const FNiagaraVariable& Var)const;
	class UNiagaraParameterCollection* VariableIsFromParameterCollection(const FString& VarName, bool bAllowPartialMatch, FNiagaraVariable& OutVar)const;

	bool IsValidNiagaraPropertyType(const FProperty* Property) const;
	FNiagaraTypeDefinition GetTypeDefForProperty(const FProperty* Property) const;

	static const FLinearColor NodeTitleColor_Attribute;
	static const FLinearColor NodeTitleColor_Constant;
	static const FLinearColor NodeTitleColor_SystemConstant;
	static const FLinearColor NodeTitleColor_FunctionCall;
	static const FLinearColor NodeTitleColor_CustomHlsl;
	static const FLinearColor NodeTitleColor_Event; 
	static const FLinearColor NodeTitleColor_TranslatorConstant;
	static const FLinearColor NodeTitleColor_RapidIteration;

	static const FText ReplaceExistingInputConnectionsText;
	static const FText TypesAreNotCompatibleText;
	static const FText ConvertText;
	static const FText ConvertLossyText;
	static const FText PinNotConnectableText;
	static const FText SameNodeConnectionForbiddenText;
	static const FText DirectionsNotCompatibleText;
	static const FText AddPinIncompatibleTypeText;
	static const FText CircularConnectionFoundText;
	
	bool PinTypesValidForNumericConversion(FEdGraphPinType AType, FEdGraphPinType BType) const;	

	static TArray<TPair<FString, FString>> GetDataInterfaceFunctionPrototypes(const UEdGraphPin* GraphPin);
private:
	void GetNumericConversionToSubMenuActions(class UToolMenu* Menu, const FName SectionName, UEdGraphPin* InGraphPin);
	void GetNumericConversionToSubMenuActionsAll(class UToolMenu* Menu, const FName SectionName, UNiagaraNode* InGraphPin);
	void ConvertNumericPinToType(UEdGraphPin* InPin, FNiagaraTypeDefinition TypeDef);
	void ConvertNumericPinToTypeAll(UNiagaraNode* InPin, FNiagaraTypeDefinition TypeDef);
	void ConvertPinToType(UEdGraphPin* InPin, FNiagaraTypeDefinition TypeDef) const;

	void GenerateDataInterfacePinMenu(UToolMenu* ToolMenu, const FName SectionName, const UEdGraphPin* GraphPin, FNiagaraTypeDefinition TypeDef) const;

	static bool CheckCircularConnection(TSet<const UEdGraphNode*>& VisitedNodes, const UEdGraphNode* InNode, const UEdGraphNode* InTestNode);
};

class FNiagaraConnectionDrawingPolicy : public FConnectionDrawingPolicy
{
public:
	FNiagaraConnectionDrawingPolicy(int32 InBackLayerID, int32 InFrontLayerID, float InZoomFactor, const FSlateRect& InClippingRect, FSlateWindowElementList& InDrawElements, UEdGraph* InGraph);
	virtual void DetermineWiringStyle(UEdGraphPin* OutputPin, UEdGraphPin* InputPin, /*inout*/ FConnectionParams& Params) override;

private:
	class UNiagaraGraph* Graph;
};

