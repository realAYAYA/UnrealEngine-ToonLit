// Copyright Epic Games, Inc. All Rights Reserved.

#include "/Engine/Public/Platform.ush"

#define WORK_TYPE float
#define BUFFER_TYPE float
#define READ(x) x
#define WRITE(x) x

int C;							// Number of channels
int NxC;						// Precalculated N x C
int W; 							// D1 x D2 ... Dn

BUFFER_TYPE Epsilon;			// Attribute epsilon to use to avoid division by zero
Buffer<BUFFER_TYPE> Input;		// Input data tensor with dimensions (N x C x D1 x D2 ... Dn)
Buffer<BUFFER_TYPE> Scale;		// Scale tensor of size C
Buffer<BUFFER_TYPE> Bias;		// Bias tensor of size C
RWBuffer<BUFFER_TYPE> Output;	// Output tensor of the same shape as input

#if ALGORITHM == 0
#define GROUP_SIZE_X 1
#define GROUP_SIZE_Y 256

#elif ALGORITHM == 1
#define GROUP_SIZE_X 256
#define GROUP_SIZE_Y 1

#elif ALGORITHM == 2
#define GROUP_SIZE_X 512
#define GROUP_SIZE_Y 1

#elif ALGORITHM == 3
#define GROUP_SIZE_X 768
#define GROUP_SIZE_Y 1

#elif ALGORITHM == 4
#define GROUP_SIZE_X 1024
#define GROUP_SIZE_Y 1

#endif

#if GROUP_SIZE_X > 1

groupshared WORK_TYPE SharedMemoryMean[GROUP_SIZE_X * GROUP_SIZE_Y];
groupshared WORK_TYPE SharedMemoryMean2[GROUP_SIZE_X * GROUP_SIZE_Y];
groupshared int SharedMemoryCount[GROUP_SIZE_X * GROUP_SIZE_Y];

[numthreads(GROUP_SIZE_X, GROUP_SIZE_Y, 1)]
void InstanceNormalization(in const uint3 DispatchThreadID : SV_DispatchThreadID, in const uint3 GroupThreadID : SV_GroupThreadID)
{
	const int StartIdx = DispatchThreadID.y * W;
	const int SharedMemoryOffsetY = GroupThreadID.y * GROUP_SIZE_X;

	// Calculate mean and variance using Welford's online algorithm
	// https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
	if (DispatchThreadID.y < NxC)
	{
		WORK_TYPE Mean = 0;
		WORK_TYPE Mean2 = 0;
		int Count = 0;
		for (int CurrIdx = GroupThreadID.x; CurrIdx < W; CurrIdx += GROUP_SIZE_X)
		{
			Count += 1;

			WORK_TYPE Value = READ(Input[StartIdx + CurrIdx]);

			WORK_TYPE Delta = Value - Mean;
			Mean += Delta / (WORK_TYPE)Count;

			WORK_TYPE Delta2 = Value - Mean;
			Mean2 += Delta * Delta2;
		}

		SharedMemoryMean[SharedMemoryOffsetY + GroupThreadID.x] = Mean;
		SharedMemoryMean2[SharedMemoryOffsetY + GroupThreadID.x] = Mean2;
		SharedMemoryCount[SharedMemoryOffsetY + GroupThreadID.x] = Count;
	}

	// Wait until all threads wrote result to shared memory
	GroupMemoryBarrierWithGroupSync();

	// Use one thread to calculate final result
	if (GroupThreadID.x == 0 && DispatchThreadID.y < NxC)
	{
		WORK_TYPE Mean = 0;
		WORK_TYPE Mean2 = 0;
		int Count = 0;

		UNROLL
		for (int Idx = 0; Idx < GROUP_SIZE_X; Idx++)
		{
			WORK_TYPE CurrMean = SharedMemoryMean[SharedMemoryOffsetY + Idx];
			WORK_TYPE CurrMean2 = SharedMemoryMean2[SharedMemoryOffsetY + Idx];
			int CurrCount = SharedMemoryCount[SharedMemoryOffsetY + Idx];

			int NewCount = Count + CurrCount;

			WORK_TYPE Delta = CurrMean - Mean;
			Mean = (CurrCount * CurrMean + Count * Mean) / NewCount;

			Mean2 += CurrMean2 + Delta * Delta * (WORK_TYPE)Count * (WORK_TYPE)CurrCount / (WORK_TYPE)NewCount;

			Count = NewCount;
		}

		WORK_TYPE Variance = Mean2 / (WORK_TYPE)Count;

		SharedMemoryMean[SharedMemoryOffsetY] = Mean;
		SharedMemoryMean2[SharedMemoryOffsetY] = (WORK_TYPE)1 / sqrt(Variance + Epsilon);
	}

	// Wait until first thread wrote result to shared memory
	GroupMemoryBarrierWithGroupSync();

	if (DispatchThreadID.y < NxC)
	{
		const int ChannelIdx = DispatchThreadID.y % C;
		
		WORK_TYPE Mean = SharedMemoryMean[SharedMemoryOffsetY];
		WORK_TYPE InvStdev = SharedMemoryMean2[SharedMemoryOffsetY];

		// Carry out instance normalization and write to output
		for (int CurrIdx = GroupThreadID.x; CurrIdx < W; CurrIdx += GROUP_SIZE_X)
		{
			Output[StartIdx + CurrIdx] = WRITE((READ(Input[StartIdx + CurrIdx]) - Mean) * READ(Scale[ChannelIdx]) * InvStdev + READ(Bias[ChannelIdx]));
		}
	}
}

#else

[numthreads(1, 256, 1)]
void InstanceNormalization(in const uint3 DispatchThreadID : SV_DispatchThreadID)
{
	if (DispatchThreadID.y >= NxC || DispatchThreadID.x >= 1)
	{
		return;
	}

	const int StartIdx = DispatchThreadID.y * W;
	const int ChannelIdx = DispatchThreadID.y % C;

	const WORK_TYPE InvNum = (WORK_TYPE)1 / (WORK_TYPE)W;

	// Calculate mean and variance using Welfor's online algorithm
	WORK_TYPE Mean = 0;
	WORK_TYPE Mean2 = 0;
	int Count = 0;
	for (int Idx = 0; Idx < W; Idx++)
	{
		Count += 1;

		WORK_TYPE Value = READ(Input[StartIdx + Idx]);

		WORK_TYPE Delta = Value - Mean;
		Mean += Delta / (WORK_TYPE)Count;

		WORK_TYPE Delta2 = Value - Mean;
		Mean2 += Delta * Delta2;
	}

	WORK_TYPE Variance = Mean2 * InvNum;

	WORK_TYPE InvStdev = (WORK_TYPE)1 / sqrt(Variance + Epsilon);

	// Carry out instance normalization and write to output
	for (int Idx = 0; Idx < W; Idx++)
	{
		Output[StartIdx + Idx] = WRITE((READ(Input[StartIdx + Idx]) - Mean) * READ(Scale[ChannelIdx]) * InvStdev + READ(Bias[ChannelIdx]));
	}
}

#endif