// Copyright Epic Games, Inc. All Rights Reserved.

#include "VCamCoreEditorModule.h"

#include "Customizations/OutputProvider/ConnectionRemapCustomization_StateSwitcher.h"
#include "Customizations/OutputProvider/ConnectionRemapCustomization_VCamWidget.h"
#include "Customizations/OutputProvider/OutputProviderLayoutCustomization.h"
#include "Customizations/OutputProvider/OutputProviderTypeCustomization.h"
#include "Customizations/StateSwitcher/VCamStateSwitcherWidgetCustomization.h"
#include "Customizations/StateSwitcher/WidgetConnectionConfigTypeCustomization.h"
#include "Customizations/TargetSettings/ConnectionTargetSettingsTypeCustomization.h"
#include "Customizations/TargetSettings/InsideVCamConnectionContextFinder.h"
#include "Customizations/TargetSettings/ListOfContextFinders.h"
#include "Customizations/TargetSettings/StateSwitcherContextFinder.h"
#include "Customizations/VCamBaseActorCustomization.h"
#include "Customizations/VCamInputProfileCustomization.h"
#include "Customizations/VCamViewportLockerTypeCustomization.h"
#include "Customizations/WidgetReference/ChildWidgetReferenceCustomization.h"
#include "Customizations/WidgetReference/VCamChildWidgetReferenceCustomization.h"
#include "Input/VCamInputDeviceConfig.h"
#include "LogVCamEditor.h"
#include "Modifier/VCamModifier.h"
#include "Output/VCamOutputProviderBase.h"
#include "UI/Switcher/WidgetConnectionConfig.h"
#include "UI/Switcher/VCamStateSwitcherWidget.h"
#include "UI/VCamWidget.h"
#include "Util/WidgetReference.h"
#include "VCamBaseActor.h"
#include "VCamComponent.h"

#include "AssetToolsModule.h"
#include "Interfaces/IPluginManager.h"
#include "Kismet2/KismetEditorUtilities.h"
#include "Modules/ModuleInterface.h"
#include "Modules/ModuleManager.h"
#include "PropertyEditorModule.h"
#include "Compilation/CompilationExtensionManager.h"
#include "Customizations/DeviceID/VCamInputDeviceIDTypeCustomization.h"

#define LOCTEXT_NAMESPACE "FVCamCoreEditorModule"

namespace UE::VCamCoreEditor::Private
{
	TSharedPtr<IConnectionRemapCustomization> FVCamCoreEditorModule::CreateConnectionRemapCustomization(TSubclassOf<UVCamWidget> Class) const
	{
		for (UClass* const CurrentClass = Class; CurrentClass != UUserWidget::StaticClass(); Class = Class->GetSuperClass())
		{
			const FGetConnectionRemappingCustomization* FactoryDelegate = ConnectionRemappingCustomizationFactories.Find(Class);
			if (FactoryDelegate)
			{
				return FactoryDelegate->Execute();
			}
		}
		return nullptr;
	}

	void FVCamCoreEditorModule::StartupModule()
	{
		RegisterAutoGeneratedDefaultEvents();
		RegisterCustomizations();
		RegisterDefaultConnectionRemappingCustomizations();

		CompilationExtensionManager = MakeShared<FCompilationExtensionManager>();
		CompilationExtensionManager->Init();
	}
	
	void FVCamCoreEditorModule::ShutdownModule()
	{
		CompilationExtensionManager.Reset();
		
		FKismetEditorUtilities::UnregisterAutoBlueprintNodeCreation(this);
		if (UObjectInitialized() && !IsEngineExitRequested())
		{
			UnregisterCustomizations();
		}
	}

	void FVCamCoreEditorModule::RegisterConnectionRemapCustomization(TSubclassOf<UVCamWidget> Class, FGetConnectionRemappingCustomization GetterDelegate)
	{
		if (!Class)
		{
			return;
		}

		if (Class->GetClass()->IsChildOf(UBlueprintGeneratedClass::StaticClass()))
		{
			UE_LOG(LogVCamEditor,
				Error,
				TEXT("RegisterConnectionTargetRemappingCustomizer is designed for native C++ base classes."
					"Blueprints are untested and will likely break due to recompilation and reinstancing."
					"'%s' is will not be registered!"
					),
				*Class->GetName()
				);
			return;
		}
		
		if (ConnectionRemappingCustomizationFactories.Contains(Class))
		{
			UE_LOG(LogVCamEditor, Error, TEXT("Class '%s' is already registered!"), *Class->GetName());
			return;
		}

		ConnectionRemappingCustomizationFactories.Add(Class, MoveTemp(GetterDelegate));
	}
	
	void FVCamCoreEditorModule::UnregisterConnectionRemapCustomization(TSubclassOf<UVCamWidget> Class)
	{
		const bool bIsInvalidClass = Class == UVCamWidget::StaticClass()
			|| Class == UVCamStateSwitcherWidget::StaticClass();
		if (bIsInvalidClass)
		{
			UE_LOG(LogVCamEditor, Error, TEXT("Class '%s' cannot be unregistered!"), Class ? *Class->GetName() : TEXT("null"));
			return;
		}

		// Any alive instances will be cleared when the details panel redraws
		ConnectionRemappingCustomizationFactories.Remove(Class);
	}

	uint32 FVCamCoreEditorModule::GetAdvancedAssetCategoryForVCam() const
	{
		IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>("AssetTools").Get();
		return AssetTools.RegisterAdvancedAssetCategory("VirtualCamera", LOCTEXT("AssetCategoryName", "VCam"));
	}

	void FVCamCoreEditorModule::RegisterAutoGeneratedDefaultEvents()
	{
		FKismetEditorUtilities::RegisterAutoGeneratedDefaultEvent(this, UVCamBlueprintModifier::StaticClass(), "OnInitialize");
		FKismetEditorUtilities::RegisterAutoGeneratedDefaultEvent(this, UVCamBlueprintModifier::StaticClass(), "OnDeinitialize");
		FKismetEditorUtilities::RegisterAutoGeneratedDefaultEvent(this, UVCamBlueprintModifier::StaticClass(), "OnApply");
	}
	
	void FVCamCoreEditorModule::RegisterCustomizations()
	{
		FPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>("PropertyEditor");

		PropertyModule.RegisterCustomPropertyTypeLayout(
			FVCamInputProfile::StaticStruct()->GetFName(),
			FOnGetPropertyTypeCustomizationInstance::CreateStatic(&FVCamInputProfileCustomization::MakeInstance)
		);
		PropertyModule.RegisterCustomPropertyTypeLayout(
			FVCamConnectionTargetSettings::StaticStruct()->GetFName(),
			FOnGetPropertyTypeCustomizationInstance::CreateLambda([]()
			{
				using namespace ConnectionTargetContextFinding;
				TArray<TSharedRef<IContextFinderForConnectionTargetSettings>> ContextFinders
				{
					MakeShared<FInsideVCamConnectionContextFinder>(),
					MakeShared<FStateSwitcherContextFinder>()
				};
				return FConnectionTargetSettingsTypeCustomization::MakeInstance(
					MakeShared<FListOfContextFinders>(MoveTemp(ContextFinders))
					);
			})
		);
		PropertyModule.RegisterCustomPropertyTypeLayout(
			FWidgetConnectionConfig::StaticStruct()->GetFName(), 
			FOnGetPropertyTypeCustomizationInstance::CreateStatic(&FWidgetConnectionConfigTypeCustomization::MakeInstance)
		);
		// Must be set up as IPropertyTypeCustomization as well to work on Instanced properties
		PropertyModule.RegisterCustomPropertyTypeLayout(
			UVCamOutputProviderBase::StaticClass()->GetFName(), 
			FOnGetPropertyTypeCustomizationInstance::CreateStatic(&FOutputProviderTypeCustomization::MakeInstance)
		);
		PropertyModule.RegisterCustomPropertyTypeLayout(
			FVCamViewportLocker::StaticStruct()->GetFName(), 
			FOnGetPropertyTypeCustomizationInstance::CreateStatic(&FVCamViewportLockerTypeCustomization::MakeInstance)
			);
		PropertyModule.RegisterCustomPropertyTypeLayout(
			FChildWidgetReference::StaticStruct()->GetFName(),
			FOnGetPropertyTypeCustomizationInstance::CreateStatic(&FChildWidgetReferenceCustomization::MakeInstance)
			);
		PropertyModule.RegisterCustomPropertyTypeLayout(
			FVCamChildWidgetReference::StaticStruct()->GetFName(),
			FOnGetPropertyTypeCustomizationInstance::CreateStatic(&FVCamChildWidgetReferenceCustomization::MakeInstance)
			);
		PropertyModule.RegisterCustomPropertyTypeLayout(
			FVCamInputDeviceID::StaticStruct()->GetFName(),
			FOnGetPropertyTypeCustomizationInstance::CreateStatic(&FVCamInputDeviceIDTypeCustomization::MakeInstance)
			);
		
		PropertyModule.RegisterCustomClassLayout(
			UVCamOutputProviderBase::StaticClass()->GetFName(),
			FOnGetDetailCustomizationInstance::CreateStatic(&FOutputProviderLayoutCustomization::MakeInstance)
		);
		PropertyModule.RegisterCustomClassLayout(
			AVCamBaseActor::StaticClass()->GetFName(),
			FOnGetDetailCustomizationInstance::CreateStatic(&FVCamBaseActorCustomization::MakeInstance)
		);
		PropertyModule.RegisterCustomClassLayout(
			UVCamStateSwitcherWidget::StaticClass()->GetFName(),
			FOnGetDetailCustomizationInstance::CreateStatic(&FVCamStateSwitcherWidgetCustomization::MakeInstance)
			);
	}

	void FVCamCoreEditorModule::RegisterDefaultConnectionRemappingCustomizations()
	{
		RegisterConnectionRemapCustomization(
			UVCamWidget::StaticClass(),
			FGetConnectionRemappingCustomization::CreateStatic(&FConnectionRemapCustomization_VCamWidget::Make)
			);
		RegisterConnectionRemapCustomization(
			UVCamStateSwitcherWidget::StaticClass(),
			FGetConnectionRemappingCustomization::CreateStatic(&FConnectionRemapCustomization_StateSwitcher::Make)
			);
	}

	void FVCamCoreEditorModule::UnregisterCustomizations()
	{
		if (FPropertyEditorModule* PropertyModule = FModuleManager::GetModulePtr<FPropertyEditorModule>("PropertyEditor"))
		{
			PropertyModule->UnregisterCustomPropertyTypeLayout(FVCamInputProfile::StaticStruct()->GetFName());
			PropertyModule->UnregisterCustomPropertyTypeLayout(FVCamConnectionTargetSettings::StaticStruct()->GetFName());
			PropertyModule->UnregisterCustomPropertyTypeLayout(FWidgetConnectionConfig::StaticStruct()->GetFName());
			PropertyModule->UnregisterCustomPropertyTypeLayout(UVCamOutputProviderBase::StaticClass()->GetFName());
			PropertyModule->UnregisterCustomPropertyTypeLayout(FVCamViewportLocker::StaticStruct()->GetFName());
			PropertyModule->UnregisterCustomPropertyTypeLayout(FChildWidgetReference::StaticStruct()->GetFName());
			PropertyModule->UnregisterCustomPropertyTypeLayout(FVCamChildWidgetReference::StaticStruct()->GetFName());
			PropertyModule->UnregisterCustomPropertyTypeLayout(FVCamInputDeviceID::StaticStruct()->GetFName());

			PropertyModule->UnregisterCustomClassLayout(UVCamOutputProviderBase::StaticClass()->GetFName());
			PropertyModule->UnregisterCustomClassLayout(AVCamBaseActor::StaticClass()->GetFName());
			PropertyModule->UnregisterCustomClassLayout(UVCamStateSwitcherWidget::StaticClass()->GetFName());
		}	
	}
}

IMPLEMENT_MODULE(UE::VCamCoreEditor::Private::FVCamCoreEditorModule, VCamCoreEditor);
#undef LOCTEXT_NAMESPACE