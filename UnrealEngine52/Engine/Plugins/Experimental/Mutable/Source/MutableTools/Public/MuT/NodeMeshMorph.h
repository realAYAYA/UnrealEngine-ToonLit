// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "MuR/Ptr.h"
#include "MuR/RefCounted.h"
#include "MuT/Node.h"
#include "MuT/NodeMesh.h"


namespace mu
{

	// Forward definitions
	class NodeScalar;
	typedef Ptr<NodeScalar> NodeScalarPtr;
	typedef Ptr<const NodeScalar> NodeScalarPtrConst;

	class NodeMeshMorph;
	typedef Ptr<NodeMeshMorph> NodeMeshMorphPtr;
	typedef Ptr<const NodeMeshMorph> NodeMeshMorphPtrConst;


	//! Node that morphs a base mesh with one or two weighted targets from a sequence.
	//! \ingroup model
	class MUTABLETOOLS_API NodeMeshMorph : public NodeMesh
	{
	public:

		//-----------------------------------------------------------------------------------------
		// Life cycle
		//-----------------------------------------------------------------------------------------

		NodeMeshMorph();

		void SerialiseWrapper(OutputArchive& arch) const override;
		static void Serialise( const NodeMeshMorph* pNode, OutputArchive& arch );
		static NodeMeshMorphPtr StaticUnserialise( InputArchive& arch );


		//-----------------------------------------------------------------------------------------
		// Node Interface
		//-----------------------------------------------------------------------------------------

		

		const NODE_TYPE* GetType() const override;
		static const NODE_TYPE* GetStaticType();

		int GetInputCount() const override;
		Node* GetInputNode( int i ) const override;
		void SetInputNode( int i, NodePtr pNode ) override;

		//-----------------------------------------------------------------------------------------
		// Own Interface
		//-----------------------------------------------------------------------------------------

		//! Get the node generating the weight used to select (and combine) the morphs to apply.
		NodeScalarPtr GetFactor() const;
		void SetFactor( NodeScalarPtr );

		//! Get the nodes generating the base mesh to be morphed
		NodeMeshPtr GetBase() const;
		void SetBase( NodeMeshPtr );

		//! Set the number of target meshes. It will keep the currently set targets and initialise
		//! the new ones as 0.
		void SetMorphCount( int );
		int GetMorphCount() const;

		//! Get the nodes generating the several morph targets
		NodeMeshPtr GetMorph( int t ) const;
		void SetMorph( int t, NodeMeshPtr );

		//! Set the domain of the vertex indices in the morph connections. By default they are 
		//! absolute as generated by the MakeMeshMorph node. But if they are provided externally, 
		//! they may be relative to the main mesh connected in the Base node.
        //void SetMorphIndicesAreRelative( bool relative );

		/** Also deform the mesh skeleton. Disabled by default. */
		void SetReshapeSkeleton(bool);	

		/** Deform Mesh Physics Volumes */
		void SetReshapePhysicsVolumes(bool);

		/** Sets the number of bones that will be deform */
		void AddBoneToDeform(const char* BoneName);	

		/** Add a Physics Body to deform */
		void AddPhysicsBodyToDeform(const char* BoneName);

        //-----------------------------------------------------------------------------------------
		// Interface pattern
		//-----------------------------------------------------------------------------------------
		class Private;
		Private* GetPrivate() const;
        Node::Private* GetBasePrivate() const override;

	protected:

		//! Forbidden. Manage with the Ptr<> template.
		~NodeMeshMorph();

	private:

		Private* m_pD;

	};


}
