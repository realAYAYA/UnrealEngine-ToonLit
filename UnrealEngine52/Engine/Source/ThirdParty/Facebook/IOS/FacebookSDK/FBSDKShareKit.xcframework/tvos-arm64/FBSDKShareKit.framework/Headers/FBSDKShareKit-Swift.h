// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef FBSDKSHAREKIT_SWIFT_H
#define FBSDKSHAREKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <FBSDKShareKit/FBSDKShareKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FBSDKShareKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class NSString;

/// Represents a single hashtag that can be used with the share dialog.
SWIFT_CLASS_NAMED("Hashtag")
@interface FBSDKHashtag : NSObject
/// The hashtag string.
/// You are responsible for making sure that <code>stringRepresentation</code> is a valid hashtag (a single ‘#’ followed by one or more
/// word characters). Invalid hashtags are ignored when sharing content. You can check validity with the<code>valid</code> property.
/// @return The hashtag string
@property (nonatomic, copy) NSString * _Nonnull stringRepresentation;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Tests if a hashtag is valid.
/// A valid hashtag matches the regular expression “#\w+”: A single ‘#’ followed by one or more word characters.
/// @return true if the hashtag is valid, false otherwise.
@property (nonatomic, readonly) BOOL isValid;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// ShareError
/// Error codes for ShareErrorDomain.
typedef SWIFT_ENUM_NAMED(NSInteger, FBSDKShareError, "ShareError", open) {
/// Reserved
  FBSDKShareErrorReserved = 200,
/// The error code for errors from uploading open graph objects.
  FBSDKShareErrorOpenGraph = 201,
/// The error code for when a sharing dialog is not available.
/// Use the canShare methods to check for this case before calling show.
  FBSDKShareErrorDialogNotAvailable = 202,
/// The error code for unknown errors.
  FBSDKShareErrorUnknown = 203,
};

@class NSURL;

/// A model for status and link content to be shared.
SWIFT_CLASS_NAMED("ShareLinkContent")
@interface FBSDKShareLinkContent : NSObject
/// Some quote text of the link.
/// If specified, the quote text will render with custom styling on top of the link.
@property (nonatomic, copy) NSString * _Nullable quote;
/// URL for the content being shared.
/// This URL will be checked for all link meta tags for linking in platform specific ways.  See documentation
/// for App Links (https://developers.facebook.com/docs/applinks/)
@property (nonatomic, copy) NSURL * _Nullable contentURL;
/// Hashtag for the content being shared.
@property (nonatomic, strong) FBSDKHashtag * _Nullable hashtag;
/// List of IDs for taggable people to tag with this content.
/// See documentation for Taggable Friends
/// (https://developers.facebook.com/docs/graph-api/reference/user/taggable_friends)
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull peopleIDs;
/// The ID for a place to tag with this content.
@property (nonatomic, copy) NSString * _Nullable placeID;
/// A value to be added to the referrer URL when a person follows a link from this shared content on feed.
@property (nonatomic, copy) NSString * _Nullable ref;
/// For shares into Messenger, this pageID will be used to map the app to page and attach attribution to the share.
@property (nonatomic, copy) NSString * _Nullable pageID;
/// A unique identifier for a share involving this content, useful for tracking purposes.
@property (nonatomic, readonly, copy) NSString * _Nullable shareUUID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An interface for validatable content and media.
SWIFT_PROTOCOL_NAMED("SharingValidatable")
@protocol FBSDKSharingValidatable
/// Validate that this content or media contains valid values.
/// \param options The share bridge options to use for validation.
///
///
/// throws:
/// If the values are not valid.
- (BOOL)validateWithOptions:(FBSDKShareBridgeOptions)options error:(NSError * _Nullable * _Nullable)error;
@end


/// A base interface for content to be shared.
SWIFT_PROTOCOL_NAMED("SharingContent")
@protocol FBSDKSharingContent <FBSDKSharingValidatable, NSObject>
/// URL for the content being shared.
/// This URL will be checked for all link meta tags for linking in platform specific ways.
/// See documentation for App Links (https://developers.facebook.com/docs/applinks/)
@property (nonatomic, copy) NSURL * _Nullable contentURL;
/// Hashtag for the content being shared.
@property (nonatomic, strong) FBSDKHashtag * _Nullable hashtag;
/// List of IDs for taggable people to tag with this content.
/// See documentation for Taggable Friends
/// (https://developers.facebook.com/docs/graph-api/reference/user/taggable_friends)
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull peopleIDs;
/// The ID for a place to tag with this content.
@property (nonatomic, copy) NSString * _Nullable placeID;
/// A value to be added to the referrer URL when a person follows a link from this shared content on feed.
@property (nonatomic, copy) NSString * _Nullable ref;
/// For shares into Messenger, this pageID will be used to map the app to page and attach attribution to the share.
@property (nonatomic, copy) NSString * _Nullable pageID;
/// A unique identifier for a share involving this content, useful for tracking purposes.
@property (nonatomic, readonly, copy) NSString * _Nullable shareUUID;
/// Adds content to an existing dictionary as key/value pairs and returns the
/// updated dictionary
/// @param existingParameters An immutable dictionary of existing values
/// @param bridgeOptions The options for bridging
/// @return A new dictionary with the modified contents
- (NSDictionary<NSString *, id> * _Nonnull)addParameters:(NSDictionary<NSString *, id> * _Nonnull)existingParameters bridgeOptions:(FBSDKShareBridgeOptions)bridgeOptions SWIFT_WARN_UNUSED_RESULT;
@end


@interface FBSDKShareLinkContent (SWIFT_EXTENSION(FBSDKShareKit)) <FBSDKSharingContent>
/// Adds content to an existing dictionary as key/value pairs and returns the
/// updated dictionary
/// @param existingParameters An immutable dictionary of existing values
/// @param bridgeOptions The options for bridging
/// @return A new dictionary with the modified contents
- (NSDictionary<NSString *, id> * _Nonnull)addParameters:(NSDictionary<NSString *, id> * _Nonnull)existingParameters bridgeOptions:(FBSDKShareBridgeOptions)bridgeOptions SWIFT_WARN_UNUSED_RESULT;
@end


@interface FBSDKShareLinkContent (SWIFT_EXTENSION(FBSDKShareKit)) <FBSDKSharingValidatable>
/// Asks the receiver to validate that its content or media values are valid.
- (BOOL)validateWithOptions:(FBSDKShareBridgeOptions)bridgeOptions error:(NSError * _Nullable * _Nullable)error;
@end


/// A protocol for media content (photo or video) to be shared.
SWIFT_PROTOCOL_NAMED("ShareMedia")
@protocol FBSDKShareMedia
@end


/// A model for media content (photo or video) to be shared.
SWIFT_CLASS_NAMED("ShareMediaContent")
@interface FBSDKShareMediaContent : NSObject
/// Media to be shared: an array of <code>SharePhoto</code> or <code>ShareVideo</code>
@property (nonatomic, copy) NSArray<id <FBSDKShareMedia>> * _Nonnull media;
/// URL for the content being shared.
/// This URL will be checked for all link meta tags for linking in platform specific ways.  See documentation
/// for App Links (https://developers.facebook.com/docs/applinks/)
@property (nonatomic, copy) NSURL * _Nullable contentURL;
/// Hashtag for the content being shared.
@property (nonatomic, strong) FBSDKHashtag * _Nullable hashtag;
/// List of IDs for taggable people to tag with this content.
/// See documentation for Taggable Friends
/// (https://developers.facebook.com/docs/graph-api/reference/user/taggable_friends)
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull peopleIDs;
/// The ID for a place to tag with this content.
@property (nonatomic, copy) NSString * _Nullable placeID;
/// A value to be added to the referrer URL when a person follows a link from this shared content on feed.
@property (nonatomic, copy) NSString * _Nullable ref;
/// For shares into Messenger, this pageID will be used to map the app to page and attach attribution to the share.
@property (nonatomic, copy) NSString * _Nullable pageID;
/// A unique identifier for a share involving this content, useful for tracking purposes.
@property (nonatomic, readonly, copy) NSString * _Nullable shareUUID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface FBSDKShareMediaContent (SWIFT_EXTENSION(FBSDKShareKit)) <FBSDKSharingValidatable>
/// Asks the receiver to validate that its content or media values are valid.
- (BOOL)validateWithOptions:(FBSDKShareBridgeOptions)bridgeOptions error:(NSError * _Nullable * _Nullable)error;
@end


@interface FBSDKShareMediaContent (SWIFT_EXTENSION(FBSDKShareKit)) <FBSDKSharingContent>
/// Adds content to an existing dictionary as key/value pairs and returns the
/// updated dictionary
/// @param existingParameters An immutable dictionary of existing values
/// @param bridgeOptions The options for bridging
/// @return A new dictionary with the modified contents
- (NSDictionary<NSString *, id> * _Nonnull)addParameters:(NSDictionary<NSString *, id> * _Nonnull)existingParameters bridgeOptions:(FBSDKShareBridgeOptions)bridgeOptions SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;
@class PHAsset;

/// A photo for sharing.
SWIFT_CLASS_NAMED("SharePhoto")
@interface FBSDKSharePhoto : NSObject <FBSDKShareMedia>
/// If the photo is resident in memory, this method supplies the data.
@property (nonatomic, strong) UIImage * _Nullable image;
/// URL that points to a network location or the location of the photo on disk
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// The representation of the photo in the Photos library.
@property (nonatomic, strong) PHAsset * _Nullable photoAsset;
/// Specifies whether the photo represented by the receiver was generated by the user (<code>true</code>)
/// or by the application (<code>false</code>).
@property (nonatomic) BOOL isUserGenerated;
/// The user-generated caption for the photo. Note that the ‘caption’ must come from
/// the user, as pre-filled content is forbidden by the Platform Policies (2.3).
@property (nonatomic, copy) NSString * _Nullable caption;
/// Convenience method to build a new photo object with an image.
/// \param image If the photo is resident in memory, this method supplies the data 
///
/// \param isUserGenerated Specifies whether the photo represented by the receiver was generated by the user or by the 
/// application
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image isUserGenerated:(BOOL)isUserGenerated;
/// Convenience method to build a new photo object with an imageURL.
/// This method should only be used when adding photo content to open graph stories.
/// For example, if you’re trying to share a photo from the web by itself, download the image and use
/// <code>init(image:isUserGenerated:)</code> instead.
/// \param imageURL The URL to the photo 
///
/// \param isUserGenerated Specifies whether the photo represented by the receiver was generated by the user or by the 
/// application
///
- (nonnull instancetype)initWithImageURL:(NSURL * _Nonnull)imageURL isUserGenerated:(BOOL)isUserGenerated;
/// Convenience method to build a new photo object with a PHAsset.
/// \param photoAsset The PHAsset that represents the photo in the Photos library.
///
/// \param isUserGenerated Specifies whether the photo represented by the receiver was generated by the user or by
/// the application
///
- (nonnull instancetype)initWithPhotoAsset:(PHAsset * _Nonnull)photoAsset isUserGenerated:(BOOL)isUserGenerated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface FBSDKSharePhoto (SWIFT_EXTENSION(FBSDKShareKit)) <FBSDKSharingValidatable>
/// Asks the receiver to validate that its content or media values are valid.
- (BOOL)validateWithOptions:(FBSDKShareBridgeOptions)bridgeOptions error:(NSError * _Nullable * _Nullable)error;
@end



/// A model for photo content to be shared.
SWIFT_CLASS_NAMED("SharePhotoContent")
@interface FBSDKSharePhotoContent : NSObject
/// Photos to be shared.
@property (nonatomic, copy) NSArray<FBSDKSharePhoto *> * _Nonnull photos;
/// URL for the content being shared.
/// This URL will be checked for all link meta tags for linking in platform specific ways.  See documentation
/// for App Links (https://developers.facebook.com/docs/applinks/)
@property (nonatomic, copy) NSURL * _Nullable contentURL;
/// Hashtag for the content being shared.
@property (nonatomic, strong) FBSDKHashtag * _Nullable hashtag;
/// List of IDs for taggable people to tag with this content.
/// See documentation for Taggable Friends
/// (https://developers.facebook.com/docs/graph-api/reference/user/taggable_friends)
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull peopleIDs;
/// The ID for a place to tag with this content.
@property (nonatomic, copy) NSString * _Nullable placeID;
/// A value to be added to the referrer URL when a person follows a link from this shared content on feed.
@property (nonatomic, copy) NSString * _Nullable ref;
/// For shares into Messenger, this pageID will be used to map the app to page and attach attribution to the share.
@property (nonatomic, copy) NSString * _Nullable pageID;
/// A unique identifier for a share involving this content, useful for tracking purposes.
@property (nonatomic, readonly, copy) NSString * _Nullable shareUUID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface FBSDKSharePhotoContent (SWIFT_EXTENSION(FBSDKShareKit)) <FBSDKSharingContent>
/// Adds content to an existing dictionary as key/value pairs and returns the
/// updated dictionary
/// @param existingParameters An immutable dictionary of existing values
/// @param bridgeOptions The options for bridging
/// @return A new dictionary with the modified contents
- (NSDictionary<NSString *, id> * _Nonnull)addParameters:(NSDictionary<NSString *, id> * _Nonnull)existingParameters bridgeOptions:(FBSDKShareBridgeOptions)bridgeOptions SWIFT_WARN_UNUSED_RESULT;
@end


@interface FBSDKSharePhotoContent (SWIFT_EXTENSION(FBSDKShareKit)) <FBSDKSharingValidatable>
/// Validate that this content contains valid values
- (BOOL)validateWithOptions:(FBSDKShareBridgeOptions)bridgeOptions error:(NSError * _Nullable * _Nullable)error;
@end


@class NSData;

/// A video for sharing.
SWIFT_CLASS_NAMED("ShareVideo")
@interface FBSDKShareVideo : NSObject <FBSDKShareMedia>
/// The raw video data.
@property (nonatomic, copy) NSData * _Nullable data;
/// The representation of the video in the Photos library.
@property (nonatomic, strong) PHAsset * _Nullable videoAsset;
/// The file URL to the video.
@property (nonatomic, copy) NSURL * _Nullable videoURL;
/// The photo that represents the video.
@property (nonatomic, strong) FBSDKSharePhoto * _Nullable previewPhoto;
/// Convenience method to build a new video object from raw data and an optional preview photo.
/// \param data The Data object that holds the raw video data.
///
/// \param previewPhoto The photo that represents the video.
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data previewPhoto:(FBSDKSharePhoto * _Nullable)previewPhoto;
/// Convenience method to build a new video object from a PHAsset and an optional preview photo.
/// \param videoAsset The PHAsset that represents the video in the Photos library.
///
/// \param previewPhoto The photo that represents the video.
///
- (nonnull instancetype)initWithVideoAsset:(PHAsset * _Nonnull)videoAsset previewPhoto:(FBSDKSharePhoto * _Nullable)previewPhoto;
/// Convenience method to build a new video object from a URL and an optional preview photo.
/// \param videoURL The URL to the video.
///
/// \param previewPhoto The photo that represents the video.
///
- (nonnull instancetype)initWithVideoURL:(NSURL * _Nonnull)videoURL previewPhoto:(FBSDKSharePhoto * _Nullable)previewPhoto;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface FBSDKShareVideo (SWIFT_EXTENSION(FBSDKShareKit)) <FBSDKSharingValidatable>
/// Asks the receiver to validate that its content or media values are valid.
- (BOOL)validateWithOptions:(FBSDKShareBridgeOptions)bridgeOptions error:(NSError * _Nullable * _Nullable)error;
@end



/// A model for video content to be shared.
SWIFT_CLASS_NAMED("ShareVideoContent")
@interface FBSDKShareVideoContent : NSObject
/// The video to be shared
@property (nonatomic, strong) FBSDKShareVideo * _Nonnull video;
/// URL for the content being shared.
/// This URL will be checked for all link meta tags for linking in platform specific ways.  See documentation
/// for App Links (https://developers.facebook.com/docs/applinks/)
@property (nonatomic, copy) NSURL * _Nullable contentURL;
/// Hashtag for the content being shared.
@property (nonatomic, strong) FBSDKHashtag * _Nullable hashtag;
/// List of IDs for taggable people to tag with this content.
/// See documentation for Taggable Friends
/// (https://developers.facebook.com/docs/graph-api/reference/user/taggable_friends)
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull peopleIDs;
/// The ID for a place to tag with this content.
@property (nonatomic, copy) NSString * _Nullable placeID;
/// A value to be added to the referrer URL when a person follows a link from this shared content on feed.
@property (nonatomic, copy) NSString * _Nullable ref;
/// For shares into Messenger, this pageID will be used to map the app to page and attach attribution to the share.
@property (nonatomic, copy) NSString * _Nullable pageID;
/// A unique identifier for a share involving this content, useful for tracking purposes.
@property (nonatomic, readonly, copy) NSString * _Nullable shareUUID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface FBSDKShareVideoContent (SWIFT_EXTENSION(FBSDKShareKit)) <FBSDKSharingContent>
/// Adds content to an existing dictionary as key/value pairs and returns the
/// updated dictionary
/// @param existingParameters An immutable dictionary of existing values
/// @param bridgeOptions The options for bridging
/// @return A new dictionary with the modified contents
- (NSDictionary<NSString *, id> * _Nonnull)addParameters:(NSDictionary<NSString *, id> * _Nonnull)existingParameters bridgeOptions:(FBSDKShareBridgeOptions)bridgeOptions SWIFT_WARN_UNUSED_RESULT;
@end


@interface FBSDKShareVideoContent (SWIFT_EXTENSION(FBSDKShareKit)) <FBSDKSharingValidatable>
- (BOOL)validateWithOptions:(FBSDKShareBridgeOptions)bridgeOptions error:(NSError * _Nullable * _Nullable)error;
@end



/// The common interface for sharing buttons.
/// See FBSendButton and FBShareButton
SWIFT_PROTOCOL_NAMED("SharingButton") SWIFT_AVAILABILITY(tvos,unavailable)
@protocol FBSDKSharingButton
/// The content to be shared.
@property (nonatomic, strong) id <FBSDKSharingContent> _Nullable shareContent;
@end




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
