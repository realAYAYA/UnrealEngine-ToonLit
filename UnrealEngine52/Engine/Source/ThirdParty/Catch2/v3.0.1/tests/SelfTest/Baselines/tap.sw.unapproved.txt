# rng-seed: 1
Before Global - Default Group
Before Global - Apples
Before Global - Oranges
Before All - Default Group
# # A test name that starts with a #
ok {test-number} -[0m with 1 message:[0m 'yay'
# #1027: Bitfields can be captured
ok {test-number} - y.v == 0[0;37m for: [0m0 == 0
# #1027: Bitfields can be captured
ok {test-number} - 0 == y.v[0;37m for: [0m0 == 0
# #1147
ok {test-number} - t1 == t2[0;37m for: [0m{?} == {?}
# #1147
ok {test-number} - t1 != t2[0;37m for: [0m{?} != {?}
# #1147
ok {test-number} - t1 < t2[0;37m for: [0m{?} < {?}
# #1147
ok {test-number} - t1 > t2[0;37m for: [0m{?} > {?}
# #1147
ok {test-number} - t1 <= t2[0;37m for: [0m{?} <= {?}
# #1147
ok {test-number} - t1 >= t2[0;37m for: [0m{?} >= {?}
# #1175 - Hidden Test
ok {test-number} -
# #1238
ok {test-number} - std::memcmp(uarr, "123", sizeof(uarr)) == 0[0;37m for: [0m0 == 0[0;37m with 2 messages:[0m 'uarr := "123"'[0;37m and[0m 'sarr := "456"'
# #1238
ok {test-number} - std::memcmp(sarr, "456", sizeof(sarr)) == 0[0;37m for: [0m0 == 0[0;37m with 2 messages:[0m 'uarr := "123"'[0;37m and[0m 'sarr := "456"'
# #1245
ok {test-number} -
# #1319: Sections can have description (even if it is not saved
ok {test-number} -
# #1403
ok {test-number} - h1 == h2[0;37m for: [0m[1403 helper] == [1403 helper]
# #1455 - INFO and WARN can start with a linebreak
warning {test-number} - '
This info message starts with a linebreak'[0;37m with 1 message:[0m '
This warning message starts with a linebreak'
This would not be caught previously
Nor would this
# #1514: stderr/stdout is not captured in tests aborted by an exception
not ok {test-number} - explicitly[0m with 1 message:[0m '1514'
# #1548
ok {test-number} - std::is_same<TypeList<int>, TypeList<int>>::value[0;37m for: [0mtrue
# #1905 -- test spec parser properly clears internal state between compound tests
ok {test-number} - spec.matches(*fakeTestCase("spec . char"))[0;37m for: [0mtrue
# #1905 -- test spec parser properly clears internal state between compound tests
ok {test-number} - spec.matches(*fakeTestCase("spec , char"))[0;37m for: [0mtrue
# #1905 -- test spec parser properly clears internal state between compound tests
ok {test-number} - !(spec.matches(*fakeTestCase(R"(spec \, char)")))[0;37m for: [0m!false
# #1912 -- test spec parser handles escaping
ok {test-number} - spec.matches(*fakeTestCase(R"(spec {a} char)"))[0;37m for: [0mtrue
# #1912 -- test spec parser handles escaping
ok {test-number} - spec.matches(*fakeTestCase(R"(spec [a] char)"))[0;37m for: [0mtrue
# #1912 -- test spec parser handles escaping
ok {test-number} - !(spec.matches(*fakeTestCase("differs but has similar tag", "[a]")))[0;37m for: [0m!false
# #1912 -- test spec parser handles escaping
ok {test-number} - spec.matches(*fakeTestCase(R"(spec \ char)"))[0;37m for: [0mtrue
# #1913 - GENERATE inside a for loop should not keep recreating the generator
ok {test-number} - counter < 7[0;37m for: [0m3 < 7
# #1913 - GENERATE inside a for loop should not keep recreating the generator
ok {test-number} - counter < 7[0;37m for: [0m6 < 7
# #1913 - GENERATEs can share a line
ok {test-number} - i != j[0;37m for: [0m1 != 3
# #1913 - GENERATEs can share a line
ok {test-number} - i != j[0;37m for: [0m1 != 4
# #1913 - GENERATEs can share a line
ok {test-number} - i != j[0;37m for: [0m2 != 3
# #1913 - GENERATEs can share a line
ok {test-number} - i != j[0;37m for: [0m2 != 4
# #1938 - GENERATE after a section
ok {test-number} -[0m with 1 message:[0m 'A'
# #1938 - GENERATE after a section
ok {test-number} - m[0;37m for: [0m1
# #1938 - GENERATE after a section
ok {test-number} - m[0;37m for: [0m2
# #1938 - GENERATE after a section
ok {test-number} - m[0;37m for: [0m3
# #1938 - Section followed by flat generate
ok {test-number} - 1
# #1938 - Section followed by flat generate
ok {test-number} - m[0;37m for: [0m2
# #1938 - Section followed by flat generate
ok {test-number} - m[0;37m for: [0m3
# #1938 - flat generate
ok {test-number} - m[0;37m for: [0m1
# #1938 - flat generate
ok {test-number} - m[0;37m for: [0m2
# #1938 - flat generate
ok {test-number} - m[0;37m for: [0m3
# #1938 - mixed sections and generates
ok {test-number} -[0m with 1 message:[0m 'A'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 3 messages:[0m 'i := 1'[0;37m and[0m 'j := 3'[0;37m and[0m 'k := 5'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 1 message:[0m 'B'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 3 messages:[0m 'i := 1'[0;37m and[0m 'j := 3'[0;37m and[0m 'k := 6'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 1 message:[0m 'B'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 3 messages:[0m 'i := 1'[0;37m and[0m 'j := 4'[0;37m and[0m 'k := 5'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 3 messages:[0m 'i := 1'[0;37m and[0m 'j := 4'[0;37m and[0m 'k := 6'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 1 message:[0m 'A'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 3 messages:[0m 'i := 2'[0;37m and[0m 'j := 3'[0;37m and[0m 'k := 5'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 1 message:[0m 'B'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 3 messages:[0m 'i := 2'[0;37m and[0m 'j := 3'[0;37m and[0m 'k := 6'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 1 message:[0m 'B'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 3 messages:[0m 'i := 2'[0;37m and[0m 'j := 4'[0;37m and[0m 'k := 5'
# #1938 - mixed sections and generates
ok {test-number} -[0m with 3 messages:[0m 'i := 2'[0;37m and[0m 'j := 4'[0;37m and[0m 'k := 6'
# #1938 - nested generate
ok {test-number} - m[0;37m for: [0m1
# #1938 - nested generate
ok {test-number} - n[0;37m for: [0m1
# #1938 - nested generate
ok {test-number} - m[0;37m for: [0m1
# #1938 - nested generate
ok {test-number} - n[0;37m for: [0m2
# #1938 - nested generate
ok {test-number} - m[0;37m for: [0m1
# #1938 - nested generate
ok {test-number} - n[0;37m for: [0m3
# #1938 - nested generate
ok {test-number} - m[0;37m for: [0m2
# #1938 - nested generate
ok {test-number} - n[0;37m for: [0m1
# #1938 - nested generate
ok {test-number} - m[0;37m for: [0m2
# #1938 - nested generate
ok {test-number} - n[0;37m for: [0m2
# #1938 - nested generate
ok {test-number} - m[0;37m for: [0m2
# #1938 - nested generate
ok {test-number} - n[0;37m for: [0m3
# #1938 - nested generate
ok {test-number} - m[0;37m for: [0m3
# #1938 - nested generate
ok {test-number} - n[0;37m for: [0m1
# #1938 - nested generate
ok {test-number} - m[0;37m for: [0m3
# #1938 - nested generate
ok {test-number} - n[0;37m for: [0m2
# #1938 - nested generate
ok {test-number} - m[0;37m for: [0m3
# #1938 - nested generate
ok {test-number} - n[0;37m for: [0m3
# #1954 - 7 arg template test case sig compiles - 1, 1, 1, 1, 1, 0, 0
ok {test-number} -
# #1954 - 7 arg template test case sig compiles - 5, 1, 1, 1, 1, 0, 0
ok {test-number} -
# #1954 - 7 arg template test case sig compiles - 5, 3, 1, 1, 1, 0, 0
ok {test-number} -
# #2152 - ULP checks between differently signed values were wrong - double
ok {test-number} - smallest_non_zero, WithinULP( -smallest_non_zero, 2 )[0;37m for: [0m0.0 is within 2 ULPs of -4.9406564584124654e-324 ([-1.4821969375237396e-323, 4.9406564584124654e-324])
# #2152 - ULP checks between differently signed values were wrong - double
ok {test-number} - smallest_non_zero, !WithinULP( -smallest_non_zero, 1 )[0;37m for: [0m0.0 not is within 1 ULPs of -4.9406564584124654e-324 ([-9.8813129168249309e-324, -0.0000000000000000e+00])
# #2152 - ULP checks between differently signed values were wrong - float
ok {test-number} - smallest_non_zero, WithinULP( -smallest_non_zero, 2 )[0;37m for: [0m0.0f is within 2 ULPs of -1.40129846e-45f ([-4.20389539e-45, 1.40129846e-45])
# #2152 - ULP checks between differently signed values were wrong - float
ok {test-number} - smallest_non_zero, !WithinULP( -smallest_non_zero, 1 )[0;37m for: [0m0.0f not is within 1 ULPs of -1.40129846e-45f ([-2.80259693e-45, -0.00000000e+00])
# #748 - captures with unexpected exceptions
not ok {test-number} - unexpected exception with message: 'answer := 42'[0;37m with 1 message:[0m 'expected exception'
# #748 - captures with unexpected exceptions
not ok {test-number} - unexpected exception with message: 'answer := 42';[0;37m expression was:[0m thisThrows()[0;37m with 1 message:[0m 'expected exception'
# #748 - captures with unexpected exceptions
ok {test-number} - thisThrows()[0;37m with 1 message:[0m 'answer := 42'
# #809
ok {test-number} - 42 == f[0;37m for: [0m42 == {?}
# #833
ok {test-number} - a == t[0;37m for: [0m3 == 3
# #833
ok {test-number} - a == t[0;37m for: [0m3 == 3
# #833
ok {test-number} - throws_int(true)
# #833
ok {test-number} - throws_int(true), int
# #833
ok {test-number} - throws_int(false)
# #833
ok {test-number} - "aaa", Catch::Matchers::EndsWith("aaa")[0;37m for: [0m"aaa" ends with: "aaa"
# #833
ok {test-number} - templated_tests<int>(3)[0;37m for: [0mtrue
# #835 -- errno should not be touched by Catch2
not ok {test-number} - f() == 0[0;37m for: [0m1 == 0
# #835 -- errno should not be touched by Catch2
ok {test-number} - errno_after == 1[0;37m for: [0m1 == 1
# #872
ok {test-number} - x == 4[0;37m for: [0m{?} == 4[0;37m with 1 message:[0m 'dummy := 0'
# #961 -- Dynamically created sections should all be reported
ok {test-number} -[0m with 1 message:[0m 'Everything is OK'
# #961 -- Dynamically created sections should all be reported
ok {test-number} -[0m with 1 message:[0m 'Everything is OK'
# #961 -- Dynamically created sections should all be reported
ok {test-number} -[0m with 1 message:[0m 'Everything is OK'
# #961 -- Dynamically created sections should all be reported
ok {test-number} -[0m with 1 message:[0m 'Everything is OK'
# #961 -- Dynamically created sections should all be reported
ok {test-number} -[0m with 1 message:[0m 'Everything is OK'
# 'Not' checks that should fail
not ok {test-number} - false != false
# 'Not' checks that should fail
not ok {test-number} - true != true
# 'Not' checks that should fail
not ok {test-number} - !true[0;37m for: [0mfalse
# 'Not' checks that should fail
not ok {test-number} - !(true)[0;37m for: [0m!true
# 'Not' checks that should fail
not ok {test-number} - !trueValue[0;37m for: [0mfalse
# 'Not' checks that should fail
not ok {test-number} - !(trueValue)[0;37m for: [0m!true
# 'Not' checks that should fail
not ok {test-number} - !(1 == 1)[0;37m for: [0mfalse
# 'Not' checks that should fail
not ok {test-number} - !(1 == 1)
# 'Not' checks that should succeed
ok {test-number} - false == false
# 'Not' checks that should succeed
ok {test-number} - true == true
# 'Not' checks that should succeed
ok {test-number} - !false[0;37m for: [0mtrue
# 'Not' checks that should succeed
ok {test-number} - !(false)[0;37m for: [0m!false
# 'Not' checks that should succeed
ok {test-number} - !falseValue[0;37m for: [0mtrue
# 'Not' checks that should succeed
ok {test-number} - !(falseValue)[0;37m for: [0m!false
# 'Not' checks that should succeed
ok {test-number} - !(1 == 2)[0;37m for: [0mtrue
# 'Not' checks that should succeed
ok {test-number} - !(1 == 2)
# (unimplemented) static bools can be evaluated
ok {test-number} - is_true<true>::value == true[0;37m for: [0mtrue == true
# (unimplemented) static bools can be evaluated
ok {test-number} - true == is_true<true>::value[0;37m for: [0mtrue == true
# (unimplemented) static bools can be evaluated
ok {test-number} - is_true<false>::value == false[0;37m for: [0mfalse == false
# (unimplemented) static bools can be evaluated
ok {test-number} - false == is_true<false>::value[0;37m for: [0mfalse == false
# (unimplemented) static bools can be evaluated
ok {test-number} - !is_true<false>::value[0;37m for: [0mtrue
# (unimplemented) static bools can be evaluated
ok {test-number} - !!is_true<true>::value[0;37m for: [0mtrue
# (unimplemented) static bools can be evaluated
ok {test-number} - is_true<true>::value[0;37m for: [0mtrue
# (unimplemented) static bools can be evaluated
ok {test-number} - !(is_true<false>::value)[0;37m for: [0m!false
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m1 < 4
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m4 < 7
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m1 < 7
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m1 < 4
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m4 < 8
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m1 < 8
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m1 < 4
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m4 < 9
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m1 < 9
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m1 < 5
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m5 < 7
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m1 < 7
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m1 < 5
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m5 < 8
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m1 < 8
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m1 < 5
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m5 < 9
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m1 < 9
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m1 < 6
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m6 < 7
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m1 < 7
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m1 < 6
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m6 < 8
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m1 < 8
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m1 < 6
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m6 < 9
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m1 < 9
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m2 < 4
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m4 < 7
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m2 < 7
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m2 < 4
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m4 < 8
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m2 < 8
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m2 < 4
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m4 < 9
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m2 < 9
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m2 < 5
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m5 < 7
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m2 < 7
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m2 < 5
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m5 < 8
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m2 < 8
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m2 < 5
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m5 < 9
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m2 < 9
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m2 < 6
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m6 < 7
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m2 < 7
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m2 < 6
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m6 < 8
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m2 < 8
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m2 < 6
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m6 < 9
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m2 < 9
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m3 < 4
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m4 < 7
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m3 < 7
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m3 < 4
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m4 < 8
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m3 < 8
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m3 < 4
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m4 < 9
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m3 < 9
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m3 < 5
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m5 < 7
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m3 < 7
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m3 < 5
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m5 < 8
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m3 < 8
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m3 < 5
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m5 < 9
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m3 < 9
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m3 < 6
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m6 < 7
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m3 < 7
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m3 < 6
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m6 < 8
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m3 < 8
# 3x3x3 ints
ok {test-number} - x < y[0;37m for: [0m3 < 6
# 3x3x3 ints
ok {test-number} - y < z[0;37m for: [0m6 < 9
# 3x3x3 ints
ok {test-number} - x < z[0;37m for: [0m3 < 9
# A METHOD_AS_TEST_CASE based test run that fails
not ok {test-number} - s == "world"[0;37m for: [0m"hello" == "world"
# A METHOD_AS_TEST_CASE based test run that succeeds
ok {test-number} - s == "hello"[0;37m for: [0m"hello" == "hello"
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo<float>
not ok {test-number} - Template_Fixture_2<TestType>::m_a.size() == 1[0;37m for: [0m0 == 1
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - Template_Foo<int>
not ok {test-number} - Template_Fixture_2<TestType>::m_a.size() == 1[0;37m for: [0m0 == 1
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector<float>
not ok {test-number} - Template_Fixture_2<TestType>::m_a.size() == 1[0;37m for: [0m0 == 1
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that fails - std::vector<int>
not ok {test-number} - Template_Fixture_2<TestType>::m_a.size() == 1[0;37m for: [0m0 == 1
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo<float>
ok {test-number} - Template_Fixture_2<TestType>::m_a.size() == 0[0;37m for: [0m0 == 0
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - Template_Foo<int>
ok {test-number} - Template_Fixture_2<TestType>::m_a.size() == 0[0;37m for: [0m0 == 0
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector<float>
ok {test-number} - Template_Fixture_2<TestType>::m_a.size() == 0[0;37m for: [0m0 == 0
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD based test run that succeeds - std::vector<int>
ok {test-number} - Template_Fixture_2<TestType>::m_a.size() == 0[0;37m for: [0m0 == 0
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2<float, 6>
not ok {test-number} - Template_Fixture_2<TestType>{}.m_a.size() < 2[0;37m for: [0m6 < 2
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - Template_Foo_2<int, 2>
not ok {test-number} - Template_Fixture_2<TestType>{}.m_a.size() < 2[0;37m for: [0m2 < 2
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array<float, 6>
not ok {test-number} - Template_Fixture_2<TestType>{}.m_a.size() < 2[0;37m for: [0m6 < 2
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that fails - std::array<int, 2>
not ok {test-number} - Template_Fixture_2<TestType>{}.m_a.size() < 2[0;37m for: [0m2 < 2
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2<float,6>
ok {test-number} - Template_Fixture_2<TestType>{}.m_a.size() >= 2[0;37m for: [0m6 >= 2
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - Template_Foo_2<int,2>
ok {test-number} - Template_Fixture_2<TestType>{}.m_a.size() >= 2[0;37m for: [0m2 >= 2
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array<float,6>
ok {test-number} - Template_Fixture_2<TestType>{}.m_a.size() >= 2[0;37m for: [0m6 >= 2
# A TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG based test run that succeeds - std::array<int,2>
ok {test-number} - Template_Fixture_2<TestType>{}.m_a.size() >= 2[0;37m for: [0m2 >= 2
# A TEMPLATE_TEST_CASE_METHOD based test run that fails - double
not ok {test-number} - Template_Fixture<TestType>::m_a == 2[0;37m for: [0m1.0 == 2
# A TEMPLATE_TEST_CASE_METHOD based test run that fails - float
not ok {test-number} - Template_Fixture<TestType>::m_a == 2[0;37m for: [0m1.0f == 2
# A TEMPLATE_TEST_CASE_METHOD based test run that fails - int
not ok {test-number} - Template_Fixture<TestType>::m_a == 2[0;37m for: [0m1 == 2
# A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - double
ok {test-number} - Template_Fixture<TestType>::m_a == 1[0;37m for: [0m1.0 == 1
# A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - float
ok {test-number} - Template_Fixture<TestType>::m_a == 1[0;37m for: [0m1.0f == 1
# A TEMPLATE_TEST_CASE_METHOD based test run that succeeds - int
ok {test-number} - Template_Fixture<TestType>::m_a == 1[0;37m for: [0m1 == 1
# A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 1
not ok {test-number} - Nttp_Fixture<V>::value == 0[0;37m for: [0m1 == 0
# A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 3
not ok {test-number} - Nttp_Fixture<V>::value == 0[0;37m for: [0m3 == 0
# A TEMPLATE_TEST_CASE_METHOD_SIG based test run that fails - 6
not ok {test-number} - Nttp_Fixture<V>::value == 0[0;37m for: [0m6 == 0
# A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 1
ok {test-number} - Nttp_Fixture<V>::value > 0[0;37m for: [0m1 > 0
# A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 3
ok {test-number} - Nttp_Fixture<V>::value > 0[0;37m for: [0m3 > 0
# A TEMPLATE_TEST_CASE_METHOD_SIG based test run that succeeds - 6
ok {test-number} - Nttp_Fixture<V>::value > 0[0;37m for: [0m6 > 0
# A TEST_CASE_METHOD based test run that fails
not ok {test-number} - m_a == 2[0;37m for: [0m1 == 2
# A TEST_CASE_METHOD based test run that succeeds
ok {test-number} - m_a == 1[0;37m for: [0m1 == 1
# A Template product test case - Foo<float>
ok {test-number} - x.size() == 0[0;37m for: [0m0 == 0
# A Template product test case - Foo<int>
ok {test-number} - x.size() == 0[0;37m for: [0m0 == 0
# A Template product test case - std::vector<float>
ok {test-number} - x.size() == 0[0;37m for: [0m0 == 0
# A Template product test case - std::vector<int>
ok {test-number} - x.size() == 0[0;37m for: [0m0 == 0
# A Template product test case with array signature - Bar<float, 42>
ok {test-number} - x.size() > 0[0;37m for: [0m42 > 0
# A Template product test case with array signature - Bar<int, 9>
ok {test-number} - x.size() > 0[0;37m for: [0m9 > 0
# A Template product test case with array signature - std::array<float, 42>
ok {test-number} - x.size() > 0[0;37m for: [0m42 > 0
# A Template product test case with array signature - std::array<int, 9>
ok {test-number} - x.size() > 0[0;37m for: [0m9 > 0
# A comparison that uses literals instead of the normal constructor
ok {test-number} - d == 1.23_a[0;37m for: [0m1.23 == Approx( 1.23 )
# A comparison that uses literals instead of the normal constructor
ok {test-number} - d != 1.22_a[0;37m for: [0m1.23 != Approx( 1.22 )
# A comparison that uses literals instead of the normal constructor
ok {test-number} - -d == -1.23_a[0;37m for: [0m-1.23 == Approx( -1.23 )
# A comparison that uses literals instead of the normal constructor
ok {test-number} - d == 1.2_a .epsilon(.1)[0;37m for: [0m1.23 == Approx( 1.2 )
# A comparison that uses literals instead of the normal constructor
ok {test-number} - d != 1.2_a .epsilon(.001)[0;37m for: [0m1.23 != Approx( 1.2 )
# A comparison that uses literals instead of the normal constructor
ok {test-number} - d == 1_a .epsilon(.3)[0;37m for: [0m1.23 == Approx( 1.0 )
# A couple of nested sections followed by a failure
ok {test-number} -[0m with 1 message:[0m 'that's not flying - that's failing in style'
# A couple of nested sections followed by a failure
not ok {test-number} - explicitly[0m with 1 message:[0m 'to infinity and beyond'
# A failing expression with a non streamable type is still captured
not ok {test-number} - &o1 == &o2[0;37m for: [0m0x000000549a73e674 == 0x<hex digits>
# A failing expression with a non streamable type is still captured
not ok {test-number} - o1 == o2[0;37m for: [0m{?} == {?}
# Absolute margin
ok {test-number} - 104.0 != Approx(100.0)[0;37m for: [0m104.0 != Approx( 100.0 )
# Absolute margin
ok {test-number} - 104.0 == Approx(100.0).margin(5)[0;37m for: [0m104.0 == Approx( 100.0 )
# Absolute margin
ok {test-number} - 104.0 == Approx(100.0).margin(4)[0;37m for: [0m104.0 == Approx( 100.0 )
# Absolute margin
ok {test-number} - 104.0 != Approx(100.0).margin(3)[0;37m for: [0m104.0 != Approx( 100.0 )
# Absolute margin
ok {test-number} - 100.3 != Approx(100.0)[0;37m for: [0m100.3 != Approx( 100.0 )
# Absolute margin
ok {test-number} - 100.3 == Approx(100.0).margin(0.5)[0;37m for: [0m100.3 == Approx( 100.0 )
# An expression with side-effects should only be evaluated once
ok {test-number} - i++ == 7[0;37m for: [0m7 == 7
# An expression with side-effects should only be evaluated once
ok {test-number} - i++ == 8[0;37m for: [0m8 == 8
# An unchecked exception reports the line of the last assertion
ok {test-number} - 1 == 1
# An unchecked exception reports the line of the last assertion
not ok {test-number} - unexpected exception with message: 'unexpected exception';[0;37m expression was:[0m {Unknown expression after the reported line}
# Anonymous test case 3
ok {test-number} -[0m with 1 message:[0m 'anonymous test case'
# Approx setters validate their arguments
ok {test-number} - Approx(0).margin(0)
# Approx setters validate their arguments
ok {test-number} - Approx(0).margin(1234656)
# Approx setters validate their arguments
ok {test-number} - Approx(0).margin(-2), std::domain_error
# Approx setters validate their arguments
ok {test-number} - Approx(0).epsilon(0)
# Approx setters validate their arguments
ok {test-number} - Approx(0).epsilon(1)
# Approx setters validate their arguments
ok {test-number} - Approx(0).epsilon(-0.001), std::domain_error
# Approx setters validate their arguments
ok {test-number} - Approx(0).epsilon(1.0001), std::domain_error
# Approx with exactly-representable margin
ok {test-number} - 0.25f == Approx(0.0f).margin(0.25f)[0;37m for: [0m0.25f == Approx( 0.0 )
# Approx with exactly-representable margin
ok {test-number} - 0.0f == Approx(0.25f).margin(0.25f)[0;37m for: [0m0.0f == Approx( 0.25 )
# Approx with exactly-representable margin
ok {test-number} - 0.5f == Approx(0.25f).margin(0.25f)[0;37m for: [0m0.5f == Approx( 0.25 )
# Approx with exactly-representable margin
ok {test-number} - 245.0f == Approx(245.25f).margin(0.25f)[0;37m for: [0m245.0f == Approx( 245.25 )
# Approx with exactly-representable margin
ok {test-number} - 245.5f == Approx(245.25f).margin(0.25f)[0;37m for: [0m245.5f == Approx( 245.25 )
# Approximate PI
ok {test-number} - divide( 22, 7 ) == Approx( 3.141 ).epsilon( 0.001 )[0;37m for: [0m3.1428571429 == Approx( 3.141 )
# Approximate PI
ok {test-number} - divide( 22, 7 ) != Approx( 3.141 ).epsilon( 0.0001 )[0;37m for: [0m3.1428571429 != Approx( 3.141 )
# Approximate comparisons with different epsilons
ok {test-number} - d != Approx( 1.231 )[0;37m for: [0m1.23 != Approx( 1.231 )
# Approximate comparisons with different epsilons
ok {test-number} - d == Approx( 1.231 ).epsilon( 0.1 )[0;37m for: [0m1.23 == Approx( 1.231 )
# Approximate comparisons with floats
ok {test-number} - 1.23f == Approx( 1.23f )[0;37m for: [0m1.23f == Approx( 1.2300000191 )
# Approximate comparisons with floats
ok {test-number} - 0.0f == Approx( 0.0f )[0;37m for: [0m0.0f == Approx( 0.0 )
# Approximate comparisons with ints
ok {test-number} - 1 == Approx( 1 )[0;37m for: [0m1 == Approx( 1.0 )
# Approximate comparisons with ints
ok {test-number} - 0 == Approx( 0 )[0;37m for: [0m0 == Approx( 0.0 )
# Approximate comparisons with mixed numeric types
ok {test-number} - 1.0f == Approx( 1 )[0;37m for: [0m1.0f == Approx( 1.0 )
# Approximate comparisons with mixed numeric types
ok {test-number} - 0 == Approx( dZero)[0;37m for: [0m0 == Approx( 0.0 )
# Approximate comparisons with mixed numeric types
ok {test-number} - 0 == Approx( dSmall ).margin( 0.001 )[0;37m for: [0m0 == Approx( 0.00001 )
# Approximate comparisons with mixed numeric types
ok {test-number} - 1.234f == Approx( dMedium )[0;37m for: [0m1.234f == Approx( 1.234 )
# Approximate comparisons with mixed numeric types
ok {test-number} - dMedium == Approx( 1.234f )[0;37m for: [0m1.234 == Approx( 1.2339999676 )
# Arbitrary predicate matcher
ok {test-number} - 1, Predicate<int>( alwaysTrue, "always true" )[0;37m for: [0m1 matches predicate: "always true"
# Arbitrary predicate matcher
ok {test-number} - 1, !Predicate<int>( alwaysFalse, "always false" )[0;37m for: [0m1 not matches predicate: "always false"
# Arbitrary predicate matcher
ok {test-number} - "Hello olleH", Predicate<std::string>( []( std::string const& str ) -> bool { return str.front() == str.back(); }, "First and last character should be equal" )[0;37m for: [0m"Hello olleH" matches predicate: "First and last character should be equal"
# Arbitrary predicate matcher
ok {test-number} - "This wouldn't pass", !Predicate<std::string>( []( std::string const& str ) -> bool { return str.front() == str.back(); } )[0;37m for: [0m"This wouldn't pass" not matches undescribed predicate
# Assertion macros support bit operators and bool conversions
ok {test-number} - lhs | rhs[0;37m for: [0mVal: 1 | Val: 2
# Assertion macros support bit operators and bool conversions
ok {test-number} - !(lhs & rhs)[0;37m for: [0m!(Val: 1 & Val: 2)
# Assertion macros support bit operators and bool conversions
ok {test-number} - HasBitOperators{ 1 } & HasBitOperators{ 1 }[0;37m for: [0mVal: 1 & Val: 1
# Assertion macros support bit operators and bool conversions
ok {test-number} - lhs ^ rhs[0;37m for: [0mVal: 1 ^ Val: 2
# Assertion macros support bit operators and bool conversions
ok {test-number} - !(lhs ^ lhs)[0;37m for: [0m!(Val: 1 ^ Val: 1)
# Assertions then sections
ok {test-number} - true
# Assertions then sections
ok {test-number} - true
# Assertions then sections
ok {test-number} - true
# Assertions then sections
ok {test-number} - true
# Assertions then sections
ok {test-number} - true
# Assertions then sections
ok {test-number} - true
# Basic use of the Contains range matcher
ok {test-number} - a, Contains(1)[0;37m for: [0m{ 1, 2, 3 } contains element 1
# Basic use of the Contains range matcher
ok {test-number} - b, Contains(1)[0;37m for: [0m{ 0, 1, 2 } contains element 1
# Basic use of the Contains range matcher
ok {test-number} - c, !Contains(1)[0;37m for: [0m{ 4, 5, 6 } not contains element 1
# Basic use of the Contains range matcher
ok {test-number} - a, Contains(0, close_enough)[0;37m for: [0m{ 1, 2, 3 } contains element 0
# Basic use of the Contains range matcher
ok {test-number} - b, Contains(0, close_enough)[0;37m for: [0m{ 0, 1, 2 } contains element 0
# Basic use of the Contains range matcher
ok {test-number} - c, !Contains(0, close_enough)[0;37m for: [0m{ 4, 5, 6 } not contains element 0
# Basic use of the Contains range matcher
ok {test-number} - a, Contains(4, [](auto&& lhs, size_t sz) { return lhs.size() == sz; })[0;37m for: [0m{ "abc", "abcd", "abcde" } contains element 4
# Basic use of the Contains range matcher
ok {test-number} - in, Contains(1)[0;37m for: [0m{ 1, 2, 3, 4, 5 } contains element 1
# Basic use of the Contains range matcher
ok {test-number} - in, !Contains(8)[0;37m for: [0m{ 1, 2, 3, 4, 5 } not contains element 8
# Basic use of the Contains range matcher
ok {test-number} - in, Contains(MoveOnlyTestElement{ 2 })[0;37m for: [0m{ 1, 2, 3 } contains element 2
# Basic use of the Contains range matcher
ok {test-number} - in, !Contains(MoveOnlyTestElement{ 9 })[0;37m for: [0m{ 1, 2, 3 } not contains element 9
# Basic use of the Contains range matcher
ok {test-number} - in, Contains(Catch::Matchers::WithinAbs(0.5, 0.5))[0;37m for: [0m{ 1.0, 2.0, 3.0, 0.0 } contains element matching is within 0.5 of 0.5
# Basic use of the Empty range matcher
ok {test-number} - empty_array, IsEmpty()[0;37m for: [0m{  } is empty
# Basic use of the Empty range matcher
ok {test-number} - non_empty_array, !IsEmpty()[0;37m for: [0m{ 0.0 } not is empty
# Basic use of the Empty range matcher
ok {test-number} - empty_vec, IsEmpty()[0;37m for: [0m{  } is empty
# Basic use of the Empty range matcher
ok {test-number} - non_empty_vec, !IsEmpty()[0;37m for: [0m{ 'a', 'b', 'c' } not is empty
# Basic use of the Empty range matcher
ok {test-number} - inner_lists_are_empty, !IsEmpty()[0;37m for: [0m{ {  } } not is empty
# Basic use of the Empty range matcher
ok {test-number} - inner_lists_are_empty.front(), IsEmpty()[0;37m for: [0m{  } is empty
# Basic use of the Empty range matcher
ok {test-number} - has_empty{}, !IsEmpty()[0;37m for: [0m{?} not is empty
# Basic use of the Empty range matcher
ok {test-number} - unrelated::ADL_empty{}, IsEmpty()[0;37m for: [0m{?} is empty
# CAPTURE can deal with complex expressions
ok {test-number} -[0m with 7 messages:[0m 'a := 1'[0;37m and[0m 'b := 2'[0;37m and[0m 'c := 3'[0;37m and[0m 'a + b := 3'[0;37m and[0m 'a+b := 3'[0;37m and[0m 'c > b := true'[0;37m and[0m 'a == 1 := true'
# CAPTURE can deal with complex expressions involving commas
ok {test-number} -[0m with 7 messages:[0m 'std::vector<int>{1, 2, 3}[0, 1, 2] := 3'[0;37m and[0m 'std::vector<int>{1, 2, 3}[(0, 1)] := 2'[0;37m and[0m 'std::vector<int>{1, 2, 3}[0] := 1'[0;37m and[0m '(helper_1436<int, int>{12, -12}) := { 12, -12 }'[0;37m and[0m '(helper_1436<int, int>(-12, 12)) := { -12, 12 }'[0;37m and[0m '(1, 2) := 2'[0;37m and[0m '(2, 3) := 3'
# CAPTURE parses string and character constants
ok {test-number} -[0m with 11 messages:[0m '("comma, in string", "escaped, \", ") := "escaped, ", "'[0;37m and[0m '"single quote in string,'," := "single quote in string,',"'[0;37m and[0m '"some escapes, \\,\\\\" := "some escapes, \,\\"'[0;37m and[0m '"some, ), unmatched, } prenheses {[<" := "some, ), unmatched, } prenheses {[<"'[0;37m and[0m ''"' := '"''[0;37m and[0m ''\'' := ''''[0;37m and[0m '',' := ',''[0;37m and[0m ''}' := '}''[0;37m and[0m '')' := ')''[0;37m and[0m ''(' := '(''[0;37m and[0m ''{' := '{''
# Capture and info messages
ok {test-number} - true[0;37m with 1 message:[0m 'i := 2'
# Capture and info messages
ok {test-number} - true[0;37m with 1 message:[0m '3'
# CaseInsensitiveEqualsTo is case insensitive
ok {test-number} - eq( "", "" )[0;37m for: [0mtrue
# CaseInsensitiveEqualsTo is case insensitive
ok {test-number} - !(eq( "", "a" ))[0;37m for: [0m!false
# CaseInsensitiveEqualsTo is case insensitive
ok {test-number} - eq( "a", "a" )[0;37m for: [0mtrue
# CaseInsensitiveEqualsTo is case insensitive
ok {test-number} - eq( "a", "A" )[0;37m for: [0mtrue
# CaseInsensitiveEqualsTo is case insensitive
ok {test-number} - eq( "A", "a" )[0;37m for: [0mtrue
# CaseInsensitiveEqualsTo is case insensitive
ok {test-number} - eq( "A", "A" )[0;37m for: [0mtrue
# CaseInsensitiveEqualsTo is case insensitive
ok {test-number} - !(eq( "a", "b" ))[0;37m for: [0m!false
# CaseInsensitiveEqualsTo is case insensitive
ok {test-number} - !(eq( "a", "B" ))[0;37m for: [0m!false
# CaseInsensitiveLess is case insensitive
ok {test-number} - lt( "", "a" )[0;37m for: [0mtrue
# CaseInsensitiveLess is case insensitive
ok {test-number} - !(lt( "a", "a" ))[0;37m for: [0m!false
# CaseInsensitiveLess is case insensitive
ok {test-number} - !(lt( "", "" ))[0;37m for: [0m!false
# CaseInsensitiveLess is case insensitive
ok {test-number} - lt( "a", "b" )[0;37m for: [0mtrue
# CaseInsensitiveLess is case insensitive
ok {test-number} - lt( "a", "B" )[0;37m for: [0mtrue
# CaseInsensitiveLess is case insensitive
ok {test-number} - lt( "A", "b" )[0;37m for: [0mtrue
# CaseInsensitiveLess is case insensitive
ok {test-number} - lt( "A", "B" )[0;37m for: [0mtrue
# Character pretty printing
ok {test-number} - tab == '\t'[0;37m for: [0m'\t' == '\t'
# Character pretty printing
ok {test-number} - newline == '\n'[0;37m for: [0m'\n' == '\n'
# Character pretty printing
ok {test-number} - carr_return == '\r'[0;37m for: [0m'\r' == '\r'
# Character pretty printing
ok {test-number} - form_feed == '\f'[0;37m for: [0m'\f' == '\f'
# Character pretty printing
ok {test-number} - space == ' '[0;37m for: [0m' ' == ' '
# Character pretty printing
ok {test-number} - c == chars[i][0;37m for: [0m'a' == 'a'
# Character pretty printing
ok {test-number} - c == chars[i][0;37m for: [0m'z' == 'z'
# Character pretty printing
ok {test-number} - c == chars[i][0;37m for: [0m'A' == 'A'
# Character pretty printing
ok {test-number} - c == chars[i][0;37m for: [0m'Z' == 'Z'
# Character pretty printing
ok {test-number} - null_terminator == '\0'[0;37m for: [0m0 == 0
# Character pretty printing
ok {test-number} - c == i[0;37m for: [0m2 == 2
# Character pretty printing
ok {test-number} - c == i[0;37m for: [0m3 == 3
# Character pretty printing
ok {test-number} - c == i[0;37m for: [0m4 == 4
# Character pretty printing
ok {test-number} - c == i[0;37m for: [0m5 == 5
# Clara::Arg supports single-arg parse the way Opt does
ok {test-number} - name.empty()[0;37m for: [0mtrue
# Clara::Arg supports single-arg parse the way Opt does
ok {test-number} - name == "foo"[0;37m for: [0m"foo" == "foo"
# Clara::Opt supports accept-many lambdas
ok {test-number} - !(parse_result)[0;37m for: [0m!{?}
# Clara::Opt supports accept-many lambdas
ok {test-number} - parse_result[0;37m for: [0m{?}
# Clara::Opt supports accept-many lambdas
ok {test-number} - res == std::vector<std::string>{ "aaa", "bbb" }[0;37m for: [0m{ "aaa", "bbb" } == { "aaa", "bbb" }
# ColourGuard behaviour
ok {test-number} - streamWrapper.str().empty()[0;37m for: [0mtrue
# ColourGuard behaviour
ok {test-number} - streamWrapper.str() == "1\nUsing code: 2\n2\nUsing code: 0\n3\n"[0;37m for: [0m"1 Using code: 2 2 Using code: 0 3 " == "1 Using code: 2 2 Using code: 0 3 "
# ColourGuard behaviour
ok {test-number} - streamWrapper.str() == "Using code: 2\nA\nB\nUsing code: 0\nC\n"[0;37m for: [0m"Using code: 2 A B Using code: 0 C " == "Using code: 2 A B Using code: 0 C "
# Combining MatchAllOfGeneric does not nest
ok {test-number} -[0m with 1 message:[0m 'std::is_same< decltype( ( MatcherA() && MatcherB() ) && MatcherC() ), Catch::Matchers::Detail:: MatchAllOfGeneric<MatcherA, MatcherB, MatcherC>>::value'
# Combining MatchAllOfGeneric does not nest
ok {test-number} - 1, ( MatcherA() && MatcherB() ) && MatcherC()[0;37m for: [0m1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 and equals: (T) 1 )
# Combining MatchAllOfGeneric does not nest
ok {test-number} -[0m with 1 message:[0m 'std::is_same< decltype( MatcherA() && ( MatcherB() && MatcherC() ) ), Catch::Matchers::Detail:: MatchAllOfGeneric<MatcherA, MatcherB, MatcherC>>::value'
# Combining MatchAllOfGeneric does not nest
ok {test-number} - 1, MatcherA() && ( MatcherB() && MatcherC() )[0;37m for: [0m1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 and equals: (T) 1 )
# Combining MatchAllOfGeneric does not nest
ok {test-number} -[0m with 1 message:[0m 'std::is_same< decltype( ( MatcherA() && MatcherB() ) && ( MatcherC() && MatcherD() ) ), Catch::Matchers::Detail:: MatchAllOfGeneric<MatcherA, MatcherB, MatcherC, MatcherD>>:: value'
# Combining MatchAllOfGeneric does not nest
ok {test-number} - 1, ( MatcherA() && MatcherB() ) && ( MatcherC() && MatcherD() )[0;37m for: [0m1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 and equals: (T) 1 and equals: true )
# Combining MatchAnyOfGeneric does not nest
ok {test-number} -[0m with 1 message:[0m 'std::is_same< decltype( ( MatcherA() || MatcherB() ) || MatcherC() ), Catch::Matchers::Detail:: MatchAnyOfGeneric<MatcherA, MatcherB, MatcherC>>::value'
# Combining MatchAnyOfGeneric does not nest
ok {test-number} - 1, ( MatcherA() || MatcherB() ) || MatcherC()[0;37m for: [0m1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 or equals: (T) 1 )
# Combining MatchAnyOfGeneric does not nest
ok {test-number} -[0m with 1 message:[0m 'std::is_same< decltype( MatcherA() || ( MatcherB() || MatcherC() ) ), Catch::Matchers::Detail:: MatchAnyOfGeneric<MatcherA, MatcherB, MatcherC>>::value'
# Combining MatchAnyOfGeneric does not nest
ok {test-number} - 1, MatcherA() || ( MatcherB() || MatcherC() )[0;37m for: [0m1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 or equals: (T) 1 )
# Combining MatchAnyOfGeneric does not nest
ok {test-number} -[0m with 1 message:[0m 'std::is_same< decltype( ( MatcherA() || MatcherB() ) || ( MatcherC() || MatcherD() ) ), Catch::Matchers::Detail:: MatchAnyOfGeneric<MatcherA, MatcherB, MatcherC, MatcherD>>:: value'
# Combining MatchAnyOfGeneric does not nest
ok {test-number} - 1, ( MatcherA() || MatcherB() ) || ( MatcherC() || MatcherD() )[0;37m for: [0m1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 or equals: (T) 1 or equals: true )
# Combining MatchNotOfGeneric does not nest
ok {test-number} -[0m with 1 message:[0m 'std::is_same< decltype( !MatcherA() ), Catch::Matchers::Detail::MatchNotOfGeneric<MatcherA>>::value'
# Combining MatchNotOfGeneric does not nest
ok {test-number} - 0, !MatcherA()[0;37m for: [0m0 not equals: (int) 1 or (string) "1"
# Combining MatchNotOfGeneric does not nest
ok {test-number} -[0m with 1 message:[0m 'std::is_same<decltype( !!MatcherA() ), MatcherA const&>::value'
# Combining MatchNotOfGeneric does not nest
ok {test-number} - 1, !!MatcherA()[0;37m for: [0m1 equals: (int) 1 or (string) "1"
# Combining MatchNotOfGeneric does not nest
ok {test-number} -[0m with 1 message:[0m 'std::is_same< decltype( !!!MatcherA() ), Catch::Matchers::Detail::MatchNotOfGeneric<MatcherA>>::value'
# Combining MatchNotOfGeneric does not nest
ok {test-number} - 0, !!!MatcherA()[0;37m for: [0m0 not equals: (int) 1 or (string) "1"
# Combining MatchNotOfGeneric does not nest
ok {test-number} -[0m with 1 message:[0m 'std::is_same<decltype( !!!!MatcherA() ), MatcherA const&>::value'
# Combining MatchNotOfGeneric does not nest
ok {test-number} - 1, !!!!MatcherA()[0;37m for: [0m1 equals: (int) 1 or (string) "1"
# Combining concrete matchers does not use templated matchers
ok {test-number} -[0m with 1 message:[0m 'std::is_same<decltype( StartsWith( "foo" ) || ( StartsWith( "bar" ) && EndsWith( "bar" ) && !EndsWith( "foo" ) ) ), Catch::Matchers::Detail::MatchAnyOf<std::string>>::value'
# Combining only templated matchers
ok {test-number} -[0m with 1 message:[0m 'std::is_same<decltype( MatcherA() || MatcherB() ), Catch::Matchers::Detail:: MatchAnyOfGeneric<MatcherA, MatcherB>>::value'
# Combining only templated matchers
ok {test-number} - 1, MatcherA() || MatcherB()[0;37m for: [0m1 ( equals: (int) 1 or (string) "1" or equals: (long long) 1 )
# Combining only templated matchers
ok {test-number} -[0m with 1 message:[0m 'std::is_same<decltype( MatcherA() && MatcherB() ), Catch::Matchers::Detail:: MatchAllOfGeneric<MatcherA, MatcherB>>::value'
# Combining only templated matchers
ok {test-number} - 1, MatcherA() && MatcherB()[0;37m for: [0m1 ( equals: (int) 1 or (string) "1" and equals: (long long) 1 )
# Combining only templated matchers
ok {test-number} -[0m with 1 message:[0m 'std::is_same< decltype( MatcherA() || !MatcherB() ), Catch::Matchers::Detail::MatchAnyOfGeneric< MatcherA, Catch::Matchers::Detail::MatchNotOfGeneric<MatcherB>>>::value'
# Combining only templated matchers
ok {test-number} - 1, MatcherA() || !MatcherB()[0;37m for: [0m1 ( equals: (int) 1 or (string) "1" or not equals: (long long) 1 )
# Combining templated and concrete matchers
ok {test-number} - vec, Predicate<std::vector<int>>( []( auto const& v ) { return std::all_of( v.begin(), v.end(), []( int elem ) { return elem % 2 == 1; } ); }, "All elements are odd" ) && !EqualsRange( a )[0;37m for: [0m{ 1, 3, 5 } ( matches predicate: "All elements are odd" and not Equals: { 5, 3, 1 } )
# Combining templated and concrete matchers
ok {test-number} - str, StartsWith( "foo" ) && EqualsRange( arr ) && EndsWith( "bar" )[0;37m for: [0m"foobar" ( starts with: "foo" and Equals: { 'f', 'o', 'o', 'b', 'a', 'r' } and ends with: "bar" )
# Combining templated and concrete matchers
ok {test-number} - str, StartsWith( "foo" ) && !EqualsRange( bad_arr ) && EndsWith( "bar" )[0;37m for: [0m"foobar" ( starts with: "foo" and not Equals: { 'o', 'o', 'f', 'b', 'a', 'r' } and ends with: "bar" )
# Combining templated and concrete matchers
ok {test-number} - str, EqualsRange( arr ) && StartsWith( "foo" ) && EndsWith( "bar" )[0;37m for: [0m"foobar" ( Equals: { 'f', 'o', 'o', 'b', 'a', 'r' } and starts with: "foo" and ends with: "bar" )
# Combining templated and concrete matchers
ok {test-number} - str, !EqualsRange( bad_arr ) && StartsWith( "foo" ) && EndsWith( "bar" )[0;37m for: [0m"foobar" ( not Equals: { 'o', 'o', 'f', 'b', 'a', 'r' } and starts with: "foo" and ends with: "bar" )
# Combining templated and concrete matchers
ok {test-number} - str, EqualsRange( bad_arr ) || ( StartsWith( "foo" ) && EndsWith( "bar" ) )[0;37m for: [0m"foobar" ( Equals: { 'o', 'o', 'f', 'b', 'a', 'r' } or ( starts with: "foo" and ends with: "bar" ) )
# Combining templated and concrete matchers
ok {test-number} - str, ( StartsWith( "foo" ) && EndsWith( "bar" ) ) || EqualsRange( bad_arr )[0;37m for: [0m"foobar" ( ( starts with: "foo" and ends with: "bar" ) or Equals: { 'o', 'o', 'f', 'b', 'a', 'r' } )
# Combining templated matchers
ok {test-number} - container, EqualsRange( a ) || EqualsRange( b ) || EqualsRange( c )[0;37m for: [0m{ 1, 2, 3 } ( Equals: { 1, 2, 3 } or Equals: { 0, 1, 2 } or Equals: { 4, 5, 6 } )
# Commas in various macros are allowed
ok {test-number} - std::vector<constructor_throws>{constructor_throws{}, constructor_throws{}}
# Commas in various macros are allowed
ok {test-number} - std::vector<constructor_throws>{constructor_throws{}, constructor_throws{}}
# Commas in various macros are allowed
ok {test-number} - std::vector<int>{1, 2, 3} == std::vector<int>{1, 2, 3}
# Commas in various macros are allowed
ok {test-number} - std::vector<int>{1, 2, 3} == std::vector<int>{1, 2, 3}
# Commas in various macros are allowed
ok {test-number} - std::vector<int>{1, 2} == std::vector<int>{1, 2}[0;37m for: [0m{ 1, 2 } == { 1, 2 }
# Commas in various macros are allowed
ok {test-number} - std::vector<int>{1, 2} == std::vector<int>{1, 2}[0;37m for: [0m{ 1, 2 } == { 1, 2 }
# Commas in various macros are allowed
ok {test-number} - !(std::vector<int>{1, 2} == std::vector<int>{1, 2, 3})[0;37m for: [0m!({ 1, 2 } == { 1, 2, 3 })
# Commas in various macros are allowed
ok {test-number} - !(std::vector<int>{1, 2} == std::vector<int>{1, 2, 3})[0;37m for: [0m!({ 1, 2 } == { 1, 2, 3 })
# Commas in various macros are allowed
ok {test-number} - std::vector<int>{1, 2} == std::vector<int>{1, 2}[0;37m for: [0m{ 1, 2 } == { 1, 2 }
# Commas in various macros are allowed
ok {test-number} - std::vector<int>{1, 2} == std::vector<int>{1, 2}[0;37m for: [0m{ 1, 2 } == { 1, 2 }
# Commas in various macros are allowed
ok {test-number} - true
# Commas in various macros are allowed
ok {test-number} - std::vector<int>{1, 2} == std::vector<int>{1, 2}[0;37m for: [0m{ 1, 2 } == { 1, 2 }
# Comparing function pointers
ok {test-number} - a[0;37m for: [0m0x00007ff70a7119cd
# Comparing function pointers
ok {test-number} - a == &foo[0;37m for: [0m0x00007ff70a7119cd == 0x<hex digits>
# Comparison ops
ok {test-number} - SimplePcg32{} == SimplePcg32{}[0;37m for: [0m{?} == {?}
# Comparison ops
ok {test-number} - SimplePcg32{ 0 } != SimplePcg32{}[0;37m for: [0m{?} != {?}
# Comparison ops
ok {test-number} - !(SimplePcg32{ 1 } == SimplePcg32{ 2 })[0;37m for: [0m!({?} == {?})
# Comparison ops
ok {test-number} - !(SimplePcg32{ 1 } != SimplePcg32{ 1 })[0;37m for: [0m!({?} != {?})
# Comparison with explicitly convertible types
ok {test-number} - td == Approx(10.0)[0;37m for: [0mStrongDoubleTypedef(10) == Approx( 10.0 )
# Comparison with explicitly convertible types
ok {test-number} - Approx(10.0) == td[0;37m for: [0mApprox( 10.0 ) == StrongDoubleTypedef(10)
# Comparison with explicitly convertible types
ok {test-number} - td != Approx(11.0)[0;37m for: [0mStrongDoubleTypedef(10) != Approx( 11.0 )
# Comparison with explicitly convertible types
ok {test-number} - Approx(11.0) != td[0;37m for: [0mApprox( 11.0 ) != StrongDoubleTypedef(10)
# Comparison with explicitly convertible types
ok {test-number} - td <= Approx(10.0)[0;37m for: [0mStrongDoubleTypedef(10) <= Approx( 10.0 )
# Comparison with explicitly convertible types
ok {test-number} - td <= Approx(11.0)[0;37m for: [0mStrongDoubleTypedef(10) <= Approx( 11.0 )
# Comparison with explicitly convertible types
ok {test-number} - Approx(10.0) <= td[0;37m for: [0mApprox( 10.0 ) <= StrongDoubleTypedef(10)
# Comparison with explicitly convertible types
ok {test-number} - Approx(9.0) <= td[0;37m for: [0mApprox( 9.0 ) <= StrongDoubleTypedef(10)
# Comparison with explicitly convertible types
ok {test-number} - td >= Approx(9.0)[0;37m for: [0mStrongDoubleTypedef(10) >= Approx( 9.0 )
# Comparison with explicitly convertible types
ok {test-number} - td >= Approx(td)[0;37m for: [0mStrongDoubleTypedef(10) >= Approx( 10.0 )
# Comparison with explicitly convertible types
ok {test-number} - Approx(td) >= td[0;37m for: [0mApprox( 10.0 ) >= StrongDoubleTypedef(10)
# Comparison with explicitly convertible types
ok {test-number} - Approx(11.0) >= td[0;37m for: [0mApprox( 11.0 ) >= StrongDoubleTypedef(10)
# Comparisons between ints where one side is computed
ok {test-number} - 54 == 6*9[0;37m for: [0m54 == 54
# Comparisons between unsigned ints and negative signed ints match c++ standard behaviour
ok {test-number} - ( -1 > 2u )[0;37m for: [0mtrue
# Comparisons between unsigned ints and negative signed ints match c++ standard behaviour
ok {test-number} - -1 > 2u[0;37m for: [0m-1 > 2
# Comparisons between unsigned ints and negative signed ints match c++ standard behaviour
ok {test-number} - ( 2u < -1 )[0;37m for: [0mtrue
# Comparisons between unsigned ints and negative signed ints match c++ standard behaviour
ok {test-number} - 2u < -1[0;37m for: [0m2 < -1
# Comparisons between unsigned ints and negative signed ints match c++ standard behaviour
ok {test-number} - ( minInt > 2u )[0;37m for: [0mtrue
# Comparisons between unsigned ints and negative signed ints match c++ standard behaviour
ok {test-number} - minInt > 2u[0;37m for: [0m-2147483648 > 2
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - i == 1[0;37m for: [0m1 == 1
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - ui == 2[0;37m for: [0m2 == 2
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - l == 3[0;37m for: [0m3 == 3
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - ul == 4[0;37m for: [0m4 == 4
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - c == 5[0;37m for: [0m5 == 5
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - uc == 6[0;37m for: [0m6 == 6
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - 1 == i[0;37m for: [0m1 == 1
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - 2 == ui[0;37m for: [0m2 == 2
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - 3 == l[0;37m for: [0m3 == 3
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - 4 == ul[0;37m for: [0m4 == 4
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - 5 == c[0;37m for: [0m5 == 5
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - 6 == uc[0;37m for: [0m6 == 6
# Comparisons with int literals don't warn when mixing signed/ unsigned
ok {test-number} - (std::numeric_limits<uint32_t>::max)() > ul[0;37m for: [0m4294967295 (0x<hex digits>) > 4
# Composed generic matchers shortcircuit
ok {test-number} - !(matcher.match( 1 ))[0;37m for: [0m!false
# Composed generic matchers shortcircuit
ok {test-number} - first.matchCalled[0;37m for: [0mtrue
# Composed generic matchers shortcircuit
ok {test-number} - !second.matchCalled[0;37m for: [0mtrue
# Composed generic matchers shortcircuit
ok {test-number} - matcher.match( 1 )[0;37m for: [0mtrue
# Composed generic matchers shortcircuit
ok {test-number} - first.matchCalled[0;37m for: [0mtrue
# Composed generic matchers shortcircuit
ok {test-number} - !second.matchCalled[0;37m for: [0mtrue
# Composed matchers shortcircuit
ok {test-number} - !(matcher.match( 1 ))[0;37m for: [0m!false
# Composed matchers shortcircuit
ok {test-number} - first.matchCalled[0;37m for: [0mtrue
# Composed matchers shortcircuit
ok {test-number} - !second.matchCalled[0;37m for: [0mtrue
# Composed matchers shortcircuit
ok {test-number} - matcher.match( 1 )[0;37m for: [0mtrue
# Composed matchers shortcircuit
ok {test-number} - first.matchCalled[0;37m for: [0mtrue
# Composed matchers shortcircuit
ok {test-number} - !second.matchCalled[0;37m for: [0mtrue
# Contains string matcher
not ok {test-number} - testStringForMatching(), ContainsSubstring( "not there", Catch::CaseSensitive::No )[0;37m for: [0m"this string contains 'abc' as a substring" contains: "not there" (case insensitive)
# Contains string matcher
not ok {test-number} - testStringForMatching(), ContainsSubstring( "STRING" )[0;37m for: [0m"this string contains 'abc' as a substring" contains: "STRING"
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - elem % 2 == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - call_count == 1[0;37m for: [0m1 == 1
# Copy and then generate a range
ok {test-number} - make_data().size() == test_count[0;37m for: [0m6 == 6
# Cout stream properly declares it writes to stdout
ok {test-number} - Catch::makeStream( "-" )->isConsole()[0;37m for: [0mtrue
# Custom exceptions can be translated when testing for nothrow
not ok {test-number} - unexpected exception with message: 'custom exception - not std';[0;37m expression was:[0m throwCustom()
# Custom exceptions can be translated when testing for throwing as something else
not ok {test-number} - unexpected exception with message: 'custom exception - not std';[0;37m expression was:[0m throwCustom(), std::exception
# Custom std-exceptions can be custom translated
not ok {test-number} - unexpected exception with message: 'custom std exception'
# Default scale is invisible to comparison
ok {test-number} - 101.000001 != Approx(100).epsilon(0.01)[0;37m for: [0m101.000001 != Approx( 100.0 )
# Default scale is invisible to comparison
ok {test-number} - std::pow(10, -5) != Approx(std::pow(10, -7))[0;37m for: [0m0.00001 != Approx( 0.0000001 )
# Directly creating an EnumInfo
ok {test-number} - enumInfo->lookup(0) == "Value1"[0;37m for: [0mValue1 == "Value1"
# Directly creating an EnumInfo
ok {test-number} - enumInfo->lookup(1) == "Value2"[0;37m for: [0mValue2 == "Value2"
# Directly creating an EnumInfo
ok {test-number} - enumInfo->lookup(3) == "{** unexpected enum value **}"[0;37m for: [0m{** unexpected enum value **} == "{** unexpected enum value **}"
# Empty stream name opens cout stream
ok {test-number} - Catch::makeStream( "" )->isConsole()[0;37m for: [0mtrue
# Empty tag is not allowed
ok {test-number} - Catch::TestCaseInfo( "", { "fake test name", "[]" }, dummySourceLineInfo )
# EndsWith string matcher
not ok {test-number} - testStringForMatching(), EndsWith( "Substring" )[0;37m for: [0m"this string contains 'abc' as a substring" ends with: "Substring"
# EndsWith string matcher
not ok {test-number} - testStringForMatching(), EndsWith( "this", Catch::CaseSensitive::No )[0;37m for: [0m"this string contains 'abc' as a substring" ends with: "this" (case insensitive)
# Enums can quickly have stringification enabled using REGISTER_ENUM
ok {test-number} - stringify( EnumClass3::Value1 ) == "Value1"[0;37m for: [0m"Value1" == "Value1"
# Enums can quickly have stringification enabled using REGISTER_ENUM
ok {test-number} - stringify( EnumClass3::Value2 ) == "Value2"[0;37m for: [0m"Value2" == "Value2"
# Enums can quickly have stringification enabled using REGISTER_ENUM
ok {test-number} - stringify( EnumClass3::Value3 ) == "Value3"[0;37m for: [0m"Value3" == "Value3"
# Enums can quickly have stringification enabled using REGISTER_ENUM
ok {test-number} - stringify( EnumClass3::Value4 ) == "{** unexpected enum value **}"[0;37m for: [0m"{** unexpected enum value **}" == "{** unexpected enum value **}"
# Enums can quickly have stringification enabled using REGISTER_ENUM
ok {test-number} - stringify( ec3 ) == "Value2"[0;37m for: [0m"Value2" == "Value2"
# Enums in namespaces can quickly have stringification enabled using REGISTER_ENUM
ok {test-number} - stringify( Bikeshed::Colours::Red ) == "Red"[0;37m for: [0m"Red" == "Red"
# Enums in namespaces can quickly have stringification enabled using REGISTER_ENUM
ok {test-number} - stringify( Bikeshed::Colours::Blue ) == "Blue"[0;37m for: [0m"Blue" == "Blue"
# Epsilon only applies to Approx's value
ok {test-number} - 101.01 != Approx(100).epsilon(0.01)[0;37m for: [0m101.01 != Approx( 100.0 )
# Equality checks that should fail
not ok {test-number} - data.int_seven == 6[0;37m for: [0m7 == 6
# Equality checks that should fail
not ok {test-number} - data.int_seven == 8[0;37m for: [0m7 == 8
# Equality checks that should fail
not ok {test-number} - data.int_seven == 0[0;37m for: [0m7 == 0
# Equality checks that should fail
not ok {test-number} - data.float_nine_point_one == Approx( 9.11f )[0;37m for: [0m9.1f == Approx( 9.1099996567 )
# Equality checks that should fail
not ok {test-number} - data.float_nine_point_one == Approx( 9.0f )[0;37m for: [0m9.1f == Approx( 9.0 )
# Equality checks that should fail
not ok {test-number} - data.float_nine_point_one == Approx( 1 )[0;37m for: [0m9.1f == Approx( 1.0 )
# Equality checks that should fail
not ok {test-number} - data.float_nine_point_one == Approx( 0 )[0;37m for: [0m9.1f == Approx( 0.0 )
# Equality checks that should fail
not ok {test-number} - data.double_pi == Approx( 3.1415 )[0;37m for: [0m3.1415926535 == Approx( 3.1415 )
# Equality checks that should fail
not ok {test-number} - data.str_hello == "goodbye"[0;37m for: [0m"hello" == "goodbye"
# Equality checks that should fail
not ok {test-number} - data.str_hello == "hell"[0;37m for: [0m"hello" == "hell"
# Equality checks that should fail
not ok {test-number} - data.str_hello == "hello1"[0;37m for: [0m"hello" == "hello1"
# Equality checks that should fail
not ok {test-number} - data.str_hello.size() == 6[0;37m for: [0m5 == 6
# Equality checks that should fail
not ok {test-number} - x == Approx( 1.301 )[0;37m for: [0m1.3 == Approx( 1.301 )
# Equality checks that should succeed
ok {test-number} - data.int_seven == 7[0;37m for: [0m7 == 7
# Equality checks that should succeed
ok {test-number} - data.float_nine_point_one == Approx( 9.1f )[0;37m for: [0m9.1f == Approx( 9.1000003815 )
# Equality checks that should succeed
ok {test-number} - data.double_pi == Approx( 3.1415926535 )[0;37m for: [0m3.1415926535 == Approx( 3.1415926535 )
# Equality checks that should succeed
ok {test-number} - data.str_hello == "hello"[0;37m for: [0m"hello" == "hello"
# Equality checks that should succeed
ok {test-number} - "hello" == data.str_hello[0;37m for: [0m"hello" == "hello"
# Equality checks that should succeed
ok {test-number} - data.str_hello.size() == 5[0;37m for: [0m5 == 5
# Equality checks that should succeed
ok {test-number} - x == Approx( 1.3 )[0;37m for: [0m1.3 == Approx( 1.3 )
# Equals
ok {test-number} - testStringForMatching(), Equals( "this string contains 'abc' as a substring" )[0;37m for: [0m"this string contains 'abc' as a substring" equals: "this string contains 'abc' as a substring"
# Equals
ok {test-number} - testStringForMatching(), Equals( "this string contains 'ABC' as a substring", Catch::CaseSensitive::No )[0;37m for: [0m"this string contains 'abc' as a substring" equals: "this string contains 'abc' as a substring" (case insensitive)
# Equals string matcher
not ok {test-number} - testStringForMatching(), Equals( "this string contains 'ABC' as a substring" )[0;37m for: [0m"this string contains 'abc' as a substring" equals: "this string contains 'ABC' as a substring"
# Equals string matcher
not ok {test-number} - testStringForMatching(), Equals( "something else", Catch::CaseSensitive::No )[0;37m for: [0m"this string contains 'abc' as a substring" equals: "something else" (case insensitive)
# Exception as a value (e.g. in REQUIRE_THROWS_MATCHES) can be stringified
ok {test-number} - ::Catch::Detail::stringify(WhatException{}) == "This exception has overridden what() method"[0;37m for: [0m"This exception has overridden what() method" == "This exception has overridden what() method"
# Exception as a value (e.g. in REQUIRE_THROWS_MATCHES) can be stringified
ok {test-number} - ::Catch::Detail::stringify(OperatorException{}) == "OperatorException"[0;37m for: [0m"OperatorException" == "OperatorException"
# Exception as a value (e.g. in REQUIRE_THROWS_MATCHES) can be stringified
ok {test-number} - ::Catch::Detail::stringify(StringMakerException{}) == "StringMakerException"[0;37m for: [0m"StringMakerException" == "StringMakerException"
# Exception matchers that fail
not ok {test-number} - expected exception, got none;[0;37m expression was:[0m doesNotThrow(), SpecialException, ExceptionMatcher{ 1 }
# Exception matchers that fail
not ok {test-number} - expected exception, got none;[0;37m expression was:[0m doesNotThrow(), SpecialException, ExceptionMatcher{ 1 }
# Exception matchers that fail
not ok {test-number} - unexpected exception with message: 'Unknown exception';[0;37m expression was:[0m throwsAsInt( 1 ), SpecialException, ExceptionMatcher{ 1 }
# Exception matchers that fail
not ok {test-number} - unexpected exception with message: 'Unknown exception';[0;37m expression was:[0m throwsAsInt( 1 ), SpecialException, ExceptionMatcher{ 1 }
# Exception matchers that fail
not ok {test-number} - throwsSpecialException( 3 ), SpecialException, ExceptionMatcher{ 1 }[0;37m for: [0mSpecialException::what special exception has value of 1
# Exception matchers that fail
not ok {test-number} - throwsSpecialException( 4 ), SpecialException, ExceptionMatcher{ 1 }[0;37m for: [0mSpecialException::what special exception has value of 1
# Exception matchers that succeed
ok {test-number} - throwsSpecialException( 1 ), SpecialException, ExceptionMatcher{ 1 }[0;37m for: [0mSpecialException::what special exception has value of 1
# Exception matchers that succeed
ok {test-number} - throwsSpecialException( 2 ), SpecialException, ExceptionMatcher{ 2 }[0;37m for: [0mSpecialException::what special exception has value of 2
# Exception messages can be tested for
ok {test-number} - thisThrows(), "expected exception"[0;37m for: [0m"expected exception" equals: "expected exception"
# Exception messages can be tested for
ok {test-number} - thisThrows(), Equals( "expecteD Exception", Catch::CaseSensitive::No )[0;37m for: [0m"expected exception" equals: "expected exception" (case insensitive)
# Exception messages can be tested for
ok {test-number} - thisThrows(), StartsWith( "expected" )[0;37m for: [0m"expected exception" starts with: "expected"
# Exception messages can be tested for
ok {test-number} - thisThrows(), EndsWith( "exception" )[0;37m for: [0m"expected exception" ends with: "exception"
# Exception messages can be tested for
ok {test-number} - thisThrows(), ContainsSubstring( "except" )[0;37m for: [0m"expected exception" contains: "except"
# Exception messages can be tested for
ok {test-number} - thisThrows(), ContainsSubstring( "exCept", Catch::CaseSensitive::No )[0;37m for: [0m"expected exception" contains: "except" (case insensitive)
# Exceptions matchers
ok {test-number} - throwsDerivedException(), DerivedException, Message( "DerivedException::what" )[0;37m for: [0mDerivedException::what exception message matches "DerivedException::what"
# Exceptions matchers
ok {test-number} - throwsDerivedException(), DerivedException, !Message( "derivedexception::what" )[0;37m for: [0mDerivedException::what not exception message matches "derivedexception::what"
# Exceptions matchers
ok {test-number} - throwsSpecialException( 2 ), SpecialException, !Message( "DerivedException::what" )[0;37m for: [0mSpecialException::what not exception message matches "DerivedException::what"
# Exceptions matchers
ok {test-number} - throwsSpecialException( 2 ), SpecialException, Message( "SpecialException::what" )[0;37m for: [0mSpecialException::what exception message matches "SpecialException::what"
# Expected exceptions that don't throw or unexpected exceptions fail the test
not ok {test-number} - unexpected exception with message: 'expected exception';[0;37m expression was:[0m thisThrows(), std::string
# Expected exceptions that don't throw or unexpected exceptions fail the test
not ok {test-number} - expected exception, got none;[0;37m expression was:[0m thisDoesntThrow(), std::domain_error
# Expected exceptions that don't throw or unexpected exceptions fail the test
not ok {test-number} - unexpected exception with message: 'expected exception';[0;37m expression was:[0m thisThrows()
# FAIL aborts the test
not ok {test-number} - explicitly[0m with 1 message:[0m 'This is a failure'
# FAIL does not require an argument
not ok {test-number} - explicitly
# FAIL_CHECK does not abort the test
not ok {test-number} - explicitly[0m with 1 message:[0m 'This is a failure'
# FAIL_CHECK does not abort the test
warning {test-number} - 'This message appears in the output'
# Factorials are computed
ok {test-number} - Factorial(0) == 1[0;37m for: [0m1 == 1
# Factorials are computed
ok {test-number} - Factorial(1) == 1[0;37m for: [0m1 == 1
# Factorials are computed
ok {test-number} - Factorial(2) == 2[0;37m for: [0m2 == 2
# Factorials are computed
ok {test-number} - Factorial(3) == 6[0;37m for: [0m6 == 6
# Factorials are computed
ok {test-number} - Factorial(10) == 3628800[0;37m for: [0m3628800 (0x<hex digits>) == 3628800 (0x<hex digits>)
# Floating point matchers: double
ok {test-number} - 10., WithinRel( 11.1, 0.1 )[0;37m for: [0m10.0 and 11.1 are within 10% of each other
# Floating point matchers: double
ok {test-number} - 10., !WithinRel( 11.2, 0.1 )[0;37m for: [0m10.0 not and 11.2 are within 10% of each other
# Floating point matchers: double
ok {test-number} - 1., !WithinRel( 0., 0.99 )[0;37m for: [0m1.0 not and 0 are within 99% of each other
# Floating point matchers: double
ok {test-number} - -0., WithinRel( 0. )[0;37m for: [0m-0.0 and 0 are within 2.22045e-12% of each other
# Floating point matchers: double
ok {test-number} - v1, WithinRel( v2 )[0;37m for: [0m0.0 and 2.22507e-308 are within 2.22045e-12% of each other
# Floating point matchers: double
ok {test-number} - 1., WithinAbs( 1., 0 )[0;37m for: [0m1.0 is within 0.0 of 1.0
# Floating point matchers: double
ok {test-number} - 0., WithinAbs( 1., 1 )[0;37m for: [0m0.0 is within 1.0 of 1.0
# Floating point matchers: double
ok {test-number} - 0., !WithinAbs( 1., 0.99 )[0;37m for: [0m0.0 not is within 0.99 of 1.0
# Floating point matchers: double
ok {test-number} - 0., !WithinAbs( 1., 0.99 )[0;37m for: [0m0.0 not is within 0.99 of 1.0
# Floating point matchers: double
ok {test-number} - 11., !WithinAbs( 10., 0.5 )[0;37m for: [0m11.0 not is within 0.5 of 10.0
# Floating point matchers: double
ok {test-number} - 10., !WithinAbs( 11., 0.5 )[0;37m for: [0m10.0 not is within 0.5 of 11.0
# Floating point matchers: double
ok {test-number} - -10., WithinAbs( -10., 0.5 )[0;37m for: [0m-10.0 is within 0.5 of -10.0
# Floating point matchers: double
ok {test-number} - -10., WithinAbs( -9.6, 0.5 )[0;37m for: [0m-10.0 is within 0.5 of -9.6
# Floating point matchers: double
ok {test-number} - 1., WithinULP( 1., 0 )[0;37m for: [0m1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00])
# Floating point matchers: double
ok {test-number} - nextafter( 1., 2. ), WithinULP( 1., 1 )[0;37m for: [0m1.0 is within 1 ULPs of 1.0000000000000000e+00 ([9.9999999999999989e-01, 1.0000000000000002e+00])
# Floating point matchers: double
ok {test-number} - 0., WithinULP( nextafter( 0., 1. ), 1 )[0;37m for: [0m0.0 is within 1 ULPs of 4.9406564584124654e-324 ([0.0000000000000000e+00, 9.8813129168249309e-324])
# Floating point matchers: double
ok {test-number} - 1., WithinULP( nextafter( 1., 0. ), 1 )[0;37m for: [0m1.0 is within 1 ULPs of 9.9999999999999989e-01 ([9.9999999999999978e-01, 1.0000000000000000e+00])
# Floating point matchers: double
ok {test-number} - 1., !WithinULP( nextafter( 1., 2. ), 0 )[0;37m for: [0m1.0 not is within 0 ULPs of 1.0000000000000002e+00 ([1.0000000000000002e+00, 1.0000000000000002e+00])
# Floating point matchers: double
ok {test-number} - 1., WithinULP( 1., 0 )[0;37m for: [0m1.0 is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00])
# Floating point matchers: double
ok {test-number} - -0., WithinULP( 0., 0 )[0;37m for: [0m-0.0 is within 0 ULPs of 0.0000000000000000e+00 ([0.0000000000000000e+00, 0.0000000000000000e+00])
# Floating point matchers: double
ok {test-number} - 1., WithinAbs( 1., 0.5 ) || WithinULP( 2., 1 )[0;37m for: [0m1.0 ( is within 0.5 of 1.0 or is within 1 ULPs of 2.0000000000000000e+00 ([1.9999999999999998e+00, 2.0000000000000004e+00]) )
# Floating point matchers: double
ok {test-number} - 1., WithinAbs( 2., 0.5 ) || WithinULP( 1., 0 )[0;37m for: [0m1.0 ( is within 0.5 of 2.0 or is within 0 ULPs of 1.0000000000000000e+00 ([1.0000000000000000e+00, 1.0000000000000000e+00]) )
# Floating point matchers: double
ok {test-number} - 0.0001, WithinAbs( 0., 0.001 ) || WithinRel( 0., 0.1 )[0;37m for: [0m0.0001 ( is within 0.001 of 0.0 or and 0 are within 10% of each other )
# Floating point matchers: double
ok {test-number} - WithinAbs( 1., 0. )
# Floating point matchers: double
ok {test-number} - WithinAbs( 1., -1. ), std::domain_error
# Floating point matchers: double
ok {test-number} - WithinULP( 1., 0 )
# Floating point matchers: double
ok {test-number} - WithinRel( 1., 0. )
# Floating point matchers: double
ok {test-number} - WithinRel( 1., -0.2 ), std::domain_error
# Floating point matchers: double
ok {test-number} - WithinRel( 1., 1. ), std::domain_error
# Floating point matchers: float
ok {test-number} - 10.f, WithinRel( 11.1f, 0.1f )[0;37m for: [0m10.0f and 11.1 are within 10% of each other
# Floating point matchers: float
ok {test-number} - 10.f, !WithinRel( 11.2f, 0.1f )[0;37m for: [0m10.0f not and 11.2 are within 10% of each other
# Floating point matchers: float
ok {test-number} - 1.f, !WithinRel( 0.f, 0.99f )[0;37m for: [0m1.0f not and 0 are within 99% of each other
# Floating point matchers: float
ok {test-number} - -0.f, WithinRel( 0.f )[0;37m for: [0m-0.0f and 0 are within 0.00119209% of each other
# Floating point matchers: float
ok {test-number} - v1, WithinRel( v2 )[0;37m for: [0m0.0f and 1.17549e-38 are within 0.00119209% of each other
# Floating point matchers: float
ok {test-number} - 1.f, WithinAbs( 1.f, 0 )[0;37m for: [0m1.0f is within 0.0 of 1.0
# Floating point matchers: float
ok {test-number} - 0.f, WithinAbs( 1.f, 1 )[0;37m for: [0m0.0f is within 1.0 of 1.0
# Floating point matchers: float
ok {test-number} - 0.f, !WithinAbs( 1.f, 0.99f )[0;37m for: [0m0.0f not is within 0.9900000095 of 1.0
# Floating point matchers: float
ok {test-number} - 0.f, !WithinAbs( 1.f, 0.99f )[0;37m for: [0m0.0f not is within 0.9900000095 of 1.0
# Floating point matchers: float
ok {test-number} - 0.f, WithinAbs( -0.f, 0 )[0;37m for: [0m0.0f is within 0.0 of -0.0
# Floating point matchers: float
ok {test-number} - 11.f, !WithinAbs( 10.f, 0.5f )[0;37m for: [0m11.0f not is within 0.5 of 10.0
# Floating point matchers: float
ok {test-number} - 10.f, !WithinAbs( 11.f, 0.5f )[0;37m for: [0m10.0f not is within 0.5 of 11.0
# Floating point matchers: float
ok {test-number} - -10.f, WithinAbs( -10.f, 0.5f )[0;37m for: [0m-10.0f is within 0.5 of -10.0
# Floating point matchers: float
ok {test-number} - -10.f, WithinAbs( -9.6f, 0.5f )[0;37m for: [0m-10.0f is within 0.5 of -9.6000003815
# Floating point matchers: float
ok {test-number} - 1.f, WithinULP( 1.f, 0 )[0;37m for: [0m1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
# Floating point matchers: float
ok {test-number} - -1.f, WithinULP( -1.f, 0 )[0;37m for: [0m-1.0f is within 0 ULPs of -1.00000000e+00f ([-1.00000000e+00, -1.00000000e+00])
# Floating point matchers: float
ok {test-number} - nextafter( 1.f, 2.f ), WithinULP( 1.f, 1 )[0;37m for: [0m1.0f is within 1 ULPs of 1.00000000e+00f ([9.99999940e-01, 1.00000012e+00])
# Floating point matchers: float
ok {test-number} - 0.f, WithinULP( nextafter( 0.f, 1.f ), 1 )[0;37m for: [0m0.0f is within 1 ULPs of 1.40129846e-45f ([0.00000000e+00, 2.80259693e-45])
# Floating point matchers: float
ok {test-number} - 1.f, WithinULP( nextafter( 1.f, 0.f ), 1 )[0;37m for: [0m1.0f is within 1 ULPs of 9.99999940e-01f ([9.99999881e-01, 1.00000000e+00])
# Floating point matchers: float
ok {test-number} - 1.f, !WithinULP( nextafter( 1.f, 2.f ), 0 )[0;37m for: [0m1.0f not is within 0 ULPs of 1.00000012e+00f ([1.00000012e+00, 1.00000012e+00])
# Floating point matchers: float
ok {test-number} - 1.f, WithinULP( 1.f, 0 )[0;37m for: [0m1.0f is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00])
# Floating point matchers: float
ok {test-number} - -0.f, WithinULP( 0.f, 0 )[0;37m for: [0m-0.0f is within 0 ULPs of 0.00000000e+00f ([0.00000000e+00, 0.00000000e+00])
# Floating point matchers: float
ok {test-number} - 1.f, WithinAbs( 1.f, 0.5 ) || WithinULP( 1.f, 1 )[0;37m for: [0m1.0f ( is within 0.5 of 1.0 or is within 1 ULPs of 1.00000000e+00f ([9.99999940e-01, 1.00000012e+00]) )
# Floating point matchers: float
ok {test-number} - 1.f, WithinAbs( 2.f, 0.5 ) || WithinULP( 1.f, 0 )[0;37m for: [0m1.0f ( is within 0.5 of 2.0 or is within 0 ULPs of 1.00000000e+00f ([1.00000000e+00, 1.00000000e+00]) )
# Floating point matchers: float
ok {test-number} - 0.0001f, WithinAbs( 0.f, 0.001f ) || WithinRel( 0.f, 0.1f )[0;37m for: [0m0.0001f ( is within 0.001 of 0.0 or and 0 are within 10% of each other )
# Floating point matchers: float
ok {test-number} - WithinAbs( 1.f, 0.f )
# Floating point matchers: float
ok {test-number} - WithinAbs( 1.f, -1.f ), std::domain_error
# Floating point matchers: float
ok {test-number} - WithinULP( 1.f, 0 )
# Floating point matchers: float
ok {test-number} - WithinULP( 1.f, static_cast<uint64_t>( -1 ) ), std::domain_error
# Floating point matchers: float
ok {test-number} - WithinRel( 1.f, 0.f )
# Floating point matchers: float
ok {test-number} - WithinRel( 1.f, -0.2f ), std::domain_error
# Floating point matchers: float
ok {test-number} - WithinRel( 1.f, 1.f ), std::domain_error
# Generators -- adapters
ok {test-number} - i % 2 == 0[0;37m for: [0m0 == 0
# Generators -- adapters
ok {test-number} - i % 2 == 0[0;37m for: [0m0 == 0
# Generators -- adapters
ok {test-number} - i % 2 == 0[0;37m for: [0m0 == 0
# Generators -- adapters
ok {test-number} - filter([] (int) {return false; }, value(1)), Catch::GeneratorException
# Generators -- adapters
ok {test-number} - i < 4[0;37m for: [0m1 < 4
# Generators -- adapters
ok {test-number} - i < 4[0;37m for: [0m2 < 4
# Generators -- adapters
ok {test-number} - i < 4[0;37m for: [0m3 < 4
# Generators -- adapters
ok {test-number} - i % 2 == 0[0;37m for: [0m0 == 0
# Generators -- adapters
ok {test-number} - i % 2 == 0[0;37m for: [0m0 == 0
# Generators -- adapters
ok {test-number} - i % 2 == 0[0;37m for: [0m0 == 0
# Generators -- adapters
ok {test-number} - i.size() == 1[0;37m for: [0m1 == 1
# Generators -- adapters
ok {test-number} - i.size() == 1[0;37m for: [0m1 == 1
# Generators -- adapters
ok {test-number} - i.size() == 1[0;37m for: [0m1 == 1
# Generators -- adapters
ok {test-number} - i.size() == 1[0;37m for: [0m1 == 1
# Generators -- adapters
ok {test-number} - i.size() == 1[0;37m for: [0m1 == 1
# Generators -- adapters
ok {test-number} - i.size() == 1[0;37m for: [0m1 == 1
# Generators -- adapters
ok {test-number} - j > 0[0;37m for: [0m1 > 0
# Generators -- adapters
ok {test-number} - j > 0[0;37m for: [0m2 > 0
# Generators -- adapters
ok {test-number} - j > 0[0;37m for: [0m3 > 0
# Generators -- adapters
ok {test-number} - j > 0[0;37m for: [0m1 > 0
# Generators -- adapters
ok {test-number} - j > 0[0;37m for: [0m2 > 0
# Generators -- adapters
ok {test-number} - j > 0[0;37m for: [0m3 > 0
# Generators -- adapters
ok {test-number} - chunk2.size() == 2[0;37m for: [0m2 == 2
# Generators -- adapters
ok {test-number} - chunk2.front() == chunk2.back()[0;37m for: [0m1 == 1
# Generators -- adapters
ok {test-number} - chunk2.size() == 2[0;37m for: [0m2 == 2
# Generators -- adapters
ok {test-number} - chunk2.front() == chunk2.back()[0;37m for: [0m2 == 2
# Generators -- adapters
ok {test-number} - chunk2.size() == 2[0;37m for: [0m2 == 2
# Generators -- adapters
ok {test-number} - chunk2.front() == chunk2.back()[0;37m for: [0m3 == 3
# Generators -- adapters
ok {test-number} - chunk2.size() == 2[0;37m for: [0m2 == 2
# Generators -- adapters
ok {test-number} - chunk2.front() == chunk2.back()[0;37m for: [0m1 == 1
# Generators -- adapters
ok {test-number} - chunk2.front() < 3[0;37m for: [0m1 < 3
# Generators -- adapters
ok {test-number} - chunk2.size() == 2[0;37m for: [0m2 == 2
# Generators -- adapters
ok {test-number} - chunk2.front() == chunk2.back()[0;37m for: [0m2 == 2
# Generators -- adapters
ok {test-number} - chunk2.front() < 3[0;37m for: [0m2 < 3
# Generators -- adapters
ok {test-number} - chunk2.size() == 0[0;37m for: [0m0 == 0
# Generators -- adapters
ok {test-number} - chunk2.size() == 0[0;37m for: [0m0 == 0
# Generators -- adapters
ok {test-number} - chunk2.size() == 0[0;37m for: [0m0 == 0
# Generators -- adapters
ok {test-number} - chunk(2, value(1)), Catch::GeneratorException
# Generators -- simple
ok {test-number} - j < i[0;37m for: [0m-3 < 1
# Generators -- simple
ok {test-number} - j < i[0;37m for: [0m-2 < 1
# Generators -- simple
ok {test-number} - j < i[0;37m for: [0m-1 < 1
# Generators -- simple
ok {test-number} - 4u * i > str.size()[0;37m for: [0m4 > 1
# Generators -- simple
ok {test-number} - 4u * i > str.size()[0;37m for: [0m4 > 2
# Generators -- simple
ok {test-number} - 4u * i > str.size()[0;37m for: [0m4 > 3
# Generators -- simple
ok {test-number} - j < i[0;37m for: [0m-3 < 2
# Generators -- simple
ok {test-number} - j < i[0;37m for: [0m-2 < 2
# Generators -- simple
ok {test-number} - j < i[0;37m for: [0m-1 < 2
# Generators -- simple
ok {test-number} - 4u * i > str.size()[0;37m for: [0m8 > 1
# Generators -- simple
ok {test-number} - 4u * i > str.size()[0;37m for: [0m8 > 2
# Generators -- simple
ok {test-number} - 4u * i > str.size()[0;37m for: [0m8 > 3
# Generators -- simple
ok {test-number} - j < i[0;37m for: [0m-3 < 3
# Generators -- simple
ok {test-number} - j < i[0;37m for: [0m-2 < 3
# Generators -- simple
ok {test-number} - j < i[0;37m for: [0m-1 < 3
# Generators -- simple
ok {test-number} - 4u * i > str.size()[0;37m for: [0m12 > 1
# Generators -- simple
ok {test-number} - 4u * i > str.size()[0;37m for: [0m12 > 2
# Generators -- simple
ok {test-number} - 4u * i > str.size()[0;37m for: [0m12 > 3
# Generators internals
ok {test-number} - gen.get() == 123[0;37m for: [0m123 == 123
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 1[0;37m for: [0m1 == 1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 3[0;37m for: [0m3 == 3
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 5[0;37m for: [0m5 == 5
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 1[0;37m for: [0m1 == 1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 5[0;37m for: [0m5 == 5
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 4[0;37m for: [0m4 == 4
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 0[0;37m for: [0m0 == 0
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get().size() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - gen.get() == "aa"[0;37m for: [0m"aa" == "aa"
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == "bb"[0;37m for: [0m"bb" == "bb"
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == "cc"[0;37m for: [0m"cc" == "cc"
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 1[0;37m for: [0m1 == 1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 3[0;37m for: [0m3 == 3
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 1[0;37m for: [0m1 == 1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 3[0;37m for: [0m3 == 3
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - filter([](int) { return false; }, value(1)), Catch::GeneratorException
# Generators internals
ok {test-number} - filter([](int) { return false; }, values({ 1, 2, 3 })), Catch::GeneratorException
# Generators internals
ok {test-number} - gen.get() == 1[0;37m for: [0m1 == 1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 1[0;37m for: [0m1 == 1
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 2.0[0;37m for: [0m2.0 == 2.0
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 4.0[0;37m for: [0m4.0 == 4.0
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 6.0[0;37m for: [0m6.0 == 6.0
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 2.0[0;37m for: [0m2.0 == 2.0
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 4.0[0;37m for: [0m4.0 == 4.0
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 6.0[0;37m for: [0m6.0 == 6.0
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 3[0;37m for: [0m3 == 3
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 1[0;37m for: [0m1 == 1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 3[0;37m for: [0m3 == 3
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 1[0;37m for: [0m1 == 1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 3[0;37m for: [0m3 == 3
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == -2[0;37m for: [0m-2 == -2
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -1[0;37m for: [0m-1 == -1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 0[0;37m for: [0m0 == 0
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 1[0;37m for: [0m1 == 1
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 1[0;37m for: [0m1 == 1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 0[0;37m for: [0m0 == 0
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -1[0;37m for: [0m-1 == -1
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == -7[0;37m for: [0m-7 == -7
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -4[0;37m for: [0m-4 == -4
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -1[0;37m for: [0m-1 == -1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == -7[0;37m for: [0m-7 == -7
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -4[0;37m for: [0m-4 == -4
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -1[0;37m for: [0m-1 == -1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == -7[0;37m for: [0m-7 == -7
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -4[0;37m for: [0m-4 == -4
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -1[0;37m for: [0m-1 == -1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 5[0;37m for: [0m5 == 5
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-1.0 == Approx( -1.0 )[0;37m with 1 message:[0m 'Current expected value is -1'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -1'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.9 == Approx( -0.9 )[0;37m with 1 message:[0m 'Current expected value is -0.9'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.9'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.8 == Approx( -0.8 )[0;37m with 1 message:[0m 'Current expected value is -0.8'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.8'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.7 == Approx( -0.7 )[0;37m with 1 message:[0m 'Current expected value is -0.7'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.7'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.6 == Approx( -0.6 )[0;37m with 1 message:[0m 'Current expected value is -0.6'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.6'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.5 == Approx( -0.5 )[0;37m with 1 message:[0m 'Current expected value is -0.5'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.5'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.4 == Approx( -0.4 )[0;37m with 1 message:[0m 'Current expected value is -0.4'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.4'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.3 == Approx( -0.3 )[0;37m with 1 message:[0m 'Current expected value is -0.3'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.3'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.2 == Approx( -0.2 )[0;37m with 1 message:[0m 'Current expected value is -0.2'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.2'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.1 == Approx( -0.1 )[0;37m with 1 message:[0m 'Current expected value is -0.1'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.1'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.0 == Approx( -0.0 )[0;37m with 1 message:[0m 'Current expected value is -1.38778e-16'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -1.38778e-16'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.1 == Approx( 0.1 )[0;37m with 1 message:[0m 'Current expected value is 0.1'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.1'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.2 == Approx( 0.2 )[0;37m with 1 message:[0m 'Current expected value is 0.2'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.2'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.3 == Approx( 0.3 )[0;37m with 1 message:[0m 'Current expected value is 0.3'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.3'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.4 == Approx( 0.4 )[0;37m with 1 message:[0m 'Current expected value is 0.4'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.4'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.5 == Approx( 0.5 )[0;37m with 1 message:[0m 'Current expected value is 0.5'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.5'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.6 == Approx( 0.6 )[0;37m with 1 message:[0m 'Current expected value is 0.6'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.6'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.7 == Approx( 0.7 )[0;37m with 1 message:[0m 'Current expected value is 0.7'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.7'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.8 == Approx( 0.8 )[0;37m with 1 message:[0m 'Current expected value is 0.8'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.8'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.9 == Approx( 0.9 )[0;37m with 1 message:[0m 'Current expected value is 0.9'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.9'
# Generators internals
ok {test-number} - gen.get() == Approx( rangeEnd )[0;37m for: [0m1.0 == Approx( 1.0 )
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-1.0 == Approx( -1.0 )[0;37m with 1 message:[0m 'Current expected value is -1'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -1'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.7 == Approx( -0.7 )[0;37m with 1 message:[0m 'Current expected value is -0.7'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.7'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.4 == Approx( -0.4 )[0;37m with 1 message:[0m 'Current expected value is -0.4'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.4'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.1 == Approx( -0.1 )[0;37m with 1 message:[0m 'Current expected value is -0.1'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.1'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.2 == Approx( 0.2 )[0;37m with 1 message:[0m 'Current expected value is 0.2'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.2'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.5 == Approx( 0.5 )[0;37m with 1 message:[0m 'Current expected value is 0.5'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.5'
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-1.0 == Approx( -1.0 )[0;37m with 1 message:[0m 'Current expected value is -1'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -1'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.7 == Approx( -0.7 )[0;37m with 1 message:[0m 'Current expected value is -0.7'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.7'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.4 == Approx( -0.4 )[0;37m with 1 message:[0m 'Current expected value is -0.4'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.4'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m-0.1 == Approx( -0.1 )[0;37m with 1 message:[0m 'Current expected value is -0.1'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is -0.1'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.2 == Approx( 0.2 )[0;37m with 1 message:[0m 'Current expected value is 0.2'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.2'
# Generators internals
ok {test-number} - gen.get() == Approx(expected)[0;37m for: [0m0.5 == Approx( 0.5 )[0;37m with 1 message:[0m 'Current expected value is 0.5'
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'Current expected value is 0.5'
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 5[0;37m for: [0m5 == 5
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -1[0;37m for: [0m-1 == -1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -4[0;37m for: [0m-4 == -4
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 5[0;37m for: [0m5 == 5
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -1[0;37m for: [0m-1 == -1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -4[0;37m for: [0m-4 == -4
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Generators internals
ok {test-number} - gen.get() == 5[0;37m for: [0m5 == 5
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == 2[0;37m for: [0m2 == 2
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -1[0;37m for: [0m-1 == -1
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -4[0;37m for: [0m-4 == -4
# Generators internals
ok {test-number} - gen.next()[0;37m for: [0mtrue
# Generators internals
ok {test-number} - gen.get() == -7[0;37m for: [0m-7 == -7
# Generators internals
ok {test-number} - !(gen.next())[0;37m for: [0m!false
# Greater-than inequalities with different epsilons
ok {test-number} - d >= Approx( 1.22 )[0;37m for: [0m1.23 >= Approx( 1.22 )
# Greater-than inequalities with different epsilons
ok {test-number} - d >= Approx( 1.23 )[0;37m for: [0m1.23 >= Approx( 1.23 )
# Greater-than inequalities with different epsilons
ok {test-number} - !(d >= Approx( 1.24 ))[0;37m for: [0m!(1.23 >= Approx( 1.24 ))
# Greater-than inequalities with different epsilons
ok {test-number} - d >= Approx( 1.24 ).epsilon(0.1)[0;37m for: [0m1.23 >= Approx( 1.24 )
# Hashers with different seed produce different hash with same test case
ok {test-number} - h1( dummy ) != h2( dummy )[0;37m for: [0m3422778688 (0x<hex digits>) != 130711275 (0x<hex digits>)
# Hashers with same seed produce same hash
ok {test-number} - h1( dummy ) == h2( dummy )[0;37m for: [0m3422778688 (0x<hex digits>) == 3422778688 (0x<hex digits>)
# Hashing different test cases produces different result
ok {test-number} - h( dummy1 ) != h( dummy2 )[0;37m for: [0m2903002874 (0x<hex digits>) != 2668622104 (0x<hex digits>)
# Hashing different test cases produces different result
ok {test-number} - h( dummy1 ) != h( dummy2 )[0;37m for: [0m2673152918 (0x<hex digits>) != 3916075712 (0x<hex digits>)
# Hashing different test cases produces different result
ok {test-number} - h( dummy1 ) != h( dummy2 )[0;37m for: [0m2074929312 (0x<hex digits>) != 3429949824 (0x<hex digits>)
# Hashing test case produces same hash across multiple calls
ok {test-number} - h( dummy ) == h( dummy )[0;37m for: [0m3422778688 (0x<hex digits>) == 3422778688 (0x<hex digits>)
# INFO and WARN do not abort tests
warning {test-number} - 'this is a message'[0;37m with 1 message:[0m 'this is a warning'
# INFO gets logged on failure
not ok {test-number} - a == 1[0;37m for: [0m2 == 1[0;37m with 2 messages:[0m 'this message should be logged'[0;37m and[0m 'so should this'
# INFO gets logged on failure, even if captured before successful assertions
ok {test-number} - a == 2[0;37m for: [0m2 == 2[0;37m with 1 message:[0m 'this message may be logged later'
# INFO gets logged on failure, even if captured before successful assertions
not ok {test-number} - a == 1[0;37m for: [0m2 == 1[0;37m with 2 messages:[0m 'this message may be logged later'[0;37m and[0m 'this message should be logged'
# INFO gets logged on failure, even if captured before successful assertions
not ok {test-number} - a == 0[0;37m for: [0m2 == 0[0;37m with 3 messages:[0m 'this message may be logged later'[0;37m and[0m 'this message should be logged'[0;37m and[0m 'and this, but later'
# INFO gets logged on failure, even if captured before successful assertions
ok {test-number} - a == 2[0;37m for: [0m2 == 2[0;37m with 4 messages:[0m 'this message may be logged later'[0;37m and[0m 'this message should be logged'[0;37m and[0m 'and this, but later'[0;37m and[0m 'but not this'
# INFO is reset for each loop
ok {test-number} - i < 10[0;37m for: [0m0 < 10[0;37m with 2 messages:[0m 'current counter 0'[0;37m and[0m 'i := 0'
# INFO is reset for each loop
ok {test-number} - i < 10[0;37m for: [0m1 < 10[0;37m with 2 messages:[0m 'current counter 1'[0;37m and[0m 'i := 1'
# INFO is reset for each loop
ok {test-number} - i < 10[0;37m for: [0m2 < 10[0;37m with 2 messages:[0m 'current counter 2'[0;37m and[0m 'i := 2'
# INFO is reset for each loop
ok {test-number} - i < 10[0;37m for: [0m3 < 10[0;37m with 2 messages:[0m 'current counter 3'[0;37m and[0m 'i := 3'
# INFO is reset for each loop
ok {test-number} - i < 10[0;37m for: [0m4 < 10[0;37m with 2 messages:[0m 'current counter 4'[0;37m and[0m 'i := 4'
# INFO is reset for each loop
ok {test-number} - i < 10[0;37m for: [0m5 < 10[0;37m with 2 messages:[0m 'current counter 5'[0;37m and[0m 'i := 5'
# INFO is reset for each loop
ok {test-number} - i < 10[0;37m for: [0m6 < 10[0;37m with 2 messages:[0m 'current counter 6'[0;37m and[0m 'i := 6'
# INFO is reset for each loop
ok {test-number} - i < 10[0;37m for: [0m7 < 10[0;37m with 2 messages:[0m 'current counter 7'[0;37m and[0m 'i := 7'
# INFO is reset for each loop
ok {test-number} - i < 10[0;37m for: [0m8 < 10[0;37m with 2 messages:[0m 'current counter 8'[0;37m and[0m 'i := 8'
# INFO is reset for each loop
ok {test-number} - i < 10[0;37m for: [0m9 < 10[0;37m with 2 messages:[0m 'current counter 9'[0;37m and[0m 'i := 9'
# INFO is reset for each loop
not ok {test-number} - i < 10[0;37m for: [0m10 < 10[0;37m with 2 messages:[0m 'current counter 10'[0;37m and[0m 'i := 10'
# Inequality checks that should fail
not ok {test-number} - data.int_seven != 7[0;37m for: [0m7 != 7
# Inequality checks that should fail
not ok {test-number} - data.float_nine_point_one != Approx( 9.1f )[0;37m for: [0m9.1f != Approx( 9.1000003815 )
# Inequality checks that should fail
not ok {test-number} - data.double_pi != Approx( 3.1415926535 )[0;37m for: [0m3.1415926535 != Approx( 3.1415926535 )
# Inequality checks that should fail
not ok {test-number} - data.str_hello != "hello"[0;37m for: [0m"hello" != "hello"
# Inequality checks that should fail
not ok {test-number} - data.str_hello.size() != 5[0;37m for: [0m5 != 5
# Inequality checks that should succeed
ok {test-number} - data.int_seven != 6[0;37m for: [0m7 != 6
# Inequality checks that should succeed
ok {test-number} - data.int_seven != 8[0;37m for: [0m7 != 8
# Inequality checks that should succeed
ok {test-number} - data.float_nine_point_one != Approx( 9.11f )[0;37m for: [0m9.1f != Approx( 9.1099996567 )
# Inequality checks that should succeed
ok {test-number} - data.float_nine_point_one != Approx( 9.0f )[0;37m for: [0m9.1f != Approx( 9.0 )
# Inequality checks that should succeed
ok {test-number} - data.float_nine_point_one != Approx( 1 )[0;37m for: [0m9.1f != Approx( 1.0 )
# Inequality checks that should succeed
ok {test-number} - data.float_nine_point_one != Approx( 0 )[0;37m for: [0m9.1f != Approx( 0.0 )
# Inequality checks that should succeed
ok {test-number} - data.double_pi != Approx( 3.1415 )[0;37m for: [0m3.1415926535 != Approx( 3.1415 )
# Inequality checks that should succeed
ok {test-number} - data.str_hello != "goodbye"[0;37m for: [0m"hello" != "goodbye"
# Inequality checks that should succeed
ok {test-number} - data.str_hello != "hell"[0;37m for: [0m"hello" != "hell"
# Inequality checks that should succeed
ok {test-number} - data.str_hello != "hello1"[0;37m for: [0m"hello" != "hello1"
# Inequality checks that should succeed
ok {test-number} - data.str_hello.size() != 6[0;37m for: [0m5 != 6
# Lambdas in assertions
ok {test-number} - []() { return true; }()[0;37m for: [0mtrue
# Less-than inequalities with different epsilons
ok {test-number} - d <= Approx( 1.24 )[0;37m for: [0m1.23 <= Approx( 1.24 )
# Less-than inequalities with different epsilons
ok {test-number} - d <= Approx( 1.23 )[0;37m for: [0m1.23 <= Approx( 1.23 )
# Less-than inequalities with different epsilons
ok {test-number} - !(d <= Approx( 1.22 ))[0;37m for: [0m!(1.23 <= Approx( 1.22 ))
# Less-than inequalities with different epsilons
ok {test-number} - d <= Approx( 1.22 ).epsilon(0.1)[0;37m for: [0m1.23 <= Approx( 1.22 )
# ManuallyRegistered
ok {test-number} -[0m with 1 message:[0m 'was called'
# Matchers can be (AllOf) composed with the && operator
ok {test-number} - testStringForMatching(), ContainsSubstring( "string" ) && ContainsSubstring( "abc" ) && ContainsSubstring( "substring" ) && ContainsSubstring( "contains" )[0;37m for: [0m"this string contains 'abc' as a substring" ( contains: "string" and contains: "abc" and contains: "substring" and contains: "contains" )
# Matchers can be (AnyOf) composed with the || operator
ok {test-number} - testStringForMatching(), ContainsSubstring( "string" ) || ContainsSubstring( "different" ) || ContainsSubstring( "random" )[0;37m for: [0m"this string contains 'abc' as a substring" ( contains: "string" or contains: "different" or contains: "random" )
# Matchers can be (AnyOf) composed with the || operator
ok {test-number} - testStringForMatching2(), ContainsSubstring( "string" ) || ContainsSubstring( "different" ) || ContainsSubstring( "random" )[0;37m for: [0m"some completely different text that contains one common word" ( contains: "string" or contains: "different" or contains: "random" )
# Matchers can be composed with both && and ||
ok {test-number} - testStringForMatching(), ( ContainsSubstring( "string" ) || ContainsSubstring( "different" ) ) && ContainsSubstring( "substring" )[0;37m for: [0m"this string contains 'abc' as a substring" ( ( contains: "string" or contains: "different" ) and contains: "substring" )
# Matchers can be composed with both && and || - failing
not ok {test-number} - testStringForMatching(), ( ContainsSubstring( "string" ) || ContainsSubstring( "different" ) ) && ContainsSubstring( "random" )[0;37m for: [0m"this string contains 'abc' as a substring" ( ( contains: "string" or contains: "different" ) and contains: "random" )
# Matchers can be negated (Not) with the ! operator
ok {test-number} - testStringForMatching(), !ContainsSubstring( "different" )[0;37m for: [0m"this string contains 'abc' as a substring" not contains: "different"
# Matchers can be negated (Not) with the ! operator - failing
not ok {test-number} - testStringForMatching(), !ContainsSubstring( "substring" )[0;37m for: [0m"this string contains 'abc' as a substring" not contains: "substring"
# Mayfail test case with nested sections
not ok {test-number} - explicitly
# Mayfail test case with nested sections
not ok {test-number} - explicitly
# Mayfail test case with nested sections
not ok {test-number} - explicitly
# Mayfail test case with nested sections
not ok {test-number} - explicitly
# Mismatching exception messages failing the test
ok {test-number} - thisThrows(), "expected exception"[0;37m for: [0m"expected exception" equals: "expected exception"
# Mismatching exception messages failing the test
not ok {test-number} - thisThrows(), "should fail"[0;37m for: [0m"expected exception" equals: "should fail"
# Multireporter calls reporters and listeners in correct order
ok {test-number} - records == expected[0;37m for: [0m{ "Hello", "world", "Goodbye", "world" } == { "Hello", "world", "Goodbye", "world" }
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldRedirectStdOut == false[0;37m for: [0mfalse == false
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldReportAllAssertions == false[0;37m for: [0mfalse == false
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldRedirectStdOut == true[0;37m for: [0mtrue == true
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldReportAllAssertions == false[0;37m for: [0mfalse == false
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldRedirectStdOut == true[0;37m for: [0mtrue == true
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldReportAllAssertions == true[0;37m for: [0mtrue == true
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldRedirectStdOut == true[0;37m for: [0mtrue == true
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldReportAllAssertions == true[0;37m for: [0mtrue == true
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldRedirectStdOut == false[0;37m for: [0mfalse == false
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldReportAllAssertions == false[0;37m for: [0mfalse == false
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldRedirectStdOut == true[0;37m for: [0mtrue == true
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldReportAllAssertions == false[0;37m for: [0mfalse == false
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldRedirectStdOut == true[0;37m for: [0mtrue == true
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldReportAllAssertions == true[0;37m for: [0mtrue == true
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldRedirectStdOut == true[0;37m for: [0mtrue == true
# Multireporter updates ReporterPreferences properly
ok {test-number} - multiReporter.getPreferences().shouldReportAllAssertions == true[0;37m for: [0mtrue == true
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m3 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m4 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m5 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m6 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m-5 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m-4 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m90 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m91 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m92 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m93 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m94 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m95 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m96 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m97 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m98 > -6
# Nested generators and captured variables
ok {test-number} - values > -6[0;37m for: [0m99 > -6
# Nice descriptive name
warning {test-number} - 'This one ran'
# Non-std exceptions can be translated
not ok {test-number} - unexpected exception with message: 'custom exception'
# Objects that evaluated in boolean contexts can be checked
ok {test-number} - True[0;37m for: [0m{?}
# Objects that evaluated in boolean contexts can be checked
ok {test-number} - !False[0;37m for: [0mtrue
# Objects that evaluated in boolean contexts can be checked
ok {test-number} - !(False)[0;37m for: [0m!{?}
# Optionally static assertions
ok {test-number} -[0m with 1 message:[0m 'std::is_void<void>::value'
# Optionally static assertions
ok {test-number} -[0m with 1 message:[0m '!(std::is_void<int>::value)'
# Optionally static assertions
ok {test-number} -[0m with 1 message:[0m 'std::is_void<void>::value'
# Optionally static assertions
ok {test-number} -[0m with 1 message:[0m '!(std::is_void<int>::value)'
# Ordering comparison checks that should fail
not ok {test-number} - data.int_seven > 7[0;37m for: [0m7 > 7
# Ordering comparison checks that should fail
not ok {test-number} - data.int_seven < 7[0;37m for: [0m7 < 7
# Ordering comparison checks that should fail
not ok {test-number} - data.int_seven > 8[0;37m for: [0m7 > 8
# Ordering comparison checks that should fail
not ok {test-number} - data.int_seven < 6[0;37m for: [0m7 < 6
# Ordering comparison checks that should fail
not ok {test-number} - data.int_seven < 0[0;37m for: [0m7 < 0
# Ordering comparison checks that should fail
not ok {test-number} - data.int_seven < -1[0;37m for: [0m7 < -1
# Ordering comparison checks that should fail
not ok {test-number} - data.int_seven >= 8[0;37m for: [0m7 >= 8
# Ordering comparison checks that should fail
not ok {test-number} - data.int_seven <= 6[0;37m for: [0m7 <= 6
# Ordering comparison checks that should fail
not ok {test-number} - data.float_nine_point_one < 9[0;37m for: [0m9.1f < 9
# Ordering comparison checks that should fail
not ok {test-number} - data.float_nine_point_one > 10[0;37m for: [0m9.1f > 10
# Ordering comparison checks that should fail
not ok {test-number} - data.float_nine_point_one > 9.2[0;37m for: [0m9.1f > 9.2
# Ordering comparison checks that should fail
not ok {test-number} - data.str_hello > "hello"[0;37m for: [0m"hello" > "hello"
# Ordering comparison checks that should fail
not ok {test-number} - data.str_hello < "hello"[0;37m for: [0m"hello" < "hello"
# Ordering comparison checks that should fail
not ok {test-number} - data.str_hello > "hellp"[0;37m for: [0m"hello" > "hellp"
# Ordering comparison checks that should fail
not ok {test-number} - data.str_hello > "z"[0;37m for: [0m"hello" > "z"
# Ordering comparison checks that should fail
not ok {test-number} - data.str_hello < "hellm"[0;37m for: [0m"hello" < "hellm"
# Ordering comparison checks that should fail
not ok {test-number} - data.str_hello < "a"[0;37m for: [0m"hello" < "a"
# Ordering comparison checks that should fail
not ok {test-number} - data.str_hello >= "z"[0;37m for: [0m"hello" >= "z"
# Ordering comparison checks that should fail
not ok {test-number} - data.str_hello <= "a"[0;37m for: [0m"hello" <= "a"
# Ordering comparison checks that should succeed
ok {test-number} - data.int_seven < 8[0;37m for: [0m7 < 8
# Ordering comparison checks that should succeed
ok {test-number} - data.int_seven > 6[0;37m for: [0m7 > 6
# Ordering comparison checks that should succeed
ok {test-number} - data.int_seven > 0[0;37m for: [0m7 > 0
# Ordering comparison checks that should succeed
ok {test-number} - data.int_seven > -1[0;37m for: [0m7 > -1
# Ordering comparison checks that should succeed
ok {test-number} - data.int_seven >= 7[0;37m for: [0m7 >= 7
# Ordering comparison checks that should succeed
ok {test-number} - data.int_seven >= 6[0;37m for: [0m7 >= 6
# Ordering comparison checks that should succeed
ok {test-number} - data.int_seven <= 7[0;37m for: [0m7 <= 7
# Ordering comparison checks that should succeed
ok {test-number} - data.int_seven <= 8[0;37m for: [0m7 <= 8
# Ordering comparison checks that should succeed
ok {test-number} - data.float_nine_point_one > 9[0;37m for: [0m9.1f > 9
# Ordering comparison checks that should succeed
ok {test-number} - data.float_nine_point_one < 10[0;37m for: [0m9.1f < 10
# Ordering comparison checks that should succeed
ok {test-number} - data.float_nine_point_one < 9.2[0;37m for: [0m9.1f < 9.2
# Ordering comparison checks that should succeed
ok {test-number} - data.str_hello <= "hello"[0;37m for: [0m"hello" <= "hello"
# Ordering comparison checks that should succeed
ok {test-number} - data.str_hello >= "hello"[0;37m for: [0m"hello" >= "hello"
# Ordering comparison checks that should succeed
ok {test-number} - data.str_hello < "hellp"[0;37m for: [0m"hello" < "hellp"
# Ordering comparison checks that should succeed
ok {test-number} - data.str_hello < "zebra"[0;37m for: [0m"hello" < "zebra"
# Ordering comparison checks that should succeed
ok {test-number} - data.str_hello > "hellm"[0;37m for: [0m"hello" > "hellm"
# Ordering comparison checks that should succeed
ok {test-number} - data.str_hello > "a"[0;37m for: [0m"hello" > "a"
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m4242248763 (0x<hex digits>) == 4242248763 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m1867888929 (0x<hex digits>) == 1867888929 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m1276619030 (0x<hex digits>) == 1276619030 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m1911218783 (0x<hex digits>) == 1911218783 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m1827115164 (0x<hex digits>) == 1827115164 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m1472234645 (0x<hex digits>) == 1472234645 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m868832940 (0x<hex digits>) == 868832940 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m570883446 (0x<hex digits>) == 570883446 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m889299803 (0x<hex digits>) == 889299803 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m4261393167 (0x<hex digits>) == 4261393167 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m1472234645 (0x<hex digits>) == 1472234645 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m868832940 (0x<hex digits>) == 868832940 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m570883446 (0x<hex digits>) == 570883446 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m889299803 (0x<hex digits>) == 889299803 (0x<hex digits>)
# Our PCG implementation provides expected results for known seeds
ok {test-number} - rng() == 0x<hex digits>[0;37m for: [0m4261393167 (0x<hex digits>) == 4261393167 (0x<hex digits>)
# Output from all sections is reported
not ok {test-number} - explicitly[0m with 1 message:[0m 'Message from section one'
# Output from all sections is reported
not ok {test-number} - explicitly[0m with 1 message:[0m 'Message from section two'
# Overloaded comma or address-of operators are not used
ok {test-number} - ( EvilMatcher(), EvilMatcher() ), EvilCommaOperatorUsed
# Overloaded comma or address-of operators are not used
ok {test-number} - &EvilMatcher(), EvilAddressOfOperatorUsed
# Overloaded comma or address-of operators are not used
ok {test-number} - EvilMatcher() || ( EvilMatcher() && !EvilMatcher() )
# Overloaded comma or address-of operators are not used
ok {test-number} - ( EvilMatcher() && EvilMatcher() ) || !EvilMatcher()
# Parse test names and tags
ok {test-number} - spec.hasFilters() == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - parseTestSpec( "*a" ).matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - parseTestSpec( "a*" ).matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - parseTestSpec( "*a*" ).matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.hasFilters() == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *tcA ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcB ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcC ) == false[0;37m for: [0mfalse == false
# Parse test names and tags
ok {test-number} - spec.matches( *tcD ) == true[0;37m for: [0mtrue == true
# Parse test names and tags
ok {test-number} - spec.matches( *fakeTestCase( "  aardvark " ) )[0;37m for: [0mtrue
# Parse test names and tags
ok {test-number} - spec.matches( *fakeTestCase( "  aardvark" ) )[0;37m for: [0mtrue
# Parse test names and tags
ok {test-number} - spec.matches( *fakeTestCase( " aardvark " ) )[0;37m for: [0mtrue
# Parse test names and tags
ok {test-number} - spec.matches( *fakeTestCase( "aardvark " ) )[0;37m for: [0mtrue
# Parse test names and tags
ok {test-number} - spec.matches( *fakeTestCase( "aardvark" ) )[0;37m for: [0mtrue
# Parse test names and tags
ok {test-number} - spec.matches( *fakeTestCase( "  aardvark " ) )[0;37m for: [0mtrue
# Parse test names and tags
ok {test-number} - spec.matches( *fakeTestCase( "  aardvark" ) )[0;37m for: [0mtrue
# Parse test names and tags
ok {test-number} - spec.matches( *fakeTestCase( " aardvark " ) )[0;37m for: [0mtrue
# Parse test names and tags
ok {test-number} - spec.matches( *fakeTestCase( "aardvark " ) )[0;37m for: [0mtrue
# Parse test names and tags
ok {test-number} - spec.matches( *fakeTestCase( "aardvark" ) )[0;37m for: [0mtrue
# Parse test names and tags
ok {test-number} - spec.matches(*fakeTestCase("hidden and foo", "[.][foo]"))[0;37m for: [0mtrue
# Parse test names and tags
ok {test-number} - !(spec.matches(*fakeTestCase("only foo", "[foo]")))[0;37m for: [0m!false
# Parse test names and tags
ok {test-number} - !(spec.matches(*fakeTestCase("hidden and foo", "[.][foo]")))[0;37m for: [0m!false
# Parse test names and tags
ok {test-number} - !(spec.matches(*fakeTestCase("only foo", "[foo]")))[0;37m for: [0m!false
# Parse test names and tags
ok {test-number} - !(spec.matches(*fakeTestCase("only hidden", "[.]")))[0;37m for: [0m!false
# Parse test names and tags
ok {test-number} - spec.matches(*fakeTestCase("neither foo nor hidden", "[bar]"))[0;37m for: [0mtrue
# Parsed tags are matched case insensitive
ok {test-number} - spec.hasFilters()[0;37m for: [0mtrue
# Parsed tags are matched case insensitive
ok {test-number} - spec.getInvalidSpecs().empty()[0;37m for: [0mtrue
# Parsed tags are matched case insensitive
ok {test-number} - spec.matches( testCase )[0;37m for: [0mtrue
# Parsing sharding-related cli flags
ok {test-number} - cli.parse({ "test", "--shard-count=8" })[0;37m for: [0m{?}
# Parsing sharding-related cli flags
ok {test-number} - config.shardCount == 8[0;37m for: [0m8 == 8
# Parsing sharding-related cli flags
ok {test-number} - !(result)[0;37m for: [0m!{?}
# Parsing sharding-related cli flags
ok {test-number} - result.errorMessage(), ContainsSubstring("Shard count must be a positive number")[0;37m for: [0m"Shard count must be a positive number" contains: "Shard count must be a positive number"
# Parsing sharding-related cli flags
ok {test-number} - !(result)[0;37m for: [0m!{?}
# Parsing sharding-related cli flags
ok {test-number} - result.errorMessage(), ContainsSubstring("Shard count must be a positive number")[0;37m for: [0m"Shard count must be a positive number" contains: "Shard count must be a positive number"
# Parsing sharding-related cli flags
ok {test-number} - cli.parse({ "test", "--shard-index=2" })[0;37m for: [0m{?}
# Parsing sharding-related cli flags
ok {test-number} - config.shardIndex == 2[0;37m for: [0m2 == 2
# Parsing sharding-related cli flags
ok {test-number} - !(result)[0;37m for: [0m!{?}
# Parsing sharding-related cli flags
ok {test-number} - result.errorMessage(), ContainsSubstring("Shard index must be a non-negative number")[0;37m for: [0m"Shard index must be a non-negative number" contains: "Shard index must be a non-negative number"
# Parsing sharding-related cli flags
ok {test-number} - cli.parse({ "test", "--shard-index=0" })[0;37m for: [0m{?}
# Parsing sharding-related cli flags
ok {test-number} - config.shardIndex == 0[0;37m for: [0m0 == 0
# Parsing tags with non-alphabetical characters is pass-through
ok {test-number} - spec.hasFilters()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'tagString := "[tag with spaces]"'
# Parsing tags with non-alphabetical characters is pass-through
ok {test-number} - spec.getInvalidSpecs().empty()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'tagString := "[tag with spaces]"'
# Parsing tags with non-alphabetical characters is pass-through
ok {test-number} - spec.matches( testCase )[0;37m for: [0mtrue[0;37m with 1 message:[0m 'tagString := "[tag with spaces]"'
# Parsing tags with non-alphabetical characters is pass-through
ok {test-number} - spec.hasFilters()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'tagString := "[I said "good day" sir!]"'
# Parsing tags with non-alphabetical characters is pass-through
ok {test-number} - spec.getInvalidSpecs().empty()[0;37m for: [0mtrue[0;37m with 1 message:[0m 'tagString := "[I said "good day" sir!]"'
# Parsing tags with non-alphabetical characters is pass-through
ok {test-number} - spec.matches( testCase )[0;37m for: [0mtrue[0;37m with 1 message:[0m 'tagString := "[I said "good day" sir!]"'
# Parsing warnings
ok {test-number} - cli.parse( { "test", "-w", "NoAssertions" } )[0;37m for: [0m{?}
# Parsing warnings
ok {test-number} - config.warnings == WarnAbout::NoAssertions[0;37m for: [0m1 == 1
# Parsing warnings
ok {test-number} - !(cli.parse( { "test", "-w", "NoTests" } ))[0;37m for: [0m!{?}
# Parsing warnings
ok {test-number} - cli.parse( { "test", "--warn", "NoAssertions", "--warn", "UnmatchedTestSpec" } )[0;37m for: [0m{?}
# Parsing warnings
ok {test-number} - config.warnings == ( WarnAbout::NoAssertions | WarnAbout::UnmatchedTestSpec )[0;37m for: [0m3 == 3
# Pointers can be compared to null
ok {test-number} - p == 0[0;37m for: [0mnullptr == 0
# Pointers can be compared to null
ok {test-number} - p == pNULL[0;37m for: [0mnullptr == 0
# Pointers can be compared to null
ok {test-number} - p != 0[0;37m for: [0m0x000000549a73de30 != 0
# Pointers can be compared to null
ok {test-number} - cp != 0[0;37m for: [0m0x000000549a73de30 != 0
# Pointers can be compared to null
ok {test-number} - cpc != 0[0;37m for: [0m0x000000549a73de30 != 0
# Pointers can be compared to null
ok {test-number} - returnsNull() == 0[0;37m for: [0m{null string} == 0
# Pointers can be compared to null
ok {test-number} - returnsConstNull() == 0[0;37m for: [0m{null string} == 0
# Pointers can be compared to null
ok {test-number} - 0 != p[0;37m for: [0mnullptr != 0x<hex digits>
# Precision of floating point stringification can be set
ok {test-number} - str1.size() == 3 + 5[0;37m for: [0m8 == 8
# Precision of floating point stringification can be set
ok {test-number} - str2.size() == 3 + 10[0;37m for: [0m13 == 13
# Precision of floating point stringification can be set
ok {test-number} - str1.size() == 2 + 5[0;37m for: [0m7 == 7
# Precision of floating point stringification can be set
ok {test-number} - str2.size() == 2 + 15[0;37m for: [0m17 == 17
# Predicate matcher can accept const char*
ok {test-number} - "foo", Predicate<const char*>( []( const char* const& ) { return true; } )[0;37m for: [0m"foo" matches undescribed predicate
# Process can be configured on command line
ok {test-number} - result[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.processName == ""[0;37m for: [0m"" == ""
# Process can be configured on command line
ok {test-number} - result[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.processName == "test"[0;37m for: [0m"test" == "test"
# Process can be configured on command line
ok {test-number} - config.shouldDebugBreak == false[0;37m for: [0mfalse == false
# Process can be configured on command line
ok {test-number} - config.abortAfter == -1[0;37m for: [0m-1 == -1
# Process can be configured on command line
ok {test-number} - config.noThrow == false[0;37m for: [0mfalse == false
# Process can be configured on command line
ok {test-number} - config.reporterSpecifications.empty()[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - !(cfg.hasTestFilters())[0;37m for: [0m!false
# Process can be configured on command line
ok {test-number} - cfg.getReporterSpecs().size() == 1[0;37m for: [0m1 == 1
# Process can be configured on command line
ok {test-number} - cfg.getReporterSpecs()[0] == Catch::ReporterSpec{ expectedReporter, {}, {}, {} }[0;37m for: [0m{?} == {?}
# Process can be configured on command line
ok {test-number} - cfg.getProcessedReporterSpecs().size() == 1[0;37m for: [0m1 == 1
# Process can be configured on command line
ok {test-number} - cfg.getProcessedReporterSpecs()[0] == Catch::ProcessedReporterSpec{ expectedReporter, std::string{}, Catch::ColourMode::PlatformDefault, {} }[0;37m for: [0m{?} == {?}
# Process can be configured on command line
ok {test-number} - result[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - cfg.hasTestFilters()[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - cfg.testSpec().matches(*fakeTestCase("notIncluded")) == false[0;37m for: [0mfalse == false
# Process can be configured on command line
ok {test-number} - cfg.testSpec().matches(*fakeTestCase("test1"))[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - result[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - cfg.hasTestFilters()[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - cfg.testSpec().matches(*fakeTestCase("test1")) == false[0;37m for: [0mfalse == false
# Process can be configured on command line
ok {test-number} - cfg.testSpec().matches(*fakeTestCase("alwaysIncluded"))[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - result[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - cfg.hasTestFilters()[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - cfg.testSpec().matches(*fakeTestCase("test1")) == false[0;37m for: [0mfalse == false
# Process can be configured on command line
ok {test-number} - cfg.testSpec().matches(*fakeTestCase("alwaysIncluded"))[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - result[0;37m for: [0m{?}[0;37m with 1 message:[0m 'result.errorMessage() := ""'
# Process can be configured on command line
ok {test-number} - config.reporterSpecifications == vec_Specs{ { "console", {}, {}, {} } }[0;37m for: [0m{ {?} } == { {?} }[0;37m with 1 message:[0m 'result.errorMessage() := ""'
# Process can be configured on command line
ok {test-number} - result[0;37m for: [0m{?}[0;37m with 1 message:[0m 'result.errorMessage() := ""'
# Process can be configured on command line
ok {test-number} - config.reporterSpecifications == vec_Specs{ { "xml", {}, {}, {} } }[0;37m for: [0m{ {?} } == { {?} }[0;37m with 1 message:[0m 'result.errorMessage() := ""'
# Process can be configured on command line
ok {test-number} - result[0;37m for: [0m{?}[0;37m with 1 message:[0m 'result.errorMessage() := ""'
# Process can be configured on command line
ok {test-number} - config.reporterSpecifications == vec_Specs{ { "junit", {}, {}, {} } }[0;37m for: [0m{ {?} } == { {?} }[0;37m with 1 message:[0m 'result.errorMessage() := ""'
# Process can be configured on command line
ok {test-number} - !result[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - result.errorMessage(), ContainsSubstring("Unrecognized reporter")[0;37m for: [0m"Unrecognized reporter, 'unsupported'. Check available with --list-reporters" contains: "Unrecognized reporter"
# Process can be configured on command line
ok {test-number} - result[0;37m for: [0m{?}[0;37m with 1 message:[0m 'result.errorMessage() := ""'
# Process can be configured on command line
ok {test-number} - config.reporterSpecifications == vec_Specs{ { "console", "out.txt"s, {}, {} } }[0;37m for: [0m{ {?} } == { {?} }[0;37m with 1 message:[0m 'result.errorMessage() := ""'
# Process can be configured on command line
ok {test-number} - result[0;37m for: [0m{?}[0;37m with 1 message:[0m 'result.errorMessage() := ""'
# Process can be configured on command line
ok {test-number} - config.reporterSpecifications == vec_Specs{ { "console", "C:\\Temp\\out.txt"s, {}, {} } }[0;37m for: [0m{ {?} } == { {?} }[0;37m with 1 message:[0m 'result.errorMessage() := ""'
# Process can be configured on command line
ok {test-number} - cli.parse({ "test", "-r", "xml::out=output.xml", "-r", "junit::out=output-junit.xml" })[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.reporterSpecifications == vec_Specs{ { "xml", "output.xml"s, {}, {} }, { "junit", "output-junit.xml"s, {}, {} } }[0;37m for: [0m{ {?}, {?} } == { {?}, {?} }
# Process can be configured on command line
ok {test-number} - cli.parse({ "test", "-r", "xml::out=output.xml", "-r", "console" })[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.reporterSpecifications == vec_Specs{ { "xml", "output.xml"s, {}, {} }, { "console", {}, {}, {} } }[0;37m for: [0m{ {?}, {?} } == { {?}, {?} }
# Process can be configured on command line
ok {test-number} - !result[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - result.errorMessage(), ContainsSubstring("Only one reporter may have unspecified output file.")[0;37m for: [0m"Only one reporter may have unspecified output file." contains: "Only one reporter may have unspecified output file."
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "-b"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.shouldDebugBreak == true[0;37m for: [0mtrue == true
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "--break"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.shouldDebugBreak[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "-a"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.abortAfter == 1[0;37m for: [0m1 == 1
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "-x", "2"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.abortAfter == 2[0;37m for: [0m2 == 2
# Process can be configured on command line
ok {test-number} - !result[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - result.errorMessage(), ContainsSubstring("convert") && ContainsSubstring("oops")[0;37m for: [0m"Unable to convert 'oops' to destination type" ( contains: "convert" and contains: "oops" )
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "--wait-for-keypress", std::get<0>(input)})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.waitForKeypress == std::get<1>(input)[0;37m for: [0m0 == 0
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "--wait-for-keypress", std::get<0>(input)})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.waitForKeypress == std::get<1>(input)[0;37m for: [0m1 == 1
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "--wait-for-keypress", std::get<0>(input)})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.waitForKeypress == std::get<1>(input)[0;37m for: [0m2 == 2
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "--wait-for-keypress", std::get<0>(input)})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.waitForKeypress == std::get<1>(input)[0;37m for: [0m3 == 3
# Process can be configured on command line
ok {test-number} - !result[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - result.errorMessage(), ContainsSubstring("never") && ContainsSubstring("both")[0;37m for: [0m"keypress argument must be one of: never, start, exit or both. 'sometimes' not recognised" ( contains: "never" and contains: "both" )
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "-e"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.noThrow[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "--nothrow"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.noThrow[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "-o", "filename.ext"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.defaultOutputFilename == "filename.ext"[0;37m for: [0m"filename.ext" == "filename.ext"
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "--out", "filename.ext"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.defaultOutputFilename == "filename.ext"[0;37m for: [0m"filename.ext" == "filename.ext"
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "-abe"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.abortAfter == 1[0;37m for: [0m1 == 1
# Process can be configured on command line
ok {test-number} - config.shouldDebugBreak[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - config.noThrow == true[0;37m for: [0mtrue == true
# Process can be configured on command line
ok {test-number} - cli.parse({"test"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.defaultColourMode == ColourMode::PlatformDefault[0;37m for: [0m0 == 0
# Process can be configured on command line
ok {test-number} - cli.parse( { "test", "--colour-mode", "default" } )[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.defaultColourMode == ColourMode::PlatformDefault[0;37m for: [0m0 == 0
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "--colour-mode", "ansi"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.defaultColourMode == ColourMode::ANSI[0;37m for: [0m1 == 1
# Process can be configured on command line
ok {test-number} - cli.parse({"test", "--colour-mode", "none"})[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.defaultColourMode == ColourMode::None[0;37m for: [0m3 == 3
# Process can be configured on command line
ok {test-number} - !result[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - result.errorMessage(), ContainsSubstring( "colour mode must be one of" )[0;37m for: [0m"colour mode must be one of: default, ansi, win32, or none. 'wrong' is not recognised" contains: "colour mode must be one of"
# Process can be configured on command line
ok {test-number} - cli.parse({ "test", "--benchmark-samples=200" })[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.benchmarkSamples == 200[0;37m for: [0m200 == 200
# Process can be configured on command line
ok {test-number} - cli.parse({ "test", "--benchmark-resamples=20000" })[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.benchmarkResamples == 20000[0;37m for: [0m20000 (0x<hex digits>) == 20000 (0x<hex digits>)
# Process can be configured on command line
ok {test-number} - cli.parse({ "test", "--benchmark-confidence-interval=0.99" })[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.benchmarkConfidenceInterval == Catch::Approx(0.99)[0;37m for: [0m0.99 == Approx( 0.99 )
# Process can be configured on command line
ok {test-number} - cli.parse({ "test", "--benchmark-no-analysis" })[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.benchmarkNoAnalysis[0;37m for: [0mtrue
# Process can be configured on command line
ok {test-number} - cli.parse({ "test", "--benchmark-warmup-time=10" })[0;37m for: [0m{?}
# Process can be configured on command line
ok {test-number} - config.benchmarkWarmupTime == 10[0;37m for: [0m10 == 10
# Product with differing arities - std::tuple<int, double, float>
ok {test-number} - std::tuple_size<TestType>::value >= 1[0;37m for: [0m3 >= 1
# Product with differing arities - std::tuple<int, double>
ok {test-number} - std::tuple_size<TestType>::value >= 1[0;37m for: [0m2 >= 1
# Product with differing arities - std::tuple<int>
ok {test-number} - std::tuple_size<TestType>::value >= 1[0;37m for: [0m1 >= 1
# Random seed generation accepts known methods
ok {test-number} - Catch::generateRandomSeed(method)
# Random seed generation accepts known methods
ok {test-number} - Catch::generateRandomSeed(method)
# Random seed generation accepts known methods
ok {test-number} - Catch::generateRandomSeed(method)
# Random seed generation reports unknown methods
ok {test-number} - Catch::generateRandomSeed(static_cast<Catch::GenerateFrom>(77))
# Range type with sentinel
ok {test-number} - Catch::Detail::stringify(UsesSentinel{}) == "{  }"[0;37m for: [0m"{  }" == "{  }"
# Reconstruction should be based on stringification: #914
not ok {test-number} - truthy(false)[0;37m for: [0mHey, its truthy!
# Regex string matcher
not ok {test-number} - testStringForMatching(), Matches( "this STRING contains 'abc' as a substring" )[0;37m for: [0m"this string contains 'abc' as a substring" matches "this STRING contains 'abc' as a substring" case sensitively
# Regex string matcher
not ok {test-number} - testStringForMatching(), Matches( "contains 'abc' as a substring" )[0;37m for: [0m"this string contains 'abc' as a substring" matches "contains 'abc' as a substring" case sensitively
# Regex string matcher
not ok {test-number} - testStringForMatching(), Matches( "this string contains 'abc' as a" )[0;37m for: [0m"this string contains 'abc' as a substring" matches "this string contains 'abc' as a" case sensitively
# Registering reporter with '::' in name fails
ok {test-number} - registry.registerReporter( "with::doublecolons", Catch::Detail::make_unique<TestReporterFactory>() ), "'::' is not allowed in reporter name: 'with::doublecolons'"[0;37m for: [0m"'::' is not allowed in reporter name: 'with::doublecolons'" equals: "'::' is not allowed in reporter name: 'with::doublecolons'"
# Regression test #1
ok {test-number} - actual, !UnorderedEquals( expected )[0;37m for: [0m{ 'a', 'b' } not UnorderedEquals: { 'c', 'b' }
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fakeTag"s)[0;37m for: [0m"All available tags:    1  [fakeTag] 1 tag  " contains: "fakeTag"[0;37m with 1 message:[0m 'Tested reporter: Automake'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fake reporter"s)[0;37m for: [0m"Available reporters:   fake reporter:  fake description  " contains: "fake reporter"[0;37m with 1 message:[0m 'Tested reporter: Automake'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s )[0;37m for: [0m"All available test cases:   fake test name       [fakeTestTag] 1 test case  " ( contains: "fake test name" and contains: "fakeTestTag" )[0;37m with 1 message:[0m 'Tested reporter: Automake'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fakeTag"s)[0;37m for: [0m"All available tags:    1  [fakeTag] 1 tag  " contains: "fakeTag"[0;37m with 1 message:[0m 'Tested reporter: compact'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fake reporter"s)[0;37m for: [0m"Available reporters:   fake reporter:  fake description  " contains: "fake reporter"[0;37m with 1 message:[0m 'Tested reporter: compact'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s )[0;37m for: [0m"All available test cases:   fake test name       [fakeTestTag] 1 test case  " ( contains: "fake test name" and contains: "fakeTestTag" )[0;37m with 1 message:[0m 'Tested reporter: compact'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fakeTag"s)[0;37m for: [0m"All available tags:    1  [fakeTag] 1 tag  " contains: "fakeTag"[0;37m with 1 message:[0m 'Tested reporter: console'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fake reporter"s)[0;37m for: [0m"Available reporters:   fake reporter:  fake description  " contains: "fake reporter"[0;37m with 1 message:[0m 'Tested reporter: console'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s )[0;37m for: [0m"All available test cases:   fake test name       [fakeTestTag] 1 test case  " ( contains: "fake test name" and contains: "fakeTestTag" )[0;37m with 1 message:[0m 'Tested reporter: console'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fakeTag"s)[0;37m for: [0m"<?xml version="1.0" encoding="UTF-8"?> All available tags:    1  [fakeTag] 1 tag  " contains: "fakeTag"[0;37m with 1 message:[0m 'Tested reporter: JUnit'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fake reporter"s)[0;37m for: [0m"<?xml version="1.0" encoding="UTF-8"?> Available reporters:   fake reporter:  fake description  " contains: "fake reporter"[0;37m with 1 message:[0m 'Tested reporter: JUnit'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s )[0;37m for: [0m"<?xml version="1.0" encoding="UTF-8"?> All available test cases:   fake test name       [fakeTestTag] 1 test case  " ( contains: "fake test name" and contains: "fakeTestTag" )[0;37m with 1 message:[0m 'Tested reporter: JUnit'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fakeTag"s)[0;37m for: [0m"<?xml version="1.0" encoding="UTF-8"?> All available tags:    1  [fakeTag] 1 tag  " contains: "fakeTag"[0;37m with 1 message:[0m 'Tested reporter: SonarQube'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fake reporter"s)[0;37m for: [0m"<?xml version="1.0" encoding="UTF-8"?> Available reporters:   fake reporter:  fake description  " contains: "fake reporter"[0;37m with 1 message:[0m 'Tested reporter: SonarQube'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s )[0;37m for: [0m"<?xml version="1.0" encoding="UTF-8"?> All available test cases:   fake test name       [fakeTestTag] 1 test case  " ( contains: "fake test name" and contains: "fakeTestTag" )[0;37m with 1 message:[0m 'Tested reporter: SonarQube'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fakeTag"s)[0;37m for: [0m"All available tags:    1  [fakeTag] 1 tag  " contains: "fakeTag"[0;37m with 1 message:[0m 'Tested reporter: TAP'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fake reporter"s)[0;37m for: [0m"Available reporters:   fake reporter:  fake description  " contains: "fake reporter"[0;37m with 1 message:[0m 'Tested reporter: TAP'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s )[0;37m for: [0m"All available test cases:   fake test name       [fakeTestTag] 1 test case  " ( contains: "fake test name" and contains: "fakeTestTag" )[0;37m with 1 message:[0m 'Tested reporter: TAP'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fakeTag"s)[0;37m for: [0m"All available tags:    1  [fakeTag] 1 tag  " contains: "fakeTag"[0;37m with 1 message:[0m 'Tested reporter: TeamCity'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fake reporter"s)[0;37m for: [0m"Available reporters:   fake reporter:  fake description  " contains: "fake reporter"[0;37m with 1 message:[0m 'Tested reporter: TeamCity'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s )[0;37m for: [0m"All available test cases:   fake test name       [fakeTestTag] 1 test case  " ( contains: "fake test name" and contains: "fakeTestTag" )[0;37m with 1 message:[0m 'Tested reporter: TeamCity'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fakeTag"s)[0;37m for: [0m"<?xml version="1.0" encoding="UTF-8"?> <TagsFromMatchingTests>   <Tag>     <Count>1</Count>     <Aliases>       <Alias>fakeTag</Alias>     </Aliases>   </Tag> </TagsFromMatchingTests>" contains: "fakeTag"[0;37m with 1 message:[0m 'Tested reporter: XML'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring("fake reporter"s)[0;37m for: [0m"<?xml version="1.0" encoding="UTF-8"?> <AvailableReporters>   <Reporter>     <Name>fake reporter</Name>     <Description>fake description</Description>   </Reporter> </AvailableReporters>" contains: "fake reporter"[0;37m with 1 message:[0m 'Tested reporter: XML'
# Reporter's write listings to provided stream
ok {test-number} - !(factories.empty())[0;37m for: [0m!false
# Reporter's write listings to provided stream
ok {test-number} - listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s )[0;37m for: [0m"<?xml version="1.0" encoding="UTF-8"?> <MatchingTests>   <TestCase>     <Name>fake test name</Name>     <ClassName/>     <Tags>[fakeTestTag]</Tags>     <SourceInfo>       <File>fake-file.cpp</File>       <Line>123456789</Line>     </SourceInfo>   </TestCase> </MatchingTests>" ( contains: "fake test name" and contains: "fakeTestTag" )[0;37m with 1 message:[0m 'Tested reporter: XML'
# Reproducer for #2309 - a very long description past 80 chars (default console width) with a late colon : blablabla
ok {test-number} -
# SUCCEED counts as a test pass
ok {test-number} -[0m with 1 message:[0m 'this is a success'
# SUCCEED does not require an argument
ok {test-number} -
# Scenario: BDD tests requiring Fixtures to provide commonly-accessed data or methods
ok {test-number} - before == 0[0;37m for: [0m0 == 0
# Scenario: BDD tests requiring Fixtures to provide commonly-accessed data or methods
ok {test-number} - after > before[0;37m for: [0m1 > 0
# Scenario: Do that thing with the thing
ok {test-number} - itDoesThis()[0;37m for: [0mtrue
# Scenario: Do that thing with the thing
ok {test-number} - itDoesThat()[0;37m for: [0mtrue
# Scenario: This is a really long scenario name to see how the list command deals with wrapping
ok {test-number} -[0m with 1 message:[0m 'boo!'
# Scenario: Vector resizing affects size and capacity
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
# Scenario: Vector resizing affects size and capacity
ok {test-number} - v.size() == 10[0;37m for: [0m10 == 10
# Scenario: Vector resizing affects size and capacity
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# Scenario: Vector resizing affects size and capacity
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# Scenario: Vector resizing affects size and capacity
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# Scenario: Vector resizing affects size and capacity
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
# Scenario: Vector resizing affects size and capacity
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# Scenario: Vector resizing affects size and capacity
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
A string sent directly to stdout
A string sent directly to stderr
A string sent to stderr via clog
# Some simple comparisons between doubles
ok {test-number} - d == Approx( 1.23 )[0;37m for: [0m1.23 == Approx( 1.23 )
# Some simple comparisons between doubles
ok {test-number} - d != Approx( 1.22 )[0;37m for: [0m1.23 != Approx( 1.22 )
# Some simple comparisons between doubles
ok {test-number} - d != Approx( 1.24 )[0;37m for: [0m1.23 != Approx( 1.24 )
# Some simple comparisons between doubles
ok {test-number} - d == 1.23_a[0;37m for: [0m1.23 == Approx( 1.23 )
# Some simple comparisons between doubles
ok {test-number} - d != 1.22_a[0;37m for: [0m1.23 != Approx( 1.22 )
# Some simple comparisons between doubles
ok {test-number} - Approx( d ) == 1.23[0;37m for: [0mApprox( 1.23 ) == 1.23
# Some simple comparisons between doubles
ok {test-number} - Approx( d ) != 1.22[0;37m for: [0mApprox( 1.23 ) != 1.22
# Some simple comparisons between doubles
ok {test-number} - Approx( d ) != 1.24[0;37m for: [0mApprox( 1.23 ) != 1.24
Message from section one
Message from section two
# StartsWith string matcher
not ok {test-number} - testStringForMatching(), StartsWith( "This String" )[0;37m for: [0m"this string contains 'abc' as a substring" starts with: "This String"
# StartsWith string matcher
not ok {test-number} - testStringForMatching(), StartsWith( "string", Catch::CaseSensitive::No )[0;37m for: [0m"this string contains 'abc' as a substring" starts with: "string" (case insensitive)
# Static arrays are convertible to string
ok {test-number} - Catch::Detail::stringify(singular) == "{ 1 }"[0;37m for: [0m"{ 1 }" == "{ 1 }"
# Static arrays are convertible to string
ok {test-number} - Catch::Detail::stringify(arr) == "{ 3, 2, 1 }"[0;37m for: [0m"{ 3, 2, 1 }" == "{ 3, 2, 1 }"
# Static arrays are convertible to string
ok {test-number} - Catch::Detail::stringify(arr) == R"({ { "1:1", "1:2", "1:3" }, { "2:1", "2:2" } })"[0;37m for: [0m"{ { "1:1", "1:2", "1:3" }, { "2:1", "2:2" } }" == "{ { "1:1", "1:2", "1:3" }, { "2:1", "2:2" } }"
# String matchers
ok {test-number} - testStringForMatching(), ContainsSubstring( "string" )[0;37m for: [0m"this string contains 'abc' as a substring" contains: "string"
# String matchers
ok {test-number} - testStringForMatching(), ContainsSubstring( "string", Catch::CaseSensitive::No )[0;37m for: [0m"this string contains 'abc' as a substring" contains: "string" (case insensitive)
# String matchers
ok {test-number} - testStringForMatching(), ContainsSubstring( "abc" )[0;37m for: [0m"this string contains 'abc' as a substring" contains: "abc"
# String matchers
ok {test-number} - testStringForMatching(), ContainsSubstring( "aBC", Catch::CaseSensitive::No )[0;37m for: [0m"this string contains 'abc' as a substring" contains: "abc" (case insensitive)
# String matchers
ok {test-number} - testStringForMatching(), StartsWith( "this" )[0;37m for: [0m"this string contains 'abc' as a substring" starts with: "this"
# String matchers
ok {test-number} - testStringForMatching(), StartsWith( "THIS", Catch::CaseSensitive::No )[0;37m for: [0m"this string contains 'abc' as a substring" starts with: "this" (case insensitive)
# String matchers
ok {test-number} - testStringForMatching(), EndsWith( "substring" )[0;37m for: [0m"this string contains 'abc' as a substring" ends with: "substring"
# String matchers
ok {test-number} - testStringForMatching(), EndsWith( " SuBsTrInG", Catch::CaseSensitive::No )[0;37m for: [0m"this string contains 'abc' as a substring" ends with: " substring" (case insensitive)
# StringRef
ok {test-number} - empty.empty()[0;37m for: [0mtrue
# StringRef
ok {test-number} - empty.size() == 0[0;37m for: [0m0 == 0
# StringRef
ok {test-number} - std::strcmp( empty.data(), "" ) == 0[0;37m for: [0m0 == 0
# StringRef
ok {test-number} - s.empty() == false[0;37m for: [0mfalse == false
# StringRef
ok {test-number} - s.size() == 5[0;37m for: [0m5 == 5
# StringRef
ok {test-number} - std::strcmp( rawChars, "hello" ) == 0[0;37m for: [0m0 == 0
# StringRef
ok {test-number} - s.data() == rawChars[0;37m for: [0m"hello" == "hello"
# StringRef
ok {test-number} - original == "original"
# StringRef
ok {test-number} - original.data()
# StringRef
ok {test-number} - original.begin() == copy.begin()[0;37m for: [0m"original string" == "original string"
# StringRef
ok {test-number} - original.begin() == copy.begin()[0;37m for: [0m"original string" == "original string"
# StringRef
ok {test-number} - ss.empty() == false[0;37m for: [0mfalse == false
# StringRef
ok {test-number} - ss.size() == 5[0;37m for: [0m5 == 5
# StringRef
ok {test-number} - std::strncmp( ss.data(), "hello", 5 ) == 0[0;37m for: [0m0 == 0
# StringRef
ok {test-number} - ss == "hello"[0;37m for: [0mhello == "hello"
# StringRef
ok {test-number} - ss.size() == 6[0;37m for: [0m6 == 6
# StringRef
ok {test-number} - std::strcmp( ss.data(), "world!" ) == 0[0;37m for: [0m0 == 0
# StringRef
ok {test-number} - s.data() == s2.data()[0;37m for: [0m"hello world!" == "hello world!"
# StringRef
ok {test-number} - s.data() == ss.data()[0;37m for: [0m"hello world!" == "hello world!"
# StringRef
ok {test-number} - s.substr(s.size() + 1, 123).empty()[0;37m for: [0mtrue
# StringRef
ok {test-number} - std::strcmp(ss.data(), "world!") == 0[0;37m for: [0m0 == 0
# StringRef
ok {test-number} - s.substr(1'000'000, 1).empty()[0;37m for: [0mtrue
# StringRef
ok {test-number} - reinterpret_cast<char*>(buffer1) != reinterpret_cast<char*>(buffer2)[0;37m for: [0m"Hello" != "Hello"
# StringRef
ok {test-number} - left == right[0;37m for: [0mHello == Hello
# StringRef
ok {test-number} - left != left.substr(0, 3)[0;37m for: [0mHello != Hel
# StringRef
ok {test-number} - sr == "a standard string"[0;37m for: [0ma standard string == "a standard string"
# StringRef
ok {test-number} - sr.size() == stdStr.size()[0;37m for: [0m17 == 17
# StringRef
ok {test-number} - sr == "a standard string"[0;37m for: [0ma standard string == "a standard string"
# StringRef
ok {test-number} - sr.size() == stdStr.size()[0;37m for: [0m17 == 17
# StringRef
ok {test-number} - sr == "a standard string"[0;37m for: [0ma standard string == "a standard string"
# StringRef
ok {test-number} - sr.size() == stdStr.size()[0;37m for: [0m17 == 17
# StringRef
ok {test-number} - stdStr == "a stringref"[0;37m for: [0m"a stringref" == "a stringref"
# StringRef
ok {test-number} - stdStr.size() == sr.size()[0;37m for: [0m11 == 11
# StringRef
ok {test-number} - stdStr == "a stringref"[0;37m for: [0m"a stringref" == "a stringref"
# StringRef
ok {test-number} - stdStr.size() == sr.size()[0;37m for: [0m11 == 11
# StringRef
ok {test-number} - lhs == "some string += the stringref contents"[0;37m for: [0m"some string += the stringref contents" == "some string += the stringref contents"
# StringRef
ok {test-number} - together == "abrakadabra"[0;37m for: [0m"abrakadabra" == "abrakadabra"
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'empty.size() == 0'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'empty.begin() == empty.end()'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'stringref.size() == 3'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'stringref.data() == abc'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'stringref.begin() == abc'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'stringref.begin() != stringref.end()'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'stringref.substr(10, 0).empty()'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'stringref.substr(2, 1).data() == abc + 2'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'stringref[1] == 'b''
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'shortened.size() == 2'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'shortened.data() == abc'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'shortened.begin() != shortened.end()'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m '!(sr1.empty())'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'sr1.size() == 3'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'sr2.empty()'
# StringRef at compilation time
ok {test-number} -[0m with 1 message:[0m 'sr2.size() == 0'
# Stringifying char arrays with statically known sizes - char
ok {test-number} - ::Catch::Detail::stringify( with_null_terminator ) == R"("abc")"s[0;37m for: [0m""abc"" == ""abc""
# Stringifying char arrays with statically known sizes - char
ok {test-number} - ::Catch::Detail::stringify( no_null_terminator ) == R"("abc")"s[0;37m for: [0m""abc"" == ""abc""
# Stringifying char arrays with statically known sizes - signed char
ok {test-number} - ::Catch::Detail::stringify( with_null_terminator ) == R"("abc")"s[0;37m for: [0m""abc"" == ""abc""
# Stringifying char arrays with statically known sizes - signed char
ok {test-number} - ::Catch::Detail::stringify( no_null_terminator ) == R"("abc")"s[0;37m for: [0m""abc"" == ""abc""
# Stringifying char arrays with statically known sizes - unsigned char
ok {test-number} - ::Catch::Detail::stringify( with_null_terminator ) == R"("abc")"s[0;37m for: [0m""abc"" == ""abc""
# Stringifying char arrays with statically known sizes - unsigned char
ok {test-number} - ::Catch::Detail::stringify( no_null_terminator ) == R"("abc")"s[0;37m for: [0m""abc"" == ""abc""
# Stringifying std::chrono::duration helpers
ok {test-number} - minute == seconds[0;37m for: [0m1 m == 60 s
# Stringifying std::chrono::duration helpers
ok {test-number} - hour != seconds[0;37m for: [0m1 h != 60 s
# Stringifying std::chrono::duration helpers
ok {test-number} - micro != milli[0;37m for: [0m1 us != 1 ms
# Stringifying std::chrono::duration helpers
ok {test-number} - nano != micro[0;37m for: [0m1 ns != 1 us
# Stringifying std::chrono::duration with weird ratios
ok {test-number} - half_minute != femto_second[0;37m for: [0m1 [30/1]s != 1 fs
# Stringifying std::chrono::duration with weird ratios
ok {test-number} - pico_second != atto_second[0;37m for: [0m1 ps != 1 as
# Stringifying std::chrono::time_point<system_clock>
ok {test-number} - now != later[0;37m for: [0m{iso8601-timestamp} != {iso8601-timestamp}
# Tabs and newlines show in output
not ok {test-number} - s1 == s2[0;37m for: [0m"if ($b == 10) { 		$a	= 20; }" == "if ($b == 10) { 	$a = 20; } "
# Tag alias can be registered against tag patterns
ok {test-number} - what, ContainsSubstring( "[@zzz]" )[0;37m for: [0m"error: tag alias, '[@zzz]' already registered. 	First seen at: file:2 	Redefined at: file:10" contains: "[@zzz]"
# Tag alias can be registered against tag patterns
ok {test-number} - what, ContainsSubstring( "file" )[0;37m for: [0m"error: tag alias, '[@zzz]' already registered. 	First seen at: file:2 	Redefined at: file:10" contains: "file"
# Tag alias can be registered against tag patterns
ok {test-number} - what, ContainsSubstring( "2" )[0;37m for: [0m"error: tag alias, '[@zzz]' already registered. 	First seen at: file:2 	Redefined at: file:10" contains: "2"
# Tag alias can be registered against tag patterns
ok {test-number} - what, ContainsSubstring( "10" )[0;37m for: [0m"error: tag alias, '[@zzz]' already registered. 	First seen at: file:2 	Redefined at: file:10" contains: "10"
# Tag alias can be registered against tag patterns
ok {test-number} - registry.add( "[no ampersat]", "", Catch::SourceLineInfo( "file", 3 ) )
# Tag alias can be registered against tag patterns
ok {test-number} - registry.add( "[the @ is not at the start]", "", Catch::SourceLineInfo( "file", 3 ) )
# Tag alias can be registered against tag patterns
ok {test-number} - registry.add( "@no square bracket at start]", "", Catch::SourceLineInfo( "file", 3 ) )
# Tag alias can be registered against tag patterns
ok {test-number} - registry.add( "[@no square bracket at end", "", Catch::SourceLineInfo( "file", 3 ) )
# Tags with spaces and non-alphanumerical characters are accepted
ok {test-number} - testCase.tags.size() == 2[0;37m for: [0m2 == 2
# Tags with spaces and non-alphanumerical characters are accepted
ok {test-number} - testCase.tags, VectorContains( Tag( "tag with spaces" ) ) && VectorContains( Tag( "I said \"good day\" sir!"_catch_sr ) )[0;37m for: [0m{ {?}, {?} } ( Contains: {?} and Contains: {?} )
# Template test case method with test types specified inside std::tuple - MyTypes - 0
ok {test-number} - Template_Fixture<TestType>::m_a == 1[0;37m for: [0m1 == 1
# Template test case method with test types specified inside std::tuple - MyTypes - 1
ok {test-number} - Template_Fixture<TestType>::m_a == 1[0;37m for: [0m1 == 1
# Template test case method with test types specified inside std::tuple - MyTypes - 2
ok {test-number} - Template_Fixture<TestType>::m_a == 1[0;37m for: [0m1.0 == 1
# Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 0
ok {test-number} - sizeof(TestType) > 0[0;37m for: [0m1 > 0
# Template test case with test types specified inside non-copyable and non-movable std::tuple - NonCopyableAndNonMovableTypes - 1
ok {test-number} - sizeof(TestType) > 0[0;37m for: [0m4 > 0
# Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 0
ok {test-number} - sizeof(TestType) > 0[0;37m for: [0m1 > 0
# Template test case with test types specified inside non-default-constructible std::tuple - MyNonDefaultConstructibleTypes - 1
ok {test-number} - sizeof(TestType) > 0[0;37m for: [0m4 > 0
# Template test case with test types specified inside std::tuple - MyTypes - 0
ok {test-number} - sizeof(TestType) > 0[0;37m for: [0m4 > 0
# Template test case with test types specified inside std::tuple - MyTypes - 1
ok {test-number} - sizeof(TestType) > 0[0;37m for: [0m1 > 0
# Template test case with test types specified inside std::tuple - MyTypes - 2
ok {test-number} - sizeof(TestType) > 0[0;37m for: [0m4 > 0
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.size() == 10[0;37m for: [0m10 == 10
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.capacity() == 0[0;37m for: [0m0 == 0
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - float
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.size() == 10[0;37m for: [0m10 == 10
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.capacity() == 0[0;37m for: [0m0 == 0
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - int
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.size() == 10[0;37m for: [0m10 == 10
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.capacity() == 0[0;37m for: [0m0 == 0
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::string
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.size() == 10[0;37m for: [0m10 == 10
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.capacity() == 0[0;37m for: [0m0 == 0
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# TemplateTest: vectors can be sized and resized - std::tuple<int,float>
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.size() == V[0;37m for: [0m6 == 6
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.capacity() >= V[0;37m for: [0m6 >= 6
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.size() == 2 * V[0;37m for: [0m12 == 12
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.capacity() >= 2 * V[0;37m for: [0m12 >= 12
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.size() == V[0;37m for: [0m6 == 6
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.capacity() >= V[0;37m for: [0m6 >= 6
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.capacity() >= V[0;37m for: [0m6 >= 6
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.capacity() == 0[0;37m for: [0m0 == 0
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.size() == V[0;37m for: [0m6 == 6
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.capacity() >= V[0;37m for: [0m6 >= 6
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.size() == V[0;37m for: [0m6 == 6
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.capacity() >= 2 * V[0;37m for: [0m12 >= 12
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.size() == V[0;37m for: [0m6 == 6
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.capacity() >= V[0;37m for: [0m6 >= 6
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.size() == V[0;37m for: [0m6 == 6
# TemplateTestSig: vectors can be sized and resized - (std::tuple<int, float>), 6
ok {test-number} - v.capacity() >= V[0;37m for: [0m6 >= 6
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.size() == V[0;37m for: [0m4 == 4
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.capacity() >= V[0;37m for: [0m4 >= 4
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.size() == 2 * V[0;37m for: [0m8 == 8
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.capacity() >= 2 * V[0;37m for: [0m8 >= 8
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.size() == V[0;37m for: [0m4 == 4
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.capacity() >= V[0;37m for: [0m4 >= 4
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.capacity() >= V[0;37m for: [0m4 >= 4
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.capacity() == 0[0;37m for: [0m0 == 0
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.size() == V[0;37m for: [0m4 == 4
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.capacity() >= V[0;37m for: [0m4 >= 4
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.size() == V[0;37m for: [0m4 == 4
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.capacity() >= 2 * V[0;37m for: [0m8 >= 8
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.size() == V[0;37m for: [0m4 == 4
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.capacity() >= V[0;37m for: [0m4 >= 4
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.size() == V[0;37m for: [0m4 == 4
# TemplateTestSig: vectors can be sized and resized - float,4
ok {test-number} - v.capacity() >= V[0;37m for: [0m4 >= 4
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.size() == V[0;37m for: [0m5 == 5
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.capacity() >= V[0;37m for: [0m5 >= 5
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.size() == 2 * V[0;37m for: [0m10 == 10
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.capacity() >= 2 * V[0;37m for: [0m10 >= 10
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.size() == V[0;37m for: [0m5 == 5
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.capacity() >= V[0;37m for: [0m5 >= 5
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.capacity() >= V[0;37m for: [0m5 >= 5
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.capacity() == 0[0;37m for: [0m0 == 0
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.size() == V[0;37m for: [0m5 == 5
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.capacity() >= V[0;37m for: [0m5 >= 5
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.size() == V[0;37m for: [0m5 == 5
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.capacity() >= 2 * V[0;37m for: [0m10 >= 10
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.size() == V[0;37m for: [0m5 == 5
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.capacity() >= V[0;37m for: [0m5 >= 5
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.size() == V[0;37m for: [0m5 == 5
# TemplateTestSig: vectors can be sized and resized - int,5
ok {test-number} - v.capacity() >= V[0;37m for: [0m5 >= 5
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.size() == V[0;37m for: [0m15 == 15
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.capacity() >= V[0;37m for: [0m15 >= 15
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.size() == 2 * V[0;37m for: [0m30 == 30
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.capacity() >= 2 * V[0;37m for: [0m30 >= 30
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.size() == V[0;37m for: [0m15 == 15
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.capacity() >= V[0;37m for: [0m15 >= 15
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.capacity() >= V[0;37m for: [0m15 >= 15
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.capacity() == 0[0;37m for: [0m0 == 0
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.size() == V[0;37m for: [0m15 == 15
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.capacity() >= V[0;37m for: [0m15 >= 15
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.size() == V[0;37m for: [0m15 == 15
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.capacity() >= 2 * V[0;37m for: [0m30 >= 30
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.size() == V[0;37m for: [0m15 == 15
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.capacity() >= V[0;37m for: [0m15 >= 15
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.size() == V[0;37m for: [0m15 == 15
# TemplateTestSig: vectors can be sized and resized - std::string,15
ok {test-number} - v.capacity() >= V[0;37m for: [0m15 >= 15
# Test case with identical tags keeps just one
ok {test-number} - testCase.tags.size() == 1[0;37m for: [0m1 == 1
# Test case with identical tags keeps just one
ok {test-number} - testCase.tags[0] == Tag( "tag1" )[0;37m for: [0m{?} == {?}
# Test case with one argument
ok {test-number} -[0m with 1 message:[0m 'no assertions'
# Test enum bit values
ok {test-number} - 0x<hex digits> == bit30and31[0;37m for: [0m3221225472 (0x<hex digits>) == 3221225472
# Test with special, characters "in name
ok {test-number} -
# Testing checked-if
ok {test-number} - true
# Testing checked-if
ok {test-number} -
# Testing checked-if
ok {test-number} - false  # TODO
# Testing checked-if
ok {test-number} - true
# Testing checked-if
ok {test-number} - false  # TODO
# Testing checked-if
ok {test-number} -
# Testing checked-if 2
ok {test-number} - true
# Testing checked-if 2
not ok {test-number} - explicitly
# Testing checked-if 3
ok {test-number} - false  # TODO
# Testing checked-if 3
not ok {test-number} - explicitly
# The NO_FAIL macro reports a failure but does not fail the test
ok {test-number} - 1 == 2  # TODO
# The default listing implementation write to provided stream
ok {test-number} - listingString, ContainsSubstring("[fakeTag]"s)[0;37m for: [0m"All available tags:    1  [fakeTag] 1 tag  " contains: "[fakeTag]"
# The default listing implementation write to provided stream
ok {test-number} - listingString, ContainsSubstring( "fake reporter"s ) && ContainsSubstring( "fake description"s )[0;37m for: [0m"Available reporters:   fake reporter:  fake description  " ( contains: "fake reporter" and contains: "fake description" )
# The default listing implementation write to provided stream
ok {test-number} - listingString, ContainsSubstring( "fake test name"s ) && ContainsSubstring( "fakeTestTag"s )[0;37m for: [0m"All available test cases:   fake test name       [fakeTestTag] 1 test case  " ( contains: "fake test name" and contains: "fakeTestTag" )
# The default listing implementation write to provided stream
ok {test-number} - listingString, ContainsSubstring( "fakeListener"s ) && ContainsSubstring( "fake description"s )[0;37m for: [0m"Registered listeners:   fakeListener:  fake description  " ( contains: "fakeListener" and contains: "fake description" )
# This test 'should' fail but doesn't
ok {test-number} -[0m with 1 message:[0m 'oops!'
# Thrown string literals are translated
not ok {test-number} - unexpected exception with message: 'For some reason someone is throwing a string literal!'
# Tracker
ok {test-number} - testCase.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isSuccessfullyCompleted()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isComplete() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - ctx.completedCycle()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isSuccessfullyCompleted()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isComplete()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isSuccessfullyCompleted() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase.isComplete() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - ctx.completedCycle()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isSuccessfullyCompleted() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase2.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1b.isOpen() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - ctx.completedCycle()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isComplete()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isSuccessfullyCompleted()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isComplete()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isSuccessfullyCompleted() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase.isComplete() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - ctx.completedCycle()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isSuccessfullyCompleted() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase2.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1b.isOpen() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - s2.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - ctx.completedCycle()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isComplete()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isSuccessfullyCompleted()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s2.isOpen() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase.isComplete() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase2.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1b.isOpen() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - s2b.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - ctx.completedCycle() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - ctx.completedCycle()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s2b.isSuccessfullyCompleted()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase2.isComplete() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase2.isSuccessfullyCompleted()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s2.isOpen() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase.isComplete() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase2.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1b.isOpen() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - s2b.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - ctx.completedCycle() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - ctx.completedCycle()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s2b.isComplete()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s2b.isSuccessfullyCompleted() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase2.isSuccessfullyCompleted() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase3.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1c.isOpen() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - s2c.isOpen() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase3.isSuccessfullyCompleted()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s2.isOpen()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s2.isComplete()[0;37m for: [0mtrue
# Tracker
ok {test-number} - s1.isComplete() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - s1.isComplete()[0;37m for: [0mtrue
# Tracker
ok {test-number} - testCase.isComplete() == false[0;37m for: [0mfalse == false
# Tracker
ok {test-number} - testCase.isComplete()[0;37m for: [0mtrue
# Trim strings
ok {test-number} - trim(std::string(no_whitespace)) == no_whitespace[0;37m for: [0m"There is no extra whitespace here" == "There is no extra whitespace here"
# Trim strings
ok {test-number} - trim(std::string(leading_whitespace)) == no_whitespace[0;37m for: [0m"There is no extra whitespace here" == "There is no extra whitespace here"
# Trim strings
ok {test-number} - trim(std::string(trailing_whitespace)) == no_whitespace[0;37m for: [0m"There is no extra whitespace here" == "There is no extra whitespace here"
# Trim strings
ok {test-number} - trim(std::string(whitespace_at_both_ends)) == no_whitespace[0;37m for: [0m"There is no extra whitespace here" == "There is no extra whitespace here"
# Trim strings
ok {test-number} - trim(StringRef(no_whitespace)) == StringRef(no_whitespace)[0;37m for: [0mThere is no extra whitespace here == There is no extra whitespace here
# Trim strings
ok {test-number} - trim(StringRef(leading_whitespace)) == StringRef(no_whitespace)[0;37m for: [0mThere is no extra whitespace here == There is no extra whitespace here
# Trim strings
ok {test-number} - trim(StringRef(trailing_whitespace)) == StringRef(no_whitespace)[0;37m for: [0mThere is no extra whitespace here == There is no extra whitespace here
# Trim strings
ok {test-number} - trim(StringRef(whitespace_at_both_ends)) == StringRef(no_whitespace)[0;37m for: [0mThere is no extra whitespace here == There is no extra whitespace here
# Unexpected exceptions can be translated
not ok {test-number} - unexpected exception with message: '3.14'
# Upcasting special member functions
ok {test-number} - bptr->i == 3[0;37m for: [0m3 == 3
# Upcasting special member functions
ok {test-number} - bptr->i == 3[0;37m for: [0m3 == 3
# Usage of AllMatch range matcher
ok {test-number} - data, AllMatch(SizeIs(5))[0;37m for: [0m{ { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } all match has size == 5
# Usage of AllMatch range matcher
ok {test-number} - data, !AllMatch(Contains(0) && Contains(1))[0;37m for: [0m{ { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } not all match ( contains element 0 and contains element 1 )
# Usage of AllMatch range matcher
ok {test-number} - needs_adl, AllMatch( Predicate<int>( []( int elem ) { return elem < 6; } ) )[0;37m for: [0m{ 1, 2, 3, 4, 5 } all match matches undescribed predicate
# Usage of AllMatch range matcher
ok {test-number} - mocked, allMatch[0;37m for: [0m{ 1, 2, 3, 4, 5 } all match matches undescribed predicate
# Usage of AllMatch range matcher
ok {test-number} - mocked.m_derefed[0][0;37m for: [0mtrue
# Usage of AllMatch range matcher
ok {test-number} - mocked.m_derefed[1][0;37m for: [0mtrue
# Usage of AllMatch range matcher
ok {test-number} - mocked.m_derefed[2][0;37m for: [0mtrue
# Usage of AllMatch range matcher
ok {test-number} - mocked.m_derefed[3][0;37m for: [0mtrue
# Usage of AllMatch range matcher
ok {test-number} - mocked.m_derefed[4][0;37m for: [0mtrue
# Usage of AllMatch range matcher
ok {test-number} - mocked, !allMatch[0;37m for: [0m{ 1, 2, 3, 4, 5 } not all match matches undescribed predicate
# Usage of AllMatch range matcher
ok {test-number} - mocked.m_derefed[0][0;37m for: [0mtrue
# Usage of AllMatch range matcher
ok {test-number} - mocked.m_derefed[1][0;37m for: [0mtrue
# Usage of AllMatch range matcher
ok {test-number} - mocked.m_derefed[2][0;37m for: [0mtrue
# Usage of AllMatch range matcher
ok {test-number} - !(mocked.m_derefed[3])[0;37m for: [0m!false
# Usage of AllMatch range matcher
ok {test-number} - !(mocked.m_derefed[4])[0;37m for: [0m!false
# Usage of AnyMatch range matcher
ok {test-number} - data, AnyMatch(SizeIs(5))[0;37m for: [0m{ { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } any match has size == 5
# Usage of AnyMatch range matcher
ok {test-number} - data, !AnyMatch(Contains(0) && Contains(10))[0;37m for: [0m{ { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } not any match ( contains element 0 and contains element 10 )
# Usage of AnyMatch range matcher
ok {test-number} - needs_adl, AnyMatch( Predicate<int>( []( int elem ) { return elem < 3; } ) )[0;37m for: [0m{ 1, 2, 3, 4, 5 } any match matches undescribed predicate
# Usage of AnyMatch range matcher
ok {test-number} - mocked, !anyMatch[0;37m for: [0m{ 1, 2, 3, 4, 5 } not any match matches undescribed predicate
# Usage of AnyMatch range matcher
ok {test-number} - mocked.m_derefed[0][0;37m for: [0mtrue
# Usage of AnyMatch range matcher
ok {test-number} - mocked.m_derefed[1][0;37m for: [0mtrue
# Usage of AnyMatch range matcher
ok {test-number} - mocked.m_derefed[2][0;37m for: [0mtrue
# Usage of AnyMatch range matcher
ok {test-number} - mocked.m_derefed[3][0;37m for: [0mtrue
# Usage of AnyMatch range matcher
ok {test-number} - mocked.m_derefed[4][0;37m for: [0mtrue
# Usage of AnyMatch range matcher
ok {test-number} - mocked, anyMatch[0;37m for: [0m{ 1, 2, 3, 4, 5 } any match matches undescribed predicate
# Usage of AnyMatch range matcher
ok {test-number} - mocked.m_derefed[0][0;37m for: [0mtrue
# Usage of AnyMatch range matcher
ok {test-number} - !(mocked.m_derefed[1])[0;37m for: [0m!false
# Usage of AnyMatch range matcher
ok {test-number} - !(mocked.m_derefed[2])[0;37m for: [0m!false
# Usage of AnyMatch range matcher
ok {test-number} - !(mocked.m_derefed[3])[0;37m for: [0m!false
# Usage of AnyMatch range matcher
ok {test-number} - !(mocked.m_derefed[4])[0;37m for: [0m!false
# Usage of NoneMatch range matcher
ok {test-number} - data, NoneMatch(SizeIs(6))[0;37m for: [0m{ { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } none match has size == 6
# Usage of NoneMatch range matcher
ok {test-number} - data, !NoneMatch(Contains(0) && Contains(1))[0;37m for: [0m{ { 0, 1, 2, 3, 5 }, { 4, -3, -2, 5, 0 }, { 0, 0, 0, 5, 0 }, { 0, -5, 0, 5, 0 }, { 1, 0, 0, -1, 5 } } not none match ( contains element 0 and contains element 1 )
# Usage of NoneMatch range matcher
ok {test-number} - needs_adl, NoneMatch( Predicate<int>( []( int elem ) { return elem > 6; } ) )[0;37m for: [0m{ 1, 2, 3, 4, 5 } none match matches undescribed predicate
# Usage of NoneMatch range matcher
ok {test-number} - mocked, noneMatch[0;37m for: [0m{ 1, 2, 3, 4, 5 } none match matches undescribed predicate
# Usage of NoneMatch range matcher
ok {test-number} - mocked.m_derefed[0][0;37m for: [0mtrue
# Usage of NoneMatch range matcher
ok {test-number} - mocked.m_derefed[1][0;37m for: [0mtrue
# Usage of NoneMatch range matcher
ok {test-number} - mocked.m_derefed[2][0;37m for: [0mtrue
# Usage of NoneMatch range matcher
ok {test-number} - mocked.m_derefed[3][0;37m for: [0mtrue
# Usage of NoneMatch range matcher
ok {test-number} - mocked.m_derefed[4][0;37m for: [0mtrue
# Usage of NoneMatch range matcher
ok {test-number} - mocked, !noneMatch[0;37m for: [0m{ 1, 2, 3, 4, 5 } not none match matches undescribed predicate
# Usage of NoneMatch range matcher
ok {test-number} - mocked.m_derefed[0][0;37m for: [0mtrue
# Usage of NoneMatch range matcher
ok {test-number} - !(mocked.m_derefed[1])[0;37m for: [0m!false
# Usage of NoneMatch range matcher
ok {test-number} - !(mocked.m_derefed[2])[0;37m for: [0m!false
# Usage of NoneMatch range matcher
ok {test-number} - !(mocked.m_derefed[3])[0;37m for: [0m!false
# Usage of NoneMatch range matcher
ok {test-number} - !(mocked.m_derefed[4])[0;37m for: [0m!false
# Usage of the SizeIs range matcher
ok {test-number} - empty_vec, SizeIs(0)[0;37m for: [0m{  } has size == 0
# Usage of the SizeIs range matcher
ok {test-number} - empty_vec, !SizeIs(2)[0;37m for: [0m{  } not has size == 2
# Usage of the SizeIs range matcher
ok {test-number} - empty_vec, SizeIs(Lt(2))[0;37m for: [0m{  } size matches is less than 2
# Usage of the SizeIs range matcher
ok {test-number} - arr, SizeIs(2)[0;37m for: [0m{ 0, 0 } has size == 2
# Usage of the SizeIs range matcher
ok {test-number} - arr, SizeIs( Lt(3))[0;37m for: [0m{ 0, 0 } size matches is less than 3
# Usage of the SizeIs range matcher
ok {test-number} - arr, !SizeIs(!Lt(3))[0;37m for: [0m{ 0, 0 } not size matches not is less than 3
# Usage of the SizeIs range matcher
ok {test-number} - map, SizeIs(3)[0;37m for: [0m{ {?}, {?}, {?} } has size == 3
# Usage of the SizeIs range matcher
ok {test-number} - unrelated::ADL_size{}, SizeIs(12)[0;37m for: [0m{?} has size == 12
# Usage of the SizeIs range matcher
ok {test-number} - has_size{}, SizeIs(13)[0;37m for: [0m{?} has size == 13
# Use a custom approx
ok {test-number} - d == approx( 1.23 )[0;37m for: [0m1.23 == Approx( 1.23 )
# Use a custom approx
ok {test-number} - d == approx( 1.22 )[0;37m for: [0m1.23 == Approx( 1.22 )
# Use a custom approx
ok {test-number} - d == approx( 1.24 )[0;37m for: [0m1.23 == Approx( 1.24 )
# Use a custom approx
ok {test-number} - d != approx( 1.25 )[0;37m for: [0m1.23 != Approx( 1.25 )
# Use a custom approx
ok {test-number} - approx( d ) == 1.23[0;37m for: [0mApprox( 1.23 ) == 1.23
# Use a custom approx
ok {test-number} - approx( d ) == 1.22[0;37m for: [0mApprox( 1.23 ) == 1.22
# Use a custom approx
ok {test-number} - approx( d ) == 1.24[0;37m for: [0mApprox( 1.23 ) == 1.24
# Use a custom approx
ok {test-number} - approx( d ) != 1.25[0;37m for: [0mApprox( 1.23 ) != 1.25
# Variadic macros
ok {test-number} -[0m with 1 message:[0m 'no assertions'
# Vector Approx matcher
ok {test-number} - empty, Approx( empty )[0;37m for: [0m{  } is approx: {  }
# Vector Approx matcher
ok {test-number} - v1, Approx( v1 )[0;37m for: [0m{ 1.0, 2.0, 3.0 } is approx: { 1.0, 2.0, 3.0 }
# Vector Approx matcher
ok {test-number} - v1, Approx<double>( { 1., 2., 3. } )[0;37m for: [0m{ 1.0, 2.0, 3.0 } is approx: { 1.0, 2.0, 3.0 }
# Vector Approx matcher
ok {test-number} - v1, !Approx( temp )[0;37m for: [0m{ 1.0, 2.0, 3.0 } not is approx: { 1.0, 2.0, 3.0, 4.0 }
# Vector Approx matcher
ok {test-number} - v1, !Approx( v2 )[0;37m for: [0m{ 1.0, 2.0, 3.0 } not is approx: { 1.5, 2.5, 3.5 }
# Vector Approx matcher
ok {test-number} - v1, Approx( v2 ).margin( 0.5 )[0;37m for: [0m{ 1.0, 2.0, 3.0 } is approx: { 1.5, 2.5, 3.5 }
# Vector Approx matcher
ok {test-number} - v1, Approx( v2 ).epsilon( 0.5 )[0;37m for: [0m{ 1.0, 2.0, 3.0 } is approx: { 1.5, 2.5, 3.5 }
# Vector Approx matcher
ok {test-number} - v1, Approx( v2 ).epsilon( 0.1 ).scale( 500 )[0;37m for: [0m{ 1.0, 2.0, 3.0 } is approx: { 1.5, 2.5, 3.5 }
# Vector Approx matcher -- failing
not ok {test-number} - empty, Approx( t1 )[0;37m for: [0m{  } is approx: { 1.0, 2.0 }
# Vector Approx matcher -- failing
not ok {test-number} - v1, Approx( v2 )[0;37m for: [0m{ 2.0, 4.0, 6.0 } is approx: { 1.0, 3.0, 5.0 }
# Vector matchers
ok {test-number} - v, VectorContains( 1 )[0;37m for: [0m{ 1, 2, 3 } Contains: 1
# Vector matchers
ok {test-number} - v, VectorContains( 2 )[0;37m for: [0m{ 1, 2, 3 } Contains: 2
# Vector matchers
ok {test-number} - v5, ( VectorContains<int, CustomAllocator<int>>( 2 ) )[0;37m for: [0m{ 1, 2, 3 } Contains: 2
# Vector matchers
ok {test-number} - v, Contains( v2 )[0;37m for: [0m{ 1, 2, 3 } Contains: { 1, 2 }
# Vector matchers
ok {test-number} - v, Contains<int>( { 1, 2 } )[0;37m for: [0m{ 1, 2, 3 } Contains: { 1, 2 }
# Vector matchers
ok {test-number} - v5, ( Contains<int, std::allocator<int>, CustomAllocator<int>>( v2 ) )[0;37m for: [0m{ 1, 2, 3 } Contains: { 1, 2 }
# Vector matchers
ok {test-number} - v, Contains( v2 )[0;37m for: [0m{ 1, 2, 3 } Contains: { 1, 2, 3 }
# Vector matchers
ok {test-number} - v, Contains( empty )[0;37m for: [0m{ 1, 2, 3 } Contains: {  }
# Vector matchers
ok {test-number} - empty, Contains( empty )[0;37m for: [0m{  } Contains: {  }
# Vector matchers
ok {test-number} - v5, ( Contains<int, std::allocator<int>, CustomAllocator<int>>( v2 ) )[0;37m for: [0m{ 1, 2, 3 } Contains: { 1, 2, 3 }
# Vector matchers
ok {test-number} - v5, Contains( v6 )[0;37m for: [0m{ 1, 2, 3 } Contains: { 1, 2 }
# Vector matchers
ok {test-number} - v, VectorContains( 1 ) && VectorContains( 2 )[0;37m for: [0m{ 1, 2, 3 } ( Contains: 1 and Contains: 2 )
# Vector matchers
ok {test-number} - v, Equals( v )[0;37m for: [0m{ 1, 2, 3 } Equals: { 1, 2, 3 }
# Vector matchers
ok {test-number} - empty, Equals( empty )[0;37m for: [0m{  } Equals: {  }
# Vector matchers
ok {test-number} - v, Equals<int>( { 1, 2, 3 } )[0;37m for: [0m{ 1, 2, 3 } Equals: { 1, 2, 3 }
# Vector matchers
ok {test-number} - v, Equals( v2 )[0;37m for: [0m{ 1, 2, 3 } Equals: { 1, 2, 3 }
# Vector matchers
ok {test-number} - v5, ( Equals<int, std::allocator<int>, CustomAllocator<int>>( v2 ) )[0;37m for: [0m{ 1, 2, 3 } Equals: { 1, 2, 3 }
# Vector matchers
ok {test-number} - v5, Equals( v6 )[0;37m for: [0m{ 1, 2, 3 } Equals: { 1, 2, 3 }
# Vector matchers
ok {test-number} - v, UnorderedEquals( v )[0;37m for: [0m{ 1, 2, 3 } UnorderedEquals: { 1, 2, 3 }
# Vector matchers
ok {test-number} - v, UnorderedEquals<int>( { 3, 2, 1 } )[0;37m for: [0m{ 1, 2, 3 } UnorderedEquals: { 3, 2, 1 }
# Vector matchers
ok {test-number} - empty, UnorderedEquals( empty )[0;37m for: [0m{  } UnorderedEquals: {  }
# Vector matchers
ok {test-number} - permuted, UnorderedEquals( v )[0;37m for: [0m{ 1, 3, 2 } UnorderedEquals: { 1, 2, 3 }
# Vector matchers
ok {test-number} - permuted, UnorderedEquals( v )[0;37m for: [0m{ 2, 3, 1 } UnorderedEquals: { 1, 2, 3 }
# Vector matchers
ok {test-number} - v5, ( UnorderedEquals<int, std::allocator<int>, CustomAllocator<int>>( permuted ) )[0;37m for: [0m{ 1, 2, 3 } UnorderedEquals: { 2, 3, 1 }
# Vector matchers
ok {test-number} - v5_permuted, UnorderedEquals( v5 )[0;37m for: [0m{ 1, 3, 2 } UnorderedEquals: { 1, 2, 3 }
# Vector matchers that fail
not ok {test-number} - v, VectorContains( -1 )[0;37m for: [0m{ 1, 2, 3 } Contains: -1
# Vector matchers that fail
not ok {test-number} - empty, VectorContains( 1 )[0;37m for: [0m{  } Contains: 1
# Vector matchers that fail
not ok {test-number} - empty, Contains( v )[0;37m for: [0m{  } Contains: { 1, 2, 3 }
# Vector matchers that fail
not ok {test-number} - v, Contains( v2 )[0;37m for: [0m{ 1, 2, 3 } Contains: { 1, 2, 4 }
# Vector matchers that fail
not ok {test-number} - v, Equals( v2 )[0;37m for: [0m{ 1, 2, 3 } Equals: { 1, 2 }
# Vector matchers that fail
not ok {test-number} - v2, Equals( v )[0;37m for: [0m{ 1, 2 } Equals: { 1, 2, 3 }
# Vector matchers that fail
not ok {test-number} - empty, Equals( v )[0;37m for: [0m{  } Equals: { 1, 2, 3 }
# Vector matchers that fail
not ok {test-number} - v, Equals( empty )[0;37m for: [0m{ 1, 2, 3 } Equals: {  }
# Vector matchers that fail
not ok {test-number} - v, UnorderedEquals( empty )[0;37m for: [0m{ 1, 2, 3 } UnorderedEquals: {  }
# Vector matchers that fail
not ok {test-number} - empty, UnorderedEquals( v )[0;37m for: [0m{  } UnorderedEquals: { 1, 2, 3 }
# Vector matchers that fail
not ok {test-number} - permuted, UnorderedEquals( v )[0;37m for: [0m{ 1, 3 } UnorderedEquals: { 1, 2, 3 }
# Vector matchers that fail
not ok {test-number} - permuted, UnorderedEquals( v )[0;37m for: [0m{ 3, 1 } UnorderedEquals: { 1, 2, 3 }
# When checked exceptions are thrown they can be expected or unexpected
ok {test-number} - thisThrows(), std::domain_error
# When checked exceptions are thrown they can be expected or unexpected
ok {test-number} - thisDoesntThrow()
# When checked exceptions are thrown they can be expected or unexpected
ok {test-number} - thisThrows()
# When unchecked exceptions are thrown directly they are always failures
not ok {test-number} - unexpected exception with message: 'unexpected exception'
# When unchecked exceptions are thrown during a CHECK the test should continue
not ok {test-number} - unexpected exception with message: 'expected exception';[0;37m expression was:[0m thisThrows() == 0
# When unchecked exceptions are thrown during a REQUIRE the test should abort fail
not ok {test-number} - unexpected exception with message: 'expected exception';[0;37m expression was:[0m thisThrows() == 0
# When unchecked exceptions are thrown from functions they are always failures
not ok {test-number} - unexpected exception with message: 'expected exception';[0;37m expression was:[0m thisThrows() == 0
# When unchecked exceptions are thrown from sections they are always failures
not ok {test-number} - unexpected exception with message: 'unexpected exception'
# X/level/0/a
ok {test-number} -
# X/level/0/b
ok {test-number} -
# X/level/1/a
ok {test-number} -
# X/level/1/b
ok {test-number} -
# XmlEncode
ok {test-number} - encode( "normal string" ) == "normal string"[0;37m for: [0m"normal string" == "normal string"
# XmlEncode
ok {test-number} - encode( "" ) == ""[0;37m for: [0m"" == ""
# XmlEncode
ok {test-number} - encode( "smith & jones" ) == "smith &amp; jones"[0;37m for: [0m"smith &amp; jones" == "smith &amp; jones"
# XmlEncode
ok {test-number} - encode( "smith < jones" ) == "smith &lt; jones"[0;37m for: [0m"smith &lt; jones" == "smith &lt; jones"
# XmlEncode
ok {test-number} - encode( "smith > jones" ) == "smith > jones"[0;37m for: [0m"smith > jones" == "smith > jones"
# XmlEncode
ok {test-number} - encode( "smith ]]> jones" ) == "smith ]]&gt; jones"[0;37m for: [0m"smith ]]&gt; jones" == "smith ]]&gt; jones"
# XmlEncode
ok {test-number} - encode( stringWithQuotes ) == stringWithQuotes[0;37m for: [0m"don't "quote" me on that" == "don't "quote" me on that"
# XmlEncode
ok {test-number} - encode( stringWithQuotes, Catch::XmlEncode::ForAttributes ) == "don't &quot;quote&quot; me on that"[0;37m for: [0m"don't &quot;quote&quot; me on that" == "don't &quot;quote&quot; me on that"
# XmlEncode
ok {test-number} - encode( "[\x01]" ) == "[\\x01]"[0;37m for: [0m"[\x01]" == "[\x01]"
# XmlEncode
ok {test-number} - encode( "[\x7F]" ) == "[\\x7F]"[0;37m for: [0m"[\x7F]" == "[\x7F]"
# XmlWriter writes boolean attributes as true/false
ok {test-number} - stream.str(), ContainsSubstring(R"(attr1="true")") && ContainsSubstring(R"(attr2="false")")[0;37m for: [0m"<?xml version="1.0" encoding="UTF-8"?> <Element1 attr1="true" attr2="false"/> " ( contains: "attr1="true"" and contains: "attr2="false"" )
# analyse no analysis
ok {test-number} - analysis.mean.point.count() == 23[0;37m for: [0m23.0 == 23
# analyse no analysis
ok {test-number} - analysis.mean.lower_bound.count() == 23[0;37m for: [0m23.0 == 23
# analyse no analysis
ok {test-number} - analysis.mean.upper_bound.count() == 23[0;37m for: [0m23.0 == 23
# analyse no analysis
ok {test-number} - analysis.standard_deviation.point.count() == 0[0;37m for: [0m0.0 == 0
# analyse no analysis
ok {test-number} - analysis.standard_deviation.lower_bound.count() == 0[0;37m for: [0m0.0 == 0
# analyse no analysis
ok {test-number} - analysis.standard_deviation.upper_bound.count() == 0[0;37m for: [0m0.0 == 0
# analyse no analysis
ok {test-number} - analysis.outliers.total() == 0[0;37m for: [0m0 == 0
# analyse no analysis
ok {test-number} - analysis.outliers.low_mild == 0[0;37m for: [0m0 == 0
# analyse no analysis
ok {test-number} - analysis.outliers.low_severe == 0[0;37m for: [0m0 == 0
# analyse no analysis
ok {test-number} - analysis.outliers.high_mild == 0[0;37m for: [0m0 == 0
# analyse no analysis
ok {test-number} - analysis.outliers.high_severe == 0[0;37m for: [0m0 == 0
# analyse no analysis
ok {test-number} - analysis.outliers.samples_seen == 0[0;37m for: [0m0 == 0
# analyse no analysis
ok {test-number} - analysis.outlier_variance == 0[0;37m for: [0m0.0 == 0
# array<int, N> -> toString
ok {test-number} - Catch::Detail::stringify( empty ) == "{  }"[0;37m for: [0m"{  }" == "{  }"
# array<int, N> -> toString
ok {test-number} - Catch::Detail::stringify( oneValue ) == "{ 42 }"[0;37m for: [0m"{ 42 }" == "{ 42 }"
# array<int, N> -> toString
ok {test-number} - Catch::Detail::stringify( twoValues ) == "{ 42, 250 }"[0;37m for: [0m"{ 42, 250 }" == "{ 42, 250 }"
# benchmark function call
ok {test-number} - model.started == 1[0;37m for: [0m1 == 1
# benchmark function call
ok {test-number} - model.finished == 0[0;37m for: [0m0 == 0
# benchmark function call
ok {test-number} - model.started == 1[0;37m for: [0m1 == 1
# benchmark function call
ok {test-number} - model.finished == 1[0;37m for: [0m1 == 1
# benchmark function call
ok {test-number} - called == 1[0;37m for: [0m1 == 1
# benchmark function call
ok {test-number} - model.started == 0[0;37m for: [0m0 == 0
# benchmark function call
ok {test-number} - model.finished == 0[0;37m for: [0m0 == 0
# benchmark function call
ok {test-number} - model.started == 0[0;37m for: [0m0 == 0
# benchmark function call
ok {test-number} - model.finished == 0[0;37m for: [0m0 == 0
# benchmark function call
ok {test-number} - called == 1[0;37m for: [0m1 == 1
# boolean member
ok {test-number} - obj.prop != 0[0;37m for: [0m0x000000549a73e7f8 != 0
# checkedElse
ok {test-number} - flag[0;37m for: [0mtrue
# checkedElse
ok {test-number} - testCheckedElse( true )[0;37m for: [0mtrue
# checkedElse, failing
ok {test-number} - flag[0;37m for: [0mfalse  # TODO
# checkedElse, failing
not ok {test-number} - testCheckedElse( false )[0;37m for: [0mfalse
# checkedIf
ok {test-number} - flag[0;37m for: [0mtrue
# checkedIf
ok {test-number} - testCheckedIf( true )[0;37m for: [0mtrue
# checkedIf, failing
ok {test-number} - flag[0;37m for: [0mfalse  # TODO
# checkedIf, failing
not ok {test-number} - testCheckedIf( false )[0;37m for: [0mfalse
# classify_outliers
ok {test-number} - o.samples_seen == static_cast<int>(x.size())[0;37m for: [0m6 == 6
# classify_outliers
ok {test-number} - o.low_severe == los[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.low_mild == lom[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.high_mild == him[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.high_severe == his[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.total() == los + lom + him + his[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.samples_seen == static_cast<int>(x.size())[0;37m for: [0m6 == 6
# classify_outliers
ok {test-number} - o.low_severe == los[0;37m for: [0m1 == 1
# classify_outliers
ok {test-number} - o.low_mild == lom[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.high_mild == him[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.high_severe == his[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.total() == los + lom + him + his[0;37m for: [0m1 == 1
# classify_outliers
ok {test-number} - o.samples_seen == static_cast<int>(x.size())[0;37m for: [0m6 == 6
# classify_outliers
ok {test-number} - o.low_severe == los[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.low_mild == lom[0;37m for: [0m1 == 1
# classify_outliers
ok {test-number} - o.high_mild == him[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.high_severe == his[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.total() == los + lom + him + his[0;37m for: [0m1 == 1
# classify_outliers
ok {test-number} - o.samples_seen == static_cast<int>(x.size())[0;37m for: [0m6 == 6
# classify_outliers
ok {test-number} - o.low_severe == los[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.low_mild == lom[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.high_mild == him[0;37m for: [0m1 == 1
# classify_outliers
ok {test-number} - o.high_severe == his[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.total() == los + lom + him + his[0;37m for: [0m1 == 1
# classify_outliers
ok {test-number} - o.samples_seen == static_cast<int>(x.size())[0;37m for: [0m6 == 6
# classify_outliers
ok {test-number} - o.low_severe == los[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.low_mild == lom[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.high_mild == him[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.high_severe == his[0;37m for: [0m1 == 1
# classify_outliers
ok {test-number} - o.total() == los + lom + him + his[0;37m for: [0m1 == 1
# classify_outliers
ok {test-number} - o.samples_seen == static_cast<int>(x.size())[0;37m for: [0m6 == 6
# classify_outliers
ok {test-number} - o.low_severe == los[0;37m for: [0m1 == 1
# classify_outliers
ok {test-number} - o.low_mild == lom[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.high_mild == him[0;37m for: [0m1 == 1
# classify_outliers
ok {test-number} - o.high_severe == his[0;37m for: [0m0 == 0
# classify_outliers
ok {test-number} - o.total() == los + lom + him + his[0;37m for: [0m2 == 2
# comparisons between const int variables
ok {test-number} - unsigned_char_var == 1[0;37m for: [0m1 == 1
# comparisons between const int variables
ok {test-number} - unsigned_short_var == 1[0;37m for: [0m1 == 1
# comparisons between const int variables
ok {test-number} - unsigned_int_var == 1[0;37m for: [0m1 == 1
# comparisons between const int variables
ok {test-number} - unsigned_long_var == 1[0;37m for: [0m1 == 1
# comparisons between int variables
ok {test-number} - long_var == unsigned_char_var[0;37m for: [0m1 == 1
# comparisons between int variables
ok {test-number} - long_var == unsigned_short_var[0;37m for: [0m1 == 1
# comparisons between int variables
ok {test-number} - long_var == unsigned_int_var[0;37m for: [0m1 == 1
# comparisons between int variables
ok {test-number} - long_var == unsigned_long_var[0;37m for: [0m1 == 1
# convertToBits
ok {test-number} - convertToBits( 0.f ) == 0[0;37m for: [0m0 == 0
# convertToBits
ok {test-number} - convertToBits( -0.f ) == ( 1ULL << 31 )[0;37m for: [0m2147483648 (0x<hex digits>) == 2147483648 (0x<hex digits>)
# convertToBits
ok {test-number} - convertToBits( 0. ) == 0[0;37m for: [0m0 == 0
# convertToBits
ok {test-number} - convertToBits( -0. ) == ( 1ULL << 63 )[0;37m for: [0m9223372036854775808 (0x<hex digits>) == 9223372036854775808 (0x<hex digits>)
# convertToBits
ok {test-number} - convertToBits( std::numeric_limits<float>::denorm_min() ) == 1[0;37m for: [0m1 == 1
# convertToBits
ok {test-number} - convertToBits( std::numeric_limits<double>::denorm_min() ) == 1[0;37m for: [0m1 == 1
# empty tags are not allowed
ok {test-number} - Catch::TestCaseInfo("", { "test with an empty tag", "[]" }, dummySourceLineInfo)
# erfc_inv
ok {test-number} - erfc_inv(1.103560) == Approx(-0.09203687623843015)[0;37m for: [0m-0.0920368762 == Approx( -0.0920368762 )
# erfc_inv
ok {test-number} - erfc_inv(1.067400) == Approx(-0.05980291115763361)[0;37m for: [0m-0.0598029112 == Approx( -0.0598029112 )
# erfc_inv
ok {test-number} - erfc_inv(0.050000) == Approx(1.38590382434967796)[0;37m for: [0m1.3859038243 == Approx( 1.3859038243 )
# estimate_clock_resolution
ok {test-number} - res.mean.count() == rate[0;37m for: [0m2000.0 == 2000 (0x<hex digits>)
# estimate_clock_resolution
ok {test-number} - res.outliers.total() == 0[0;37m for: [0m0 == 0
# even more nested SECTION tests
ok {test-number} -
# even more nested SECTION tests
ok {test-number} -
# even more nested SECTION tests
ok {test-number} -
loose text artifact
# is_unary_function
ok {test-number} -[0m with 1 message:[0m 'Catch::Clara::Detail::is_unary_function<decltype(unary1)>::value'
# is_unary_function
ok {test-number} -[0m with 1 message:[0m 'Catch::Clara::Detail::is_unary_function<decltype(unary2)>::value'
# is_unary_function
ok {test-number} -[0m with 1 message:[0m 'Catch::Clara::Detail::is_unary_function<decltype(unary3)>::value'
# is_unary_function
ok {test-number} -[0m with 1 message:[0m 'Catch::Clara::Detail::is_unary_function<decltype(unary4)>::value'
# is_unary_function
ok {test-number} -[0m with 1 message:[0m 'Catch::Clara::Detail::is_unary_function<decltype(unary5)>::value'
# is_unary_function
ok {test-number} -[0m with 1 message:[0m 'Catch::Clara::Detail::is_unary_function<decltype(unary6)>::value'
# is_unary_function
ok {test-number} -[0m with 1 message:[0m '!(Catch::Clara::Detail::is_unary_function<decltype(binary1)>::value)'
# is_unary_function
ok {test-number} -[0m with 1 message:[0m '!(Catch::Clara::Detail::is_unary_function<decltype(binary2)>::value)'
# is_unary_function
ok {test-number} -[0m with 1 message:[0m '!(Catch::Clara::Detail::is_unary_function<decltype(nullary1)>::value)'
# is_unary_function
ok {test-number} -[0m with 1 message:[0m '!(Catch::Clara::Detail::is_unary_function<decltype(nullary2)>::value)'
# is_unary_function
ok {test-number} -[0m with 1 message:[0m '!(Catch::Clara::Detail::is_unary_function<int>::value)'
# is_unary_function
ok {test-number} -[0m with 1 message:[0m '!(Catch::Clara::Detail::is_unary_function<std::string const&>::value)'
# just failure
not ok {test-number} - explicitly[0m with 1 message:[0m 'Previous info should not be seen'
# just failure after unscoped info
not ok {test-number} - explicitly[0m with 1 message:[0m 'previous unscoped info SHOULD not be seen'
# long long
ok {test-number} - l == std::numeric_limits<long long>::max()[0;37m for: [0m9223372036854775807 (0x<hex digits>) == 9223372036854775807 (0x<hex digits>)
# looped SECTION tests
not ok {test-number} - b > a[0;37m for: [0m0 > 1
# looped SECTION tests
not ok {test-number} - b > a[0;37m for: [0m1 > 1
# looped SECTION tests
ok {test-number} - b > a[0;37m for: [0m2 > 1
# looped SECTION tests
ok {test-number} - b > a[0;37m for: [0m3 > 1
# looped SECTION tests
ok {test-number} - b > a[0;37m for: [0m4 > 1
# looped SECTION tests
ok {test-number} - b > a[0;37m for: [0m5 > 1
# looped SECTION tests
ok {test-number} - b > a[0;37m for: [0m6 > 1
# looped SECTION tests
ok {test-number} - b > a[0;37m for: [0m7 > 1
# looped SECTION tests
ok {test-number} - b > a[0;37m for: [0m8 > 1
# looped SECTION tests
ok {test-number} - b > a[0;37m for: [0m9 > 1
# looped tests
not ok {test-number} - ( fib[i] % 2 ) == 0[0;37m for: [0m1 == 0[0;37m with 1 message:[0m 'Testing if fib[0] (1) is even'
# looped tests
not ok {test-number} - ( fib[i] % 2 ) == 0[0;37m for: [0m1 == 0[0;37m with 1 message:[0m 'Testing if fib[1] (1) is even'
# looped tests
ok {test-number} - ( fib[i] % 2 ) == 0[0;37m for: [0m0 == 0[0;37m with 1 message:[0m 'Testing if fib[2] (2) is even'
# looped tests
not ok {test-number} - ( fib[i] % 2 ) == 0[0;37m for: [0m1 == 0[0;37m with 1 message:[0m 'Testing if fib[3] (3) is even'
# looped tests
not ok {test-number} - ( fib[i] % 2 ) == 0[0;37m for: [0m1 == 0[0;37m with 1 message:[0m 'Testing if fib[4] (5) is even'
# looped tests
ok {test-number} - ( fib[i] % 2 ) == 0[0;37m for: [0m0 == 0[0;37m with 1 message:[0m 'Testing if fib[5] (8) is even'
# looped tests
not ok {test-number} - ( fib[i] % 2 ) == 0[0;37m for: [0m1 == 0[0;37m with 1 message:[0m 'Testing if fib[6] (13) is even'
# looped tests
not ok {test-number} - ( fib[i] % 2 ) == 0[0;37m for: [0m1 == 0[0;37m with 1 message:[0m 'Testing if fib[7] (21) is even'
# makeStream recognizes %debug stream name
ok {test-number} - Catch::makeStream( "%debug" )
# make_unique reimplementation
ok {test-number} - !(lval.has_moved)[0;37m for: [0m!false
# make_unique reimplementation
ok {test-number} - rval.has_moved[0;37m for: [0mtrue
# make_unique reimplementation
ok {test-number} - *ptr == std::tuple<int, double, int>{1, 2., 3}[0;37m for: [0m{?} == {?}
# mean
ok {test-number} - m == 19.[0;37m for: [0m19.0 == 19.0
# measure
ok {test-number} - x == 17[0;37m for: [0m17 == 17
# measure
ok {test-number} - x == 23[0;37m for: [0m23 == 23
# measure
ok {test-number} - r.elapsed.count() == 42[0;37m for: [0m42 == 42
# measure
ok {test-number} - r.result == 23[0;37m for: [0m23 == 23
# measure
ok {test-number} - r.iterations == 1[0;37m for: [0m1 == 1
# measure
ok {test-number} - s.elapsed.count() == 69[0;37m for: [0m69 == 69
# measure
ok {test-number} - s.result == 17[0;37m for: [0m17 == 17
# measure
ok {test-number} - s.iterations == 1[0;37m for: [0m1 == 1
# mix info, unscoped info and warning
warning {test-number} - 'info'[0;37m with 2 messages:[0m 'unscoped info'[0;37m and[0m 'and warn may mix'
# mix info, unscoped info and warning
warning {test-number} - 'info'[0;37m with 2 messages:[0m 'unscoped info'[0;37m and[0m 'they are not cleared after warnings'
# more nested SECTION tests
not ok {test-number} - a == b[0;37m for: [0m1 == 2
# more nested SECTION tests
ok {test-number} - a != b[0;37m for: [0m1 != 2
# more nested SECTION tests
ok {test-number} - a < b[0;37m for: [0m1 < 2
# nested SECTION tests
ok {test-number} - a != b[0;37m for: [0m1 != 2
# nested SECTION tests
ok {test-number} - b != a[0;37m for: [0m2 != 1
# nested SECTION tests
ok {test-number} - a != b[0;37m for: [0m1 != 2
# non streamable - with conv. op
ok {test-number} - s == "7"[0;37m for: [0m"7" == "7"
# non-copyable objects
ok {test-number} - ti == typeid(int)[0;37m for: [0m{?} == {?}
# normal_cdf
ok {test-number} - normal_cdf(0.000000) == Approx(0.50000000000000000)[0;37m for: [0m0.5 == Approx( 0.5 )
# normal_cdf
ok {test-number} - normal_cdf(1.000000) == Approx(0.84134474606854293)[0;37m for: [0m0.8413447461 == Approx( 0.8413447461 )
# normal_cdf
ok {test-number} - normal_cdf(-1.000000) == Approx(0.15865525393145705)[0;37m for: [0m0.1586552539 == Approx( 0.1586552539 )
# normal_cdf
ok {test-number} - normal_cdf(2.809729) == Approx(0.99752083845315409)[0;37m for: [0m0.9975208385 == Approx( 0.9975208385 )
# normal_cdf
ok {test-number} - normal_cdf(-1.352570) == Approx(0.08809652095066035)[0;37m for: [0m0.088096521 == Approx( 0.088096521 )
# normal_quantile
ok {test-number} - normal_quantile(0.551780) == Approx(0.13015979861484198)[0;37m for: [0m0.1301597986 == Approx( 0.1301597986 )
# normal_quantile
ok {test-number} - normal_quantile(0.533700) == Approx(0.08457408802851875)[0;37m for: [0m0.084574088 == Approx( 0.084574088 )
# normal_quantile
ok {test-number} - normal_quantile(0.025000) == Approx(-1.95996398454005449)[0;37m for: [0m-1.9599639845 == Approx( -1.9599639845 )
# not allowed
ok {test-number} -
# not prints unscoped info from previous failures
ok {test-number} - true[0;37m with 1 message:[0m 'this MAY be seen only for the FIRST assertion IF info is printed for passing assertions'
# not prints unscoped info from previous failures
ok {test-number} - true[0;37m with 1 message:[0m 'this MAY be seen only for the SECOND assertion IF info is printed for passing assertions'
# not prints unscoped info from previous failures
not ok {test-number} - false[0;37m with 1 message:[0m 'this SHOULD be seen'
# null strings
ok {test-number} - makeString( false ) != static_cast<char*>(0)[0;37m for: [0m"valid string" != {null string}
# null strings
ok {test-number} - makeString( true ) == static_cast<char*>(0)[0;37m for: [0m{null string} == {null string}
# null_ptr
ok {test-number} - ptr.get() == 0[0;37m for: [0mnullptr == 0
# pair<pair<int,const char *,pair<std::string,int> > -> toString
ok {test-number} - ::Catch::Detail::stringify( pair ) == "{ { 42, \"Arthur\" }, { \"Ford\", 24 } }"[0;37m for: [0m"{ { 42, "Arthur" }, { "Ford", 24 } }" == "{ { 42, "Arthur" }, { "Ford", 24 } }"
# parseEnums
ok {test-number} - parseEnums( "" ), Equals( std::vector<Catch::StringRef>{} )[0;37m for: [0m{  } Equals: {  }
# parseEnums
ok {test-number} - parseEnums( "ClassName::EnumName::Value1" ), Equals(std::vector<Catch::StringRef>{"Value1"} )[0;37m for: [0m{ Value1 } Equals: { Value1 }
# parseEnums
ok {test-number} - parseEnums( "Value1" ), Equals( std::vector<Catch::StringRef>{"Value1"} )[0;37m for: [0m{ Value1 } Equals: { Value1 }
# parseEnums
ok {test-number} - parseEnums( "EnumName::Value1" ), Equals(std::vector<Catch::StringRef>{"Value1"} )[0;37m for: [0m{ Value1 } Equals: { Value1 }
# parseEnums
ok {test-number} - parseEnums( "ClassName::EnumName::Value1, ClassName::EnumName::Value2" ), Equals( std::vector<Catch::StringRef>{"Value1", "Value2"} )[0;37m for: [0m{ Value1, Value2 } Equals: { Value1, Value2 }
# parseEnums
ok {test-number} - parseEnums( "ClassName::EnumName::Value1, ClassName::EnumName::Value2, ClassName::EnumName::Value3" ), Equals( std::vector<Catch::StringRef>{"Value1", "Value2", "Value3"} )[0;37m for: [0m{ Value1, Value2, Value3 } Equals: { Value1, Value2, Value3 }
# parseEnums
ok {test-number} - parseEnums( "ClassName::EnumName::Value1,ClassName::EnumName::Value2 , ClassName::EnumName::Value3" ), Equals( std::vector<Catch::StringRef>{"Value1", "Value2", "Value3"} )[0;37m for: [0m{ Value1, Value2, Value3 } Equals: { Value1, Value2, Value3 }
# pointer to class
ok {test-number} - p == 0[0;37m for: [0mnullptr == 0
# print unscoped info if passing unscoped info is printed
ok {test-number} - true[0;37m with 1 message:[0m 'this MAY be seen IF info is printed for passing assertions'
# prints unscoped info on failure
not ok {test-number} - false[0;37m with 2 messages:[0m 'this SHOULD be seen'[0;37m and[0m 'this SHOULD also be seen'
# prints unscoped info only for the first assertion
not ok {test-number} - false[0;37m with 1 message:[0m 'this SHOULD be seen only ONCE'
# prints unscoped info only for the first assertion
ok {test-number} - true
# prints unscoped info only for the first assertion
ok {test-number} - true[0;37m with 1 message:[0m 'this MAY also be seen only ONCE IF info is printed for passing assertions'
# prints unscoped info only for the first assertion
ok {test-number} - true
# random SECTION tests
ok {test-number} - a != b[0;37m for: [0m1 != 2
# random SECTION tests
ok {test-number} - b != a[0;37m for: [0m2 != 1
# random SECTION tests
ok {test-number} - a != b[0;37m for: [0m1 != 2
# replaceInPlace
ok {test-number} - Catch::replaceInPlace(letters, "b", "z")[0;37m for: [0mtrue
# replaceInPlace
ok {test-number} - letters == "azcdefcg"[0;37m for: [0m"azcdefcg" == "azcdefcg"
# replaceInPlace
ok {test-number} - Catch::replaceInPlace(letters, "c", "z")[0;37m for: [0mtrue
# replaceInPlace
ok {test-number} - letters == "abzdefzg"[0;37m for: [0m"abzdefzg" == "abzdefzg"
# replaceInPlace
ok {test-number} - Catch::replaceInPlace(letters, "a", "z")[0;37m for: [0mtrue
# replaceInPlace
ok {test-number} - letters == "zbcdefcg"[0;37m for: [0m"zbcdefcg" == "zbcdefcg"
# replaceInPlace
ok {test-number} - Catch::replaceInPlace(letters, "g", "z")[0;37m for: [0mtrue
# replaceInPlace
ok {test-number} - letters == "abcdefcz"[0;37m for: [0m"abcdefcz" == "abcdefcz"
# replaceInPlace
ok {test-number} - Catch::replaceInPlace(letters, letters, "replaced")[0;37m for: [0mtrue
# replaceInPlace
ok {test-number} - letters == "replaced"[0;37m for: [0m"replaced" == "replaced"
# replaceInPlace
ok {test-number} - !(Catch::replaceInPlace(letters, "x", "z"))[0;37m for: [0m!false
# replaceInPlace
ok {test-number} - letters == letters[0;37m for: [0m"abcdefcg" == "abcdefcg"
# replaceInPlace
ok {test-number} - Catch::replaceInPlace(s, "'", "|'")[0;37m for: [0mtrue
# replaceInPlace
ok {test-number} - s == "didn|'t"[0;37m for: [0m"didn|'t" == "didn|'t"
# request an unknown %-starting stream fails
ok {test-number} - Catch::makeStream( "%somestream" )
# resolution
ok {test-number} - res.size() == count[0;37m for: [0m10 == 10
# resolution
ok {test-number} - res[i] == rate[0;37m for: [0m1000.0 == 1000 (0x<hex digits>)
# resolution
ok {test-number} - res[i] == rate[0;37m for: [0m1000.0 == 1000 (0x<hex digits>)
# resolution
ok {test-number} - res[i] == rate[0;37m for: [0m1000.0 == 1000 (0x<hex digits>)
# resolution
ok {test-number} - res[i] == rate[0;37m for: [0m1000.0 == 1000 (0x<hex digits>)
# resolution
ok {test-number} - res[i] == rate[0;37m for: [0m1000.0 == 1000 (0x<hex digits>)
# resolution
ok {test-number} - res[i] == rate[0;37m for: [0m1000.0 == 1000 (0x<hex digits>)
# resolution
ok {test-number} - res[i] == rate[0;37m for: [0m1000.0 == 1000 (0x<hex digits>)
# resolution
ok {test-number} - res[i] == rate[0;37m for: [0m1000.0 == 1000 (0x<hex digits>)
# resolution
ok {test-number} - res[i] == rate[0;37m for: [0m1000.0 == 1000 (0x<hex digits>)
# run_for_at_least, chronometer
ok {test-number} - meter.runs() >= old_runs[0;37m for: [0m1 >= 1
# run_for_at_least, chronometer
ok {test-number} - meter.runs() >= old_runs[0;37m for: [0m2 >= 1
# run_for_at_least, chronometer
ok {test-number} - meter.runs() >= old_runs[0;37m for: [0m4 >= 2
# run_for_at_least, chronometer
ok {test-number} - meter.runs() >= old_runs[0;37m for: [0m8 >= 4
# run_for_at_least, chronometer
ok {test-number} - meter.runs() >= old_runs[0;37m for: [0m16 >= 8
# run_for_at_least, chronometer
ok {test-number} - meter.runs() >= old_runs[0;37m for: [0m32 >= 16
# run_for_at_least, chronometer
ok {test-number} - meter.runs() >= old_runs[0;37m for: [0m64 >= 32
# run_for_at_least, chronometer
ok {test-number} - meter.runs() >= old_runs[0;37m for: [0m128 >= 64
# run_for_at_least, chronometer
ok {test-number} - Timing.elapsed >= time[0;37m for: [0m128 ns >= 100 ns
# run_for_at_least, chronometer
ok {test-number} - Timing.result == Timing.iterations + 17[0;37m for: [0m145 == 145
# run_for_at_least, chronometer
ok {test-number} - Timing.iterations >= time.count()[0;37m for: [0m128 >= 100
# run_for_at_least, int
ok {test-number} - x >= old_x[0;37m for: [0m1 >= 1
# run_for_at_least, int
ok {test-number} - x >= old_x[0;37m for: [0m2 >= 1
# run_for_at_least, int
ok {test-number} - x >= old_x[0;37m for: [0m4 >= 2
# run_for_at_least, int
ok {test-number} - x >= old_x[0;37m for: [0m8 >= 4
# run_for_at_least, int
ok {test-number} - x >= old_x[0;37m for: [0m16 >= 8
# run_for_at_least, int
ok {test-number} - x >= old_x[0;37m for: [0m32 >= 16
# run_for_at_least, int
ok {test-number} - x >= old_x[0;37m for: [0m64 >= 32
# run_for_at_least, int
ok {test-number} - x >= old_x[0;37m for: [0m128 >= 64
# run_for_at_least, int
ok {test-number} - Timing.elapsed >= time[0;37m for: [0m128 ns >= 100 ns
# run_for_at_least, int
ok {test-number} - Timing.result == Timing.iterations + 17[0;37m for: [0m145 == 145
# run_for_at_least, int
ok {test-number} - Timing.iterations >= time.count()[0;37m for: [0m128 >= 100
# send a single char to INFO
not ok {test-number} - false[0;37m with 1 message:[0m '3'
# sends information to INFO
not ok {test-number} - false[0;37m with 2 messages:[0m 'hi'[0;37m and[0m 'i := 7'
# shortened hide tags are split apart
ok {test-number} - testcase.tags, VectorContains( Tag( "magic-tag" ) ) && VectorContains( Tag( "."_catch_sr ) )[0;37m for: [0m{ {?}, {?} } ( Contains: {?} and Contains: {?} )
# splitString
ok {test-number} - splitStringRef("", ','), Equals(std::vector<StringRef>())[0;37m for: [0m{  } Equals: {  }
# splitString
ok {test-number} - splitStringRef("abc", ','), Equals(std::vector<StringRef>{"abc"})[0;37m for: [0m{ abc } Equals: { abc }
# splitString
ok {test-number} - splitStringRef("abc,def", ','), Equals(std::vector<StringRef>{"abc", "def"})[0;37m for: [0m{ abc, def } Equals: { abc, def }
# stacks unscoped info in loops
not ok {test-number} - false[0;37m with 4 messages:[0m 'Count 1 to 3...'[0;37m and[0m '1'[0;37m and[0m '2'[0;37m and[0m '3'
# stacks unscoped info in loops
not ok {test-number} - false[0;37m with 4 messages:[0m 'Count 4 to 6...'[0;37m and[0m '4'[0;37m and[0m '5'[0;37m and[0m '6'
# startsWith
ok {test-number} - !(startsWith("", 'c'))[0;37m for: [0m!false
# startsWith
ok {test-number} - startsWith(std::string("abc"), 'a')[0;37m for: [0mtrue
# startsWith
ok {test-number} - startsWith("def"_catch_sr, 'd')[0;37m for: [0mtrue
# std::map is convertible string
ok {test-number} - Catch::Detail::stringify( emptyMap ) == "{  }"[0;37m for: [0m"{  }" == "{  }"
# std::map is convertible string
ok {test-number} - Catch::Detail::stringify( map ) == "{ { \"one\", 1 } }"[0;37m for: [0m"{ { "one", 1 } }" == "{ { "one", 1 } }"
# std::map is convertible string
ok {test-number} - Catch::Detail::stringify( map ) == "{ { \"abc\", 1 }, { \"def\", 2 }, { \"ghi\", 3 } }"[0;37m for: [0m"{ { "abc", 1 }, { "def", 2 }, { "ghi", 3 } }" == "{ { "abc", 1 }, { "def", 2 }, { "ghi", 3 } }"
# std::pair<int,const std::string> -> toString
ok {test-number} - ::Catch::Detail::stringify(value) == "{ 34, \"xyzzy\" }"[0;37m for: [0m"{ 34, "xyzzy" }" == "{ 34, "xyzzy" }"
# std::pair<int,std::string> -> toString
ok {test-number} - ::Catch::Detail::stringify( value ) == "{ 34, \"xyzzy\" }"[0;37m for: [0m"{ 34, "xyzzy" }" == "{ 34, "xyzzy" }"
# std::set is convertible string
ok {test-number} - Catch::Detail::stringify( emptySet ) == "{  }"[0;37m for: [0m"{  }" == "{  }"
# std::set is convertible string
ok {test-number} - Catch::Detail::stringify( set ) == "{ \"one\" }"[0;37m for: [0m"{ "one" }" == "{ "one" }"
# std::set is convertible string
ok {test-number} - Catch::Detail::stringify( set ) == "{ \"abc\", \"def\", \"ghi\" }"[0;37m for: [0m"{ "abc", "def", "ghi" }" == "{ "abc", "def", "ghi" }"
# std::vector<std::pair<std::string,int> > -> toString
ok {test-number} - ::Catch::Detail::stringify( pr ) == "{ { \"green\", 55 } }"[0;37m for: [0m"{ { "green", 55 } }" == "{ { "green", 55 } }"
# stdout and stderr streams have %-starting name
ok {test-number} - Catch::makeStream( "%stderr" )->isConsole()[0;37m for: [0mtrue
# stdout and stderr streams have %-starting name
ok {test-number} - Catch::makeStream( "%stdout" )->isConsole()[0;37m for: [0mtrue
# stringify ranges
ok {test-number} - ::Catch::Detail::stringify(streamable_range{}) == "op<<(streamable_range)"[0;37m for: [0m"op<<(streamable_range)" == "op<<(streamable_range)"
# stringify ranges
ok {test-number} - ::Catch::Detail::stringify(stringmaker_range{}) == "stringmaker(streamable_range)"[0;37m for: [0m"stringmaker(streamable_range)" == "stringmaker(streamable_range)"
# stringify ranges
ok {test-number} - ::Catch::Detail::stringify(just_range{}) == "{ 1, 2, 3, 4 }"[0;37m for: [0m"{ 1, 2, 3, 4 }" == "{ 1, 2, 3, 4 }"
# stringify ranges
ok {test-number} - ::Catch::Detail::stringify(disabled_range{}) == "{?}"[0;37m for: [0m"{?}" == "{?}"
# stringify( has_maker )
ok {test-number} - ::Catch::Detail::stringify( item ) == "StringMaker<has_maker>"[0;37m for: [0m"StringMaker<has_maker>" == "StringMaker<has_maker>"
# stringify( has_maker_and_operator )
ok {test-number} - ::Catch::Detail::stringify( item ) == "StringMaker<has_maker_and_operator>"[0;37m for: [0m"StringMaker<has_maker_and_operator>" == "StringMaker<has_maker_and_operator>"
# stringify( has_neither )
ok {test-number} - ::Catch::Detail::stringify(item) == "{?}"[0;37m for: [0m"{?}" == "{?}"
# stringify( has_operator )
ok {test-number} - ::Catch::Detail::stringify( item ) == "operator<<( has_operator )"[0;37m for: [0m"operator<<( has_operator )" == "operator<<( has_operator )"
# stringify( has_template_operator )
ok {test-number} - ::Catch::Detail::stringify( item ) == "operator<<( has_template_operator )"[0;37m for: [0m"operator<<( has_template_operator )" == "operator<<( has_template_operator )"
# stringify( vectors<has_maker> )
ok {test-number} - ::Catch::Detail::stringify( v ) == "{ StringMaker<has_maker> }"[0;37m for: [0m"{ StringMaker<has_maker> }" == "{ StringMaker<has_maker> }"
# stringify( vectors<has_maker_and_operator> )
ok {test-number} - ::Catch::Detail::stringify( v ) == "{ StringMaker<has_maker_and_operator> }"[0;37m for: [0m"{ StringMaker<has_maker_and_operator> }" == "{ StringMaker<has_maker_and_operator> }"
# stringify( vectors<has_operator> )
ok {test-number} - ::Catch::Detail::stringify( v ) == "{ operator<<( has_operator ) }"[0;37m for: [0m"{ operator<<( has_operator ) }" == "{ operator<<( has_operator ) }"
# strlen3
ok {test-number} - data.str.size() == data.len[0;37m for: [0m3 == 3
# strlen3
ok {test-number} - data.str.size() == data.len[0;37m for: [0m3 == 3
# strlen3
ok {test-number} - data.str.size() == data.len[0;37m for: [0m5 == 5
# strlen3
ok {test-number} - data.str.size() == data.len[0;37m for: [0m4 == 4
# tables
ok {test-number} - strlen(std::get<0>(data)) == static_cast<size_t>(std::get<1>(data))[0;37m for: [0m5 == 5
# tables
ok {test-number} - strlen(std::get<0>(data)) == static_cast<size_t>(std::get<1>(data))[0;37m for: [0m6 == 6
# tables
ok {test-number} - strlen(std::get<0>(data)) == static_cast<size_t>(std::get<1>(data))[0;37m for: [0m5 == 5
# tables
ok {test-number} - strlen(std::get<0>(data)) == static_cast<size_t>(std::get<1>(data))[0;37m for: [0m6 == 6
# tags with dots in later positions are not parsed as hidden
ok {test-number} - testcase.tags.size() == 1[0;37m for: [0m1 == 1
# tags with dots in later positions are not parsed as hidden
ok {test-number} - testcase.tags[0].original == "magic.tag"_catch_sr[0;37m for: [0mmagic.tag == magic.tag
# thrown std::strings are translated
not ok {test-number} - unexpected exception with message: 'Why would you throw a std::string?'
# toString on const wchar_t const pointer returns the string contents
ok {test-number} - result == "\"wide load\""[0;37m for: [0m""wide load"" == ""wide load""
# toString on const wchar_t pointer returns the string contents
ok {test-number} - result == "\"wide load\""[0;37m for: [0m""wide load"" == ""wide load""
# toString on wchar_t const pointer returns the string contents
ok {test-number} - result == "\"wide load\""[0;37m for: [0m""wide load"" == ""wide load""
# toString on wchar_t returns the string contents
ok {test-number} - result == "\"wide load\""[0;37m for: [0m""wide load"" == ""wide load""
# toString(enum class w/operator<<)
ok {test-number} - ::Catch::Detail::stringify(e0) == "E2/V0"[0;37m for: [0m"E2/V0" == "E2/V0"
# toString(enum class w/operator<<)
ok {test-number} - ::Catch::Detail::stringify(e1) == "E2/V1"[0;37m for: [0m"E2/V1" == "E2/V1"
# toString(enum class w/operator<<)
ok {test-number} - ::Catch::Detail::stringify(e3) == "Unknown enum value 10"[0;37m for: [0m"Unknown enum value 10" == "Unknown enum value 10"
# toString(enum class)
ok {test-number} - ::Catch::Detail::stringify(e0) == "0"[0;37m for: [0m"0" == "0"
# toString(enum class)
ok {test-number} - ::Catch::Detail::stringify(e1) == "1"[0;37m for: [0m"1" == "1"
# toString(enum w/operator<<)
ok {test-number} - ::Catch::Detail::stringify(e0) == "E2{0}"[0;37m for: [0m"E2{0}" == "E2{0}"
# toString(enum w/operator<<)
ok {test-number} - ::Catch::Detail::stringify(e1) == "E2{1}"[0;37m for: [0m"E2{1}" == "E2{1}"
# toString(enum)
ok {test-number} - ::Catch::Detail::stringify(e0) == "0"[0;37m for: [0m"0" == "0"
# toString(enum)
ok {test-number} - ::Catch::Detail::stringify(e1) == "1"[0;37m for: [0m"1" == "1"
# tuple<>
ok {test-number} - "{ }" == ::Catch::Detail::stringify(type{})[0;37m for: [0m"{ }" == "{ }"
# tuple<>
ok {test-number} - "{ }" == ::Catch::Detail::stringify(value)[0;37m for: [0m"{ }" == "{ }"
# tuple<float,int>
ok {test-number} - "1.2f" == ::Catch::Detail::stringify(float(1.2))[0;37m for: [0m"1.2f" == "1.2f"
# tuple<float,int>
ok {test-number} - "{ 1.2f, 0 }" == ::Catch::Detail::stringify(type{1.2f,0})[0;37m for: [0m"{ 1.2f, 0 }" == "{ 1.2f, 0 }"
# tuple<int>
ok {test-number} - "{ 0 }" == ::Catch::Detail::stringify(type{0})[0;37m for: [0m"{ 0 }" == "{ 0 }"
# tuple<string,string>
ok {test-number} - "{ \"hello\", \"world\" }" == ::Catch::Detail::stringify(type{"hello","world"})[0;37m for: [0m"{ "hello", "world" }" == "{ "hello", "world" }"
# tuple<tuple<int>,tuple<>,float>
ok {test-number} - "{ { 42 }, { }, 1.2f }" == ::Catch::Detail::stringify(value)[0;37m for: [0m"{ { 42 }, { }, 1.2f }" == "{ { 42 }, { }, 1.2f }"
# uniform samples
ok {test-number} - e.point == 23[0;37m for: [0m23.0 == 23
# uniform samples
ok {test-number} - e.upper_bound == 23[0;37m for: [0m23.0 == 23
# uniform samples
ok {test-number} - e.lower_bound == 23[0;37m for: [0m23.0 == 23
# uniform samples
ok {test-number} - e.confidence_interval == 0.95[0;37m for: [0m0.95 == 0.95
# unique_ptr reimplementation: basic functionality
ok {test-number} - !(ptr)[0;37m for: [0m!{?}
# unique_ptr reimplementation: basic functionality
ok {test-number} - ptr.get() == 0[0;37m for: [0mnullptr == 0
# unique_ptr reimplementation: basic functionality
ok {test-number} - ptr[0;37m for: [0m{?}
# unique_ptr reimplementation: basic functionality
ok {test-number} - *ptr == 0[0;37m for: [0m0 == 0
# unique_ptr reimplementation: basic functionality
ok {test-number} - ptr.get() == naked_ptr[0;37m for: [0m0x00000178ff9e0d00 == 0x<hex digits>
# unique_ptr reimplementation: basic functionality
ok {test-number} - !(ptr)[0;37m for: [0m!{?}
# unique_ptr reimplementation: basic functionality
ok {test-number} - ptr.get() == 0[0;37m for: [0mnullptr == 0
# unique_ptr reimplementation: basic functionality
ok {test-number} - ptr[0;37m for: [0m{?}
# unique_ptr reimplementation: basic functionality
ok {test-number} - *ptr == 0[0;37m for: [0m0 == 0
# unique_ptr reimplementation: basic functionality
ok {test-number} - ptr.get() == naked_ptr[0;37m for: [0m0x00000178ff9e1180 == 0x<hex digits>
# unique_ptr reimplementation: basic functionality
ok {test-number} - ptr[0;37m for: [0m{?}
# unique_ptr reimplementation: basic functionality
ok {test-number} - ptr.get() != 0[0;37m for: [0m0x00000178ff9e1200 != 0
# unique_ptr reimplementation: basic functionality
ok {test-number} - *ptr == 2[0;37m for: [0m2 == 2
# unique_ptr reimplementation: basic functionality
ok {test-number} - !(ptr)[0;37m for: [0m!{?}
# unique_ptr reimplementation: basic functionality
ok {test-number} - ptr.get() == 0[0;37m for: [0mnullptr == 0
# unique_ptr reimplementation: basic functionality
ok {test-number} - !(ptr1)[0;37m for: [0m!{?}
# unique_ptr reimplementation: basic functionality
ok {test-number} - ptr2[0;37m for: [0m{?}
# unique_ptr reimplementation: basic functionality
ok {test-number} - *ptr2 == 1[0;37m for: [0m1 == 1
# unique_ptr reimplementation: basic functionality
ok {test-number} - !(ptr2)[0;37m for: [0m!{?}
# unique_ptr reimplementation: basic functionality
ok {test-number} - ptr1[0;37m for: [0m{?}
# unique_ptr reimplementation: basic functionality
ok {test-number} - *ptr1 == 2[0;37m for: [0m2 == 2
# unique_ptr reimplementation: basic functionality
ok {test-number} - *ptr1 == 2[0;37m for: [0m2 == 2
# unique_ptr reimplementation: basic functionality
ok {test-number} - *ptr2 == 1[0;37m for: [0m1 == 1
# vec<vec<string,alloc>> -> toString
ok {test-number} - ::Catch::Detail::stringify(v) == "{  }"[0;37m for: [0m"{  }" == "{  }"
# vec<vec<string,alloc>> -> toString
ok {test-number} - ::Catch::Detail::stringify(v) == "{ { \"hello\" }, { \"world\" } }"[0;37m for: [0m"{ { "hello" }, { "world" } }" == "{ { "hello" }, { "world" } }"
# vector<bool> -> toString
ok {test-number} - ::Catch::Detail::stringify(bools) == "{  }"[0;37m for: [0m"{  }" == "{  }"
# vector<bool> -> toString
ok {test-number} - ::Catch::Detail::stringify(bools) == "{ true }"[0;37m for: [0m"{ true }" == "{ true }"
# vector<bool> -> toString
ok {test-number} - ::Catch::Detail::stringify(bools) == "{ true, false }"[0;37m for: [0m"{ true, false }" == "{ true, false }"
# vector<int,allocator> -> toString
ok {test-number} - ::Catch::Detail::stringify(vv) == "{  }"[0;37m for: [0m"{  }" == "{  }"
# vector<int,allocator> -> toString
ok {test-number} - ::Catch::Detail::stringify(vv) == "{ 42 }"[0;37m for: [0m"{ 42 }" == "{ 42 }"
# vector<int,allocator> -> toString
ok {test-number} - ::Catch::Detail::stringify(vv) == "{ 42, 250 }"[0;37m for: [0m"{ 42, 250 }" == "{ 42, 250 }"
# vector<int> -> toString
ok {test-number} - ::Catch::Detail::stringify(vv) == "{  }"[0;37m for: [0m"{  }" == "{  }"
# vector<int> -> toString
ok {test-number} - ::Catch::Detail::stringify(vv) == "{ 42 }"[0;37m for: [0m"{ 42 }" == "{ 42 }"
# vector<int> -> toString
ok {test-number} - ::Catch::Detail::stringify(vv) == "{ 42, 250 }"[0;37m for: [0m"{ 42, 250 }" == "{ 42, 250 }"
# vector<string> -> toString
ok {test-number} - ::Catch::Detail::stringify(vv) == "{  }"[0;37m for: [0m"{  }" == "{  }"
# vector<string> -> toString
ok {test-number} - ::Catch::Detail::stringify(vv) == "{ \"hello\" }"[0;37m for: [0m"{ "hello" }" == "{ "hello" }"
# vector<string> -> toString
ok {test-number} - ::Catch::Detail::stringify(vv) == "{ \"hello\", \"world\" }"[0;37m for: [0m"{ "hello", "world" }" == "{ "hello", "world" }"
# vectors can be sized and resized
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# vectors can be sized and resized
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# vectors can be sized and resized
ok {test-number} - v.size() == 10[0;37m for: [0m10 == 10
# vectors can be sized and resized
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# vectors can be sized and resized
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# vectors can be sized and resized
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# vectors can be sized and resized
ok {test-number} - v.size() == 0[0;37m for: [0m0 == 0
# vectors can be sized and resized
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# vectors can be sized and resized
ok {test-number} - v.capacity() == 0[0;37m for: [0m0 == 0
# vectors can be sized and resized
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# vectors can be sized and resized
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# vectors can be sized and resized
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# vectors can be sized and resized
ok {test-number} - v.capacity() >= 10[0;37m for: [0m10 >= 10
# vectors can be sized and resized
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# vectors can be sized and resized
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# vectors can be sized and resized
ok {test-number} - v.size() == 5[0;37m for: [0m5 == 5
# vectors can be sized and resized
ok {test-number} - v.capacity() >= 5[0;37m for: [0m5 >= 5
# warmup
ok {test-number} - (iterations * rate) > Catch::Benchmark::Detail::warmup_time.count()[0;37m for: [0m160000000 (0x<hex digits>) > 100
# warmup
ok {test-number} - (end - start) > Catch::Benchmark::Detail::warmup_time[0;37m for: [0m310016000 ns > 100 ms
# weighted_average_quantile
ok {test-number} - q1 == 14.5[0;37m for: [0m14.5 == 14.5
# weighted_average_quantile
ok {test-number} - med == 18.[0;37m for: [0m18.0 == 18.0
# weighted_average_quantile
ok {test-number} - q3 == 23.[0;37m for: [0m23.0 == 23.0
# xmlentitycheck
ok {test-number} -
# xmlentitycheck
ok {test-number} -
After All - Default Group
Before All - Apples
Before Each - Apples
1 Apples group
# Anonymous test case 1
ok {test-number} -[0m with 1 message:[0m 'anonymous group test case - Apples'
After Each - Apples
Before Each - Apples
2 Apples group
# Test inside Apples group
ok {test-number} -[0m with 1 message:[0m 'no assertions'
After Each - Apples
Before Each - Apples
3 Apples group
# Test witht tags inside Apples group
ok {test-number} -[0m with 1 message:[0m 'no assertions'
After Each - Apples
After All - Apples
Before All - Oranges
Before Each - Oranges
1 Oranges group
# Anonymous test case 2
ok {test-number} -[0m with 1 message:[0m 'anonymous group test case - Oranges'
After Each - Oranges
Before Each - Oranges
2 Oranges group
# Test inside Oranges group
ok {test-number} -[0m with 1 message:[0m 'no assertions'
After Each - Oranges
Before Each - Oranges
3 Oranges group
# Test witht tags inside Oranges group
ok {test-number} -[0m with 1 message:[0m 'no assertions'
After Each - Oranges
After All - Oranges
After Global - Default Group
After Global - Apples
After Global - Oranges
1..2248

