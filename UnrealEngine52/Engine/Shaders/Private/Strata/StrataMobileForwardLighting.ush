// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#define USE_STRATA_FORWARD_LIGHTING_COMMON 1
#include "StrataLightingCommon.ush"
#include "../LightData.ush"
#include "../MobileLightingCommon.ush"

#define FORWARD_PER_PIXEL_SHADING (FORWARD_SHADING || TRANSLUCENCY_LIGHTING_SURFACE_FORWARDSHADING || MATERIAL_SHADINGMODEL_SINGLELAYERWATER)

// For debug or iteration purpose only
#ifndef STRATA_FORCE_SINGLE_BSDF
#define STRATA_FORCE_SINGLE_BSDF 1
#endif

// For debug or iteration purpose only
#ifndef STRATA_FORCE_SINGLE_LOCAL_LIGHT
#define STRATA_FORCE_SINGLE_LOCAL_LIGHT 1
#endif

// Forward declarations
void GetVolumeLightingNonDirectional(float4 AmbientLightingVector, float3 DiffuseColor, inout float3 InterpolatedLighting, out float4 VolumeLighting);
void GetVolumeLightingDirectional(float4 AmbientLightingVector, float3 DirectionalLightingVector, float3 WorldNormal, float3 DiffuseColor, inout float3 InterpolatedLighting, out float4 VolumeLighting);

float3 GetWorldBentNormalZero(in FMaterialPixelParameters MaterialParameters);

void GetPrecomputedIndirectLightingAndSkyLight(
	VTPageTableResult LightmapVTPageTableResult, 
	FVertexFactoryInterpolantsVSToPS Interpolants, 
	bool bEvaluateBackface, 
	half3 DiffuseDir, 
	half3 SkyLightColor, 
	out half3 OutDiffuseIndirectLighting, 
	out half3 OutSubsurfaceIndirectLighting, 
	out half OutIndirectIrradiance, 
	out half3 OutWaterDiffuseIndirectLuminance);

// This code should map to GetForwardDirectLightingSplit
float3 StrataMobileForwardLighting(
	uint EyeIndex,
	float4 SvPosition,
	FStrataIntegrationSettings Settings,
	FMobileBasePassInterpolantsVSToPS BasePassInterpolants,
	FVertexFactoryInterpolantsVSToPS Interpolants,
	VTPageTableResult LightmapVTPageTableResult,
	float3 VolumetricLightmapBrickTextureUVs,
	FMaterialPixelParameters MaterialParameters,
	float SceneDepth,
	float2 ScreenUV,
	FStrataPixelHeader StrataPixelHeader,
	FStrataData StrataData,
	inout float3 OutTransmittancePreCoverage,
	inout float OutCoverage
	)
{
	const uint PrimitiveId = MaterialParameters.PrimitiveId;
	const uint2 PixelPos = uint2(SvPosition.xy);
	const float Dither = InterleavedGradientNoise(PixelPos, View.StateFrameIndexMod8);
	const float3 AbsoluteWorldPosition = LWCToFloat(MaterialParameters.AbsoluteWorldPosition);
	const float3 TranslatedWorldPosition = MaterialParameters.WorldPosition_CamRelative;
	const float3 LightingPositionOffset = MaterialParameters.LightingPositionOffset;
	const half4 PrecomputedShadowFactors = GetPrimaryPrecomputedShadowMask(LightmapVTPageTableResult, Interpolants, MaterialParameters);
	float3 V = MaterialParameters.CameraVector;

	FStrataAddressing NullStrataAddressing = (FStrataAddressing)0;	// Fake unused in StrataCreateBSDFContext when using Forward inline shading

	float3 Color = 0;
	OutCoverage = 0.0f;
	OutTransmittancePreCoverage = 1.0f;

	float SpecularScale = 1;
#if TRANSLUCENCY_ANY_VOLUMETRIC
	// No specular on volumetric translucency lighting modes
	SpecularScale = 0;
#endif

	const uint PrimitiveLightingChannelMask = GetPrimitive_LightingChannelMask(PrimitiveId);
	const float2 LocalPosition = SvPosition.xy - ResolvedView.ViewRectMin.xy;
	const uint GridIndex = ComputeLightGridCellIndex(uint2(LocalPosition.x, LocalPosition.y), SvPosition.w);

	FStrataTree StrataTree = StrataPixelHeader.StrataTree;
	if (StrataTree.BSDFCount > 0)
	{
		// Write Irradiance/AO data into header in order to be retrieve correctly during lighting
		#if STRATA_INLINE_SHADING
		HEADER_SETIRRADIANCE_AO(StrataPixelHeader.State, StrataPackIrradianceAndOcclusion(StrataPixelHeader.IrradianceAO, 0));
		#endif

		// Update tree (coverage/transmittance/luminace weights)
		StrataUpdateTree(NullStrataAddressing, StrataPixelHeader, StrataTree, StrataData, V, Settings, OutCoverage, OutTransmittancePreCoverage);

		//
		// Forward lighting
		//
		// 
		#if STRATA_FORCE_SINGLE_BSDF
		int BSDFIdx = 0;
		#else
		STRATA_UNROLL_N(STRATA_CLAMPED_BSDF_COUNT)
		for (int BSDFIdx = 0; BSDFIdx < StrataTree.BSDFCount; ++BSDFIdx)
		#endif
		{
		#define CurrentBSDF StrataTree.BSDFs[BSDFIdx]

			if (StrataIsBSDFVisible(CurrentBSDF))
			{
				// Starting with environment lighting, the context does not specify a light
				FStrataBSDFContext StrataBSDFContext = StrataCreateBSDFContext(StrataPixelHeader, CurrentBSDF, NullStrataAddressing, V);
					
				////
				//// Evaluate environment lighting
				////

				// Compute the bent normal from the BSDF normal
				const float Roughness = StrataGetBSDFRoughness(CurrentBSDF);
				const FShadingOcclusion ShadingOcclusion = ApplyBentNormal(MaterialParameters.CameraVector, StrataBSDFContext.N, GetWorldBentNormalZero(MaterialParameters), Roughness, StrataGetAO(StrataPixelHeader));
				float IndirectOcclusion = 1.0f;
				half  IndirectIrradiance = 0.0f; 
				half3 WaterDiffuseIndirectLuminance = 0.f;

				// 1. Diffuse Sky evaluation using bent normal
				if (UseBasePassSkylightDiffuse > 0)
				{
					// Update a context specific for environment lighting
					FStrataBSDFContext EnvBSDFContext = StrataBSDFContext;
					EnvBSDFContext.N = ShadingOcclusion.BentNormal;
					StrataUpdateBSDFContext(EnvBSDFContext, EnvBSDFContext.L);

					// And evaluate diffuse parameters
					FStrataEnvLightResult StrataEnvLight = StrataEvaluateForEnvLight(EnvBSDFContext, false/*bEnableSpecular*/, Settings);

					// Evaluate diffuse lighting
					// Note: The evaluation is alway done for computing IndirectIrradiance, which is used for ImageBasedReflection evaluation
					{
						const float3 DiffuseNormal = StrataEnvLight.DiffuseNormal;
						const float3 DiffuseColorForIndirect = StrataEnvLight.DiffuseWeight;
						const float3 SubsurfaceColorForIndirect = StrataEnvLight.DiffuseBackFaceWeight;

						const bool bEvaluateBackface = any(SubsurfaceColorForIndirect > 0.0);

						const half NoL = max(0, dot(StrataBSDFContext.N, MobileDirectionalLight.DirectionalLightDirectionAndShadowTransition.xyz));
						const bool bApplySkyLighting = !(MATERIAL_TWOSIDED && LQ_TEXTURE_LIGHTMAP) || NoL == 0;

						half3 DiffuseIndirectLighting = 0.0f;
						half3 SubsurfaceIndirectLighting = 0.0f;
						GetPrecomputedIndirectLightingAndSkyLight(
							LightmapVTPageTableResult, 
							Interpolants, 
							bEvaluateBackface, 
							DiffuseNormal, 
							ResolvedView.SkyLightColor.rgb, 
							DiffuseIndirectLighting, 
							SubsurfaceIndirectLighting, 
							IndirectIrradiance, 
							WaterDiffuseIndirectLuminance);

						// STRATA_TODO: GetIndirectOcclusion require occlusion data, which are not available on mobile. The base pass has a 
						// AmbientOcclusionTexture which could be used, but it does not seems to be hooked for now
					#if 0 && FORWARD_SHADING && (MATERIALBLENDING_SOLID || MATERIALBLENDING_MASKED)
						float2 NearestResolvedDepthScreenUV = CalculateNearestResolvedDepthScreenUV(ScreenUV, MaterialParameters.ScreenPosition.w);

						IndirectOcclusion = GetIndirectOcclusion(NearestResolvedDepthScreenUV, HasDynamicIndirectShadowCasterRepresentation(StrataPixelHeader));
						DiffuseIndirectLighting *= IndirectOcclusion;
						SubsurfaceIndirectLighting *= IndirectOcclusion;
						IndirectIrradiance *= IndirectOcclusion;
					#endif

						if (any((DiffuseColorForIndirect + SubsurfaceColorForIndirect) > 0.0f))
						{
							// For diffuse, we specify a perpendicular to the surface light direction for the transmittance to light to not be view dependent.
							const float DiffuseEnvLightingNoL = 1.0f;

							Color += (DiffuseIndirectLighting * DiffuseColorForIndirect + SubsurfaceIndirectLighting * SubsurfaceColorForIndirect) * 
									 LuminanceWeight(DiffuseEnvLightingNoL, CurrentBSDF) * AOMultiBounce(StrataEnvLight.DiffuseColor, ShadingOcclusion.DiffOcclusion);
						}
					}
				}

				// 2. Specular evaluation (using regular normal)
				//#if MATERIALBLENDING_MASKED || MATERIALBLENDING_SOLID || TRANSLUCENCY_LIGHTING_SURFACE_FORWARDSHADING || MATERIAL_SHADINGMODEL_SINGLELAYERWATER
				#if ENABLE_CLUSTERED_REFLECTION && (FORWARD_PER_PIXEL_SHADING || TRANSLUCENCY_LIGHTING_SURFACE_LIGHTINGVOLUME)
				if (UseBasePassSkylightSpecular > 0)
				{
					// Evaluate specular parameters without bent normal
					FStrataEnvLightResult StrataEnvLight = StrataEvaluateForEnvLight(StrataBSDFContext, true /*bEnableSpecular*/, Settings);

					// Evaluate specular lighting for the main lobe
					if (any(StrataEnvLight.SpecularWeight > 0.0f))
					{
						Color += GetImageBasedReflectionSpecular(StrataEnvLight.SpecularDirection, StrataEnvLight.SpecularSafeRoughness, MaterialParameters.WorldPosition_CamRelative, StrataBSDFContext.N, ShadingOcclusion.SpecularOcclusion, IndirectIrradiance, GridIndex) *
								 StrataEnvLight.SpecularWeight * IndirectOcclusion * LuminanceWeight(StrataBSDFContext, CurrentBSDF) * AOMultiBounce(StrataEnvLight.SpecularColor, ShadingOcclusion.SpecOcclusion);
					}
					// And for the second lobe if needed
					if (any(StrataEnvLight.SpecularHazeWeight > 0.0f))
					{
						Color += GetImageBasedReflectionSpecular(StrataEnvLight.SpecularHazeDirection, StrataEnvLight.SpecularHazeSafeRoughness, MaterialParameters.WorldPosition_CamRelative, StrataBSDFContext.N, ShadingOcclusion.SpecularOcclusion, IndirectIrradiance, GridIndex) *
								 StrataEnvLight.SpecularHazeWeight * IndirectOcclusion * LuminanceWeight(StrataBSDFContext, CurrentBSDF) * AOMultiBounce(StrataEnvLight.SpecularColor, ShadingOcclusion.SpecOcclusion);
					}
				}
				#endif


				////
				//// Evaluate translucent lighting volume / vertex lighting.
				////
				#define STRATA_TRANSLUCENCY_LIGHTING_VOLUMETRIC_DIRECTIONAL    (TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_DIRECTIONAL || TRANSLUCENCY_LIGHTING_VOLUMETRIC_DIRECTIONAL || TRANSLUCENCY_LIGHTING_SURFACE_LIGHTINGVOLUME)
				#define STRATA_TRANSLUCENCY_LIGHTING_VOLUMETRIC_NONDIRECTIONAL (TRANSLUCENCY_LIGHTING_VOLUMETRIC_PERVERTEX_NONDIRECTIONAL || TRANSLUCENCY_LIGHTING_VOLUMETRIC_NONDIRECTIONAL)

				#if STRATA_TRANSLUCENCY_LIGHTING_VOLUMETRIC_NONDIRECTIONAL || STRATA_TRANSLUCENCY_LIGHTING_VOLUMETRIC_DIRECTIONAL
				float4 VolumeLighting = 0;
				float3 InterpolatedLighting = 0;
				FStrataEvaluateResult BSDFEvaluate = StrataEvaluateBSDF(StrataBSDFContext, Settings);
				#endif

				////
				//// Evaluate emissive
				////
				Color += BSDF_GETEMISSIVE(CurrentBSDF) * CurrentBSDF.LuminanceWeightV;

				////
				//// Evaluate the single directional light selected for forward lighting.
				////
				const bool bHasDirectionalLight = any(MobileDirectionalLight.DirectionalLightColor > 0);
				BRANCH
				if (bHasDirectionalLight)
				{
					half DynamicShadowing = 1.0f;
					half4 DynamicShadowFactors = 1.0f;
					FDeferredLightData DirLightData = GetDirectionalLightData(MaterialParameters.ScreenPosition, SvPosition, DynamicShadowFactors, DynamicShadowing);
					half4 DirLightAttenuation = half4(1, 1, DynamicShadowing, DynamicShadowing);
					uint DirLightingChannelMask = LIGHTING_CHANNEL_MASK;
					float3 ToDirLight = DirLightData.Direction;	// Already normalized
					float DirLightMask = 1;
	
					float DirectionalLightCloudShadow = 1.0f;
				#if NEEDS_BASEPASS_CLOUD_SHADOW_INTERPOLATOR
					DirectionalLightCloudShadow = BasePassInterpolants.VertexCloudShadow;
				#endif

					FTranslucencyLightingVector LightingVector = GetTranslucencyLightingVector(DirLightData, TranslatedWorldPosition);
				#if STRATA_TRANSLUCENCY_LIGHTING_VOLUMETRIC_DIRECTIONAL
					GetVolumeLightingDirectional(LightingVector.AmbientLightingVector, LightingVector.DirectionalLightingVector, StrataBSDFContext.N, BSDFEvaluate.DiffuseColor, InterpolatedLighting, VolumeLighting);
				#elif STRATA_TRANSLUCENCY_LIGHTING_VOLUMETRIC_NONDIRECTIONAL
					GetVolumeLightingNonDirectional(LightingVector.AmbientLightingVector, BSDFEvaluate.DiffuseColor, InterpolatedLighting, VolumeLighting);
				#else
					StrataUpdateBSDFContext(StrataBSDFContext, ToDirLight);

					FStrataEvaluateResult BSDFEvaluate = (FStrataEvaluateResult)0;
					Color += StrataForwardLightingCommon(
						Dither,
						Settings,
						DirLightData,
						ToDirLight,
						DirLightMask,
						DirLightAttenuation,
						InitRectTexture(),
						DirLightingChannelMask,
						PrimitiveLightingChannelMask,
						PrecomputedShadowFactors,
						TranslatedWorldPosition,
						SceneDepth,
						LuminanceWeight(StrataBSDFContext, CurrentBSDF),
						StrataPixelHeader,
						StrataBSDFContext,
						BSDFEvaluate) * DirectionalLightCloudShadow;
				#endif
				}

				////
				//// Evaluate local lights
				////
				#if ENABLE_CLUSTERED_LIGHTS && !DISABLE_FORWARD_LOCAL_LIGHTS && (FORWARD_SHADING || TRANSLUCENCY_LIGHTING_SURFACE_FORWARDSHADING) // Forbidden for Single Layer Water
				{
					// Basic implementation for FORWARD_LOCAL_LIGHTS where local lights are reloaded per BSDF layer. It is fast by default when layer==1.
					const FCulledLightsGridData CulledLightsGrid = GetCulledLightsGrid(GridIndex, EyeIndex);

					// Limit max to ForwardLightData.NumLocalLights.
					// This prevents GPU hangs when the PS tries to read from uninitialized NumCulledLightsGrid buffer
					const uint NumLocalLights = min(CulledLightsGrid.NumLocalLights, GetNumLocalLights(EyeIndex));

				#if STRATA_FORCE_SINGLE_LOCAL_LIGHT
					#define LOCAL_LIGHT_EARLY_OUT return Color;
					uint LocalLightListIndex = 0;
					if (NumLocalLights > 0)
				#else
					#define LOCAL_LIGHT_EARLY_OUT continue;
					LOOP
					for (uint LocalLightListIndex = 0; LocalLightListIndex < NumLocalLights; LocalLightListIndex++)
				#endif
					{
						const FLocalLightData LocalLight = GetLocalLightData(CulledLightsGrid.DataStartIndex + LocalLightListIndex, EyeIndex);

						half4 PreviewShadowMapChannelMask = 1;
						half4 DynamicShadowFactors = 1;
						uint  LocalLightChannelMask = LIGHTING_CHANNEL_MASK;
						FDeferredLightData LightData = ConvertToDeferredLight_Mobile(LocalLight);
					
						// Rect light optionally supported in forward.
						// * This is not done explicitely in the legacy path (resulting in no lighting) but we do it for strata in order to avoid visual artefact.
						// * This can be removed when LocalLight properly supports rect lights.
						if (LightData.bRectLight && !SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT)
						{
							LOCAL_LIGHT_EARLY_OUT;
						}

						// When disabled, force the compiler to remove the texture atlas sampling to avoid taking an extra texture sampler
						#if !SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT
						LightData.bRectLight = false;
						#endif
						const FRectTexture LocalRectTexture = ConvertToRectTexture(LightData);

						float DynamicShadowing = dot(PreviewShadowMapChannelMask, DynamicShadowFactors);
						float4 LightAttenuation = float4(1, 1, DynamicShadowing.x, DynamicShadowing.x);

						float3 L = LightData.Direction;	// Already normalized
						float3 ToLight = L;
						float LightMask = 1;
						if (LightData.bRadialLight)
						{
							LightMask = GetLocalLightAttenuation(TranslatedWorldPosition, LightData, ToLight, L);
						}

						if (!IsLightVisible(LocalLight, TranslatedWorldPosition))
						{
							LOCAL_LIGHT_EARLY_OUT;
						}

						FTranslucencyLightingVector LightingVector = GetTranslucencyLightingVector(LightData, TranslatedWorldPosition);
					#if STRATA_TRANSLUCENCY_LIGHTING_VOLUMETRIC_DIRECTIONAL
						GetVolumeLightingDirectional(LightingVector.AmbientLightingVector, LightingVector.DirectionalLightingVector, StrataBSDFContext.N, BSDFEvaluate.DiffuseColor, InterpolatedLighting, VolumeLighting);
					#elif STRATA_TRANSLUCENCY_LIGHTING_VOLUMETRIC_NONDIRECTIONAL
						GetVolumeLightingNonDirectional(LightingVector.AmbientLightingVector, BSDFEvaluate.DiffuseColor, InterpolatedLighting, VolumeLighting);
					#else
						// Update the strata BSDF context accordgin to the new L
						StrataUpdateBSDFContext(StrataBSDFContext, ToLight);

						FStrataEvaluateResult BSDFEvaluate = (FStrataEvaluateResult)0;
						Color += StrataForwardLightingCommon(
							Dither,
							Settings,
							LightData,
							ToLight,
							LightMask,
							LightAttenuation,
							LocalRectTexture,
							LocalLightChannelMask,
							PrimitiveLightingChannelMask,
							PrecomputedShadowFactors,
							TranslatedWorldPosition,
							SceneDepth,
							LuminanceWeight(StrataBSDFContext, CurrentBSDF),
							StrataPixelHeader,
							StrataBSDFContext,
							BSDFEvaluate);
					#endif
					}
				}
				#endif // !DISABLE_FORWARD_LOCAL_LIGHTS

			}// StrataIsBSDFVisible
		#undef CurrentBSDF
		}
	}

	return Color;
}


