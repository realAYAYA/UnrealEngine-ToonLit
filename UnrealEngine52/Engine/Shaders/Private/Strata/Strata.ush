// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

// Sanity guard.
#ifndef STRATA_ENABLED
	#define STRATA_ENABLED 1
	#error STRATA_ENABLED needs to be defined
#endif

#if STRATA_ENABLED

#include "../ShadingEnergyConservation.ush"
#include "../BRDF.ush"
#include "../ColorSpace.ush"
#include "../Common.ush"
#include "../DeferredShadingCommon.ush"
#include "../ParticipatingMediaCommon.ush"
#include "../ThinFilmBSDF.ush"
#include "../MortonCode.ush"
#include "../OctahedralCommon.ush"
#include "../SubsurfaceProfileCommon.ush"
#include "../BurleyNormalizedSSSCommon.ush"
#include "../GammaCorrectionCommon.ush"
#include "/Engine/Shared/StrataDefinitions.h"
#include "/Engine/Private/Strata/StrataStatisticalOperators.ush"

// DXC has issue with unrolling certain part of the code. To address temporarly the warning-as-error issues, 
// we redefine the unroll function and fall back to loop on DXC
// To remove this, one must test PC + DX12 + RayTracing and make sure raytracing shaders compile.
#define STRATA_COMPILER (COMPILER_DXC)
#if STRATA_COMPILER == 1
#define STRATA_UNROLL LOOP
#define STRATA_UNROLL_N(X) LOOP
#else
#define STRATA_UNROLL UNROLL
#define STRATA_UNROLL_N(X) UNROLL_N(X)
#endif

// During the base pass or forward rendering, shared local bases are simply available from registers.
// If a BSDF is loaded for processing from the strata buffer, normals are unpacked on demand to reduce VGPR pressure and increase occupancy.
#ifndef STRATA_INLINE_SHADING
#define STRATA_INLINE_SHADING 0
#endif

#ifndef STRATA_DEFERRED_SHADING
#define STRATA_DEFERRED_SHADING (STRATA_INLINE_SHADING == 0)
#endif 

// During the unpacking of the Strata material data, if a slab has some sub-surface scattering, its BaseColor/Specular value will be 
// patched/overriden with white albedo (and optionally no specular) for computing the incoming irradiance without any albedo information. 
// This is required by the post-process/screen-space sub-surface methods. This overriden can be opt-out. This is used during the classification 
// pass for writing out the correct base color value into the FStrataSubsurfaceData
#ifndef STRATA_SSS_MATERIAL_OVERRIDE
#define STRATA_SSS_MATERIAL_OVERRIDE 1
#endif

#ifndef MATERIAL_SHADINGMODEL_SINGLELAYERWATER
#define MATERIAL_SHADINGMODEL_SINGLELAYERWATER 0 
#endif

#ifndef MATERIAL_FULLY_ROUGH
#define MATERIAL_FULLY_ROUGH 0
#endif

#ifndef MATERIAL_ALLOW_NEGATIVE_EMISSIVECOLOR
#define MATERIAL_ALLOW_NEGATIVE_EMISSIVECOLOR 0
#endif

#ifndef STRATA_CLAMPED_BSDF_COUNT
#define STRATA_CLAMPED_BSDF_COUNT 0
#endif

#ifndef STRATA_USES_CONVERSION_FROM_LEGACY
#define STRATA_USES_CONVERSION_FROM_LEGACY 0
#endif

// Strata packed data is read either from a view StrataMaterial resource (Texture2DArray) or a RayTracingPayload/
#ifndef STRATA_MATERIALCONTAINER_IS_VIEWRESOURCE
#define STRATA_MATERIALCONTAINER_IS_VIEWRESOURCE (!RAYCALLABLESHADER && !RAYHITGROUPSHADER && !RAYGENSHADER && !RAYMISSSHADER)
#endif

#ifndef STRATA_FASTPATH 
#define STRATA_FASTPATH 0
#endif

#ifndef STRATA_SINGLEPATH 
#define STRATA_SINGLEPATH 0
#endif

#define STRATA_COMPLEXPATH (!STRATA_FASTPATH && !STRATA_SINGLEPATH)

// When converting legacy materials to Strata, we need to override transmittance/coverage to be independent from the material and directly linked to opacity
#define STRATA_LEGACY_PREMULT_ALPHA_OVERRIDE (STRATA_USES_CONVERSION_FROM_LEGACY && MATERIALBLENDING_ALPHACOMPOSITE)

#define STRATA_LEGACY_MATERIAL_APPLIES_FINAL_WEIGHT (!MATERIALBLENDING_MASKED && !MATERIALBLENDING_SOLID && STRATA_LEGACY_PREMULT_ALPHA_OVERRIDE==0 || STRATA_MATERIAL_EXPORT_FROM_TRANSLUCENT)

#define STRATA_INLINE_SINGLELAYERWATER (STRATA_ENABLED && MATERIAL_IS_STRATA && STRATA_INLINE_SHADING && MATERIAL_SHADINGMODEL_SINGLELAYERWATER)

#ifndef STRATA_OPAQUE_MATERIAL
#define STRATA_OPAQUE_MATERIAL 0
#endif

// Behind the scene, we do all the simple volumetric lighting & transmitance computations considering a slab of 100 centimeters = 1 meter.
// If the user specifies a different thickness to simulate varying appearance, we rescale the mean free path in order to not have to store thickness as part of the BSDF description.
#define STRATA_SIMPLEVOLUME_THICKNESS_CM	100.0f
#define STRATA_SIMPLEVOLUME_THICKNESS_M		(STRATA_SIMPLEVOLUME_THICKNESS_CM * CENTIMETER_TO_METER)

#define STRATA_EPSILON						1e-10f
#define STRATA_EYE_DEFAULT_F0				0.028f

// Disable SSS diffusion based when the pixel's footprint is larger than x times the MFPs
#define STRATA_DISABLE_SSS_DIFFUSION_BASED_ON_PIXEL_FOOTPRINT 0

///////////////////////////////////////////////////////////////////////////////
// BSDFs representation

struct FStrataBSDF
{
	uint				State;			// Extra informations and other enabled BSDF features

	// STRATA_TODO pack the following
	int					OperatorIndex;
	float3				LuminanceWeightV;

	float				CoverageAboveAlongN;
	float3				TransmittanceAboveAlongN;	// The "pre-coverage" transmittance towards the top of the material along the normal and ignoring this BSDF, e.g. only accumulating matter above it.

	int					bIsBottom;
	int					bIsTop;

#if STRATA_INLINE_SHADING

	float				Coverage;		// The coverage of the material, as ratio of visible matter in this pixel.

	float3				Emissive;		// All bsdf can potientially have emissive. This is never written out to the strata gbuffer but instead accumulated in the emissive buffer during the base pass.
	float				ThicknessCm;	// This must be kept in order to be able to normalize the mean free path to comply with our volumetric material math all done in a normalised slab of medium.
	float3				TmpMFP;

	float				TopLayerDataWeight;// The weight this BSDF contributes to the top layer (normal and roughness for SSR and SSAO for instance)
#endif

	// Water has too many parameters to be stores in the extra VGPRs below. So we extend this structure for the case where it is evaluated inline only.
	// This is fine because when water is used, it is the only BSDF that can be used and it is only used to do in line shading.
#if STRATA_INLINE_SINGLELAYERWATER
	float4 InlineVGPRs[3];
#endif

	float4 VGPRs[5];
	uint   Haziness;					// Compilers such as FXC have troubles when using asfloat and asuint to propagate correct haziness bitfield around through registers. So we store that data as an actual uint.
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Storage layouts
// ---------------
// 3 types of storages layout:
// * Complex: store many (mixed) BSDFs
// * Single : store a single BSDF (with all feature apart from anisotropy, because we sample from the toplayer data texture which stores normal but not the tangent)
// * Simple : store a single Slab BSDF (with no extra feature)
// 
// Header State (8bits):
// * MATERIALMODE (None/SlabSimple/SlabSingle/SlabComplex/SLW/Hair/Eye)
// * HASPRECSHADOWMASK			
// * ZEROPRECSHADOWMASK			
// * CASTCONTACTSHADOW			
// * HASDYNINDIRECTSHADOWCASTER
// * ISSINGLELAYERWATER			
// * HASSUBSURFACE				
// 
// Layouts:
// * LAYOUT 2 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  (Complex) HEADER        27 |  State | AO | BSDF Count | Basis count | Basis type |
//                             |  8       8    4            3             4           
//            BASIS(0)      32 |  Normal: Oct 16/16 | Tangent: 11/11/10
//            BASIS(1)      32 |  Normal: Oct 16/16 | Tangent: 11/11/10
//                             |
//            STATE(0)      16 |  BSDF Type | Normal Id | Aniso | TopLayer | SSSType | GreyWeighV | Haze | F90 | Simple vol. | MFP Plugged | Fuzz | Thin
//                             |  3           2           1       1          2         1            1      1     1             1             1      1 
//            BSDF(0)       ?? |  Adaptive
//            STATE(1)      16 |  BSDF Type | Normal Id | Aniso | TopLayer | SSSType | GreyWeighV | Haze | F90 | Simple vol. | MFP Plugged | Fuzz | Thin
//                             |  3           2           1       1          2         1            1      1     1             1             1      1 
//            BSDF(1)       ?? |  Adaptive
//                             |
// * LAYOUT 1 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  (Single)  HEADER        27 |  State | AO | Aniso | TopLayer | SSSType | GreyWeighV | Haze | F90 | Simple vol. | MFP Plugged | Fuzz | Thin
//                             |  8       8    1       1          2         1            1      1     1             1             1      1            
//            BASIS(0)       0 | (Use top layer normal)
//            BSDF(0)       ?? |  Adaptive
// * LAYOUT 0 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------          
//  (Simple)  HEADER        32 | State | A0 | Roughness | DiffuseAbedo(8/20)
//   (Fast)                    | 8       8    8           8
//            BASIS(0)       0 | (Use top layer normal)
//            STATE(0)       0 | 
//            BSDF(0)       32 | F0_RGB | DiffuseAbedo(12/20)
//                             | 20       12
// * LAYOUT X -------------------------------------------------------------------------------------------------------------------------------------------------------------------------          
//   (Eye)    HEADER        32 | State | A0 | IrisMask | IrisMask
//                             | 8       8    8           8
//            BASIS(0)       0 | (Use top layer normal)
//            STATE(0)       0 | 
//            BSDF(0)       32 | DiffuseAlbedo | Roughness
//                             | 24              8
//                          32 | IrisNormal    | IrisPlaneNormal
//                             | 16              16
// * LAYOUT X -------------------------------------------------------------------------------------------------------------------------------------------------------------------------          
//   (Hair)   HEADER        32 | State | A0 | Free | Free
//                             | 8       8    8           8
//            BASIS(0)       0 | (Use top layer normal)
//            STATE(0)       0 | 
//            BSDF(0)       32 | BaseColor | Roughness
//                             | 24              8
//                          32 | Scatter | Specular | Backlit | ComplexTransmittance
//                             | 8         8          8         8
// * LAYOUT X -------------------------------------------------------------------------------------------------------------------------------------------------------------------------          
//   (SLW)    HEADER        32 | State | A0 | bUseSeparateDirLIight | Roughness | BaseColor0
//                             | 8       8    1           			7		  8
//            BASIS(0)       0 | (Use top layer normal)
//            STATE(0)       0 | 
//            BSDF(0)       32 | BaseColor1 | Metallic | Specular | TopMaterialOpacity
//                             | 12           8		  7		   7
//                          32 | OPTIONAL SeparatedMainDirLightLuminance if bUseSeparateDirLIight=true
//                             | 32 as R11G11B10F
//            -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Bit utils functions
#define TO_BITMASK(BitCount)							((1u<<(BitCount))-1)
#define TO_OFFSET_BITMASK(BitCount, BitOffset)			(TO_BITMASK(BitCount)<<(BitOffset))
#define READ_BITS(X, BitCount, BitOffset)				uint((X>>(BitOffset)) & TO_BITMASK(BitCount))
#define WRITE_BITS(X, BitCount, BitOffset, NewValue)	X = (X & (~TO_OFFSET_BITMASK(BitCount, BitOffset))) | (((NewValue) & TO_BITMASK(BitCount)) << (BitOffset))

///////////////////////////////////////////////////////////////////////////////
// Material Header
//
// Bit count for each component stored in a Strata header
// 
// State bit masks
#define HEADER_MASK_MATERIALMODE					(0x7)
#define HEADER_MASK_HASPRECSHADOWMASK				(1u << 3)
#define HEADER_MASK_ZEROPRECSHADOWMASK				(1u << 4)
#define HEADER_MASK_CASTCONTACTSHADOW				(1u << 5)
#define HEADER_MASK_HASDYNINDIRECTSHADOWCASTER		(1u << 6)
#define HEADER_MASK_HASSUBSURFACE					(1u << 7)
#define HEADER_MASK_BIT_COUNT						8

// For HEADER_BIT_BSDF_COUNT and  HEADER_BIT_SHAREDLOCALBASES_X, please refer to values in StrataDefinitions.h
#define HEADER_BIT_COUNT_STATE						HEADER_MASK_BIT_COUNT
#define HEADER_BIT_COUNT_IRRADIANCE_AO				8
#define HEADER_BIT_COUNT_BSDF_COUNT					4
#define HEADER_BIT_COUNT_SHAREDLOCALBASES_COUNT		3
#define HEADER_BIT_COUNT_SHAREDLOCALBASES_TYPE		4
#define HEADER_BIT_COUNT___UNUSED___				5

#define HEADER_BIT_OFFSET_STATE						0
#define HEADER_BIT_OFFSET_IRRADIANCE_AO				(HEADER_BIT_OFFSET_STATE					+ HEADER_BIT_COUNT_STATE)
#define HEADER_BIT_OFFSET_BSDF_COUNT				(HEADER_BIT_OFFSET_IRRADIANCE_AO			+ HEADER_BIT_COUNT_IRRADIANCE_AO)
#define HEADER_BIT_OFFSET_SHAREDLOCALBASES_COUNT	(HEADER_BIT_OFFSET_BSDF_COUNT				+ HEADER_BIT_COUNT_BSDF_COUNT)
#define HEADER_BIT_OFFSET_SHAREDLOCALBASES_TYPE		(HEADER_BIT_OFFSET_SHAREDLOCALBASES_COUNT	+ HEADER_BIT_COUNT_SHAREDLOCALBASES_COUNT)

// The different layout 'aliases' differently the material header
// 
// Layout 0 (Fast)
#define HEADER_FASTENCODING_BIT_COUNT				(HEADER_BIT_COUNT_STATE + HEADER_BIT_COUNT_IRRADIANCE_AO)
#define HEADER_FASTENCODING_MASK					((1u<<HEADER_FASTENCODING_BIT_COUNT)-1u)
// Layout 1 (Single BSDF)
#define HEADER_SINGLEENCODING_BIT_COUNT				(HEADER_BIT_COUNT_STATE + HEADER_BIT_COUNT_IRRADIANCE_AO)
#define HEADER_SINGLEENCODING_MASK					((1u<<HEADER_SINGLEENCODING_BIT_COUNT)-1u)
// Layout 2 (Complex)
#define HEADER_COMPLEXENCODING_BIT_COUNT			(32u)
#define HEADER_COMPLEXENCODING_MASK					(0xFFFFFFFFu)
// Layout Eye
#define HEADER_EYEENCODING_BIT_COUNT				(HEADER_BIT_COUNT_STATE + HEADER_BIT_COUNT_IRRADIANCE_AO)
#define HEADER_EYEENCODING_MASK						((1u<<HEADER_EYEENCODING_BIT_COUNT)-1u)
// Layout Hair
#define HEADER_HAIRENCODING_BIT_COUNT				(HEADER_BIT_COUNT_STATE + HEADER_BIT_COUNT_IRRADIANCE_AO)
#define HEADER_HAIRENCODING_MASK					((1u<<HEADER_HAIRENCODING_BIT_COUNT)-1u)
// Layout Eye
#define HEADER_SLWENCODING_BIT_COUNT				(HEADER_BIT_COUNT_STATE + HEADER_BIT_COUNT_IRRADIANCE_AO)
#define HEADER_SLWENCODING_MASK					((1u<<HEADER_SLWENCODING_BIT_COUNT)-1u)

// Sanity check
#if (HEADER_BIT_OFFSET_SHAREDLOCALBASES_TYPE + HEADER_BIT_COUNT_SHAREDLOCALBASES_TYPE) > 32
#error Strata Header is larger than 32 bits
#endif

// A header always has a common state represented by stat bits (low 8 bits) and Irradiance/AO bits (higher 8 bits)
#define HEADER_GETCOMMONSTATES(X)					READ_BITS( X, (HEADER_BIT_COUNT_STATE + HEADER_BIT_COUNT_IRRADIANCE_AO), HEADER_BIT_OFFSET_STATE)
#define HEADER_SETCOMMONSTATES(X, NewValue)			WRITE_BITS(X, (HEADER_BIT_COUNT_STATE + HEADER_BIT_COUNT_IRRADIANCE_AO), HEADER_BIT_OFFSET_STATE, NewValue)

#define HEADER_GETSTATE(X)							READ_BITS( X, HEADER_BIT_COUNT_STATE, HEADER_BIT_OFFSET_STATE)
#define HEADER_SETSTATE(X, NewValue)				WRITE_BITS(X, HEADER_BIT_COUNT_STATE, HEADER_BIT_OFFSET_STATE, NewValue)

#define HEADER_GETIRRADIANCE_AO(X)					READ_BITS( X, HEADER_BIT_COUNT_IRRADIANCE_AO, HEADER_BIT_OFFSET_IRRADIANCE_AO)
#define HEADER_SETIRRADIANCE_AO(X, NewValue)		WRITE_BITS(X, HEADER_BIT_COUNT_IRRADIANCE_AO, HEADER_BIT_OFFSET_IRRADIANCE_AO, NewValue)

#define HEADER_GETBSDFCOUNT(X)						READ_BITS( X, HEADER_BIT_COUNT_BSDF_COUNT, HEADER_BIT_OFFSET_BSDF_COUNT)
#define HEADER_SETBSDFCOUNT(X, NewValue)			WRITE_BITS(X, HEADER_BIT_COUNT_BSDF_COUNT, HEADER_BIT_OFFSET_BSDF_COUNT, NewValue)

#define HEADER_GETSHAREDLOCALBASESCOUNT(X)			READ_BITS( X, HEADER_BIT_COUNT_SHAREDLOCALBASES_COUNT, HEADER_BIT_OFFSET_SHAREDLOCALBASES_COUNT)
#define HEADER_SETSHAREDLOCALBASESCOUNT(X, NewValue) WRITE_BITS(X, HEADER_BIT_COUNT_SHAREDLOCALBASES_COUNT, HEADER_BIT_OFFSET_SHAREDLOCALBASES_COUNT, NewValue)

#define HEADER_GETSHAREDLOCALBASESTYPE(X)			READ_BITS( X, HEADER_BIT_COUNT_SHAREDLOCALBASES_TYPE, HEADER_BIT_OFFSET_SHAREDLOCALBASES_TYPE)
#define HEADER_SETSHAREDLOCALBASESTYPE(X, NewValue)	WRITE_BITS(X, HEADER_BIT_COUNT_SHAREDLOCALBASES_TYPE, HEADER_BIT_OFFSET_SHAREDLOCALBASES_TYPE, NewValue)

#define HEADER_MATERIALMODE_NONE				0
#define HEADER_MATERIALMODE_SLAB_SIMPLE			1
#define HEADER_MATERIALMODE_SLAB_SINGLE			2
#define HEADER_MATERIALMODE_SLAB_COMPLEX		3
#define HEADER_MATERIALMODE_SLWATER				4
#define HEADER_MATERIALMODE_HAIR				5
#define HEADER_MATERIALMODE_EYE					6
// Up to 8 material modes: 1 remains.

///////////////////////////////////////////////////////////////////////////////
// BSDF State
 
// Bit count for each component stored in a Strata BSDF state
#define BSDF_BIT_COUNT_ANISOTROPY				1
#define BSDF_BIT_COUNT_TOPLAYER					1
#define BSDF_BIT_COUNT_SSSTYPE					2
#define BSDF_BIT_COUNT_GREYWEIGHT_V				1
#define BSDF_BIT_COUNT_HAZINESS					1
#define BSDF_BIT_COUNT_F90						1
#define BSDF_BIT_COUNT_SIMPLEVOLUME				1
#define BSDF_BIT_COUNT_MFPPLUGGED				1
#define BSDF_BIT_COUNT_HASFUZZ					1
#define BSDF_BIT_COUNT_ISTHIN					1
#define BSDF_BIT_COUNT_BSDF_TYPE				3
#define BSDF_BIT_COUNT_SHAREDLOCALBASESID		2
#define BSDF_BIT_COUNT_HASTRANSABOVE			1
#define BSDF_BIT_COUNT___UNUSED___				5
#define BSDF_BIT_COUNT_WEIGHT10F				10

// Bit offset of each component store in BSDF state 
#define BSDF_BIT_OFFSET_ANISOTROPY				0
#define BSDF_BIT_OFFSET_TOPLAYER				(BSDF_BIT_OFFSET_ANISOTROPY			+ BSDF_BIT_COUNT_ANISOTROPY)
#define BSDF_BIT_OFFSET_SSSTYPE					(BSDF_BIT_OFFSET_TOPLAYER			+ BSDF_BIT_COUNT_TOPLAYER)
#define BSDF_BIT_OFFSET_GREYWEIGHT_V			(BSDF_BIT_OFFSET_SSSTYPE			+ BSDF_BIT_COUNT_SSSTYPE)
#define BSDF_BIT_OFFSET_HAZINESS				(BSDF_BIT_OFFSET_GREYWEIGHT_V		+ BSDF_BIT_COUNT_GREYWEIGHT_V)
#define BSDF_BIT_OFFSET_F90						(BSDF_BIT_OFFSET_HAZINESS			+ BSDF_BIT_COUNT_HAZINESS)
#define BSDF_BIT_OFFSET_SIMPLEVOLUME			(BSDF_BIT_OFFSET_F90				+ BSDF_BIT_COUNT_F90)
#define BSDF_BIT_OFFSET_MFPPLUGGED				(BSDF_BIT_OFFSET_SIMPLEVOLUME		+ BSDF_BIT_COUNT_SIMPLEVOLUME)
#define BSDF_BIT_OFFSET_HASFUZZ					(BSDF_BIT_OFFSET_MFPPLUGGED			+ BSDF_BIT_COUNT_MFPPLUGGED)
#define BSDF_BIT_OFFSET_ISTHIN					(BSDF_BIT_OFFSET_HASFUZZ			+ BSDF_BIT_COUNT_HASFUZZ)
#define BSDF_BIT_OFFSET_BSDF_TYPE				(BSDF_BIT_OFFSET_ISTHIN				+ BSDF_BIT_COUNT_ISTHIN)
#define BSDF_BIT_OFFSET_SHAREDLOCALBASESID		(BSDF_BIT_OFFSET_BSDF_TYPE			+ BSDF_BIT_COUNT_BSDF_TYPE)
#define BSDF_BIT_OFFSET_HASTRANSABOVE			(BSDF_BIT_OFFSET_SHAREDLOCALBASESID	+ BSDF_BIT_COUNT_SHAREDLOCALBASESID)
#define BSDF_BIT_OFFSET_WEIGHT10F				22

// Special optmised modes for the single BSDF path.
#define HEADER_SINGLE_OPTLEGACYMODE_BIT_COUNT	3
#define HEADER_SINGLE_OPTLEGACYMODE_BIT_MASK	((1u<<HEADER_SINGLE_OPTLEGACYMODE_BIT_COUNT)-1u)
#define SINGLE_OPTLEGACYMODE_NONE				0
#define SINGLE_OPTLEGACYMODE_CLEARCOAT			1
#define SINGLE_OPTLEGACYMODE_CLOTH				2
#define SINGLE_OPTLEGACYMODE_SSSWRAP			3
#define SINGLE_OPTLEGACYMODE_SSSPROFILE			4
#define SINGLE_OPTLEGACYMODE_SSSWRAP_THIN		5
// 5 more remains: Also how to deal with Aniso?

// Layout 0 (Fast)
#define BSDF_FASTENCODING_BIT_COUNT				(0u)
#define BSDF_FASTENCODING_MASK					(0u)
// Layout 1 (Single BSDF)
#define BSDF_SINGLEENCODING_BIT_COUNT			(BSDF_BIT_OFFSET_ISTHIN + BSDF_BIT_COUNT_ISTHIN)
#define BSDF_SINGLEENCODING_MASK				((1u<<BSDF_SINGLEENCODING_BIT_COUNT)-1u)
// Layout 2 (Complex)
#define BSDF_COMPLEXCODING_BIT_COUNT			(32u)
#define BSDF_COMPLEXFASTENCODING_MASK			(0xFFFFFFFFu)

// Sub-surface scattering types
#define SSS_TYPE_INVALID						(0u)
#define SSS_TYPE_WRAP							(1u)
#define SSS_TYPE_DIFFUSION						(2u)
#define SSS_TYPE_DIFFUSION_PROFILE				(3u)

// Sanity check
#if (BSDF_BIT_OFFSET_WEIGHT10F + BSDF_BIT_COUNT_WEIGHT10F) > 32
#error Strata BSDF state is larger than 32 bits
#endif
#if (HEADER_SINGLEENCODING_BIT_COUNT + BSDF_SINGLEENCODING_BIT_COUNT) > 32u
#error Strata Single layout header is larger than 32 bits
#endif

// Accessors for the BSDF type
#define BSDF_GETTYPE(X)					READ_BITS(X.State,  BSDF_BIT_COUNT_BSDF_TYPE, BSDF_BIT_OFFSET_BSDF_TYPE)
#define BSDF_SETTYPE(X, NewType)		WRITE_BITS(X.State, BSDF_BIT_COUNT_BSDF_TYPE, BSDF_BIT_OFFSET_BSDF_TYPE, NewType)

// Accessors for shared local bases
// This assumes Normals[STRATA_MAX_SHAREDLOCALBASES_REGISTERS]
#define BSDF_GETSHAREDLOCALBASISID(X)	READ_BITS(X.State,  BSDF_BIT_COUNT_SHAREDLOCALBASESID, BSDF_BIT_OFFSET_SHAREDLOCALBASESID)
#define BSDF_SETSHAREDLOCALBASISID(X, NrmlIdx)	WRITE_BITS(X.State, BSDF_BIT_COUNT_SHAREDLOCALBASESID, BSDF_BIT_OFFSET_SHAREDLOCALBASESID, NrmlIdx)

// Accessors for HasAnisotropy
// Indicates if the BSDF has anisotropic feature
#define BSDF_GETHASANISOTROPY(X)		READ_BITS(X.State,  BSDF_BIT_COUNT_ANISOTROPY, BSDF_BIT_OFFSET_ANISOTROPY)
#define BSDF_SETHASANISOTROPY(X, Aniso)	WRITE_BITS(X.State, BSDF_BIT_COUNT_ANISOTROPY, BSDF_BIT_OFFSET_ANISOTROPY, Aniso)

// Indicates if the BSDF is part of the top layer
#define BSDF_GETISTOPLAYER(X)			READ_BITS(X.State,  BSDF_BIT_COUNT_TOPLAYER, BSDF_BIT_OFFSET_TOPLAYER)
#define BSDF_SETISTOPLAYER(X, IsTop)	WRITE_BITS(X.State, BSDF_BIT_COUNT_TOPLAYER, BSDF_BIT_OFFSET_TOPLAYER, IsTop)

// Indicates if the BSDF has scattering component
#define BSDF_GETSSSTYPE(X)				READ_BITS(X.State,  BSDF_BIT_COUNT_SSSTYPE, BSDF_BIT_OFFSET_SSSTYPE)
#define BSDF_SETSSSTYPE(X, Scatt)		WRITE_BITS(X.State, BSDF_BIT_COUNT_SSSTYPE, BSDF_BIT_OFFSET_SSSTYPE, Scatt)

// Indicates if the BSDF weight is grey scale so that it can be stored in a single float (e.g. top layer BSDFs)
#define BSDF_GETHASGREYWEIGHT_V(X)		READ_BITS(X.State,  BSDF_BIT_COUNT_GREYWEIGHT_V, BSDF_BIT_OFFSET_GREYWEIGHT_V)
#define BSDF_SETHASGREYWEIGHT_V(X, Grey)WRITE_BITS(X.State, BSDF_BIT_COUNT_GREYWEIGHT_V, BSDF_BIT_OFFSET_GREYWEIGHT_V, Grey)

// Indicates if the BSDF has haziness data
#define BSDF_GETHASHAZINESS(X)			READ_BITS(X.State,  BSDF_BIT_COUNT_HAZINESS, BSDF_BIT_OFFSET_HAZINESS)
#define BSDF_SETHASHAZINESS(X, Haze)	WRITE_BITS(X.State, BSDF_BIT_COUNT_HAZINESS, BSDF_BIT_OFFSET_HAZINESS, Haze)

// Indicates if the BSDF has edge color data
#define BSDF_GETHASF90(X)				READ_BITS(X.State,  BSDF_BIT_COUNT_F90, BSDF_BIT_OFFSET_F90)
#define BSDF_SETHASF90(X, Col)			WRITE_BITS(X.State, BSDF_BIT_COUNT_F90, BSDF_BIT_OFFSET_F90, Col)

// Accessors for the 10bits float weight used if is it detected being a grey scale
#define BSDF_GETWEIGHT10F(X)			READ_BITS(X.State,  BSDF_BIT_COUNT_WEIGHT10F, BSDF_BIT_OFFSET_WEIGHT10F)
#define BSDF_SETWEIGHT10F(X, Weight)	WRITE_BITS(X.State, BSDF_BIT_COUNT_WEIGHT10F, BSDF_BIT_OFFSET_WEIGHT10F, Weight)

// Indicates if the BSDF is part of the top layer
#define BSDF_GETISSIMPLEVOLUME(X)		READ_BITS(X.State,  BSDF_BIT_COUNT_SIMPLEVOLUME, BSDF_BIT_OFFSET_SIMPLEVOLUME)
#define BSDF_SETISSIMPLEVOLUME(X, Value) WRITE_BITS(X.State, BSDF_BIT_COUNT_SIMPLEVOLUME, BSDF_BIT_OFFSET_SIMPLEVOLUME, Value)

// Indicates if the BSDF is part of the top layer
#define BSDF_GETHASMFP(X)				READ_BITS(X.State,  BSDF_BIT_COUNT_MFPPLUGGED, BSDF_BIT_OFFSET_MFPPLUGGED)
#define BSDF_SETHASMFP(X, Value)		WRITE_BITS(X.State, BSDF_BIT_COUNT_MFPPLUGGED, BSDF_BIT_OFFSET_MFPPLUGGED, Value)

// Indicates if the BSDF is part of the top layer
#define BSDF_GETHASFUZZ(X)				READ_BITS(X.State,  BSDF_BIT_COUNT_HASFUZZ, BSDF_BIT_OFFSET_HASFUZZ)
#define BSDF_SETHASFUZZ(X, Value)		WRITE_BITS(X.State, BSDF_BIT_COUNT_HASFUZZ, BSDF_BIT_OFFSET_HASFUZZ, Value)

// Indicates if the BSDF is part of the top layer
#define BSDF_GETISTHIN(X)				READ_BITS(X.State,  BSDF_BIT_COUNT_ISTHIN, BSDF_BIT_OFFSET_ISTHIN)
#define BSDF_SETISTHIN(X, Value)		WRITE_BITS(X.State, BSDF_BIT_COUNT_ISTHIN, BSDF_BIT_OFFSET_ISTHIN, Value)

// Indicates if the BSDF has light weight data
#define BSDF_GETHASTRANSABOVE(X)		READ_BITS(X.State,  BSDF_BIT_COUNT_HASTRANSABOVE, BSDF_BIT_OFFSET_HASTRANSABOVE)
#define BSDF_SETHASTRANSABOVE(X, Value)	WRITE_BITS(X.State, BSDF_BIT_COUNT_HASTRANSABOVE, BSDF_BIT_OFFSET_HASTRANSABOVE, Value)

#if STRATA_INLINE_SHADING
#define BSDF_SETEMISSIVE(X, V)			X.Emissive = V
#define BSDF_GETEMISSIVE(X)				X.Emissive
#else
#define BSDF_SETEMISSIVE(X, V)			
#define BSDF_GETEMISSIVE(X)				0.0f
#endif

#if STRATA_INLINE_SHADING
#define BSDF_SETTHICKNESSCM(X, V)		X.ThicknessCm = V
#define BSDF_GETTHICKNESSCM(X)			X.ThicknessCm
#else
#define BSDF_SETTHICKNESSCM(X, V)		
#define BSDF_GETTHICKNESSCM(X)			STRATA_SIMPLEVOLUME_THICKNESS_CM
#endif

///////////////////////////////////////////////////////////////////////////////
// Slab BSDF members
#define SLAB_COMPLEX_PATH_MASK (TO_OFFSET_BITMASK(BSDF_BIT_COUNT_ANISOTROPY, BSDF_BIT_OFFSET_ANISOTROPY)		| \
								TO_OFFSET_BITMASK(BSDF_BIT_COUNT_SSSTYPE,    BSDF_BIT_OFFSET_SSSTYPE)			| TO_OFFSET_BITMASK(BSDF_BIT_COUNT_HAZINESS,     BSDF_BIT_OFFSET_HAZINESS) | \
								TO_OFFSET_BITMASK(BSDF_BIT_COUNT_F90,        BSDF_BIT_OFFSET_F90)				| TO_OFFSET_BITMASK(BSDF_BIT_COUNT_SIMPLEVOLUME, BSDF_BIT_OFFSET_SIMPLEVOLUME) | \
								TO_OFFSET_BITMASK(BSDF_BIT_COUNT_HASFUZZ,    BSDF_BIT_OFFSET_HASFUZZ)			| TO_OFFSET_BITMASK(BSDF_BIT_COUNT_ISTHIN,       BSDF_BIT_OFFSET_ISTHIN) )

#define SLAB_DIFFUSEALBEDO(X)			X.VGPRs[0].xyz
#define SLAB_ROUGHNESS(X)				X.VGPRs[0].w
#define SLAB_F0(X)						X.VGPRs[1].xyz
#define SLAB_ANISOTROPY(X)				X.VGPRs[1].w
#define SLAB_F90(X)						X.VGPRs[2].xyz
#define SLAB_HAZINESS(X)				X.Haziness
// Either with SSS profile
#define SLAB_SSSPROFILEID(X)			X.VGPRs[3].x
#define SLAB_SSSPROFILERADIUSSCALE(X)	X.VGPRs[3].y
// Or explicit MFP in centimeter
#define SLAB_SSSMFP(X)					X.VGPRs[3].xyz
#define SLAB_SSSPHASEANISOTROPY(X)		X.VGPRs[3].w
// Fuzz to simulate cloth
#define SLAB_FUZZ_COLOR(X)				X.VGPRs[4].xyz
#define SLAB_FUZZ_AMOUNT(X)				X.VGPRs[4].w
#define SLAB_FUZZ_ROUGHNESS(X)			X.VGPRs[2].w

///////////////////////////////////////////////////////////////////////////////
// Volumetric BSDF members
#define VOLUMETRICFOGCLOUD_ALBEDO(X)	X.VGPRs[0].xyz
#define VOLUMETRICFOGCLOUD_EXTINCTION(X)X.VGPRs[1].xyz
#define VOLUMETRICFOGCLOUD_AO(X)		X.VGPRs[0].w

///////////////////////////////////////////////////////////////////////////////
// Unlit BSDF members
#define UNLIT_TRANSMITTANCE(X)			X.VGPRs[0].xyz

///////////////////////////////////////////////////////////////////////////////
// Hair BSDF members
#define HAIR_BASECOLOR(X)				X.VGPRs[0].xyz
#define HAIR_SCATTER(X)					X.VGPRs[0].w
#define HAIR_ROUGHNESS(X)				X.VGPRs[1].x
#define HAIR_SPECULAR(X)				X.VGPRs[1].y
#define HAIR_BACKLIT(X)					X.VGPRs[1].z
#define HAIR_COMPLEXTRANSMITTANCE(X)	X.VGPRs[1].w

///////////////////////////////////////////////////////////////////////////////
// Eye BSDF members
#define EYE_DIFFUSEALBEDO(X)			X.VGPRs[0].xyz
#define EYE_F0(X)						X.VGPRs[2].w
#define EYE_F90(X)						X.VGPRs[3].w
#define EYE_ROUGHNESS(X)				X.VGPRs[0].w
#define EYE_IRISDISTANCE(X)				X.VGPRs[1].x
#define EYE_IRISMASK(X)					X.VGPRs[1].y
#define EYE_SSSPROFILEID(X)				X.VGPRs[1].z
#define EYE_IRISNORMAL(X)				X.VGPRs[2].xyz
#define EYE_IRISPLANENORMAL(X)			X.VGPRs[3].xyz

///////////////////////////////////////////////////////////////////////////////
// Single Layer Water BSDF members
#define SLW_BASECOLOR(X)				X.VGPRs[0].xyz
#define SLW_METALLIC(X)					X.VGPRs[1].x
#define SLW_SPECULAR(X)					X.VGPRs[1].y
#define SLW_ROUGHNESS(X)				X.VGPRs[1].z
#define SLW_TOPMATERIALOPACITY(X)		X.VGPRs[1].w
#if STRATA_INLINE_SINGLELAYERWATER
#define SLW_WATERALBEDO(X)				X.InlineVGPRs[0].xyz
#define SLW_WATEREXTINCTION(X)			X.InlineVGPRs[1].xyz
#define SLW_WATERPHASEG(X)				X.InlineVGPRs[0].w
#define SLW_COLORSCALEBEHINDWATER(X)	X.InlineVGPRs[2].xyz
#endif

///////////////////////////////////////////////////////////////////////////////
// Forward declarations

FParticipatingMedia StrataSlabCreateParticipatingMedia(float3 DiffuseColor, float3 MeanFreePathCentimeters);
float3 RescaleMFPToComputationSpace(float3 InMFPInCm, float InSrcThicknessInCm, float InDstThicknessInCm);
void   EnableSlabBSDFSimpleVolumetric(inout FStrataBSDF BSDF);
void   StrataRequestSharedLocalBasisTangent(inout uint Types, uint Index);
float3 StrataUnpackNormal(uint PackedNormal);
void   StrataUnpackNormalAndTangent(inout float3 Normal, inout float3 Tangent, in uint InPacked);
uint   PackR8(float Value);
float  UnpackR8(uint Value);
uint   PackRGBA8(float4 rgba);
float4 UnpackRGBA8(uint rgba);
uint   Pack10F(float Value);
float  Unpack10F(uint Value);
uint   PackR6(float Value, float Dither);
float  UnpackR6(uint Value);
uint   PackR7(float Value, float Dither);
float  UnpackR7(uint Value);
uint   PackR11G11B10F(float3 rgb);
float3 UnpackR11G11B10F(uint rgb);
uint   PackR10G10B10F(float3 rgb);
float3 UnpackR10G10B10F(uint rgb);
uint   PackR7G7B6Gamma2(float3 rgb, float Dither);
float3 UnpackR7G7B6Gamma2(uint rgb);
uint   PackColorLinearToGamma2AlphaLinear(float4 rgba);
float4 UnpackColorGamma2ToLinearAlphaLinear(uint rgba);
uint   StrataPackNormal(in float3 Normal);
float3 StrataUnpackNormal(uint PackedNormal);
uint   StrataPackNormal24(in float3 Normal);
float3 StrataUnpackNormal24(uint PackedNormal);
uint   StrataPackNormal22(in float3 Normal);
float3 StrataUnpackNormal22(uint PackedNormal);
bool   IsStrataSlabFastPathCompatible(in FStrataBSDF BSDF);

///////////////////////////////////////////////////////////////////////////////
// Haziness

// bSimpleClearCoat==false means that Weight is the blend in amount of the secondary specular lob over the first specular lob.
// bSimpleClearCoat==true  means fast clear coat is used, Weight is coverage of a top layer specular. 
struct FHaziness
{
	bool  bSimpleClearCoat;
	float Roughness;
	float Weight;
};

FHaziness InitialiseHaziness()
{
	FHaziness Haziness = (FHaziness)0;
	return Haziness;
}

// returns 16 bits: 1 bit bFastClearCoat, 7 bits Weight, 8 bits roughness
uint PackHaziness(FHaziness Haziness)
{
	uint High8Bits = (Haziness.bSimpleClearCoat ? 0x80 : 0x00) | uint(saturate(Haziness.Weight) * 127);
	uint Data = (High8Bits << 8) | PackR8(Haziness.Roughness);
	return Data;
}

FHaziness UnpackHaziness(uint Data)
{
	FHaziness Haziness;
	Haziness.bSimpleClearCoat	= Data & 0x8000;
	Haziness.Weight				= float(uint((Data>>8) & 0x7F)) * (1.0f / 127.0f);
	Haziness.Roughness			= UnpackR8(Data);
	return Haziness;
}

uint LerpHazinessParameterBlending(FStrataBSDF A, FStrataBSDF B, float MixValue)
{
	FHaziness HazinessA = UnpackHaziness(SLAB_HAZINESS(A));
	FHaziness HazinessB = UnpackHaziness(SLAB_HAZINESS(B));

	FHaziness OutputHaziness;
	OutputHaziness.Weight			= lerp(HazinessA.Weight,	HazinessB.Weight,		MixValue);
	OutputHaziness.Roughness		= lerp(HazinessA.Roughness, HazinessB.Roughness,	MixValue);
	OutputHaziness.bSimpleClearCoat = HazinessA.bSimpleClearCoat || HazinessB.bSimpleClearCoat;		// Maintain the fast legacy path first

	return PackHaziness(OutputHaziness);
}

///////////////////////////////////////////////////////////////////////////////
// Irradiance and occlusion
struct FStrataIrradianceAndOcclusion
{
	float MaterialAO;
	float IndirectIrradiance;
	uint  DiffuseIndirectSampleOcclusion;
};

FStrataIrradianceAndOcclusion InitIrradianceAndOcclusion(float InAO=1.0f)
{
	FStrataIrradianceAndOcclusion Out;
	Out.MaterialAO = 1.0f;
	Out.IndirectIrradiance = 1.0f;
	Out.DiffuseIndirectSampleOcclusion = 0x0u;
	return Out;
}

uint StrataPackIrradianceAndOcclusion(FStrataIrradianceAndOcclusion In, float QuantizationBias=0)
{
#if GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION
	return In.DiffuseIndirectSampleOcclusion;
#elif ALLOW_STATIC_LIGHTING
	// No space for AO. Multiply IndirectIrradiance by AO instead of storing.
	return min(0xFFu, (EncodeIndirectIrradiance(In.IndirectIrradiance * In.MaterialAO) + QuantizationBias * (1.0 / 255.0)) * 0xFFu);
#else
	return PackR8(In.MaterialAO);
#endif
}

FStrataIrradianceAndOcclusion StrataUnpackIrradianceAndOcclusion(uint In /*8bits*/)
{
	FStrataIrradianceAndOcclusion Out;
#if GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION
	Out.DiffuseIndirectSampleOcclusion = In;
	Out.MaterialAO = saturate(1.0 - float(countbits(Out.DiffuseIndirectSampleOcclusion)) * rcp(float(INDIRECT_SAMPLE_COUNT)));
	Out.IndirectIrradiance = 1.f;
#elif ALLOW_STATIC_LIGHTING
	Out.MaterialAO = 1.f;
	Out.DiffuseIndirectSampleOcclusion = 0x0u;
	Out.IndirectIrradiance = DecodeIndirectIrradiance(UnpackR8(In));
#else
	Out.MaterialAO = float(In)* rcp(255.0f);
	Out.DiffuseIndirectSampleOcclusion = 0x0u;
	Out.IndirectIrradiance = 1.f;
#endif
	return Out;
}

///////////////////////////////////////////////////////////////////////////////
// Top layer

#define TOP_LAYER_MATERIAL_NONE		0
#define TOP_LAYER_MATERIAL_VALID	1
#define TOP_LAYER_MATERIAL_SLWATER	2
// Available #define TOP_LAYER_MATERIAL_xxx	3

struct FStrataTopLayerData
{
	float3 BaseColor; // This data is only available during the base pass. It is not packed/stored otherwise.
	float3 WorldNormal;
	float  Roughness;
	uint   Material;
};

STRATA_TOP_LAYER_TYPE StrataPackTopLayerData(FStrataTopLayerData In)
{
#if STRATA_NORMAL_QUALITY==0
	// Output is min. by 1 to flag data has valid. This creates a small bias for one particular orientation with a mirror roughness.
	return (StrataPackNormal22(In.WorldNormal) << 10) | (PackR8(In.Roughness) << 2) | (In.Material);
#elif STRATA_NORMAL_QUALITY==1
	return uint2(StrataPackNormal(In.WorldNormal), (PackR8(In.Roughness) << 2) | (In.Material));
#else
#error Unkown STRATA_NORMAL_QUALITY
#endif
}

FStrataTopLayerData StrataUnpackTopLayerData(uint In)
{
	FStrataTopLayerData Out = (FStrataTopLayerData)0;
	Out.Material = (In & 0x3);
	Out.WorldNormal = StrataUnpackNormal22(In >> 10);
	Out.Roughness = UnpackR8(In >> 2);
	return Out;
}
FStrataTopLayerData StrataUnpackTopLayerData(uint2 In)
{
	FStrataTopLayerData Out = (FStrataTopLayerData)0;
#if STRATA_NORMAL_QUALITY==0
	Out = StrataUnpackTopLayerData(In.x);
#elif STRATA_NORMAL_QUALITY==1
	Out.Material = (In.y & 0x3);
	Out.WorldNormal = StrataUnpackNormal(In.x);
	Out.Roughness = UnpackR8(In.y >> 2);
#else
#error Unkown STRATA_NORMAL_QUALITY
#endif
	return Out;
}

bool IsStrataMaterial(FStrataTopLayerData In)
{
	return In.Material > TOP_LAYER_MATERIAL_NONE;
}

bool IsSingleLayerWaterMaterial(FStrataTopLayerData In)
{
	return In.Material == TOP_LAYER_MATERIAL_SLWATER;
}

///////////////////////////////////////////////////////////////////////////////
// Opaque rough refractions

struct FStrataOpaqueRoughRefractionData
{
	float	OpaqueRoughRefractionEnabled;
	float	Coverage;
	float	VarianceCm;
};

float3 StrataPackOpaqueRoughRefractionData(FStrataOpaqueRoughRefractionData In)
{
	return float3(In.Coverage, In.VarianceCm, In.OpaqueRoughRefractionEnabled);
}

FStrataOpaqueRoughRefractionData StrataUnpackOpaqueRoughRefractionData(float3 In)
{
	FStrataOpaqueRoughRefractionData Out = (FStrataOpaqueRoughRefractionData)0;
	Out.Coverage = In.r;
	Out.VarianceCm = In.g;
	Out.OpaqueRoughRefractionEnabled = In.b;
	return Out;
}


// Returns the variance of refracted rays intersection with on the XY plane after scattering at the interface of a slab of matter,
// having the given Roughness and a normal along Z; after traveling along -Z from air to water (eta = 1.333).
// That variance has been generated from unit vectors, so it is a measure of the spread of light on the XY plane after a depth of 1.
// Using Thales, one can scale that spread to any distance. The Gaussian kernel can be evaluated for a depth d using a Variance = GetVarianceFromRoughness(Roughness) * d.
// 
//			| V = -Z
//			|
//			|
//			|
//			|
//			v
//	------------------- ^	Surfcace of roughness R
//		   /|\			|
//		  / | \			| Depth D
//		 /  |  \		|
//		|<----->|		v
//			Variance = GetVarianceFromRoughness(R) * D;
float GetVarianceFromRoughness(float Roughness)
{
	float Roughness2 = Roughness * Roughness;
	float Roughness3 = Roughness2 * Roughness;
	float Roughness4 = Roughness2 * Roughness2;
//	return saturate(0.0000226575 - 0.000332564 * Roughness - 0.0168059 * Roughness2 + 0.115569 * Roughness3 - 0.0526336 * Roughness4);	// Original
	return saturate(             - 0.000332564 * Roughness - 0.0168059 * Roughness2 + 0.115569 * Roughness3 - 0.0526336 * Roughness4);	// Removing the 0.0000226575 to get GetVarianceFromRoughness(0)=0, to not get any blurred refraction when roughness==0.
}

///////////////////////////////////////////////////////////////////////////////
// Sub-surface 

// Stored in frist slice as UINT
// This is hot data that is often accessed by intrested passes.
struct FStrataSubsurfaceHeader
{
	// 2 bits
	// SSS type:
	// 0: Invalid
	// 1: Wrap
	// 2: Diffusion
	// 3: Diffusion with profile

	// 30 bits of data.
	// If  bIsProfile: 8bit profile radius, 8bits ProfileId, 16bits unused
	// If !bIsProfile: 101010 mean free path
	uint Bytes;
};
#define SSSHEADER_TYPE(Header)	(Header.Bytes & 0x3)
#define SSSHEADER_TYPE_MASK		(0x00000003)

void StrataSubSurfaceHeaderSetSSSType(inout FStrataSubsurfaceHeader SSSHeader, uint SSSType)
{
	SSSHeader.Bytes &= (~SSSHEADER_TYPE_MASK);
	SSSHeader.Bytes |= SSSType;
}

void StrataSubSurfaceHeaderSetProfile(inout FStrataSubsurfaceHeader SSSHeader, float RadiusScale, uint ProfileId)
{
	SSSHeader.Bytes &= SSSHEADER_TYPE_MASK;
	SSSHeader.Bytes |= ProfileId << 24;
	SSSHeader.Bytes |= PackR8(RadiusScale) << 16;
}

void StrataSubSurfaceHeaderSetNonProfile(inout FStrataSubsurfaceHeader SSSHeader, float3 MeanFreePath)
{
	SSSHeader.Bytes &= SSSHEADER_TYPE_MASK;
	SSSHeader.Bytes |= (Pack10F(MeanFreePath.x) << 22) | (Pack10F(MeanFreePath.y) << 12) | (Pack10F(MeanFreePath.z) << 2);
}

float StrataSubSurfaceGetWrapOpacityFromAnisotropy(float PhaseAnisotropy)
{
	// Reinterpret the phase function anisotropy as 'opacity' value
	// * Forward/Backward phase function == Thin surface (i.e., opacity => 0)
	// * Isotropic phase function == Thick surface (i.e., opacity => 1)
	const float Opacity = 1.f - abs(PhaseAnisotropy);
	return Opacity;
}

void StrataSubSurfaceHeaderSetWrapOpacity(inout FStrataSubsurfaceHeader SSSHeader, float Opacity)
{
	SSSHeader.Bytes &= SSSHEADER_TYPE_MASK;
	SSSHeader.Bytes |= PackR8(Opacity) << 2;
}

void StrataSubSurfaceHeaderSetWrap(inout FStrataSubsurfaceHeader SSSHeader, float PhaseAnisotropy)
{
	const float Opacity = StrataSubSurfaceGetWrapOpacityFromAnisotropy(PhaseAnisotropy);
	StrataSubSurfaceHeaderSetWrapOpacity(SSSHeader, Opacity);
}

bool StrataSubSurfaceHeaderGetIsValid(in FStrataSubsurfaceHeader SSSHeader)
{
	return SSSHEADER_TYPE(SSSHeader) != SSS_TYPE_INVALID;
}

bool StrataSubSurfaceHeaderHasExtras(in FStrataSubsurfaceHeader SSSHeader)
{
	const uint SSSType = SSSHEADER_TYPE(SSSHeader);
	return SSSType == SSS_TYPE_DIFFUSION || SSSType == SSS_TYPE_DIFFUSION_PROFILE;
}

bool StrataSubSurfaceHeaderGetUseDiffusion(in FStrataSubsurfaceHeader SSSHeader)
{
	const uint SSSType = SSSHEADER_TYPE(SSSHeader);
	return SSSType == SSS_TYPE_DIFFUSION || SSSType == SSS_TYPE_DIFFUSION_PROFILE;
}

bool StrataSubSurfaceHeaderGetIsProfile(in FStrataSubsurfaceHeader SSSHeader)
{
	return SSSHEADER_TYPE(SSSHeader) == SSS_TYPE_DIFFUSION_PROFILE;
}

uint StrataSubSurfaceHeaderGetSSSType(in FStrataSubsurfaceHeader SSSHeader)
{
	return SSSHEADER_TYPE(SSSHeader);
}

uint StrataSubSurfaceHeaderGetProfileId(in FStrataSubsurfaceHeader SSSHeader)
{
	const uint SSSType = SSSHEADER_TYPE(SSSHeader);
	const uint ProfileId = (SSSType == SSS_TYPE_DIFFUSION_PROFILE) ? ((SSSHeader.Bytes >> 24) & 0xFF) : (SSSType == SSS_TYPE_DIFFUSION ? SSS_PROFILE_ID_PERPIXEL : SSS_PROFILE_ID_INVALID);
	return ProfileId;
}

float StrataSubSurfaceHeaderGetProfileRadiusScale(in FStrataSubsurfaceHeader SSSHeader)
{
	const bool bIsValidAndProfile = SSSHEADER_TYPE(SSSHeader) == SSS_TYPE_DIFFUSION_PROFILE;
	return bIsValidAndProfile ? UnpackR8(SSSHeader.Bytes >> 16) : 1.f;
}

float3 StrataSubSurfaceHeaderGetMFP(in FStrataSubsurfaceHeader SSSHeader)				// Only when !IsProfile
{
	return float3(
		Unpack10F(SSSHeader.Bytes >> 22),
		Unpack10F(SSSHeader.Bytes >> 12),
		Unpack10F(SSSHeader.Bytes >>  2));
}

float StrataSubSurfaceHeaderGetWrapOpacity(in FStrataSubsurfaceHeader SSSHeader)
{
	return SSSHEADER_TYPE(SSSHeader) == SSS_TYPE_WRAP ? UnpackR8(SSSHeader.Bytes >> 2) : 1.0f;
}

float StrataSubSurfaceHeaderGetOpacity(in FStrataSubsurfaceHeader SSSHeader)
{
	const uint SSSType = SSSHEADER_TYPE(SSSHeader);

	// Shadow 'Opacity' is based on legacy shading code
	// * SSS Wrap              -> StrataSubSurfaceHeaderGetWrapOpacity()
	// * SSS Diffusion         -> 1
	// * SSS Diffusion Profile -> StrataSubSurfaceHeaderGetProfileRadiusScale()
	float Opacity = 1.0f;
	Opacity = SSSType == SSS_TYPE_DIFFUSION_PROFILE ? StrataSubSurfaceHeaderGetProfileRadiusScale(SSSHeader) : Opacity;
	Opacity = SSSType == SSS_TYPE_WRAP ? StrataSubSurfaceHeaderGetWrapOpacity(SSSHeader) : Opacity;
	return Opacity;
}

// Legacy conversion function, which translated Strata sub-surface data into 'opacity' for shadow transmission purpose. 
// Note: When SSS data uses DFMP data, the conversion to opacity is ad-hoc/hacky
// STRATA_TODO: merge this function with StrataSubSurfaceHeaderGetOpacity()
float StrataGetOpacityFromSubSurface(FStrataSubsurfaceHeader SSSHeader)
{
	const uint SSSType = SSSHEADER_TYPE(SSSHeader);
	const float ProfileRadiusScale = StrataSubSurfaceHeaderGetProfileRadiusScale(SSSHeader);
	const float3 MFP = StrataSubSurfaceHeaderGetMFP(SSSHeader);
	const float WrapOpacity = StrataSubSurfaceHeaderGetWrapOpacity(SSSHeader);

	float Opacity = 1.0f;
	Opacity = SSSType == SSS_TYPE_DIFFUSION ? saturate(1.0f - max3(MFP.x, MFP.y, MFP.z)) : Opacity;
	Opacity = SSSType == SSS_TYPE_DIFFUSION_PROFILE ? ProfileRadiusScale : Opacity;
	Opacity = SSSType == SSS_TYPE_WRAP ? WrapOpacity : Opacity;
	return Opacity;
}

// Stored in second slice as UINT
// This is cold data, rarely accessed
struct FStrataSubsurfaceExtras
{
//	float3 BaseColor; // alpha unused
	uint Bytes;
};
void StrataSubsurfaceExtrasSetBaseColor(inout FStrataSubsurfaceExtras SSSExtras, float3 BaseColor)
{
	SSSExtras.Bytes = PackColorLinearToGamma2AlphaLinear(float4(BaseColor, 0.0f));
}
float3 StrataSubsurfaceExtrasGetBaseColor(in FStrataSubsurfaceExtras SSSExtras)
{
	return UnpackColorGamma2ToLinearAlphaLinear(SSSExtras.Bytes).rgb;
}

struct FStrataSubsurfaceData
{
	FStrataSubsurfaceHeader Header;
	FStrataSubsurfaceExtras Extras;
};
FStrataSubsurfaceHeader StrataLoadSubsurfaceHeader(Texture2DArray<uint> StrataBuffer, uint FirstSliceStoringStrataSSSData, uint2 PixelPos)
{
	FStrataSubsurfaceHeader Header;
	Header.Bytes = StrataBuffer.Load(uint4(PixelPos, FirstSliceStoringStrataSSSData + 0, 0));
	return Header;
}
FStrataSubsurfaceExtras StrataLoadSubsurfaceExtras(Texture2DArray<uint> StrataBuffer, uint FirstSliceStoringStrataSSSData, uint2 PixelPos)
{
	FStrataSubsurfaceExtras Extras;
	Extras.Bytes = StrataBuffer.Load(uint4(PixelPos, FirstSliceStoringStrataSSSData + 1, 0));
	return Extras;
}
FStrataSubsurfaceData StrataLoadSubsurfaceData(Texture2DArray<uint> StrataBuffer, uint FirstSliceStoringStrataSSSData, uint2 PixelPos)
{
	FStrataSubsurfaceData SSSData;
	SSSData.Header = StrataLoadSubsurfaceHeader(StrataBuffer, FirstSliceStoringStrataSSSData, PixelPos);
	SSSData.Extras = StrataLoadSubsurfaceExtras(StrataBuffer, FirstSliceStoringStrataSSSData, PixelPos);
	return SSSData;
}

void StrataStoreSubsurfaceHeader(RWTexture2DArray<uint> StrataBuffer, uint FirstSliceStoringStrataSSSData, uint2 PixelPos, uint HeaderBytes)
{
	StrataBuffer[uint3(PixelPos, FirstSliceStoringStrataSSSData + 0)] = HeaderBytes;
}
void StrataStoreSubsurfaceExtras(RWTexture2DArray<uint> StrataBuffer, uint FirstSliceStoringStrataSSSData, uint2 PixelPos, uint ExtraBytes)
{
	StrataBuffer[uint3(PixelPos, FirstSliceStoringStrataSSSData + 1)] = ExtraBytes;
}

uint StrataSubsurfaceProfileIdTo8bits(float In)
{
	// Similar encoding than ExtractSubsurfaceProfileInt. Valid profile ID start at 1.
	return uint(In * 255.0f + 0.5f);
}

///////////////////////////////////////////////////////////////////////////////
// Fuzz

uint PackFuzz(half3 InColor, half InAmount, half InRoughness, half InDither)
{
	return PackR7G7B6Gamma2(InColor, InDither) | (PackR6(InAmount, InDither) << 20) | (PackR6(InRoughness, InDither) << 26);
}

void UnpackFuzz(uint In, inout half3 OutColor, inout half OutAmount, inout half OutRoughness)
{
	OutColor     = UnpackR7G7B6Gamma2(In & 0xFFFFF);
	OutAmount    = UnpackR6((In >> 20) & 0x3F);
	OutRoughness = UnpackR6((In >> 26) & 0x3F);
}

///////////////////////////////////////////////////////////////////////////////
// Misc

// Return true if a BSDF has a custom area light integrator
bool StrataHasAreaLightIntegrator(in FStrataBSDF BSDF)
{
	const uint BSDFType = BSDF_GETTYPE(BSDF);
	return BSDFType == STRATA_BSDF_TYPE_SLAB;
}

bool StrataIsBSDFVisible(in FStrataBSDF BSDF)
{
	return any(BSDF.LuminanceWeightV > 0.0f);
}

bool StrataHasGreyScaleWeight(in float3 Weight)
{
	return Weight.x == Weight.y && Weight.y == Weight.z;
}

void StrataComputeHazeRoughnessAndWeight(
	float Roughness0,
	float Haziness,
	inout float Roughness1,
	inout float MixLobe)
{	
	// Fade out Haziness as the roughness reaches 0.5f, as otherwise it create
	//       27 |\
	// Extent   | \
	//          |  \
	//        3 |    ----
	//          0  0.25  1
	//           Rougness

	// Lerp factor for adapting haziness parameters
	const float S2 = saturate(2 * Roughness0);
	const float S4 = saturate(4 * Roughness0);

	// For low roughness, the haze extent is larger, and the core highlight is lower. 
	// This allows to emphase the haze effect at low roughness, and fade out haze as roughness increase.
	const float HazeExtent = lerp(27.0f, 3.0f, S4);
	const float HazeCore   = lerp(0.01f, 0.5f, S2);

	// Reference "A Composite BRDF Model for Hazy Gloss"
	 
	// Compute wide roughness
	float alpha_n = Square(Roughness0); 
	float lambda_h = HazeExtent;
	const float alpha_w = alpha_n * (1 + lambda_h); // Eq.8
	Roughness1 = sqrtFast(alpha_w);

	// Compute mix weights
	const float beta_h = Haziness;
	const float r_c = HazeCore;
	const float w = alpha_w;

	const float p = 1.0 / Square(1 + lambda_h); // Table 2, GGX
	const float b = 2 * (r_c * (1 - w) + w * p);
	const float D = Square(b) - 4 * (b - 1) * r_c;
	const float u = (b - sqrtFast(D)) / (2 * b - 2); // Eq. 12, 13, 14
	const float u2 = u * u;
	const float w2 = 2 * w;
	const float k_h = ((u - u2) * w2 * beta_h) / (Square(1 - u) + (u - u2) * w2 + u2); // Eq. 15
	const float r = r_c + (1 - p) * k_h; // Eq. 5
	MixLobe = k_h / r; // Eq. 4
}

float StrataComputeHazeRoughness(float Roughness0)				{ float Roughness1=0; float MixLobe=0; StrataComputeHazeRoughnessAndWeight(Roughness0, 1.0f,     Roughness1, MixLobe);	return Roughness1; }
float StrataComputeHazeWeight(float Roughness0, float Haziness)	{ float Roughness1=0; float MixLobe=0; StrataComputeHazeRoughnessAndWeight(Roughness0, Haziness, Roughness1, MixLobe);	return MixLobe; }

///////////////////////////////////////////////////////////////////////////////
// Material & BSDF description

struct FStrataOperator
{
	// STRATA_TODO: pack in a single uint
	int ParentIndex;
	uint LayerDepth;
	uint MaxDistanceFromLeaves;							// The largest depth distance from any tree leaf representing a BSDF
	uint Type;											// The type of operator
	int	LeftIndex;
	int RightIndex;
	float Weight;

	// Coverage / Transmittance

	float  Coverage;									// The summarised coverage of all the matter (from the sub tree) represented by that operator
	float3 ThroughputAlongV;							// This is the throughput of the matter represented by this operator (matter and fuzz transmittance). If coverage is 0.25, then 25% of the light will be affected by the transmittance and 75% of light won't be.
	float3 TransmittanceAlongN;							// This is the transmittance of the matter represented by this operator. If coverage is 0.25, then 25% of the light will be affected by the transmittance and 75% of light won't be.

	float  VerticalTop_Coverage;						// Only used by vertical layering operators. It represent the coverage of all the matter of the top layer (from the left sub tree).
	float3 VerticalTop_ThroughputAlongV;				// Only used by vertical layering operators. It represent the transmittance of matter of the top layer (from the left sub tree, and towards the view).
	float3 VerticalTop_TransmittanceAlongN;				// Only used by vertical layering operators. It represent the transmittance of matter of the top layer (from the left sub tree, and along the normal of the surface).

	float  VerticalBot_Coverage;						// Analoguous to VerticalTop_ data but for the bottom layer.
	float3 VerticalBot_ThroughputAlongV;				// Idem.
	float3 VerticalBot_TransmittanceAlongN;				// Idem.

	// Rough refraction
	float3				 TopDownRefractionWorldNormal;	// The normal used for the single refracted direction
	FStrataLobeStatistic TopDownRefractionLobeStat;		// The lobe used for the scene rough refraction from front to back, e.g. used for translucent rough refraciton
	FStrataLobeStatistic BottomUpRefractionLobeStat;	// The lobe used for the scene rough refraction from back to front, e.g. used for opaque rough refraction of incoming light within sub layers

	// Opaque rough refraction
	float				 OpaqueRoughRefractCoverage;	// The coverage of the top layer to account for in order to fade out the influence on the blur.
	float				 OpaqueRoughRefractThicknessCm;	// The thickness of stack material from the top layer to the bottom layer.
	float				 OpaqueRoughRefractTopRoughness;// The roughness of the top layer. This is enough because we currently assume all the bottom layers have a constant IOR, so eta will after that always be 1 and no refraction will occur after.

	// Translucent refractions
	FStrataLobeStatistic VerticalTop_TopDownRefractionLobeStat;	// Only used by vertical layering operators. It represent the lobe statistics of the top layer at its interface.
	FStrataLobeStatistic VerticalTop_BottomUpRefractionLobeStat;
};

FStrataOperator GetInitialisedStrataOperator()
{
	FStrataOperator StrataOp = (FStrataOperator)0;
	StrataOp.ParentIndex = -1;
	StrataOp.LeftIndex = -1;
	StrataOp.RightIndex = -1;
	return StrataOp;
}

// Representes a strata material as BSDFs organised in a tree repreesnting its topology 
struct FStrataTree
{
	int BSDFCount;
	uint OperatorCount;

	FStrataBSDF BSDFs[STRATA_MAX_BSDF_COUNT];
	FStrataOperator Operators[STRATA_MAX_OPERATOR_COUNT]; // STRATA_TODO assert when too many ops on the compiler side. Shoud already be done for BSDF count.
};

FStrataTree GetInitialisedStrataTree()
{
	FStrataTree Out;
	Out.BSDFCount = 0;
	Out.OperatorCount = 0;
	return Out;
}

void StrataPackOutStrataTree(
	RWTexture2DArray<uint> ExtraMaterialDataUAV,
	in uint RootOperatorIndex,
	in FStrataTree StrataTree,
	in int SliceStoringDebugStrataTreeData)
{
#define WRITE_INT(Data) ExtraMaterialDataUAV[uint3(OutCoord++, OutCoordY, SliceStoringDebugStrataTreeData)] = asuint(Data);
#define WRITE_UINT(Data) ExtraMaterialDataUAV[uint3(OutCoord++, OutCoordY, SliceStoringDebugStrataTreeData)] = Data;
#define WRITE_FLOAT(Data) ExtraMaterialDataUAV[uint3(OutCoord++, OutCoordY, SliceStoringDebugStrataTreeData)] = asuint(Data);
#define WRITE_FLOAT3(Data) WRITE_FLOAT(Data.x);WRITE_FLOAT(Data.y);WRITE_FLOAT(Data.z);
#define WRITE_FLOAT4(Data) WRITE_FLOAT(Data.x);WRITE_FLOAT(Data.y);WRITE_FLOAT(Data.z);;WRITE_FLOAT(Data.w);

	// Write out header
	int OutCoord = 0;
	int OutCoordY = 0;

	WRITE_UINT(STRATA_USES_CONVERSION_FROM_LEGACY ? 1 : 0);
	WRITE_UINT(StrataTree.BSDFCount);
	WRITE_UINT(StrataTree.OperatorCount);
	WRITE_UINT(RootOperatorIndex);

	// Write out BSDFs
	OutCoord = 0;
	OutCoordY = 1;

#if STRATA_COMPILER == 1
	LOOP
#else
	StrataTree.BSDFCount = min(StrataTree.BSDFCount, STRATA_MAX_BSDF_COUNT);
	STRATA_UNROLL_N(STRATA_MAX_BSDF_COUNT)
#endif
	for(int i=0; i< StrataTree.BSDFCount; ++i)
	{
		WRITE_UINT(StrataTree.BSDFs[i].State);
		WRITE_INT(StrataTree.BSDFs[i].OperatorIndex);
		WRITE_FLOAT3(StrataTree.BSDFs[i].LuminanceWeightV);
		WRITE_FLOAT(StrataTree.BSDFs[i].CoverageAboveAlongN);
		WRITE_FLOAT3(StrataTree.BSDFs[i].TransmittanceAboveAlongN);
		WRITE_UINT(StrataTree.BSDFs[i].bIsBottom);
		WRITE_UINT(StrataTree.BSDFs[i].bIsTop);

	#if STRATA_INLINE_SHADING
		WRITE_FLOAT(StrataTree.BSDFs[i].Coverage);

		WRITE_FLOAT3(StrataTree.BSDFs[i].Emissive);
		WRITE_FLOAT(StrataTree.BSDFs[i].ThicknessCm);
		WRITE_FLOAT3(StrataTree.BSDFs[i].TmpMFP);

		WRITE_FLOAT(StrataTree.BSDFs[i].TopLayerDataWeight);
	#endif

		// Skipping specific single layer water data

		WRITE_FLOAT4(StrataTree.BSDFs[i].VGPRs[0]);
		WRITE_FLOAT4(StrataTree.BSDFs[i].VGPRs[1]);
		WRITE_FLOAT4(StrataTree.BSDFs[i].VGPRs[2]);
		WRITE_FLOAT4(StrataTree.BSDFs[i].VGPRs[3]);
		WRITE_FLOAT4(StrataTree.BSDFs[i].VGPRs[4]);
	}

	// Write out operators
	OutCoord = 0;
	OutCoordY = 2;

#if STRATA_COMPILER == 1
	LOOP
#else
	StrataTree.OperatorCount = min(StrataTree.OperatorCount, STRATA_MAX_OPERATOR_COUNT);
	STRATA_UNROLL_N(STRATA_MAX_OPERATOR_COUNT)
#endif
	for (uint j = 0; j < StrataTree.OperatorCount; ++j)
	{
		WRITE_INT(StrataTree.Operators[j].ParentIndex);
		WRITE_UINT(StrataTree.Operators[j].LayerDepth);
		WRITE_UINT(StrataTree.Operators[j].MaxDistanceFromLeaves);
		WRITE_UINT(StrataTree.Operators[j].Type);
		WRITE_INT(StrataTree.Operators[j].LeftIndex);
		WRITE_INT(StrataTree.Operators[j].RightIndex);
		WRITE_FLOAT(StrataTree.Operators[j].Weight);
		WRITE_FLOAT(StrataTree.Operators[j].Coverage);
		// Skip the rest for now
	}

#undef WRITE_UINT
#undef WRITE_FLOAT
#undef WRITE_FLOAT3
#undef WRITE_FLOAT4
}

struct FStrataTreeHeader
{
	int ConvertedFromLegacy;
	int BSDFCount;
	int OperatorCount;
	uint RootOperatorIndex;
};

#define READ_INT(Data) Data = asint(StrataMaterialData[uint3(OutCoord++, OutCoordY, SliceStoringDebugStrataTreeData)]);
#define READ_UINT(Data) Data = StrataMaterialData[uint3(OutCoord++, OutCoordY, SliceStoringDebugStrataTreeData)];
#define READ_FLOAT(Data) Data = asfloat(StrataMaterialData[uint3(OutCoord++, OutCoordY, SliceStoringDebugStrataTreeData)]);
#define READ_FLOAT3(Data) READ_FLOAT(Data.x);READ_FLOAT(Data.y);READ_FLOAT(Data.z);
#define READ_FLOAT4(Data) READ_FLOAT(Data.x);READ_FLOAT(Data.y);READ_FLOAT(Data.z);READ_FLOAT(Data.w);

void StrataUnpackInStrataTreeHeader(
	Texture2DArray<uint> StrataMaterialData,
	inout FStrataTreeHeader StrataTreeHeader,
	in int SliceStoringDebugStrataTreeData)
{
	StrataTreeHeader = (FStrataTreeHeader)0;

	int OutCoord = 0;
	int OutCoordY= 0;

	READ_UINT(StrataTreeHeader.ConvertedFromLegacy);
	READ_UINT(StrataTreeHeader.BSDFCount);
	READ_UINT(StrataTreeHeader.OperatorCount);
	READ_UINT(StrataTreeHeader.RootOperatorIndex);
}

FStrataBSDF StrataUnpackInStrataTreeBSDF(
	uint BSDFIndex,
	Texture2DArray<uint> StrataMaterialData,
	inout FStrataTreeHeader StrataTreeHeader,
	in int SliceStoringDebugStrataTreeData)
{
	int OutCoord = BSDFIndex * (STRATA_INLINE_SHADING ? 42 : 33);		// Skip BSDFs
	int OutCoordY= 1;

	FStrataBSDF BSDF = (FStrataBSDF)0;

	READ_UINT(BSDF.State);
	READ_INT(BSDF.OperatorIndex);
	READ_FLOAT3(BSDF.LuminanceWeightV);
	READ_FLOAT(BSDF.CoverageAboveAlongN);
	READ_FLOAT3(BSDF.TransmittanceAboveAlongN);
	READ_UINT(BSDF.bIsBottom);
	READ_UINT(BSDF.bIsTop);

#if STRATA_INLINE_SHADING
	READ_FLOAT(BSDF.Coverage);

	READ_FLOAT3(BSDF.Emissive);
	READ_FLOAT(BSDF.ThicknessCm);
	READ_FLOAT3(BSDF.TmpMFP);

	READ_FLOAT(BSDF.TopLayerDataWeight);
#endif

	// Skipping specific single layer water data

	READ_FLOAT4(BSDF.VGPRs[0]);
	READ_FLOAT4(BSDF.VGPRs[1]);
	READ_FLOAT4(BSDF.VGPRs[2]);
	READ_FLOAT4(BSDF.VGPRs[3]);
	READ_FLOAT4(BSDF.VGPRs[4]);

	return BSDF;
}

FStrataOperator StrataUnpackInStrataTreeOperator(
	uint OperatorIndex,
	Texture2DArray<uint> StrataMaterialData,
	inout FStrataTreeHeader StrataTreeHeader,
	in int SliceStoringDebugStrataTreeData)
{
	int OutCoord = OperatorIndex * 8;	// Skip Operators
	int OutCoordY = 2;

	FStrataOperator Op = (FStrataOperator)0;

	READ_INT(Op.ParentIndex);
	READ_UINT(Op.LayerDepth);
	READ_UINT(Op.MaxDistanceFromLeaves);
	READ_UINT(Op.Type);
	READ_INT(Op.LeftIndex);
	READ_INT(Op.RightIndex);
	READ_FLOAT(Op.Weight);
	READ_FLOAT(Op.Coverage);

	return Op;
}

#undef READ_INT
#undef READ_UINT
#undef READ_FLOAT
#undef READ_FLOAT3
#undef READ_FLOAT4


struct FStrataData
{
	FStrataBSDF InlinedBSDF;// Used for parameter blending or special BSDF such as hair, cloud or water.

	int  OperatorIndex;		// Used as entry point ot the material graph with multiple BSDF and operators.

#if USE_DEVELOPMENT_SHADERS
	float3 PreviewColor;	// Used as preview in the material graph within the editor.
#endif

#if STRATA_LEGACY_PREMULT_ALPHA_OVERRIDE
	float PreMultipliedAlphaOverrideCoverage;
#endif
};

FStrataData GetInitialisedStrataData()
{
	FStrataData StrataData = (FStrataData)0;
#if STRATA_LEGACY_PREMULT_ALPHA_OVERRIDE
	StrataData.PreMultipliedAlphaOverrideCoverage = -1.0f;
#endif
	return StrataData;
}

struct FStrataPixelFootprint
{
	float PixelRadiusInWorldSpace;	// In cm
	float NormalCurvatureRoughness; // Surface curvature converted into roughness for AA purpose
};

FStrataPixelFootprint StrataGetPixelFootprint(float3 dPdx, float3 dPdy, float InNormalCurvatureRoughness)
{
	const float dX = lengthFast(dPdx);
	const float dY = lengthFast(dPdy);

	FStrataPixelFootprint Out;
	Out.PixelRadiusInWorldSpace = min(dX, dY) * 0.5f;
	Out.NormalCurvatureRoughness = InNormalCurvatureRoughness;
	return Out;
}

FStrataPixelFootprint StrataGetPixelFootprint(float3 InWorldPosition, float InNormalCurvatureRoughness)
{
#if CLOUD_LAYER_PIXEL_SHADER==1
	// Clouds materials feature dynamic loops and thus cannot support derivatives.
	return (FStrataPixelFootprint)0;
#else
	const float3 dPdx = ddx(InWorldPosition);
	const float3 dPdy = ddy(InWorldPosition);
	return StrataGetPixelFootprint(dPdx, dPdy, InNormalCurvatureRoughness);
#endif
}

///////////////////////////////////////////////////////////////////////////////
// BSDF

FStrataData GetStrataSlabBSDF(
	FStrataPixelFootprint InPixelFootprint,
	float3 DiffuseAlbedo, float3 F0, float3 F90,
	float Roughness, float Anisotropy,
	float SSSProfileID, float3 SSSMFP, float SSSMFPScale, float SSSPhaseAnisotropy, float UseSSSDiffusion,
	float3 Emissive, 
	float SecondRoughness, float SecondRoughnessWeight, float SecondRoughnessAsSimpleClearCoat,
	float FuzzAmount, float3 FuzzColor, float FuzzRoughness,
	float ThicknessCm,
	bool bIsThinSurface,
	uint SharedLocalBasisIndex, inout uint SharedLocalBasisTypes)
{
	// Curvature-based roughness for geometric AA
	Roughness		= max(Roughness, InPixelFootprint.NormalCurvatureRoughness);
	SecondRoughness = max(SecondRoughness, InPixelFootprint.NormalCurvatureRoughness);
	FuzzRoughness	= max(FuzzRoughness, InPixelFootprint.NormalCurvatureRoughness);
	

	FStrataData StrataData = GetInitialisedStrataData();

	SSSMFPScale = saturate(SSSMFPScale);
	const bool bSSSProfilePlugged = SSSProfileID > 0.0f;
	const bool bMFPPlugged = any(SSSMFP > 0);
	bool bIsThin = bMFPPlugged && bIsThinSurface; // Enable thin only if MFP is plugged, as otherwise there will be no back-tramission
	bool bHasSSSWrap = bMFPPlugged && !UseSSSDiffusion;
	bool bHasSSSProfile = !bIsThin && bSSSProfilePlugged && SSSMFPScale > 0.f;	// When no profile is provide, we use Burley. STRATA_TODO we should clarify as burley is also an option of the profile.
	bool bHasSSS = bMFPPlugged || bHasSSSProfile || bHasSSSWrap;

	FHaziness Haziness = InitialiseHaziness();

	// Derive roughness and haziness from profile data
	if (!STRATA_FASTPATH && bSSSProfilePlugged)
	{
		// Average roughness for dual specular.
		const uint SubsurfaceProfileUInt = StrataSubsurfaceProfileIdTo8bits(SSSProfileID);

		GetSubsurfaceProfileDualSpecular(SubsurfaceProfileUInt, Roughness, SSSMFPScale, Roughness, Haziness.Roughness, Haziness.Weight);

		SSSMFP = GetSubsurfaceProfileMFPInCm(SubsurfaceProfileUInt).xyz * SSSMFPScale;
	}
	else
	{
		Haziness.Roughness = SecondRoughness;
		Haziness.Weight = SecondRoughnessWeight;
		Haziness.bSimpleClearCoat = SecondRoughnessAsSimpleClearCoat > 0.0f;
	}

	#if STRATA_DISABLE_SSS_DIFFUSION_BASED_ON_PIXEL_FOOTPRINT
	// If MFP is smaller than the pixel's footprint, remove SSS attributes
	// The scaling factor 'SSSFootprintScale' is based on empiric tests
	const float SSSFootprintScale = 3.f;
	if (!STRATA_FASTPATH && all(SSSMFP * SSSFootprintScale < InPixelFootprint.PixelRadiusInWorldSpace) && !bHasSSSWrap)
	{
		bHasSSSProfile = false;
		bHasSSS = false;

		// MFPPlugged is not cleared as it is used for thin surface and thin volumetric
		// bMFPPlugged = false;
	}
	#endif

	// Convert MFP be expressed relative to simple volume thickness
	if (!STRATA_FASTPATH && bHasSSSWrap)
	{
		SSSMFP = RescaleMFPToComputationSpace(SSSMFP, ThicknessCm, STRATA_SIMPLEVOLUME_THICKNESS_CM);
		ThicknessCm = STRATA_SIMPLEVOLUME_THICKNESS_CM;
	}

	const uint bHasHaziness = ((Haziness.Roughness != Roughness  && Haziness.Weight > 0.0f) || Haziness.bSimpleClearCoat) ? 1 : 0;
	const uint bHasAnisotropy = Anisotropy != 0 ? 1 : 0;
	const uint bHasFuzz = FuzzAmount > 0.0f ? 1 : 0;
	if (!STRATA_FASTPATH && bHasAnisotropy)
	{
		StrataRequestSharedLocalBasisTangent(SharedLocalBasisTypes, SharedLocalBasisIndex);
	}

	// About the thin, a.k.a. two sided lighting, model:
	// 	- Thin lighting model is used when MFP is plugged and the surface is flagged as 'is-thin-surface'
	//  - It cannot work with a SSS Profile because the profile id is stored in the register used for the MFP (e.g. see SLAB_SSSPROFILEID).
	// 	- Thin lighting model force disabled the SSSProfile.
	//  - It can work with the Strata SSS because the MFP is shared in this case between both.
	//  - We also only enabled thin lighting is the MFP input pin is plugged in.
	//  - It will only be ran for the bottom layer only. Otherwise, the simple volume should be used. As such, Two-sided lighting can also be disabled later if part of the bottom layer.

	BSDF_SETTYPE			(StrataData.InlinedBSDF,		STRATA_BSDF_TYPE_SLAB);
	BSDF_SETSHAREDLOCALBASISID(StrataData.InlinedBSDF,		SharedLocalBasisIndex);
	BSDF_SETEMISSIVE		(StrataData.InlinedBSDF,		Emissive);

#if !STRATA_FASTPATH
	BSDF_SETSSSTYPE			(StrataData.InlinedBSDF,		bHasSSS ? (bHasSSSWrap ? SSS_TYPE_WRAP : (bHasSSSProfile ? SSS_TYPE_DIFFUSION_PROFILE : SSS_TYPE_DIFFUSION)) : SSS_TYPE_INVALID);
	BSDF_SETHASANISOTROPY	(StrataData.InlinedBSDF,		bHasAnisotropy);
	BSDF_SETISTOPLAYER		(StrataData.InlinedBSDF,		0);
	BSDF_SETISTHIN			(StrataData.InlinedBSDF,		bIsThin ? 1 : 0);
	BSDF_SETHASMFP			(StrataData.InlinedBSDF,		bMFPPlugged ? 1 : 0);
	BSDF_SETHASHAZINESS		(StrataData.InlinedBSDF,		bHasHaziness);
	BSDF_SETHASFUZZ			(StrataData.InlinedBSDF,		bHasFuzz);
	BSDF_SETTHICKNESSCM		(StrataData.InlinedBSDF,		ThicknessCm);
#endif

#if !STRATA_FASTPATH
	// See how UMaterialExpressionStrataSlabBSDF node interface is changed
	BSDF_SETHASF90(StrataData.InlinedBSDF, any(F90 < 1.0f));
#endif

	SLAB_DIFFUSEALBEDO(StrataData.InlinedBSDF)			= DiffuseAlbedo;
	SLAB_F0(StrataData.InlinedBSDF)						= F0;
	SLAB_F90(StrataData.InlinedBSDF)					= F90;

	SLAB_ROUGHNESS			(StrataData.InlinedBSDF)		= Roughness;

#if !STRATA_FASTPATH
	SLAB_ANISOTROPY			(StrataData.InlinedBSDF)		= Anisotropy;

	SLAB_HAZINESS(StrataData.InlinedBSDF)					= PackHaziness(Haziness);

	if (bHasSSSProfile)
	{
		SLAB_SSSPROFILEID	(StrataData.InlinedBSDF)		= SSSProfileID;
		SLAB_SSSPROFILERADIUSSCALE(StrataData.InlinedBSDF)	= SSSMFPScale;
	}
	else
	{
		SLAB_SSSMFP	(StrataData.InlinedBSDF)				= SSSMFP * SSSMFPScale;
	}

	SLAB_SSSPHASEANISOTROPY(StrataData.InlinedBSDF)			= SSSPhaseAnisotropy;

	SLAB_FUZZ_AMOUNT		(StrataData.InlinedBSDF)		= FuzzAmount;
	SLAB_FUZZ_COLOR			(StrataData.InlinedBSDF)		= FuzzColor;
	SLAB_FUZZ_ROUGHNESS		(StrataData.InlinedBSDF)		= FuzzRoughness;

#endif // !STRATA_FASTPATH

#if STRATA_INLINE_SHADING
	// At this stage we do not know if this strata BSDF is going to be using simple volume lighting so always store the MFP on the side to not override SSSPROFILE data.
	StrataData.InlinedBSDF.TmpMFP = SSSMFP * SSSMFPScale;

	StrataData.InlinedBSDF.Coverage = 1.0f;
#endif

#if USE_DEVELOPMENT_SHADERS
	StrataData.PreviewColor = lerp(DiffuseAlbedo, F0, F0RGBToMetallic(F0));
#endif

	return StrataData;
}

FStrataData GetStrataVolumeFogCloudBSDF(float3 Albedo, float3 Extinction, float3 Emissive, float AmbientOcclusion)
{
	FStrataData StrataData = GetInitialisedStrataData();

	BSDF_SETTYPE					(StrataData.InlinedBSDF, STRATA_BSDF_TYPE_VOLUMETRICFOGCLOUD);
	BSDF_SETEMISSIVE				(StrataData.InlinedBSDF, Emissive);
	VOLUMETRICFOGCLOUD_ALBEDO		(StrataData.InlinedBSDF) = Albedo;
	VOLUMETRICFOGCLOUD_EXTINCTION	(StrataData.InlinedBSDF) = Extinction;
	VOLUMETRICFOGCLOUD_AO			(StrataData.InlinedBSDF) = AmbientOcclusion;

#if STRATA_INLINE_SHADING
	StrataData.InlinedBSDF.Coverage = 1.0f;
#endif

#if USE_DEVELOPMENT_SHADERS
	StrataData.PreviewColor			= Albedo;
#endif

	return StrataData;
}

FStrataData GetStrataUnlitBSDF(float3 Emissive, float3 TransmittanceColor)
{
	FStrataData StrataData = GetInitialisedStrataData();

	BSDF_SETTYPE					(StrataData.InlinedBSDF, STRATA_BSDF_TYPE_UNLIT);
	BSDF_SETEMISSIVE				(StrataData.InlinedBSDF, Emissive);
	UNLIT_TRANSMITTANCE				(StrataData.InlinedBSDF) = TransmittanceColor;

#if STRATA_INLINE_SHADING
	StrataData.InlinedBSDF.Coverage = 1.0f;
#endif

#if USE_DEVELOPMENT_SHADERS
	StrataData.PreviewColor			= Emissive;
#endif

	return StrataData;
}

FStrataData GetStrataHairBSDF(float3 BaseColor, float Scatter, float Specular, float Roughness, float Backlit, float3 Emissive, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();

	// Enable complex transmittance only for hair using cards/strands vertex factories
	#ifndef USE_HAIR_COMPLEX_TRANSMITTANCE
	  #if defined(HAIR_CARD_MESH_FACTORY) || defined(HAIR_STRAND_MESH_FACTORY)
		#define USE_HAIR_COMPLEX_TRANSMITTANCE 1
	  #else
		#define USE_HAIR_COMPLEX_TRANSMITTANCE 0
	  #endif
	#endif

	BSDF_SETTYPE					(StrataData.InlinedBSDF, STRATA_BSDF_TYPE_HAIR);
	BSDF_SETSHAREDLOCALBASISID		(StrataData.InlinedBSDF, SharedLocalBasisIndex);
	BSDF_SETEMISSIVE				(StrataData.InlinedBSDF, Emissive);
	HAIR_BASECOLOR					(StrataData.InlinedBSDF) = BaseColor;
	HAIR_SCATTER					(StrataData.InlinedBSDF) = Scatter;
	HAIR_ROUGHNESS					(StrataData.InlinedBSDF) = Roughness;
	HAIR_SPECULAR					(StrataData.InlinedBSDF) = Specular;
	HAIR_BACKLIT					(StrataData.InlinedBSDF) = Backlit;
	HAIR_COMPLEXTRANSMITTANCE		(StrataData.InlinedBSDF) = USE_HAIR_COMPLEX_TRANSMITTANCE;

#if STRATA_INLINE_SHADING
	StrataData.InlinedBSDF.Coverage = 1.0f;
#endif

#if USE_DEVELOPMENT_SHADERS
	StrataData.PreviewColor			= BaseColor;
#endif

	return StrataData;
}

FStrataData GetStrataEyeBSDF(float3 DiffuseAlbedo, float Roughness, float IrisMask, float IrisDistance, float3 IrisNormal, float3 IrisPlaneNormal, float SSSProfileId, float3 Emissive, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();
	BSDF_SETTYPE					(StrataData.InlinedBSDF, STRATA_BSDF_TYPE_EYE);
	BSDF_SETSHAREDLOCALBASISID		(StrataData.InlinedBSDF, SharedLocalBasisIndex);
	BSDF_SETEMISSIVE				(StrataData.InlinedBSDF, Emissive);
	EYE_DIFFUSEALBEDO				(StrataData.InlinedBSDF) = DiffuseAlbedo;
	EYE_ROUGHNESS					(StrataData.InlinedBSDF) = Roughness;
	EYE_IRISDISTANCE				(StrataData.InlinedBSDF) = IrisDistance;
	EYE_IRISMASK					(StrataData.InlinedBSDF) = IrisMask;
	EYE_IRISNORMAL					(StrataData.InlinedBSDF) = IrisNormal;
	EYE_IRISPLANENORMAL				(StrataData.InlinedBSDF) = IrisPlaneNormal;
	EYE_SSSPROFILEID				(StrataData.InlinedBSDF) = SSSProfileId;
	EYE_F0							(StrataData.InlinedBSDF) = STRATA_EYE_DEFAULT_F0;
	EYE_F90							(StrataData.InlinedBSDF) = 1.0f;

	const bool bHasSSS = SSSProfileId != 0;
	BSDF_SETSSSTYPE(StrataData.InlinedBSDF, bHasSSS ? SSS_TYPE_DIFFUSION_PROFILE : SSS_TYPE_INVALID);
#if STRATA_INLINE_SHADING
	StrataData.InlinedBSDF.Coverage = 1.0f;
#endif

#if USE_DEVELOPMENT_SHADERS
	StrataData.PreviewColor			= DiffuseAlbedo;
#endif

	return StrataData;
}

FStrataData GetStrataSingleLayerWaterBSDF(
	float3 BaseColor, float Metallic, float Specular, float Roughness, float3 Emissive, float TopMaterialOpacity,
	float3 WaterAlbedo, float3 WaterExtinction, float WaterPhaseG, float3 ColorScaleBehindWater, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();

	BSDF_SETTYPE					(StrataData.InlinedBSDF, STRATA_BSDF_TYPE_SINGLELAYERWATER);
	BSDF_SETSHAREDLOCALBASISID		(StrataData.InlinedBSDF, SharedLocalBasisIndex);
	BSDF_SETEMISSIVE				(StrataData.InlinedBSDF, Emissive);
	SLW_BASECOLOR					(StrataData.InlinedBSDF) = BaseColor;
	SLW_METALLIC					(StrataData.InlinedBSDF) = Metallic;
	SLW_SPECULAR					(StrataData.InlinedBSDF) = Specular;
	SLW_ROUGHNESS					(StrataData.InlinedBSDF) = Roughness;
	SLW_TOPMATERIALOPACITY			(StrataData.InlinedBSDF) = TopMaterialOpacity;
#if STRATA_INLINE_SINGLELAYERWATER
	SLW_WATERALBEDO					(StrataData.InlinedBSDF) = WaterAlbedo;
	SLW_WATEREXTINCTION				(StrataData.InlinedBSDF) = WaterExtinction;
	SLW_WATERPHASEG					(StrataData.InlinedBSDF) = WaterPhaseG;
	SLW_COLORSCALEBEHINDWATER		(StrataData.InlinedBSDF) = ColorScaleBehindWater;
#endif

#if STRATA_INLINE_SHADING
	StrataData.InlinedBSDF.Coverage = 1.0f;
#endif

#if USE_DEVELOPMENT_SHADERS
	StrataData.PreviewColor			= lerp(WaterAlbedo, BaseColor, TopMaterialOpacity);
#endif

	return StrataData;
}

///////////////////////////////////////////////////////////////////////////////
// Raytracing material buffer

// Data payload size is determined based on Strata.BytesPerPixel settings
#ifndef STRATA_RT_PAYLOAD_NUM_UINTS
#error STRATA_RT_PAYLOAD_NUM_UINTS needs to be defined
#endif

struct FStrataRaytracingPayload
{
	STRATA_TOP_LAYER_TYPE PackedTopLayerData;
	uint Data[STRATA_RT_PAYLOAD_NUM_UINTS];
};

///////////////////////////////////////////////////////////////////////////////
// Material buffer Addressing

struct FStrataAddressing
{
	uint  CurrentIndex;
	uint2 PixelCoords;
	uint  ReadBytes;
};

FStrataAddressing GetStrataPixelDataByteOffset(uint2 PixelPos, uint2 ViewBufferSize, uint StrataMaxBytesPerPixel)
{
	FStrataAddressing StrataAddressing = (FStrataAddressing)0;
	StrataAddressing.CurrentIndex = 0;
	StrataAddressing.PixelCoords = PixelPos;
	StrataAddressing.ReadBytes = 0;
	return StrataAddressing;
}

///////////////////////////////////////////////////////////////////////////////
// Material buffer Write

// Strata Rendertarget / UAV setup
// RT0: Color
// [insert here potential velocity rendertarget and prec shadow]
// RT2: Strata uint
// RT3: Strata uint
// RT4: Top normal
//
// UAV SSS data written out if needed
// UAV if strata data overrun the MRT output size

struct FRWStrataMaterialContainerStruct
{
	uint MaterialRenderTargets[STRATA_BASE_PASS_MRT_OUTPUT_COUNT];
//	RWTexture2DArray<uint> ExtraMaterialDataUAV; // If this is used, we cannot run shaders on debug...
};

#if STRATA_MATERIALCONTAINER_IS_VIEWRESOURCE

#define FRWStrataMaterialContainer	FRWStrataMaterialContainerStruct
FRWStrataMaterialContainer InitialiseRWStrataMaterialContainer(RWTexture2DArray<uint> ExtraMaterialDataUAV)
{
	FRWStrataMaterialContainer Out;
	UNROLL
	for (int i = 0; i < STRATA_BASE_PASS_MRT_OUTPUT_COUNT; ++i)
	{
		Out.MaterialRenderTargets[i] = 0;
	}
//	Out.ExtraMaterialDataUAV = ExtraMaterialDataUAV;
	return Out;
}

void StrataStoreUint1(inout FRWStrataMaterialContainer StrataBuffer, RWTexture2DArray<uint> ExtraMaterialDataUAV, inout FStrataAddressing StrataAddressing, uint Data)
{
  #if !COMPILER_SWITCH
	// We heavily rely on the compiler to optimize out the if code
	if (StrataAddressing.CurrentIndex < STRATA_BASE_PASS_MRT_OUTPUT_COUNT)
	{
		StrataBuffer.MaterialRenderTargets[0] = StrataAddressing.CurrentIndex == 0 ? Data : StrataBuffer.MaterialRenderTargets[0];
		StrataBuffer.MaterialRenderTargets[1] = StrataAddressing.CurrentIndex == 1 ? Data : StrataBuffer.MaterialRenderTargets[1];
		StrataBuffer.MaterialRenderTargets[2] = StrataAddressing.CurrentIndex == 2 ? Data : StrataBuffer.MaterialRenderTargets[2];
		#if STRATA_BASE_PASS_MRT_OUTPUT_COUNT != 3
		#error Strata STRATA_BASE_PASS_MRT_OUTPUT_COUNT has been update but not StrataStore function
		#endif
	}
	else
	{
		ExtraMaterialDataUAV[uint3(StrataAddressing.PixelCoords, StrataAddressing.CurrentIndex - STRATA_BASE_PASS_MRT_OUTPUT_COUNT)] = Data;
	}
	StrataAddressing.CurrentIndex++;
  #endif // !COMPILER_SWITCH
}

#define STRATA_STORE_UINT1(x)	StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, x)

#else // STRATA_MATERIALCONTAINER_IS_VIEWRESOURCE

#define FRWStrataMaterialContainer FStrataRaytracingPayload

FRWStrataMaterialContainer InitialiseRWStrataMaterialContainer()
{
	FRWStrataMaterialContainer Out;
	UNROLL
	for (int i = 0; i < STRATA_BASE_PASS_MRT_OUTPUT_COUNT; ++i)
	{
		Out.Data[i] = 0;
	}
	Out.PackedTopLayerData = 0;
	return Out;
}

void StrataStoreUint1(inout FRWStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, uint Data)
{
	BRANCH
	if (StrataAddressing.CurrentIndex < STRATA_RT_PAYLOAD_NUM_UINTS)
	{
		StrataBuffer.Data[StrataAddressing.CurrentIndex] = Data;
		StrataAddressing.CurrentIndex++;
	}
}

#define STRATA_STORE_UINT1(x) StrataStoreUint1(StrataBuffer, StrataAddressing, x)

#endif // STRATA_MATERIALCONTAINER_IS_VIEWRESOURCE

void FinalizeWrites(inout FRWStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing)
{
	// NOP
}

///////////////////////////////////////////////////////////////////////////////
// Material buffer read

#ifndef STRATA_MATERIALCONTAINER_IS_WRITABLE 
#define STRATA_MATERIALCONTAINER_IS_WRITABLE 0
#endif

#if STRATA_MATERIALCONTAINER_IS_VIEWRESOURCE

#if STRATA_MATERIALCONTAINER_IS_WRITABLE
#define FStrataMaterialContainer RWTexture2DArray<uint>
#else
#define FStrataMaterialContainer Texture2DArray<uint>
#endif

uint StrataLoadUint1(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing)
{
	uint Data = 0;
  #if !COMPILER_SWITCH
	#if STRATA_MATERIALCONTAINER_IS_WRITABLE
	Data = StrataBuffer[uint3(StrataAddressing.PixelCoords, StrataAddressing.CurrentIndex)];
	#else
	const uint MipLevel = 0;
	Data = StrataBuffer.mips[MipLevel][uint3(StrataAddressing.PixelCoords, StrataAddressing.CurrentIndex)];
	#endif
	StrataAddressing.CurrentIndex++;
	StrataAddressing.ReadBytes += 4;
  #endif
	return Data;
}

uint StrataLoadUint1AtIndexOffset(in FStrataMaterialContainer StrataBuffer, in FStrataAddressing StrataAddressing, uint IndexOffset)
{
	uint Data = 0;
  #if !COMPILER_SWITCH
	#if STRATA_MATERIALCONTAINER_IS_WRITABLE
	Data = StrataBuffer[uint3(StrataAddressing.PixelCoords, IndexOffset)];
	#else
	const uint MipLevel = 0;
	Data = StrataBuffer.mips[MipLevel][uint3(StrataAddressing.PixelCoords, IndexOffset)];
	#endif
  #endif
	return Data;
}

// FStrataTopLayerDataContainer can be a uint or a uint2 resource, following STRATA_TOP_LAYER_TYPE according to r.GBufferFormat.
// However, we do not change the type of the resource:
//    - Leverage the hardware fetch unit filtering what can be loaded/stored according to the actual resource format.
//    - We also filter the read data from StrataLoadTopLayerData 
#if STRATA_MATERIALCONTAINER_IS_WRITABLE
#define FStrataTopLayerDataContainer RWTexture2D<uint2>
#else
#define FStrataTopLayerDataContainer Texture2D<uint2>
#endif

STRATA_TOP_LAYER_TYPE StrataLoadTopLayerData(FStrataTopLayerDataContainer InTopLayerContainer, inout FStrataAddressing StrataAddressing)
{
	// Top layer container is always uint2 so we cast to XXX to avoid warnings.
	#if STRATA_MATERIALCONTAINER_IS_WRITABLE
	return (STRATA_TOP_LAYER_TYPE)InTopLayerContainer[StrataAddressing.PixelCoords];
	#else
	return (STRATA_TOP_LAYER_TYPE)InTopLayerContainer.Load(uint3(StrataAddressing.PixelCoords, 0));
	#endif
}

#else // STRATA_MATERIALCONTAINER_IS_VIEWRESOURCE

#define FStrataMaterialContainer FStrataRaytracingPayload

uint StrataLoadUint1(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing)
{
	BRANCH
	if (StrataAddressing.CurrentIndex < STRATA_RT_PAYLOAD_NUM_UINTS)
	{
		uint Data = StrataBuffer.Data[StrataAddressing.CurrentIndex];
		StrataAddressing.CurrentIndex++;
		StrataAddressing.ReadBytes += 4;
		return Data;
	}
	return 0;
}

uint StrataLoadUint1AtIndexOffset(in FStrataMaterialContainer StrataBuffer, in FStrataAddressing StrataAddressing, uint IndexOffset)
{
	return StrataBuffer.Data[IndexOffset];
}

#define FStrataTopLayerDataContainer FStrataRaytracingPayload

STRATA_TOP_LAYER_TYPE StrataLoadTopLayerData(FStrataTopLayerDataContainer Container, inout FStrataAddressing StrataAddressing)
{
	return Container.PackedTopLayerData;
}

#endif // STRATA_MATERIALCONTAINER_IS_VIEWRESOURCE

///////////////////////////////////////////////////////////////////////////////
// Shared local bases

#define STRATA_BASIS_TYPE_NORMAL 0u
#define STRATA_BASIS_TYPE_TANGENT 1u
struct FSharedLocalBases
{
	uint Count;
	uint Types;
	float3 Normals[STRATA_MAX_SHAREDLOCALBASES_REGISTERS];	// once registered, normals are always world space
	float3 Tangents[STRATA_MAX_SHAREDLOCALBASES_REGISTERS];// idem for tangents
};

FSharedLocalBases StrataInitialiseSharedLocalBases()
{
	FSharedLocalBases SharedLocalBases = (FSharedLocalBases)0;
	return SharedLocalBases;
}

void StrataRequestSharedLocalBasisTangent(inout uint Types, uint Index)
{
	Types = Types | (STRATA_BASIS_TYPE_TANGENT << Index);
}

uint StrataGetSharedLocalBasisType(in uint Types, uint Index)
{
	return (Types >> Index) & 0x1 ? STRATA_BASIS_TYPE_TANGENT : STRATA_BASIS_TYPE_NORMAL;
}

///////////////////////////////////////////////////////////////////////////////
// Header

struct FStrataPixelHeader
{
	uint BSDFCount;

#if STRATA_INLINE_SHADING
	// All the shared local bases in VGPRS. This is only used in basepass and during forward rendering.
	FSharedLocalBases SharedLocalBases;
	// The strata material BSDF topology organised as a tree
	FStrataTree StrataTree;
	FStrataIrradianceAndOcclusion IrradianceAO;
#endif
#if STRATA_DEFERRED_SHADING
	FStrataMaterialContainer StrataBuffer;
	uint SharedLocalBasesIndexOffset;
	uint SharedLocalBasesTypes_PackedHeader; // Stores SharedLocalBasesTypes for non-simple material, and PackedHeader data for simple material
	STRATA_TOP_LAYER_TYPE PackedTopLayerData;
#endif

	uint State;
};

// Workaround for legacy shader compiler, claiming FStrataPixelHeader has uninitialized state when passed as a 'inout' parameter
void InternalSetMaterialMode(inout uint OutState, uint MaterialMode)						{ OutState = (OutState & ~HEADER_MASK_MATERIALMODE) | (MaterialMode & HEADER_MASK_MATERIALMODE); }
#define SetMaterialMode(InHeader, InMode)													InternalSetMaterialMode(InHeader.State, InMode)

// Material mode & BSDF type
uint GetMaterialMode(const FStrataPixelHeader In)											{ return (In.State & HEADER_MASK_MATERIALMODE); }
bool IsSimpleMaterial(const FStrataPixelHeader In)											{ return (In.State & HEADER_MASK_MATERIALMODE) == HEADER_MATERIALMODE_SLAB_SIMPLE || STRATA_FASTPATH; }
bool IsSingleMaterial(const FStrataPixelHeader In)											{ return (In.State & HEADER_MASK_MATERIALMODE) == HEADER_MATERIALMODE_SLAB_SINGLE || STRATA_SINGLEPATH; }
bool IsComplexMaterial(const FStrataPixelHeader In)											{ return (In.State & HEADER_MASK_MATERIALMODE) == HEADER_MATERIALMODE_SLAB_COMPLEX && !STRATA_FASTPATH && !STRATA_SINGLEPATH; }
bool IsSingleLayerWater(const FStrataPixelHeader In)										{ return (In.State & HEADER_MASK_MATERIALMODE) == HEADER_MATERIALMODE_SLWATER; }
bool IsHair(const FStrataPixelHeader In)													{ return (In.State & HEADER_MASK_MATERIALMODE) == HEADER_MATERIALMODE_HAIR; }
bool IsEye(const FStrataPixelHeader In)														{ return (In.State & HEADER_MASK_MATERIALMODE) == HEADER_MATERIALMODE_EYE; }
uint StrataGetBSDFType(const FStrataPixelHeader In)												
{ 
	switch (GetMaterialMode(In))
	{
	case HEADER_MATERIALMODE_SLAB_SIMPLE:
	case HEADER_MATERIALMODE_SLAB_SINGLE:
	case HEADER_MATERIALMODE_SLAB_COMPLEX:	return STRATA_BSDF_TYPE_SLAB;
	case HEADER_MATERIALMODE_SLWATER:		return STRATA_BSDF_TYPE_SINGLELAYERWATER;
	case HEADER_MATERIALMODE_HAIR:			return STRATA_BSDF_TYPE_HAIR;
	case HEADER_MATERIALMODE_EYE:			return STRATA_BSDF_TYPE_EYE;
	default:								return STRATA_BSDF_TYPE_SLAB;
	}
}

bool HasPrecShadowMask(const FStrataPixelHeader In)											{ return (In.State & HEADER_MASK_HASPRECSHADOWMASK) != 0; }
bool HasZeroPrecShadowMask(const FStrataPixelHeader In)										{ return (In.State & HEADER_MASK_ZEROPRECSHADOWMASK) != 0; }
bool DoesCastContactShadow(const FStrataPixelHeader In)										{ return (In.State & HEADER_MASK_CASTCONTACTSHADOW) != 0; }
bool IsStrataMaterial(const FStrataPixelHeader In)											{ return GetMaterialMode(In) != HEADER_MATERIALMODE_NONE;  }
bool HasSubsurface(const FStrataPixelHeader In)												{ return (In.State & HEADER_MASK_HASSUBSURFACE) != 0; }
bool HasDynamicIndirectShadowCasterRepresentation(const FStrataPixelHeader In)				{ return (In.State & HEADER_MASK_HASDYNINDIRECTSHADOWCASTER) != 0; }

void SetHasPrecShadowMask(inout FStrataPixelHeader Out, bool bIn)							{ Out.State |= (bIn ? HEADER_MASK_HASPRECSHADOWMASK : 0u); }
void SetZeroPrecShadowMask(inout FStrataPixelHeader Out, bool bIn)							{ Out.State |= (bIn ? HEADER_MASK_ZEROPRECSHADOWMASK : 0u); }
void SetCastContactShadow (inout FStrataPixelHeader Out, bool bIn)							{ Out.State |= (bIn ? HEADER_MASK_CASTCONTACTSHADOW : 0u); }
void SetDynamicIndirectShadowCasterRepresentation(inout FStrataPixelHeader Out, bool bIn)	{ Out.State |= (bIn ? HEADER_MASK_HASDYNINDIRECTSHADOWCASTER : 0u); }
void SetHasSubsurface(inout FStrataPixelHeader Out, bool bIn)								{ Out.State |= (bIn ? HEADER_MASK_HASSUBSURFACE : 0u); }

#if STRATA_DEFERRED_SHADING && STRATA_MATERIALCONTAINER_IS_VIEWRESOURCE
// Some compiler complains that FStrataPixelHeader is not completely initialised, Initialise with dummy resource seems to work when unused in code.
FStrataMaterialContainer DummyStrataBuffer;
#endif

FStrataPixelHeader InitialiseStrataPixelHeader()
{
	FStrataPixelHeader Out;
	Out.BSDFCount = 0;
#if STRATA_INLINE_SHADING
	Out.SharedLocalBases = (FSharedLocalBases)0;
	Out.StrataTree = GetInitialisedStrataTree();
	Out.IrradianceAO = InitIrradianceAndOcclusion();
#endif
#if STRATA_DEFERRED_SHADING
#if STRATA_MATERIALCONTAINER_IS_VIEWRESOURCE
	Out.StrataBuffer = DummyStrataBuffer;
#endif
	Out.SharedLocalBasesIndexOffset = 0;
	Out.SharedLocalBasesTypes_PackedHeader = 0;
	Out.PackedTopLayerData = 0;
#endif
	Out.State = 0;
	SetMaterialMode(Out, HEADER_MATERIALMODE_SLAB_SIMPLE); // Should be a NOP since SIMPLE=0. This is for non strata material or sky pixels to be considered as simple (so that (strata simple pixels) + (non-strata pixels) can build a simple tile).
	return Out;
}

float3x3 StrataGetBSDFSharedBasis_InlineShading(in FStrataPixelHeader StrataPixelHeader, in FStrataBSDF BSDF, in FStrataAddressing StrataAddressing)
{
#if STRATA_INLINE_SHADING
	// Assume Normal & Tangent are already been normalized
	float3 Normal  = StrataPixelHeader.SharedLocalBases.Normals[BSDF_GETSHAREDLOCALBASISID(BSDF)];
	float3 Tangent = StrataPixelHeader.SharedLocalBases.Tangents[BSDF_GETSHAREDLOCALBASISID(BSDF)];
	float3 Bitangent = cross(Normal, Tangent);
	return float3x3(Tangent, Bitangent, Normal);
#else
	return float3x3(float3(1,0,0), float3(0,1,0), float3(0,0,1));
#endif
}

float3x3 StrataGetBSDFSharedBasis_DeferredShading(in FStrataPixelHeader StrataPixelHeader, in FStrataBSDF BSDF, in FStrataAddressing StrataAddressing)
{
#if STRATA_DEFERRED_SHADING
	if (IsSimpleMaterial(StrataPixelHeader) || IsSingleMaterial(StrataPixelHeader) || IsEye(StrataPixelHeader) || IsHair(StrataPixelHeader) || IsSingleLayerWater(StrataPixelHeader))
	{		
		return GetTangentBasis(StrataUnpackTopLayerData(StrataPixelHeader.PackedTopLayerData).WorldNormal);
	}

	uint PackedBasis = StrataLoadUint1AtIndexOffset(StrataPixelHeader.StrataBuffer, StrataAddressing, StrataPixelHeader.SharedLocalBasesIndexOffset + BSDF_GETSHAREDLOCALBASISID(BSDF));

	uint BasisType   = StrataGetSharedLocalBasisType(StrataPixelHeader.SharedLocalBasesTypes_PackedHeader, BSDF_GETSHAREDLOCALBASISID(BSDF));
	float3x3 OutTangentBasis;
	if (BasisType == STRATA_BASIS_TYPE_NORMAL)
	{
		float3 Normal = StrataUnpackNormal(PackedBasis);
		OutTangentBasis = GetTangentBasis(Normal);
	}
	else // if (BasisType == STRATA_BASIS_TYPE_TANGENT)
	{
		float3 Normal;
		float3 Tangent;
		StrataUnpackNormalAndTangent(Normal, Tangent, PackedBasis);

		OutTangentBasis[0] = Tangent;
		OutTangentBasis[1] = cross(Normal, Tangent);
		OutTangentBasis[2] = Normal;
	}
	return OutTangentBasis;
#else
	return float3x3(float3(1,0,0), float3(0,1,0), float3(0,0,1));
#endif
}

float3x3 StrataGetBSDFSharedBasis(in FStrataPixelHeader StrataPixelHeader, in FStrataBSDF BSDF, in FStrataAddressing StrataAddressing)
{
#if STRATA_INLINE_SHADING
	return StrataGetBSDFSharedBasis_InlineShading(StrataPixelHeader, BSDF, StrataAddressing);
#else 
	return StrataGetBSDFSharedBasis_DeferredShading(StrataPixelHeader, BSDF, StrataAddressing);
#endif
}

///////////////////////////////////////////////////////////////////////////////
// Operator nodes

FStrataData StrataAdd(FStrataData A, FStrataData B, inout FStrataTree StrataTree, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;
#if USE_DEVELOPMENT_SHADERS
	StrataData.PreviewColor = A.PreviewColor + B.PreviewColor;
#endif

	StrataTree.OperatorCount++;
	StrataTree.Operators[OperatorIndex]							= GetInitialisedStrataOperator();
	StrataTree.Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	StrataTree.Operators[OperatorIndex].Type					= STRATA_OPERATOR_ADD;
	StrataTree.Operators[OperatorIndex].LeftIndex				= A.OperatorIndex;
	StrataTree.Operators[OperatorIndex].RightIndex				= B.OperatorIndex;

	StrataTree.Operators[A.OperatorIndex].ParentIndex			= OperatorIndex;
	StrataTree.Operators[B.OperatorIndex].ParentIndex			= OperatorIndex;

	return StrataData;
}

FStrataData StrataWeight(FStrataData A, float Weight, inout FStrataTree StrataTree, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	const float SafeWeight = saturate(Weight);

	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;
#if USE_DEVELOPMENT_SHADERS
	StrataData.PreviewColor = A.PreviewColor * SafeWeight;
#endif

	StrataTree.OperatorCount++;
	StrataTree.Operators[OperatorIndex]							= GetInitialisedStrataOperator();
	StrataTree.Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	StrataTree.Operators[OperatorIndex].Type					= STRATA_OPERATOR_WEIGHT;
	StrataTree.Operators[OperatorIndex].Weight					= SafeWeight;
	StrataTree.Operators[OperatorIndex].LeftIndex				= A.OperatorIndex;

	StrataTree.Operators[A.OperatorIndex].ParentIndex			= OperatorIndex;

	return StrataData;
}

FStrataData StrataHorizontalMixing(FStrataData Background, FStrataData Foreground, float Mix, inout FStrataTree StrataTree, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	const float ForegroundMixFactor = saturate(Mix);
	const float BackgroundMixFactor = 1.0 - ForegroundMixFactor;

	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;
#if USE_DEVELOPMENT_SHADERS
	StrataData.PreviewColor = lerp(Background.PreviewColor, Foreground.PreviewColor, Mix);
#endif

	StrataTree.OperatorCount++;
	StrataTree.Operators[OperatorIndex]							= GetInitialisedStrataOperator();
	StrataTree.Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	StrataTree.Operators[OperatorIndex].Type					= STRATA_OPERATOR_HORIZONTAL;
	StrataTree.Operators[OperatorIndex].Weight					= Mix;
	StrataTree.Operators[OperatorIndex].LeftIndex				= Background.OperatorIndex;
	StrataTree.Operators[OperatorIndex].RightIndex				= Foreground.OperatorIndex;

	StrataTree.Operators[Background.OperatorIndex].ParentIndex	= OperatorIndex;
	StrataTree.Operators[Foreground.OperatorIndex].ParentIndex	= OperatorIndex;

	return StrataData;
}

FStrataData StrataVerticalLayering(FStrataData Top, FStrataData Base, inout FStrataTree StrataTree, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;
#if USE_DEVELOPMENT_SHADERS
	StrataData.PreviewColor = lerp(Top.PreviewColor, Base.PreviewColor, 0.5);
#endif

	StrataTree.OperatorCount++;
	StrataTree.Operators[OperatorIndex]							= GetInitialisedStrataOperator();
	StrataTree.Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	StrataTree.Operators[OperatorIndex].Type					= STRATA_OPERATOR_VERTICAL;
	StrataTree.Operators[OperatorIndex].LeftIndex				= Top.OperatorIndex;
	StrataTree.Operators[OperatorIndex].RightIndex				= Base.OperatorIndex;

	StrataTree.Operators[Top.OperatorIndex].ParentIndex			= OperatorIndex;
	StrataTree.Operators[Base.OperatorIndex].ParentIndex		= OperatorIndex;

	return StrataData;
}

// Take the inlined BSDF resulting from parameter blending (or BSDF creation) and register it to the StrataTree
FStrataData PromoteParameterBlendedBSDFToOperator(FStrataData StrataData, inout FStrataTree StrataTree, int OperatorIndex, int BSDFIndex, int LayerDepth, int bIsBottom)
{
	StrataTree.BSDFCount++;
	StrataTree.OperatorCount++;

	StrataTree.BSDFs[BSDFIndex] = StrataData.InlinedBSDF;
	
	StrataTree.Operators[OperatorIndex]							= GetInitialisedStrataOperator();
	StrataTree.Operators[OperatorIndex].LayerDepth				= LayerDepth;
	StrataTree.Operators[OperatorIndex].MaxDistanceFromLeaves	= 0;
	StrataTree.Operators[OperatorIndex].Type					= STRATA_OPERATOR_BSDF;
	StrataTree.Operators[OperatorIndex].LeftIndex				= BSDFIndex;

	StrataTree.BSDFs[BSDFIndex].OperatorIndex					= OperatorIndex;
	StrataTree.BSDFs[BSDFIndex].bIsBottom						= bIsBottom;
	StrataTree.BSDFs[BSDFIndex].bIsTop							= LayerDepth == 0;

	StrataData.OperatorIndex = OperatorIndex;
	return StrataData;
}

float HorizontalMixingParameterBlendingBSDFCoverageToNormalMix(FStrataData Background, FStrataData Foreground, float HorizontalMixValue)
{
	// This is a normalised mix so even though both BSDF have weights, the sum of weights used to combined them should always be 1.
	// This also account for relative BSDF coverage.
#if STRATA_INLINE_SHADING
	const float SafeBackCoverage = saturate(Background.InlinedBSDF.Coverage);
	const float SafeForeCoverage = saturate(Foreground.InlinedBSDF.Coverage);
	const float ForegroundMixFactor = saturate(HorizontalMixValue);
	const float BackgroundMixFactor = 1.0 - ForegroundMixFactor;

	return (SafeForeCoverage * ForegroundMixFactor) / max(STRATA_EPSILON, SafeForeCoverage * ForegroundMixFactor + SafeBackCoverage * BackgroundMixFactor);
#else
	return 0.5f;
#endif
}

// Merge two type of SSS type, by using the most complex behavior, i.e., No < Wrap < Diffusion < Diffusion Profile
uint StrataMergeSSSType(uint SSSType0, uint SSSType1)
{
	return max(SSSType0, SSSType1);
}

// Note about parameter blending
//  - We can only parameter blend Slab nodes. This error is handled in the compiler.
//  - We can only parameter blend one BSDF into another single BSDF. More complex topology are not handled and result in a compiler error. This could be extended to a single BSDF per layer.
//  - Maybe at some point we can propose a concatenate node, compressing a complex topology into a single one.
//  - Slab node with SSSprofile cannot be blendend. Those will have to be specifically handled by the user and not mixed with any other slab if it can be demoted to parameter blending

// ==> NOTE: Always pair with the compiler behavior in StrataCompilationInfoHorizontalMixingParamBlend
FStrataData StrataHorizontalMixingParameterBlending(FStrataData Background, FStrataData Foreground, float HorizontalMixValue, float NormalMixCodeChunk, uint NewNormalIndex)
{
	const float ForegroundOtherMixFactor = saturate(NormalMixCodeChunk);	// Horizontal mixing value combined with coverage
	const float ForegroundLightingMixFactor = saturate(HorizontalMixValue);

	FStrataData Result = GetInitialisedStrataData();
#define ResultBSDF		Result.InlinedBSDF
#define ForegroundBSDF	Foreground.InlinedBSDF
#define BackgroundBSDF	Background.InlinedBSDF

	// We can only parameter blend the slab 
	BSDF_SETTYPE(ResultBSDF,			STRATA_BSDF_TYPE_SLAB);
	BSDF_SETSHAREDLOCALBASISID(ResultBSDF,NewNormalIndex);

	BSDF_SETISTOPLAYER(ResultBSDF,		0);
	BSDF_SETHASANISOTROPY(ResultBSDF,	BSDF_GETHASANISOTROPY(ForegroundBSDF)			| BSDF_GETHASANISOTROPY(BackgroundBSDF));
	BSDF_SETSSSTYPE(ResultBSDF,			StrataMergeSSSType(BSDF_GETSSSTYPE(ForegroundBSDF), BSDF_GETSSSTYPE(BackgroundBSDF)));
	BSDF_SETISTHIN(ResultBSDF,			BSDF_GETISTHIN(ForegroundBSDF)					| BSDF_GETISTHIN(BackgroundBSDF));
	BSDF_SETHASMFP(ResultBSDF,			BSDF_GETHASMFP(ForegroundBSDF)					| BSDF_GETHASMFP(BackgroundBSDF));
	BSDF_SETHASHAZINESS(ResultBSDF,		BSDF_GETHASHAZINESS(ForegroundBSDF)				| BSDF_GETHASHAZINESS(BackgroundBSDF));
	BSDF_SETHASF90(ResultBSDF,			BSDF_GETHASF90(ForegroundBSDF)					| BSDF_GETHASF90(BackgroundBSDF));
	BSDF_SETHASFUZZ(ResultBSDF,			BSDF_GETHASFUZZ(ForegroundBSDF)					| BSDF_GETHASFUZZ(BackgroundBSDF));
	BSDF_SETHASTRANSABOVE(ResultBSDF,	BSDF_GETHASTRANSABOVE(ForegroundBSDF)			| BSDF_GETHASTRANSABOVE(BackgroundBSDF));

	BSDF_SETEMISSIVE(ResultBSDF,		lerp(BSDF_GETEMISSIVE(BackgroundBSDF),			BSDF_GETEMISSIVE(ForegroundBSDF),			ForegroundOtherMixFactor));
	SLAB_DIFFUSEALBEDO(ResultBSDF) =	lerp(SLAB_DIFFUSEALBEDO(BackgroundBSDF),		SLAB_DIFFUSEALBEDO(ForegroundBSDF),			ForegroundOtherMixFactor);
	SLAB_F0(ResultBSDF) =				lerp(SLAB_F0(BackgroundBSDF),					SLAB_F0(ForegroundBSDF),					ForegroundOtherMixFactor);
	SLAB_F90(ResultBSDF) =				lerp(SLAB_F90(BackgroundBSDF),					SLAB_F90(ForegroundBSDF),					ForegroundOtherMixFactor);
	SLAB_FUZZ_COLOR(ResultBSDF)	=		lerp(SLAB_FUZZ_COLOR(BackgroundBSDF),			SLAB_FUZZ_COLOR(ForegroundBSDF),			ForegroundOtherMixFactor);

	BSDF_SETTHICKNESSCM(ResultBSDF,		lerp(BSDF_GETTHICKNESSCM(BackgroundBSDF),		BSDF_GETTHICKNESSCM(ForegroundBSDF),		ForegroundOtherMixFactor));
	SLAB_ROUGHNESS(ResultBSDF) =		lerp(SLAB_ROUGHNESS(BackgroundBSDF),			SLAB_ROUGHNESS(ForegroundBSDF),				ForegroundOtherMixFactor);
	SLAB_ANISOTROPY(ResultBSDF) =		lerp(SLAB_ANISOTROPY(BackgroundBSDF),			SLAB_ANISOTROPY(ForegroundBSDF),			ForegroundOtherMixFactor);
	SLAB_FUZZ_AMOUNT(ResultBSDF) =		lerp(SLAB_FUZZ_AMOUNT(BackgroundBSDF),			SLAB_FUZZ_AMOUNT(ForegroundBSDF),			ForegroundOtherMixFactor);
	SLAB_FUZZ_ROUGHNESS(ResultBSDF)	=	lerp(SLAB_FUZZ_ROUGHNESS(BackgroundBSDF),		SLAB_FUZZ_ROUGHNESS(ForegroundBSDF),		ForegroundOtherMixFactor);
	SLAB_HAZINESS(ResultBSDF) =			LerpHazinessParameterBlending(BackgroundBSDF,	ForegroundBSDF,								ForegroundOtherMixFactor);
	

	if (BSDF_GETSSSTYPE(ResultBSDF) == SSS_TYPE_DIFFUSION_PROFILE)
	{
		const bool bForegroundHasSSSProfile = BSDF_GETSSSTYPE(ForegroundBSDF) == SSS_TYPE_DIFFUSION_PROFILE;
		const bool bBackgroundHasSSSProfile = BSDF_GETSSSTYPE(BackgroundBSDF) == SSS_TYPE_DIFFUSION_PROFILE;

		// As mentioned above, we cannot blend SSSProfiles. So we select the one that triggered the profile, foreground having priority.
		SLAB_SSSPROFILEID(ResultBSDF) = bForegroundHasSSSProfile ? SLAB_SSSPROFILEID(ForegroundBSDF) : SLAB_SSSPROFILEID(BackgroundBSDF);

		// We also lerp the radius scale, while taking into account whether or not the one or the other have SSSProfile.
		SLAB_SSSPROFILERADIUSSCALE(ResultBSDF) = lerp(
			bBackgroundHasSSSProfile ? SLAB_SSSPROFILERADIUSSCALE(BackgroundBSDF) : 0.0f,
			bForegroundHasSSSProfile ? SLAB_SSSPROFILERADIUSSCALE(ForegroundBSDF) : 0.0f,
			ForegroundOtherMixFactor);

		if (SLAB_SSSPROFILERADIUSSCALE(ResultBSDF) == 0.0f)
		{
			SLAB_SSSPROFILEID(ResultBSDF) = SSS_PROFILE_ID_INVALID;
			BSDF_SETSSSTYPE(ResultBSDF, SSS_TYPE_INVALID);
		}
	}
	else
	{
		SLAB_SSSMFP(ResultBSDF) =		lerp(SLAB_SSSMFP(BackgroundBSDF),				SLAB_SSSMFP(ForegroundBSDF),				ForegroundOtherMixFactor);

		// We still try to disable SSS if possible: for performance and also to preserve the surface color (especially specular reflection color).
		if (all(SLAB_SSSMFP(ResultBSDF) == 0.0f))
		{
			BSDF_SETSSSTYPE(ResultBSDF, SSS_TYPE_INVALID);
		}
	}


#if STRATA_INLINE_SHADING
	// At this stage we do not know if this strata BSDF is going to be using simple volume lighting so always store the MFP on the side to not override SSSPROFILE data.
	ResultBSDF.TmpMFP =					lerp(BackgroundBSDF.TmpMFP,						ForegroundBSDF.TmpMFP,						ForegroundOtherMixFactor);

	// We blend the parameter above, and we also need to lerp the Coverage to match the total energy.
	ResultBSDF.Coverage =				lerp(BackgroundBSDF.Coverage,					ForegroundBSDF.Coverage,					HorizontalMixValue);
#endif

#if USE_DEVELOPMENT_SHADERS
	Result.PreviewColor = lerp(Background.PreviewColor, Foreground.PreviewColor, HorizontalMixValue);
#endif

#undef ResultBSDF
#undef ForegroundBSDF
#undef BackgroundBSDF
	return Result;
}

float AddParameterBlendingBSDFCoverageToNormalMix(FStrataData AStrata, FStrataData BStrata)
{
	// This is a normalised mix so even though both BSDF have weights, the sum of weights used to combined them should always be 1.
#if STRATA_INLINE_SHADING
	const float SafeABSDFCoverage = saturate(AStrata.InlinedBSDF.Coverage);
	const float SafeBBSDFCoverage = saturate(BStrata.InlinedBSDF.Coverage);
	const float AMixFactor = SafeABSDFCoverage / max(STRATA_EPSILON, SafeABSDFCoverage + SafeBBSDFCoverage);
	return AMixFactor;
#else
	return 0.5f;
#endif
}

// ==> NOTE: Always pair with the compiler behavior in StrataCompilationInfoAddParamBlend
FStrataData StrataAddParameterBlending(FStrataData A, FStrataData B, float AMixFactor, uint NewNormalIndex)
{
	FStrataData Result = GetInitialisedStrataData();
#define ResultBSDF		Result.InlinedBSDF
#define ABSDF			A.InlinedBSDF
#define BBSDF			B.InlinedBSDF

	// We can only parameter blend the slab 
	BSDF_SETTYPE(ResultBSDF,			STRATA_BSDF_TYPE_SLAB);
	BSDF_SETSHAREDLOCALBASISID(ResultBSDF,NewNormalIndex);

	BSDF_SETISTOPLAYER(ResultBSDF,		0);
	BSDF_SETHASANISOTROPY(ResultBSDF,	BSDF_GETHASANISOTROPY(BBSDF)					| BSDF_GETHASANISOTROPY(ABSDF));
	BSDF_SETSSSTYPE(ResultBSDF,			StrataMergeSSSType(BSDF_GETSSSTYPE(BBSDF)		, BSDF_GETSSSTYPE(ABSDF)));
	BSDF_SETISTHIN(ResultBSDF,			BSDF_GETISTHIN(BBSDF)							| BSDF_GETISTHIN(ABSDF));
	BSDF_SETHASMFP(ResultBSDF,			BSDF_GETHASMFP(BBSDF)							| BSDF_GETHASMFP(ABSDF));
	BSDF_SETHASHAZINESS(ResultBSDF,		BSDF_GETHASHAZINESS(BBSDF)						| BSDF_GETHASHAZINESS(ABSDF));
	BSDF_SETHASF90(ResultBSDF,			BSDF_GETHASF90(BBSDF)							| BSDF_GETHASF90(ABSDF));
	BSDF_SETHASFUZZ(ResultBSDF,			BSDF_GETHASFUZZ(BBSDF)							| BSDF_GETHASFUZZ(ABSDF));


	// Some parameters will contribute to added luminance: in this case we add them together and saturate to not go out of the safe range
	BSDF_SETEMISSIVE(ResultBSDF,		BSDF_GETEMISSIVE(ABSDF)								+ BSDF_GETEMISSIVE(ABSDF));
	SLAB_DIFFUSEALBEDO(ResultBSDF) =	saturate(SLAB_DIFFUSEALBEDO(BBSDF)					+ SLAB_DIFFUSEALBEDO(ABSDF));
	SLAB_F0(ResultBSDF) =				saturate(SLAB_F0(BBSDF)								+ SLAB_F0(ABSDF));
	SLAB_F90(ResultBSDF) =				saturate(SLAB_F90(BBSDF)							+ SLAB_F90(ABSDF));
	SLAB_FUZZ_COLOR(ResultBSDF) =		saturate(SLAB_FUZZ_COLOR(BBSDF)						+ SLAB_FUZZ_COLOR(ABSDF));

	// Some parameters are not contributing to added luminance: in this case we simply lerp them
	BSDF_SETTHICKNESSCM(ResultBSDF,		lerp(BSDF_GETTHICKNESSCM(BBSDF),				BSDF_GETTHICKNESSCM(ABSDF),					AMixFactor));
	SLAB_ROUGHNESS(ResultBSDF) =		lerp(SLAB_ROUGHNESS(BBSDF),						SLAB_ROUGHNESS(ABSDF),						AMixFactor);
	SLAB_ANISOTROPY(ResultBSDF) =		lerp(SLAB_ANISOTROPY(BBSDF),					SLAB_ANISOTROPY(ABSDF),						AMixFactor);
	SLAB_FUZZ_AMOUNT(ResultBSDF) =		lerp(SLAB_FUZZ_AMOUNT(BBSDF),					SLAB_FUZZ_AMOUNT(ABSDF),					AMixFactor);
	SLAB_FUZZ_ROUGHNESS(ResultBSDF) =	lerp(SLAB_FUZZ_ROUGHNESS(BBSDF),				SLAB_FUZZ_ROUGHNESS(ABSDF),					AMixFactor);
	SLAB_HAZINESS(ResultBSDF) =			LerpHazinessParameterBlending(BBSDF,			ABSDF,										AMixFactor);

	if (BSDF_GETSSSTYPE(ResultBSDF) == SSS_TYPE_DIFFUSION_PROFILE)
	{
		// As mentioned above, we cannot blend SSSProfiles. We do select the appropriate profile, ABSDF being selected if both have SSSProfile.
		if (BSDF_GETSSSTYPE(ABSDF) == SSS_TYPE_DIFFUSION_PROFILE)
		{
			SLAB_SSSPROFILEID(ResultBSDF) = SLAB_SSSPROFILEID(ABSDF);
			SLAB_SSSPROFILERADIUSSCALE(ResultBSDF) = SLAB_SSSPROFILERADIUSSCALE(ABSDF);
		}
		else
		{
			SLAB_SSSPROFILEID(ResultBSDF) = SLAB_SSSPROFILEID(BBSDF);
			SLAB_SSSPROFILERADIUSSCALE(ResultBSDF) = SLAB_SSSPROFILERADIUSSCALE(BBSDF);
		}
	}
	else
	{
		SLAB_SSSMFP(ResultBSDF) =		lerp(SLAB_SSSMFP(BBSDF),						SLAB_SSSMFP(ABSDF),						AMixFactor);
	}


#if STRATA_INLINE_SHADING
	// At this stage we do not know if this strata BSDF is going to be using simple volume lighting so always store the MFP on the side to not override SSSPROFILE data.
	ResultBSDF.TmpMFP =				lerp(BBSDF.TmpMFP,								ABSDF.TmpMFP,								AMixFactor);

	// When it comes to adding the visual contribution, we chose to add the coverage without clamping as currently done in the StrataAdd function.
	// Operations using Coverage are currently making sure they are in a safe range.
	ResultBSDF.Coverage =				saturate(BBSDF.Coverage + ABSDF.Coverage);
#endif

#if USE_DEVELOPMENT_SHADERS
	Result.PreviewColor = lerp(A.PreviewColor, B.PreviewColor, 0.5);
#endif

#undef ResultBSDF
#undef ABSDF
#undef BBSDF
	return Result;
}

float VerticalLayeringParameterBlendingBSDFCoverageToNormalMix(FStrataData TopStrata)
{
	// This is a normalised mix so even though both BSDF have weights, the sum of weights used to combined them should always be 1.
#if STRATA_INLINE_SHADING
	const float SafeTopBSDFCoverage = saturate(TopStrata.InlinedBSDF.Coverage);
	const float TopNormalContributionForWeightOfOne = 0.5f;
	// STRATA_TODO take into account transmittance when computing the normal weight
	return SafeTopBSDFCoverage * TopNormalContributionForWeightOfOne;
#else
	return 0.5f;
#endif
}

// ==> NOTE: Always pair with the compiler behavior in StrataCompilationInfoVerticalLayeringParamBlend
FStrataBSDF StrataVerticalLayeringParameterBlending(in FStrataBSDF TopBSDF, in FStrataBSDF BaseBSDF, uint NewNormalIndex, float NoV)
{
	FStrataBSDF ResultBSDF = (FStrataBSDF)0;
#if STRATA_INLINE_SHADING
	const float SafeTopCoverage = saturate(TopBSDF.Coverage);
	const float SafeBaseCoverage = saturate(BaseBSDF.Coverage);
#else
	const float SafeTopCoverage = 0.5f;
	const float SafeBaseCoverage = 0.5f;
#endif

	// We can only parameter blend the slab 
	BSDF_SETTYPE(ResultBSDF,			STRATA_BSDF_TYPE_SLAB);
	BSDF_SETSHAREDLOCALBASISID(ResultBSDF,NewNormalIndex);

	BSDF_SETISTOPLAYER(ResultBSDF,		0);
	BSDF_SETHASANISOTROPY(ResultBSDF,	0);																					// Anisotropy is disabled because it changes a lot of things
	BSDF_SETSSSTYPE(ResultBSDF,			min(BSDF_GETSSSTYPE(BaseBSDF), SSS_TYPE_DIFFUSION));								// We only keep SSS if the bottom layer has it. Problem: cannot blend SSS profiles so we simply disable SSSProfile in this case, i.e., min(..., SSS_TYPE_DIFFUSION)
	BSDF_SETISTHIN(ResultBSDF,			BSDF_GETISTHIN(BaseBSDF));
	BSDF_SETHASMFP(ResultBSDF,			BSDF_GETHASMFP(BaseBSDF)						| BSDF_GETHASMFP(TopBSDF));			// We keep MFP of both to make sure bottom layer on translucent can also be effective
	BSDF_SETHASHAZINESS(ResultBSDF,		BSDF_GETHASHAZINESS(TopBSDF));														// We only keep haziness if the top layer has it
	BSDF_SETHASF90(ResultBSDF,			BSDF_GETHASF90(BaseBSDF)						| BSDF_GETHASF90(TopBSDF));			// F90: keep union of both even though it will be hard to get a match
	BSDF_SETHASFUZZ(ResultBSDF,			BSDF_GETHASFUZZ(BaseBSDF)						| BSDF_GETHASFUZZ(TopBSDF));		// Fuzz: keep union of both even though it will be hard to get a match

	// Compute the top slab transmittance that will be used to blend the top and base material parameters.
	// We do not check BSDF_GETISSIMPLEVOLUME(BSDFContext.BSDF) because that is set when we know the BSDF is not at the bottom later. And here we already know it is not the case.
	EnableSlabBSDFSimpleVolumetric(TopBSDF);
	EnableSlabBSDFSimpleVolumetric(BaseBSDF);
	const float3 UnusedDiffuseColor		= 0;	// Unused when only transmittance is needed
	FParticipatingMedia PM				= StrataSlabCreateParticipatingMedia(UnusedDiffuseColor, SLAB_SSSMFP(TopBSDF));
	const float3 SlabTransmittanceV		= IsotropicMediumSlabTransmittance(PM, STRATA_SIMPLEVOLUME_THICKNESS_M, NoV);
	const float3 SlabTransmittanceN		= IsotropicMediumSlabTransmittance(PM, STRATA_SIMPLEVOLUME_THICKNESS_M, 1.0f /*Normal incidence i.e., NoL == 1.f*/);
	const float3 SlabTransmittance		= SlabTransmittanceV * SlabTransmittanceN;

	// STRATA_TODO account for energy conservation here.

	FVerticalLayeringInfo Info			= GetVerticalLayeringInfo(SafeTopCoverage, SafeBaseCoverage);
	// Compute some ways to intepoldate and accumulate parameters, but always normalise because coverage is applied later in UpdateSingleBSDFOperatorCoverageTransmittance.
	const float  TopToBottomLerp		= saturate((Info.TransmittanceTopAndBottom * dot(SlabTransmittance,0.33.xxx) + Info.SurfaceBottom) / max(STRATA_EPSILON, Info.Coverage));
	const float3 BottomColorFactor		= (Info.TransmittanceTopAndBottom * SlabTransmittance + Info.SurfaceBottom) / max(STRATA_EPSILON, Info.Coverage);
	const float  TopFactor				= Info.SurfaceTop / max(STRATA_EPSILON, Info.Coverage);
	
	// Add both layers thickness
	BSDF_SETTHICKNESSCM(ResultBSDF,		BSDF_GETTHICKNESSCM(BaseBSDF)												+ SafeTopCoverage * BSDF_GETTHICKNESSCM(TopBSDF));

	// Now add bottom layer component weights by throughput to the top layer.
	// Those parameters will contribute to added luminance, in this case we add them together and saturate to not go out of the safe range
	// Some parameters are not contributing to added luminance: in this case we simply lerp them
	BSDF_SETEMISSIVE(ResultBSDF,		BottomColorFactor * BSDF_GETEMISSIVE(BaseBSDF)								+ TopFactor * BSDF_GETEMISSIVE(TopBSDF));

	SLAB_DIFFUSEALBEDO(ResultBSDF) =	saturate(BottomColorFactor * SLAB_DIFFUSEALBEDO(BaseBSDF)					+ TopFactor * SLAB_DIFFUSEALBEDO(TopBSDF));
	SLAB_F0(ResultBSDF) =				saturate(BottomColorFactor * SLAB_F0(BaseBSDF)								+ TopFactor * SLAB_F0(TopBSDF));
	SLAB_F90(ResultBSDF) =				saturate(BottomColorFactor * SLAB_F90(BaseBSDF)								+ TopFactor * SLAB_F90(TopBSDF));
	SLAB_FUZZ_COLOR(ResultBSDF) =		saturate(BottomColorFactor * SLAB_FUZZ_COLOR(BaseBSDF)						+ TopFactor * SLAB_FUZZ_COLOR(TopBSDF));
		
	SLAB_ROUGHNESS(ResultBSDF) =		lerp(SLAB_ROUGHNESS(TopBSDF),					SLAB_ROUGHNESS(BaseBSDF),	TopToBottomLerp);
	SLAB_FUZZ_AMOUNT(ResultBSDF) =		lerp(SLAB_FUZZ_AMOUNT(TopBSDF),					SLAB_FUZZ_AMOUNT(BaseBSDF), TopToBottomLerp);
	SLAB_FUZZ_ROUGHNESS(ResultBSDF) =	lerp(SLAB_FUZZ_ROUGHNESS(TopBSDF),				SLAB_FUZZ_ROUGHNESS(BaseBSDF),TopToBottomLerp);
	SLAB_HAZINESS(ResultBSDF) =			LerpHazinessParameterBlending(TopBSDF,			BaseBSDF,					TopToBottomLerp);

	// Anisotropy is disabled with vertical blending. 
	SLAB_ANISOTROPY(ResultBSDF) =		0.f;

	// Keep the MFP form the bottom layer only (top layer simple volume is backed in parameters).
	SLAB_SSSMFP(ResultBSDF) =			lerp(SLAB_SSSMFP(TopBSDF),						SLAB_SSSMFP(BaseBSDF),		TopToBottomLerp);

#if STRATA_INLINE_SHADING
#if STRATA_OPAQUE_MATERIAL
	// Only the bottom layer SSS / Thin model is used so we only keep the bottom layer data there. Top layer is converted to throughput.
	ResultBSDF.TmpMFP =					BaseBSDF.TmpMFP;
	ResultBSDF.Coverage =				Info.Coverage;
#else

	// We compute the total transmittance of the medium over the max coverage
	const float MaxCoverage = max(TopBSDF.Coverage, BaseBSDF.Coverage);
	FVerticalLayeringInfo Info2 = GetVerticalLayeringInfo(TopBSDF.Coverage / MaxCoverage, BaseBSDF.Coverage / MaxCoverage);
#if 0
	// Using transmittance as a way to interpolate should be better but there are issues with large values
	const float3 TopExtinction			= 1.0f / max(0.0, TopBSDF.TmpMFP);
	const float3 BaseExtinction			= 1.0f / max(0.0, BaseBSDF.TmpMFP);
	const float3 TopTransmitance		= exp(-TopExtinction);	// extinction = optical depth, we assume here d = 1 meter
	const float3 BaseTransmitance		= exp(-BaseExtinction);
	const float3 NewTransmittance		= Info2.TransmittanceOnlyBottom * BaseTransmitance + Info2.TransmittanceOnlyTop * TopTransmitance + Info2.TransmittanceTopAndBottom * TopTransmitance * BaseTransmitance;
	const float3 NewExtinction			= -log(saturate(max(0.0, NewTransmittance)));
	const float3 NewMFP					= 1.0f / NewExtinction;
#else
	// MFP looks more prceptually linear even though it is not perfect
	const float3 NewMFP = Info2.TransmittanceOnlyBottom * BaseBSDF.TmpMFP + Info2.TransmittanceOnlyTop * TopBSDF.TmpMFP + Info2.TransmittanceTopAndBottom * min(TopBSDF.TmpMFP, BaseBSDF.TmpMFP);
#endif

	ResultBSDF.TmpMFP					= NewMFP;
	SLAB_SSSMFP(ResultBSDF)			= NewMFP;

	ResultBSDF.Coverage				= MaxCoverage;
#endif

#endif
	return ResultBSDF;
}

FStrataData StrataVerticalLayeringParameterBlending(FStrataData Top, FStrataData Base, uint NewNormalIndex, float NoV)
{
	FStrataData Result = GetInitialisedStrataData();
	Result.InlinedBSDF = StrataVerticalLayeringParameterBlending(Top.InlinedBSDF, Base.InlinedBSDF, NewNormalIndex, NoV);
#if USE_DEVELOPMENT_SHADERS
	Result.PreviewColor = lerp(Top.PreviewColor, Base.PreviewColor, 0.5);
#endif
	return Result;
}

FStrataData StrataWeightParameterBlending(FStrataData A, float Weight)
{
	const float SafeWeight = saturate(Weight);
	FStrataData StrataData = A;

	// Apply the weight to coverage
#if STRATA_INLINE_SHADING
	StrataData.InlinedBSDF.Coverage *= SafeWeight;
#endif

	return StrataData;
}

void StrataGetThinFilmF0F90(float NoV, float ThinFilmNormalizedThickness, float ThinFilmIOR, inout float3 OutF0, inout float3 OutF90)
{
	const float3 F0 = OutF0;
	const float3 F90 = OutF90;

	const float NoL = NoV;
	const float VoH = NoV;
	float3 RThinFilm = F_ThinFilm(NoV, NoL, VoH, F0, F90, ThinFilmIOR, ThinFilmNormalizedThickness);

	// Compute a F0 which match evaluation Thin-Film reflectance for the current view angle using Schlick's Fresnel
	const float FReference = min(0.99f, F_Schlick(0, 1.0f, NoV).x);
	RThinFilm = max(RThinFilm, FReference);

	float3 F0_Thin = (RThinFilm - F90 * FReference) / (1 - FReference);

	// Ensure the generated F0 doesn't cause micro-oclusion
	F0_Thin = max(GetF0MicroOcclusionThreshold(), F0_Thin);

	// If micro-occlusion was set, re-apply it.		
	const float3 MicroOcclusion = F0RGBToMicroOcclusion(F0);
	F0_Thin *= MicroOcclusion;

	OutF0 = F0_Thin;
	OutF90 = max(F0_Thin, F90);
}

struct FStrataThinFilmOutput
{
	float3 F0;
	float3 F90;
};
FStrataThinFilmOutput StrataGetThinFilmF0F90(float NoV, float3 F0, float3 F90, float ThinFilmNormalizedThickness, float ThinFilmIOR)
{
	FStrataThinFilmOutput Output;
	Output.F0 = F0;
	Output.F90 = F90;
	StrataGetThinFilmF0F90(NoV, ThinFilmNormalizedThickness, ThinFilmIOR, Output.F0, Output.F90);
	return Output;
}

///////////////////////////////////////////////////////////////////////////////
// Functions used to sanitize BSDF before they are used for lighting (when forward) or stored to memory (base pass).
// We do not normalize normals, this is done before the lighting step.
// This step is obligatory so we apply View.MinRoughness here for forward and deferred.

float SanitizeRoughness(float Roughness)
{
#if MATERIAL_FULLY_ROUGH
	return 1.0f;
#else
	#if (USE_EDITOR_SHADERS && !ES3_1_PROFILE) || MOBILE_EMULATION
	// this feature is only needed for development/editor - we can compile it out for a shipping build (see r.CompileShadersForDevelopment cvar help)
	Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	#endif
	return saturate(max(View.MinRoughness, Roughness));
#endif
}

float3 SanitizeDiffuseAlbedo(float3 DiffuseAlbedo)
{
	#if USE_DEVELOPMENT_SHADERS
	// This feature is only needed for development/editor - we can compile it out for a shipping build (see r.CompileShadersForDevelopment cvar help)
	return saturate(DiffuseAlbedo) * View.DiffuseOverrideParameter.www + View.DiffuseOverrideParameter.xyz;
	#else
	return saturate(DiffuseAlbedo);
	#endif
}

float3 SanitizeF0(float3 F0)
{
	#if USE_DEVELOPMENT_SHADERS
	// This feature is only needed for development/editor - we can compile it out for a shipping build (see r.CompileShadersForDevelopment cvar help)
	return saturate(F0) * View.SpecularOverrideParameter.w + View.SpecularOverrideParameter.xyz;
	#else
	return saturate(F0);
	#endif
}

float SanitizeF0(float F0)
{
	#if USE_DEVELOPMENT_SHADERS
	// This feature is only needed for development/editor - we can compile it out for a shipping build (see r.CompileShadersForDevelopment cvar help)
	return saturate(F0) * View.SpecularOverrideParameter.w + View.SpecularOverrideParameter.x;
	#else
	return saturate(F0);
	#endif
}

void SanitizeStrataSlab(inout FStrataBSDF BSDF)
{
	// We do not clamp emissive luminance upper bound. This is done later in the base pass within pre-exposed luminance space.
	BSDF_SETEMISSIVE(BSDF, max(BSDF_GETEMISSIVE(BSDF), 0.0));
	SLAB_DIFFUSEALBEDO(BSDF) = SanitizeDiffuseAlbedo(SLAB_DIFFUSEALBEDO(BSDF));
	SLAB_F0(BSDF) = SanitizeF0(SLAB_F0(BSDF));
	SLAB_F90(BSDF) = saturate(SLAB_F90(BSDF));
	SLAB_ROUGHNESS(BSDF) = SanitizeRoughness(SLAB_ROUGHNESS(BSDF));
	SLAB_ANISOTROPY(BSDF) = clamp(SLAB_ANISOTROPY(BSDF), -1.f, 1.f);
	// SLAB_HAZINESS is sanitize when packed, see PackHaziness.
#if STRATA_INLINE_SHADING && STRATA_OPAQUE_MATERIAL
	// We only clamp MFP when we are going to export it packed into the GBuffer.
	// Otherwise, for forward shading, it is already safe to use, see RescaleMFPToComputationSpace.
	BSDF.TmpMFP = clamp(BSDF.TmpMFP, 0.0f, Max111110BitsFloat3);
#endif

	// BSDF feature tests must be executed for profile path to not interact with MFP, especially for forward rendered simple volumetrics.
	if (BSDF_GETSSSTYPE(BSDF) == SSS_TYPE_DIFFUSION_PROFILE)
	{
		SLAB_SSSPROFILERADIUSSCALE(BSDF) = saturate(SLAB_SSSPROFILERADIUSSCALE(BSDF));
	}
	else if (BSDF_GETSSSTYPE(BSDF) == SSS_TYPE_DIFFUSION)
	{
		SLAB_SSSMFP(BSDF) = clamp(SLAB_SSSMFP(BSDF), 0.0f, Max111110BitsFloat3);
	}

	SLAB_FUZZ_AMOUNT(BSDF) = saturate(SLAB_FUZZ_AMOUNT(BSDF));
	SLAB_FUZZ_COLOR(BSDF) = saturate(SLAB_FUZZ_COLOR(BSDF));
	SLAB_FUZZ_ROUGHNESS(BSDF) = saturate(SLAB_FUZZ_ROUGHNESS(BSDF));
}

void SanitizeStrataHair(inout FStrataBSDF BSDF)
{
	// We do not clamp emissive luminance upper bound. This is done later in the base pass within pre-exposed luminance space.
	BSDF_SETEMISSIVE(BSDF, max(BSDF_GETEMISSIVE(BSDF), 0.0));
	HAIR_BASECOLOR(BSDF) = SanitizeDiffuseAlbedo(HAIR_BASECOLOR(BSDF));
	HAIR_SCATTER(BSDF) = saturate(HAIR_SCATTER(BSDF));
	HAIR_ROUGHNESS(BSDF) = SanitizeRoughness(HAIR_ROUGHNESS(BSDF));
	HAIR_SPECULAR(BSDF) = SanitizeF0(HAIR_SPECULAR(BSDF));
	HAIR_BACKLIT(BSDF) = saturate(HAIR_BACKLIT(BSDF));
}

void SanitizeStrataEye(inout FStrataBSDF BSDF)
{
	// We do not clamp emissive luminance upper bound. This is done later in the base pass within pre-exposed luminance space.
	BSDF_SETEMISSIVE(BSDF, max(BSDF_GETEMISSIVE(BSDF), 0.0));
	EYE_DIFFUSEALBEDO(BSDF) = SanitizeDiffuseAlbedo(EYE_DIFFUSEALBEDO(BSDF));
	EYE_ROUGHNESS(BSDF) = SanitizeRoughness(EYE_ROUGHNESS(BSDF));
	EYE_IRISDISTANCE(BSDF) = saturate(EYE_IRISDISTANCE(BSDF));
	EYE_IRISMASK(BSDF) = saturate(EYE_IRISMASK(BSDF));
	EYE_IRISNORMAL(BSDF) = normalize(EYE_IRISNORMAL(BSDF));
	EYE_IRISPLANENORMAL(BSDF) = normalize(EYE_IRISPLANENORMAL(BSDF));
}

void SanitizeStrataSingleLayerWater(inout FStrataBSDF BSDF)
{
	// We do not clamp emissive luminance upper bound. This is done later in the base pass within pre-exposed luminance space.
	BSDF_SETEMISSIVE(BSDF, max(BSDF_GETEMISSIVE(BSDF), 0.0));
	SLW_BASECOLOR(BSDF) = SanitizeDiffuseAlbedo(SLW_BASECOLOR(BSDF));
	SLW_METALLIC(BSDF) = saturate(SLW_METALLIC(BSDF));
	SLW_SPECULAR(BSDF) = SanitizeF0(SLW_SPECULAR(BSDF));
	SLW_ROUGHNESS(BSDF) = SanitizeRoughness(SLW_ROUGHNESS(BSDF));
	SLW_TOPMATERIALOPACITY(BSDF) = saturate(SLW_TOPMATERIALOPACITY(BSDF));
#if STRATA_INLINE_SINGLELAYERWATER
	SLW_WATERALBEDO(BSDF) = saturate(SLW_WATERALBEDO(BSDF));
	SLW_WATEREXTINCTION(BSDF) = clamp(SLW_WATEREXTINCTION(BSDF), 0.0f, Max10BitsFloat);
	SLW_WATERPHASEG(BSDF) = clamp(SLW_WATERPHASEG(BSDF), -1.0f, 1.0f);
	SLW_COLORSCALEBEHINDWATER(BSDF) = clamp(SLW_COLORSCALEBEHINDWATER(BSDF), 0.0f, Max10BitsFloat);
#endif
}

void SanitizeStrataUnlit(inout FStrataBSDF BSDF)
{
#if MATERIAL_ALLOW_NEGATIVE_EMISSIVECOLOR == 0
	// We do not clamp emissive luminance upper bound. This is done later in the base pass within pre-exposed luminance space.
	BSDF_SETEMISSIVE(BSDF, max(BSDF_GETEMISSIVE(BSDF), 0.0));
#endif
	UNLIT_TRANSMITTANCE(BSDF) = saturate(UNLIT_TRANSMITTANCE(BSDF));
}

void StrataSanitizeBSDF(inout FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
		case STRATA_BSDF_TYPE_SLAB:
		{
			SanitizeStrataSlab(BSDF);
			break; 
		}
		case STRATA_BSDF_TYPE_HAIR:
		{
			SanitizeStrataHair(BSDF);
			break;
		}
		case STRATA_BSDF_TYPE_EYE:
		{
			SanitizeStrataEye(BSDF);
			break;
		}
		case STRATA_BSDF_TYPE_SINGLELAYERWATER:
		{
			SanitizeStrataSingleLayerWater(BSDF);
			break;
		}
	}
}

// Return 0 if v is zero, 1 otherwise
float IsNonZeroFast(float v)
{
	return float(min(asuint(v) & 0x7FFFFFFF, 1u));
}

float3 IsNonZeroFast(float3 v)
{
	return float3(min(asuint(v) & 0x7FFFFFFF, 1u.xxx));
}

// This is used to respect artistic desire, e.g. shutdown diffuse or specular.
float3 DitherIfNonBlack(float3 Input, float3 Dither)
{
	// IsNonZeroFast ensures dithering is not applied when Input is zero. Input us assumed to be in [0..1].
	float3 NewInput = Input + Dither * IsNonZeroFast(Input);
	return saturate(NewInput);
}
float DitherIfNonBlack(float Input, float Dither)
{
	// IsNonZeroFast ensures dithering is not applied when Input is zero. Input us assumed to be in [0..1].
	float NewInput = Input + Dither * IsNonZeroFast(Input);
	return saturate(NewInput);
}

///////////////////////////////////////////////////////////////////////////////
// Other tools

// Those participating media funtion are use by the Slab node. In this case, the MFP is considered as a simple MFP because MFP is not directly inversible to medium properties.

FParticipatingMedia StrataSlabCreateParticipatingMedia(float3 DiffuseColor, float3 MeanFreePathCentimeters)
{
	const float3 MeanFreePathMeters = MeanFreePathCentimeters * CENTIMETER_TO_METER;
	return CreateMediumFromBaseColorMFP(DiffuseColor, MeanFreePathMeters);
}

float StrataSlabDiffuseToVolumeBlend(FParticipatingMedia PM)
{
	// Remember, computation are made for a slab of 1 metter, according to STRATA_SIMPLEVOLUME_THICKNESS_M.
	// We start blending from diffuse toward a slab of participating media when the mean free path reaches 4 centimeters.
	const float MaxMeanFreePathMeters = max(PM.MeanFreePath.x, max(PM.MeanFreePath.y, PM.MeanFreePath.z));
	// Start blending volumetric after mean free path of 4 centimeters (also needed because threshold when recovering extinction from transmittance cause a small minimum value)
	const float StartVolumeBlenMFP = 0.04f;
	// And when the mean free path reaches 1/3.0f = 0.33 meter. That is extinction=1/0.33=3, transmittance at 1m (bottom of the slab) = exp(-3) = 0.05) we fully use the volumetric model.
	const float Blend = saturate(max(0.0, MaxMeanFreePathMeters - StartVolumeBlenMFP) * 3.0f);
	//const float Blend = max(0.0, MaxMeanFreePathMeters - StartVolumeBlenMFP) > 0.0 ? 1.0 : 0.0;

	// Using a non linear blend helps smoothing out transitions visually.
	return Blend * Blend;
}

float3 RescaleMFPToComputationSpace(float3 InMFPInCm, float InSrcThicknessInCm, float InDstThicknessInCm)
{
	// Rescale the BSDF mean free path so to run volumetric material math on a unit slab of medium whose thickness is defined by InDstThicknessInCm
	// For instance, if thickness is larger => we need to reduce the MFP for the medium to appear visually thicker.
	// We do not cap the recovered MFP to be able to get closer to and indentity transmittance=1.0. 
	// MFP is safe already thanks to STRATA_EPSILON and TransmittanceToMeanFreePath. And it will be made safe later with a SanitizeStrataSlab before it is exported to the gbuffer.
	return max(InMFPInCm * (InDstThicknessInCm / max(STRATA_EPSILON, InSrcThicknessInCm)), 0.0f);
}

void EnableSlabMFPComputationSpace(inout FStrataBSDF BSDF)
{
#if STRATA_INLINE_SHADING
	// Now we know that this is a simple volume so we can freely set the mean free path
	SLAB_SSSMFP(BSDF) = BSDF.TmpMFP;
#endif

	// Rescale the BSDF mean free path so that we can drop the thickness parameter and run volumetric material math on a unit slab of medium
	// For instance, if thickness is larger => we need to reduce the MFP for the medium to appear visually thicker.
	SLAB_SSSMFP(BSDF) = RescaleMFPToComputationSpace(SLAB_SSSMFP(BSDF), BSDF_GETTHICKNESSCM(BSDF), STRATA_SIMPLEVOLUME_THICKNESS_CM);
}

void EnableSlabBSDFSimpleVolumetric(inout FStrataBSDF BSDF)
{
	EnableSlabMFPComputationSpace(BSDF);

	// Mark the BSDF has not having any SSS through post process.
	BSDF_SETSSSTYPE(BSDF, SSS_TYPE_INVALID);

	// Notify that the Slab can use SSS post-process only if at the bottom (layered considered optically thick, e.g. cannot see-through)
	// When forward rendering is used or if a layer is not a bottom layer, SSS post cannot be used and simple scattering is used.
	BSDF_SETISSIMPLEVOLUME(BSDF, 1);
}

void EnableSlabBSDFIsThin(inout FStrataBSDF BSDF)
{
	// BSDF_SETISTHIN is already set when creating the Slab.
	BSDF_SETISSIMPLEVOLUME(BSDF, 0);
	EnableSlabMFPComputationSpace(BSDF);
}

///////////////////////////////////////////////////////////////////////////////
// Generic BSDF accessors

uint StrataGetBSDFType(in FStrataBSDF BSDF)
{
	return BSDF_GETTYPE(BSDF);
}

float3 StrataGetBSDFBaseColor(in FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			return lerp(SLAB_DIFFUSEALBEDO(BSDF), SLAB_F0(BSDF), F0RGBToMetallic(SLAB_F0(BSDF)));  // This BaseColor recovery based on Metallic recovers is not accurate, and only used for legacy conversion purpose (e.g., PostProcessMaterial texture access)
	case STRATA_BSDF_TYPE_HAIR: 			return HAIR_BASECOLOR(BSDF);
	case STRATA_BSDF_TYPE_EYE: 				return EYE_DIFFUSEALBEDO(BSDF);
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: return SLW_BASECOLOR(BSDF);
	}
	return 0.f;
}

float3 StrataGetBSDFDiffuseColor(in FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			return SLAB_DIFFUSEALBEDO(BSDF);
	case STRATA_BSDF_TYPE_HAIR: 			return HAIR_BASECOLOR(BSDF);
	case STRATA_BSDF_TYPE_EYE: 				return EYE_DIFFUSEALBEDO(BSDF);
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: return SLW_BASECOLOR(BSDF);
	}
	return 0.f;
}

void StrataSetBSDFDiffuseColor(inout FStrataBSDF BSDF, float3 InColor)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			SLAB_DIFFUSEALBEDO(BSDF) = InColor; break;
	case STRATA_BSDF_TYPE_HAIR: 			HAIR_BASECOLOR(BSDF) = InColor; break;
	case STRATA_BSDF_TYPE_EYE: 				EYE_DIFFUSEALBEDO(BSDF) = InColor; break;
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: SLW_BASECOLOR(BSDF) = InColor; break;
	}
}

float3 StrataGetBSDFSpecularF0(in FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			return SLAB_F0(BSDF);
	case STRATA_BSDF_TYPE_HAIR: 			return DielectricSpecularToF0(HAIR_SPECULAR(BSDF));
	case STRATA_BSDF_TYPE_EYE: 				return EYE_F0(BSDF);
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: return DielectricSpecularToF0(SLW_SPECULAR(BSDF));
	}
	return 0.f;
}
float3 StrataGetBSDFSpecularColor(in FStrataBSDF BSDF) { return StrataGetBSDFSpecularF0(BSDF);  }

float3 StrataGetBSDFSpecularF90(in FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			return SLAB_F90(BSDF);
	case STRATA_BSDF_TYPE_HAIR: 			return 1.0f;
	case STRATA_BSDF_TYPE_EYE: 				return EYE_F90(BSDF);
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: return 1.0f;
	}
	return 0.f;
}

void StrataSetBSDFSpecularF0(in FStrataBSDF BSDF, float3 F0)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			SLAB_F0(BSDF) = F0; break;
	case STRATA_BSDF_TYPE_HAIR: 			HAIR_SPECULAR(BSDF) = F0ToDielectricSpecular(max3(F0.x, F0.y, F0.z)); break;
	case STRATA_BSDF_TYPE_EYE: 				/* EYE_F0 us hardcoded */ break;
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: SLW_SPECULAR(BSDF) = F0ToDielectricSpecular(max3(F0.x, F0.y, F0.z)); break;
	}
}

void StrataSetBSDFSpecularF90(in FStrataBSDF BSDF, float3 F90)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			SLAB_F90(BSDF) = F90; break;
	case STRATA_BSDF_TYPE_HAIR: 			break;
	case STRATA_BSDF_TYPE_EYE: 				break;
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: break;
	}
}

float3 StrataGetBSDFSubSurfaceColor(in FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			return BSDF_GETSSSTYPE(BSDF) != SSS_TYPE_INVALID ? SLAB_DIFFUSEALBEDO(BSDF) : 0; // A more accurate version would be IsotropicMediumSlabPunctualDirectionalAlbedo(StrataSlabCreateParticipatingMedia(SLAB_DIFFUSEALBEDO(BSDF), SLAB_SSSMFP(BSDFContext.BSDF)));
	case STRATA_BSDF_TYPE_HAIR: 			return 0;
	case STRATA_BSDF_TYPE_EYE: 				return EYE_DIFFUSEALBEDO(BSDF);
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: return 0;
	}
	return 0.f;
}

float StrataGetBSDFSpecular(in FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			return F0ToDielectricSpecular(SLAB_F0(BSDF).x);
	case STRATA_BSDF_TYPE_HAIR: 			return HAIR_SPECULAR(BSDF);
	case STRATA_BSDF_TYPE_EYE: 				return F0ToDielectricSpecular(EYE_F0(BSDF));
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: return SLW_SPECULAR(BSDF);
	}
	return 0.f;
}

float StrataGetBSDFMetallic(in FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			return F0RGBToMetallic(SLAB_F0(BSDF)); // Metallic recovers is not accurate, and only used for legacy conversion purpose (e.g., PostProcessMaterial texture access)
	case STRATA_BSDF_TYPE_HAIR: 			return 0;
	case STRATA_BSDF_TYPE_EYE: 				return 0;
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: return 0;
	}
	return 0.f;
}

float StrataGetBSDFRoughness(in FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			return SLAB_ROUGHNESS(BSDF);
	case STRATA_BSDF_TYPE_HAIR: 			return HAIR_ROUGHNESS(BSDF);
	case STRATA_BSDF_TYPE_EYE: 				return EYE_ROUGHNESS(BSDF);
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: return SLW_ROUGHNESS(BSDF);
	}
	return 0.f;
}

void StrataSetBSDFRoughness(inout FStrataBSDF BSDF, in float Roughness)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			SLAB_ROUGHNESS(BSDF) = Roughness; break;
	case STRATA_BSDF_TYPE_HAIR: 			HAIR_ROUGHNESS(BSDF) = Roughness; break;
	case STRATA_BSDF_TYPE_EYE: 				EYE_ROUGHNESS(BSDF)  = Roughness; break;
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: SLW_ROUGHNESS(BSDF)  = Roughness; break;
	}
}

float StrataGetBSDFAnisotropy(in FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB: 			return BSDF_GETHASANISOTROPY(BSDF) ? SLAB_ANISOTROPY(BSDF) : 0.f;
	case STRATA_BSDF_TYPE_HAIR: 			return 0;
	case STRATA_BSDF_TYPE_EYE: 				return 0;
	case STRATA_BSDF_TYPE_SINGLELAYERWATER: return 0;
	}
	return 0.f;
}

float3 StrataGetBSDFEmissive(in FStrataBSDF BSDF)
{	
	return BSDF_GETEMISSIVE(BSDF);
}

float3 StrataGetWorldNormal(in FStrataPixelHeader Header, in FStrataBSDF BSDF, in const FStrataAddressing Addressing)
{
	return StrataGetBSDFSharedBasis_DeferredShading(Header, BSDF, Addressing)[2];
}

float3 StrataGetWorldTangent(in FStrataPixelHeader Header, in FStrataBSDF BSDF, in const FStrataAddressing Addressing)
{
	return StrataGetBSDFSharedBasis_DeferredShading(Header, BSDF, Addressing)[0];
}

float StrataGetAO(in FStrataPixelHeader Header)
{
	return StrataUnpackIrradianceAndOcclusion(HEADER_GETIRRADIANCE_AO(Header.State)).MaterialAO;
}

FStrataIrradianceAndOcclusion StrataGetIrradianceAndAO(in FStrataPixelHeader Header)
{
	return StrataUnpackIrradianceAndOcclusion(HEADER_GETIRRADIANCE_AO(Header.State));
}

float StrataGetLegacyShadingModels(in FStrataBSDF BSDF)
{
	switch (BSDF_GETTYPE(BSDF))
	{
	case STRATA_BSDF_TYPE_SLAB:
	{
		// Base on features, we can only partially recovers the original shading models. Shading models like foliage, eye, clear coat are impossible/harder to infer.
		if (BSDF_GETSSSTYPE(BSDF) == SSS_TYPE_DIFFUSION_PROFILE){ return SHADINGMODELID_SUBSURFACE_PROFILE; }
		else if (BSDF_GETSSSTYPE(BSDF) != SSS_TYPE_INVALID)		{ return SHADINGMODELID_SUBSURFACE; }
		else if (BSDF_GETHASFUZZ(BSDF))							{ return SHADINGMODELID_CLOTH; }
		else if (BSDF_GETHASFUZZ(BSDF))							{ return SHADINGMODELID_TWOSIDED_FOLIAGE; }
		else													{ return SHADINGMODELID_DEFAULT_LIT; }
	}
	case STRATA_BSDF_TYPE_HAIR: 								{ return SHADINGMODELID_HAIR; }
	case STRATA_BSDF_TYPE_EYE: 									{ return SHADINGMODELID_EYE; }
	case STRATA_BSDF_TYPE_SINGLELAYERWATER:						{ return SHADINGMODELID_SINGLELAYERWATER; }
	}
	return 0.f;
}

///////////////////////////////////////////////////////////////////////////////
// BSDFs packing/unpacking
// 11G11B10F and 10F are unsigned float format

float3 sqrtFast3(float3 In) { return float3(sqrtFast(In.x), sqrtFast(In.y), sqrtFast(In.z)); }

half3 StrataLinearToSrgb(half3 In)
{
#if STRATA_USE_ACCURATE_SRGB
	return LinearToSrgb(In);
#else
	return sqrtFast3(In); // Simple gamma 2.0
#endif
}

half3 StrataSrgbToLinear(half3 In)
{
#if STRATA_USE_ACCURATE_SRGB
	return sRGBToLinear(In);
#else
	return In * In; // Simple gamma 2.0
#endif
}

uint Pack10F(float Value)
{
	return (f32tof16(Value) >> 5) & 0x000003FF;
}

float Unpack10F(uint Value)
{
	return f16tof32((Value << 5) & 0x7FE0);
}

uint PackR11G11B10F(float3 rgb)
{
	uint r = (f32tof16(rgb.r) << 17) & 0xFFE00000;
	uint g = (f32tof16(rgb.g) << 6)  & 0x001FFC00;
	uint b = (f32tof16(rgb.b) >> 5)  & 0x000003FF;
	return r | g | b;
}

float3 UnpackR11G11B10F(uint rgb)
{
	float r = f16tof32((rgb >> 17) & 0x7FF0);
	float g = f16tof32((rgb >> 6)  & 0x7FF0);
	float b = f16tof32((rgb << 5)  & 0x7FE0);
	return float3(r, g, b);
}

uint PackR10G10B10F(float3 rgb)
{
	uint r = (f32tof16(rgb.r) << 15) & 0x3FF00000;  // 0011 1111 1111 0000 0000 0000 0000 0000 
	uint g = (f32tof16(rgb.g) << 5)  & 0x000FFC00;  // 0000 0000 0000 1111 1111 1100 0000 0000 
	uint b = (f32tof16(rgb.b) >> 5)  & 0x000003FF;	// 0000 0000 0000 0000 0000 0011 1111 1111
	return r | g | b;
}

float3 UnpackR10G10B10F(uint rgb)
{
	float r = f16tof32((rgb >> 15) & 0x7FE0);
	float g = f16tof32((rgb >> 5)  & 0x7FE0);
	float b = f16tof32((rgb << 5)  & 0x7FE0);
	return float3(r, g, b);
}

uint PackRG16(float2 In)
{
#if COMPILER_SUPPORTS_PACK_INTRINSICS
	return PackUInt2ToUInt(f32tof16(In.r), f32tof16(In.g));
#else
	return f32tof16(In.r) | (f32tof16(In.g) << 16);
#endif
}

float2 UnpackRG16(uint In)
{
	return float2(f16tof32(In), f16tof32(In>>16));
}

uint2 PackR16G16B16A16F(float4 In)
{
	return uint2(PackRG16(In.xy), PackRG16(In.zw));
}

float4 UnpackR16G16B16A16F(uint2 In)
{
	return float4(UnpackRG16(In.x), UnpackRG16(In.y));
}

uint PackColorLinearToGamma2(float3 In)
{
	return PackRGBA8(float4(StrataLinearToSrgb(saturate(In.rgb)), 0));
}

float3 UnpackColorGamma2ToLinear(uint In)
{
	float3 Out = UnpackRGBA8(In).xyz;
	return StrataSrgbToLinear(Out.rgb);
}

uint PackColorLinearToGamma2AlphaLinear(float4 In)
{
	return PackRGBA8(float4(StrataLinearToSrgb(saturate(In.rgb)), In.a));
}

float4 UnpackColorGamma2ToLinearAlphaLinear(uint In)
{
	float4 Out = UnpackRGBA8(In);
	return float4(StrataSrgbToLinear(Out.rgb), Out.a);
}

uint PackR8(float Value)
{
	return uint(saturate(Value) * 255.0f);
}

float UnpackR8(uint In)
{
#if COMPILER_SUPPORTS_UNPACKBYTEN
	return UnpackByte0(In) * (1.0f / 255.0f);
#else
	return float(In & 0xFF) * (1.0f / 255.0f);
#endif
}

uint PackRGBA8(float4 In)
{
#if COMPILER_SUPPORTS_PACK_INTRINSICS
	return PackFloat4ToUInt(saturate(In) * 255.0f);
#else
	uint r = (uint(saturate(In.r) * 255.0f) << 0);
	uint g = (uint(saturate(In.g) * 255.0f) << 8);
	uint b = (uint(saturate(In.b) * 255.0f) << 16);
	uint a = (uint(saturate(In.a) * 255.0f) << 24);
	return r | g | b | a;
#endif
}

float4 UnpackRGBA8(uint In)
{
#if COMPILER_SUPPORTS_UNPACKBYTEN
	return float4(
		UnpackByte0(In),
		UnpackByte1(In),
		UnpackByte2(In),
		UnpackByte3(In)) * (1.0f / 255.0f);
#else
	float4 Out;
	Out.r = float((In >> 0)  & 0xFF) * (1.0f/255.0f);
	Out.g = float((In >> 8)  & 0xFF) * (1.0f/255.0f);
	Out.b = float((In >> 16) & 0xFF) * (1.0f/255.0f);
	Out.a = float((In >> 24) & 0xFF) * (1.0f/255.0f);
	return Out;
#endif
}

uint PackR7G7B6Gamma2(float3 rgb, float Dither)
{
	// We execute a dither that can go in positive/negative direction to avoid surfaces to looks overall brighter.
	const float CenteredDither = Dither - 0.5f;
	const float Dither8bits = CenteredDither * 1.0f / 255.0f;
	const float Dither7bits = CenteredDither * 1.0f / 127.0f;
	const float Dither6bits = CenteredDither * 1.0f / 63.0f;
	const float3 Dither776 = float3(Dither7bits, Dither7bits, Dither6bits);

	// Dither value to hide more aggressive bit reduction.
	const float3 dithered_rgb = DitherIfNonBlack(StrataLinearToSrgb(saturate(rgb)), Dither776);

	uint r = (uint(dithered_rgb.r * 127.0f) << 0);
	uint g = (uint(dithered_rgb.g * 127.0f) << 7);
	uint b = (uint(dithered_rgb.b *  63.0f) << 14);
	return r | g | b;
}

float3 UnpackR7G7B6Gamma2(uint rgb)
{
	float3 Out;
	Out.r = float((rgb >> 0)  & 0x7F) * (1.0f / 127.0f);
	Out.g = float((rgb >> 7)  & 0x7F) * (1.0f / 127.0f);
	Out.b = float((rgb >> 14) & 0x3F) * (1.0f /  63.0f);

	return StrataSrgbToLinear(Out);
}

uint PackR7G7B6Linear(float3 rgb, float Dither)
{
	// We execute a dither that can go in positive/negative direction to avoid surfaces to looks overall brighter.
	const float CenteredDither = Dither - 0.5f;
	const float Dither8bits = CenteredDither * 1.0f / 255.0f;
	const float Dither7bits = CenteredDither * 1.0f / 127.0f;
	const float Dither6bits = CenteredDither * 1.0f / 63.0f;
	const float3 Dither776 = float3(Dither7bits, Dither7bits, Dither6bits);

	// Dither value to hide more aggressive bit reduction.
	const float3 dithered_rgb = DitherIfNonBlack(saturate(rgb), Dither776);

	uint r = (uint(dithered_rgb.r * 127.0f) << 0);
	uint g = (uint(dithered_rgb.g * 127.0f) << 7);
	uint b = (uint(dithered_rgb.b *  63.0f) << 14);
	return r | g | b;
}

float3 UnpackR7G7B6Linear(uint rgb)
{
	float3 Out;
	Out.r = float((rgb >> 0)  & 0x7F) * (1.0f / 127.0f);
	Out.g = float((rgb >> 7)  & 0x7F) * (1.0f / 127.0f);
	Out.b = float((rgb >> 14) & 0x3F) * (1.0f /  63.0f);
	return Out;
}

uint PackR7(float Value, float Dither)
{
	const float CenteredDither = Dither - 0.5f;
	const float Dither7bits = CenteredDither * 1.0f / 127.0f;
	const float DitheredValue = DitherIfNonBlack(saturate(Value), Dither7bits);
	return uint(DitheredValue * 127.0f);
}

float UnpackR7(uint Value)
{
	return float(Value & 0x7F) * (1.0f / 127.0f);
}

uint PackR6(float Value, float Dither)
{
	const float CenteredDither = Dither - 0.5f;
	const float Dither7bits = CenteredDither * 1.0f / 63.0f;
	const float DitheredValue = DitherIfNonBlack(saturate(Value), Dither7bits);
	return uint(DitheredValue * 63.0f);
}

float UnpackR6(uint Value)
{
	return float(Value & 0x3F) * (1.0f / 63.0f);
}

// Simple Octahedral from "A Survey of Efficient Representations for Independent Unit Vectors" http://jcgt.org/published/0003/02/01/
float SignNotZero(in float k)
{
	return k >= 0.0 ? 1.0 : -1.0;
}
float2 SignNotZero(in float2 v)
{
	return float2(SignNotZero(v.x), SignNotZero(v.y));
}

uint StrataPackNormal(in float3 Normal)
{
	return PackRG16(UnitVectorToOctahedron(Normal));
}

float3 StrataUnpackNormal(uint PackedNormal)
{
	return OctahedronToUnitVector(UnpackRG16(PackedNormal));
}

uint StrataPackNormal24(in float3 Normal)
{
	const float2 Result = UnitVectorToOctahedron(Normal);
	const uint2 PackedXY = uint2(clamp(Result * 2047.0f + 2048.0f, 0.0f, 4095.0f));
	return PackedXY.x | (PackedXY.y << 12);
}

float3 StrataUnpackNormal24(uint PackedNormal)
{
	const int2 XY12Bits = int2(0xFFF & PackedNormal, 0xFFF & (PackedNormal >> 12));
	const float2 xy = float2(XY12Bits - 2048) / 2047.0f;
	return OctahedronToUnitVector(xy);
}

uint StrataPackNormal22(in float3 Normal)
{
	const float2 Result = UnitVectorToOctahedron(Normal);
	const uint2 PackedXY = uint2(clamp(Result * 1023.0f + 1024.0f, 0.0f, 2047.0f));
	return PackedXY.x | (PackedXY.y << 11);
}

float3 StrataUnpackNormal22(uint PackedNormal)
{
	const int2 XY11Bits = int2(0x7FF & PackedNormal, 0x7FF & (PackedNormal >> 11));
	const float2 xy = float2(XY11Bits - 1024) / 1023.0f;
	return OctahedronToUnitVector(xy);
}


#define STRATA_TANGENT_SYMMETRY 1
uint StrataPackNormalAndTangent(in float3 Normal, in float3 Tangent)
{
	uint X10Bits;
	uint Y10Bits;
	uint Z11Bits;
	uint W1Bit;

	// Oct. encoding for the normal
	{
		float l1norm = abs(Normal.x) + abs(Normal.y) + abs(Normal.z);
		float2 result = Normal.xy * (1.0 / l1norm);
		if (Normal.z < 0.0)
		{
			result = (1.0 - abs(result.yx)) * SignNotZero(result.xy);
		}
		X10Bits = uint(clamp(result.x * 511.0f + 512.0f, 0.0f, 1023.0f));
		Y10Bits = uint(clamp(result.y * 511.0f + 512.0f, 0.0f, 1023.0f));
	}

	// Oct. encoding for the projected tangent, relative to an generated ortho frame based on normal
	{
		// Use the quantize normal to regenerate the ortho. frame. This removes discontinuities
		float x = float(int(X10Bits) - 512) / 511.0f;
		float y = float(int(Y10Bits) - 512) / 511.0f;
		Normal = float3(x, y, 1.0f - abs(x) - abs(y));
		if (Normal.z < 0.0f)
		{
			Normal.xy = (1.0f - abs(Normal.yx)) * SignNotZero(Normal.xy);
		}
		Normal = normalize(Normal);

		float3x3 LocalRef = GetTangentBasis(Normal);
		float2 ProjXY = float2(dot(LocalRef[0], Tangent), dot(LocalRef[1], Tangent));
	#if STRATA_TANGENT_SYMMETRY
		// Use symmetry to improve precision
		ProjXY = ProjXY.x >= 0 ? ProjXY : -ProjXY.xy;
	#endif
		float l1norm = abs(ProjXY.x) + abs(ProjXY.y);
		float2 result = ProjXY.xy * (1.0 / l1norm);

	#if STRATA_TANGENT_SYMMETRY
		Z11Bits = uint(clamp(result.x * 2047.0f, 0.0f, 2047.0f));
	#else
		Z11Bits = uint(clamp(result.x * 1023.0f + 1024.0f, 0.0f, 2047.0f));
	#endif
		W1Bit   = ProjXY.y >= 0 ? 1u : 0u;
	}

	return
		 (0x3FF & X10Bits)        | 
		((0x3FF & Y10Bits) << 10) | 
		((0x7FF & Z11Bits) << 20) |
		((0x1   & W1Bit  ) << 31);
}

void StrataUnpackNormalAndTangent(inout float3 Normal, inout float3 Tangent, in uint InPacked)
{
	uint X10Bits = 0x3FF &  InPacked;
	uint Y10Bits = 0x3FF & (InPacked>>10);
	uint Z11bits = 0x7FF & (InPacked>>20);
	uint W1Bit   = 0x1   & (InPacked>>31);

	// Oct. decoding for the normal
	{
		float x = float(int(X10Bits) - 512) / 511.0f;
		float y = float(int(Y10Bits) - 512) / 511.0f;

		Normal = float3(x, y, 1.0f - abs(x) - abs(y));
		if (Normal.z < 0.0f)
		{
			Normal.xy = (1.0f - abs(Normal.yx)) * SignNotZero(Normal.xy);
		}
		Normal = normalize(Normal);
	}

	// Oct. decoding for the projected tangent, relative to an generated ortho frame based on normal
	{
		// Create intermediate basis
		float3x3 LocalRef = GetTangentBasis(Normal);
	#if STRATA_TANGENT_SYMMETRY
		float x = float(Z11bits) / 2047.0f;
	#else
		float x = float(int(Z11bits) - 1024) / 1023.0f;
	#endif
		float Sign = (W1Bit > 0 ? 1 : -1);
		float2 ProjX = float2(x, 1.0f - abs(x));
		Tangent = LocalRef[0] * ProjX.x + LocalRef[1] * ProjX.y * Sign;
		Tangent = normalize(Tangent);
	}
}

void StrataLoad_R11G11B10F(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, inout float3 A)
{
	A = UnpackR11G11B10F(StrataLoadUint1(StrataBuffer, StrataAddressing));
}

void StrataLoad_R11_G11_B10F(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, inout float A, inout float B, inout float C)
{
	float3 temp = UnpackR11G11B10F(StrataLoadUint1(StrataBuffer, StrataAddressing));
	A = temp.x;
	B = temp.y;
	C = temp.z;
}

void StrataLoad_ColorGamma2ToLinear(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, inout float3 A)
{
	A = UnpackColorGamma2ToLinear(StrataLoadUint1(StrataBuffer, StrataAddressing));
}

void StrataLoad_ColorGamma2ToLinearAlphaLinear(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, inout float3 RGB, inout float A)
{
	float4 Data = UnpackColorGamma2ToLinearAlphaLinear(StrataLoadUint1(StrataBuffer, StrataAddressing));
	RGB = Data.rgb;
	A = Data.a;
}

///////////////////////////////////////////////////////////////////////////////
// Strata decal

// Dbuffer support only a single layer, with minimal set of feature (i.e., no anisotropy, ...);
// This special structure is for easing data processing
struct FStrataDBuffer
{
	float3 WorldNormal;
	float  Roughness;
	float3 BaseColor;
	float  Specular;
	float3 Emissive;
	float  Metallic;
	float  Coverage;

	// Per-component coverage 
	// Since DBuffer properties are blended independently, they can end-up with varying coverage per-property. 
	// These values are only valid when *reading* DBuffer Value
	float  OneMinusCoverage;
	float  OneMinusCoverage_BaseColor;
	float  OneMinusCoverage_WorldNormal;
	float  OneMinusCoverage_Roughness;
};

void StrataPackDBuffer(
	in FStrataDBuffer In,
	out float4 Out0,
	out float4 Out1,
	out float4 Out2,
	out float4 Out3)
{
	// DBuffer packing needs to be blendable
	Out0 = float4(In.Emissive,  In.Coverage);
	Out1 = float4(In.BaseColor, In.Coverage);
	Out2 = float4(In.WorldNormal * 0.5f + 128.0f / 255.0f, In.Coverage);
	Out3 = float4(In.Metallic, In.Specular, In.Roughness, In.Coverage);
}

FStrataDBuffer StrataUnpackDBuffer(
	in float4 In1,
	in float4 In2,
	in float4 In3)
{
	FStrataDBuffer Out = (FStrataDBuffer)0;

	// Per-component coverage
	Out.OneMinusCoverage			 = (In1.w + In2.w + In3.w) / 3.0f;
	Out.OneMinusCoverage_BaseColor   = In1.w;
	Out.OneMinusCoverage_WorldNormal = In2.w;
	Out.OneMinusCoverage_Roughness   = In3.w;

	// Unpack data
	Out.BaseColor   = In1.xyz;
	Out.Coverage    = 1.f - Out.OneMinusCoverage;
	Out.WorldNormal = In2.rgb * 2 - (256.0 / 255.0);
	Out.Metallic    = In3.x;
	Out.Specular    = In3.y;
	Out.Roughness   = In3.z;
	Out.Emissive    = 0.f;


	return Out;
}

FStrataDBuffer StrataConvertToDBuffer(
	in FStrataPixelHeader InHeader,
	in FStrataBSDF InBSDF)
{
	FStrataDBuffer Out = (FStrataDBuffer)0;

#if STRATA_INLINE_SHADING

	const float3 DiffuseColor = SLAB_DIFFUSEALBEDO(InBSDF);
	const float3 F0 = SLAB_F0(InBSDF);

	Out.Roughness = SLAB_ROUGHNESS(InBSDF);
	Out.Metallic = F0RGBToMetallic(F0);
	Out.Specular = F0RGBToDielectricSpecular(F0);
	Out.BaseColor = lerp(DiffuseColor, F0, Out.Metallic);
	Out.Emissive = BSDF_GETEMISSIVE(InBSDF);
	Out.WorldNormal = InHeader.SharedLocalBases.Normals[BSDF_GETSHAREDLOCALBASISID(InBSDF)];
	Out.Coverage = InBSDF.Coverage;

#else
	Out.WorldNormal = float3(0,0,1);
	Out.Coverage = 1.f;
#endif
	return Out;
}

void StrataConvertFromDBuffer(
	in FStrataDBuffer In,
	inout FStrataPixelHeader OutHeader,
	inout FStrataData OutData)
{
	// Header
	const uint SharedLocalBasisIndex = 0;
	uint SharedLocalBasisTypes = 0;
	OutHeader.BSDFCount = 1;
#if STRATA_INLINE_SHADING
	OutHeader.SharedLocalBases = StrataInitialiseSharedLocalBases();
	OutHeader.SharedLocalBases.Normals[SharedLocalBasisIndex] = In.WorldNormal;
	OutHeader.SharedLocalBases.Tangents[SharedLocalBasisIndex] = 0.f;
	OutHeader.IrradianceAO = InitIrradianceAndOcclusion();
#endif
	OutHeader.State = 0;
	SetMaterialMode(OutHeader, HEADER_MATERIALMODE_SLAB_SIMPLE);

	// Decal only support a single Slab BSDF with no-anisotropy
	const FStrataPixelFootprint PixelFootprint = (FStrataPixelFootprint)0;
	const float DefaultThicknessCm = STRATA_LAYER_DEFAULT_THICKNESS_CM;
	OutData = GetStrataSlabBSDF(
		PixelFootprint,		// PixelFootprint
		ComputeDiffuseAlbedo(In.BaseColor, In.Metallic),
		ComputeF0(In.Specular, In.BaseColor, In.Metallic),
		1.0f,				// F90
		In.Roughness,		// Roughness
		0.f,				// Anisotropy
		0.f,				// SSSProfileID
		0.f,				// SSSMFP
		0.f,				// SSSMFPScale
		0.f,				// SSSPhaseAniso
		0.f,				// UseSSSDiffusion
		0.f,				// Emissive
		0.f,				// SecondRoughness
		0.f,				// SecondRoughnessWeight
		0.f,				// SecondRoughnessAsSimpleClearCoat
		0.f,				// FuzzAmount
		0.f,				// FuzzColor
		In.Roughness,		// FuzzRoughness
		DefaultThicknessCm,
		false,				// bIsThinSurface,
		SharedLocalBasisIndex,
		SharedLocalBasisTypes);
#if STRATA_INLINE_SHADING
	OutData.InlinedBSDF.Emissive = In.Emissive;
	OutData.InlinedBSDF.Coverage = In.Coverage;
#endif
}

///////////////////////////////////////////////////////////////////////////////
// Integration settings

struct FStrataIntegrationSettings
{
	bool bForceFullyRough;
	bool bRoughDiffuseEnabled;
	bool bRoughnessTracking;

	// Embbeded debug settings
	int  SliceStoringDebugStrataTreeData;
	int  PeelLayersAboveDepth;
};

FStrataIntegrationSettings InitStrataIntegrationSettings(bool bForceFullyRough, bool bRoughDiffuseEnabled, int PeelLayersAboveDepth, bool bRoughnessTracking)
{
	FStrataIntegrationSettings Out;
	Out.bForceFullyRough = bForceFullyRough;
	Out.bRoughDiffuseEnabled = bRoughDiffuseEnabled;
	Out.bRoughnessTracking = bRoughnessTracking;

	Out.PeelLayersAboveDepth = PeelLayersAboveDepth;
	Out.SliceStoringDebugStrataTreeData = -1;
	return Out;
}

FStrataIntegrationSettings InitStrataIntegrationSettings()
{
	return InitStrataIntegrationSettings(false, true, -1, false);
}

///////////////////////////////////////////////////////////////////////////////
// Strata deferred base-pass output

#if STRATA_INLINE_SHADING && STRATA_CLAMPED_BSDF_COUNT > 0

// Forward declaration
void UpdateAllBSDFsOperatorCoverageTransmittance(inout FStrataPixelHeader StrataPixelHeader, inout FStrataTree StrataTree, FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V);
void UpdateAllOperatorsCoverageTransmittance(inout FStrataTree StrataTree);
void UpdateAllBSDFWithBottomUpOperatorVisit(inout FStrataTree StrataTree);
void PreUpdateAllBSDFWithBottomUpOperatorVisit(inout FStrataPixelHeader StrataPixelHeader, inout FStrataTree StrataTree, FStrataAddressing NullStrataAddressing, float3 V);

// Update all Coverage/Transmittance/Weights for all BSDFs based on material topology
void StrataUpdateTree(
	inout FStrataAddressing StrataAddressing,
	inout FStrataPixelHeader StrataPixelHeader,
	inout FStrataTree StrataTree,
	float3 V,
	FStrataIntegrationSettings Settings)
{
	//
	// Pre-Update the BSDF by traversing up the strata tree until the root node. This allows to modify BSDF's parameters based on operators (i.e., thin-film coating)
	//
	PreUpdateAllBSDFWithBottomUpOperatorVisit(StrataPixelHeader, StrataTree, StrataAddressing, V);

	//
	// Update the coverage/transmittance of each leaves (==BSDFs) of the strata tree.
	//
	UpdateAllBSDFsOperatorCoverageTransmittance(StrataPixelHeader, StrataTree, Settings, StrataAddressing, V);

	//
	// Propagate up the coverage/transmittance of each node in the strata tree.
	//
	UpdateAllOperatorsCoverageTransmittance(StrataTree);

	//
	// Update the luminance weight of each BSDF according to the operators it has to traverse up to the strata tree root node.
	//
	UpdateAllBSDFWithBottomUpOperatorVisit(StrataTree);
}

void StrataUpdateTree(
	inout FStrataAddressing StrataAddressing,
	inout FStrataPixelHeader StrataPixelHeader,
	inout FStrataTree StrataTree,
	inout FStrataData StrataData,
	float3 V,
	FStrataIntegrationSettings Settings,
	inout float OutCoverage,
	inout float3 OutTransmittancePreCoverage)
{
	StrataUpdateTree(
		StrataAddressing,
		StrataPixelHeader,
		StrataTree,
		V,
		Settings);

	OutCoverage = saturate(StrataTree.Operators[StrataData.OperatorIndex].Coverage);
	OutTransmittancePreCoverage = saturate(StrataTree.Operators[StrataData.OperatorIndex].ThroughputAlongV);
}

#endif // STRATA_INLINE_SHADING && STRATA_CLAMPED_BSDF_COUNT > 0

///////////////////////////////////////////////////////////////////////////////
// Header and BSDF packing

// Pack only strata header
uint PackStrataHeader(uint InBSDFCount, FStrataPixelHeader InHeader)
{
	uint Out = 0;
	HEADER_SETBSDFCOUNT(Out, InBSDFCount);

#if STRATA_INLINE_SHADING
	HEADER_SETSHAREDLOCALBASESCOUNT(Out, InHeader.SharedLocalBases.Count);
	HEADER_SETSHAREDLOCALBASESTYPE(Out, InHeader.SharedLocalBases.Types);
#endif

	HEADER_SETCOMMONSTATES(Out, InHeader.State);

	return Out;
}

// Unpack only strata header
// If this is changed, please update the compiler side material size evaluation in StrataMaterial.cpp
FStrataPixelHeader UnpackStrataHeaderIn(uint PackedHeader, inout FStrataAddressing StrataAddressing, FStrataTopLayerDataContainer InStrataTopLayerTexture)
{
	FStrataPixelHeader Out = InitialiseStrataPixelHeader();
	Out.State		= HEADER_GETCOMMONSTATES(PackedHeader);	// Unpack state and AO data at the same time 
	Out.BSDFCount   = HEADER_GETBSDFCOUNT(PackedHeader);

	// Use simple or single layout for decoding data
	BRANCH
	if (IsSimpleMaterial(Out) || IsSingleMaterial(Out) || IsEye(Out) || IsHair(Out) || IsSingleLayerWater(Out))
	{
		// Within a tile classified as simple or single, some pixel might be invalid (e.g., sky pixels). 
		// This ensures that invalid pixels are not processed, and keep these tiles as single/simple instead of complex
		Out.BSDFCount = IsStrataMaterial(Out) ? 1 : 0; 

	  #if STRATA_DEFERRED_SHADING
		Out.SharedLocalBasesTypes_PackedHeader = PackedHeader;
		Out.SharedLocalBasesIndexOffset = 0; // Unused

		Out.PackedTopLayerData = StrataLoadTopLayerData(InStrataTopLayerTexture, StrataAddressing);
		StrataAddressing.ReadBytes += 4;
	  #endif
	}
	#if STRATA_COMPLEXPATH
	else
	{
		uint SharedLocalBasesCount = HEADER_GETSHAREDLOCALBASESCOUNT(PackedHeader);
		uint SharedLocalBasesTypes = HEADER_GETSHAREDLOCALBASESTYPE(PackedHeader);

	#if STRATA_DEFERRED_SHADING
		Out.SharedLocalBasesTypes_PackedHeader = SharedLocalBasesTypes;
		Out.PackedTopLayerData = 0;

		// Only keep the offset to the shared local bases memory. We are going to load them on demand.
		Out.SharedLocalBasesIndexOffset = StrataAddressing.CurrentIndex;

		// Now skip over the shared local basis memory to be able to load the BSDF content
		StrataAddressing.CurrentIndex += SharedLocalBasesCount;

		// And account for the space used by normal for the debug information
		StrataAddressing.ReadBytes += SharedLocalBasesCount * STRATA_PACKED_SHAREDLOCALBASIS_STRIDE_BYTES;
	#endif
	}
	#endif // STRATA_COMPLEXPATH

	return Out;
}

FStrataPixelHeader UnpackStrataHeaderIn(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, FStrataTopLayerDataContainer InStrataTopLayerTexture)
{
	uint PackedHeader = StrataLoadUint1(StrataBuffer, StrataAddressing);
	FStrataPixelHeader Out = UnpackStrataHeaderIn(PackedHeader, StrataAddressing, InStrataTopLayerTexture);

#if STRATA_DEFERRED_SHADING
	Out.StrataBuffer = StrataBuffer;
#endif

	return Out;
}

bool IsStrataSlabFastPathCompatible(in FStrataBSDF BSDF)
{
	return (BSDF.State & SLAB_COMPLEX_PATH_MASK) == 0;
}

void UnpackFastPathSlabBSDF(inout FStrataBSDF OutBSDF, uint2 PackedData01)
{
	const uint PackedData8Bits		= PackedData01.y & 0xFF;
	const uint PackedData32Bits		= PackedData01.x;
	const uint PackedF020Bits		= ((PackedData8Bits << 12) & 0xFF000) | (PackedData32Bits & 0xFFF);
	const uint PackedDiffuse20Bits	= (PackedData32Bits >> 12) & 0xFFFFF;

	SLAB_DIFFUSEALBEDO(OutBSDF)	= UnpackR7G7B6Gamma2(PackedDiffuse20Bits);
	SLAB_F0(OutBSDF)			= UnpackR7G7B6Gamma2(PackedF020Bits);

	float4 Data1 = UnpackRGBA8(PackedData01.y);
	SLAB_ROUGHNESS(OutBSDF)			= Data1.y;
	SLAB_ANISOTROPY(OutBSDF)		= Data1.z * 2.f - 1.f;
	SLAB_SSSPHASEANISOTROPY(OutBSDF)= Data1.w * 2.f - 1.f;
}

FStrataBSDF UnpackFastPathStrataBSDFIn(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, FStrataPixelHeader StrataPixelHeader)
{
	FStrataBSDF OutBSDF = (FStrataBSDF)0;

#if STRATA_DEFERRED_SHADING
	uint Data0 = StrataPixelHeader.SharedLocalBasesTypes_PackedHeader;
	uint Data1 = StrataLoadUint1(StrataBuffer, StrataAddressing);
	OutBSDF.State = 0;
	OutBSDF.LuminanceWeightV = 1.0f;
	OutBSDF.CoverageAboveAlongN = 0.0f;
	OutBSDF.TransmittanceAboveAlongN = 1.0f;

	const uint PackedRoughness8bits = 0xFF    & (Data0 >>  HEADER_FASTENCODING_BIT_COUNT);
	const uint PackedData8Bits		= 0xFF    & (Data0 >> (HEADER_FASTENCODING_BIT_COUNT + 8));
	const uint PackedData12Bits		= 0xFFF   & (Data1 >> 20);
	const uint PackedF020Bits		= 0xFFFFF & (Data1);
	const uint PackedDiffuse20Bits	= PackedData12Bits | (PackedData8Bits<<12);

	SLAB_DIFFUSEALBEDO(OutBSDF)	= UnpackR7G7B6Gamma2(PackedDiffuse20Bits);
	SLAB_F0(OutBSDF)			= UnpackR7G7B6Gamma2(PackedF020Bits);
	SLAB_ROUGHNESS(OutBSDF)		= UnpackR8(PackedRoughness8bits);
	SLAB_ANISOTROPY(OutBSDF)	= 0.0f;
#endif

	// This is convenient to not have to test BSDF_GETHASF90 all over the place in the code using the BSDF for such a core value.
	SLAB_F90(OutBSDF) = 1.0f;

	// Force a BSDF state to a single slab with isotropic specular, no subsurface scattering or any other options.
	// This is to help the compiler understand disabled path.
	BSDF_SETTYPE(OutBSDF, STRATA_BSDF_TYPE_SLAB);
	BSDF_SETHASGREYWEIGHT_V(OutBSDF, 1);
	BSDF_SETHASF90(OutBSDF, 0);
	BSDF_SETHASANISOTROPY(OutBSDF, 0);
	BSDF_SETISTOPLAYER(OutBSDF, 1);
	BSDF_SETSSSTYPE(OutBSDF, SSS_TYPE_INVALID);
	BSDF_SETHASHAZINESS(OutBSDF, 0);
	BSDF_SETISSIMPLEVOLUME(OutBSDF, 0);
	BSDF_SETISTHIN(OutBSDF, 0);
	BSDF_SETHASFUZZ(OutBSDF, 0);
	BSDF_SETHASTRANSABOVE(OutBSDF, 0);

	return OutBSDF;
}

FStrataBSDF UnpackFastWaterPathStrataBSDFIn(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, FStrataPixelHeader StrataPixelHeader)
{
	FStrataBSDF OutBSDF = (FStrataBSDF)0;

#if STRATA_DEFERRED_SHADING
	uint Data0 = StrataPixelHeader.SharedLocalBasesTypes_PackedHeader;
	uint Data1 = StrataLoadUint1(StrataBuffer, StrataAddressing);
	OutBSDF.State = 0;
	OutBSDF.LuminanceWeightV = 1.0f;
	OutBSDF.CoverageAboveAlongN = 0.0f;
	OutBSDF.TransmittanceAboveAlongN = 1.0f;

	const uint PackedBaseColor8Bits					= 0xFF   & (Data0 >> (HEADER_FASTENCODING_BIT_COUNT + 8));
	const uint RoughnessAndUseSeparateDirLight8Bits	= 0xFF   & (Data0 >> HEADER_SLWENCODING_BIT_COUNT);
	
	const uint PackedBaseColor12Bits				= 0xFFF  & (Data1 >> 20);
	const uint PackedOpacityMetalSpec20Bits			= 0xFFFFF & Data1;
	const uint PackedBaseColor20Bits				= PackedBaseColor12Bits | (PackedBaseColor8Bits << 12);

	const bool bStoreSeparatedMainDirLight			= RoughnessAndUseSeparateDirLight8Bits & 0x1;

	SLW_ROUGHNESS(OutBSDF)							= UnpackR7(RoughnessAndUseSeparateDirLight8Bits >> 1);
	SLW_BASECOLOR(OutBSDF)							= UnpackR7G7B6Gamma2(PackedBaseColor20Bits);

	const float3 OpacityMetalSpec					= UnpackR7G7B6Linear(PackedOpacityMetalSpec20Bits);
	SLW_TOPMATERIALOPACITY(OutBSDF)					= OpacityMetalSpec.x;
	SLW_METALLIC(OutBSDF)							= OpacityMetalSpec.y;
	SLW_SPECULAR(OutBSDF)							= OpacityMetalSpec.z;
#endif

	// Force a BSDF state to be a single layer on top.
	BSDF_SETTYPE(OutBSDF, STRATA_BSDF_TYPE_SINGLELAYERWATER);
	BSDF_SETHASGREYWEIGHT_V(OutBSDF, 1);
	BSDF_SETHASF90(OutBSDF, 0);
	BSDF_SETHASANISOTROPY(OutBSDF, 0);
	BSDF_SETISTOPLAYER(OutBSDF, 1);
	BSDF_SETSSSTYPE(OutBSDF, SSS_TYPE_INVALID);
	BSDF_SETHASHAZINESS(OutBSDF, 0);
	BSDF_SETISSIMPLEVOLUME(OutBSDF, 0);
	BSDF_SETISTHIN(OutBSDF, 0);
	BSDF_SETHASFUZZ(OutBSDF, 0);
	BSDF_SETHASTRANSABOVE(OutBSDF, 0);

	return OutBSDF;
}

// Unpack a single BSDF
// Note: All BSDF lobes needs to be unpack in a sequential manner since each BSDF has a variable footprint.
// If this is changed, please update the compiler side material size evaluation in StrataMaterial.cpp
FStrataBSDF UnpackStrataBSDFIn(FStrataMaterialContainer StrataBuffer, inout FStrataAddressing StrataAddressing, in FStrataPixelHeader StrataHeader)
{
	BRANCH
	if (IsSimpleMaterial(StrataHeader))
	{
		return UnpackFastPathStrataBSDFIn(StrataBuffer, StrataAddressing, StrataHeader);
	}
	else if (IsSingleLayerWater(StrataHeader))
	{
		return UnpackFastWaterPathStrataBSDFIn(StrataBuffer, StrataAddressing, StrataHeader);
	}

	FStrataBSDF OutBSDF = (FStrataBSDF)0;
	OutBSDF.CoverageAboveAlongN = 0.0f;
	OutBSDF.TransmittanceAboveAlongN = 1.0f;

	float DummyFloat = 0.0f;

	BRANCH
	if (IsSingleMaterial(StrataHeader))
	{
		uint Data = 0;
	#if STRATA_DEFERRED_SHADING
		Data = StrataHeader.SharedLocalBasesTypes_PackedHeader;
	#endif

		// Restore the BSDF common state
		OutBSDF.State = (Data >> (HEADER_SINGLEENCODING_BIT_COUNT + HEADER_SINGLE_OPTLEGACYMODE_BIT_COUNT)) & BSDF_SINGLEENCODING_MASK;

		// STRATA_TODO anisotropy need to be integrated in the optimised legacy single path.
		// For now, single encode doesn't support anisotropy, as the top layer data only contains the normal, not the full frame basis
		BSDF_SETHASANISOTROPY(OutBSDF, 0);

		uint OptimisedLegacyMode = (Data >> (HEADER_SINGLEENCODING_BIT_COUNT)) & HEADER_SINGLE_OPTLEGACYMODE_BIT_MASK;
		if (OptimisedLegacyMode == SINGLE_OPTLEGACYMODE_NONE)
		{
			// General single path
			OutBSDF.LuminanceWeightV = 1.0f;
			const uint BSDFType = StrataGetBSDFType(StrataHeader);
			BSDF_SETTYPE(OutBSDF, BSDFType);
		}
		else
		{
			OutBSDF.State = 0;
			OutBSDF.LuminanceWeightV = 1.0f;
			OutBSDF.CoverageAboveAlongN = 0.0f;
			OutBSDF.TransmittanceAboveAlongN = 1.0f;
			SLAB_F90(OutBSDF) = 1.0f;

			if (OptimisedLegacyMode == SINGLE_OPTLEGACYMODE_CLEARCOAT)
			{
			#if STRATA_DEFERRED_SHADING
				uint Data0 = StrataHeader.SharedLocalBasesTypes_PackedHeader;
				uint Data1 = StrataLoadUint1(StrataBuffer, StrataAddressing);
				uint Data2 = StrataLoadUint1(StrataBuffer, StrataAddressing);

				const uint PackedDiffuse20Bits	= Data1 & 0x000FFFFF;
				const uint PackedF024Bits		= Data2 & 0x00FFFFFF;
				const uint PackedClearCoat16Bits= ((Data1 >> 12) & 0xFF00) | ((Data2 >> 24) & 0x00FF);
				const uint PackedRoughness8Bits = (Data0 >> 24) & 0xFF;

				SLAB_DIFFUSEALBEDO(OutBSDF)	= UnpackR7G7B6Gamma2(PackedDiffuse20Bits);
				SLAB_F0(OutBSDF)			= UnpackRGBA8(PackedF024Bits).xyz;
				SLAB_HAZINESS(OutBSDF)		= PackedClearCoat16Bits;
				SLAB_ROUGHNESS(OutBSDF)		= UnpackR8(PackedRoughness8Bits);
			#endif

				// Force a BSDF state to be a single layer on top.
				BSDF_SETTYPE(OutBSDF, STRATA_BSDF_TYPE_SLAB);
				BSDF_SETHASGREYWEIGHT_V(OutBSDF, 1);
				BSDF_SETHASF90(OutBSDF, 0);
				BSDF_SETHASANISOTROPY(OutBSDF, 0);
				BSDF_SETISTOPLAYER(OutBSDF, 1);
				BSDF_SETSSSTYPE(OutBSDF, SSS_TYPE_INVALID);
				BSDF_SETHASHAZINESS(OutBSDF, 1);
				BSDF_SETISSIMPLEVOLUME(OutBSDF, 0);
				BSDF_SETISTHIN(OutBSDF, 0);
				BSDF_SETHASFUZZ(OutBSDF, 0);
				BSDF_SETHASTRANSABOVE(OutBSDF, 0);
			}
			else if (OptimisedLegacyMode == SINGLE_OPTLEGACYMODE_CLOTH)
			{
			#if STRATA_DEFERRED_SHADING
				uint Data0 = StrataHeader.SharedLocalBasesTypes_PackedHeader;
				uint Data1 = StrataLoadUint1(StrataBuffer, StrataAddressing);
				uint Data2 = StrataLoadUint1(StrataBuffer, StrataAddressing);

				const uint PackedDiffuse20Bits	= Data1 & 0x000FFFFF;
				const uint PackedF020Bits		= Data2 & 0x000FFFFF;
				const uint PackedFuzzColor20bits= ((Data1 >> 10) & 0xFFC00) | ((Data2 >> 20) & 0x03FF);
				const uint PackedFuzzAmount8bits= (Data0 >> (HEADER_SINGLEENCODING_BIT_COUNT + HEADER_SINGLE_OPTLEGACYMODE_BIT_COUNT)) & 0xFF;

				SLAB_DIFFUSEALBEDO(OutBSDF)	= UnpackR7G7B6Gamma2(PackedDiffuse20Bits);
				SLAB_F0(OutBSDF)			= UnpackR7G7B6Gamma2(PackedF020Bits);
				SLAB_FUZZ_COLOR(OutBSDF)	= UnpackR7G7B6Gamma2(PackedFuzzColor20bits);
				SLAB_FUZZ_AMOUNT(OutBSDF)	= UnpackR8(PackedFuzzAmount8bits);
				SLAB_ROUGHNESS(OutBSDF)		= StrataUnpackTopLayerData(StrataHeader.PackedTopLayerData).Roughness;
				SLAB_FUZZ_ROUGHNESS(OutBSDF)= SLAB_ROUGHNESS(OutBSDF);
			#endif

				// Force a BSDF state to be a single layer on top.
				BSDF_SETTYPE(OutBSDF, STRATA_BSDF_TYPE_SLAB);
				BSDF_SETHASGREYWEIGHT_V(OutBSDF, 1);
				BSDF_SETHASF90(OutBSDF, 0);
				BSDF_SETHASANISOTROPY(OutBSDF, 0);
				BSDF_SETISTOPLAYER(OutBSDF, 1);
				BSDF_SETSSSTYPE(OutBSDF, SSS_TYPE_INVALID);
				BSDF_SETHASHAZINESS(OutBSDF, 0);
				BSDF_SETISSIMPLEVOLUME(OutBSDF, 0);
				BSDF_SETISTHIN(OutBSDF, 0);
				BSDF_SETHASFUZZ(OutBSDF, 1);
				BSDF_SETHASTRANSABOVE(OutBSDF, 0);
			}
			else if (OptimisedLegacyMode == SINGLE_OPTLEGACYMODE_SSSWRAP || OptimisedLegacyMode == SINGLE_OPTLEGACYMODE_SSSWRAP_THIN)
			{
			#if STRATA_DEFERRED_SHADING
				uint Data0 = StrataHeader.SharedLocalBasesTypes_PackedHeader;
				uint Data1 = StrataLoadUint1(StrataBuffer, StrataAddressing);
				uint Data2 = StrataLoadUint1(StrataBuffer, StrataAddressing);

				const uint PackedDiffuse20Bits	= Data1 & 0x000FFFFF;
				const uint PackedF020Bits		= Data2 & 0x000FFFFF;
				
				const uint PackedSSSMFP12BitsA = (Data1 >> 20) & 0xFFF;																				// 12 lower bits
				const uint PackedSSSMFP12BitsB = (Data2 >> 20) & 0xFFF;																				// next 12 lower bits
				const uint PackedSSSMFP6BitsC  = (Data0 >> (7 + HEADER_SINGLEENCODING_BIT_COUNT + HEADER_SINGLE_OPTLEGACYMODE_BIT_COUNT)) & 0x03F;	// 6 higher bits
				const uint PackedSSSMFP30bits  = PackedSSSMFP12BitsA | (PackedSSSMFP12BitsB << 12) | (PackedSSSMFP6BitsC << 24);

				const uint PackedSSSWOpacity7bits = (Data0 >> (HEADER_SINGLEENCODING_BIT_COUNT + HEADER_SINGLE_OPTLEGACYMODE_BIT_COUNT)) & 0x7F;
				const float Opacity = UnpackR7(PackedSSSWOpacity7bits);

				SLAB_DIFFUSEALBEDO(OutBSDF)	= UnpackR7G7B6Gamma2(PackedDiffuse20Bits);
				SLAB_F0(OutBSDF)			= UnpackR7G7B6Gamma2(PackedF020Bits);
				SLAB_ROUGHNESS(OutBSDF)		= StrataUnpackTopLayerData(StrataHeader.PackedTopLayerData).Roughness;
				SLAB_SSSMFP(OutBSDF)		= UnpackR10G10B10F(PackedSSSMFP30bits);
				SLAB_SSSPHASEANISOTROPY(OutBSDF)= saturate(1.f - Opacity);
			#endif

				// Force a BSDF state to be a single layer on top.
				BSDF_SETTYPE(OutBSDF, STRATA_BSDF_TYPE_SLAB);
				BSDF_SETHASGREYWEIGHT_V(OutBSDF, 1);
				BSDF_SETHASF90(OutBSDF, 0);
				BSDF_SETHASANISOTROPY(OutBSDF, 0);
				BSDF_SETISTOPLAYER(OutBSDF, 1);
				BSDF_SETSSSTYPE(OutBSDF, SSS_TYPE_WRAP);
				BSDF_SETHASMFP(OutBSDF, 1);
				BSDF_SETHASHAZINESS(OutBSDF, 0);
				BSDF_SETISSIMPLEVOLUME(OutBSDF, 0);
				BSDF_SETISTHIN(OutBSDF, (OptimisedLegacyMode == SINGLE_OPTLEGACYMODE_SSSWRAP_THIN ? 1 : 0));
				BSDF_SETHASFUZZ(OutBSDF, 0);
				BSDF_SETHASTRANSABOVE(OutBSDF, 0);
			}
			else if (OptimisedLegacyMode == SINGLE_OPTLEGACYMODE_SSSPROFILE)
			{
			#if STRATA_DEFERRED_SHADING
				uint Data0 = StrataHeader.SharedLocalBasesTypes_PackedHeader;
				uint Data1 = StrataLoadUint1(StrataBuffer, StrataAddressing);
				uint Data2 = StrataLoadUint1(StrataBuffer, StrataAddressing);

				const uint PackedDiffuse20Bits	= Data1 & 0x000FFFFF;
				const uint PackedF020Bits		= Data2 & 0x000FFFFF;
				
				const float Roughness				= UnpackR8(Data0 >> 24);
				const float SSSProfileRadiusScale	= UnpackR8(Data1 >> 24);
				const float SSSProfileId			= UnpackR8(Data2 >> 24);

				SLAB_DIFFUSEALBEDO(OutBSDF)			= UnpackR7G7B6Gamma2(PackedDiffuse20Bits);
				SLAB_F0(OutBSDF)					= UnpackR7G7B6Gamma2(PackedF020Bits);
				SLAB_ROUGHNESS(OutBSDF)				= Roughness;
				SLAB_SSSPROFILEID(OutBSDF)			= SSSProfileId;
				SLAB_SSSPROFILERADIUSSCALE(OutBSDF)	= SSSProfileRadiusScale;

				// When loading Strata BSDF which have SSS enable, BaseColor and (optionally) Specular value can be overriden 
				// based on the SSS method used (screen space SSS / checherboarded screen space SSS / ...)
				#if STRATA_SSS_MATERIAL_OVERRIDE
				{
					const bool bChecker = CheckerFromPixelPos(StrataAddressing.PixelCoords);
					float3 DiffuseAlbedo = SLAB_DIFFUSEALBEDO(OutBSDF);
					float SpecularFactor = 1.0f;
					AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(DiffuseAlbedo, SpecularFactor, bChecker);
					SLAB_DIFFUSEALBEDO(OutBSDF) = DiffuseAlbedo;
					SLAB_F0(OutBSDF)  *= SpecularFactor;
					SLAB_F90(OutBSDF) *= SpecularFactor;
				}
				#endif
			#endif

				// Force a BSDF state to be a single layer on top.
				BSDF_SETTYPE(OutBSDF, STRATA_BSDF_TYPE_SLAB);
				BSDF_SETHASGREYWEIGHT_V(OutBSDF, 1);
				BSDF_SETHASF90(OutBSDF, 0);
				BSDF_SETHASANISOTROPY(OutBSDF, 0);
				BSDF_SETISTOPLAYER(OutBSDF, 1);
				BSDF_SETSSSTYPE(OutBSDF, SSS_TYPE_DIFFUSION_PROFILE);
				BSDF_SETHASMFP(OutBSDF, 1);
				BSDF_SETHASHAZINESS(OutBSDF, 0);
				BSDF_SETISSIMPLEVOLUME(OutBSDF, 0);
				BSDF_SETISTHIN(OutBSDF, 0);
				BSDF_SETHASFUZZ(OutBSDF, 0);
				BSDF_SETHASTRANSABOVE(OutBSDF, 0);
			}
			return OutBSDF;
		}
	}
	else if (IsEye(StrataHeader))
	{
		uint Data = 0;
	#if STRATA_DEFERRED_SHADING
		Data = StrataHeader.SharedLocalBasesTypes_PackedHeader;
	#endif
		OutBSDF.State = Data & HEADER_EYEENCODING_MASK;
		OutBSDF.LuminanceWeightV = 1.0f;
		BSDF_SETTYPE(OutBSDF, STRATA_BSDF_TYPE_EYE);
		BSDF_SETSHAREDLOCALBASISID(OutBSDF, 0);
		BSDF_SETHASANISOTROPY(OutBSDF, 0);
		BSDF_SETISTOPLAYER(OutBSDF, 1);
		BSDF_SETSSSTYPE(OutBSDF, HasSubsurface(StrataHeader) ? SSS_TYPE_DIFFUSION_PROFILE : SSS_TYPE_INVALID);
	}
	else if (IsHair(StrataHeader))
	{
		uint Data = 0;
	#if STRATA_DEFERRED_SHADING
		Data = StrataHeader.SharedLocalBasesTypes_PackedHeader;
	#endif
		OutBSDF.State = Data & HEADER_HAIRENCODING_MASK;
		OutBSDF.LuminanceWeightV = 1.0f;
		BSDF_SETTYPE(OutBSDF, STRATA_BSDF_TYPE_HAIR);
		BSDF_SETSHAREDLOCALBASISID(OutBSDF, 0);
		BSDF_SETHASANISOTROPY(OutBSDF, 0);
		BSDF_SETISTOPLAYER(OutBSDF, 1);
	}
	else
	{
		OutBSDF.State = StrataLoadUint1(StrataBuffer, StrataAddressing);
		if (BSDF_GETHASGREYWEIGHT_V(OutBSDF))
		{
			OutBSDF.LuminanceWeightV = Unpack10F(BSDF_GETWEIGHT10F(OutBSDF));
		}
		else
		{
			StrataLoad_R11G11B10F(StrataBuffer, StrataAddressing, OutBSDF.LuminanceWeightV);
		}
	}

	const uint BSDFType = BSDF_GETTYPE(OutBSDF);
	BSDF_SETTYPE(OutBSDF, BSDFType);
	switch (BSDFType)
	{
	case STRATA_BSDF_TYPE_SLAB:
	{
		uint DataX = StrataLoadUint1(StrataBuffer, StrataAddressing);
		uint DataY = StrataLoadUint1(StrataBuffer, StrataAddressing);
		UnpackFastPathSlabBSDF(OutBSDF, uint2(DataX, DataY));

		SLAB_F90(OutBSDF) = 1.0f;
		const bool bHasF90 = BSDF_GETHASF90(OutBSDF);
		if (bHasF90 || BSDF_GETHASHAZINESS(OutBSDF))
		{
			uint RawData = StrataLoadUint1(StrataBuffer, StrataAddressing);
			float2 Data = UnpackRGBA8(RawData).xy;

			const float F90Co = Data.x;
			const float F90Cg = Data.y;
			// Setting Y=1 when converting back from YCoCg can lead to components being greater than 1. We fix this using two steps:
			// 1- We apply a simple scale determined manually on Y to keep Hue/Saturation expressivity large and similare to the input color from the base pass,
			//    even though the mapping from saturate to white is not linear.
			const float F90Y  = 1.0f / 3.0f; 
			float3 F90 = bHasF90 ? saturate(NormalisedYCoCg_2_LinearRGB(float3(F90Y, F90Co, F90Cg))) : 1.0f;
			// 2- We re-scale again the final recovered color according to its max component to maximise the brightness/hue similarity with the input color from the base pass.
			const float Divisor = max(F90.r, max(F90.g, F90.b));
			F90 = Divisor > 0.0f ? F90 / Divisor : F90;
			SLAB_F90(OutBSDF) = F90;

			SLAB_HAZINESS(OutBSDF) = RawData >> 16; // Keeping the top 16 bits
		}

		const bool bIsSimpleVolume = BSDF_GETISSIMPLEVOLUME(OutBSDF);
		const bool bHasSSS = BSDF_GETSSSTYPE(OutBSDF) != SSS_TYPE_INVALID;
		if (bHasSSS || bIsSimpleVolume)
		{
			if (BSDF_GETSSSTYPE(OutBSDF) == SSS_TYPE_DIFFUSION_PROFILE && !bIsSimpleVolume)
			{
				float4 Data = UnpackRGBA8(StrataLoadUint1(StrataBuffer, StrataAddressing));
				SLAB_SSSPROFILEID(OutBSDF) = Data.r;
				SLAB_SSSPROFILERADIUSSCALE(OutBSDF) = Data.g;
			}
			else
			{
				StrataLoad_R11G11B10F(StrataBuffer, StrataAddressing, SLAB_SSSMFP(OutBSDF));
			}

			// When loading Strata BSDF which have SSS enable, BaseColor and (optionally) Specular value can be overriden 
			// based on the SSS method used (screen space SSS / checherboarded screen space SSS / ...)
			#if STRATA_SSS_MATERIAL_OVERRIDE
			if (BSDF_GETSSSTYPE(OutBSDF) == SSS_TYPE_DIFFUSION || BSDF_GETSSSTYPE(OutBSDF) == SSS_TYPE_DIFFUSION_PROFILE)
			{
				const bool bChecker = CheckerFromPixelPos(StrataAddressing.PixelCoords);
				float3 DiffuseAlbedo = SLAB_DIFFUSEALBEDO(OutBSDF);
				float SpecularFactor = 1.0f;
				AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(DiffuseAlbedo, SpecularFactor, bChecker);
				SLAB_DIFFUSEALBEDO(OutBSDF) = DiffuseAlbedo;
				SLAB_F0(OutBSDF)  *= SpecularFactor;
				SLAB_F90(OutBSDF) *= SpecularFactor;
			}
			#endif
		}

		if (BSDF_GETHASFUZZ(OutBSDF))
		{
			UnpackFuzz((StrataLoadUint1(StrataBuffer, StrataAddressing)), SLAB_FUZZ_COLOR(OutBSDF), SLAB_FUZZ_AMOUNT(OutBSDF), SLAB_FUZZ_ROUGHNESS(OutBSDF));
		}

		if (BSDF_GETHASTRANSABOVE(OutBSDF))
		{
			StrataLoad_ColorGamma2ToLinearAlphaLinear(StrataBuffer, StrataAddressing, OutBSDF.TransmittanceAboveAlongN, OutBSDF.CoverageAboveAlongN);
		}
	}
	break;
	case STRATA_BSDF_TYPE_HAIR:
	{
		StrataLoad_ColorGamma2ToLinearAlphaLinear(StrataBuffer, StrataAddressing, HAIR_BASECOLOR(OutBSDF), HAIR_ROUGHNESS(OutBSDF));
		float4 Data = UnpackRGBA8(StrataLoadUint1(StrataBuffer, StrataAddressing));
		HAIR_SCATTER(OutBSDF) = Data.x;
		HAIR_SPECULAR(OutBSDF) = Data.y;
		HAIR_BACKLIT(OutBSDF) = Data.z;
		HAIR_COMPLEXTRANSMITTANCE(OutBSDF) = Data.w;
		// 8 bytes
	}
	break;
	case STRATA_BSDF_TYPE_EYE:
	{
		float4 Data0 = 0;
	#if STRATA_DEFERRED_SHADING
		Data0 = UnpackRGBA8(StrataHeader.SharedLocalBasesTypes_PackedHeader);
	#endif
		EYE_IRISMASK(OutBSDF) = Data0.z;
		EYE_IRISDISTANCE(OutBSDF) = Data0.w;

		StrataLoad_ColorGamma2ToLinearAlphaLinear(StrataBuffer, StrataAddressing, EYE_DIFFUSEALBEDO(OutBSDF), EYE_ROUGHNESS(OutBSDF));
		const float4 Data1 = UnpackRGBA8(StrataLoadUint1(StrataBuffer, StrataAddressing));
		EYE_IRISNORMAL(OutBSDF) = OctahedronToUnitVector(Data1.xy * 2.0f - 1.f);
		EYE_IRISPLANENORMAL(OutBSDF) = OctahedronToUnitVector(Data1.zw * 2.0f - 1.f);
		EYE_F0(OutBSDF)  = STRATA_EYE_DEFAULT_F0;
		EYE_F90(OutBSDF) = 1.0f;

		// When loading Strata BSDF which have SSS enable, BaseColor and (optionally) Specular value can be overriden 
		// based on the SSS method used (screen space SSS / checherboarded screen space SSS / ...)
		#if STRATA_SSS_MATERIAL_OVERRIDE
		if (BSDF_GETSSSTYPE(OutBSDF) == SSS_TYPE_DIFFUSION_PROFILE)
		{
			const bool bChecker = CheckerFromPixelPos(StrataAddressing.PixelCoords);
			float3 DiffuseAlbedo = EYE_DIFFUSEALBEDO(OutBSDF);
			float SpecularFactor = 1.0f;
			AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(DiffuseAlbedo, SpecularFactor, bChecker);
			EYE_DIFFUSEALBEDO(OutBSDF) = DiffuseAlbedo;
			EYE_F0(OutBSDF)  *= SpecularFactor;
			EYE_F90(OutBSDF) *= SpecularFactor;
		}
		#endif
		// 8 bytes
	}
	break;
	//case STRATA_BSDF_TYPE_SINGLELAYERWATER: 
	//{
	//	// SLW always use the fast UnpackFastWaterPathStrataBSDFIn path.
	//}
	//break;
	}

	return OutBSDF;
}

#endif // STRATA_ENABLED
