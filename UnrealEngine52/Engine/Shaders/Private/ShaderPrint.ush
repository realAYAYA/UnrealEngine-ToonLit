/*=============================================================================
	ShaderPrint.ush:
	Include this to be able to use ShaderPrint with the global uniforms and buffers.
=============================================================================*/

#pragma once

// ES3.1 doesn't support buffers in structs.
// FXC compiler can't unroll the Print loops correctly when the buffers are in structs.
// FXC compiler can't use buffers which are conditionally initialized.
#if ES3_1_PROFILE || (COMPILER_HLSL && !COMPILER_DXC)
#define SHADER_PRINT_USE_GLOBAL_RESOURCE 1
#else
#define SHADER_PRINT_USE_GLOBAL_RESOURCE 0
#endif

// Global buffers for ShaderPrint collection.
StructuredBuffer<uint> ShaderPrint_StateBuffer;
RWStructuredBuffer<uint> ShaderPrint_RWEntryBuffer;

#if SHADER_PRINT_USE_GLOBAL_RESOURCE
// Use global buffers directly instead of using FShaderPrintContext::Buffers.
#define SHADER_PRINT_RWENTRYBUFFER(Ctx) ShaderPrint_RWEntryBuffer
#define SHADER_PRINT_RWSTATEBUFFER(Ctx) ShaderPrint_StateBuffer
#endif

#include "ShaderPrintCommon.ush"
#include "MiniFontCommon.ush"

FShaderPrintBuffers InitShaderPrintContextBuffers()
{
	FShaderPrintBuffers Buffers;
	Buffers.StateBuffer = ShaderPrint_StateBuffer;
	Buffers.RWEntryBuffer = ShaderPrint_RWEntryBuffer;
	return Buffers;
}

// Initialise FShaderPrintConfig from the ShaderPrintData uniform buffer.
FShaderPrintConfig InitShaderPrintContextConfig()
{
	FShaderPrintConfig Config;
	Config.Resolution = ShaderPrintData.Resolution;
	Config.CursorCoord = ShaderPrintData.CursorCoord;
	Config.TranslatedWorldOffset = ShaderPrintData.TranslatedWorldOffset;
	Config.FontSize = ShaderPrintData.FontSize;
	Config.FontSpacing = ShaderPrintData.FontSpacing;
	Config.MaxValueCount = ShaderPrintData.MaxValueCount;
	Config.MaxSymbolCount = ShaderPrintData.MaxSymbolCount;
	Config.MaxStateCount = ShaderPrintData.MaxStateCount;
	Config.MaxLineCount = ShaderPrintData.MaxLineCount;
	Config.MaxTriangleCount = ShaderPrintData.MaxTriangleCount;
	return Config;
}

// Initialise FShaderPrintContext.
FShaderPrintContext InitShaderPrintContext(bool bActive, float2 InStartPos)
{
	FShaderPrintContext Context;
	Context.bIsActive = bActive;
	Context.StartPos = InStartPos;
	Context.Pos = InStartPos;
	Context.Config = InitShaderPrintContextConfig();
#if !SHADER_PRINT_USE_GLOBAL_RESOURCE
	Context.Buffers = InitShaderPrintContextBuffers();
#endif
	return Context;
}

FShaderPrintContext InitShaderPrintContext(bool bActive, uint2 InStartCoord) 
{
	return InitShaderPrintContext(bActive, float2(InStartCoord) / float2(ShaderPrintData.Resolution));
}

FShaderPrintContext InitShaderPrintContext()
{
	return InitShaderPrintContext(true, float2(0, 0));
}

// Backwards compatibility for client code that didn't use FShaderPrintContext.
int2 GetCursorPos()
{
	return GetCursorPos(InitShaderPrintContext());
}
void AddFilledTriangleWS(float3 Pos0, float3 Pos1, float3 Pos2, float4 Color)
{
	AddFilledTriangleTWS(InitShaderPrintContext(), Pos0, Pos1, Pos2, Color); 
}
void AddFilledQuadWS(float3 Pos0, float3 Pos1, float3 Pos2, float3 Pos3, float4 Color) 
{ 
	AddFilledQuadWS(InitShaderPrintContext(), Pos0, Pos1, Pos2, Pos3, Color);
}
void AddFilledQuadSS(float2 Pos0, float2 Pos1, float4 Color)
{
	AddFilledQuadSS(InitShaderPrintContext(), Pos0, Pos1, Color);
}
void AddLineTWS(float3 Pos0, float3 Pos1, float4 Color)
{
	AddLineTWS(InitShaderPrintContext(), Pos0, Pos1, Color);
}
void AddLineTWS(float3 Pos0, float3 Pos1, float4 Color0, float4 Color1)
{
	AddLineTWS(InitShaderPrintContext(), Pos0, Pos1, Color0, Color1);
}
void AddLineWS(float3 Pos0, float3 Pos1, float4 Color)
{
	AddLineWS(InitShaderPrintContext(), Pos0, Pos1, Color);
}
void AddLineWS(float3 Pos0, float3 Pos1, float4 Color0, float4 Color1) 
{ 
	AddLineWS(InitShaderPrintContext(), Pos0, Pos1, Color0, Color1);
}
void AddLine(float3 Pos0, float3 Pos1, float4 Color) 
{
	AddLine(InitShaderPrintContext(), Pos0, Pos1, Color);
}
void AddLine(float3 Pos0, float3 Pos1, float4 Color0, float4 Color1) 
{
	AddLine(InitShaderPrintContext(), Pos0, Pos1, Color0, Color1);
}
void AddLineSS(float2 Pos0, float2 Pos1, float4 Color) 
{
	AddLineSS(InitShaderPrintContext(), Pos0, Pos1, Color);
}
void AddQuadWS(float3 Pos0, float3 Pos1, float3 Pos2, float3 Pos3, float4 Color) 
{
	AddQuadWS(InitShaderPrintContext(), Pos0, Pos1, Pos2, Pos3, Color);
}
void AddQuad(float3 Pos0, float3 Pos1, float3 Pos2, float3 Pos3, float4 Color) 
{
	AddQuad(InitShaderPrintContext(), Pos0, Pos1, Pos2, Pos3, Color);
}
void AddQuadSS(float2 MinPos, float2 MaxPos, float4 Color)
{
	AddQuadSS(InitShaderPrintContext(), MinPos, MaxPos, Color);
}
void AddAABBTWS(float3 Min, float3 Max, float4 Color) 
{
	AddAABBTWS(InitShaderPrintContext(), Min, Max, Color);
}
void AddAABBWS(float3 Min, float3 Max, float4 Color)
{
	AddAABBWS(InitShaderPrintContext(), Min, Max, Color);
}
void AddAABB(float3 Min, float3 Max, float4 Color) 
{
	AddAABB(InitShaderPrintContext(), Min, Max, Color);
}
void AddCrossWS(float3 Pos, float Size, float4 Color) 
{
	AddCrossWS(InitShaderPrintContext(), Pos, Size, Color);
}
void AddCross(float3 Pos, float Size, float4 Color) 
{
	AddCross(InitShaderPrintContext(), Pos, Size, Color);
}
void AddReferentialWS(float3 Pos, float3x3 InM, float Scale = 1)
{
	AddReferentialWS(InitShaderPrintContext(), Pos, InM, Scale);
}
void AddReferentialWS(float4x4 InM, float Scale = 1) 
{
	AddReferentialWS(InitShaderPrintContext(), InM, Scale);
}
void AddReferentialWS(float3 Pos, float3 TangentZ, float Scale = 1) 
{
	AddReferentialWS(InitShaderPrintContext(), Pos, TangentZ, Scale);
}
void AddReferentialWS(float3 Pos, float3 T, float3 B, float3 N, float Scale = 1)
{
	AddReferentialWS(InitShaderPrintContext(), Pos, T, B, N, Scale);
}
void AddReferential(float3 Pos, float3x3 InM, float Scale = 1) 
{
	AddReferential(InitShaderPrintContext(), Pos, InM, Scale);
}
void AddReferential(float4x4 InM, float Scale = 1) 
{
	AddReferential(InitShaderPrintContext(), InM, Scale);
}
void AddReferential(float3 Pos, float3 TangentZ, float Scale = 1) 
{
	AddReferential(InitShaderPrintContext(), Pos, TangentZ, Scale);
}
void AddReferential(float3 Pos, float3 T, float3 B, float3 N, float Scale = 1) 
{
	AddReferential(InitShaderPrintContext(), Pos, T, B, N, Scale);
}
void AddLineTriangleWS(float3 P0, float3 P1, float3 P2, float4 Color) 
{
	AddLineTriangleWS(InitShaderPrintContext(), P0, P1, P2, Color);
}
void AddLineTriangle(float3 P0, float3 P1, float3 P2, float4 Color) 
{
	AddLineTriangle(InitShaderPrintContext(), P0, P1, P2, Color);
}
void AddOBBWS(float3 Min, float3 Max, float4 Color, float4x4 Transform)
{
	AddOBBWS(InitShaderPrintContext(), Min, Max, Color, Transform);
}
void AddOBB(float3 Min, float3 Max, float4 Color, float4x4 Transform) 
{
	AddOBB(InitShaderPrintContext(), Min, Max, Color, Transform);
}

// Assert (experimental)
// Can be used in any shader binding ShaderPrint uniform buffer. It will print the 
// assert for all pixels/threads not complying to the condition. All print will be 
// stacked correctly.
// 
// Example:
//  Assert(DispatchThreadId < MaxThread, TEXT("Error: ThreadId higher than MaxThread");
// 
// This function also returns a FShaderPrintContext so that one can add more details if needed.
//
// Example:
//  FShaderPrintContext Ctx = Assert(DispatchThreadId < MaxThread, TEXT("Error: thread higher MaxThread");
//  Print(Ctx, DispatchThreadId, FontWhite);
//
FShaderPrintContext Assert(bool Condition, FShaderPrintText Text, uint2 InWritePos = uint2(50, 150))
{
	FShaderPrintContext OutCtx = InitShaderPrintContext(false, InWritePos);
	if (!Condition)
	{
		uint LineOffset = 0;
		InterlockedAdd(ShaderPrint_RWEntryBuffer[3] /* Free counter */, 1, LineOffset);
		InWritePos.y += LineOffset * 12;

		OutCtx = InitShaderPrintContext(true, InWritePos);
		Print(OutCtx, Text, FontRed);
	}

	return OutCtx;
}
