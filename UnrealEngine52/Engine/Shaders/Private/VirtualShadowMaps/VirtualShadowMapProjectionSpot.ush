// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
VirtualShadowMapProjectionSpot.ush:
=============================================================================*/
#pragma once

#include "../DeferredShadingCommon.ush"
#include "../SceneTexturesCommon.ush"
#include "../LightShaderParameters.ush"
#include "../PathTracing/Utilities/PathTracingRandomSequence.ush"
#include "VirtualShadowMapPageAccessCommon.ush"
#include "VirtualShadowMapProjectionCommon.ush"
#include "VirtualShadowMapSMRTCommon.ush"

// Possibly parameterize this at some point, but tradeoffs are not always obvious
#define VIRTUAL_SHADOW_MAP_MAX_SLOPE_BIAS 100.0f

float2 ComputeDepthSlopeLocalUV(
	int VirtualShadowMapId,
	float3 ShadowTranslatedWorldPosition,
	float3 WorldNormal)
{
	FVirtualShadowMapProjectionShaderData ProjectionData = GetVirtualShadowMapProjectionData(VirtualShadowMapId);

	float4 NormalPlaneTranslatedWorld = float4(WorldNormal, -dot(WorldNormal, ShadowTranslatedWorldPosition));
	float4 NormalPlaneUV = mul(NormalPlaneTranslatedWorld, ProjectionData.TranslatedWorldToShadowUVNormalMatrix);
	float2 DepthSlopeUV = -NormalPlaneUV.xy / NormalPlaneUV.z;
	return DepthSlopeUV;
}

float ComputeOptimalSlopeBiasLocal(
	int VirtualShadowMapId,
	float3 ShadowTranslatedWorldPosition,
	float2 DepthSlopeUV,
	bool bClamp = true)
{
	// NOTE: Better to reload the necessary data here based on VSM ID than keep it alive in registers!
	FVirtualShadowMapProjectionShaderData ProjectionData = GetVirtualShadowMapProjectionData(VirtualShadowMapId);

	float4 ShadowUVz = mul(float4(ShadowTranslatedWorldPosition, 1.0f), ProjectionData.TranslatedWorldToShadowUVMatrix);
	ShadowUVz.xyz /= ShadowUVz.w;
	FShadowPageTranslationResult Page = ShadowVirtualToPhysicalUV(ProjectionData.VirtualShadowMapId, ShadowUVz.xy);

	float MipLevelDim = float(CalcLevelDimsTexels(Page.LODOffset));
	float2 TexelCenter = float2(Page.VirtualTexelAddress) + 0.5f;
	float2 TexelCenterOffset = TexelCenter - Page.VirtualTexelAddressFloat;
	float2 TexelCenterOffsetUV = TexelCenterOffset / MipLevelDim;
	float OptimalSlopeBias = 2.0f * max(0.0f, dot(DepthSlopeUV, TexelCenterOffsetUV));

	return OptimalSlopeBias;
}


struct FSMRTSingleRayState
{
	int VirtualShadowMapId;
	float3 RayStartUVz;	
	float3 RayStepUVz;
	float ExtrapolateSlope;
	// Debug output
	int MipLevel;
	uint2 VirtualTexelAddress;
	uint2 PhysicalTexelAddress;
};

FSMRTSingleRayState SMRTSingleRayInitialize(
	int VirtualShadowMapId,
	// Shadow PreViewTranslation already added in
	float3 RayStartShadowTranslatedWorld,
	float3 RayEndShadowTranslatedWorld,
	float ExtrapolateSlope,
	float DepthBias,
	bool bClampUVs = true)
{
	FVirtualShadowMapProjectionShaderData ProjectionData = GetVirtualShadowMapProjectionData(VirtualShadowMapId);

	float4 RayStartUVz = mul(float4(RayStartShadowTranslatedWorld, 1), ProjectionData.TranslatedWorldToShadowUVMatrix).xyzw;
	float4 RayEndUVz   = mul(float4(RayEndShadowTranslatedWorld  , 1), ProjectionData.TranslatedWorldToShadowUVMatrix).xyzw;

	// NOTE: We assume by construction that ray ends are not behind the light near plane as the warping
	// due to SMRT ray tests gets severe long before the rays would otherwise clip at that plane.
	// If clipping is ever necessary, it must be done to the ray endpoints in world space so that lights that
	// need to walk multiple faces/clipmap levels in lock step can do it consistently.

	RayStartUVz.xyz = RayStartUVz.xyz / RayStartUVz.w;
	RayEndUVz.xyz = RayEndUVz.xyz / RayEndUVz.w;
	float3 RayStepUVz = RayEndUVz.xyz - RayStartUVz.xyz;

	// Offsets can move it slightly off the edge of spotlight projection. Clamp to edge.
	// Note we do *not* want to do this if we are tracing dual face cubemap rays!
	if (bClampUVs)
	{
		RayStartUVz.xy = saturate(RayStartUVz.xy);
	}
	RayStartUVz.z += DepthBias;

	FSMRTSingleRayState Result;
	Result.VirtualShadowMapId = VirtualShadowMapId;
	Result.RayStartUVz = RayStartUVz.xyz;
	Result.RayStepUVz = RayStepUVz.xyz;
	Result.ExtrapolateSlope = ExtrapolateSlope * RayStepUVz.z;
	Result.MipLevel = 0;
	Result.VirtualTexelAddress = uint2(0xFFFFFFFF, 0xFFFFFFFF);
	Result.PhysicalTexelAddress = uint2(0xFFFFFFFF, 0xFFFFFFFF);
	return Result;
}

FSMRTSample SMRTFindSample(inout FSMRTSingleRayState RayState, float SampleTime)
{
	float3 UVz = RayState.RayStartUVz.xyz + RayState.RayStepUVz.xyz * SampleTime;

	FSMRTSample Sample = InitSMRTSample();
	Sample.bValid = false;
	Sample.ReferenceDepth = UVz.z;
	Sample.ExtrapolateSlope = RayState.ExtrapolateSlope;

	if (all(UVz.xy == saturate(UVz.xy)))
	{
		FVirtualShadowMapSample SmSample = SampleVirtualShadowMap(RayState.VirtualShadowMapId, UVz.xy);
		if (SmSample.bValid)
		{
			Sample.bValid = true;
			Sample.SampleDepth = SmSample.Depth;
			
			// Debug output
			RayState.MipLevel = SmSample.MipLevel;
			RayState.PhysicalTexelAddress = SmSample.PhysicalTexelAddress;
			RayState.VirtualTexelAddress = SmSample.VirtualTexelAddress;
		}
	}

	return Sample;
}

// Instantiate SMRTRayCast for FSMRTSingleRayState
#define SMRT_TEMPLATE_RAY_STRUCT FSMRTSingleRayState
#include "VirtualShadowMapSMRTTemplate.ush"
#undef SMRT_TEMPLATE_RAY_STRUCT


struct FSMRTTwoCubeFaceRayState
{
	FSMRTSingleRayState Face0;
	FSMRTSingleRayState Face1;
	bool bSampleInFace1;
};

FSMRTTwoCubeFaceRayState SMRTTwoCubeFaceRayInitialize(
	int VirtualShadowMapId0,
	int VirtualShadowMapId1,
	float3 RayStartShadowTranslatedWorld,
	float3 RayEndShadowTranslatedWorld,
	float ExtrapolateSlope,
	float DepthBias)
{
	FSMRTTwoCubeFaceRayState Result;
	Result.Face0 = SMRTSingleRayInitialize(VirtualShadowMapId0, RayStartShadowTranslatedWorld, RayEndShadowTranslatedWorld, ExtrapolateSlope, DepthBias, false);
	Result.Face1 = SMRTSingleRayInitialize(VirtualShadowMapId1, RayStartShadowTranslatedWorld, RayEndShadowTranslatedWorld, ExtrapolateSlope, DepthBias, false);
	Result.bSampleInFace1 = true;
	return Result;
}

FSMRTSample SMRTFindSample(inout FSMRTTwoCubeFaceRayState RayState, float SampleTime)
{
	// NOTE: Traces from END to START, so we start in face1
	FSMRTSample Sample = InitSMRTSample();
	if (RayState.bSampleInFace1)
	{
		Sample = SMRTFindSample(RayState.Face1, SampleTime);
		if (!Sample.bValid)
		{
			Sample = SMRTFindSample(RayState.Face0, SampleTime);
			Sample.bResetExtrapolation = true;
			RayState.bSampleInFace1 = false;
		}
	}
	else
	{
		Sample = SMRTFindSample(RayState.Face0, SampleTime);
	}
	return Sample;
}

// Instantiate SMRTRayCast for FSMRTTwoCubeFaceRayState
#define SMRT_TEMPLATE_RAY_STRUCT FSMRTTwoCubeFaceRayState
#include "VirtualShadowMapSMRTTemplate.ush"
#undef SMRT_TEMPLATE_RAY_STRUCT


FSMRTResult ShadowRayCastSpotLight(
	int VirtualShadowMapId,
	float3 RayStartShadowTranslatedWorld,
	float3 RayEndShadowTranslatedWorld,
	float DepthBias,
	int NumSteps,
	float StepOffset,
	float ExtrapolateSlope,
	// To get debug data out
	inout FSMRTSingleRayState OutRayState)
{
	OutRayState = SMRTSingleRayInitialize(VirtualShadowMapId, RayStartShadowTranslatedWorld, RayEndShadowTranslatedWorld, ExtrapolateSlope, DepthBias);
	return SMRTRayCast(OutRayState, NumSteps, StepOffset);
}

FSMRTResult ShadowRayCastPointLight(
	int VirtualShadowMapId,
	float3 RayStartShadowTranslatedWorld,
	float3 RayEndShadowTranslatedWorld,
	float DepthBias,
	int NumSteps,
	float StepOffset,
	float ExtrapolateSlope,
	// To get debug data out
	inout FSMRTSingleRayState OutRayState)
{
	uint RayStartFace = VirtualShadowMapGetCubeFace(RayStartShadowTranslatedWorld);
	uint RayEndFace   = VirtualShadowMapGetCubeFace(RayEndShadowTranslatedWorld);

	FSMRTResult Result;
	if (WaveActiveAnyTrue(RayStartFace != RayEndFace))
	{
		FSMRTTwoCubeFaceRayState RayState = SMRTTwoCubeFaceRayInitialize(
			VirtualShadowMapId + RayStartFace,
			VirtualShadowMapId + RayEndFace,
			RayStartShadowTranslatedWorld, RayEndShadowTranslatedWorld, ExtrapolateSlope, DepthBias);
		Result = SMRTRayCast(RayState, NumSteps, StepOffset);

		if (RayState.bSampleInFace1)
		{
			OutRayState = RayState.Face1;
		}
		else
		{
			OutRayState = RayState.Face0;
		}
	}
	else
	{
		// Fast path: ray stays on a single cube map face (effectively a spot light)
		OutRayState = SMRTSingleRayInitialize(VirtualShadowMapId + RayEndFace, RayStartShadowTranslatedWorld, RayEndShadowTranslatedWorld, ExtrapolateSlope, DepthBias);
		Result = SMRTRayCast(OutRayState, NumSteps, StepOffset);
	}

	return Result;
}

// MaxBits version reduces unrolled iterations
float4 SobolSampler(uint SampleIndex, inout uint Seed, uint MaxBits)
{
	// first scramble the index to decorelate from other 4-tuples
	uint SobolIndex = FastOwenScrambling(SampleIndex, EvolveSobolSeed(Seed)) & ( (1U << MaxBits) - 1U );
	// now get Sobol' point from this index
	uint4 Result = uint4(SobolIndex, 0, 0, 0);
	UNROLL for (uint b = 0, v = 1; b < MaxBits; b++)
	{
		uint IndexBit = (SobolIndex >> b) & 1;
		Result.y ^= IndexBit * v;
		Result.zw ^= IndexBit * SobolMatrices[b];
		v ^= v << 1;
	}

	// finally scramble the points to avoid structured artifacts
	Result.x = FastOwenScrambling(Result.x, EvolveSobolSeed(Seed));
	Result.y = FastOwenScrambling(Result.y, EvolveSobolSeed(Seed));
	Result.z = FastOwenScrambling(Result.z, EvolveSobolSeed(Seed));
	Result.w = FastOwenScrambling(Result.w, EvolveSobolSeed(Seed));

	// output as float in [0,1) taking care not to skew the distribution
	// due to the non-uniform spacing of floats in this range
	return (Result >> 8) * 5.96046447754e-08; // * 2^-24
}

// Normal should be normalized
bool IsBackfaceToLocalLight(
	float3 ToLight,
	float3 Normal,
	float LightSourceRadius,
	out float3 OutConeAxis,
	out float OutConeSin,
	out float OutDistToLight)
{
	float DistSqr = dot(ToLight, ToLight);
	float Falloff = rcp(DistSqr + 1);
	float InvDist = rsqrt(DistSqr);

	OutConeAxis = ToLight * InvDist;
	OutConeSin = LightSourceRadius * InvDist;
	OutDistToLight = DistSqr * InvDist;

	float SinAlphaSqr = saturate(Pow2(LightSourceRadius) * Falloff);
	float SinAlpha = sqrt(SinAlphaSqr);
	bool bBackface = dot(Normal, OutConeAxis) < -SinAlpha;

	return bBackface;
}

// Version without outputs
bool IsBackfaceToLocalLight(float3 ToLight, float3 Normal, float LightSourceRadius)
{
	float3 Dummy1;
	float Dummy2;
	float Dummy3;
	return IsBackfaceToLocalLight(ToLight, Normal, LightSourceRadius, Dummy1, Dummy2, Dummy3);
}

// Shadow resolution scale that roughly matches the LOD function in VSM page marking
float ComputeShadowResolutionScale(FVirtualShadowMapProjectionShaderData ProjectionData, float SceneDepth)
{
	const float2 RadiusXY = 1.0f / (View.ViewSizeAndInvSize.xy * View.ViewToClip._11_22);
	const float RadiusScreen = min(RadiusXY.x, RadiusXY.y);
	const float DepthScale = SceneDepth * View.ViewToClip._34 + View.ViewToClip._44;
	const float ScreenPixelRadiusWorld = DepthScale * RadiusScreen;

	// Clamp the minimum here since our shadows sadly don't actually have infinite resolution near the camera...
	float ShadowResolutionScale = max(0.1f, ScreenPixelRadiusWorld * exp2(ProjectionData.ResolutionLodBias));

	return ShadowResolutionScale;
}

FVirtualShadowMapSampleResult TraceLocalLight(
	int VirtualShadowMapId,
	FLightShaderParameters Light,
	uint2 PixelPos,
	const float SceneDepth,
	float3 TranslatedWorldPosition,
	float RayStartOffset,
	uint MaxRayCount,
	uint SamplesPerRay,
	float CotMaxRayAngleFromLight,
	const float Noise,
	const bool bCullBackface,
	float3 WorldNormal,
	float TexelDitherScale,
	float ExtrapolateSlope,
	float MaxSlopeBias,
	uint SMRTAdaptiveRayCount)
{
	const uint LightType = Light.SpotAngles.x > -2.0f ? LIGHT_TYPE_SPOT : LIGHT_TYPE_POINT;
	const float3 ToLight = Light.TranslatedWorldPosition - TranslatedWorldPosition;

	float3 ConeAxis;
	float ConeSin;
	float DistToLight;
	bool bBackface = IsBackfaceToLocalLight(ToLight, WorldNormal, Light.SourceRadius, ConeAxis, ConeSin, DistToLight);

	FVirtualShadowMapSampleResult Result = InitVirtualShadowMapSampleResult();
	Result.bValid = true;
	Result.ShadowFactor = 0.0f;

	if (!bBackface || !bCullBackface)
	{
		float StepOffset = Noise;

		uint TileID = MortonEncode( PixelPos );

		int OffsetVirtualShadowMapId = VirtualShadowMapId;
		if (LightType == LIGHT_TYPE_POINT)
		{
			OffsetVirtualShadowMapId += VirtualShadowMapGetCubeFace(-ToLight);
		}

		// Move from PrimaryView translated world to Shadow translated world
		// NOTE: Cube map faces all share the same PreViewTranslation and projection depth scale
		FVirtualShadowMapProjectionShaderData ProjectionData = GetVirtualShadowMapProjectionData(OffsetVirtualShadowMapId);
		const float3 PrimaryToShadowTranslation = LWCToFloat(LWCSubtract(ProjectionData.PreViewTranslation, PrimaryView.PreViewTranslation));
		const float3 ShadowTranslatedWorld = TranslatedWorldPosition + PrimaryToShadowTranslation;

		const float2 DepthSlopeUV = ComputeDepthSlopeLocalUV(OffsetVirtualShadowMapId, ShadowTranslatedWorld, WorldNormal);

		const float ShadowResolutionScale = ComputeShadowResolutionScale(ProjectionData, SceneDepth);
		// Rough scaling from world units -> post projection depth.
		// We use a radially symmetric mapping here instead of the true function to minimize issues crossing cubemap faces.
		const float ShadowDepthFunctionScale = abs(ProjectionData.ShadowViewToClipMatrix._43 / length2(ToLight));

		const float DitherScale = TexelDitherScale * ShadowResolutionScale;
		const float MaxDitherSlope = MaxSlopeBias * DitherScale;
		const float MaxDepthBias = MaxSlopeBias * ShadowResolutionScale * ShadowDepthFunctionScale;

		// Moving the ray origin means we need to attempt to account for local receiver geometry to avoid
		// incorrect self-shadowing. To this end we move the point on a plane aligned with the shading normal.
		// It would be much better to use geometric (faceted) normals - as with optimal bias - but we do not
		// have access to those. Shading normals that stray too far from the real geometry will cause artifacts.
		const float3x3 ConeTangentToWorldMatrix = GetTangentBasis(ConeAxis);
		const float3 NormalPlaneTangent = mul(ConeTangentToWorldMatrix, WorldNormal);
		const float2 DepthSlopeTangent = -NormalPlaneTangent.xy / NormalPlaneTangent.z;

		// If source angle = 0, we don't need multiple samples on the same ray
		if (ConeSin == 0.0f)
		{
			SamplesPerRay = 0;
		}

		uint i = 0;
		uint RayMissCount = 0;
		float OccluderDistanceSum = 0.0f;
		float MaxOccluderDistance = -1.0f;
		for( ; i < MaxRayCount; i++ )
		{
			RandomSequence RandSequence;
#if 0
			RandomSequence_Initialize( RandSequence, PixelPos, i, View.StateFrameIndex, MaxRayCount );
			float4 RandSample = RandomSequence_GenerateSample4D( RandSequence );
#else
			// Combine pixel-level and sample-level bits into the sample index (visible structure will be hidden by owen scrambling of the index)
			RandSequence.SampleIndex = reversebits((65536 * View.StateFrameIndex + TileID) * MaxRayCount + i);
			RandSequence.SampleSeed = 0; // always use the same sequence

			float4 RandSample = SobolSampler( RandSequence.SampleIndex, RandSequence.SampleSeed, 8 );
#endif

			float2 LightUV = UniformSampleDiskConcentricApprox( RandSample.xy ).xy;
			LightUV *= ConeSin;

			float SinTheta2 = dot( LightUV, LightUV );
			float SinTheta = sqrt( SinTheta2 );
			float CosTheta = sqrt( 1 - SinTheta2 );
			float3 Dir = mul(float3(LightUV, CosTheta), ConeTangentToWorldMatrix);

			float3 RayStartWithDither = ShadowTranslatedWorld;

			if (DitherScale > 0.0f)
			{
				// Offset following the plane of the receiver
				float2 RandomOffset = (RandSample.zw - 0.5f) * DitherScale;
				float OffsetZ = min(MaxDitherSlope, 2.0f * max(0.0f, dot(DepthSlopeTangent, RandomOffset)));
				float3 Offset = mul(float3(RandomOffset, OffsetZ), ConeTangentToWorldMatrix);
				RayStartWithDither += Offset;
			}

			// The further afield our rays go the poorer our approximation is as the "bend" due to our testing
			// against a shadow map instead of along the ray increases. Thus we avoid going all the way to the light
			// where the projection becomes extreme.

			// Clip ray to max angle to limit penumbra sizes
			float ClampedEnd = DistToLight * 0.75 * saturate( 1.5 / ( CosTheta + CotMaxRayAngleFromLight * SinTheta ) );
			float Start = min(RayStartOffset, ClampedEnd - 1e-6f);

			float3 RayStart = RayStartWithDither + Dir * Start;
			float3 RayEnd = RayStartWithDither + Dir * ClampedEnd;

			float DepthBias = 0.0f;
			if (MaxDepthBias > 0.0f)
			{
				// Clamp depth bias to avoid excessive degenerate slope biases causing flickering lit pixels
				DepthBias = min(MaxDepthBias, ComputeOptimalSlopeBiasLocal(OffsetVirtualShadowMapId, RayStart, DepthSlopeUV));
			}

			FSMRTResult SMRTResult;
			FSMRTSingleRayState RayState;	// For debug output
			if ( LightType == LIGHT_TYPE_SPOT )
			{
				SMRTResult = ShadowRayCastSpotLight(
					VirtualShadowMapId,
					RayStart,
					RayEnd,
					DepthBias,
					SamplesPerRay,
					StepOffset,
					ExtrapolateSlope,
					RayState);
			}
			else
			{
				SMRTResult = ShadowRayCastPointLight(
					VirtualShadowMapId,
					RayStart,
					RayEnd,
					DepthBias,
					SamplesPerRay,
					StepOffset,
					ExtrapolateSlope,
					RayState);
			}

			if (SMRTResult.bValidHit)
			{
				// TODO: Do we want to mess with this at all due to our offset?
				float ReceiverDistance = length(RayStart);
				float OccluderDistance = ComputeOccluderDistancePerspective(
					// Re-fetch this here to avoid reg pressure
					GetVirtualShadowMapProjectionData(RayState.VirtualShadowMapId).ShadowViewToClipMatrix,
					SMRTResult.HitDepth,
					saturate(RayState.RayStartUVz.z),
					ReceiverDistance);

				OccluderDistanceSum += OccluderDistance;
				MaxOccluderDistance = max(MaxOccluderDistance, OccluderDistance);
			}
			else
			{
				++RayMissCount;
			}
			
			// Debug output (DCE'd if not used)
			Result.ClipmapIndexOrMipLevel = RayState.MipLevel;
			Result.VirtualTexelAddress = RayState.VirtualTexelAddress;
			Result.PhysicalTexelAddress = RayState.PhysicalTexelAddress;

			if (SMRTAdaptiveRayCount > 0)
			{
				// TODO: Adapt this heuristic based on SMRTAdaptiveRayCount as well?
				if( i == 0 )
				{
					bool bHit = SMRTResult.bValidHit;

					// All lanes missed
					bool bAllLanesMiss = WaveActiveAllTrue( !bHit );
					if( bAllLanesMiss )
					{
						break;
					}
				}
				else if( i >= SMRTAdaptiveRayCount )
				{
					// After N iterations and all have hit, assume umbra
					bool bAllLanesHit = WaveActiveAllTrue( RayMissCount == 0 );
					if( bAllLanesHit )
					{
						break;
					}
				}
			}

			uint Seed = asuint( StepOffset );
			StepOffset = ( EvolveSobolSeed( Seed ) >> 8 ) * 5.96046447754e-08; // * 2^-24;
		}
		uint RayCount = min(i + 1, MaxRayCount);		// break vs regular for loop exit

		float OccluderDistance = (OccluderDistanceSum / float(max(1, RayCount - RayMissCount)));
		//OccluderDistance = MaxOccluderDistance;

		Result.ShadowFactor = float(RayMissCount) / float(RayCount);
		Result.RayCount = RayCount;
		Result.OccluderDistance = OccluderDistance;
	}

	return Result;
}

// Generate ray based on light source geometry
bool GenerateRayLocalLight(
	FLightShaderParameters Light,
	uint2 PixelPos,
	float3 TranslatedWorldPosition,
	float3 WorldNormal,
	float CotMaxRayAngleFromLight,
	uint RayIndex,
	uint RayCount,
	inout float3 OutRayStart,
	inout float3 OutRayEnd)
{
	const float3 ToLight = Light.TranslatedWorldPosition - TranslatedWorldPosition;

	float3 ConeAxis;
	float ConeSin;
	float DistToLight;
	bool bBackface = IsBackfaceToLocalLight(ToLight, WorldNormal, Light.SourceRadius, ConeAxis, ConeSin, DistToLight);
	
	if (!bBackface)
	{
		uint TileID = MortonEncode(PixelPos);
		RandomSequence RandSequence;
		// Combine pixel-level and sample-level bits into the sample index (visible structure will be hidden by owen scrambling of the index)
		RandSequence.SampleIndex = reversebits((65536 * View.StateFrameIndex + TileID) * RayCount + RayIndex);
		RandSequence.SampleSeed = 0; // always use the same sequence

		float2 E = SobolSampler(RandSequence.SampleIndex, RandSequence.SampleSeed, 8).xy;
		float2 LightUV = UniformSampleDiskConcentricApprox(E).xy;
		LightUV *= ConeSin;

		float SinTheta2 = dot(LightUV, LightUV);
		float SinTheta = sqrt(SinTheta2);
		float CosTheta = sqrt(1 - SinTheta2);

		float3 Dir = TangentToWorld(float3(LightUV, CosTheta), ConeAxis);

		// The further afield our rays go the poorer our approximation is as the "bend" due to our testing
		// against a shadow map instead of along the ray increases. Thus we avoid going all the way to the light
		// where the projection becomes extreme.

		// Clip ray to max angle to limit penumbra sizes
		float ClampedLength = DistToLight * 0.75 * saturate(1.5 / (CosTheta + CotMaxRayAngleFromLight * SinTheta));

		OutRayStart = TranslatedWorldPosition;
		OutRayEnd = TranslatedWorldPosition + Dir * ClampedLength;
	}
	return !bBackface;
}
