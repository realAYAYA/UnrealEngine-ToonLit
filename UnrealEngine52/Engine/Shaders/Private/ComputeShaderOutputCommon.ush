// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
ComputeShaderOutputCommon.ush: To allow CS input/output passed into functions 
through a single struct, allowing for a more readable code
(less #ifdefs, reducing the boolean hell)
=============================================================================*/

#include "ShaderOutputCommon.ush"
#include "GammaCorrectionCommon.ush"
#include "VariableRateShading/VRSShadingRateCommon.ush"
#include "MortonCode.ush"

// TEMP: For initial debugging
#include "Visualization.ush"

// .xy = min, .zw = max
uint4 ViewRect;

// .x = shading bin, y = VRS tile size, .zw = unused
uint4 PassData; 

// TODO: Is this ever used? (see bHighPrecisionGBuffers)
#define HIGH_PRECISION_GBUFFERS 0

#if STRATA_OPAQUE_DEFERRED
	#if STRATA_BASE_PASS_MRT_OUTPUT_COUNT != 3
		#error Strata STRATA_BASE_PASS_MRT_OUTPUT_COUNT has been updated but not the uint MRTs
	#endif
	#if PIXELSHADEROUTPUT_MRT3
		#error Strata cannot map to such a case
	#endif
#endif

#if PIXELSHADEROUTPUT_MRT0
	#if DUAL_SOURCE_COLOR_BLENDING_ENABLED && MATERIAL_WORKS_WITH_DUAL_SOURCE_COLOR_BLENDING
		RWTexture2D<float4> OutTarget0UAV; // DUAL_SOURCE_BLENDING_SLOT(0)
	#else
		RWTexture2D<float4> OutTarget0UAV;
	#endif
#endif

#if PIXELSHADEROUTPUT_MRT1
	#if DUAL_SOURCE_COLOR_BLENDING_ENABLED && MATERIAL_WORKS_WITH_DUAL_SOURCE_COLOR_BLENDING
		RWTexture2D<float4> OutTarget1UAV; // DUAL_SOURCE_BLENDING_SLOT(1)
	#else
		RWTexture2D<float4> OutTarget1UAV;
	#endif
#endif

#if PIXELSHADEROUTPUT_MRT2
	RWTexture2D<float4> OutTarget2UAV;
#endif

#if STRATA_OPAQUE_DEFERRED
	#if PIXELSHADEROUTPUT_MRT2
		RWTexture2D<uint> StrataOutput3UAV;
		RWTexture2D<uint> StrataOutput4UAV;
		RWTexture2D<uint> StrataOutput5UAV;
		RWTexture2D<uint> StrataOutput6UAV;
	#elif PIXELSHADEROUTPUT_MRT1
		RWTexture2D<uint> StrataOutput2UAV;
		RWTexture2D<uint> StrataOutput3UAV;
		RWTexture2D<uint> StrataOutput4UAV;
		RWTexture2D<uint> StrataOutput5UAV;
	#else
		RWTexture2D<uint> StrataOutput1UAV;
		RWTexture2D<uint> StrataOutput2UAV;
		RWTexture2D<uint> StrataOutput3UAV;
		RWTexture2D<uint> StrataOutput4UAV;
	#endif

#else // STRATA_OPAQUE_DEFERRED

	#if PIXELSHADEROUTPUT_MRT3
		RWTexture2D<float4> OutTarget3UAV;
	#endif

	#if PIXELSHADEROUTPUT_MRT4
		RWTexture2D<float4> OutTarget4UAV;
	#endif

	#if PIXELSHADEROUTPUT_MRT5
		RWTexture2D<float4> OutTarget5UAV;
	#endif

	#if PIXELSHADEROUTPUT_MRT6
		RWTexture2D<float4> OutTarget6UAV;
	#endif

	#if PIXELSHADEROUTPUT_MRT7
		RWTexture2D<float4> OutTarget7UAV;
	#endif

#endif // STRATA_OPAQUE_DEFERRED

FPixelShaderOut ShadePixel(const float2 PixelPos, uint MacroTileIndex)
{
#if PIXELSHADEROUTPUT_INTERPOLANTS || PIXELSHADEROUTPUT_BASEPASS
#if IS_NANITE_PASS
	FNaniteFullscreenVSToPS NaniteInterpolants = (FNaniteFullscreenVSToPS)0;
	NaniteInterpolants.TileIndex = MacroTileIndex;
#else
	FVertexFactoryInterpolantsVSToPS Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#endif
#endif

#if IS_NANITE_PASS && (PIXELSHADEROUTPUT_INTERPOLANTS || PIXELSHADEROUTPUT_BASEPASS)
	FVertexFactoryInterpolantsVSToPS Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
	Interpolants.ViewIndex = NaniteInterpolants.ViewIndex; // TODO: NANITE_MATERIAL_MULTIVIEW
#endif

	FPixelShaderIn PixelShaderIn = (FPixelShaderIn)0;
	FPixelShaderOut PixelShaderOut = (FPixelShaderOut)0;

	const float2 HalfPixelOffset = float2(0.5f, 0.5f);
	PixelShaderIn.SvPosition = float4(PixelPos + HalfPixelOffset, 0.0f, 1.0f);

	// Nanite does not support OPTIONAL_IsFrontFace, Instead, Nanite determines this in GetMaterialPixelParameters().
	PixelShaderIn.bIsFrontFace = false;

#if PIXELSHADEROUTPUT_BASEPASS
	FBasePassInterpolantsVSToPS BasePassInterpolants = (FBasePassInterpolantsVSToPS)0;
	FPixelShaderInOut_MainPS(Interpolants, BasePassInterpolants, PixelShaderIn, PixelShaderOut);
#endif

#if !HIGH_PRECISION_GBUFFERS
	PixelShaderOut.MRT[3] = float4(LinearToSrgb(PixelShaderOut.MRT[3].rgb), PixelShaderOut.MRT[3].a); // BaseColor is sRGB
#endif

	return PixelShaderOut;
}

FPixelShaderOut WaveReadLaneAt(FPixelShaderOut ShadedPixel, uint SrcIndex)
{
	FPixelShaderOut Result = (FPixelShaderOut)0;

#if PIXELSHADEROUTPUT_MRT0
	Result.MRT[0] = WaveReadLaneAt(ShadedPixel.MRT[0], SrcIndex);
#endif

#if PIXELSHADEROUTPUT_MRT1
	Result.MRT[1] = WaveReadLaneAt(ShadedPixel.MRT[1], SrcIndex);
#endif

#if PIXELSHADEROUTPUT_MRT2
	Result.MRT[2] = WaveReadLaneAt(ShadedPixel.MRT[2], SrcIndex);
#endif

#if STRATA_OPAQUE_DEFERRED

	Result.StrataOutput[0]		= WaveReadLaneAt(ShadedPixel.StrataOutput[0],		SrcIndex);
	Result.StrataOutput[1]		= WaveReadLaneAt(ShadedPixel.StrataOutput[1],		SrcIndex);
	Result.StrataOutput[2]		= WaveReadLaneAt(ShadedPixel.StrataOutput[2],		SrcIndex);
	Result.StrataTopLayerData	= WaveReadLaneAt(ShadedPixel.StrataTopLayerData,	SrcIndex);

#else // STRATA_OPAQUE_DEFERRED

#if PIXELSHADEROUTPUT_MRT3
	Result.MRT[3] = WaveReadLaneAt(ShadedPixel.MRT[3], SrcIndex);
#endif

#if PIXELSHADEROUTPUT_MRT4
	Result.MRT[4] = WaveReadLaneAt(ShadedPixel.MRT[4], SrcIndex);
#endif

#if PIXELSHADEROUTPUT_MRT5
	Result.MRT[5] = WaveReadLaneAt(ShadedPixel.MRT[5], SrcIndex);
#endif

#if PIXELSHADEROUTPUT_MRT6
	Result.MRT[6] = WaveReadLaneAt(ShadedPixel.MRT[6], SrcIndex);
#endif

#if PIXELSHADEROUTPUT_MRT7
	Result.MRT[7] = WaveReadLaneAt(ShadedPixel.MRT[7], SrcIndex);
#endif

#endif // STRATA_OPAQUE_DEFERRED

	Result.Coverage	= WaveReadLaneAt(ShadedPixel.Coverage, SrcIndex);
	Result.Depth	= WaveReadLaneAt(ShadedPixel.Depth, SrcIndex);

	return Result;
}

void ExportPixel(const float2 PixelPos, FPixelShaderOut ShadedPixel)
{
#if PIXELSHADEROUTPUT_COVERAGE || PIXELSHADEROUTPUT_A2C
	// TODO: OutCoverage = PixelShaderOut.Coverage;
#endif 

#if OUTPUT_PIXEL_DEPTH_OFFSET
	// TODO: OutDepth = PixelShaderOut.Depth;
#endif 

#if PIXELSHADEROUTPUT_MRT0
	OutTarget0UAV[PixelPos] = ShadedPixel.MRT[0];
#endif

#if PIXELSHADEROUTPUT_MRT1
	OutTarget1UAV[PixelPos] = ShadedPixel.MRT[1];
#endif

#if PIXELSHADEROUTPUT_MRT2
	OutTarget2UAV[PixelPos] = ShadedPixel.MRT[2];
#endif

#if PIXELSHADEROUTPUT_MRT3
	OutTarget3UAV[PixelPos] = ShadedPixel.MRT[3];
#endif

#if STRATA_OPAQUE_DEFERRED

	// In this case, here is the gbuffer pattern
	// MRT0 is pixel color
	// MRT1 is velocity if enabled or precomputed shadow if velocity if disabled and precomputed shadow enabled
	// MRT2 is precomputed shadow if both velocity and prec shadow are enabled.
	// After, Strata output are appended (3 uint output)

#if PIXELSHADEROUTPUT_MRT3
	StrataOutput4UAV[PixelPos] = ShadedPixel.StrataOutput[0];
	StrataOutput5UAV[PixelPos] = ShadedPixel.StrataOutput[1];
	StrataOutput6UAV[PixelPos] = ShadedPixel.StrataOutput[2];
	StrataOutput7UAV[PixelPos] = ShadedPixel.StrataTopLayerData;
#elif PIXELSHADEROUTPUT_MRT2
	StrataOutput3UAV[PixelPos] = ShadedPixel.StrataOutput[0];
	StrataOutput4UAV[PixelPos] = ShadedPixel.StrataOutput[1];
	StrataOutput5UAV[PixelPos] = ShadedPixel.StrataOutput[2];
	StrataOutput6UAV[PixelPos] = ShadedPixel.StrataTopLayerData;
#elif PIXELSHADEROUTPUT_MRT1
	StrataOutput2UAV[PixelPos] = ShadedPixel.StrataOutput[0];
	StrataOutput3UAV[PixelPos] = ShadedPixel.StrataOutput[1];
	StrataOutput4UAV[PixelPos] = ShadedPixel.StrataOutput[2];
	StrataOutput5UAV[PixelPos] = ShadedPixel.StrataTopLayerData;
#else
	StrataOutput1UAV[PixelPos] = ShadedPixel.StrataOutput[0];
	StrataOutput2UAV[PixelPos] = ShadedPixel.StrataOutput[1];
	StrataOutput3UAV[PixelPos] = ShadedPixel.StrataOutput[2];
	StrataOutput4UAV[PixelPos] = ShadedPixel.StrataTopLayerData;
#endif

#else // STRATA_OPAQUE_DEFERRED

#if PIXELSHADEROUTPUT_MRT4
	OutTarget4UAV[PixelPos] = ShadedPixel.MRT[4];
#endif

#if PIXELSHADEROUTPUT_MRT5
	OutTarget5UAV[PixelPos] = ShadedPixel.MRT[5];
#endif

#if PIXELSHADEROUTPUT_MRT6
	OutTarget6UAV[PixelPos] = ShadedPixel.MRT[6];
#endif

#if PIXELSHADEROUTPUT_MRT7
	OutTarget7UAV[PixelPos] = ShadedPixel.MRT[7];
#endif

#endif // STRATA_OPAQUE_DEFERRED
}

struct FShadingQuad
{
	bool bActiveLane;
	uint SwizzleIndex;
};

FShadingQuad GetShadingQuad(uint QuadX, uint QuadY, uint LaneIndex, uint ShadingRate)
{
	FShadingQuad ShadingQuad;

	// https://microsoft.github.io/DirectX-Specs/d3d/HLSL_SM_6_6_Derivatives.html
	// https://microsoft.github.io/DirectX-Specs/d3d/VariableRateShading.html
	
	// D3D12_SHADING_RATE_1X1
	ShadingQuad.bActiveLane = true;
	ShadingQuad.SwizzleIndex = LaneIndex;

	const uint QuadIndex = QuadX * QuadY * 2u;

#if 1
	const bool bTopLeft		= ((QuadIndex & 3u) == 0u);
	const bool bTopRight	= ((QuadIndex & 3u) == 1u);
	const bool bBottomLeft	= ((QuadIndex & 3u) == 2u);
	const bool bBottomRight	= ((QuadIndex & 3u) == 3u);
#else
	// To test the QuadRead swizzles
	const int XSigned = int(X);
	const int YSigned = int(Y);
	int LaneXDelta = QuadReadAcrossX(XSigned) - XSigned;
	int LaneYDelta = QuadReadAcrossY(YSigned) - YSigned;
	const bool bTopLeft		= (LaneXDelta > 0 && LaneYDelta > 0);
	const bool bTopRight	= (LaneXDelta < 0 && LaneYDelta > 0);
	const bool bBottomLeft	= (LaneXDelta > 0 && LaneYDelta < 0);
	const bool bBottomRight	= (LaneXDelta < 0 && LaneYDelta < 0);
#endif

	if (ShadingRate == D3D12_SHADING_RATE_1X2)
	{
		// [A]
		// [B]
		ShadingQuad.bActiveLane  = (QuadIndex & 1u) == 0u;
		ShadingQuad.SwizzleIndex = select(ShadingQuad.bActiveLane, LaneIndex, QuadReadAcrossX(LaneIndex));
	}
	else if (ShadingRate == D3D12_SHADING_RATE_2X1)
	{
		// [A][B]
		ShadingQuad.bActiveLane  = (QuadIndex & 1u) == 0u;
		ShadingQuad.SwizzleIndex = select(ShadingQuad.bActiveLane, LaneIndex, QuadReadAcrossY(LaneIndex));
	}
	else if (ShadingRate == D3D12_SHADING_RATE_2X2)
	{
		// [A][B]
		// [C][D]
		ShadingQuad.bActiveLane  = (QuadIndex & 3u) == 0u;
		ShadingQuad.SwizzleIndex = 
			select(
				ShadingQuad.bActiveLane,
				LaneIndex,
				select(
					bBottomRight,
					QuadReadAcrossDiagonal(LaneIndex),
					select(
						bBottomLeft,
						QuadReadAcrossY(LaneIndex),
						QuadReadAcrossX(LaneIndex)
					)
				)
			)
		;
	}
	else if (ShadingRate == D3D12_SHADING_RATE_2X4) // not generated yet
	{
		// [A][B]
		// [C][D]
		// [E][F]
		// [G][H]
	}
	else if (ShadingRate == D3D12_SHADING_RATE_4X2) // not generated yet
	{
		// [A][B][C][D]
		// [E][F][G][H]
	}
	else if (ShadingRate == D3D12_SHADING_RATE_4X4) // not generated yet
	{
		// [A][B][C][D]
		// [E][F][G][H]
		// [I][J][K][L]
		// [M][N][O][P]
	}

	return ShadingQuad;
}

// Remaps 1D compacted/linear macro tile index into 1D sparse macro tile index (jumping over culled tiles)
uint CalculateSparseTileIndex(uint CompactedTileIndex, uint ShadingBin, uint TileRemapCount)
{
	const uint TargetTileCount = CompactedTileIndex + 1;

	uint ValidTiles = 0;

	// Remap compacted tile index to sparse tile index
	// If compacted index is 7, the first 4 indices are valid, but the next 2 are not, the sparse index is 9
	// Basically figure out how many preceeding empty slots exist, so we can shift the index by that. (reverse prefix sum w/ linear scan)
	const uint RemapBaseOffset = (TileRemapCount * ShadingBin);

	// TODO: Could optimize by having material classify store out the prefix sum per remap uint, and then binary search the result quicker

	uint RemapBin  = 0;
	uint RemapData = 0;

	LOOP
	for (; RemapBin < TileRemapCount; ++RemapBin)
	{
		RemapData = Nanite.MaterialTileRemap[RemapBaseOffset + RemapBin];

		const uint SumValidTiles = ValidTiles + countbits(RemapData); // Count number of valid tiles in bin
		if (SumValidTiles < TargetTileCount)
		{
			// Keeping going
			ValidTiles = SumValidTiles;
		}
		else
		{
			// Found the target bin
			break;
		}
	}

	uint RemapBinBit = 0;

	LOOP
	while (RemapData != 0)
	{
		RemapBinBit = firstbitlow(RemapData);
		RemapData &= ~(1u << RemapBinBit);
		++ValidTiles;
		if (ValidTiles == TargetTileCount)
		{
			// Arrived at sparse tile index
			break;
		}
	}

	const uint SparseTileIndex = (RemapBin * 32u) + RemapBinBit;
	return SparseTileIndex;
}

[numthreads(64, 1, 1)]
void MainCS(uint ThreadIndex : SV_GroupIndex, uint3 GroupID : SV_GroupID, uint3 GroupThreadID : SV_GroupThreadID, uint3 DispatchThreadID : SV_DispatchThreadID)
{
	const uint ShadingBin = PassData.x;

	// Compute our compacted macro tile index
	const uint CompactedMacroTileIndex = GroupID.x / 64u; // New 64x64 macro tile every 4k threads

	// Compute our compacted micro tile index
	const uint CompactedMicroTileIndex = GroupID.x; // New 8x8 micro tile every 64 threads

	// Subtract macro tile's 8x8 index from current micro tile index to make the micro tile index relative
	const uint MicroTileIndex = CompactedMicroTileIndex - (CompactedMacroTileIndex * 64u);

	// Compact our sparse macro tile index (produced by material culling)
	const uint TileRemapCount = Nanite.MaterialConfig.w;
	const uint MacroTileIndex = CalculateSparseTileIndex(CompactedMacroTileIndex, ShadingBin, TileRemapCount);

	const uint2 MacroTileDim = uint2(64u, 64u);
	const uint2 MicroTileDim = uint2(8u,   8u);

	// Remap 1D -> 2D macro and micro tile indices on a grid.
	const uint2 MacroTileGridSize = Nanite.MaterialConfig.yz;
	const uint2 MacroTileGridPos  = Unflatten2D(MacroTileIndex, MacroTileGridSize);
	const uint2 MicroTileGridPos  = Unflatten2D(MicroTileIndex, MicroTileDim);

	// Convert macro and micro tile grid positions to pixels on screen.
	const uint2 MacroTileTopLeftPixelPos = MacroTileGridPos * MacroTileDim;
	const uint2 MicroTileTopLeftPixelPos = MicroTileGridPos * MicroTileDim;

	// Just like pixel shaders, compute 2x2 CS quads from thread index so we can leverage the 4 lane cross bar.
	// [0 1][2 3] -> [0 1][4 5]
	// [4 5][6 7] -> [2 3][6 7]

	// Wave64 - 4 rows, each containing 16 threads, formed into shading quads
	// Two periods of tiling in both the X and Y axis.
#if 1
	const uint X = BitFieldInsertU32(BitFieldMaskU32(1u, 0u), ThreadIndex, BitFieldExtractU32(ThreadIndex, 3u, 2u));
	const uint Y = BitFieldInsertU32(BitFieldMaskU32(2u, 0u), BitFieldExtractU32(ThreadIndex, 2u, 1u), BitFieldExtractU32(ThreadIndex, 3u, 3u));
#else
	const uint2 Decoded = MortonDecode(ThreadIndex);
	const uint X = Decoded.x;
	const uint Y = Decoded.y;
#endif

	// Relative (swizzled) pixel position within a micro tile
	const float2 XY = float2(X, Y);

	// Determine final pixel position on the screen for shading
	const float2 PixelPos = MacroTileTopLeftPixelPos + MicroTileTopLeftPixelPos + XY;

	uint ShadingRate = D3D12_SHADING_RATE_1X1;

#if IS_NANITE_PASS
	FResolvedMaterial ResolvedMaterial = UnpackMaterialResolve(Nanite.MaterialResolve[PixelPos]);
	if (!ResolvedMaterial.bIsNanitePixel || ShadingBin != ResolvedMaterial.ShadingBin)
	{
		// TODO: Need to handle inactive "helper lanes" in this case..
		// Leaves black artifacts around edges of Nanite meshes that render on top of non-Nanite
		return;
	}

	const uint VRSTileDim = PassData.y;
	if (WaveIsFirstLane() && VRSTileDim != 0)
	{
		// Retrieve the variable shading rate that governs our 8x8 micro tile.
		const uint2 ShadingRateTileSize = PassData.yy; // (8x8, 16x16, or 32x32)
		ShadingRate = Nanite.ShadingRate[PixelPos / ShadingRateTileSize] & 0xFu;
	}

	// Propagate the shading rate to all lanes processing our 8x8 micro tile.
	ShadingRate = WaveReadLaneFirst(ShadingRate);
#endif

	const FShadingQuad ShadingQuad = GetShadingQuad(X, Y, WaveGetLaneIndex(), ShadingRate);

	FPixelShaderOut ShadedPixel;

	// TODO: Optimize - consider 1-2 threads per 2x2 quad (or fancier quad repacking/binning scheme)
	BRANCH
	if (ShadingQuad.bActiveLane)
	{
		ShadedPixel = ShadePixel(PixelPos, MacroTileIndex);
	}

	ShadedPixel = WaveReadLaneAt(ShadedPixel, ShadingQuad.SwizzleIndex);
	ExportPixel(PixelPos, ShadedPixel);

#if 0
	    uint ExportMask = 0x0u;
    #if PIXELSHADEROUTPUT_MRT0
	    ExportMask |= (1u << 0u);
    #endif
    #if PIXELSHADEROUTPUT_MRT1
	    ExportMask |= (1u << 1u);
    #endif
    #if PIXELSHADEROUTPUT_MRT2
	    ExportMask |= (1u << 2u);
    #endif
    #if PIXELSHADEROUTPUT_MRT3
	    ExportMask |= (1u << 3u);
    #endif
    #if PIXELSHADEROUTPUT_MRT4
	    ExportMask |= (1u << 4u);
    #endif
    #if PIXELSHADEROUTPUT_MRT5
	    ExportMask |= (1u << 5u);
    #endif
    #if PIXELSHADEROUTPUT_MRT6
	    ExportMask |= (1u << 6u);
    #endif
    #if PIXELSHADEROUTPUT_MRT7
	    ExportMask |= (1u << 7u);
    #endif
#endif
}