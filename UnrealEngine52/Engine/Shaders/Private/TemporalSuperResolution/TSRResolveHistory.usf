// Copyright Epic Games, Inc. All Rights Reserved.

#include "TSRCommon.ush"


//------------------------------------------------------- CONFIG

#define TILE_SIZE 8

#define KERNEL_SIZE 4


//------------------------------------------------------- CONSTANTS

static const int2 kOffsetsCross3x3[4] = {
	int2(-1, -1),
	int2( 1, -1),
	int2(-1,  1),
	int2( 1,  1),
};


//------------------------------------------------------- PARAMETERS

RWTexture2D<uint> PrevUseCountOutput;
RWTexture2D<uint> PrevClosestDepthOutput;


//------------------------------------------------------- LDS

groupshared tsr_halfC SharedArray0[TILE_SIZE * TILE_SIZE];


//------------------------------------------------------- FUNCTIONS

// Mitchell Netravali
// B-spline:       B=1      C=0
// Mitchell:       B=1/3    C=1/3
// Catmull-Rom:    B=0      C=1/2
// Robidoux:       B=0.3782 C=0.3109 (cylindrical)
// Robidoux Sharp: B=0.2620 C=0.3690 (cylindrical)
// Robidoux Soft:  B=0.6796 C=0.1602 (cylindrical)
void MitchellNetravaliCoefs(const float B, const float C, out float OutQ0[4], out float OutQ1[4])
{
	OutQ0[0] = (6.0 - 2.0 * B) / 6.0;
	OutQ0[1] = 0.0;
	OutQ0[2] = (-18.0 + 12.0 * B + 6.0 * C) / 6.0;
	OutQ0[3] = (12.0 - 9.0 * B - 6.0 * C) / 6.0;

	OutQ1[0] = (8 * B + 24 * C) / 6.0;
	OutQ1[1] = (-12 * B - 48 * C) / 6.0;
	OutQ1[2] = (6 * B + 30 * C) / 6.0;
	OutQ1[3] = (-B - 6 * C) / 6.0;
}

float MitchellNetravali(float d, const float B, const float C)
{
	// Coeficient ends up known at compile time.
	float Q0[4];
	float Q1[4];
	MitchellNetravaliCoefs(B, C, Q0, Q1);

	if (d < 1)
	{
		return Q0[0] + d * (Q0[1] + d * (Q0[2] + d * Q0[3]));
	}
	else if ((d >= 1) && (d < 2))
	{
		return Q1[0] + d * (Q1[1] + d * (Q1[2] + d * Q1[3]));
	}
	else
	{
		return 0;
	}
}


//------------------------------------------------------- PARAMETERS

FScreenTransform DispatchThreadToHistoryPixelPos;
uint2 OutputViewRectMin;
uint2 OutputViewRectMax;
uint bGenerateOutputMip1;
float HistoryValidityMultiply;

Texture2D<tsr_halfC> History_HighFrequency;
Texture2D<tsr_half2> History_Metadata;
Texture2D<tsr_half3> History_Translucency;
Texture2D<tsr_half>  History_TranslucencyAlpha;

RWTexture2D<tsr_halfC> SceneColorOutputMip0;
RWTexture2D<tsr_halfC> SceneColorOutputMip1;


//------------------------------------------------------- ENTRY POINT

[numthreads(TILE_SIZE * TILE_SIZE, 1, 1)]
void MainCS(
	uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	float4 Debug = 0.0;

	uint2 DispatchThreadId = (
		ZOrder2D(GroupThreadIndex, uint(log2(float(TILE_SIZE)))) +
		GroupId * uint2(TILE_SIZE, TILE_SIZE));

	tsr_halfC Color = tsr_half(0.0);
	
	// Downsample the history
	{
		const float B = rcp(3.0);
		const float C = rcp(3.0);

		// Position of the output pixel in the history.
		float2 OutputPixelPos = ApplyScreenTransform(float2(DispatchThreadId), DispatchThreadToHistoryPixelPos);
		float2 TopLeftKernel = floor(OutputPixelPos + (0.5 - 0.5 * KERNEL_SIZE)) + 0.5;
		
		tsr_halfC MinColor = tsr_half(POSITIVE_INFINITY);
		tsr_halfC MaxColor = tsr_half(0.0);
		tsr_half ColorWeight = tsr_half(0.0);

		UNROLL_N(KERNEL_SIZE)
		for (uint x = 0; x < KERNEL_SIZE; x++)
		{
			UNROLL_N(KERNEL_SIZE)
			for (uint y = 0; y < KERNEL_SIZE; y++)
			{
				float2 SamplePixelPos = TopLeftKernel + float2(x, y);

				float2 SampleUV = SamplePixelPos * HistoryInfo_ExtentInverse;

				SampleUV = clamp(SampleUV, HistoryInfo_UVViewportBilinearMin, HistoryInfo_UVViewportBilinearMax);

				tsr_halfC SampleColor    = History_HighFrequency.SampleLevel(GlobalBilinearClampedSampler, SampleUV, 0);
				tsr_half3 SampleTranslucencyColor = History_Translucency.SampleLevel(GlobalBilinearClampedSampler, SampleUV, 0);
				tsr_half  SampleTranslucencyAlpha = History_TranslucencyAlpha.SampleLevel(GlobalBilinearClampedSampler, SampleUV, 0);
				
				#if DIM_SEPARATE_TRANSLUCENCY
				{
					SampleColor.rgb = SampleColor.rgb * SampleTranslucencyAlpha + SampleTranslucencyColor.rgb;
				
					#if CONFIG_SCENE_COLOR_ALPHA
						SampleColor.a = saturate(tsr_half(1.0) - saturate(tsr_half(1.0) - SampleColor.a) * SampleTranslucencyAlpha);
					#endif
				}
				#endif

				float2 PixelOffset = abs(SamplePixelPos - OutputPixelPos);

				tsr_half kernelWeight = tsr_half(MitchellNetravali(PixelOffset.x, B, C) * MitchellNetravali(PixelOffset.y, B, C));
				tsr_half SampleHdrWeight = HdrWeight4(SampleColor);

				MinColor = min(MinColor, SampleColor);
				MaxColor = max(MaxColor, SampleColor);
				Color  += (kernelWeight * SampleHdrWeight) * SampleColor;
				ColorWeight += (kernelWeight * SampleHdrWeight);
			}
		}

		Color *= SafeRcp(ColorWeight);
		Color = clamp(Color, MinColor, MaxColor);
	}
	
	// Compute final output
	tsr_halfC FinalOutputColor = Color;

	tsr_short2 OutputPixelPosition = InvalidateOutputPixelPos(tsr_short2(OutputViewRectMin + DispatchThreadId), OutputViewRectMax);
	
	// Output final scene color Mip0
	{
		SceneColorOutputMip0[OutputPixelPosition] = FinalOutputColor;
	}

	// Output final scene color Mip1
	{
		uint LocalGroupThreadIndex = GroupThreadIndex;

		tsr_halfC HalfResOutput = FinalOutputColor * tsr_half(0.25);
		tsr_short2 HalfResOutputPixelPos;
		HalfResOutputPixelPos[0] = (OutputPixelPosition[0] >> tsr_short(1)) | (((OutputPixelPosition[0] & tsr_short(0x1)) | tsr_short(!bGenerateOutputMip1)) * tsr_short(~0));
		HalfResOutputPixelPos[1] = (OutputPixelPosition[1] >> tsr_short(1)) | (((OutputPixelPosition[1] & tsr_short(0x1)) | tsr_short(!bGenerateOutputMip1)) * tsr_short(~0));
			
		#if PLATFORM_SUPPORTS_WAVE_BROADCAST && 0 // Support WaveBroadcast with halfs
		BRANCH
		if (bGenerateOutputMip1)
		{
			FWaveBroadcastSettings Horizontal = InitWaveXorButterfly(/* XorButterFly = */ 0x1);
			FWaveBroadcastSettings Vertical = InitWaveXorButterfly(/* XorButterFly = */ 0x2);

			HalfResOutput += WaveBroadcast(Horizontal, HalfResOutput);
			HalfResOutput += WaveBroadcast(Vertical, HalfResOutput);
		}
		#else
		BRANCH
		if (bGenerateOutputMip1)
		{
			SharedArray0[LocalGroupThreadIndex] = HalfResOutput;

			#if COMPILER_METAL
				GroupMemoryBarrierWithGroupSync();
			#endif

			SharedArray0[LocalGroupThreadIndex] += SharedArray0[LocalGroupThreadIndex ^ 0x1];
			SharedArray0[LocalGroupThreadIndex] += SharedArray0[LocalGroupThreadIndex ^ 0x2];
			
			HalfResOutput = SharedArray0[LocalGroupThreadIndex];
		}
		#endif

		SceneColorOutputMip1[HalfResOutputPixelPos] = HalfResOutput;
	}

	#if DEBUG_OUTPUT
	{
		DebugOutput[tsr_short3(OutputPixelPosition, 0)] = Debug;
	}
	#endif
}

