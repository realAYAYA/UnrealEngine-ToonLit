
/*=============================================================================
CompositeUIPixelShader.usf: Filter pixel shader source.
=============================================================================*/

#include "Common.ush"
#include "TonemapCommon.ush"
#include "ColorDeficiency.ush"

#define LUT_SCALING	1.05f
#define LUT_SIZE	32.f

// set this to 1 if you want to restore the legacy behaviour (ie apply ACES to the UI). A value of 0 keeps a consistent look of the UI between SDR and HDR mode
#define USE_LUT_FOR_UI 0

///////////////////////////////////////////////////////////////////////////////////////
uint OutputDevice;
uint OutputGamut;
float OutputMaxLuminance;

float4 ACESMinMaxData;
float4 ACESMidData;
float4 ACESCoefsLow_0;
float4 ACESCoefsHigh_0;
float ACESCoefsLow_4;
float ACESCoefsHigh_4;

#if APPLY_COLOR_DEFICIENCY
float ColorVisionDeficiencyType;
float ColorVisionDeficiencySeverity;
float bCorrectDeficiency;
float bSimulateCorrectionWithDeficiency;
#endif

void GenerateLUTPS(
	FWriteToSliceGeometryOutput Input,
	out float4 OutColor : SV_Target0
	)
{
	// Construct the neutral color from a 3D position volume texture
	float2 UV = Input.Vertex.UV - float2(0.5f / LUT_SIZE, 0.5f / LUT_SIZE);
	float3 Neutral = float3(UV * LUT_SIZE / (LUT_SIZE - 1), Input.LayerIndex / (LUT_SIZE - 1));

	const float3x3 AP1_2_Output = OuputGamutMappingMatrix(OutputGamut);

	float3 LinearColor = ST2084ToLinear(Neutral);

	FACESTonemapParams LUTTsParams = ComputeACESTonemapParams(ACESMinMaxData, ACESMidData, ACESCoefsLow_0, ACESCoefsHigh_0, ACESCoefsLow_4, ACESCoefsHigh_4, 1.0);

	if( OutputDevice == TONEMAPPER_OUTPUT_ACES1000nitST2084 || OutputDevice == TONEMAPPER_OUTPUT_ACES1000nitScRGB)
	{		
		// ACES 1000nit transform with PQ/2084 encoding, user specified gamut 
		float3 ODTColor = ACESOutputTransforms1000(LinearColor, LUTTsParams);
		// do not apply scRGB here because LUT is not 16F in this format, and scRGB can output negative values
		if (OutputDevice != TONEMAPPER_OUTPUT_ACES1000nitScRGB)
		{
			ODTColor = mul(AP1_2_Output, ODTColor);
		}
		OutColor.rgb = LinearToST2084(ODTColor);
	}	
	else if( OutputDevice == TONEMAPPER_OUTPUT_ACES2000nitST2084 || OutputDevice == TONEMAPPER_OUTPUT_ACES2000nitScRGB)
	{		
		// ACES 2000nit transform with PQ/2084 encoding, user specified gamut 
		float3 ODTColor = ACESOutputTransforms2000(LinearColor, LUTTsParams);
		// do not apply scRGB here because LUT is not 16F in this format, and scRGB can output negative values
		// 
		if (OutputDevice != TONEMAPPER_OUTPUT_ACES2000nitScRGB)
		{
			ODTColor = mul(AP1_2_Output, ODTColor);
		}
		OutColor.rgb = LinearToST2084(ODTColor);
	}
	else
	{
		OutColor.rgb = Neutral;
	}

	OutColor.rgb = OutColor.rgb / LUT_SCALING;
	OutColor.a = 0;
}

///////////////////////////////////////////////////////////////////////////////////////
#if PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK
Texture2D<uint> UIWriteMaskTexture;
#endif

#ifndef DISPLAY_MAPPING_PS_FROM_ARRAY
	#define DISPLAY_MAPPING_PS_FROM_ARRAY 0
#endif // DISPLAY_MAPPING_PS_FROM_ARRAY

#if DISPLAY_MAPPING_PS_FROM_ARRAY
	// if source is an array, we only need the first slice
	#define TextureOrArray2D						Texture2DArray
	#define TexOrArr2DSample(Tex, S, UV)			Tex.Sample(S, float3(UV.x, UV.y, 0))
	#define TexOrArr2DSampleLevel(Tex, S, UV, L)	Tex.SampleLevel(S, float3(UV.x, UV.y, 0), L)
#else
	#define TextureOrArray2D						Texture2D
	#define TexOrArr2DSample(Tex, S, UV)			Texture2DSample(Tex, S, UV)
	#define TexOrArr2DSampleLevel(Tex, S, UV, L)	Texture2DSampleLevel(Tex, S, UV, L)
#endif

Texture2D UITexture;
SamplerState UISampler;

TextureOrArray2D SceneTexture;
SamplerState SceneSampler;

Texture3D ColorSpaceLUT;
SamplerState ColorSpaceLUTSampler;

float UILevel;
float UILuminance;

// Invert the encoding applied by the ApplyGammaCorrection function.
float3 LinearizeColor(float3 EncodedColor)
{
	#if MAC
		// Note, MacOSX native output is raw gamma 2.2 not sRGB!
		return pow(EncodedColor, 2.2);
	#else
		#if USE_709
			// Didn't profile yet if the branching version would be faster (different linear segment).
			return Rec709ToLinear(EncodedColor);
		#else
			return sRGBToLinear(EncodedColor);
		#endif
	#endif
}

static const float ScRGBScaleFactor = 80.0f; // used to convert between ScRGB and nits

float3 ColorLookupTable(float3 LinearColor)
{
	float3 LUTEncodedColor = LinearToST2084(LinearColor);
	float3 UVW = LUTEncodedColor * ((LUT_SIZE - 1) / LUT_SIZE) + (0.5f / LUT_SIZE);
	return ColorSpaceLUT.SampleLevel(ColorSpaceLUTSampler, UVW, 0).rgb * LUT_SCALING;
}

void HDRBackBufferConvertPS(
	FScreenVertexOutput Input,
	out float3 OutColor : SV_Target0
	)
{
	OutColor = 0;
	float3 SceneColor = TexOrArr2DSample(SceneTexture, SceneSampler, Input.UV).xyz ;
	SceneColor = ST2084ToLinear( SceneColor ) / ScRGBScaleFactor; 
	OutColor.rgb = SceneColor;
}

// Given an input using Rec709 primaries and a sRGB tranfer function where
// 1.0 maps to paperwhitenits defined in editor. Remap to Rec2020 with PQ transfer function.
void HDREditorConvert(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
	)
{
	OutColor = 0;
	float3 SceneColor = TexOrArr2DSample(SceneTexture, SceneSampler, Input.UV).xyz ;

	// Get color into Rec2020 space
	SceneColor = sRGBToLinear( SceneColor) ;
	SceneColor = SceneColor * UILevel ; 

	SceneColor = mul(sRGB_2_XYZ_MAT, SceneColor);
	SceneColor = mul(XYZ_2_Rec2020_MAT, SceneColor);

	// Do PQ Curve
	SceneColor = LinearToST2084( SceneColor ); 
	OutColor.rgb = SceneColor;
}

float3 ComposeUIAndScene(float3 SceneColor, float4 InUIColor, float InUILevel)
{
	BRANCH
	if (InUIColor.w > 0.f && InUIColor.w < 1.f)
	{
		// Clamp gamut to sRGB as extended gamut colors bleeding into the UI can look funny
		SceneColor = max(SceneColor, 0.f);

		// Tonemap HDR under transparent UI with a simple Reinhard to the max luminance of the UI
		// This prevents HDR bleed through destroying UI legibility
		// Rec2020 coefficients to compute luminance
		float KR = 0.2627, KG = 0.678, KB = 0.0593;
		float Luminance = dot(SceneColor, half3(KR, KG, KB)) / InUILevel;
		float OutL = 1.f / (Luminance + 1.f);

		// Ease out remapping to avoid hard transitions where UI is near zero opacity
		SceneColor *= lerp(1.f, OutL * InUILevel, InUIColor.w);
	}

	// Composite, assuming pre-multiplied alpha
	return SceneColor * (1.f - InUIColor.w) + InUIColor.xyz * InUILevel;
}

float3 ApplyColorDeficiency(float3 Rec2020Color)
{
#if APPLY_COLOR_DEFICIENCY
	const float3x3 Rec2020_2_sRGB = mul(XYZ_2_sRGB_MAT, Rec2020_2_XYZ_MAT);
	const float3x3 sRGB_2_Rec2020 = mul(XYZ_2_Rec2020_MAT, sRGB_2_XYZ_MAT);
	float3 SRGBColor = mul(Rec2020_2_sRGB, Rec2020Color.xyz);
	SRGBColor = ColorDeficiency(SRGBColor, ColorVisionDeficiencyType, ColorVisionDeficiencySeverity, bCorrectDeficiency, bSimulateCorrectionWithDeficiency);
	Rec2020Color = mul(sRGB_2_Rec2020, SRGBColor);
#endif

	return Rec2020Color;
}

// About sRGB_2_Rec2020 in ComputeHDRUIColor/ComputeHDRSceneColor: to get consistent blending between UI and scene color, regardless of the swapchain format choice, we perform blending in the rec2020 color space, and
// move back to the output device space. Rec2020 is chosen over ScRGB because this is the way blending is currently being done in engine mode, and contains only positive values

float4 ComputeHDRUIColor(float2 InputUV)
{
	const float3x3 sRGB_2_Rec2020 = mul(XYZ_2_Rec2020_MAT, sRGB_2_XYZ_MAT);
	float4 UIColor = Texture2DSample(UITexture, UISampler, InputUV);
	UIColor.xyz = LinearizeColor(UIColor.xyz);
#if USE_LUT_FOR_UI
	UIColor.xyz = ColorLookupTable(UIColor.xyz);
	// PQ -> Linear
#if !SCRGB_ENCODING
	UIColor.xyz = ST2084ToLinear(UIColor.xyz);
#else
	UIColor.xyz = ST2084ToScRGB(UIColor.xyz, OutputDevice, OutputMaxLuminance);
	UIColor.xyz = mul(sRGB_2_Rec2020, UIColor.xyz) * UILuminance;
#endif

#else // #if USE_LUT_FOR_UI
	UIColor.xyz = mul(sRGB_2_Rec2020, UIColor.xyz) * UILuminance;
#endif // #if USE_LUT_FOR_UI

	return UIColor;
}

float3 ComputeHDRSceneColor(float3 SceneColor)
{
	const float3x3 sRGB_2_Rec2020 = mul(XYZ_2_Rec2020_MAT, sRGB_2_XYZ_MAT);
#if !SCRGB_ENCODING
	SceneColor.xyz = ST2084ToLinear(SceneColor.xyz);
#else
	SceneColor.xyz = mul(sRGB_2_Rec2020, SceneColor.xyz) * ScRGBScaleFactor;
#endif
	return SceneColor;
}

void Main(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
	)
{
#if PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK
	uint CompositeUIMask = DecodeRTWriteMask(uint2(Input.Position.xy), UIWriteMaskTexture, 1);
	// in case of color deficiency, we will need to update the whole texture, not just the regions that were touched by the UI
#if (APPLY_COLOR_DEFICIENCY == 0)
	BRANCH
	if (CompositeUIMask == 0)
	{
		discard;
	}
#endif
#endif

	float4 UIColor = ComputeHDRUIColor(Input.UV);
#if PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK
	// If the UI texture has a mask of 0, this means the UI color needs to be forced to 0 as it may contain uninitialized data
	if (CompositeUIMask == 0)
	{
		UIColor = 0;
	}
#endif

	float3 SceneColor = TexOrArr2DSample(SceneTexture, SceneSampler, Input.UV).xyz;
	SceneColor = ComputeHDRSceneColor(SceneColor);
	OutColor.xyz = ComposeUIAndScene(SceneColor.xyz, UIColor, UILevel);

	OutColor.rgb = ApplyColorDeficiency(OutColor.rgb);

	OutColor.w = 1.f;

#if !SCRGB_ENCODING
	// Linear -> PQ
	OutColor.xyz = LinearToST2084(OutColor.xyz);
#else
	const float3x3 Rec2020_2_sRGB = mul(XYZ_2_sRGB_MAT, Rec2020_2_XYZ_MAT);
	OutColor.xyz = mul(Rec2020_2_sRGB, OutColor.xyz / ScRGBScaleFactor);
#endif
}

#if USE_COMPUTE_FOR_COMPOSITION
float4 SceneTextureDimensions;
RWTexture2D<float4> RWSceneTexture;

[numthreads(NUM_THREADS_PER_GROUP, NUM_THREADS_PER_GROUP, 1)]
void CompositeUICS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	if (any(DispatchThreadId.xy >= (uint2)SceneTextureDimensions.xy))
	{
		return;
	}

	float2 InputPosition = DispatchThreadId.xy + float2(0.5, 0.5);
#if PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK
	uint CompositeUIMask = DecodeRTWriteMask(DispatchThreadId.xy, UIWriteMaskTexture, 1);
	// in case of color deficiency, we will need to update the whole texture, not just the regions that were touched by the UI
#if (APPLY_COLOR_DEFICIENCY == 0)
	BRANCH
	if (CompositeUIMask == 0)
	{
		return;
	}
#endif
#endif

	float2 InputUV = InputPosition * SceneTextureDimensions.zw;

	float4 UIColor = ComputeHDRUIColor(InputUV);
#if PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK
	// If the UI texture has a mask of 0, this means the UI color needs to be forced to 0 as it may contain uninitialized data
	if (CompositeUIMask == 0)
	{
		UIColor = 0;
	}
#endif


	float3 SceneColor = RWSceneTexture[DispatchThreadId.xy].rgb;
	SceneColor = ComputeHDRSceneColor(SceneColor);
	float4 OutColor = 0;
	OutColor.xyz = ComposeUIAndScene(SceneColor.xyz, UIColor, UILevel);
	OutColor.w = 1.f;

	OutColor.rgb = ApplyColorDeficiency(OutColor.rgb);

#if !SCRGB_ENCODING
	// Linear -> PQ
	OutColor.xyz = LinearToST2084(OutColor.xyz);
#else
	const float3x3 Rec2020_2_sRGB = mul(XYZ_2_sRGB_MAT, Rec2020_2_XYZ_MAT);
	OutColor.xyz = mul(Rec2020_2_sRGB, OutColor.xyz / ScRGBScaleFactor);
#endif

	RWSceneTexture[DispatchThreadId.xy] = float4(OutColor.xyz, 1);
}

#endif

#if DISPLAY_MAPPING_PS
float4x4 TextureToOutputGamutMatrix;

// Currently hard-coded to go from G2.2 to either PQ/Rec2020 or sRGB
void DisplayMappingPS(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
	)
{
	const float4 SceneColor = TexOrArr2DSampleLevel(SceneTexture, SceneSampler, Input.UV, 0);
	OutColor = SceneColor;

	float3 LinearSceneColor = pow(SceneColor.rgb, 2.2);
	LinearSceneColor = mul((float3x3)TextureToOutputGamutMatrix, LinearSceneColor);
	
	if(OutputDevice == TONEMAPPER_OUTPUT_ACES1000nitST2084 || OutputDevice == TONEMAPPER_OUTPUT_ACES2000nitST2084)
	{
		OutColor.xyz = LinearToST2084(LinearSceneColor*300.f);
	}
	else
	{
		OutColor.xyz = LinearToSrgbBranchless(saturate(LinearSceneColor));
	}
}

#endif

#if BLIT_UI_TO_HDR

float2 UITextureSize;

void BlitUIToHDRPS(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
	)
{
	float4 UIColor = ComputeHDRUIColor(Input.UV);
#if PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK
	uint2 RTWriteMaskInputPosition = uint2(Input.UV * UITextureSize);
	uint CompositeUIMask = DecodeRTWriteMask(RTWriteMaskInputPosition, UIWriteMaskTexture, 1);
	BRANCH
	if (CompositeUIMask == 0)
	{
		UIColor = float4(0,0,0,0);
	}
#endif

	float3 SceneColor = TexOrArr2DSample(SceneTexture, UISampler, Input.UV).xyz;
	SceneColor = ComputeHDRSceneColor(SceneColor);
	OutColor.xyz = ComposeUIAndScene(SceneColor.xyz, UIColor, UILevel) / ScRGBScaleFactor;
	OutColor.a = 1;
}

#endif
