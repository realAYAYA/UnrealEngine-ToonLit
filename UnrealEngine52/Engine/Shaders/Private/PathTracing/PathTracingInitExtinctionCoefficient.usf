// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "PathTracingCommon.ush"

RaytracingAccelerationStructure TLAS;
RWBuffer<float> RWStartingExtinctionCoefficient;

// TODO: figure out the right start value for camera rays inside glass
RAY_TRACING_ENTRY_RAYGEN(PathTracingInitExtinctionCoefficientRG)
{
	const uint RayFlags = RAY_FLAG_FORCE_OPAQUE;
	const uint MissShaderIndex = 0;
	const uint InstanceInclusionMask = PATHTRACER_MASK_ALL 
										- PATHTRACER_MASK_HAIR_INDIRECT 
										- PATHTRACER_MASK_HAIR_CAMERA; // Ignore hair strands

	FRayDesc UpRay;
	UpRay.Origin = PrimaryView.TranslatedWorldCameraOrigin;
	UpRay.Direction = float3(0, 0, 1);
	UpRay.TMin = 0.0;
	UpRay.TMax = POSITIVE_INFINITY;
		
	float3 StartingSigmaT = 0.0;
	for (;;)
	{
		FPackedPathTracingPayload PackedPayload = InitPathTracingPayload(PATHTRACER_SCATTER_CAMERA, 0.0);
		TraceRay(
			TLAS,
			RayFlags,
			InstanceInclusionMask,
			RAY_TRACING_SHADER_SLOT_MATERIAL,
			RAY_TRACING_NUM_SHADER_SLOTS,
			MissShaderIndex,
			UpRay.GetNativeDesc(),
			PackedPayload);
		if (PackedPayload.IsMiss())
		{
			// we didn't hit anything
			break;
		}
		FPathTracingPayload HitPayload = UnpackPathTracingPayload(PackedPayload, UpRay);
		if (HitPayload.ShadingModelID == SHADINGMODELID_SINGLELAYERWATER)
		{
			// Found water! we are done
			StartingSigmaT = HitPayload.GetWaterExtinction();
			break;
		}
		// otherwise, keep tracing
		UpRay.TMin = asfloat(asuint(HitPayload.HitT) + 1);
	}

	RWStartingExtinctionCoefficient[0] = StartingSigmaT.x;
	RWStartingExtinctionCoefficient[1] = StartingSigmaT.y;
	RWStartingExtinctionCoefficient[2] = StartingSigmaT.z;
}
