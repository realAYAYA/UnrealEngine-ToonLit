// Copyright Epic Games, Inc. All Rights Reserved.

#define USE_HAIR_COMPLEX_TRANSMITTANCE 1

#include "../Common.ush"
#include "LumenScreenProbeCommon.ush"
#include "LumenScreenProbeTracingCommon.ush"
#include "../LightGridCommon.ush"
#define SUPPORT_CONTACT_SHADOWS 0
#define NON_DIRECTIONAL_DIRECT_LIGHTING 1
#include "../DeferredLightingCommon.ush"
#include "../RayTracing/RayTracingCapsuleLight.ush"
#include "../RayTracing/RayTracingSphereLight.ush"
#include "../RayTracing/RayTracingRectLight.ush"
#include "../LightData.ush"

#ifndef THREADGROUP_SIZE
#define THREADGROUP_SIZE 1
#endif

RWTexture2D<float4> RWScreenProbeLightSampleDirection;
RWTexture2D<uint> RWScreenProbeLightSampleFlags;
RWTexture2D<float3> RWScreenProbeLightSampleRadiance;

bool GenerateShadowRay(
	FLightShaderParameters LightParameters,
	bool bSpotLight,
	bool bRectLight,
	float3 TranslatedWorldPosition,
	float3 WorldNormal,
	float2 RandSample,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax)
{
	float RayPdf = 0.0;
	if (bRectLight)
	{
		return GenerateRectLightOcclusionRay(
			LightParameters,
			TranslatedWorldPosition, WorldNormal,
			RandSample,
			/* out */ RayOrigin,
			/* out */ RayDirection,
			/* out */ RayTMin,
			/* out */ RayTMax,
			/* out */ RayPdf);
	}
	else
	{
		// point or spot light
		if (LightParameters.SourceLength > 0.0)
		{
			return GenerateCapsuleLightOcclusionRayWithSolidAngleSampling(
				LightParameters,
				TranslatedWorldPosition, WorldNormal,
				RandSample,
				/* out */ RayOrigin,
				/* out */ RayDirection,
				/* out */ RayTMin,
				/* out */ RayTMax,
				/* out */ RayPdf);
		}
		return GenerateSphereLightOcclusionRayWithSolidAngleSampling(
			LightParameters,
			TranslatedWorldPosition, WorldNormal,
			RandSample,
			/* out */ RayOrigin,
			/* out */ RayDirection,
			/* out */ RayTMin,
			/* out */ RayTMax,
			/* out */ RayPdf);
	}
}

[numthreads(PROBE_THREADGROUP_SIZE_2D, PROBE_THREADGROUP_SIZE_2D, 1)]
void ScreenProbeGenerateLightSamplesCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint2 ScreenProbeAtlasCoord = DispatchThreadId.xy;
	uint ScreenProbeIndex = ScreenProbeAtlasCoord.y * ScreenProbeAtlasViewSize.x + ScreenProbeAtlasCoord.x;
	uint2 ScreenProbeScreenPosition = GetScreenProbeScreenPosition(ScreenProbeIndex);

	if (ScreenProbeIndex < GetNumScreenProbes() && ScreenProbeAtlasCoord.x < ScreenProbeAtlasViewSize.x)
	{
		float2 ScreenUV = GetScreenUVFromScreenProbePosition(ScreenProbeScreenPosition);
		float SceneDepth = GetScreenProbeDepth(ScreenProbeAtlasCoord);
		float3 TranslatedWorldPosition = GetTranslatedWorldPositionFromScreenUV(ScreenUV, SceneDepth);

		if (SceneDepth > 0)
		{
			const uint EyeIndex = 0;
			const uint GridIndex = ComputeLightGridCellIndex(uint2(ScreenProbeScreenPosition), SceneDepth);
			const FCulledLightsGridData CulledLightGridData = GetCulledLightsGrid(GridIndex, EyeIndex);
			const uint NumLocalLights = min(CulledLightGridData.NumLocalLights, GetNumLocalLights(EyeIndex));

			uint LumenLightStartIndex = NumLocalLights;

			//@todo - start at the supported index
			for (uint GridLightIndex = 0; GridLightIndex < NumLocalLights; GridLightIndex++)
			{
				const FLocalLightData LocalLight = GetLocalLightData(CulledLightGridData.DataStartIndex + GridLightIndex, EyeIndex);

				if (LocalLight.bLumenLightSupported)
				{
					LumenLightStartIndex = GridLightIndex;
					break;
				}
			}

			const uint NumLumenLights = NumLocalLights - LumenLightStartIndex;
			const uint NumLightSamples = ScreenProbeLightSampleResolutionXY * ScreenProbeLightSampleResolutionXY;
			const bool bSelectSequentialLights = NumLumenLights <= NumLightSamples;

			for (uint LightSampleIndex = 0; LightSampleIndex < NumLightSamples; LightSampleIndex++)
			{
				uint2 LightSampleBufferCoord = ScreenProbeAtlasCoord * ScreenProbeLightSampleResolutionXY + uint2(LightSampleIndex % ScreenProbeLightSampleResolutionXY, LightSampleIndex / ScreenProbeLightSampleResolutionXY);

				uint LightIndex = 0;
				float PDF = 0.0f;

				if (bSelectSequentialLights)
				{
					LightIndex = LumenLightStartIndex + LightSampleIndex;
					PDF = 1.0f;
				}
				else
				{
					//@todo - ReSTIR or at least proportional to light power
					float Random = BlueNoiseScalar(LightSampleBufferCoord, RAY_DIRECTION_TEMPORAL_INDEX * NumLightSamples + LightSampleIndex);
					LightIndex = LumenLightStartIndex + min((uint)(Random * NumLumenLights), NumLumenLights - 1);
					PDF = (float)NumLightSamples / (float)NumLumenLights;
				}

				bool bHasLight = false;
				bool bCastShadow = false;
				float3 LightDirection = 0;
				float TraceDistance = 0;
				float3 Lighting = 0;

				if (LightIndex < NumLocalLights)
				{
					const FLocalLightData LocalLight = GetLocalLightData(CulledLightGridData.DataStartIndex + LightIndex, EyeIndex);

					FDeferredLightData LightData = ConvertToDeferredLight(LocalLight);

					float3 L = LightData.Direction;
					float3 ToLight = L;

					float LightMask = GetLocalLightAttenuation(TranslatedWorldPosition, LightData, ToLight, L);

					if (LightMask > 0)
					{
#if 0
						float3 CameraVector = float3(1, 0, 0);
						float4 LightAttenuation = 1;
						float Dither = 1;
						float UnusedSurfaceShadow = 1;
						FDeferredLightingSplit NewLighting = GetDynamicLightingSplit(TranslatedWorldPosition, -CameraVector, GBufferData, 1, GBufferData.ShadingModelID, LightData, LightAttenuation, Dither, uint2(0, 0), UnusedSurfaceShadow);

#else
						{						
							float Attenuation;

							if (LightData.bRectLight)
							{
								FRect Rect = GetRect(ToLight, LightData);
								Attenuation = IntegrateLight(Rect);
							}
							else
							{
								FCapsuleLight Capsule = GetCapsule(ToLight, LightData);
								Attenuation = IntegrateLight(Capsule, LightData.bInverseSquared);
							}

							Lighting = LightData.Color * (Attenuation * LightMask * View.PreExposure / PDF);
						}
					
#endif

						#define DEBUG_HARDCODE_POINT_LIGHT 0
						#if DEBUG_HARDCODE_POINT_LIGHT
							LightDirection = LocalLight.LightPositionAndInvRadius.xyz - TranslatedWorldPosition;
							TraceDistance = length(LightDirection);
							LightDirection /= max(TraceDistance, .000001f);
							TraceDistance = max(TraceDistance - LightData.SourceRadius, 0.0f);
						#else
							FLightShaderParameters LightParameters = ConvertToLightShaderParameters(LightData);

							float3 Unused;
							float Unused2;

							float2 RandSample = BlueNoiseVec2(LightSampleBufferCoord, RAY_DIRECTION_TEMPORAL_INDEX);

							bool bValid = GenerateShadowRay(
								LightParameters,
								LightData.bSpotLight,
								LightData.bRectLight,
								TranslatedWorldPosition,
								float3(0, 0, 0),
								RandSample,
								Unused,
								LightDirection,
								Unused2,
								TraceDistance);
						#endif
						
						bHasLight = bValid;
						bCastShadow = UnpackCastShadow(asuint(LocalLight.LightDirectionAndShadowMask.w));
					}
				}
				
				RWScreenProbeLightSampleDirection[LightSampleBufferCoord] = float4(LightDirection, TraceDistance);
				RWScreenProbeLightSampleFlags[LightSampleBufferCoord] = EncodeLightSampleFlags(bHasLight, bCastShadow);
				RWScreenProbeLightSampleRadiance[LightSampleBufferCoord] = Lighting;
			}
		}
		else
		{
			for (uint LightSampleIndex = 0; LightSampleIndex < ScreenProbeLightSampleResolutionXY * ScreenProbeLightSampleResolutionXY; LightSampleIndex++)
			{
				uint2 LightSampleBufferCoord = ScreenProbeAtlasCoord * ScreenProbeLightSampleResolutionXY + uint2(LightSampleIndex % ScreenProbeLightSampleResolutionXY, LightSampleIndex / ScreenProbeLightSampleResolutionXY);
				RWScreenProbeLightSampleDirection[LightSampleBufferCoord] = 0;
				RWScreenProbeLightSampleFlags[LightSampleBufferCoord] = 0;
				RWScreenProbeLightSampleRadiance[LightSampleBufferCoord] = 0;
			}
		}
	}
}
