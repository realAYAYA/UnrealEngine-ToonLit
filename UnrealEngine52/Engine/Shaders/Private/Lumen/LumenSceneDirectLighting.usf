// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "LumenCardCommon.ush"
#include "LumenCardTile.ush"
#include "SurfaceCache/LumenSurfaceCache.ush"
#define SUPPORT_CONTACT_SHADOWS 0
#define USE_IES_PROFILE 1
#include "../DeferredLightingCommon.ush"
#include "../VolumeLightingCommon.ush"
#define FILTER_DIRECTIONAL_LIGHT_SHADOWING 1
#include "../ForwardShadowingCommon.ush"
#include "LumenSceneDirectLighting.ush"

FDeferredLightData GetLumenDirectLightingLightData(uint LightIndex, float3 PreViewTranslation)
{
	FDeferredLightData Out;

#if USE_LIGHT_UNIFORM_BUFFER
	Out = InitDeferredLightFromUniforms(LIGHT_TYPE);
#else
	FLumenLight LumenLight = LoadLumenLight(LightIndex, PreViewTranslation);
	Out = LumenLight.DeferredLightData;
	Out.bRectLight = HAS_RECT_LIGHTS && Out.bRectLight;
#endif
	return Out;
}

float3 GetIrradianceForLight(
	uint LightIndex,
	FLumenSurfaceCacheData SurfaceCacheData,
	float3 PreViewTranslation, // LUMEN_LWC_TODO
	float ShadowFactor)
{
	FDeferredLightData LightData = GetLumenDirectLightingLightData(LightIndex, PreViewTranslation);

	float3 WorldNormal = SurfaceCacheData.WorldNormal;
	float3 WorldPosition = SurfaceCacheData.WorldPosition; // LUMEN_LWC_TODO
	float3 TranslatedWorldPosition = WorldPosition + PreViewTranslation;

	float3 LightColor = LightData.Color;
	float3 L = LightData.Direction;
	float3 ToLight = L;
	float3 AreaLightFalloffColor = 1;
	float CombinedAttenuation = 1;
	float NoL = saturate(dot(WorldNormal, L));

	if (LightData.bRadialLight)
	{
		FAreaLightIntegrateContext Context = (FAreaLightIntegrateContext) 0;
		float LightMask = GetLocalLightAttenuation(TranslatedWorldPosition, LightData, ToLight, L);

		float Attenuation = 0.0f;
		float Roughness = 1;
		float3 V = float3(1, 0, 0);

		if (LightData.bRectLight)
		{
			FRect Rect = GetRect(ToLight, LightData);
			Attenuation = IntegrateLight(Rect);

			if (IsRectVisible(Rect))
			{
				const FRectTexture SourceTexture = ConvertToRectTexture(LightData);
				Context = CreateRectIntegrateContext(Roughness, WorldNormal, V, Rect, SourceTexture);
			}
		}
		else
		{
			FCapsuleLight Capsule = GetCapsule(ToLight, LightData);
			Capsule.DistBiasSqr = 0;
			Context = CreateCapsuleIntegrateContext(Roughness, WorldNormal, V, Capsule, LightData.bInverseSquared);
			Attenuation = IntegrateLight(Capsule, LightData.bInverseSquared);
		}

		CombinedAttenuation = Attenuation * LightMask;
		AreaLightFalloffColor = Context.AreaLight.FalloffColor;
		NoL = Context.NoL;
	}

	float3 Irradiance = LightColor * AreaLightFalloffColor * (CombinedAttenuation * NoL * ShadowFactor);

	return Irradiance;
}

#ifndef HAS_MULTIPLE_VIEWS
#define HAS_MULTIPLE_VIEWS 0
#endif

RWTexture2D<float3> RWDirectLightingAtlas;
StructuredBuffer<uint> CardTiles;
StructuredBuffer<uint> LightTileOffsetNumPerCardTile;
StructuredBuffer<uint2> LightTilesPerCardTile;

[numthreads(CARD_TILE_SIZE, CARD_TILE_SIZE, 1)]
void LumenCardBatchDirectLightingCS(
	uint3 GroupId : SV_GroupID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint CardTileIndex = GroupId.x;
	uint2 TexelCoordInTile = GroupThreadId.xy;

	uint PackedOffsetNum = LightTileOffsetNumPerCardTile[CardTileIndex];
	uint LightTilesOffset = BitFieldExtractU32(PackedOffsetNum, 24, 0);
	uint NumLightTiles = BitFieldExtractU32(PackedOffsetNum, 8, 24);

	FCardTileData CardTile = UnpackCardTileData(CardTiles[CardTileIndex]);
	FLumenCardPageData CardPage = GetLumenCardPageData(CardTile.CardPageIndex);

	uint2 CoordInCardPage = CARD_TILE_SIZE * CardTile.TileCoord + TexelCoordInTile;
	uint2 AtlasCoord = CardPage.PhysicalAtlasCoord + CoordInCardPage;

	float2 AtlasUV = CardPage.PhysicalAtlasUVRect.xy + CardPage.PhysicalAtlasUVTexelScale * (CoordInCardPage + 0.5);
	float2 CardUV = CardPage.CardUVRect.xy + CardPage.CardUVTexelScale * (CoordInCardPage + 0.5);

	FLumenCardData Card = GetLumenCardData(CardPage.CardIndex);
	FLumenSurfaceCacheData SurfaceCacheData = GetSurfaceCacheData(Card, CardUV, AtlasUV);

	if (NumLightTiles == 0 || !SurfaceCacheData.bValid)
	{
		RWDirectLightingAtlas[AtlasCoord] = 0;
		return;
	}

	float3 Irradiance = 0.0f;

	for (uint CulledLightIndex = 0; CulledLightIndex < NumLightTiles; ++CulledLightIndex)
	{
		FLightTileForLightPass LightTile = UnpackLightTileForLightPass(LightTilesPerCardTile[LightTilesOffset + CulledLightIndex]);

		FShadowMaskRay ShadowMaskRay;
		ShadowMaskRay.bShadowFactorComplete = true;
		ShadowMaskRay.ShadowFactor = 1.0f;

		if (LightTile.ShadowMaskIndex != 0xffffffff)
		{
			ReadShadowMaskRay(LightTile.ShadowMaskIndex, TexelCoordInTile, ShadowMaskRay);
		}

		if (ShadowMaskRay.ShadowFactor > 0.0f)
		{
			uint ViewIndex = HAS_MULTIPLE_VIEWS ? LightTile.ViewIndex : 0;
			Irradiance += GetIrradianceForLight(LightTile.LightIndex, SurfaceCacheData, LWCHackToFloat(PreViewTranslation[ViewIndex]).xyz, ShadowMaskRay.ShadowFactor);

			//Irradiance += bShadowFactorValid ? float3(0, 1, 0) : float3(0.2f, 0.0f, 0.0f);
		}
	}

	RWDirectLightingAtlas[AtlasCoord] = Irradiance;
}
