// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../MonteCarlo.ush"
#include "../SceneTextureParameters.ush"

#include "LumenCardCommon.ush"
#include "LumenTracingCommon.ush"
#define RADIANCE_CACHE_DEPTH_TEST_SPHERE_PARALLAX 1
#include "LumenRadianceCacheCommon.ush"
#include "LumenScreenProbeCommon.ush"
#include "LumenScreenProbeTracingCommon.ush"
#include "LumenHardwareRayTracingPipelineCommon.ush"
#include "LumenFog.ush"

#ifndef THREADGROUP_SIZE_2D
#define THREADGROUP_SIZE_2D 8
#endif

#ifndef THREADGROUP_SIZE_1D
#define THREADGROUP_SIZE_1D THREADGROUP_SIZE_2D * THREADGROUP_SIZE_2D
#endif

#ifndef DIM_LIGHTING_MODE
#define DIM_LIGHTING_MODE LIGHTING_FROM_SURFACE_CACHE
#endif

#define LIGHTING_MODE_SURFACE_CACHE 0
#define LIGHTING_MODE_HIT_LIGHTING 1

StructuredBuffer<uint> Allocator;
RWBuffer<uint> RWRayAllocator;
[numthreads(1, 1, 1)]
void FConvertRayAllocatorCS()
{
	RWRayAllocator[0] = Allocator[0];
}

Buffer<uint> RayAllocator;
RWBuffer<uint> RWHardwareRayTracingIndirectArgs;
uint2 OutputThreadGroupSize;

[numthreads(1, 1, 1)]
void FLumenScreenProbeHardwareRayTracingIndirectArgsCS()
{
	WriteDispatchIndirectArgs(RWHardwareRayTracingIndirectArgs, 0, (RayAllocator[0] + OutputThreadGroupSize.x - 1) / OutputThreadGroupSize.x, 1, 1);
}


#if LUMEN_HARDWARE_RAYTRACING || LUMEN_HARDWARE_INLINE_RAYTRACING

float3 FarFieldReferencePos;

#include "LumenHardwareRayTracingCommon.ush"

RaytracingAccelerationStructure TLAS;

#if LUMEN_HARDWARE_INLINE_RAYTRACING
StructuredBuffer<FHitGroupRootConstants> HitGroupData;
StructuredBuffer<FRayTracingSceneMetadataRecord> RayTracingSceneMetadata;
#endif // LUMEN_HARDWARE_INLINE_RAYTRACING

uint ThreadCount;
uint GroupCount;
int NearFieldLightingMode;
float MaxTraceDistance;
float MinTraceDistanceToSampleSurfaceCache;
float FarFieldBias;
float FarFieldMaxTraceDistance;
float PullbackBias;
float NormalBias;
float AvoidSelfIntersectionTraceDistance;
float SkipFirstTwoSidedHitDistance;
int MaxTranslucentSkipCount;
uint MaxTraversalIterations;
int ApplySkyLight;

RWStructuredBuffer<FTraceDataPacked> RWRetraceDataPackedBuffer;

FRayTracedLightingResult EpsilonTrace(FRayDesc Ray, inout FRayTracedLightingContext Context, out float RemainingTraceTMin)
{
	FRayTracedLightingResult Result = CreateRayTracedLightingResult();
	RemainingTraceTMin = AvoidSelfIntersectionTraceDistance;

#if ENABLE_NEAR_FIELD_TRACING
	uint OriginalCullingMode = Context.CullingMode;
	Context.CullingMode = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
	Ray.TMax = AvoidSelfIntersectionTraceDistance;

	if (Ray.TMax > Ray.TMin)
	{
		// First trace - short distance with backface culling enabled to avoid self intersecting in cases where the traced geometry doesn't match what's in the GBuffer (Nanite, Ray Tracing LODs, etc)
#if DIM_LIGHTING_MODE == LIGHTING_FROM_SURFACE_CACHE
		{
			Result = TraceAndCalculateRayTracedLightingFromSurfaceCache(Ray, Context);
		}
#else
		{
			Result = TraceAndCalculateRayTracedLighting(Ray, Context, DIM_LIGHTING_MODE);
		}
#endif // DIM_LIGHTING_MODE
	}

	// RAY_FLAG_CULL_BACK_FACING_TRIANGLES doesn't work on two sided geometry, but we still need to avoid self-intersections with the Nanite fallback mesh
	// Skip the first two sided material we hit within a short distance
	if (Result.bHitTwoSided && Result.TraceHitDistance < SkipFirstTwoSidedHitDistance)
	{
		float Epsilon = 0.01;
		RemainingTraceTMin = Result.TraceHitDistance + Epsilon;
		Result.bIsHit = false;
	}

	Context.CullingMode = OriginalCullingMode;
#endif // ENABLE_NEAR_FIELD_TRACING

	return Result;
}

LUMEN_HARDWARE_RAY_TRACING_ENTRY(LumenScreenProbeGatherHardwareRayTracing)
{
	uint ThreadIndex = DispatchThreadIndex.x;
	uint GroupIndex = DispatchThreadIndex.y;

#if DIM_INDIRECT_DISPATCH
	uint Iteration = 0;
	uint DispatchedThreads = RayAllocator[0];
#else
	uint DispatchedThreads = ThreadCount * GroupCount;
	uint IterationCount = (RayAllocator[0] + DispatchedThreads - 1) / DispatchedThreads;
	for (uint Iteration = 0; Iteration < IterationCount; ++Iteration)
#endif
	{
		uint RayIndex = Iteration * DispatchedThreads + GroupIndex * ThreadCount + ThreadIndex;
		if (RayIndex >= RayAllocator[0])
		{
			return;
		}

#if (DIM_LIGHTING_MODE == LIGHTING_MODE_HIT_LIGHTING) || ENABLE_FAR_FIELD_TRACING
		FTraceData TraceData = UnpackTraceData(RWRetraceDataPackedBuffer[RayIndex]);
		uint RayId = TraceData.RayId;
#else
		uint RayId = RayIndex;
#endif // DIM_LIGHTING_MODE

		uint ScreenProbeIndex;
		uint2 TraceTexelCoord;
		float TraceHitDistance;
		DecodeTraceTexel(CompactedTraceTexelData[RayId], ScreenProbeIndex, TraceTexelCoord, TraceHitDistance);

		uint2 ScreenProbeScreenPosition = GetScreenProbeScreenPosition(ScreenProbeIndex);
		uint2 ScreenTileCoord = GetScreenTileCoord(ScreenProbeScreenPosition);
		uint LinearCoord = ScreenTileCoord.y * ScreenProbeViewSize.x + ScreenTileCoord.x;

		float2 ScreenUV = GetScreenUVFromScreenProbePosition(ScreenProbeScreenPosition);
		uint2 ScreenProbeAtlasCoord = uint2(ScreenProbeIndex % ScreenProbeAtlasViewSize.x, ScreenProbeIndex / ScreenProbeAtlasViewSize.x);
		uint2 ScreenProbeTraceCoord = GetTraceBufferCoord(ScreenProbeAtlasCoord, TraceTexelCoord);

		float SceneDepth = GetScreenProbeDepth(ScreenProbeAtlasCoord);
		float3 TranslatedWorldPosition = GetTranslatedWorldPositionFromScreenUV(ScreenUV, SceneDepth);

		float2 ProbeUV;
		float ConeHalfAngle;
		GetProbeTracingUV(ScreenProbeTraceCoord, TraceTexelCoord, GetProbeTexelCenter(ScreenTileCoord), 1, ProbeUV, ConeHalfAngle);

		FRayDesc Ray;
		Ray.Origin = TranslatedWorldPosition;
		Ray.Direction = EquiAreaSphericalMapping(ProbeUV);
		Ray.TMin = max(TraceHitDistance - PullbackBias, 0.0);
#if ENABLE_FAR_FIELD_TRACING
		Ray.TMin = max(Ray.TMin, FarFieldBias);
#endif
		bool bBackfaceRay;
		float3 ProbeWorldNormalForBiasing = GetScreenProbeNormalForBiasing(ScreenProbeAtlasCoord, Ray.Direction, bBackfaceRay);
		Ray.Origin += NormalBias * ProbeWorldNormalForBiasing;

		FRayCone RayCone = (FRayCone)0;
		RayCone = PropagateRayCone(RayCone, ConeHalfAngle, 0.0);

		uint CullingMode = 0;
		FRayTracedLightingContext Context = CreateRayTracedLightingContext(
			TLAS,
			RayCone,
			ScreenTileCoord,
			ScreenTileCoord.y * ScreenProbeViewSize.x + ScreenTileCoord.x,
			CullingMode,
			MaxTranslucentSkipCount,
			MaxTraversalIterations);
		Context.bCalculateHitVelocity = true;
		Context.MinTraceDistanceToSampleSurfaceCache = MinTraceDistanceToSampleSurfaceCache;

#if LUMEN_HARDWARE_INLINE_RAYTRACING
		Context.HitGroupData = HitGroupData;
		Context.RayTracingSceneMetadata = RayTracingSceneMetadata;
#endif // LUMEN_HARDWARE_INLINE_RAYTRACING

		// Initialize by testing against a small epsilon
		float RemainingTraceTMin;
		FRayTracedLightingResult Result = EpsilonTrace(Ray, Context, RemainingTraceTMin);

		if (!Result.bIsHit)
		{
			Ray.TMin = max(Ray.TMin, RemainingTraceTMin);
			Ray.TMax = Ray.TMin;
			// Cull TMax by the bounding sphere of the near-field
			if (length(Ray.Origin - PrimaryView.TranslatedWorldCameraOrigin) < MaxTraceDistance)
			{
				float2 Hit = RayIntersectSphere(Ray.Origin, Ray.Direction, float4(PrimaryView.TranslatedWorldCameraOrigin, MaxTraceDistance));
				Ray.TMax = (Hit.x > 0) ? Hit.x : ((Hit.y > 0) ? Hit.y : Ray.TMin);
			}

			bool bIsRadianceCacheHit = false;
#if DIM_RADIANCE_CACHE
			{
				float ClipmapDitherRandom = InterleavedGradientNoise(ScreenTileCoord, View.StateFrameIndexMod8);
				float3 RayOriginWorldPos = Ray.Origin - LWCHackToFloat(PrimaryView.PreViewTranslation);
				FRadianceCacheCoverage Coverage = GetRadianceCacheCoverage(RayOriginWorldPos, Ray.Direction, ClipmapDitherRandom); // LUMEN_LWC_TODO
				if (Coverage.bValid)
				{
					Ray.TMax = min(Ray.TMax, Coverage.MinTraceDistanceBeforeInterpolation);
					bIsRadianceCacheHit = true;
				}
			}
#endif

			// Set far-field context specialization
			Context.FarFieldMaxTraceDistance = FarFieldMaxTraceDistance;
			Context.FarFieldReferencePos = FarFieldReferencePos;

#if DIM_LIGHTING_MODE == LIGHTING_MODE_SURFACE_CACHE
			Result = TraceAndCalculateRayTracedLightingFromSurfaceCache(Ray, Context);

#if DIM_PACK_TRACE_DATA
			RWRetraceDataPackedBuffer[RayIndex] = PackTraceData(CreateTraceData(
				RayId,
				Result.MaterialShaderIndex,
				Result.Bookmark,
				Result.TraceHitDistance,
				Result.bIsHit || bIsRadianceCacheHit,
				Result.bIsRadianceCompleted,
				Result.bIsFarField));
#endif // DIM_PACK_TRACE_DATA

#else // DIM_LIGHTING_MODE == LIGHTING_MODE_SURFACE_CACHE
			// TODO: Hit lighting

#endif // DIM_LIGHTING_MODE
		}

#if DIM_WRITE_FINAL_LIGHTING
		bool bMoving = false;
		if (Result.bIsHit)
		{
			float3 HitTranslatedWorldPosition = Ray.Origin + Ray.Direction * Result.TraceHitDistance;
			bMoving = IsTraceMoving(TranslatedWorldPosition, SceneDepth, ScreenProbeAtlasCoord, HitTranslatedWorldPosition, Result.WorldVelocity);
		}

		Result.Radiance += GetSkylightLeaking(Ray.Direction, TraceHitDistance);
		Result.Radiance *= View.PreExposure;

		if (SampleHeightFog > 0)
		{
			float3 OriginToCollider = Ray.Direction * Result.TraceHitDistance;
			float CoverageForFog = 1.0; // There is always something or the sky fallback.
			Result.Radiance.rgb = GetFogOnLuminance(Result.Radiance.rgb, CoverageForFog, OriginToCollider);
		}

		RWTraceRadiance[ScreenProbeTraceCoord] = Result.Radiance;
		RWTraceHit[ScreenProbeTraceCoord] = EncodeProbeRayDistance(min(Result.TraceHitDistance, MaxTraceDistance), Result.bIsHit, bMoving);
#endif // DIM_WRITE_FINAL_LIGHTING
	}
}

#endif // LUMEN_HARDWARE_RAYTRACING || LUMEN_HARDWARE_INLINE_RAYTRACING