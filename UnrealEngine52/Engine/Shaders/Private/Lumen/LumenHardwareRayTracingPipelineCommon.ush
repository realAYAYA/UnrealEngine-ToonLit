// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#define LUMEN_RAYHIT_BOOKMARK_MISS 0xFFFFFFFF

struct FLumenRayHitBookmark
{
	uint PackedData[2];
};

/**
 * TraceData can represent three types of rays:
 * 1) Rays that hit an object with a valid surface-cache entry
 * 2) Rays that hit an object with an invalid surface-cache entry
 * 3) Rays that do not hit an object after having traveled 'TraceDistance' units
 *
 * NOTE: Miss rays need additional data and must be determined by the caller.
 */
struct FTraceData
{
	uint RayId;
	uint MaterialId;
	float TraceDistance;
	FLumenRayHitBookmark Bookmark;

	bool bIsHit;
	bool bIsRadianceCompleted; // Is radiance computation completed or do we need a fallback shading pass
	bool bIsFarField;
};

struct FTraceDataPacked
{
	uint PackedData[5];
};

FTraceData CreateTraceData(uint RayId, uint MaterialId, FLumenRayHitBookmark Bookmark, float TraceDistance,
	bool bIsHit, bool bIsRadianceCompleted, bool bIsFarField)
{
	FTraceData TraceData;
	TraceData.RayId = RayId;
	TraceData.MaterialId = MaterialId;
	TraceData.TraceDistance = TraceDistance;
	TraceData.Bookmark = Bookmark;
	TraceData.bIsHit = bIsHit;
	TraceData.bIsRadianceCompleted = bIsRadianceCompleted;
	TraceData.bIsFarField = bIsFarField;

	return TraceData;
}

FTraceDataPacked PackTraceData(FTraceData TraceData)
{
	FTraceDataPacked TraceDataPacked;
	TraceDataPacked.PackedData[0] = TraceData.RayId;
	TraceDataPacked.PackedData[1] = TraceData.MaterialId;
	TraceDataPacked.PackedData[2] =
		(asint(TraceData.TraceDistance) & 0xFFFFFFF8)
		| (TraceData.bIsHit & 0x01)
		| ((TraceData.bIsRadianceCompleted & 0x01) << 1)
		| ((TraceData.bIsFarField & 0x01) << 2);
	TraceDataPacked.PackedData[3] = TraceData.Bookmark.PackedData[0];
	TraceDataPacked.PackedData[4] = TraceData.Bookmark.PackedData[1];

	return TraceDataPacked;
}

FTraceData UnpackTraceData(FTraceDataPacked TraceDataPacked)
{
	FTraceData TraceData;
	TraceData.RayId = TraceDataPacked.PackedData[0];
	TraceData.MaterialId = TraceDataPacked.PackedData[1];
	TraceData.TraceDistance = asfloat(asint(TraceDataPacked.PackedData[2] & 0xFFFFFFF8));
	TraceData.bIsHit = (TraceDataPacked.PackedData[2] & 0x01) != 0;
	TraceData.bIsRadianceCompleted = (TraceDataPacked.PackedData[2] & 0x02) != 0;
	TraceData.bIsFarField = (TraceDataPacked.PackedData[2] & 0x04) != 0;
	TraceData.Bookmark.PackedData[0] = TraceDataPacked.PackedData[3];
	TraceData.Bookmark.PackedData[1] = TraceDataPacked.PackedData[4];

	return TraceData;
}
