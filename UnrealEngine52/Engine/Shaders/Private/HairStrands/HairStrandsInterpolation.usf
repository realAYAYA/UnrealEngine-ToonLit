// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "HairStrandsMeshProjectionCommon.ush"
#include "HairStrandsVisibilityCommon.ush"
#include "HairStrandsAABBCommon.ush" 
#include "HairStrandsClusterCommon.ush"
#include "HairStrandsVertexFactoryCommon.ush"

#if COMPILER_METAL || COMPILER_VULKAN
#define ALLOW_DEBUG_RENDERING 0
#else
#define ALLOW_DEBUG_RENDERING 1
#endif

#define DEBUG_ENABLE 0

#if DEBUG_ENABLE && ALLOW_DEBUG_RENDERING
#include "../ShaderPrint.ush"
#include "../ColorMap.ush"
#endif

///////////////////////////////////////////////////////////////////////////////////////////////////
// Guides
struct FGuideData
{
	uint3  VertexIndices;
	float3 VertexLerps;
	float3 VertexWeights;
	float3 OutPositionOffset;
};

FGuideData GetGuideData(uint InVertexIndex, uint InInterpolationData, float3 OutPositionOffset)
{
	FGuideData Out = (FGuideData)0;
	Out.OutPositionOffset	= OutPositionOffset;
	Out.VertexWeights		= float3(1, 0, 0);
	Out.VertexIndices		= 0;
	Out.VertexLerps			= 0;
	Out.VertexIndices.x		= InInterpolationData & 0xFFFFFF;
	Out.VertexLerps.x		= saturate(((InInterpolationData >> 24) & 0xFF) / 255.f);
	return Out;
}

FGuideData GetGuideData(uint InVertexIndex, uint4 InInterpolationData0, uint4 InInterpolationData1, float3 OutPositionOffset)
{
	FGuideData Out = (FGuideData)0;
	Out.OutPositionOffset = OutPositionOffset;

	Out.VertexIndices.x = InInterpolationData0.x | (( InInterpolationData1.x & 0xFF) << 16);
	Out.VertexIndices.y = InInterpolationData0.y | (((InInterpolationData1.x >> 8) & 0xFF) << 16);
	Out.VertexIndices.z = InInterpolationData0.z | (( InInterpolationData1.y & 0xFF) << 16);

	Out.VertexWeights	= float3(saturate((InInterpolationData0.w & 0xFF) / 255.f), saturate(((InInterpolationData0.w >> 8) & 0xFF) / 255.f), 0);
	Out.VertexWeights.z = saturate(1.0f - (Out.VertexWeights.x + Out.VertexWeights.y));

	Out.VertexLerps.x	= saturate(((InInterpolationData1.y >> 8) & 0xFF) / 255.f);
	Out.VertexLerps.y	= saturate(( InInterpolationData1.z & 0xFF) / 255.f);
	Out.VertexLerps.z	= saturate(((InInterpolationData1.z >> 8) & 0xFF) / 255.f);
	return Out;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Hair interpolation 

#define INTERPOLATION_RIGID 0
#define INTERPOLATION_SKINNING_OFFSET 1
#define INTERPOLATION_SKINNING_TRANSLATION 2
#define INTERPOLATION_SKINNING_ROTATION 3
#define INTERPOLATION_SKINNING_TRANSLATION_AND_ROTATION 4

#if SHADER_HAIRINTERPOLATION

uint VertexStart;
uint VertexCount;
uint DispatchCountX;
uint HairDebugMode;
float HairLengthScale;
float3 InRenHairPositionOffset;
float3 InSimHairPositionOffset;
float4x4 LocalToWorldMatrix;

Buffer<uint4>  RenRestPosePositionBuffer;
Buffer<uint4>  SimRestPosePositionBuffer;
Buffer<uint4>  SimDeformedPositionBuffer;

// Hair interpolation support either 
// * A single guide, 
// * Or up to 3 guides. 
// This option is setup on interpolation data of the groom asset
#if PERMUTATION_USE_SINGLE_GUIDE == 1
Buffer<uint>	InterpolationBuffer;
#else
Buffer<uint4>	Interpolation0Buffer;
Buffer<uint4>	Interpolation1Buffer;
#endif

Buffer<uint>   SimRootPointIndexBuffer;

uint HairStrandsVF_bIsCullingEnable;
#if PERMUTATION_CULLING == 1
Buffer<uint>	HairStrandsVF_CullingIndirectBuffer; 
Buffer<uint>	HairStrandsVF_CullingIndexBuffer;
Buffer<float>	HairStrandsVF_CullingRadiusScaleBuffer;
Buffer<uint>	HairStrandsVF_CullingIndirectBufferArgs;
#endif

#if PERMUTATION_DYNAMIC_GEOMETRY >= 1 || PERMUTATION_DEBUG == 1 
Buffer<uint>   RenVertexToCurveBuffer;
Buffer<uint>   SimVertexToCurveBuffer;
#endif

#if PERMUTATION_DEFORMER
Buffer<uint4>  RenDeformerPositionBuffer;
#endif
RWBuffer<uint4> OutRenDeformedPositionBuffer; 

#if PERMUTATION_DYNAMIC_GEOMETRY >= 1 

// Compact all these buffers into 2 buffers: translation + quaternion
Buffer<float4>  RenRestPosition0Buffer;
Buffer<float4>  RenRestPosition1Buffer;
Buffer<float4>  RenRestPosition2Buffer;

Buffer<float4>  RenDeformedPosition0Buffer;
Buffer<float4>  RenDeformedPosition1Buffer;
Buffer<float4>  RenDeformedPosition2Buffer;

Buffer<uint>	RenRootBarycentricBuffer;
Buffer<uint>	RenRootToUniqueTriangleIndexBuffer;

Buffer<float4>  SimRestPosition0Buffer;
Buffer<float4>  SimRestPosition1Buffer;
Buffer<float4>  SimRestPosition2Buffer;

Buffer<float4>  SimDeformedPosition0Buffer;
Buffer<float4>  SimDeformedPosition1Buffer;
Buffer<float4>  SimDeformedPosition2Buffer;

Buffer<uint>	SimRootBarycentricBuffer;
Buffer<uint>	SimRootToUniqueTriangleIndexBuffer;
#endif

Buffer<float4> OutSimHairPositionOffsetBuffer;
Buffer<float4> OutRenHairPositionOffsetBuffer;

#if PERMUTATION_GROUP_SIZE == 64
	#define GROUP_SIZE 64
#elif PERMUTATION_GROUP_SIZE == 32
	#define GROUP_SIZE 32
#else
	#error Unknown group size	
#endif

///////////////////////////////////////////////////////////////////////////////////////////////////
// Deformation offset

float3 ComputeStaticGeometryOffset(
	uint GuideIndex, 
	float GuideVertexWeight, 
	float3 OutSimHairPositionOffset)
{
	const float3 RestGuidePoint = f16tof32(SimRestPosePositionBuffer[GuideIndex].xyz) + InSimHairPositionOffset;

	const float3 DeformedGuidePoint = f16tof32(SimDeformedPositionBuffer[GuideIndex].xyz) + OutSimHairPositionOffset;

	return (DeformedGuidePoint - RestGuidePoint) * GuideVertexWeight;
}

float3 ComputeLocalGeometryOffset(
	uint GuideIndex, 
	float GuideVertexWeight)
{
	const uint RootIndex = SimRootPointIndexBuffer[GuideIndex];

	const float3 RestGuidePoint = f16tof32(SimRestPosePositionBuffer[GuideIndex].xyz) - f16tof32(SimRestPosePositionBuffer[RootIndex].xyz) ;

	const float3 DeformedGuidePoint = f16tof32(SimDeformedPositionBuffer[GuideIndex].xyz) - f16tof32(SimDeformedPositionBuffer[RootIndex].xyz) ;

	return (DeformedGuidePoint - RestGuidePoint) * GuideVertexWeight;
}

float3 ComputeDynamicGeometryOffset(
	uint GuideIndex, 
	float GuideVertexWeight, 
	FHairMeshTriangle RestTriangle, 
	FHairMeshTriangle DeformedTriangle,
	float3 RootBarycentric,
	float3 OutSimHairPositionOffset)
{
	const float3 RestGuidePoint = f16tof32(SimRestPosePositionBuffer[GuideIndex].xyz) + InSimHairPositionOffset;
	const float3 LocalRestGuidePoint = ToTriangle(RestGuidePoint, RootBarycentric, RestTriangle);

	const float3 DeformedGuidePoint = f16tof32(SimDeformedPositionBuffer[GuideIndex].xyz) + OutSimHairPositionOffset;
	const float3 LocalDeformedGuidePoint = ToTriangle(DeformedGuidePoint, RootBarycentric, DeformedTriangle);

	return (LocalDeformedGuidePoint - LocalRestGuidePoint) * GuideVertexWeight;
}

float3 ComputeTranslateGeometryOffset(
	uint GuideIndex, 
	float GuideVertexWeight)
{
	const uint RootIndex = SimRootPointIndexBuffer[GuideIndex];

	const float3 RestGuidePoint = f16tof32(SimRestPosePositionBuffer[GuideIndex].xyz) - f16tof32(SimRestPosePositionBuffer[RootIndex].xyz) ;

	const float3 DeformedGuidePoint = f16tof32(SimDeformedPositionBuffer[GuideIndex].xyz) - f16tof32(SimDeformedPositionBuffer[RootIndex].xyz) ;

	return (DeformedGuidePoint - RestGuidePoint) * GuideVertexWeight;
}

float3 ComputeRotateGeometryOffset(
	uint GuideIndex, 
	float GuideVertexWeight,
	FHairMeshTriangle RestTriangle, 
	FHairMeshTriangle DeformedTriangle)
{	
	const uint RootIndex = SimRootPointIndexBuffer[GuideIndex];

	const float3 RestGuidePoint = f16tof32(SimRestPosePositionBuffer[GuideIndex].xyz) - f16tof32(SimRestPosePositionBuffer[RootIndex].xyz) ;
	const float3 LocalRestGuidePoint = VectorToTriangle(RestGuidePoint, RestTriangle);

	const float3 DeformedGuidePoint = f16tof32(SimDeformedPositionBuffer[GuideIndex].xyz) - f16tof32(SimDeformedPositionBuffer[RootIndex].xyz) ;
	const float3 LocalDeformedGuidePoint = VectorToTriangle(DeformedGuidePoint, DeformedTriangle);

	return (LocalDeformedGuidePoint - LocalRestGuidePoint) * GuideVertexWeight;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Root triangles

struct FRootTriangleData
{
	uint RootIndex;
	uint TriangleIndex;
	float3 RootBarycentric;
	FHairMeshTriangle RestTriangle;
	FHairMeshTriangle DeformedTriangle;
};

FRootTriangleData GetRootTriangleData(uint VertexIndex, bool bSim)
{
	FRootTriangleData Out = (FRootTriangleData)0;
	#if PERMUTATION_DYNAMIC_GEOMETRY >= 1 
	if (bSim)
	{
		Out.RootIndex		 = SimVertexToCurveBuffer[VertexIndex];
		Out.TriangleIndex	 = SimRootToUniqueTriangleIndexBuffer[Out.RootIndex];
		Out.RootBarycentric  = DecodeBarycentrics(SimRootBarycentricBuffer[Out.RootIndex]);
		Out.RestTriangle	 = GetTriangleTransformation(Out.TriangleIndex, SimRestPosition0Buffer, SimRestPosition1Buffer, SimRestPosition2Buffer);
		Out.DeformedTriangle = GetTriangleTransformation(Out.TriangleIndex, SimDeformedPosition0Buffer, SimDeformedPosition1Buffer, SimDeformedPosition2Buffer);
	}
	else
	{
		Out.RootIndex		 = RenVertexToCurveBuffer[VertexIndex];
		Out.TriangleIndex	 = RenRootToUniqueTriangleIndexBuffer[Out.RootIndex];
		Out.RootBarycentric  = DecodeBarycentrics(RenRootBarycentricBuffer[Out.RootIndex]);
		Out.RestTriangle	 = GetTriangleTransformation(Out.TriangleIndex, RenRestPosition0Buffer, RenRestPosition1Buffer, RenRestPosition2Buffer);
		Out.DeformedTriangle = GetTriangleTransformation(Out.TriangleIndex, RenDeformedPosition0Buffer, RenDeformedPosition1Buffer, RenDeformedPosition2Buffer);
	}
	#endif
	return Out;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Guides

FGuideData GetGuideData(uint InVertexIndex)
{
#if PERMUTATION_SIMULATION == 1
  #if PERMUTATION_USE_SINGLE_GUIDE
	return GetGuideData(InVertexIndex, InterpolationBuffer[InVertexIndex], OutSimHairPositionOffsetBuffer[0].xyz);
  #else
	return GetGuideData(InVertexIndex, Interpolation0Buffer[InVertexIndex], Interpolation1Buffer[InVertexIndex], OutSimHairPositionOffsetBuffer[0].xyz);
  #endif
#else
	return (FGuideData)0;
#endif
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Rigid interpolation
float3 ApplyRigidInterpolation(FGuideData GuideData, float3 InPosition)
{
	float3 CurrOffset = 0;
#if PERMUTATION_SIMULATION == 1
	#if PERMUTATION_USE_SINGLE_GUIDE == 1
	const uint K = 0;
	#else
	[unroll]
	for (uint K = 0; K < 3; ++K)
	#endif
	{
		const uint GuideIndex0 = GuideData.VertexIndices[K];
		const uint GuideIndex1 = GuideIndex0 + 1;

		const float3 Offset0 = ComputeStaticGeometryOffset(GuideIndex0, GuideData.VertexWeights[K], GuideData.OutPositionOffset);
		const float3 Offset1 = ComputeStaticGeometryOffset(GuideIndex1, GuideData.VertexWeights[K], GuideData.OutPositionOffset);

		CurrOffset += lerp(Offset0, Offset1, GuideData.VertexLerps[K]);
	}
#endif

	return InPosition + CurrOffset;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Skinning with offset
float3 ApplySkinningWithOffset(const FGuideData GuideData, const FRootTriangleData RenTri, float3 InPosition)
{
	float3 CurrOffset = 0;

	// Compute the simulation offset in hair local space (i.e., triangle)
#if PERMUTATION_SIMULATION == 1
	#if PERMUTATION_USE_SINGLE_GUIDE == 1
	const uint K = 0;
	#else
	[unroll]
	for (uint K = 0; K < 3; ++K)
	#endif
	{
		const uint GuideIndex0 = GuideData.VertexIndices[K];
		const uint GuideIndex1 = GuideIndex0 + 1;

		const FRootTriangleData SimTri = GetRootTriangleData(GuideIndex0, true);

		const float3 Offset0 = ComputeDynamicGeometryOffset(GuideIndex0, GuideData.VertexWeights[K], SimTri.RestTriangle, SimTri.DeformedTriangle, SimTri.RootBarycentric, GuideData.OutPositionOffset);
		const float3 Offset1 = ComputeDynamicGeometryOffset(GuideIndex1, GuideData.VertexWeights[K], SimTri.RestTriangle, SimTri.DeformedTriangle, SimTri.RootBarycentric, GuideData.OutPositionOffset);

		CurrOffset += VectorToWorld(lerp(Offset0, Offset1, GuideData.VertexLerps[K]), SimTri.DeformedTriangle);
	}
#endif		

	InPosition = ToTriangle(InPosition, RenTri.RootBarycentric, RenTri.RestTriangle);
	InPosition = ToWorld(InPosition, RenTri.RootBarycentric, RenTri.DeformedTriangle) + CurrOffset;

	return InPosition;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Skinning with translantion
float3 ApplySkinningWithTranslation(const FGuideData GuideData, const FRootTriangleData RenTri, float3 InPosition)
{
	InPosition -= RenTri.RootBarycentric.x * RenTri.RestTriangle.P0 + RenTri.RootBarycentric.y * RenTri.RestTriangle.P1 + RenTri.RootBarycentric.z * RenTri.RestTriangle.P2;

	float3 CurrOffset = 0;

#if PERMUTATION_SIMULATION == 1
	#if PERMUTATION_USE_SINGLE_GUIDE == 1
	const uint K = 0;
	#else
	[unroll]
	for (uint K = 0; K < 3; ++K)
	#endif
	{
		const uint GuideIndex0 = GuideData.VertexIndices[K];
		const uint GuideIndex1 = GuideIndex0 + 1;

		const float3 Offset0 = ComputeTranslateGeometryOffset(GuideIndex0, 1.0);
		const float3 Offset1 = ComputeTranslateGeometryOffset(GuideIndex1, 1.0);

		CurrOffset += GuideData.VertexWeights[K] * lerp(Offset0, Offset1, GuideData.VertexLerps[K]);
	}
#endif

	InPosition += RenTri.RootBarycentric.x * RenTri.DeformedTriangle.P0 + RenTri.RootBarycentric.y * RenTri.DeformedTriangle.P1 + RenTri.RootBarycentric.z * RenTri.DeformedTriangle.P2;
	return InPosition + CurrOffset;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Skinning with rotation
float3 ApplySkinningWithRotation(const FGuideData GuideData, const FRootTriangleData RenTri, float3 InPosition)
{
	InPosition -= RenTri.RootBarycentric.x * RenTri.RestTriangle.P0 + RenTri.RootBarycentric.y * RenTri.RestTriangle.P1 + RenTri.RootBarycentric.z * RenTri.RestTriangle.P2;

	float3 CurrOffset = 0;

#if PERMUTATION_SIMULATION == 1
	#if PERMUTATION_USE_SINGLE_GUIDE == 1
	const uint K = 0;
	#else
	[unroll]
	for (uint K = 0; K < 3; ++K)
	#endif
	{
		const uint GuideIndex0 = GuideData.VertexIndices[K];
		const uint GuideIndex1 = GuideIndex0 + 1;

		const FRootTriangleData SimTri = GetRootTriangleData(GuideIndex0, true);

		const float3 LocalPoint = VectorToTriangle(InPosition, SimTri.RestTriangle);

		const float3 Offset0 = ComputeRotateGeometryOffset(GuideIndex0, 1.0, SimTri.RestTriangle, SimTri.DeformedTriangle/*, SimHairPositionOffset*/);
		const float3 Offset1 = ComputeRotateGeometryOffset(GuideIndex1, 1.0, SimTri.RestTriangle, SimTri.DeformedTriangle/*, SimHairPositionOffset*/);

		CurrOffset += GuideData.VertexWeights[K] * VectorToWorld(lerp(Offset0, Offset1, GuideData.VertexLerps[K]) + LocalPoint, SimTri.DeformedTriangle);
	}
#endif

	InPosition = RenTri.RootBarycentric.x * RenTri.DeformedTriangle.P0 + RenTri.RootBarycentric.y * RenTri.DeformedTriangle.P1 + RenTri.RootBarycentric.z * RenTri.DeformedTriangle.P2;
	return InPosition + CurrOffset;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Skinning with translation and rotation
float3 ApplySkinningWithTranslationAndRotation(const FGuideData GuideData, const FRootTriangleData RenTri, float3 InPosition)
{
	float3 CurrOffset = 0;

#if PERMUTATION_SIMULATION == 1
	#if PERMUTATION_USE_SINGLE_GUIDE == 1
	const uint K = 0;
	#else
	[unroll]
	for (uint K = 0; K < 3; ++K)
	#endif
	{
		const uint GuideIndex0 = GuideData.VertexIndices[K];
		const uint GuideIndex1 = GuideIndex0 + 1;

		const FRootTriangleData SimTri = GetRootTriangleData(GuideIndex0, true);

		const float3 LocalPoint = ToTriangle(InPosition, SimTri.RootBarycentric, SimTri.RestTriangle);

		const float3 Offset0 = ComputeDynamicGeometryOffset(GuideIndex0, 1.0, SimTri.RestTriangle, SimTri.DeformedTriangle, SimTri.RootBarycentric, GuideData.OutPositionOffset);
		const float3 Offset1 = ComputeDynamicGeometryOffset(GuideIndex1, 1.0, SimTri.RestTriangle, SimTri.DeformedTriangle, SimTri.RootBarycentric, GuideData.OutPositionOffset);

		CurrOffset += GuideData.VertexWeights[K] * ToWorld(lerp(Offset0, Offset1, GuideData.VertexLerps[K]) + LocalPoint, SimTri.RootBarycentric, SimTri.DeformedTriangle);
	}
#endif

	return CurrOffset;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Deformer transformation
float3 ApplyDeformer(const FRootTriangleData RenTri, float3 InRestPostion, float3 InDeformerPosition, float3 InDeformedPosition)
{
	float3 OutPosition = InDeformedPosition;
#if PERMUTATION_DEFORMER
	#if PERMUTATION_DYNAMIC_GEOMETRY == 0
		OutPosition = InDeformedPosition + (InDeformerPosition - InRestPostion);
	#else
		const float3 LocalRestPoint     = ToTriangle(InRestPostion, RenTri.RootBarycentric, RenTri.RestTriangle);
		const float3 LocalDeformerPoint = ToTriangle(InDeformerPosition, RenTri.RootBarycentric, RenTri.RestTriangle);

		const float3 LocalOffset = LocalDeformerPoint - LocalRestPoint;
		const float3 LocalDeformedPoint = ToTriangle(InDeformedPosition, RenTri.RootBarycentric, RenTri.DeformedTriangle);
		OutPosition = ToWorld(LocalDeformedPoint + LocalOffset, RenTri.RootBarycentric, RenTri.DeformedTriangle);
	#endif
#endif
	return OutPosition;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Interpolation

[numthreads(GROUP_SIZE, 1, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	// 1. Find vertex index
	uint VertexIndex = VertexStart + GetHairStrandsVertexFetchIndex(DispatchThreadId, GROUP_SIZE, DispatchCountX);
#if PERMUTATION_CULLING
	if (HairStrandsVF_bIsCullingEnable)
	{
		const uint FetchIndex = GetHairStrandsVertexFetchIndex_Culled(DispatchThreadId, GROUP_SIZE);
		const uint VertexCountAfterCulling = HairStrandsVF_CullingIndirectBuffer[3];
		if (FetchIndex >= VertexCountAfterCulling)
		{
			return;
		}
		VertexIndex = HairStrandsVF_CullingIndexBuffer[FetchIndex];
	}
#endif


	// 2. Appply deformation
	if (VertexIndex < (VertexStart + VertexCount))
	{
		const FGuideData GuideData = GetGuideData(VertexIndex);
		const FRootTriangleData RenTri = GetRootTriangleData(VertexIndex, false);

		// Manual decoding of the rest position
		const uint4 PackedRestPosition = RenRestPosePositionBuffer[VertexIndex];
		const float3 RestPosition = UnpackHairControlPointPosition(PackedRestPosition, InRenHairPositionOffset);

		float3 OutPosition = 0.0f;

		// 1. Rigid transformation
		// ControlPoint is in the local hair referential
		// CurrOffset takes only translation component into account, and is done in object local space (vs. triangle/hair local space)
		#if PERMUTATION_DYNAMIC_GEOMETRY == INTERPOLATION_RIGID
		{
			OutPosition = ApplyRigidInterpolation(GuideData, RestPosition);
		}
		// 2. Skin transformation
		// Apply dynamic mesh deformation (translation / rotation)
		#elif PERMUTATION_DYNAMIC_GEOMETRY == INTERPOLATION_SKINNING_OFFSET
		{
			OutPosition = ApplySkinningWithOffset(GuideData, RenTri, RestPosition);
		}
		// 3. Linear blend skinning (translation)
		#elif PERMUTATION_DYNAMIC_GEOMETRY == INTERPOLATION_SKINNING_TRANSLATION
		{
			OutPosition = ApplySkinningWithTranslation(GuideData, RenTri, RestPosition);
		}
		// 4. Linear blend skinning (rotation)
		#elif PERMUTATION_DYNAMIC_GEOMETRY == INTERPOLATION_SKINNING_ROTATION
		{
			OutPosition = ApplySkinningWithRotation(GuideData, RenTri, RestPosition);
		}
		// 5. Linear blend skinning (translation + rotation)
		#elif PERMUTATION_DYNAMIC_GEOMETRY == INTERPOLATION_SKINNING_TRANSLATION_AND_ROTATION
		{
			OutPosition = ApplySkinningWithTranslationAndRotation(GuideData, RenTri, RestPosition);
		}
		#endif

		// 3. Apply deformer
		#if PERMUTATION_DEFORMER
		//if (VertexIndex > 10000000)
		{
			const uint4 PackedDeformerPosition = RenDeformerPositionBuffer[VertexIndex];
			const float3 DeformerPosition = UnpackHairControlPointPosition(PackedDeformerPosition, InRenHairPositionOffset);
			OutPosition = ApplyDeformer(RenTri, RestPosition, DeformerPosition, OutPosition);
		}
		#endif

		// 4. Write out the final position
		// Optionally trim hair
		if (HairLengthScale < 1.0f)
		{
			const float CoordU = UnpackHairControlPointCoordU(PackedRestPosition);
			if (HairLengthScale < CoordU)
			{
				OutPosition = INFINITE_FLOAT;
			}
		}
		OutRenDeformedPositionBuffer[VertexIndex] = PackHairControlPointPosition(PackedRestPosition, OutPosition, OutRenHairPositionOffsetBuffer[0].xyz);
	}
}
#endif // SHADER_HAIRINTERPOLATION

///////////////////////////////////////////////////////////////////////////////////////////////////
// Patch attribute (for debug visualization)
#if SHADER_PATCHATTRIBUTE

#include "HairStrandsVertexFactoryCommon.ush"
#include "HairStrandsAttributeCommon.ush"

uint				CurveCount;

Buffer<uint>		RenCurveBuffer;
uint4				RenAttributeOffsets[HAIR_ATTRIBUTE_OFFSET_COUNT];
Buffer<int>			RenVertexToClusterIdBuffer;

#if PERMUTATION_SIMULATION == 1
Buffer<uint>		InterpolationBuffer;
#elif PERMUTATION_SIMULATION == 2
Buffer<uint4>		Interpolation0Buffer;
Buffer<uint4>		Interpolation1Buffer;
#endif
RWByteAddressBuffer	OutRenAttributeBuffer;


FGuideData GetGuideData(uint InVertexIndex)
{
#if PERMUTATION_SIMULATION == 1
	return GetGuideData(InVertexIndex, InterpolationBuffer[InVertexIndex], 0 /*OutPositionOffset*/);
#elif PERMUTATION_SIMULATION == 2
	return GetGuideData(InVertexIndex, Interpolation0Buffer[InVertexIndex], Interpolation1Buffer[InVertexIndex], 0 /*OutPositionOffset*/);
#else
	return (FGuideData)0;
#endif
}
groupshared uint SeedValues[1024];

uint ToSeedHash(uint In)
{
	const uint InLo8bits =  In & 0xFF;
	const uint InHi8btis = (In >> 8) & 0xFF;

	// Using FNV1 hash to break linearity of ClusterId (generated by linearly parsing cluster grid)
	uint Hash = 0;
	Hash = Hash * 17;
	Hash = Hash ^ InLo8bits;
	Hash = Hash * 17;
	Hash = Hash ^ InHi8btis;
	return (Hash & 0xFF);
}

[numthreads(1024, 1, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID, uint GroupThread1D : SV_GroupIndex)
{
	SeedValues[GroupThread1D] = 0;

	const uint CurveIndex = DispatchThreadId.x;
	const bool bValid = CurveIndex < CurveCount;
	if (bValid)
	{
		uint Out = 0;
		#if PERMUTATION_SIMULATION == 0
		{
			const uint VertexIndex0		= UnpackHairCurve(RenCurveBuffer[CurveIndex]).PointIndex;
			const uint ClusterId		= RenVertexToClusterIdBuffer[VertexIndex0];
			SeedValues[GroupThread1D]	= ToSeedHash(ClusterId);
		}
		#else // if (PERMUTATION_SIMULATION > 0)
		{
			const uint VertexIndex0		= UnpackHairCurve(RenCurveBuffer[CurveIndex]).PointIndex;
			const FGuideData GuideData	= GetGuideData(VertexIndex0);
			const uint GuideIndex		= GuideData.VertexIndices[0]; // Take the closest guide
			SeedValues[GroupThread1D]	= ToSeedHash(GuideIndex);
		}
		#endif // PERMUTATION_SIMULATION
	}

	GroupMemoryBarrierWithGroupSync();

	// Write 4 values at a type since seed are encoded into 8bits, and data are written out as uint
	if ((CurveIndex % 4) == 0)
	{	
		uint Out = 0;
		Out |= (SeedValues[GroupThread1D]   & 0xFF);
		Out |= (SeedValues[GroupThread1D+1] & 0xFF) << 8;
		Out |= (SeedValues[GroupThread1D+2] & 0xFF) << 16;
		Out |= (SeedValues[GroupThread1D+3] & 0xFF) << 24;

		const uint OffsetInBytes = HAIR_ATTRIBUTE_OFFSET_SEED(RenAttributeOffsets);
		OutRenAttributeBuffer.Store(OffsetInBytes + CurveIndex, Out);
	}
}
#endif // SHADER_PATCHATTRIBUTE

///////////////////////////////////////////////////////////////////////////////////////////////////
// Hair clusters update 

#if SHADER_CLUSTERAABB

#if PERMUTATION_GROUP_SIZE == 64
	#define GROUP_SIZE 64
#elif PERMUTATION_GROUP_SIZE == 32
	#define GROUP_SIZE 32
#else
	#error Unknown group size	
#endif

uint TotalClusterCount;
float3 CPUBoundMin;
float3 CPUBoundMax;

uint VertexStart;
uint VertexCount;
float RcpSampleWeight;

float4x4 LocalToTranslatedWorldMatrix;

Buffer<uint4> RenderDeformedPositionBuffer;
Buffer<uint> ClusterVertexIdBuffer;
Buffer<uint> ClusterIdBuffer;
Buffer<uint> ClusterIndexOffsetBuffer;
Buffer<uint> ClusterIndexCountBuffer;
Buffer<uint> CulledClusterCountBuffer;

Buffer<uint> IndirectBuffer;
Buffer<uint> HairStrandsVF_CullingIndirectBuffer;
Buffer<float4> RenderDeformedOffsetBuffer;

RWBuffer<int> OutClusterAABBBuffer; 	// Cluster data packed as {uint3 AABBMin, uint3 AABBMax}
RWBuffer<int> OutGroupAABBBuffer; 		// Group data packed as {uint3 AABBMin, uint3 AABBMax}

#if GROUP_SIZE!=64 && GROUP_SIZE!=32
#error Unhandled group size
#endif

groupshared float3 SharedClusterAABBMin[GROUP_SIZE];
groupshared float3 SharedClusterAABBMax[GROUP_SIZE];

[numthreads(GROUP_SIZE, 1, 1)]
void ClusterAABBEvaluationCS(uint3 DispatchThreadId : SV_DispatchThreadID, uint3 GroupId : SV_GroupID, uint3 GroupThreadId : SV_GroupThreadID, uint ThreadIndex : SV_GroupIndex)
{
#if PERMUTATION_USE_CPU_AABB
	// Only update the full group AABB
	if (all(DispatchThreadId == 0))
	{
		FHairAABB Bound;
		Bound.Min = CPUBoundMin;
		Bound.Max = CPUBoundMax;
		WriteHairAABB(0, Bound, OutGroupAABBBuffer);
	}
#else // PERMUTATION_USE_CPU_AABB
	const uint CulledClusterCount = CulledClusterCountBuffer[0];
	const uint DispatchCountX = IndirectBuffer[0];
	const uint ClusterFetchIndex = GroupId.x + GroupId.y * DispatchCountX;
	if (ClusterFetchIndex >= CulledClusterCount)
	{
		return;
	}
	const uint ClusterId   = ClusterIdBuffer[ClusterFetchIndex];
	const uint IndexOffset = ClusterIndexOffsetBuffer[ClusterFetchIndex];
	const uint IndexCount = max(min(ClusterIndexCountBuffer[ClusterFetchIndex], GROUP_SIZE),ClusterIndexCountBuffer[ClusterFetchIndex] * RcpSampleWeight);
	
	const uint VertexCountAfterCulling = HairStrandsVF_CullingIndirectBuffer[3];

	int3 ClusterAABBMin = 9999999.0f;
	int3 ClusterAABBMax =-9999999.0f;

	const uint LoopCount = (IndexCount + GROUP_SIZE - 1) / GROUP_SIZE;
	for (uint LoopIt = 0; LoopIt < LoopCount; ++LoopIt)
	{
		uint GroupReadOffset = LoopIt * GROUP_SIZE;
		uint ThreadReadOffset = GroupReadOffset + GroupThreadId.x;

		if (ThreadReadOffset < IndexCount)
		{
			const float3 OutHairPositionOffset = RenderDeformedOffsetBuffer[0].xyz;
			const uint VertexIndex = ClusterVertexIdBuffer[IndexOffset + ThreadReadOffset];
			if ((VertexIndex >= VertexStart) && (VertexIndex < (VertexStart + VertexCount)))
			{
				const FHairControlPoint CP = UnpackHairControlPoint(RenderDeformedPositionBuffer[VertexIndex], OutHairPositionOffset, 1, 1, 1);

				if (all(IsFinite(CP.Position)))
				{
					const int3 WorldSpaceCentimeters = int3(mul(float4(CP.Position, 1.0f), LocalToTranslatedWorldMatrix).xyz);
					const int3 WorldSpaceCentimetersMin = WorldSpaceCentimeters - 1;
					const int3 WorldSpaceCentimetersMax = WorldSpaceCentimeters + 1;

					ClusterAABBMin = min(ClusterAABBMin, WorldSpaceCentimetersMin);
					ClusterAABBMax = max(ClusterAABBMax, WorldSpaceCentimetersMax);
				}
			}
		}
	}

	// Write each thread result to shared memory
	const uint LocalIndex = GroupThreadId.x;
	SharedClusterAABBMin[LocalIndex] = ClusterAABBMin;
	SharedClusterAABBMax[LocalIndex] = ClusterAABBMax;

	// Do a local reduction in shared memory. Assumes ClusterLOD0.VertexCount>64 to have all min&max values valid.
#if GROUP_SIZE==64
	GroupMemoryBarrierWithGroupSync();
	if (LocalIndex < 32)
	{
		SharedClusterAABBMin[LocalIndex] = min(SharedClusterAABBMin[LocalIndex], SharedClusterAABBMin[LocalIndex + 32]);
		SharedClusterAABBMax[LocalIndex] = max(SharedClusterAABBMax[LocalIndex], SharedClusterAABBMax[LocalIndex + 32]);
	}
#endif
	GroupMemoryBarrierWithGroupSync();
	if (LocalIndex < 16)
	{
		SharedClusterAABBMin[LocalIndex] = min(SharedClusterAABBMin[LocalIndex], SharedClusterAABBMin[LocalIndex + 16]);
		SharedClusterAABBMax[LocalIndex] = max(SharedClusterAABBMax[LocalIndex], SharedClusterAABBMax[LocalIndex + 16]);
	}
	GroupMemoryBarrierWithGroupSync();
	if (LocalIndex < 8)
	{
		SharedClusterAABBMin[LocalIndex] = min(SharedClusterAABBMin[LocalIndex], SharedClusterAABBMin[LocalIndex + 8]);
		SharedClusterAABBMax[LocalIndex] = max(SharedClusterAABBMax[LocalIndex], SharedClusterAABBMax[LocalIndex + 8]);
	}
	// No hardware has SIMD Vector unit operating in sync with less than 16 threads per group. So can skip sync now.
	//GroupMemoryBarrierWithGroupSync();
	if (LocalIndex < 4)
	{
		SharedClusterAABBMin[LocalIndex] = min(SharedClusterAABBMin[LocalIndex], SharedClusterAABBMin[LocalIndex + 4]);
		SharedClusterAABBMax[LocalIndex] = max(SharedClusterAABBMax[LocalIndex], SharedClusterAABBMax[LocalIndex + 4]);
	}
	//GroupMemoryBarrierWithGroupSync();
	if (LocalIndex < 2)
	{
		SharedClusterAABBMin[LocalIndex] = min(SharedClusterAABBMin[LocalIndex], SharedClusterAABBMin[LocalIndex + 2]);
		SharedClusterAABBMax[LocalIndex] = max(SharedClusterAABBMax[LocalIndex], SharedClusterAABBMax[LocalIndex + 2]);
	}
	//GroupMemoryBarrierWithGroupSync();
	if (LocalIndex < 1)
	{
		SharedClusterAABBMin[LocalIndex] = min(SharedClusterAABBMin[LocalIndex], SharedClusterAABBMin[LocalIndex + 1]);
		SharedClusterAABBMax[LocalIndex] = max(SharedClusterAABBMax[LocalIndex], SharedClusterAABBMax[LocalIndex + 1]);
	}

	// Write out hair cluster AABB
	if (LocalIndex == 0)
	{
		const uint ClusterIdx6 = ClusterId * 6;
		OutClusterAABBBuffer[ClusterIdx6 + 0] = SharedClusterAABBMin[0].x;
		OutClusterAABBBuffer[ClusterIdx6 + 1] = SharedClusterAABBMin[0].y;
		OutClusterAABBBuffer[ClusterIdx6 + 2] = SharedClusterAABBMin[0].z;
		OutClusterAABBBuffer[ClusterIdx6 + 3] = SharedClusterAABBMax[0].x;
		OutClusterAABBBuffer[ClusterIdx6 + 4] = SharedClusterAABBMax[0].y;
		OutClusterAABBBuffer[ClusterIdx6 + 5] = SharedClusterAABBMax[0].z;

		// And contribute to the group full AABB
		FHairAABB Bound;
		Bound.Min.x = SharedClusterAABBMin[0].x;
		Bound.Min.y = SharedClusterAABBMin[0].y;
		Bound.Min.z = SharedClusterAABBMin[0].z;
		Bound.Max.x = SharedClusterAABBMax[0].x;
		Bound.Max.y = SharedClusterAABBMax[0].y;
		Bound.Max.z = SharedClusterAABBMax[0].z;
		InterlockHairAABB(0, Bound, OutGroupAABBBuffer);
	}

	#if DEBUG_ENABLE
	if (ThreadIndex == 0)
	{
		const float4 DebugColor = float4(ColorMapViridis(ClusterId / float(TotalClusterCount)),1);
		AddAABBTWS(SharedClusterAABBMin[0], SharedClusterAABBMax[0], DebugColor);
		AddReferentialWS(LocalToWorldMatrix, 10);
	}
	#endif

	// Min/Max group AABB is done later by another pass
#endif // PERMUTATION_USE_CPU_AABB
}

#endif // SHADER_CLUSTERAABB

///////////////////////////////////////////////////////////////////////////////////////////////////
// Hair transfer prev. position

#if SHADER_HAIRTRANSFER_PREV_POSITION

uint ElementCount;
uint DispatchCountX;
Buffer<uint4> InBuffer;
RWBuffer<uint4> OutBuffer;

#define GROUP_SIZE 64
[numthreads(GROUP_SIZE, 1, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	const uint Index = GetHairStrandsVertexFetchIndex(DispatchThreadId, GROUP_SIZE, DispatchCountX);
	if (Index >= ElementCount)
	{
		return;
	}
	OutBuffer[Index] = InBuffer[Index];
}

#endif // SHADER_HAIRTRANSFER_PREV_POSITION

///////////////////////////////////////////////////////////////////////////////////////////////////
// Groom cache update

#if SHADER_GROOMCACHE_UPDATE

uint ElementCount;
uint DispatchCountX;
uint bHasRadiusData;

Buffer<float> InRadiusBuffer;
Buffer<float> InAnimatedBuffer;
Buffer<uint4> InRestPoseBuffer;
Buffer<float4> InDeformedOffsetBuffer;
RWBuffer<uint4> OutDeformedBuffer;

#define GROUP_SIZE 64
[numthreads(GROUP_SIZE, 1, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	const uint Index = GetHairStrandsVertexFetchIndex(DispatchThreadId, GROUP_SIZE, DispatchCountX);
	if (Index >= ElementCount)
	{
		return;
	}

	const uint Index3 = Index * 3;
	const float3 InAnimatedPosition = float3(
		InAnimatedBuffer[Index3],
		InAnimatedBuffer[Index3+1],
		InAnimatedBuffer[Index3+2]);
		
	uint4 PackedRestPosition = InRestPoseBuffer[Index];
	float3 HairPositionOffset = InDeformedOffsetBuffer[0].xyz;
	float3 WorldVertexPosition = InAnimatedPosition - HairPositionOffset;

	FHairControlPoint CP = UnpackHairControlPoint(PackedRestPosition, float3(0, 0, 0), 1, 1, 1);
	CP.Position = WorldVertexPosition;

	if (bHasRadiusData == 1)
	{
		CP.WorldRadius = InRadiusBuffer[Index];
	}

	OutDeformedBuffer[Index] = PackHairControlPoint(CP, float3(0, 0, 0), 1);
}

#endif // SHADER_GROOMCACHE_UPDATE
