// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "HairStrandsAABBCommon.ush"

#if SHADER_AABBUPDATE 

uint bClearBuffer;
uint MacroGroupId;
uint MacroGroupValid;

float PixelSizeAtDepth1;
float NumPixelPerVoxel;
uint  VoxelPageResolution;

// Group data packed as {uint3 AABBMin, uint3 AABBMax}
Buffer<int> InGroupAABBBuffer0;
Buffer<int> InGroupAABBBuffer1;
Buffer<int> InGroupAABBBuffer2;
Buffer<int> InGroupAABBBuffer3;
Buffer<int> InGroupAABBBuffer4;
Buffer<int> InGroupAABBBuffer5;
Buffer<int> InGroupAABBBuffer6;
Buffer<int> InGroupAABBBuffer7;
RWBuffer<int> OutMacroGroupAABBBuffer;
RWBuffer<float> OutMacroGroupVoxelSizeBuffer;

void UpdateValue(inout FHairAABB B, in uint Index, in Buffer<int> InBuffer)
{
	FHairAABB A = ReadHairAABB(Index, InBuffer);
	B = UnionHairAABB(A, B);
}

[numthreads(1, 1, 1)]
void Main(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	if (DispatchThreadId.x == 0)
	{
		FHairAABB Bound = InitHairAABB();
		if (bClearBuffer == 0)
		{
			Bound = ReadHairAABB(MacroGroupId, OutMacroGroupAABBBuffer);
		}

		if (MacroGroupValid & 1)   { UpdateValue(Bound, 0, InGroupAABBBuffer0); }
		if (MacroGroupValid & 2)   { UpdateValue(Bound, 0, InGroupAABBBuffer1); }
		if (MacroGroupValid & 4)   { UpdateValue(Bound, 0, InGroupAABBBuffer2); }
		if (MacroGroupValid & 8)   { UpdateValue(Bound, 0, InGroupAABBBuffer3); }
		if (MacroGroupValid & 16)  { UpdateValue(Bound, 0, InGroupAABBBuffer4); }
		if (MacroGroupValid & 32)  { UpdateValue(Bound, 0, InGroupAABBBuffer5); }
		if (MacroGroupValid & 64)  { UpdateValue(Bound, 0, InGroupAABBBuffer6); }
		if (MacroGroupValid & 128) { UpdateValue(Bound, 0, InGroupAABBBuffer7); }

		// Transform positions in camera space
		const FHairAABB ViewBound = Transform(Bound, View.TranslatedWorldToCameraView);

		// Compute voxel size to have 1px = 1 voxels
		const float DefaultNearClip = 0.001f;
		const float PixelWorldSize = PixelSizeAtDepth1 * max(ViewBound.Min.z, DefaultNearClip);
		float VoxelWorldSize = PixelWorldSize * NumPixelPerVoxel;
		WriteHairAABB(MacroGroupId, Bound, OutMacroGroupAABBBuffer);

		// Ensure the MacroGroup AABB has, at minimum, the size of a voxel page
		const float3 Extend = Bound.Max - Bound.Min;
		const float MaxExtent = max3(Extend.x, Extend.y, Extend.z);
		const float BoundVoxelCount = MaxExtent / VoxelWorldSize;
		if (BoundVoxelCount < float(VoxelPageResolution))
		{
			VoxelWorldSize = MaxExtent / float(VoxelPageResolution);
		}

		const float MinVoxelWorldSize = 0.01f; // 0.01mm
		OutMacroGroupVoxelSizeBuffer[MacroGroupId] = max(MinVoxelWorldSize, VoxelWorldSize);
	}
}

#endif

