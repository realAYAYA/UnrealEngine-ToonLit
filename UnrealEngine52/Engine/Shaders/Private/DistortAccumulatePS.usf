// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DistortionAccumulatePixelShader.usf: Pixel shader for accumulating distortion offsets
=============================================================================*/

#include "Common.ush"

// Reroute distortion pass uniform buffer.
#if SHADING_PATH_MOBILE
	#define MobileSceneTextures MobileDistortionPass.SceneTextures
	#define DistortionParams MobileDistortionPass.DistortionParams
#else
	#define SceneTexturesStruct DistortionPass.SceneTextures
	#define DistortionParams DistortionPass.DistortionParams
#endif

#include "SceneTexturesCommon.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"
#include "DistortionCommon.ush"

// STRATA_TODO enable distortion on mobile.
#if STRATA_ENABLED && (!MATERIAL_IS_STRATA || SHADING_PATH_MOBILE)
#undef STRATA_ENABLED
#define STRATA_ENABLED 0
#endif

#if STRATA_ENABLED
#include "Strata/StrataEvaluation.ush"
#endif

void ClipOccludedPixel(float PixelZ, float SceneZ)
{
#if	HAS_INVERTED_Z_BUFFER
	float ClipDepth = PixelZ - SceneZ;
#else
	float ClipDepth = SceneZ - PixelZ;
#endif
	clip(ClipDepth);
}

/** output distortion offsets as color so they can be accumulated (via blending) */
void Main(
	FVertexFactoryInterpolantsVSToPS Interpolants,
	float4	PixelPosition	: TEXCOORD6,
	in float4 SvPosition	: SV_Position
	OPTIONAL_IsFrontFace,
	out float4 OutColor		: SV_Target0
#if STRATA_ENABLED
	,
	out float2 OutVarianceCoverage : SV_Target1
	,
	out float  OutClosestDepthMeter : SV_Target2
#endif
	)
{
#if INSTANCED_STEREO
	const uint EyeIndex = Interpolants.EyeIndex;
	ResolvedView = ResolveView(Interpolants.EyeIndex);
#else
	const uint EyeIndex = 0;
	ResolvedView = ResolveView();
#endif

	// material parameter inputs
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;
	CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, SvPosition, bIsFrontFace);

#if SHADING_PATH_MOBILE && MATERIAL_SHOULD_DISABLE_DEPTH_TEST==0
	// Mobile specific: 
	// distortion primtitives rendered without depth testing
	// discard pixels that are hidden by manually comparing them to a scene depth
	float2 BufferUV = SvPositionToBufferUV(SvPosition);
	ClipOccludedPixel(SvPosition.z, LookupDeviceZ(BufferUV));
#endif
	
	// material distortion offset
	half3 Normal = GetMaterialNormal(MaterialParameters, PixelMaterialInputs);

	// Prevent silhouettes from geometry that is in front of distortion from being seen in the distortion 
	float2 NDC = (MaterialParameters.ScreenPosition.xy / MaterialParameters.ScreenPosition.w);
	float2 ScreenUV = NDC * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz;

	FMaterialRefractionData RefractionData = GetMaterialRefraction(PixelMaterialInputs);


#if STRATA_ENABLED

	FStrataData StrataData = PixelMaterialInputs.FrontMaterial;

	FStrataAddressing NullStrataAddressing = (FStrataAddressing)0;	// Fake unused in StrataCreateBSDFContext when using Forward inline shading

	FStrataPixelHeader StrataPixelHeader = InitialiseStrataPixelHeader();
	StrataPixelHeader.StrataTree = MaterialParameters.StrataTree;
	StrataPixelHeader.BSDFCount = MaterialParameters.StrataTree.BSDFCount;
	StrataPixelHeader.SharedLocalBases = MaterialParameters.SharedLocalBases;

	// Retrieve rough refraction variance
	float Sigma = 0.0f;
	float3 RefractionWorldNormal = MaterialParameters.CameraVector;
	FStrataTree StrataTree = StrataPixelHeader.StrataTree;
	if (StrataTree.BSDFCount > 0)
	{
		const float3 V = MaterialParameters.CameraVector;

		// Update tree (coverage/transmittance/luminace weights)
		const FStrataIntegrationSettings Settings = InitStrataIntegrationSettings(false /*bForceFullyRough*/, Strata.bRoughDiffuse /*bRoughDiffuseEnabled*/, Strata.PeelLayersAboveDepth, Strata.bRoughnessTracking);
		StrataUpdateTree(NullStrataAddressing, StrataPixelHeader, StrataTree, V, Settings);

		RefractionWorldNormal = StrataTree.Operators[StrataData.OperatorIndex].TopDownRefractionWorldNormal;

		FStrataLobeStatistic RefractionLobeStat = StrataTree.Operators[StrataData.OperatorIndex].TopDownRefractionLobeStat;

		Sigma = RefractionLobeStat.Sigma;
	}

	// We accumulate F0 only from the top layer to evaluate the material F0 used to evaluate distortion
	float3 TopF0 = 0.0f;
	STRATA_UNROLL_N(STRATA_CLAMPED_BSDF_COUNT)
	for (int BSDFIdx = 0; BSDFIdx < StrataTree.BSDFCount; ++BSDFIdx)
	{
	#define BSDF StrataTree.BSDFs[BSDFIdx]
		const bool bIsVisible = StrataIsBSDFVisible(BSDF);
		if (bIsVisible)
		{
			TopF0 += BSDF.TopLayerDataWeight * StrataGetBSDFSpecularF0(BSDF);
		}
	#undef BSDF
	}
	TopF0 = SanitizeF0(TopF0);	// Sanitize, in case a Add node has been used

	const FStrataOperator RootOperator	= StrataTree.Operators[StrataData.OperatorIndex];
	const float RefractionCoverage		= RootOperator.Coverage;														// Coverage of the material
	const float RefractionDepthMeter	= length(MaterialParameters.WorldPosition_CamRelative) * CENTIMETER_TO_METER;	// Distance for camera in meters
	const float RefractionLobeVariance	= Sigma;																		// The lobe variance that can be added to in the en recover a single lobe.

	// Write out variance (as this is more linear to accumulate than roughness).
	OutVarianceCoverage = float2(RefractionLobeVariance, RefractionCoverage);
	OutClosestDepthMeter = RefractionDepthMeter;

	// Only allow clipping if roughness is close to 0.
	const bool TryToClip = false;  //OutVarianceCoverage.x < 0.01f; // STRATA_TODO || RefractionCoverage <= 0.0f;	// Have an option to account for coverage or not?, ignored by default

	// Compute UV distortion
	float2 BufferUVDistortion = ComputeBufferUVDistortion(
		MaterialParameters, PixelMaterialInputs, ResolvedView,
		RefractionWorldNormal, DielectricF0RGBToIor(TopF0),
		DistortionParams, ScreenUV, RefractionData, TryToClip, EyeIndex);

	// Sample depth at distortion offset
	float2 DistortBufferUV = ScreenUV + BufferUVDistortion;

#else // STRATA_ENABLED

	float3 BaseColor = GetMaterialBaseColor(PixelMaterialInputs);
	float  Metallic = GetMaterialMetallic(PixelMaterialInputs);
	float  Specular = GetMaterialSpecular(PixelMaterialInputs);
	float3 F0 = ComputeF0(Specular, BaseColor, Metallic);
	float MaterialIOR = DielectricF0RGBToIor(F0);

	// Compute UV distortion
	float2 BufferUVDistortion = ComputeBufferUVDistortion(
		MaterialParameters, PixelMaterialInputs, ResolvedView,
		MaterialParameters.WorldNormal, MaterialIOR,
		DistortionParams, ScreenUV, RefractionData, true, EyeIndex);

	// Sample depth at distortion offset
	float2 DistortBufferUV = ScreenUV + BufferUVDistortion;


#endif // STRATA_ENABLED

	float DistortSceneDepth = CalcSceneDepth(DistortBufferUV);

	// Post process UV distortion according to depth
	PostProcessUVDistortion(MaterialParameters, PixelMaterialInputs, DistortSceneDepth, BufferUVDistortion, RefractionData);

	// store positive and negative offsets separately
	float2 PosOffset = max(BufferUVDistortion,0);
	float2 NegOffset = abs(min(BufferUVDistortion,0));

	// output positives in R|G channels and negatives in B|A channels
	OutColor = float4(PosOffset.x,PosOffset.y,NegOffset.x,NegOffset.y);
}


